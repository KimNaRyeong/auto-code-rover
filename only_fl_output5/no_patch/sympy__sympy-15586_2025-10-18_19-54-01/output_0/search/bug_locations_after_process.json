[
    {
        "rel_file_path": "sympy/utilities/lambdify.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.4/sympy/utilities/lambdify.py",
        "start": 170,
        "end": 499,
        "class_name": null,
        "method_name": "lambdify",
        "code": "170 def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n171              dummify=False):\n172     \"\"\"\n173     Returns an anonymous function for fast calculation of numerical values.\n174 \n175     If not specified differently by the user, ``modules`` defaults to\n176     ``[\"numpy\"]`` if NumPy is installed, and ``[\"math\", \"mpmath\", \"sympy\"]``\n177     if it isn't, that is, SymPy functions are replaced as far as possible by\n178     either ``numpy`` functions if available, and Python's standard library\n179     ``math``, or ``mpmath`` functions otherwise. To change this behavior, the\n180     \"modules\" argument can be used. It accepts:\n181 \n182      - the strings \"math\", \"mpmath\", \"numpy\", \"numexpr\", \"sympy\", \"tensorflow\"\n183      - any modules (e.g. math)\n184      - dictionaries that map names of sympy functions to arbitrary functions\n185      - lists that contain a mix of the arguments above, with higher priority\n186        given to entries appearing first.\n187 \n188     .. warning::\n189         Note that this function uses ``eval``, and thus shouldn't be used on\n190         unsanitized input.\n191 \n192     Arguments in the provided expression that are not valid Python identifiers\n193     are substitued with dummy symbols. This allows for applied functions\n194     (e.g. f(t)) to be supplied as arguments. Call the function with\n195     dummify=True to replace all arguments with dummy symbols (if `args` is\n196     not a string) - for example, to ensure that the arguments do not\n197     redefine any built-in names.\n198 \n199     For functions involving large array calculations, numexpr can provide a\n200     significant speedup over numpy.  Please note that the available functions\n201     for numexpr are more limited than numpy but can be expanded with\n202     implemented_function and user defined subclasses of Function.  If specified,\n203     numexpr may be the only option in modules. The official list of numexpr\n204     functions can be found at:\n205     https://github.com/pydata/numexpr#supported-functions\n206 \n207     In previous releases ``lambdify`` replaced ``Matrix`` with ``numpy.matrix``\n208     by default. As of release 1.0 ``numpy.array`` is the default.\n209     To get the old default behavior you must pass in ``[{'ImmutableDenseMatrix':\n210     numpy.matrix}, 'numpy']`` to the ``modules`` kwarg.\n211 \n212     >>> from sympy import lambdify, Matrix\n213     >>> from sympy.abc import x, y\n214     >>> import numpy\n215     >>> array2mat = [{'ImmutableDenseMatrix': numpy.matrix}, 'numpy']\n216     >>> f = lambdify((x, y), Matrix([x, y]), modules=array2mat)\n217     >>> f(1, 2)\n218     matrix([[1],\n219             [2]])\n220 \n221     Usage\n222     =====\n223 \n224     (1) Use one of the provided modules:\n225 \n226         >>> from sympy import sin, tan, gamma\n227         >>> from sympy.abc import x, y\n228         >>> f = lambdify(x, sin(x), \"math\")\n229 \n230         Attention: Functions that are not in the math module will throw a name\n231                    error when the function definition is evaluated! So this\n232                    would be better:\n233 \n234         >>> f = lambdify(x, sin(x)*gamma(x), (\"math\", \"mpmath\", \"sympy\"))\n235 \n236     (2) Use some other module:\n237 \n238         >>> import numpy\n239         >>> f = lambdify((x,y), tan(x*y), numpy)\n240 \n241         Attention: There are naming differences between numpy and sympy. So if\n242                    you simply take the numpy module, e.g. sympy.atan will not be\n243                    translated to numpy.arctan. Use the modified module instead\n244                    by passing the string \"numpy\":\n245 \n246         >>> f = lambdify((x,y), tan(x*y), \"numpy\")\n247         >>> f(1, 2)\n248         -2.18503986326\n249         >>> from numpy import array\n250         >>> f(array([1, 2, 3]), array([2, 3, 5]))\n251         [-2.18503986 -0.29100619 -0.8559934 ]\n252 \n253         In the above examples, the generated functions can accept scalar\n254         values or numpy arrays as arguments.  However, in some cases\n255         the generated function relies on the input being a numpy array:\n256 \n257         >>> from sympy import Piecewise\n258         >>> f = lambdify(x, Piecewise((x, x <= 1), (1/x, x > 1)), \"numpy\")\n259         >>> f(array([-1, 0, 1, 2]))\n260         [-1.   0.   1.   0.5]\n261         >>> f(0)\n262         Traceback (most recent call last):\n263             ...\n264         ZeroDivisionError: division by zero\n265 \n266         In such cases, the input should be wrapped in a numpy array:\n267         >>> float(f(array([0])))\n268         0.0\n269 \n270         Or if numpy functionality is not required another module can be used:\n271         >>> f = lambdify(x, Piecewise((x, x <= 1), (1/x, x > 1)), \"math\")\n272         >>> f(0)\n273         0\n274 \n275     (3) Use a dictionary defining custom functions:\n276 \n277         >>> def my_cool_function(x): return 'sin(%s) is cool' % x\n278         >>> myfuncs = {\"sin\" : my_cool_function}\n279         >>> f = lambdify(x, sin(x), myfuncs); f(1)\n280         'sin(1) is cool'\n281 \n282     Examples\n283     ========\n284 \n285     >>> from sympy.utilities.lambdify import implemented_function\n286     >>> from sympy import sqrt, sin, Matrix\n287     >>> from sympy import Function\n288     >>> from sympy.abc import w, x, y, z\n289 \n290     >>> f = lambdify(x, x**2)\n291     >>> f(2)\n292     4\n293     >>> f = lambdify((x, y, z), [z, y, x])\n294     >>> f(1,2,3)\n295     [3, 2, 1]\n296     >>> f = lambdify(x, sqrt(x))\n297     >>> f(4)\n298     2.0\n299     >>> f = lambdify((x, y), sin(x*y)**2)\n300     >>> f(0, 5)\n301     0.0\n302     >>> row = lambdify((x, y), Matrix((x, x + y)).T, modules='sympy')\n303     >>> row(1, 2)\n304     Matrix([[1, 3]])\n305 \n306     Tuple arguments are handled and the lambdified function should\n307     be called with the same type of arguments as were used to create\n308     the function.:\n309 \n310     >>> f = lambdify((x, (y, z)), x + y)\n311     >>> f(1, (2, 4))\n312     3\n313 \n314     A more robust way of handling this is to always work with flattened\n315     arguments:\n316 \n317     >>> from sympy.utilities.iterables import flatten\n318     >>> args = w, (x, (y, z))\n319     >>> vals = 1, (2, (3, 4))\n320     >>> f = lambdify(flatten(args), w + x + y + z)\n321     >>> f(*flatten(vals))\n322     10\n323 \n324     Functions present in `expr` can also carry their own numerical\n325     implementations, in a callable attached to the ``_imp_``\n326     attribute.  Usually you attach this using the\n327     ``implemented_function`` factory:\n328 \n329     >>> f = implemented_function(Function('f'), lambda x: x+1)\n330     >>> func = lambdify(x, f(x))\n331     >>> func(4)\n332     5\n333 \n334     ``lambdify`` always prefers ``_imp_`` implementations to implementations\n335     in other namespaces, unless the ``use_imps`` input parameter is False.\n336 \n337     Usage with Tensorflow module:\n338 \n339     >>> import tensorflow as tf\n340     >>> f = Max(x, sin(x))\n341     >>> func = lambdify(x, f, 'tensorflow')\n342     >>> result = func(tf.constant(1.0))\n343     >>> result # a tf.Tensor representing the result of the calculation\n344     <tf.Tensor 'Maximum:0' shape=() dtype=float32>\n345     >>> sess = tf.Session()\n346     >>> sess.run(result) # compute result\n347     1.0\n348     >>> var = tf.Variable(1.0)\n349     >>> sess.run(tf.global_variables_initializer())\n350     >>> sess.run(func(var)) # also works for tf.Variable and tf.Placeholder\n351     1.0\n352     >>> tensor = tf.constant([[1.0, 2.0], [3.0, 4.0]]) # works with any shape tensor\n353     >>> sess.run(func(tensor))\n354     array([[ 1.,  2.],\n355            [ 3.,  4.]], dtype=float32)\n356 \n357     \"\"\"\n358     from sympy.core.symbol import Symbol\n359     from sympy.utilities.iterables import flatten\n360 \n361     # If the user hasn't specified any modules, use what is available.\n362     module_provided = True\n363     if modules is None:\n364         module_provided = False\n365 \n366         try:\n367             _import(\"scipy\")\n368         except ImportError:\n369             try:\n370                 _import(\"numpy\")\n371             except ImportError:\n372                 # Use either numpy (if available) or python.math where possible.\n373                 # XXX: This leads to different behaviour on different systems and\n374                 #      might be the reason for irreproducible errors.\n375                 modules = [\"math\", \"mpmath\", \"sympy\"]\n376             else:\n377                 modules = [\"numpy\"]\n378         else:\n379             modules = [\"scipy\", \"numpy\"]\n380 \n381     # Get the needed namespaces.\n382     namespaces = []\n383     # First find any function implementations\n384     if use_imps:\n385         namespaces.append(_imp_namespace(expr))\n386     # Check for dict before iterating\n387     if isinstance(modules, (dict, str)) or not hasattr(modules, '__iter__'):\n388         namespaces.append(modules)\n389     else:\n390         # consistency check\n391         if _module_present('numexpr', modules) and len(modules) > 1:\n392             raise TypeError(\"numexpr must be the only item in 'modules'\")\n393         namespaces += list(modules)\n394     # fill namespace with first having highest priority\n395     namespace = {}\n396     for m in namespaces[::-1]:\n397         buf = _get_namespace(m)\n398         namespace.update(buf)\n399 \n400     if hasattr(expr, \"atoms\"):\n401         #Try if you can extract symbols from the expression.\n402         #Move on if expr.atoms in not implemented.\n403         syms = expr.atoms(Symbol)\n404         for term in syms:\n405             namespace.update({str(term): term})\n406 \n407     if printer is None:\n408         if _module_present('mpmath', namespaces):\n409             from sympy.printing.pycode import MpmathPrinter as Printer\n410         elif _module_present('scipy', namespaces):\n411             from sympy.printing.pycode import SciPyPrinter as Printer\n412         elif _module_present('numpy', namespaces):\n413             from sympy.printing.pycode import NumPyPrinter as Printer\n414         elif _module_present('numexpr', namespaces):\n415             from sympy.printing.lambdarepr import NumExprPrinter as Printer\n416         elif _module_present('tensorflow', namespaces):\n417             from sympy.printing.tensorflow import TensorflowPrinter as Printer\n418         elif _module_present('sympy', namespaces):\n419             from sympy.printing.pycode import SymPyPrinter as Printer\n420         else:\n421             from sympy.printing.pycode import PythonCodePrinter as Printer\n422         user_functions = {}\n423         for m in namespaces[::-1]:\n424             if isinstance(m, dict):\n425                 for k in m:\n426                     user_functions[k] = k\n427         printer = Printer({'fully_qualified_modules': False, 'inline': True,\n428                            'allow_unknown_functions': True,\n429                            'user_functions': user_functions})\n430 \n431     # Get the names of the args, for creating a docstring\n432     if not iterable(args):\n433         args = (args,)\n434     names = []\n435     # Grab the callers frame, for getting the names by inspection (if needed)\n436     callers_local_vars = inspect.currentframe().f_back.f_locals.items()\n437     for n, var in enumerate(args):\n438         if hasattr(var, 'name'):\n439             names.append(var.name)\n440         else:\n441             # It's an iterable. Try to get name by inspection of calling frame.\n442             name_list = [var_name for var_name, var_val in callers_local_vars\n443                     if var_val is var]\n444             if len(name_list) == 1:\n445                 names.append(name_list[0])\n446             else:\n447                 # Cannot infer name with certainty. arg_# will have to do.\n448                 names.append('arg_' + str(n))\n449 \n450     imp_mod_lines = []\n451     for mod, keys in (getattr(printer, 'module_imports', None) or {}).items():\n452         for k in keys:\n453             if k not in namespace:\n454                 imp_mod_lines.append(\"from %s import %s\" % (mod, k))\n455     for ln in imp_mod_lines:\n456         exec_(ln, {}, namespace)\n457 \n458     # Provide lambda expression with builtins, and compatible implementation of range\n459     namespace.update({'builtins':builtins, 'range':range})\n460 \n461     # Create the function definition code and execute it\n462 \n463     funcname = '_lambdifygenerated'\n464 \n465     if _module_present('tensorflow', namespaces):\n466         funcprinter = _TensorflowEvaluatorPrinter(printer, dummify)\n467     else:\n468         funcprinter = _EvaluatorPrinter(printer, dummify)\n469 \n470     funcstr = funcprinter.doprint(funcname, args, expr)\n471 \n472     funclocals = {}\n473     global _lambdify_generated_counter\n474     filename = '<lambdifygenerated-%s>' % _lambdify_generated_counter\n475     _lambdify_generated_counter += 1\n476     c = compile(funcstr, filename, 'exec')\n477     exec_(c, namespace, funclocals)\n478     # mtime has to be None or else linecache.checkcache will remove it\n479     linecache.cache[filename] = (len(funcstr), None, funcstr.splitlines(True), filename)\n480 \n481     func = funclocals[funcname]\n482 \n483     # Apply the docstring\n484     sig = \"func({0})\".format(\", \".join(str(i) for i in names))\n485     sig = textwrap.fill(sig, subsequent_indent=' '*8)\n486     expr_str = str(expr)\n487     if len(expr_str) > 78:\n488         expr_str = textwrap.wrap(expr_str, 75)[0] + '...'\n489     func.__doc__ = (\n490         \"Created with lambdify. Signature:\\n\\n\"\n491         \"{sig}\\n\\n\"\n492         \"Expression:\\n\\n\"\n493         \"{expr}\\n\\n\"\n494         \"Source code:\\n\\n\"\n495         \"{src}\\n\\n\"\n496         \"Imported modules:\\n\\n\"\n497         \"{imp_mods}\"\n498         ).format(sig=sig, expr=expr_str, src=funcstr, imp_mods='\\n'.join(imp_mod_lines))\n499     return func\n",
        "intended_behavior": "lambdify should be enhanced to specifically detect and properly translate symbolic matrix inversion expressions (such as those involving MatrixSymbol and the **-1 operation for inversion) into numpy operations (numpy.linalg.inv or equivalent). The enhancement should: Introduce a check for matrix inversion operations within the symbolic expressions passed to lambdify. Translate such symbolic expressions accurately into numpy code that performs the numerical matrix inversion, ensuring that the dimensions and types of the matrices are compatible with numpy's expectations. Maintain existing functionality for all other types of expressions (scalar, vector, etc.), ensuring that this specific enhancement does not adversely affect the handling of non-matrix expressions."
    }
]