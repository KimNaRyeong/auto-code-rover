[
    {
        "rel_file_path": "django/core/files/uploadhandler.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__4.0/django/core/files/uploadhandler.py",
        "start": 172,
        "end": 179,
        "class_name": "MemoryFileUploadHandler",
        "method_name": "handle_raw_input",
        "code": "172     def handle_raw_input(self, input_data, META, content_length, boundary, encoding=None):\n173         \"\"\"\n174         Use the content_length to signal whether or not this handler should be\n175         used.\n176         \"\"\"\n177         # Check the content-length header to see if we should\n178         # If the post is too large, we cannot use the Memory handler.\n179         self.activated = content_length <= settings.FILE_UPLOAD_MAX_MEMORY_SIZE\n",
        "intended_behavior": "Incorporate a check or exception handling around the storage operations to accurately report filesystem-related errors during the upload process. If a filesystem error is detected, such as inability to create or write to the FILE_UPLOAD_TEMP_DIR, raise a specific exception related to file storage instead of indirectly causing a CSRF verification failure. Preserve the existing functionality of determining whether the upload should be kept in memory or moved to filesystem based on size."
    },
    {
        "rel_file_path": "django/core/files/uploadhandler.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__4.0/django/core/files/uploadhandler.py",
        "start": 167,
        "end": 208,
        "class_name": "MemoryFileUploadHandler",
        "method_name": null,
        "code": "167 class MemoryFileUploadHandler(FileUploadHandler):\n168     \"\"\"\n169     File upload handler to stream uploads into memory (used for small files).\n170     \"\"\"\n171 \n172     def handle_raw_input(self, input_data, META, content_length, boundary, encoding=None):\n173         \"\"\"\n174         Use the content_length to signal whether or not this handler should be\n175         used.\n176         \"\"\"\n177         # Check the content-length header to see if we should\n178         # If the post is too large, we cannot use the Memory handler.\n179         self.activated = content_length <= settings.FILE_UPLOAD_MAX_MEMORY_SIZE\n180 \n181     def new_file(self, *args, **kwargs):\n182         super().new_file(*args, **kwargs)\n183         if self.activated:\n184             self.file = BytesIO()\n185             raise StopFutureHandlers()\n186 \n187     def receive_data_chunk(self, raw_data, start):\n188         \"\"\"Add the data to the BytesIO file.\"\"\"\n189         if self.activated:\n190             self.file.write(raw_data)\n191         else:\n192             return raw_data\n193 \n194     def file_complete(self, file_size):\n195         \"\"\"Return a file object if this handler is activated.\"\"\"\n196         if not self.activated:\n197             return\n198 \n199         self.file.seek(0)\n200         return InMemoryUploadedFile(\n201             file=self.file,\n202             field_name=self.field_name,\n203             name=self.file_name,\n204             content_type=self.content_type,\n205             size=file_size,\n206             charset=self.charset,\n207             content_type_extra=self.content_type_extra\n208         )\n",
        "intended_behavior": "This class provides additional context to the issue."
    },
    {
        "rel_file_path": "django/middleware/csrf.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__4.0/django/middleware/csrf.py",
        "start": 1,
        "end": 461,
        "class_name": null,
        "method_name": null,
        "code": "1 \"\"\"\n2 Cross Site Request Forgery Middleware.\n3 \n4 This module provides a middleware that implements protection\n5 against request forgeries from other sites.\n6 \"\"\"\n7 import logging\n8 import string\n9 from collections import defaultdict\n10 from urllib.parse import urlparse\n11 \n12 from django.conf import settings\n13 from django.core.exceptions import DisallowedHost, ImproperlyConfigured\n14 from django.http.request import HttpHeaders\n15 from django.urls import get_callable\n16 from django.utils.cache import patch_vary_headers\n17 from django.utils.crypto import constant_time_compare, get_random_string\n18 from django.utils.deprecation import MiddlewareMixin\n19 from django.utils.functional import cached_property\n20 from django.utils.http import is_same_domain\n21 from django.utils.log import log_response\n22 from django.utils.regex_helper import _lazy_re_compile\n23 \n24 logger = logging.getLogger('django.security.csrf')\n25 # This matches if any character is not in CSRF_ALLOWED_CHARS.\n26 invalid_token_chars_re = _lazy_re_compile('[^a-zA-Z0-9]')\n27 \n28 REASON_BAD_ORIGIN = \"Origin checking failed - %s does not match any trusted origins.\"\n29 REASON_NO_REFERER = \"Referer checking failed - no Referer.\"\n30 REASON_BAD_REFERER = \"Referer checking failed - %s does not match any trusted origins.\"\n31 REASON_NO_CSRF_COOKIE = \"CSRF cookie not set.\"\n32 REASON_CSRF_TOKEN_MISSING = 'CSRF token missing.'\n33 REASON_MALFORMED_REFERER = \"Referer checking failed - Referer is malformed.\"\n34 REASON_INSECURE_REFERER = \"Referer checking failed - Referer is insecure while host is secure.\"\n35 # The reason strings below are for passing to InvalidTokenFormat. They are\n36 # phrases without a subject because they can be in reference to either the CSRF\n37 # cookie or non-cookie token.\n38 REASON_INCORRECT_LENGTH = 'has incorrect length'\n39 REASON_INVALID_CHARACTERS = 'has invalid characters'\n40 \n41 CSRF_SECRET_LENGTH = 32\n42 CSRF_TOKEN_LENGTH = 2 * CSRF_SECRET_LENGTH\n43 CSRF_ALLOWED_CHARS = string.ascii_letters + string.digits\n44 CSRF_SESSION_KEY = '_csrftoken'\n45 \n46 \n47 def _get_failure_view():\n48     \"\"\"Return the view to be used for CSRF rejections.\"\"\"\n49     return get_callable(settings.CSRF_FAILURE_VIEW)\n50 \n51 \n52 def _get_new_csrf_string():\n53     return get_random_string(CSRF_SECRET_LENGTH, allowed_chars=CSRF_ALLOWED_CHARS)\n54 \n55 \n56 def _mask_cipher_secret(secret):\n57     \"\"\"\n58     Given a secret (assumed to be a string of CSRF_ALLOWED_CHARS), generate a\n59     token by adding a mask and applying it to the secret.\n60     \"\"\"\n61     mask = _get_new_csrf_string()\n62     chars = CSRF_ALLOWED_CHARS\n63     pairs = zip((chars.index(x) for x in secret), (chars.index(x) for x in mask))\n64     cipher = ''.join(chars[(x + y) % len(chars)] for x, y in pairs)\n65     return mask + cipher\n66 \n67 \n68 def _unmask_cipher_token(token):\n69     \"\"\"\n70     Given a token (assumed to be a string of CSRF_ALLOWED_CHARS, of length\n71     CSRF_TOKEN_LENGTH, and that its first half is a mask), use it to decrypt\n72     the second half to produce the original secret.\n73     \"\"\"\n74     mask = token[:CSRF_SECRET_LENGTH]\n75     token = token[CSRF_SECRET_LENGTH:]\n76     chars = CSRF_ALLOWED_CHARS\n77     pairs = zip((chars.index(x) for x in token), (chars.index(x) for x in mask))\n78     return ''.join(chars[x - y] for x, y in pairs)  # Note negative values are ok\n79 \n80 \n81 def _get_new_csrf_token():\n82     return _mask_cipher_secret(_get_new_csrf_string())\n83 \n84 \n85 def get_token(request):\n86     \"\"\"\n87     Return the CSRF token required for a POST form. The token is an\n88     alphanumeric value. A new token is created if one is not already set.\n89 \n90     A side effect of calling this function is to make the csrf_protect\n91     decorator and the CsrfViewMiddleware add a CSRF cookie and a 'Vary: Cookie'\n92     header to the outgoing response.  For this reason, you may need to use this\n93     function lazily, as is done by the csrf context processor.\n94     \"\"\"\n95     if \"CSRF_COOKIE\" not in request.META:\n96         csrf_secret = _get_new_csrf_string()\n97         request.META[\"CSRF_COOKIE\"] = _mask_cipher_secret(csrf_secret)\n98     else:\n99         csrf_secret = _unmask_cipher_token(request.META[\"CSRF_COOKIE\"])\n100     request.META[\"CSRF_COOKIE_USED\"] = True\n101     return _mask_cipher_secret(csrf_secret)\n102 \n103 \n104 def rotate_token(request):\n105     \"\"\"\n106     Change the CSRF token in use for a request - should be done on login\n107     for security purposes.\n108     \"\"\"\n109     request.META.update({\n110         \"CSRF_COOKIE_USED\": True,\n111         \"CSRF_COOKIE\": _get_new_csrf_token(),\n112     })\n113     request.csrf_cookie_needs_reset = True\n114 \n115 \n116 class InvalidTokenFormat(Exception):\n117     def __init__(self, reason):\n118         self.reason = reason\n119 \n120 \n121 def _sanitize_token(token):\n122     if len(token) not in (CSRF_TOKEN_LENGTH, CSRF_SECRET_LENGTH):\n123         raise InvalidTokenFormat(REASON_INCORRECT_LENGTH)\n124     # Make sure all characters are in CSRF_ALLOWED_CHARS.\n125     if invalid_token_chars_re.search(token):\n126         raise InvalidTokenFormat(REASON_INVALID_CHARACTERS)\n127     if len(token) == CSRF_SECRET_LENGTH:\n128         # Older Django versions set cookies to values of CSRF_SECRET_LENGTH\n129         # alphanumeric characters. For backwards compatibility, accept\n130         # such values as unmasked secrets.\n131         # It's easier to mask here and be consistent later, rather than add\n132         # different code paths in the checks, although that might be a tad more\n133         # efficient.\n134         return _mask_cipher_secret(token)\n135     return token\n136 \n137 \n138 def _compare_masked_tokens(request_csrf_token, csrf_token):\n139     # Assume both arguments are sanitized -- that is, strings of\n140     # length CSRF_TOKEN_LENGTH, all CSRF_ALLOWED_CHARS.\n141     return constant_time_compare(\n142         _unmask_cipher_token(request_csrf_token),\n143         _unmask_cipher_token(csrf_token),\n144     )\n145 \n146 \n147 class RejectRequest(Exception):\n148     def __init__(self, reason):\n149         self.reason = reason\n150 \n151 \n152 class CsrfViewMiddleware(MiddlewareMixin):\n153     \"\"\"\n154     Require a present and correct csrfmiddlewaretoken for POST requests that\n155     have a CSRF cookie, and set an outgoing CSRF cookie.\n156 \n157     This middleware should be used in conjunction with the {% csrf_token %}\n158     template tag.\n159     \"\"\"\n160     @cached_property\n161     def csrf_trusted_origins_hosts(self):\n162         return [\n163             urlparse(origin).netloc.lstrip('*')\n164             for origin in settings.CSRF_TRUSTED_ORIGINS\n165         ]\n166 \n167     @cached_property\n168     def allowed_origins_exact(self):\n169         return {\n170             origin for origin in settings.CSRF_TRUSTED_ORIGINS\n171             if '*' not in origin\n172         }\n173 \n174     @cached_property\n175     def allowed_origin_subdomains(self):\n176         \"\"\"\n177         A mapping of allowed schemes to list of allowed netlocs, where all\n178         subdomains of the netloc are allowed.\n179         \"\"\"\n180         allowed_origin_subdomains = defaultdict(list)\n181         for parsed in (urlparse(origin) for origin in settings.CSRF_TRUSTED_ORIGINS if '*' in origin):\n182             allowed_origin_subdomains[parsed.scheme].append(parsed.netloc.lstrip('*'))\n183         return allowed_origin_subdomains\n184 \n185     # The _accept and _reject methods currently only exist for the sake of the\n186     # requires_csrf_token decorator.\n187     def _accept(self, request):\n188         # Avoid checking the request twice by adding a custom attribute to\n189         # request.  This will be relevant when both decorator and middleware\n190         # are used.\n191         request.csrf_processing_done = True\n192         return None\n193 \n194     def _reject(self, request, reason):\n195         response = _get_failure_view()(request, reason=reason)\n196         log_response(\n197             'Forbidden (%s): %s', reason, request.path,\n198             response=response,\n199             request=request,\n200             logger=logger,\n201         )\n202         return response\n203 \n204     def _get_token(self, request):\n205         if settings.CSRF_USE_SESSIONS:\n206             try:\n207                 return request.session.get(CSRF_SESSION_KEY)\n208             except AttributeError:\n209                 raise ImproperlyConfigured(\n210                     'CSRF_USE_SESSIONS is enabled, but request.session is not '\n211                     'set. SessionMiddleware must appear before CsrfViewMiddleware '\n212                     'in MIDDLEWARE.'\n213                 )\n214         else:\n215             try:\n216                 cookie_token = request.COOKIES[settings.CSRF_COOKIE_NAME]\n217             except KeyError:\n218                 return None\n219 \n220             # This can raise InvalidTokenFormat.\n221             csrf_token = _sanitize_token(cookie_token)\n222 \n223             if csrf_token != cookie_token:\n224                 # Then the cookie token had length CSRF_SECRET_LENGTH, so flag\n225                 # to replace it with the masked version.\n226                 request.csrf_cookie_needs_reset = True\n227             return csrf_token\n228 \n229     def _set_token(self, request, response):\n230         if settings.CSRF_USE_SESSIONS:\n231             if request.session.get(CSRF_SESSION_KEY) != request.META['CSRF_COOKIE']:\n232                 request.session[CSRF_SESSION_KEY] = request.META['CSRF_COOKIE']\n233         else:\n234             response.set_cookie(\n235                 settings.CSRF_COOKIE_NAME,\n236                 request.META['CSRF_COOKIE'],\n237                 max_age=settings.CSRF_COOKIE_AGE,\n238                 domain=settings.CSRF_COOKIE_DOMAIN,\n239                 path=settings.CSRF_COOKIE_PATH,\n240                 secure=settings.CSRF_COOKIE_SECURE,\n241                 httponly=settings.CSRF_COOKIE_HTTPONLY,\n242                 samesite=settings.CSRF_COOKIE_SAMESITE,\n243             )\n244             # Set the Vary header since content varies with the CSRF cookie.\n245             patch_vary_headers(response, ('Cookie',))\n246 \n247     def _origin_verified(self, request):\n248         request_origin = request.META['HTTP_ORIGIN']\n249         try:\n250             good_host = request.get_host()\n251         except DisallowedHost:\n252             pass\n253         else:\n254             good_origin = '%s://%s' % (\n255                 'https' if request.is_secure() else 'http',\n256                 good_host,\n257             )\n258             if request_origin == good_origin:\n259                 return True\n260         if request_origin in self.allowed_origins_exact:\n261             return True\n262         try:\n263             parsed_origin = urlparse(request_origin)\n264         except ValueError:\n265             return False\n266         request_scheme = parsed_origin.scheme\n267         request_netloc = parsed_origin.netloc\n268         return any(\n269             is_same_domain(request_netloc, host)\n270             for host in self.allowed_origin_subdomains.get(request_scheme, ())\n271         )\n272 \n273     def _check_referer(self, request):\n274         referer = request.META.get('HTTP_REFERER')\n275         if referer is None:\n276             raise RejectRequest(REASON_NO_REFERER)\n277 \n278         try:\n279             referer = urlparse(referer)\n280         except ValueError:\n281             raise RejectRequest(REASON_MALFORMED_REFERER)\n282 \n283         # Make sure we have a valid URL for Referer.\n284         if '' in (referer.scheme, referer.netloc):\n285             raise RejectRequest(REASON_MALFORMED_REFERER)\n286 \n287         # Ensure that our Referer is also secure.\n288         if referer.scheme != 'https':\n289             raise RejectRequest(REASON_INSECURE_REFERER)\n290 \n291         if any(\n292             is_same_domain(referer.netloc, host)\n293             for host in self.csrf_trusted_origins_hosts\n294         ):\n295             return\n296         # Allow matching the configured cookie domain.\n297         good_referer = (\n298             settings.SESSION_COOKIE_DOMAIN\n299             if settings.CSRF_USE_SESSIONS\n300             else settings.CSRF_COOKIE_DOMAIN\n301         )\n302         if good_referer is None:\n303             # If no cookie domain is configured, allow matching the current\n304             # host:port exactly if it's permitted by ALLOWED_HOSTS.\n305             try:\n306                 # request.get_host() includes the port.\n307                 good_referer = request.get_host()\n308             except DisallowedHost:\n309                 raise RejectRequest(REASON_BAD_REFERER % referer.geturl())\n310         else:\n311             server_port = request.get_port()\n312             if server_port not in ('443', '80'):\n313                 good_referer = '%s:%s' % (good_referer, server_port)\n314 \n315         if not is_same_domain(referer.netloc, good_referer):\n316             raise RejectRequest(REASON_BAD_REFERER % referer.geturl())\n317 \n318     def _bad_token_message(self, reason, token_source):\n319         if token_source != 'POST':\n320             # Assume it is a settings.CSRF_HEADER_NAME value.\n321             header_name = HttpHeaders.parse_header_name(token_source)\n322             token_source = f'the {header_name!r} HTTP header'\n323         return f'CSRF token from {token_source} {reason}.'\n324 \n325     def _check_token(self, request):\n326         # Access csrf_token via self._get_token() as rotate_token() may have\n327         # been called by an authentication middleware during the\n328         # process_request() phase.\n329         try:\n330             csrf_token = self._get_token(request)\n331         except InvalidTokenFormat as exc:\n332             raise RejectRequest(f'CSRF cookie {exc.reason}.')\n333 \n334         if csrf_token is None:\n335             # No CSRF cookie. For POST requests, we insist on a CSRF cookie,\n336             # and in this way we can avoid all CSRF attacks, including login\n337             # CSRF.\n338             raise RejectRequest(REASON_NO_CSRF_COOKIE)\n339 \n340         # Check non-cookie token for match.\n341         request_csrf_token = ''\n342         if request.method == 'POST':\n343             try:\n344                 request_csrf_token = request.POST.get('csrfmiddlewaretoken', '')\n345             except OSError:\n346                 # Handle a broken connection before we've completed reading the\n347                 # POST data. process_view shouldn't raise any exceptions, so\n348                 # we'll ignore and serve the user a 403 (assuming they're still\n349                 # listening, which they probably aren't because of the error).\n350                 pass\n351 \n352         if request_csrf_token == '':\n353             # Fall back to X-CSRFToken, to make things easier for AJAX, and\n354             # possible for PUT/DELETE.\n355             try:\n356                 request_csrf_token = request.META[settings.CSRF_HEADER_NAME]\n357             except KeyError:\n358                 raise RejectRequest(REASON_CSRF_TOKEN_MISSING)\n359             token_source = settings.CSRF_HEADER_NAME\n360         else:\n361             token_source = 'POST'\n362 \n363         try:\n364             request_csrf_token = _sanitize_token(request_csrf_token)\n365         except InvalidTokenFormat as exc:\n366             reason = self._bad_token_message(exc.reason, token_source)\n367             raise RejectRequest(reason)\n368 \n369         if not _compare_masked_tokens(request_csrf_token, csrf_token):\n370             reason = self._bad_token_message('incorrect', token_source)\n371             raise RejectRequest(reason)\n372 \n373     def process_request(self, request):\n374         try:\n375             csrf_token = self._get_token(request)\n376         except InvalidTokenFormat:\n377             csrf_token = _get_new_csrf_token()\n378             request.csrf_cookie_needs_reset = True\n379 \n380         if csrf_token is not None:\n381             # Use same token next time.\n382             request.META['CSRF_COOKIE'] = csrf_token\n383 \n384     def process_view(self, request, callback, callback_args, callback_kwargs):\n385         if getattr(request, 'csrf_processing_done', False):\n386             return None\n387 \n388         # Wait until request.META[\"CSRF_COOKIE\"] has been manipulated before\n389         # bailing out, so that get_token still works\n390         if getattr(callback, 'csrf_exempt', False):\n391             return None\n392 \n393         # Assume that anything not defined as 'safe' by RFC7231 needs protection\n394         if request.method in ('GET', 'HEAD', 'OPTIONS', 'TRACE'):\n395             return self._accept(request)\n396 \n397         if getattr(request, '_dont_enforce_csrf_checks', False):\n398             # Mechanism to turn off CSRF checks for test suite. It comes after\n399             # the creation of CSRF cookies, so that everything else continues\n400             # to work exactly the same (e.g. cookies are sent, etc.), but\n401             # before any branches that call the _reject method.\n402             return self._accept(request)\n403 \n404         # Reject the request if the Origin header doesn't match an allowed\n405         # value.\n406         if 'HTTP_ORIGIN' in request.META:\n407             if not self._origin_verified(request):\n408                 return self._reject(request, REASON_BAD_ORIGIN % request.META['HTTP_ORIGIN'])\n409         elif request.is_secure():\n410             # If the Origin header wasn't provided, reject HTTPS requests if\n411             # the Referer header doesn't match an allowed value.\n412             #\n413             # Suppose user visits http://example.com/\n414             # An active network attacker (man-in-the-middle, MITM) sends a\n415             # POST form that targets https://example.com/detonate-bomb/ and\n416             # submits it via JavaScript.\n417             #\n418             # The attacker will need to provide a CSRF cookie and token, but\n419             # that's no problem for a MITM and the session-independent secret\n420             # we're using. So the MITM can circumvent the CSRF protection. This\n421             # is true for any HTTP connection, but anyone using HTTPS expects\n422             # better! For this reason, for https://example.com/ we need\n423             # additional protection that treats http://example.com/ as\n424             # completely untrusted. Under HTTPS, Barth et al. found that the\n425             # Referer header is missing for same-domain requests in only about\n426             # 0.2% of cases or less, so we can use strict Referer checking.\n427             try:\n428                 self._check_referer(request)\n429             except RejectRequest as exc:\n430                 return self._reject(request, exc.reason)\n431 \n432         try:\n433             self._check_token(request)\n434         except RejectRequest as exc:\n435             return self._reject(request, exc.reason)\n436 \n437         return self._accept(request)\n438 \n439     def process_response(self, request, response):\n440         # Send the CSRF cookie whenever the cookie is being used (even if the\n441         # client already has it) in order to renew the expiry timer, but only\n442         # if it hasn't already been sent during this request-response cycle.\n443         # Also, send the cookie no matter what if a reset was requested.\n444         if (\n445             getattr(request, 'csrf_cookie_needs_reset', False) or (\n446                 request.META.get('CSRF_COOKIE_USED') and\n447                 not getattr(response, 'csrf_cookie_set', False)\n448             )\n449         ):\n450             self._set_token(request, response)\n451             # Update state to prevent _set_token() from being unnecessarily\n452             # called again in process_response() by other instances of\n453             # CsrfViewMiddleware. This can happen e.g. when both a decorator\n454             # and middleware are used. However, the csrf_cookie_needs_reset\n455             # attribute is still respected in subsequent calls e.g. in case\n456             # rotate_token() is called in process_response() later by custom\n457             # middleware but before those subsequent calls.\n458             response.csrf_cookie_set = True\n459             request.csrf_cookie_needs_reset = False\n460 \n461         return response\n",
        "intended_behavior": "Modify the CSRF middleware to better handle exceptions that aren't directly related to CSRF token mismatches or absences, particularly those arising from filesystem interactions during file uploads. Ensure that CSRF verification failures are reported correctly as such, and other exceptions or errors (like those related to file storage or directory permissions) are not mistakenly reported as CSRF errors. This might involve adjusting error handling or exception catching in the middleware to discriminate between different types of errors more effectively."
    }
]