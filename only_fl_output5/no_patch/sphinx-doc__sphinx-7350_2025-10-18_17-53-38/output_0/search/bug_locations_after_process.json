[
    {
        "rel_file_path": "doc/usage/extensions/example_google.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sphinx-doc__sphinx/setup_sphinx-doc__sphinx__3.0/doc/usage/extensions/example_google.py",
        "start": 1,
        "end": 296,
        "class_name": null,
        "method_name": null,
        "code": "1 \"\"\"Example Google style docstrings.\n2 \n3 This module demonstrates documentation as specified by the `Google Python\n4 Style Guide`_. Docstrings may extend over multiple lines. Sections are created\n5 with a section header and a colon followed by a block of indented text.\n6 \n7 Example:\n8     Examples can be given using either the ``Example`` or ``Examples``\n9     sections. Sections support any reStructuredText formatting, including\n10     literal blocks::\n11 \n12         $ python example_google.py\n13 \n14 Section breaks are created by resuming unindented text. Section breaks\n15 are also implicitly created anytime a new section starts.\n16 \n17 Attributes:\n18     module_level_variable1 (int): Module level variables may be documented in\n19         either the ``Attributes`` section of the module docstring, or in an\n20         inline docstring immediately following the variable.\n21 \n22         Either form is acceptable, but the two should not be mixed. Choose\n23         one convention to document module level variables and be consistent\n24         with it.\n25 \n26 Todo:\n27     * For module TODOs\n28     * You have to also use ``sphinx.ext.todo`` extension\n29 \n30 .. _Google Python Style Guide:\n31    https://google.github.io/styleguide/pyguide.html\n32 \n33 \"\"\"\n34 \n35 module_level_variable1 = 12345\n36 \n37 module_level_variable2 = 98765\n38 \"\"\"int: Module level variable documented inline.\n39 \n40 The docstring may span multiple lines. The type may optionally be specified\n41 on the first line, separated by a colon.\n42 \"\"\"\n43 \n44 \n45 def function_with_types_in_docstring(param1, param2):\n46     \"\"\"Example function with types documented in the docstring.\n47 \n48     `PEP 484`_ type annotations are supported. If attribute, parameter, and\n49     return types are annotated according to `PEP 484`_, they do not need to be\n50     included in the docstring:\n51 \n52     Args:\n53         param1 (int): The first parameter.\n54         param2 (str): The second parameter.\n55 \n56     Returns:\n57         bool: The return value. True for success, False otherwise.\n58 \n59     .. _PEP 484:\n60         https://www.python.org/dev/peps/pep-0484/\n61 \n62     \"\"\"\n63 \n64 \n65 def function_with_pep484_type_annotations(param1: int, param2: str) -> bool:\n66     \"\"\"Example function with PEP 484 type annotations.\n67 \n68     Args:\n69         param1: The first parameter.\n70         param2: The second parameter.\n71 \n72     Returns:\n73         The return value. True for success, False otherwise.\n74 \n75     \"\"\"\n76 \n77 \n78 def module_level_function(param1, param2=None, *args, **kwargs):\n79     \"\"\"This is an example of a module level function.\n80 \n81     Function parameters should be documented in the ``Args`` section. The name\n82     of each parameter is required. The type and description of each parameter\n83     is optional, but should be included if not obvious.\n84 \n85     If ``*args`` or ``**kwargs`` are accepted,\n86     they should be listed as ``*args`` and ``**kwargs``.\n87 \n88     The format for a parameter is::\n89 \n90         name (type): description\n91             The description may span multiple lines. Following\n92             lines should be indented. The \"(type)\" is optional.\n93 \n94             Multiple paragraphs are supported in parameter\n95             descriptions.\n96 \n97     Args:\n98         param1 (int): The first parameter.\n99         param2 (:obj:`str`, optional): The second parameter. Defaults to None.\n100             Second line of description should be indented.\n101         *args: Variable length argument list.\n102         **kwargs: Arbitrary keyword arguments.\n103 \n104     Returns:\n105         bool: True if successful, False otherwise.\n106 \n107         The return type is optional and may be specified at the beginning of\n108         the ``Returns`` section followed by a colon.\n109 \n110         The ``Returns`` section may span multiple lines and paragraphs.\n111         Following lines should be indented to match the first line.\n112 \n113         The ``Returns`` section supports any reStructuredText formatting,\n114         including literal blocks::\n115 \n116             {\n117                 'param1': param1,\n118                 'param2': param2\n119             }\n120 \n121     Raises:\n122         AttributeError: The ``Raises`` section is a list of all exceptions\n123             that are relevant to the interface.\n124         ValueError: If `param2` is equal to `param1`.\n125 \n126     \"\"\"\n127     if param1 == param2:\n128         raise ValueError('param1 may not be equal to param2')\n129     return True\n130 \n131 \n132 def example_generator(n):\n133     \"\"\"Generators have a ``Yields`` section instead of a ``Returns`` section.\n134 \n135     Args:\n136         n (int): The upper limit of the range to generate, from 0 to `n` - 1.\n137 \n138     Yields:\n139         int: The next number in the range of 0 to `n` - 1.\n140 \n141     Examples:\n142         Examples should be written in doctest format, and should illustrate how\n143         to use the function.\n144 \n145         >>> print([i for i in example_generator(4)])\n146         [0, 1, 2, 3]\n147 \n148     \"\"\"\n149     for i in range(n):\n150         yield i\n151 \n152 \n153 class ExampleError(Exception):\n154     \"\"\"Exceptions are documented in the same way as classes.\n155 \n156     The __init__ method may be documented in either the class level\n157     docstring, or as a docstring on the __init__ method itself.\n158 \n159     Either form is acceptable, but the two should not be mixed. Choose one\n160     convention to document the __init__ method and be consistent with it.\n161 \n162     Note:\n163         Do not include the `self` parameter in the ``Args`` section.\n164 \n165     Args:\n166         msg (str): Human readable string describing the exception.\n167         code (:obj:`int`, optional): Error code.\n168 \n169     Attributes:\n170         msg (str): Human readable string describing the exception.\n171         code (int): Exception error code.\n172 \n173     \"\"\"\n174 \n175     def __init__(self, msg, code):\n176         self.msg = msg\n177         self.code = code\n178 \n179 \n180 class ExampleClass:\n181     \"\"\"The summary line for a class docstring should fit on one line.\n182 \n183     If the class has public attributes, they may be documented here\n184     in an ``Attributes`` section and follow the same formatting as a\n185     function's ``Args`` section. Alternatively, attributes may be documented\n186     inline with the attribute's declaration (see __init__ method below).\n187 \n188     Properties created with the ``@property`` decorator should be documented\n189     in the property's getter method.\n190 \n191     Attributes:\n192         attr1 (str): Description of `attr1`.\n193         attr2 (:obj:`int`, optional): Description of `attr2`.\n194 \n195     \"\"\"\n196 \n197     def __init__(self, param1, param2, param3):\n198         \"\"\"Example of docstring on the __init__ method.\n199 \n200         The __init__ method may be documented in either the class level\n201         docstring, or as a docstring on the __init__ method itself.\n202 \n203         Either form is acceptable, but the two should not be mixed. Choose one\n204         convention to document the __init__ method and be consistent with it.\n205 \n206         Note:\n207             Do not include the `self` parameter in the ``Args`` section.\n208 \n209         Args:\n210             param1 (str): Description of `param1`.\n211             param2 (:obj:`int`, optional): Description of `param2`. Multiple\n212                 lines are supported.\n213             param3 (list(str)): Description of `param3`.\n214 \n215         \"\"\"\n216         self.attr1 = param1\n217         self.attr2 = param2\n218         self.attr3 = param3  #: Doc comment *inline* with attribute\n219 \n220         #: list(str): Doc comment *before* attribute, with type specified\n221         self.attr4 = ['attr4']\n222 \n223         self.attr5 = None\n224         \"\"\"str: Docstring *after* attribute, with type specified.\"\"\"\n225 \n226     @property\n227     def readonly_property(self):\n228         \"\"\"str: Properties should be documented in their getter method.\"\"\"\n229         return 'readonly_property'\n230 \n231     @property\n232     def readwrite_property(self):\n233         \"\"\"list(str): Properties with both a getter and setter\n234         should only be documented in their getter method.\n235 \n236         If the setter method contains notable behavior, it should be\n237         mentioned here.\n238         \"\"\"\n239         return ['readwrite_property']\n240 \n241     @readwrite_property.setter\n242     def readwrite_property(self, value):\n243         value\n244 \n245     def example_method(self, param1, param2):\n246         \"\"\"Class methods are similar to regular functions.\n247 \n248         Note:\n249             Do not include the `self` parameter in the ``Args`` section.\n250 \n251         Args:\n252             param1: The first parameter.\n253             param2: The second parameter.\n254 \n255         Returns:\n256             True if successful, False otherwise.\n257 \n258         \"\"\"\n259         return True\n260 \n261     def __special__(self):\n262         \"\"\"By default special members with docstrings are not included.\n263 \n264         Special members are any methods or attributes that start with and\n265         end with a double underscore. Any special member with a docstring\n266         will be included in the output, if\n267         ``napoleon_include_special_with_doc`` is set to True.\n268 \n269         This behavior can be enabled by changing the following setting in\n270         Sphinx's conf.py::\n271 \n272             napoleon_include_special_with_doc = True\n273 \n274         \"\"\"\n275         pass\n276 \n277     def __special_without_docstring__(self):\n278         pass\n279 \n280     def _private(self):\n281         \"\"\"By default private members are not included.\n282 \n283         Private members are any methods or attributes that start with an\n284         underscore and are *not* special. By default they are not included\n285         in the output.\n286 \n287         This behavior can be changed such that private members *are* included\n288         by changing the following setting in Sphinx's conf.py::\n289 \n290             napoleon_include_private_with_doc = True\n291 \n292         \"\"\"\n293         pass\n294 \n295     def _private_without_docstring(self):\n296         pass\n",
        "intended_behavior": "Simplify the setup to just the essentials needed to demonstrate the problem with the `:noindex:` option in a controlled environment."
    }
]