2025-10-18 17:53:38.727 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-18 17:53:42.661 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=327, output_tokens=12, cost=0.003630
2025-10-18 17:54:00.511 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=507, output_tokens=842, cost=0.030330
2025-10-18 17:54:01.738 | INFO     | registered non reproducing test 0
2025-10-18 17:54:19.570 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1718, output_tokens=919, cost=0.044750
2025-10-18 17:54:20.748 | INFO     | registered non reproducing test 1
2025-10-18 17:54:37.729 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1909, output_tokens=877, cost=0.045400
2025-10-18 17:54:38.701 | INFO     | registered non reproducing test 2
2025-10-18 17:54:38.701 | WARNING  | Failed to write a reproducer test; skipping reproducer tracing
2025-10-18 17:54:38.704 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 17:54:42.777 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=628, output_tokens=115, cost=0.009730
2025-10-18 17:54:42.784 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 17:54:46.850 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=469, output_tokens=49, cost=0.006160
2025-10-18 17:54:46.851 | DEBUG    | Extracted a valid json.
2025-10-18 17:54:46.851 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_code(\"Sphinxcontrib-napoleon\")",
        "search_code(\"Attributes directive\")",
        "search_code(\":noindex:\")"
    ],
    "bug_locations": []
}
2025-10-18 17:54:46.872 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-18 17:54:46.873 | DEBUG    | <Agent search> Analyzing search results.
2025-10-18 17:55:02.915 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1331, output_tokens=706, cost=0.034490
2025-10-18 17:55:02.923 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 17:55:10.964 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2253, output_tokens=384, cost=0.034050
2025-10-18 17:55:10.968 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 17:55:13.882 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=738, output_tokens=14, cost=0.007800
2025-10-18 17:55:13.883 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:55:13.883 | DEBUG    | Trying to convert API calls/bug locations into json. Try 2 of 5.
2025-10-18 17:55:15.857 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=738, output_tokens=14, cost=0.007800
2025-10-18 17:55:15.858 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:55:15.858 | DEBUG    | Trying to convert API calls/bug locations into json. Try 3 of 5.
2025-10-18 17:55:17.798 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=738, output_tokens=14, cost=0.007800
2025-10-18 17:55:17.799 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:55:17.799 | DEBUG    | Trying to convert API calls/bug locations into json. Try 4 of 5.
2025-10-18 17:55:18.791 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=738, output_tokens=14, cost=0.007800
2025-10-18 17:55:18.792 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:55:18.792 | DEBUG    | Trying to convert API calls/bug locations into json. Try 5 of 5.
2025-10-18 17:55:21.811 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=738, output_tokens=14, cost=0.007800
2025-10-18 17:55:21.812 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:55:21.812 | DEBUG    | Agent proxy return the following json: None
2025-10-18 17:55:21.812 | DEBUG    | Could not extract API calls from agent search response, asking search agent to re-generate response.
2025-10-18 17:55:21.813 | DEBUG    | <Agent search> Downstream could not consume our last response. Will retry.
2025-10-18 17:55:21.813 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 17:55:25.702 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2664, output_tokens=144, cost=0.030960
2025-10-18 17:55:25.707 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 17:55:29.435 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=498, output_tokens=46, cost=0.006360
2025-10-18 17:55:29.436 | DEBUG    | Extracted a valid json.
2025-10-18 17:55:29.436 | DEBUG    | Agent proxy return the following json: {
    "API_calls": ["search_code(\"napoleon Attributes\")", "search_code(\"napoleon :noindex:\")", "search_code(\"sphinxcontrib-napoleon\")"],
    "bug_locations": []
}
2025-10-18 17:55:29.473 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-18 17:55:29.474 | DEBUG    | <Agent search> Analyzing search results.
2025-10-18 17:55:41.970 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2996, output_tokens=502, cost=0.045020
2025-10-18 17:55:41.981 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 17:55:52.214 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3714, output_tokens=433, cost=0.050130
2025-10-18 17:55:52.222 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 17:55:57.070 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=787, output_tokens=134, cost=0.011890
2025-10-18 17:55:57.070 | DEBUG    | Extracted a valid json.
2025-10-18 17:55:57.070 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations": [
        {
            "file": "Within the napoleon extension files, likely where docstring parsing occurs.",
            "class": "",
            "method": "",
            "intended_behavior": "The code responsible for processing `Attributes:` directives within the napoleon extension should be modified or audited to ensure that it respects the `:noindex:` option. When encountering an `Attributes:` directive with the `:noindex:` option, the extension should either not add these attributes to the Sphinx documentation index or mark them in a way that prevents Sphinx's indexing mechanism from including them."
        }
    ]
}
2025-10-18 17:55:57.072 | DEBUG    | Failed to retrieve code from all bug locations. Asking search agent to re-generate response.
2025-10-18 17:55:57.072 | DEBUG    | <Agent search> Downstream could not consume our last response. Will retry.
2025-10-18 17:55:57.072 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 17:56:06.494 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=4181, output_tokens=333, cost=0.051800
2025-10-18 17:56:06.500 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 17:56:08.448 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=687, output_tokens=14, cost=0.007290
2025-10-18 17:56:08.449 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:56:08.450 | DEBUG    | Trying to convert API calls/bug locations into json. Try 2 of 5.
2025-10-18 17:56:09.914 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=687, output_tokens=14, cost=0.007290
2025-10-18 17:56:09.915 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:56:09.916 | DEBUG    | Trying to convert API calls/bug locations into json. Try 3 of 5.
2025-10-18 17:56:12.942 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=687, output_tokens=14, cost=0.007290
2025-10-18 17:56:12.943 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:56:12.943 | DEBUG    | Trying to convert API calls/bug locations into json. Try 4 of 5.
2025-10-18 17:56:14.732 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=687, output_tokens=14, cost=0.007290
2025-10-18 17:56:14.733 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:56:14.733 | DEBUG    | Trying to convert API calls/bug locations into json. Try 5 of 5.
2025-10-18 17:56:17.504 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=687, output_tokens=14, cost=0.007290
2025-10-18 17:56:17.505 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:56:17.505 | DEBUG    | Agent proxy return the following json: None
2025-10-18 17:56:17.506 | DEBUG    | Could not extract API calls from agent search response, asking search agent to re-generate response.
2025-10-18 17:56:17.506 | DEBUG    | <Agent search> Downstream could not consume our last response. Will retry.
2025-10-18 17:56:17.507 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 17:56:25.782 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=4541, output_tokens=328, cost=0.055250
2025-10-18 17:56:25.786 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 17:56:27.697 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=682, output_tokens=14, cost=0.007240
2025-10-18 17:56:27.698 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:56:27.698 | DEBUG    | Trying to convert API calls/bug locations into json. Try 2 of 5.
2025-10-18 17:56:29.365 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=682, output_tokens=14, cost=0.007240
2025-10-18 17:56:29.366 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:56:29.373 | DEBUG    | Trying to convert API calls/bug locations into json. Try 3 of 5.
2025-10-18 17:56:30.640 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=682, output_tokens=14, cost=0.007240
2025-10-18 17:56:30.641 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:56:30.641 | DEBUG    | Trying to convert API calls/bug locations into json. Try 4 of 5.
2025-10-18 17:56:32.693 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=682, output_tokens=14, cost=0.007240
2025-10-18 17:56:32.694 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:56:32.694 | DEBUG    | Trying to convert API calls/bug locations into json. Try 5 of 5.
2025-10-18 17:56:34.707 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=682, output_tokens=14, cost=0.007240
2025-10-18 17:56:34.708 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:56:34.715 | DEBUG    | Agent proxy return the following json: None
2025-10-18 17:56:34.716 | DEBUG    | Could not extract API calls from agent search response, asking search agent to re-generate response.
2025-10-18 17:56:34.716 | DEBUG    | <Agent search> Downstream could not consume our last response. Will retry.
2025-10-18 17:56:34.717 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 17:56:42.712 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=4896, output_tokens=300, cost=0.057960
2025-10-18 17:56:42.719 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 17:56:45.572 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=654, output_tokens=14, cost=0.006960
2025-10-18 17:56:45.573 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:56:45.573 | DEBUG    | Trying to convert API calls/bug locations into json. Try 2 of 5.
2025-10-18 17:56:47.611 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=654, output_tokens=14, cost=0.006960
2025-10-18 17:56:47.612 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:56:47.612 | DEBUG    | Trying to convert API calls/bug locations into json. Try 3 of 5.
2025-10-18 17:56:49.772 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=654, output_tokens=14, cost=0.006960
2025-10-18 17:56:49.773 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:56:49.773 | DEBUG    | Trying to convert API calls/bug locations into json. Try 4 of 5.
2025-10-18 17:56:51.463 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=654, output_tokens=14, cost=0.006960
2025-10-18 17:56:51.464 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:56:51.464 | DEBUG    | Trying to convert API calls/bug locations into json. Try 5 of 5.
2025-10-18 17:56:52.637 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=654, output_tokens=14, cost=0.006960
2025-10-18 17:56:52.638 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:56:52.638 | DEBUG    | Agent proxy return the following json: None
2025-10-18 17:56:52.639 | DEBUG    | Could not extract API calls from agent search response, asking search agent to re-generate response.
2025-10-18 17:56:52.640 | DEBUG    | <Agent search> Downstream could not consume our last response. Will retry.
2025-10-18 17:56:52.640 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 17:56:58.052 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=5223, output_tokens=126, cost=0.056010
2025-10-18 17:56:58.055 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 17:56:59.193 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=480, output_tokens=14, cost=0.005220
2025-10-18 17:56:59.195 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:56:59.195 | DEBUG    | Trying to convert API calls/bug locations into json. Try 2 of 5.
2025-10-18 17:57:02.470 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=480, output_tokens=14, cost=0.005220
2025-10-18 17:57:02.471 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:57:02.478 | DEBUG    | Trying to convert API calls/bug locations into json. Try 3 of 5.
2025-10-18 17:57:03.439 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=480, output_tokens=14, cost=0.005220
2025-10-18 17:57:03.440 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:57:03.441 | DEBUG    | Trying to convert API calls/bug locations into json. Try 4 of 5.
2025-10-18 17:57:04.574 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=480, output_tokens=14, cost=0.005220
2025-10-18 17:57:04.575 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:57:04.575 | DEBUG    | Trying to convert API calls/bug locations into json. Try 5 of 5.
2025-10-18 17:57:05.655 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=480, output_tokens=14, cost=0.005220
2025-10-18 17:57:05.656 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:57:05.656 | DEBUG    | Agent proxy return the following json: None
2025-10-18 17:57:05.657 | DEBUG    | Could not extract API calls from agent search response, asking search agent to re-generate response.
2025-10-18 17:57:05.658 | DEBUG    | <Agent search> Downstream could not consume our last response. Will retry.
2025-10-18 17:57:05.658 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 17:57:17.038 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=5376, output_tokens=484, cost=0.068280
2025-10-18 17:57:17.043 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 17:57:19.049 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=838, output_tokens=14, cost=0.008800
2025-10-18 17:57:19.049 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:57:19.049 | DEBUG    | Trying to convert API calls/bug locations into json. Try 2 of 5.
2025-10-18 17:57:20.271 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=838, output_tokens=14, cost=0.008800
2025-10-18 17:57:20.273 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:57:20.273 | DEBUG    | Trying to convert API calls/bug locations into json. Try 3 of 5.
2025-10-18 17:57:22.589 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=838, output_tokens=14, cost=0.008800
2025-10-18 17:57:22.590 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:57:22.597 | DEBUG    | Trying to convert API calls/bug locations into json. Try 4 of 5.
2025-10-18 17:57:23.566 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=838, output_tokens=14, cost=0.008800
2025-10-18 17:57:23.567 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:57:23.567 | DEBUG    | Trying to convert API calls/bug locations into json. Try 5 of 5.
2025-10-18 17:57:25.373 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=838, output_tokens=14, cost=0.008800
2025-10-18 17:57:25.374 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-18 17:57:25.374 | DEBUG    | Agent proxy return the following json: None
2025-10-18 17:57:25.375 | DEBUG    | Could not extract API calls from agent search response, asking search agent to re-generate response.
2025-10-18 17:57:25.376 | DEBUG    | <Agent search> Downstream could not consume our last response. Will retry.
2025-10-18 17:57:25.376 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 17:57:34.868 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=5887, output_tokens=403, cost=0.070960
2025-10-18 17:57:34.872 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 17:57:38.005 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=757, output_tokens=72, cost=0.009730
2025-10-18 17:57:38.006 | DEBUG    | Extracted a valid json.
2025-10-18 17:57:38.006 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations": [
        {
            "file": "example_google.py",
            "class": "",
            "method": "",
            "intended_behavior": "Simplify the setup to just the essentials needed to demonstrate the problem with the `:noindex:` option in a controlled environment."
        }
    ]
}
2025-10-18 17:57:38.009 | DEBUG    | Bug location extracted successfully: [<file>doc/usage/extensions/example_google.py</file>
<class>None</class>
<method>None</method>
<code>
1 """Example Google style docstrings.
2 
3 This module demonstrates documentation as specified by the `Google Python
4 Style Guide`_. Docstrings may extend over multiple lines. Sections are created
5 with a section header and a colon followed by a block of indented text.
6 
7 Example:
8     Examples can be given using either the ``Example`` or ``Examples``
9     sections. Sections support any reStructuredText formatting, including
10     literal blocks::
11 
12         $ python example_google.py
13 
14 Section breaks are created by resuming unindented text. Section breaks
15 are also implicitly created anytime a new section starts.
16 
17 Attributes:
18     module_level_variable1 (int): Module level variables may be documented in
19         either the ``Attributes`` section of the module docstring, or in an
20         inline docstring immediately following the variable.
21 
22         Either form is acceptable, but the two should not be mixed. Choose
23         one convention to document module level variables and be consistent
24         with it.
25 
26 Todo:
27     * For module TODOs
28     * You have to also use ``sphinx.ext.todo`` extension
29 
30 .. _Google Python Style Guide:
31    https://google.github.io/styleguide/pyguide.html
32 
33 """
34 
35 module_level_variable1 = 12345
36 
37 module_level_variable2 = 98765
38 """int: Module level variable documented inline.
39 
40 The docstring may span multiple lines. The type may optionally be specified
41 on the first line, separated by a colon.
42 """
43 
44 
45 def function_with_types_in_docstring(param1, param2):
46     """Example function with types documented in the docstring.
47 
48     `PEP 484`_ type annotations are supported. If attribute, parameter, and
49     return types are annotated according to `PEP 484`_, they do not need to be
50     included in the docstring:
51 
52     Args:
53         param1 (int): The first parameter.
54         param2 (str): The second parameter.
55 
56     Returns:
57         bool: The return value. True for success, False otherwise.
58 
59     .. _PEP 484:
60         https://www.python.org/dev/peps/pep-0484/
61 
62     """
63 
64 
65 def function_with_pep484_type_annotations(param1: int, param2: str) -> bool:
66     """Example function with PEP 484 type annotations.
67 
68     Args:
69         param1: The first parameter.
70         param2: The second parameter.
71 
72     Returns:
73         The return value. True for success, False otherwise.
74 
75     """
76 
77 
78 def module_level_function(param1, param2=None, *args, **kwargs):
79     """This is an example of a module level function.
80 
81     Function parameters should be documented in the ``Args`` section. The name
82     of each parameter is required. The type and description of each parameter
83     is optional, but should be included if not obvious.
84 
85     If ``*args`` or ``**kwargs`` are accepted,
86     they should be listed as ``*args`` and ``**kwargs``.
87 
88     The format for a parameter is::
89 
90         name (type): description
91             The description may span multiple lines. Following
92             lines should be indented. The "(type)" is optional.
93 
94             Multiple paragraphs are supported in parameter
95             descriptions.
96 
97     Args:
98         param1 (int): The first parameter.
99         param2 (:obj:`str`, optional): The second parameter. Defaults to None.
100             Second line of description should be indented.
101         *args: Variable length argument list.
102         **kwargs: Arbitrary keyword arguments.
103 
104     Returns:
105         bool: True if successful, False otherwise.
106 
107         The return type is optional and may be specified at the beginning of
108         the ``Returns`` section followed by a colon.
109 
110         The ``Returns`` section may span multiple lines and paragraphs.
111         Following lines should be indented to match the first line.
112 
113         The ``Returns`` section supports any reStructuredText formatting,
114         including literal blocks::
115 
116             {
117                 'param1': param1,
118                 'param2': param2
119             }
120 
121     Raises:
122         AttributeError: The ``Raises`` section is a list of all exceptions
123             that are relevant to the interface.
124         ValueError: If `param2` is equal to `param1`.
125 
126     """
127     if param1 == param2:
128         raise ValueError('param1 may not be equal to param2')
129     return True
130 
131 
132 def example_generator(n):
133     """Generators have a ``Yields`` section instead of a ``Returns`` section.
134 
135     Args:
136         n (int): The upper limit of the range to generate, from 0 to `n` - 1.
137 
138     Yields:
139         int: The next number in the range of 0 to `n` - 1.
140 
141     Examples:
142         Examples should be written in doctest format, and should illustrate how
143         to use the function.
144 
145         >>> print([i for i in example_generator(4)])
146         [0, 1, 2, 3]
147 
148     """
149     for i in range(n):
150         yield i
151 
152 
153 class ExampleError(Exception):
154     """Exceptions are documented in the same way as classes.
155 
156     The __init__ method may be documented in either the class level
157     docstring, or as a docstring on the __init__ method itself.
158 
159     Either form is acceptable, but the two should not be mixed. Choose one
160     convention to document the __init__ method and be consistent with it.
161 
162     Note:
163         Do not include the `self` parameter in the ``Args`` section.
164 
165     Args:
166         msg (str): Human readable string describing the exception.
167         code (:obj:`int`, optional): Error code.
168 
169     Attributes:
170         msg (str): Human readable string describing the exception.
171         code (int): Exception error code.
172 
173     """
174 
175     def __init__(self, msg, code):
176         self.msg = msg
177         self.code = code
178 
179 
180 class ExampleClass:
181     """The summary line for a class docstring should fit on one line.
182 
183     If the class has public attributes, they may be documented here
184     in an ``Attributes`` section and follow the same formatting as a
185     function's ``Args`` section. Alternatively, attributes may be documented
186     inline with the attribute's declaration (see __init__ method below).
187 
188     Properties created with the ``@property`` decorator should be documented
189     in the property's getter method.
190 
191     Attributes:
192         attr1 (str): Description of `attr1`.
193         attr2 (:obj:`int`, optional): Description of `attr2`.
194 
195     """
196 
197     def __init__(self, param1, param2, param3):
198         """Example of docstring on the __init__ method.
199 
200         The __init__ method may be documented in either the class level
201         docstring, or as a docstring on the __init__ method itself.
202 
203         Either form is acceptable, but the two should not be mixed. Choose one
204         convention to document the __init__ method and be consistent with it.
205 
206         Note:
207             Do not include the `self` parameter in the ``Args`` section.
208 
209         Args:
210             param1 (str): Description of `param1`.
211             param2 (:obj:`int`, optional): Description of `param2`. Multiple
212                 lines are supported.
213             param3 (list(str)): Description of `param3`.
214 
215         """
216         self.attr1 = param1
217         self.attr2 = param2
218         self.attr3 = param3  #: Doc comment *inline* with attribute
219 
220         #: list(str): Doc comment *before* attribute, with type specified
221         self.attr4 = ['attr4']
222 
223         self.attr5 = None
224         """str: Docstring *after* attribute, with type specified."""
225 
226     @property
227     def readonly_property(self):
228         """str: Properties should be documented in their getter method."""
229         return 'readonly_property'
230 
231     @property
232     def readwrite_property(self):
233         """list(str): Properties with both a getter and setter
234         should only be documented in their getter method.
235 
236         If the setter method contains notable behavior, it should be
237         mentioned here.
238         """
239         return ['readwrite_property']
240 
241     @readwrite_property.setter
242     def readwrite_property(self, value):
243         value
244 
245     def example_method(self, param1, param2):
246         """Class methods are similar to regular functions.
247 
248         Note:
249             Do not include the `self` parameter in the ``Args`` section.
250 
251         Args:
252             param1: The first parameter.
253             param2: The second parameter.
254 
255         Returns:
256             True if successful, False otherwise.
257 
258         """
259         return True
260 
261     def __special__(self):
262         """By default special members with docstrings are not included.
263 
264         Special members are any methods or attributes that start with and
265         end with a double underscore. Any special member with a docstring
266         will be included in the output, if
267         ``napoleon_include_special_with_doc`` is set to True.
268 
269         This behavior can be enabled by changing the following setting in
270         Sphinx's conf.py::
271 
272             napoleon_include_special_with_doc = True
273 
274         """
275         pass
276 
277     def __special_without_docstring__(self):
278         pass
279 
280     def _private(self):
281         """By default private members are not included.
282 
283         Private members are any methods or attributes that start with an
284         underscore and are *not* special. By default they are not included
285         in the output.
286 
287         This behavior can be changed such that private members *are* included
288         by changing the following setting in Sphinx's conf.py::
289 
290             napoleon_include_private_with_doc = True
291 
292         """
293         pass
294 
295     def _private_without_docstring(self):
296         pass

</code><intended_behavior>Simplify the setup to just the essentials needed to demonstrate the problem with the `:noindex:` option in a controlled environment.</intended_behavior>]
2025-10-18 17:57:38.009 | INFO     | Search completed. Bug locations: [<file>doc/usage/extensions/example_google.py</file>
<class>None</class>
<method>None</method>
<code>
1 """Example Google style docstrings.
2 
3 This module demonstrates documentation as specified by the `Google Python
4 Style Guide`_. Docstrings may extend over multiple lines. Sections are created
5 with a section header and a colon followed by a block of indented text.
6 
7 Example:
8     Examples can be given using either the ``Example`` or ``Examples``
9     sections. Sections support any reStructuredText formatting, including
10     literal blocks::
11 
12         $ python example_google.py
13 
14 Section breaks are created by resuming unindented text. Section breaks
15 are also implicitly created anytime a new section starts.
16 
17 Attributes:
18     module_level_variable1 (int): Module level variables may be documented in
19         either the ``Attributes`` section of the module docstring, or in an
20         inline docstring immediately following the variable.
21 
22         Either form is acceptable, but the two should not be mixed. Choose
23         one convention to document module level variables and be consistent
24         with it.
25 
26 Todo:
27     * For module TODOs
28     * You have to also use ``sphinx.ext.todo`` extension
29 
30 .. _Google Python Style Guide:
31    https://google.github.io/styleguide/pyguide.html
32 
33 """
34 
35 module_level_variable1 = 12345
36 
37 module_level_variable2 = 98765
38 """int: Module level variable documented inline.
39 
40 The docstring may span multiple lines. The type may optionally be specified
41 on the first line, separated by a colon.
42 """
43 
44 
45 def function_with_types_in_docstring(param1, param2):
46     """Example function with types documented in the docstring.
47 
48     `PEP 484`_ type annotations are supported. If attribute, parameter, and
49     return types are annotated according to `PEP 484`_, they do not need to be
50     included in the docstring:
51 
52     Args:
53         param1 (int): The first parameter.
54         param2 (str): The second parameter.
55 
56     Returns:
57         bool: The return value. True for success, False otherwise.
58 
59     .. _PEP 484:
60         https://www.python.org/dev/peps/pep-0484/
61 
62     """
63 
64 
65 def function_with_pep484_type_annotations(param1: int, param2: str) -> bool:
66     """Example function with PEP 484 type annotations.
67 
68     Args:
69         param1: The first parameter.
70         param2: The second parameter.
71 
72     Returns:
73         The return value. True for success, False otherwise.
74 
75     """
76 
77 
78 def module_level_function(param1, param2=None, *args, **kwargs):
79     """This is an example of a module level function.
80 
81     Function parameters should be documented in the ``Args`` section. The name
82     of each parameter is required. The type and description of each parameter
83     is optional, but should be included if not obvious.
84 
85     If ``*args`` or ``**kwargs`` are accepted,
86     they should be listed as ``*args`` and ``**kwargs``.
87 
88     The format for a parameter is::
89 
90         name (type): description
91             The description may span multiple lines. Following
92             lines should be indented. The "(type)" is optional.
93 
94             Multiple paragraphs are supported in parameter
95             descriptions.
96 
97     Args:
98         param1 (int): The first parameter.
99         param2 (:obj:`str`, optional): The second parameter. Defaults to None.
100             Second line of description should be indented.
101         *args: Variable length argument list.
102         **kwargs: Arbitrary keyword arguments.
103 
104     Returns:
105         bool: True if successful, False otherwise.
106 
107         The return type is optional and may be specified at the beginning of
108         the ``Returns`` section followed by a colon.
109 
110         The ``Returns`` section may span multiple lines and paragraphs.
111         Following lines should be indented to match the first line.
112 
113         The ``Returns`` section supports any reStructuredText formatting,
114         including literal blocks::
115 
116             {
117                 'param1': param1,
118                 'param2': param2
119             }
120 
121     Raises:
122         AttributeError: The ``Raises`` section is a list of all exceptions
123             that are relevant to the interface.
124         ValueError: If `param2` is equal to `param1`.
125 
126     """
127     if param1 == param2:
128         raise ValueError('param1 may not be equal to param2')
129     return True
130 
131 
132 def example_generator(n):
133     """Generators have a ``Yields`` section instead of a ``Returns`` section.
134 
135     Args:
136         n (int): The upper limit of the range to generate, from 0 to `n` - 1.
137 
138     Yields:
139         int: The next number in the range of 0 to `n` - 1.
140 
141     Examples:
142         Examples should be written in doctest format, and should illustrate how
143         to use the function.
144 
145         >>> print([i for i in example_generator(4)])
146         [0, 1, 2, 3]
147 
148     """
149     for i in range(n):
150         yield i
151 
152 
153 class ExampleError(Exception):
154     """Exceptions are documented in the same way as classes.
155 
156     The __init__ method may be documented in either the class level
157     docstring, or as a docstring on the __init__ method itself.
158 
159     Either form is acceptable, but the two should not be mixed. Choose one
160     convention to document the __init__ method and be consistent with it.
161 
162     Note:
163         Do not include the `self` parameter in the ``Args`` section.
164 
165     Args:
166         msg (str): Human readable string describing the exception.
167         code (:obj:`int`, optional): Error code.
168 
169     Attributes:
170         msg (str): Human readable string describing the exception.
171         code (int): Exception error code.
172 
173     """
174 
175     def __init__(self, msg, code):
176         self.msg = msg
177         self.code = code
178 
179 
180 class ExampleClass:
181     """The summary line for a class docstring should fit on one line.
182 
183     If the class has public attributes, they may be documented here
184     in an ``Attributes`` section and follow the same formatting as a
185     function's ``Args`` section. Alternatively, attributes may be documented
186     inline with the attribute's declaration (see __init__ method below).
187 
188     Properties created with the ``@property`` decorator should be documented
189     in the property's getter method.
190 
191     Attributes:
192         attr1 (str): Description of `attr1`.
193         attr2 (:obj:`int`, optional): Description of `attr2`.
194 
195     """
196 
197     def __init__(self, param1, param2, param3):
198         """Example of docstring on the __init__ method.
199 
200         The __init__ method may be documented in either the class level
201         docstring, or as a docstring on the __init__ method itself.
202 
203         Either form is acceptable, but the two should not be mixed. Choose one
204         convention to document the __init__ method and be consistent with it.
205 
206         Note:
207             Do not include the `self` parameter in the ``Args`` section.
208 
209         Args:
210             param1 (str): Description of `param1`.
211             param2 (:obj:`int`, optional): Description of `param2`. Multiple
212                 lines are supported.
213             param3 (list(str)): Description of `param3`.
214 
215         """
216         self.attr1 = param1
217         self.attr2 = param2
218         self.attr3 = param3  #: Doc comment *inline* with attribute
219 
220         #: list(str): Doc comment *before* attribute, with type specified
221         self.attr4 = ['attr4']
222 
223         self.attr5 = None
224         """str: Docstring *after* attribute, with type specified."""
225 
226     @property
227     def readonly_property(self):
228         """str: Properties should be documented in their getter method."""
229         return 'readonly_property'
230 
231     @property
232     def readwrite_property(self):
233         """list(str): Properties with both a getter and setter
234         should only be documented in their getter method.
235 
236         If the setter method contains notable behavior, it should be
237         mentioned here.
238         """
239         return ['readwrite_property']
240 
241     @readwrite_property.setter
242     def readwrite_property(self, value):
243         value
244 
245     def example_method(self, param1, param2):
246         """Class methods are similar to regular functions.
247 
248         Note:
249             Do not include the `self` parameter in the ``Args`` section.
250 
251         Args:
252             param1: The first parameter.
253             param2: The second parameter.
254 
255         Returns:
256             True if successful, False otherwise.
257 
258         """
259         return True
260 
261     def __special__(self):
262         """By default special members with docstrings are not included.
263 
264         Special members are any methods or attributes that start with and
265         end with a double underscore. Any special member with a docstring
266         will be included in the output, if
267         ``napoleon_include_special_with_doc`` is set to True.
268 
269         This behavior can be enabled by changing the following setting in
270         Sphinx's conf.py::
271 
272             napoleon_include_special_with_doc = True
273 
274         """
275         pass
276 
277     def __special_without_docstring__(self):
278         pass
279 
280     def _private(self):
281         """By default private members are not included.
282 
283         Private members are any methods or attributes that start with an
284         underscore and are *not* special. By default they are not included
285         in the output.
286 
287         This behavior can be changed such that private members *are* included
288         by changing the following setting in Sphinx's conf.py::
289 
290             napoleon_include_private_with_doc = True
291 
292         """
293         pass
294 
295     def _private_without_docstring(self):
296         pass

</code><intended_behavior>Simplify the setup to just the essentials needed to demonstrate the problem with the `:noindex:` option in a controlled environment.</intended_behavior>]
2025-10-18 17:57:38.010 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-18 17:57:38.010 | INFO     | Search-only: skipping patch selection
2025-10-18 17:57:38.091 | INFO     | Task sphinx-doc__sphinx-7350 completed successfully.
2025-10-18 17:57:38.092 | INFO     | No patch generated. You can try running ACR again.
