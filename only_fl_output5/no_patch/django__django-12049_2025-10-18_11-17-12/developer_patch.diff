diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py
--- a/django/db/migrations/executor.py
+++ b/django/db/migrations/executor.py
@@ -329,8 +329,11 @@ def should_skip_detecting_model(migration, model):
         apps = after_state.apps
         found_create_model_migration = False
         found_add_field_migration = False
+        fold_identifier_case = self.connection.features.ignores_table_name_case
         with self.connection.cursor() as cursor:
-            existing_table_names = self.connection.introspection.table_names(cursor)
+            existing_table_names = set(self.connection.introspection.table_names(cursor))
+            if fold_identifier_case:
+                existing_table_names = {name.casefold() for name in existing_table_names}
         # Make sure all create model and add field operations are done
         for operation in migration.operations:
             if isinstance(operation, migrations.CreateModel):
@@ -341,7 +344,10 @@ def should_skip_detecting_model(migration, model):
                     model = global_apps.get_model(model._meta.swapped)
                 if should_skip_detecting_model(migration, model):
                     continue
-                if model._meta.db_table not in existing_table_names:
+                db_table = model._meta.db_table
+                if fold_identifier_case:
+                    db_table = db_table.casefold()
+                if db_table not in existing_table_names:
                     return False, project_state
                 found_create_model_migration = True
             elif isinstance(operation, migrations.AddField):
@@ -358,19 +364,29 @@ def should_skip_detecting_model(migration, model):
 
                 # Handle implicit many-to-many tables created by AddField.
                 if field.many_to_many:
-                    if field.remote_field.through._meta.db_table not in existing_table_names:
+                    through_db_table = field.remote_field.through._meta.db_table
+                    if fold_identifier_case:
+                        through_db_table = through_db_table.casefold()
+                    if through_db_table not in existing_table_names:
                         return False, project_state
                     else:
                         found_add_field_migration = True
                         continue
-
-                column_names = [
-                    column.name for column in
-                    self.connection.introspection.get_table_description(self.connection.cursor(), table)
-                ]
-                if field.column not in column_names:
+                columns = self.connection.introspection.get_table_description(
+                    self.connection.cursor(),
+                    table,
+                )
+                for column in columns:
+                    field_column = field.column
+                    column_name = column.name
+                    if fold_identifier_case:
+                        column_name = column_name.casefold()
+                        field_column = field_column.casefold()
+                    if column_name == field_column:
+                        found_add_field_migration = True
+                        break
+                else:
                     return False, project_state
-                found_add_field_migration = True
         # If we get this far and we found at least one CreateModel or AddField migration,
         # the migration is considered implicitly applied.
         return (found_create_model_migration or found_add_field_migration), after_state
