[
    {
        "file": "django/db/models/indexes.py",
        "class": "Index",
        "method": "__init__, create_sql",
        "intended_behavior": "Modify the `__init__` method to accept an additional keyword argument `include`, which is a list of fields to be included in the index but not as key columns. Modify the `create_sql` method to generate SQL that appends the `INCLUDE` clause with the specified non-key columns. This change should preserve the existing functionality for databases that do not support the `INCLUDE` feature, defaulting to traditional index behavior in such cases."
    },
    {
        "file": "django/db/models/constraints.py",
        "class": "UniqueConstraint",
        "method": "__init__, create_sql",
        "intended_behavior": "Similar to the `Index` class, the `UniqueConstraint` class's `__init__` method should be updated to accept an `include` argument. The `create_sql` method must be adapted to incorporate the `INCLUDE` clause when generating SQL for unique constraints. The implementation should ensure that this feature is optional and that the existing functionality remains intact for databases or scenarios where `INCLUDE` is not used or supported."
    },
    {
        "file": "django/db/backends/base/schema.py",
        "class": "BaseDatabaseSchemaEditor",
        "method": "_create_index_sql, _create_unique_sql",
        "intended_behavior": "Update the class to support generating the correct SQL for indexes and unique constraints that include non-key columns. This could involve modifying or extending methods such as `_create_index_sql`, `_create_unique_sql`, and any other relevant method that prepares SQL statements for creating indexes and unique constraints, to detect and correctly handle the `INCLUDE` clause. The changes should maintain backward compatibility and should not affect the generation of SQL for indexes and constraints without included columns."
    }
]