[
    {
        "rel_file_path": "setup.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.6/setup.py",
        "start": 1,
        "end": 470,
        "class_name": null,
        "method_name": null,
        "code": "1 #!/usr/bin/env python\n2 \"\"\"Distutils based setup script for SymPy.\n3 \n4 This uses Distutils (https://python.org/sigs/distutils-sig/) the standard\n5 python mechanism for installing packages. Optionally, you can use\n6 Setuptools (https://setuptools.readthedocs.io/en/latest/)\n7 to automatically handle dependencies. For the easiest installation\n8 just type the command (you'll probably need root privileges for that):\n9 \n10     python setup.py install\n11 \n12 This will install the library in the default location. For instructions on\n13 how to customize the install procedure read the output of:\n14 \n15     python setup.py --help install\n16 \n17 In addition, there are some other commands:\n18 \n19     python setup.py clean -> will clean all trash (*.pyc and stuff)\n20     python setup.py test  -> will run the complete test suite\n21     python setup.py bench -> will run the complete benchmark suite\n22     python setup.py audit -> will run pyflakes checker on source code\n23 \n24 To get a full list of available commands, read the output of:\n25 \n26     python setup.py --help-commands\n27 \n28 Or, if all else fails, feel free to write to the sympy list at\n29 sympy@googlegroups.com and ask for help.\n30 \"\"\"\n31 \n32 import sys\n33 import os\n34 import shutil\n35 import glob\n36 import subprocess\n37 \n38 from distutils.command.sdist import sdist\n39 \n40 \n41 min_mpmath_version = '0.19'\n42 \n43 # This directory\n44 dir_setup = os.path.dirname(os.path.realpath(__file__))\n45 \n46 extra_kwargs = {}\n47 \n48 try:\n49     from setuptools import setup, Command\n50     extra_kwargs['zip_safe'] = False\n51     extra_kwargs['entry_points'] = {\n52         'console_scripts': [\n53             'isympy = isympy:main',\n54         ]\n55     }\n56 except ImportError:\n57     from distutils.core import setup, Command\n58 \n59     extra_kwargs['scripts'] = ['bin/isympy']\n60 \n61     # handle mpmath deps in the hard way:\n62     from distutils.version import LooseVersion\n63     try:\n64         import mpmath\n65         if mpmath.__version__ < LooseVersion(min_mpmath_version):\n66             raise ImportError\n67     except ImportError:\n68         print(\"Please install the mpmath package with a version >= %s\"\n69               % min_mpmath_version)\n70         sys.exit(-1)\n71 \n72 if sys.version_info < (3, 5):\n73     print(\"SymPy requires Python 3.5 or newer. Python %d.%d detected\"\n74           % sys.version_info[:2])\n75     sys.exit(-1)\n76 \n77 # Check that this list is uptodate against the result of the command:\n78 # python bin/generate_module_list.py\n79 modules = [\n80     'sympy.algebras',\n81     'sympy.assumptions',\n82     'sympy.assumptions.handlers',\n83     'sympy.benchmarks',\n84     'sympy.calculus',\n85     'sympy.categories',\n86     'sympy.codegen',\n87     'sympy.combinatorics',\n88     'sympy.concrete',\n89     'sympy.core',\n90     'sympy.core.benchmarks',\n91     'sympy.crypto',\n92     'sympy.deprecated',\n93     'sympy.diffgeom',\n94     'sympy.discrete',\n95     'sympy.external',\n96     'sympy.functions',\n97     'sympy.functions.combinatorial',\n98     'sympy.functions.elementary',\n99     'sympy.functions.elementary.benchmarks',\n100     'sympy.functions.special',\n101     'sympy.functions.special.benchmarks',\n102     'sympy.geometry',\n103     'sympy.holonomic',\n104     'sympy.integrals',\n105     'sympy.integrals.benchmarks',\n106     'sympy.integrals.rubi',\n107     'sympy.integrals.rubi.parsetools',\n108     'sympy.integrals.rubi.rubi_tests',\n109     'sympy.integrals.rubi.rules',\n110     'sympy.interactive',\n111     'sympy.liealgebras',\n112     'sympy.logic',\n113     'sympy.logic.algorithms',\n114     'sympy.logic.utilities',\n115     'sympy.matrices',\n116     'sympy.matrices.benchmarks',\n117     'sympy.matrices.expressions',\n118     'sympy.multipledispatch',\n119     'sympy.ntheory',\n120     'sympy.parsing',\n121     'sympy.parsing.autolev',\n122     'sympy.parsing.autolev._antlr',\n123     'sympy.parsing.c',\n124     'sympy.parsing.fortran',\n125     'sympy.parsing.latex',\n126     'sympy.parsing.latex._antlr',\n127     'sympy.physics',\n128     'sympy.physics.continuum_mechanics',\n129     'sympy.physics.hep',\n130     'sympy.physics.mechanics',\n131     'sympy.physics.optics',\n132     'sympy.physics.quantum',\n133     'sympy.physics.units',\n134     'sympy.physics.units.definitions',\n135     'sympy.physics.units.systems',\n136     'sympy.physics.vector',\n137     'sympy.plotting',\n138     'sympy.plotting.intervalmath',\n139     'sympy.plotting.pygletplot',\n140     'sympy.polys',\n141     'sympy.polys.agca',\n142     'sympy.polys.benchmarks',\n143     'sympy.polys.domains',\n144     'sympy.printing',\n145     'sympy.printing.pretty',\n146     'sympy.sandbox',\n147     'sympy.series',\n148     'sympy.series.benchmarks',\n149     'sympy.sets',\n150     'sympy.sets.handlers',\n151     'sympy.simplify',\n152     'sympy.solvers',\n153     'sympy.solvers.benchmarks',\n154     'sympy.solvers.diophantine',\n155     'sympy.solvers.ode',\n156     'sympy.stats',\n157     'sympy.strategies',\n158     'sympy.strategies.branch',\n159     'sympy.tensor',\n160     'sympy.tensor.array',\n161     'sympy.testing',\n162     'sympy.unify',\n163     'sympy.utilities',\n164     'sympy.utilities._compilation',\n165     'sympy.utilities.mathml',\n166     'sympy.vector',\n167 ]\n168 \n169 class audit(Command):\n170     \"\"\"Audits SymPy's source code for following issues:\n171         - Names which are used but not defined or used before they are defined.\n172         - Names which are redefined without having been used.\n173     \"\"\"\n174 \n175     description = \"Audit SymPy source with PyFlakes\"\n176     user_options = []\n177 \n178     def initialize_options(self):\n179         self.all = None\n180 \n181     def finalize_options(self):\n182         pass\n183 \n184     def run(self):\n185         import os\n186         try:\n187             import pyflakes.scripts.pyflakes as flakes\n188         except ImportError:\n189             print(\"In order to run the audit, you need to have PyFlakes installed.\")\n190             sys.exit(-1)\n191         dirs = (os.path.join(*d) for d in (m.split('.') for m in modules))\n192         warns = 0\n193         for dir in dirs:\n194             for filename in os.listdir(dir):\n195                 if filename.endswith('.py') and filename != '__init__.py':\n196                     warns += flakes.checkPath(os.path.join(dir, filename))\n197         if warns > 0:\n198             print(\"Audit finished with total %d warnings\" % warns)\n199 \n200 \n201 class clean(Command):\n202     \"\"\"Cleans *.pyc and debian trashs, so you should get the same copy as\n203     is in the VCS.\n204     \"\"\"\n205 \n206     description = \"remove build files\"\n207     user_options = [(\"all\", \"a\", \"the same\")]\n208 \n209     def initialize_options(self):\n210         self.all = None\n211 \n212     def finalize_options(self):\n213         pass\n214 \n215     def run(self):\n216         curr_dir = os.getcwd()\n217         for root, dirs, files in os.walk(dir_setup):\n218             for file in files:\n219                 if file.endswith('.pyc') and os.path.isfile:\n220                     os.remove(os.path.join(root, file))\n221 \n222         os.chdir(dir_setup)\n223         names = [\"python-build-stamp-2.4\", \"MANIFEST\", \"build\",\n224                  \"dist\", \"doc/_build\", \"sample.tex\"]\n225 \n226         for f in names:\n227             if os.path.isfile(f):\n228                 os.remove(f)\n229             elif os.path.isdir(f):\n230                 shutil.rmtree(f)\n231 \n232         for name in glob.glob(os.path.join(dir_setup, \"doc\", \"src\", \"modules\",\n233                                            \"physics\", \"vector\", \"*.pdf\")):\n234             if os.path.isfile(name):\n235                 os.remove(name)\n236 \n237         os.chdir(curr_dir)\n238 \n239 \n240 class test_sympy(Command):\n241     \"\"\"Runs all tests under the sympy/ folder\n242     \"\"\"\n243 \n244     description = \"run all tests and doctests; also see bin/test and bin/doctest\"\n245     user_options = []  # distutils complains if this is not here.\n246 \n247     def __init__(self, *args):\n248         self.args = args[0]  # so we can pass it to other classes\n249         Command.__init__(self, *args)\n250 \n251     def initialize_options(self):  # distutils wants this\n252         pass\n253 \n254     def finalize_options(self):    # this too\n255         pass\n256 \n257     def run(self):\n258         from sympy.utilities import runtests\n259         runtests.run_all_tests()\n260 \n261 \n262 class run_benchmarks(Command):\n263     \"\"\"Runs all SymPy benchmarks\"\"\"\n264 \n265     description = \"run all benchmarks\"\n266     user_options = []  # distutils complains if this is not here.\n267 \n268     def __init__(self, *args):\n269         self.args = args[0]  # so we can pass it to other classes\n270         Command.__init__(self, *args)\n271 \n272     def initialize_options(self):  # distutils wants this\n273         pass\n274 \n275     def finalize_options(self):    # this too\n276         pass\n277 \n278     # we use py.test like architecture:\n279     #\n280     # o collector   -- collects benchmarks\n281     # o runner      -- executes benchmarks\n282     # o presenter   -- displays benchmarks results\n283     #\n284     # this is done in sympy.utilities.benchmarking on top of py.test\n285     def run(self):\n286         from sympy.utilities import benchmarking\n287         benchmarking.main(['sympy'])\n288 \n289 \n290 class antlr(Command):\n291     \"\"\"Generate code with antlr4\"\"\"\n292     description = \"generate parser code from antlr grammars\"\n293     user_options = []  # distutils complains if this is not here.\n294 \n295     def __init__(self, *args):\n296         self.args = args[0]  # so we can pass it to other classes\n297         Command.__init__(self, *args)\n298 \n299     def initialize_options(self):  # distutils wants this\n300         pass\n301 \n302     def finalize_options(self):    # this too\n303         pass\n304 \n305     def run(self):\n306         from sympy.parsing.latex._build_latex_antlr import build_parser\n307         if not build_parser():\n308             sys.exit(-1)\n309 \n310 \n311 class sdist_sympy(sdist):\n312     def run(self):\n313         # Fetch git commit hash and write down to commit_hash.txt before\n314         # shipped in tarball.\n315         commit_hash = None\n316         commit_hash_filepath = 'doc/commit_hash.txt'\n317         try:\n318             commit_hash = \\\n319                 subprocess.check_output(['git', 'rev-parse', 'HEAD'])\n320             commit_hash = commit_hash.decode('ascii')\n321             commit_hash = commit_hash.rstrip()\n322             print('Commit hash found : {}.'.format(commit_hash))\n323             print('Writing it to {}.'.format(commit_hash_filepath))\n324         except:\n325             pass\n326 \n327         if commit_hash:\n328             with open(commit_hash_filepath, 'w') as f:\n329                 f.write(commit_hash)\n330 \n331         super(sdist_sympy, self).run()\n332 \n333         try:\n334             os.remove(commit_hash_filepath)\n335             print(\n336                 'Successfully removed temporary file {}.'\n337                 .format(commit_hash_filepath))\n338         except OSError as e:\n339             print(\"Error deleting %s - %s.\" % (e.filename, e.strerror))\n340 \n341 \n342 # Check that this list is uptodate against the result of the command:\n343 # python bin/generate_test_list.py\n344 tests = [\n345     'sympy.algebras.tests',\n346     'sympy.assumptions.tests',\n347     'sympy.calculus.tests',\n348     'sympy.categories.tests',\n349     'sympy.codegen.tests',\n350     'sympy.combinatorics.tests',\n351     'sympy.concrete.tests',\n352     'sympy.core.tests',\n353     'sympy.crypto.tests',\n354     'sympy.deprecated.tests',\n355     'sympy.diffgeom.tests',\n356     'sympy.discrete.tests',\n357     'sympy.external.tests',\n358     'sympy.functions.combinatorial.tests',\n359     'sympy.functions.elementary.tests',\n360     'sympy.functions.special.tests',\n361     'sympy.geometry.tests',\n362     'sympy.holonomic.tests',\n363     'sympy.integrals.rubi.parsetools.tests',\n364     'sympy.integrals.rubi.rubi_tests.tests',\n365     'sympy.integrals.rubi.tests',\n366     'sympy.integrals.tests',\n367     'sympy.interactive.tests',\n368     'sympy.liealgebras.tests',\n369     'sympy.logic.tests',\n370     'sympy.matrices.expressions.tests',\n371     'sympy.matrices.tests',\n372     'sympy.multipledispatch.tests',\n373     'sympy.ntheory.tests',\n374     'sympy.parsing.tests',\n375     'sympy.physics.continuum_mechanics.tests',\n376     'sympy.physics.hep.tests',\n377     'sympy.physics.mechanics.tests',\n378     'sympy.physics.optics.tests',\n379     'sympy.physics.quantum.tests',\n380     'sympy.physics.tests',\n381     'sympy.physics.units.tests',\n382     'sympy.physics.vector.tests',\n383     'sympy.plotting.intervalmath.tests',\n384     'sympy.plotting.pygletplot.tests',\n385     'sympy.plotting.tests',\n386     'sympy.polys.agca.tests',\n387     'sympy.polys.domains.tests',\n388     'sympy.polys.tests',\n389     'sympy.printing.pretty.tests',\n390     'sympy.printing.tests',\n391     'sympy.sandbox.tests',\n392     'sympy.series.tests',\n393     'sympy.sets.tests',\n394     'sympy.simplify.tests',\n395     'sympy.solvers.diophantine.tests',\n396     'sympy.solvers.ode.tests',\n397     'sympy.solvers.tests',\n398     'sympy.stats.tests',\n399     'sympy.strategies.branch.tests',\n400     'sympy.strategies.tests',\n401     'sympy.tensor.array.tests',\n402     'sympy.tensor.tests',\n403     'sympy.testing.tests',\n404     'sympy.unify.tests',\n405     'sympy.utilities._compilation.tests',\n406     'sympy.utilities.tests',\n407     'sympy.vector.tests',\n408 ]\n409 \n410 \n411 with open(os.path.join(dir_setup, 'sympy', 'release.py')) as f:\n412     # Defines __version__\n413     exec(f.read())\n414 \n415 \n416 if __name__ == '__main__':\n417     setup(name='sympy',\n418           version=__version__,\n419           description='Computer algebra system (CAS) in Python',\n420           author='SymPy development team',\n421           author_email='sympy@googlegroups.com',\n422           license='BSD',\n423           keywords=\"Math CAS\",\n424           url='https://sympy.org',\n425           py_modules=['isympy'],\n426           packages=['sympy'] + modules + tests,\n427           ext_modules=[],\n428           package_data={\n429               'sympy.utilities.mathml': ['data/*.xsl'],\n430               'sympy.logic.benchmarks': ['input/*.cnf'],\n431               'sympy.parsing.autolev': [\n432                   '*.g4', 'test-examples/*.al', 'test-examples/*.py',\n433                   'test-examples/pydy-example-repo/*.al',\n434                   'test-examples/pydy-example-repo/*.py',\n435                   'test-examples/README.txt',\n436                   ],\n437               'sympy.parsing.latex': ['*.txt', '*.g4'],\n438               'sympy.integrals.rubi.parsetools': ['header.py.txt'],\n439               'sympy.plotting.tests': ['test_region_*.png'],\n440               },\n441           data_files=[('share/man/man1', ['doc/man/isympy.1'])],\n442           cmdclass={'test': test_sympy,\n443                     'bench': run_benchmarks,\n444                     'clean': clean,\n445                     'audit': audit,\n446                     'antlr': antlr,\n447                     'sdist': sdist_sympy,\n448                     },\n449           python_requires='>=3.5',\n450           classifiers=[\n451             'License :: OSI Approved :: BSD License',\n452             'Operating System :: OS Independent',\n453             'Programming Language :: Python',\n454             'Topic :: Scientific/Engineering',\n455             'Topic :: Scientific/Engineering :: Mathematics',\n456             'Topic :: Scientific/Engineering :: Physics',\n457             'Programming Language :: Python :: 3',\n458             'Programming Language :: Python :: 3.5',\n459             'Programming Language :: Python :: 3.6',\n460             'Programming Language :: Python :: 3.7',\n461             'Programming Language :: Python :: 3.8',\n462             'Programming Language :: Python :: 3 :: Only',\n463             'Programming Language :: Python :: Implementation :: CPython',\n464             'Programming Language :: Python :: Implementation :: PyPy',\n465             ],\n466           install_requires=[\n467             'mpmath>=%s' % min_mpmath_version,\n468             ],\n469           **extra_kwargs\n470           )\n",
        "intended_behavior": "This file should ensure the project version is correctly set up for packaging. The intended modification or checkout would be to ensure the version reflects the upcoming or new release version following the merge of significant patches."
    },
    {
        "rel_file_path": "sympy/__init__.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.6/sympy/__init__.py",
        "start": 1,
        "end": 689,
        "class_name": null,
        "method_name": null,
        "code": "1 \"\"\"\n2 SymPy is a Python library for symbolic mathematics. It aims to become a\n3 full-featured computer algebra system (CAS) while keeping the code as simple\n4 as possible in order to be comprehensible and easily extensible.  SymPy is\n5 written entirely in Python. It depends on mpmath, and other external libraries\n6 may be optionally for things like plotting support.\n7 \n8 See the webpage for more information and documentation:\n9 \n10     https://sympy.org\n11 \n12 \"\"\"\n13 \n14 \n15 import sys\n16 if sys.version_info < (3, 5):\n17     raise ImportError(\"Python version 3.5 or above is required for SymPy.\")\n18 del sys\n19 \n20 \n21 try:\n22     import mpmath\n23 except ImportError:\n24     raise ImportError(\"SymPy now depends on mpmath as an external library. \"\n25     \"See https://docs.sympy.org/latest/install.html#mpmath for more information.\")\n26 \n27 del mpmath\n28 \n29 from sympy.release import __version__\n30 \n31 if 'dev' in __version__:\n32     def enable_warnings():\n33         import warnings\n34         warnings.filterwarnings('default',   '.*',   DeprecationWarning, module='sympy.*')\n35         del warnings\n36     enable_warnings()\n37     del enable_warnings\n38 \n39 \n40 def __sympy_debug():\n41     # helper function so we don't import os globally\n42     import os\n43     debug_str = os.getenv('SYMPY_DEBUG', 'False')\n44     if debug_str in ('True', 'False'):\n45         return eval(debug_str)\n46     else:\n47         raise RuntimeError(\"unrecognized value for SYMPY_DEBUG: %s\" %\n48                            debug_str)\n49 SYMPY_DEBUG = __sympy_debug()  # type: bool\n50 \n51 from .core import (sympify, SympifyError, cacheit, Basic, Atom,\n52         preorder_traversal, S, Expr, AtomicExpr, UnevaluatedExpr, Symbol,\n53         Wild, Dummy, symbols, var, Number, Float, Rational, Integer,\n54         NumberSymbol, RealNumber, igcd, ilcm, seterr, E, I, nan, oo, pi, zoo,\n55         AlgebraicNumber, comp, mod_inverse, Pow, integer_nthroot, integer_log,\n56         Mul, prod, Add, Mod, Rel, Eq, Ne, Lt, Le, Gt, Ge, Equality,\n57         GreaterThan, LessThan, Unequality, StrictGreaterThan, StrictLessThan,\n58         vectorize, Lambda, WildFunction, Derivative, diff, FunctionClass,\n59         Function, Subs, expand, PoleError, count_ops, expand_mul, expand_log,\n60         expand_func, expand_trig, expand_complex, expand_multinomial, nfloat,\n61         expand_power_base, expand_power_exp, arity, PrecisionExhausted, N,\n62         evalf, Tuple, Dict, gcd_terms, factor_terms, factor_nc, evaluate,\n63         Catalan, EulerGamma, GoldenRatio, TribonacciConstant)\n64 \n65 from .logic import (to_cnf, to_dnf, to_nnf, And, Or, Not, Xor, Nand, Nor,\n66         Implies, Equivalent, ITE, POSform, SOPform, simplify_logic, bool_map,\n67         true, false, satisfiable)\n68 \n69 from .assumptions import (AppliedPredicate, Predicate, AssumptionsContext,\n70         assuming, Q, ask, register_handler, remove_handler, refine)\n71 \n72 from .polys import (Poly, PurePoly, poly_from_expr, parallel_poly_from_expr,\n73         degree, total_degree, degree_list, LC, LM, LT, pdiv, prem, pquo,\n74         pexquo, div, rem, quo, exquo, half_gcdex, gcdex, invert,\n75         subresultants, resultant, discriminant, cofactors, gcd_list, gcd,\n76         lcm_list, lcm, terms_gcd, trunc, monic, content, primitive, compose,\n77         decompose, sturm, gff_list, gff, sqf_norm, sqf_part, sqf_list, sqf,\n78         factor_list, factor, intervals, refine_root, count_roots, real_roots,\n79         nroots, ground_roots, nth_power_roots_poly, cancel, reduced, groebner,\n80         is_zero_dimensional, GroebnerBasis, poly, symmetrize, horner,\n81         interpolate, rational_interpolate, viete, together,\n82         BasePolynomialError, ExactQuotientFailed, PolynomialDivisionFailed,\n83         OperationNotSupported, HeuristicGCDFailed, HomomorphismFailed,\n84         IsomorphismFailed, ExtraneousFactors, EvaluationFailed,\n85         RefinementFailed, CoercionFailed, NotInvertible, NotReversible,\n86         NotAlgebraic, DomainError, PolynomialError, UnificationFailed,\n87         GeneratorsError, GeneratorsNeeded, ComputationFailed,\n88         UnivariatePolynomialError, MultivariatePolynomialError,\n89         PolificationFailed, OptionError, FlagError, minpoly,\n90         minimal_polynomial, primitive_element, field_isomorphism,\n91         to_number_field, isolate, itermonomials, Monomial, lex, grlex,\n92         grevlex, ilex, igrlex, igrevlex, CRootOf, rootof, RootOf,\n93         ComplexRootOf, RootSum, roots, Domain, FiniteField, IntegerRing,\n94         RationalField, RealField, ComplexField, PythonFiniteField,\n95         GMPYFiniteField, PythonIntegerRing, GMPYIntegerRing, PythonRational,\n96         GMPYRationalField, AlgebraicField, PolynomialRing, FractionField,\n97         ExpressionDomain, FF_python, FF_gmpy, ZZ_python, ZZ_gmpy, QQ_python,\n98         QQ_gmpy, GF, FF, ZZ, QQ, RR, CC, EX, construct_domain,\n99         swinnerton_dyer_poly, cyclotomic_poly, symmetric_poly, random_poly,\n100         interpolating_poly, jacobi_poly, chebyshevt_poly, chebyshevu_poly,\n101         hermite_poly, legendre_poly, laguerre_poly, apart, apart_list,\n102         assemble_partfrac_list, Options, ring, xring, vring, sring, field,\n103         xfield, vfield, sfield)\n104 \n105 from .series import (Order, O, limit, Limit, gruntz, series, approximants,\n106         residue, EmptySequence, SeqPer, SeqFormula, sequence, SeqAdd, SeqMul,\n107         fourier_series, fps, difference_delta, limit_seq)\n108 \n109 from .functions import (factorial, factorial2, rf, ff, binomial,\n110         RisingFactorial, FallingFactorial, subfactorial, carmichael,\n111         fibonacci, lucas, tribonacci, harmonic, bernoulli, bell, euler,\n112         catalan, genocchi, partition, sqrt, root, Min, Max, Id, real_root,\n113         cbrt, re, im, sign, Abs, conjugate, arg, polar_lift,\n114         periodic_argument, unbranched_argument, principal_branch, transpose,\n115         adjoint, polarify, unpolarify, sin, cos, tan, sec, csc, cot, sinc,\n116         asin, acos, atan, asec, acsc, acot, atan2, exp_polar, exp, ln, log,\n117         LambertW, sinh, cosh, tanh, coth, sech, csch, asinh, acosh, atanh,\n118         acoth, asech, acsch, floor, ceiling, frac, Piecewise, piecewise_fold,\n119         erf, erfc, erfi, erf2, erfinv, erfcinv, erf2inv, Ei, expint, E1, li,\n120         Li, Si, Ci, Shi, Chi, fresnels, fresnelc, gamma, lowergamma,\n121         uppergamma, polygamma, loggamma, digamma, trigamma, multigamma,\n122         dirichlet_eta, zeta, lerchphi, polylog, stieltjes, Eijk, LeviCivita,\n123         KroneckerDelta, SingularityFunction, DiracDelta, Heaviside,\n124         bspline_basis, bspline_basis_set, interpolating_spline, besselj,\n125         bessely, besseli, besselk, hankel1, hankel2, jn, yn, jn_zeros, hn1,\n126         hn2, airyai, airybi, airyaiprime, airybiprime, marcumq, hyper,\n127         meijerg, appellf1, legendre, assoc_legendre, hermite, chebyshevt,\n128         chebyshevu, chebyshevu_root, chebyshevt_root, laguerre,\n129         assoc_laguerre, gegenbauer, jacobi, jacobi_normalized, Ynm, Ynm_c,\n130         Znm, elliptic_k, elliptic_f, elliptic_e, elliptic_pi, beta, mathieus,\n131         mathieuc, mathieusprime, mathieucprime)\n132 \n133 from .ntheory import (nextprime, prevprime, prime, primepi, primerange,\n134         randprime, Sieve, sieve, primorial, cycle_length, composite,\n135         compositepi, isprime, divisors, proper_divisors, factorint,\n136         multiplicity, perfect_power, pollard_pm1, pollard_rho, primefactors,\n137         totient, trailing, divisor_count, proper_divisor_count, divisor_sigma,\n138         factorrat, reduced_totient, primenu, primeomega,\n139         mersenne_prime_exponent, is_perfect, is_mersenne_prime, is_abundant,\n140         is_deficient, is_amicable, abundance, npartitions, is_primitive_root,\n141         is_quad_residue, legendre_symbol, jacobi_symbol, n_order, sqrt_mod,\n142         quadratic_residues, primitive_root, nthroot_mod, is_nthpow_residue,\n143         sqrt_mod_iter, mobius, discrete_log, quadratic_congruence,\n144         binomial_coefficients, binomial_coefficients_list,\n145         multinomial_coefficients, continued_fraction_periodic,\n146         continued_fraction_iterator, continued_fraction_reduce,\n147         continued_fraction_convergents, continued_fraction, egyptian_fraction)\n148 \n149 from .concrete import product, Product, summation, Sum\n150 \n151 from .discrete import (fft, ifft, ntt, intt, fwht, ifwht, mobius_transform,\n152         inverse_mobius_transform, convolution, covering_product,\n153         intersecting_product)\n154 \n155 from .simplify import (simplify, hypersimp, hypersimilar, logcombine,\n156         separatevars, posify, besselsimp, kroneckersimp, signsimp, bottom_up,\n157         nsimplify, FU, fu, sqrtdenest, cse, use, epath, EPath, hyperexpand,\n158         collect, rcollect, radsimp, collect_const, fraction, numer, denom,\n159         trigsimp, exptrigsimp, powsimp, powdenest, combsimp, gammasimp,\n160         ratsimp, ratsimpmodprime)\n161 \n162 from .sets import (Set, Interval, Union, EmptySet, FiniteSet, ProductSet,\n163         Intersection, DisjointUnion, imageset, Complement, SymmetricDifference, ImageSet,\n164         Range, ComplexRegion, Reals, Contains, ConditionSet, Ordinal,\n165         OmegaPower, ord0, PowerSet, Naturals, Naturals0, UniversalSet,\n166         Integers, Rationals)\n167 \n168 from .solvers import (solve, solve_linear_system, solve_linear_system_LU,\n169         solve_undetermined_coeffs, nsolve, solve_linear, checksol, det_quick,\n170         inv_quick, check_assumptions, failing_assumptions, diophantine,\n171         rsolve, rsolve_poly, rsolve_ratio, rsolve_hyper, checkodesol,\n172         classify_ode, dsolve, homogeneous_order, solve_poly_system,\n173         solve_triangulated, pde_separate, pde_separate_add, pde_separate_mul,\n174         pdsolve, classify_pde, checkpdesol, ode_order, reduce_inequalities,\n175         reduce_abs_inequality, reduce_abs_inequalities, solve_poly_inequality,\n176         solve_rational_inequalities, solve_univariate_inequality, decompogen,\n177         solveset, linsolve, linear_eq_to_matrix, nonlinsolve, substitution,\n178         Complexes)\n179 \n180 from .matrices import (ShapeError, NonSquareMatrixError, GramSchmidt,\n181         casoratian, diag, eye, hessian, jordan_cell, list2numpy, matrix2numpy,\n182         matrix_multiply_elementwise, ones, randMatrix, rot_axis1, rot_axis2,\n183         rot_axis3, symarray, wronskian, zeros, MutableDenseMatrix,\n184         DeferredVector, MatrixBase, Matrix, MutableMatrix,\n185         MutableSparseMatrix, banded, ImmutableDenseMatrix,\n186         ImmutableSparseMatrix, ImmutableMatrix, SparseMatrix, MatrixSlice,\n187         BlockDiagMatrix, BlockMatrix, FunctionMatrix, Identity, Inverse,\n188         MatAdd, MatMul, MatPow, MatrixExpr, MatrixSymbol, Trace, Transpose,\n189         ZeroMatrix, OneMatrix, blockcut, block_collapse, matrix_symbols,\n190         Adjoint, hadamard_product, HadamardProduct, HadamardPower,\n191         Determinant, det, diagonalize_vector, DiagMatrix, DiagonalMatrix,\n192         DiagonalOf, trace, DotProduct, kronecker_product, KroneckerProduct,\n193         PermutationMatrix, MatrixPermute)\n194 \n195 from .geometry import (Point, Point2D, Point3D, Line, Ray, Segment, Line2D,\n196         Segment2D, Ray2D, Line3D, Segment3D, Ray3D, Plane, Ellipse, Circle,\n197         Polygon, RegularPolygon, Triangle, rad, deg, are_similar, centroid,\n198         convex_hull, idiff, intersection, closest_points, farthest_points,\n199         GeometryError, Curve, Parabola)\n200 \n201 from .utilities import (flatten, group, take, subsets, variations,\n202         numbered_symbols, cartes, capture, dict_merge, postorder_traversal,\n203         interactive_traversal, prefixes, postfixes, sift, topological_sort,\n204         unflatten, has_dups, has_variety, reshape, default_sort_key, ordered,\n205         rotations, filldedent, lambdify, source, threaded, xthreaded, public,\n206         memoize_property, timed)\n207 \n208 from .integrals import (integrate, Integral, line_integrate, mellin_transform,\n209         inverse_mellin_transform, MellinTransform, InverseMellinTransform,\n210         laplace_transform, inverse_laplace_transform, LaplaceTransform,\n211         InverseLaplaceTransform, fourier_transform, inverse_fourier_transform,\n212         FourierTransform, InverseFourierTransform, sine_transform,\n213         inverse_sine_transform, SineTransform, InverseSineTransform,\n214         cosine_transform, inverse_cosine_transform, CosineTransform,\n215         InverseCosineTransform, hankel_transform, inverse_hankel_transform,\n216         HankelTransform, InverseHankelTransform, singularityintegrate)\n217 \n218 from .tensor import (IndexedBase, Idx, Indexed, get_contraction_structure,\n219         get_indices, MutableDenseNDimArray, ImmutableDenseNDimArray,\n220         MutableSparseNDimArray, ImmutableSparseNDimArray, NDimArray,\n221         tensorproduct, tensorcontraction, derive_by_array, permutedims, Array,\n222         DenseNDimArray, SparseNDimArray)\n223 \n224 from .parsing import parse_expr\n225 \n226 from .calculus import (euler_equations, singularities, is_increasing,\n227         is_strictly_increasing, is_decreasing, is_strictly_decreasing,\n228         is_monotonic, finite_diff_weights, apply_finite_diff, as_finite_diff,\n229         differentiate_finite, periodicity, not_empty_in, AccumBounds,\n230         is_convex, stationary_points, minimum, maximum)\n231 \n232 from .algebras import Quaternion\n233 \n234 from .printing import (pager_print, pretty, pretty_print, pprint,\n235         pprint_use_unicode, pprint_try_use_unicode, latex, print_latex,\n236         multiline_latex, mathml, print_mathml, python, print_python, pycode,\n237         ccode, print_ccode, glsl_code, print_glsl, cxxcode, fcode,\n238         print_fcode, rcode, print_rcode, jscode, print_jscode, julia_code,\n239         mathematica_code, octave_code, rust_code, print_gtk, preview, srepr,\n240         print_tree, StrPrinter, sstr, sstrrepr, TableForm, dotprint,\n241         maple_code, print_maple_code)\n242 \n243 from .testing import test, doctest\n244 \n245 # This module causes conflicts with other modules:\n246 # from .stats import *\n247 # Adds about .04-.05 seconds of import time\n248 # from combinatorics import *\n249 # This module is slow to import:\n250 #from physics import units\n251 from .plotting import plot, textplot, plot_backends, plot_implicit, plot_parametric\n252 from .interactive import init_session, init_printing\n253 \n254 evalf._create_evalf_table()\n255 \n256 # This is slow to import:\n257 #import abc\n258 \n259 from .deprecated import C, ClassRegistry, class_registry\n260 \n261 __all__ = [\n262     # sympy.core\n263     'sympify', 'SympifyError', 'cacheit', 'Basic', 'Atom',\n264     'preorder_traversal', 'S', 'Expr', 'AtomicExpr', 'UnevaluatedExpr',\n265     'Symbol', 'Wild', 'Dummy', 'symbols', 'var', 'Number', 'Float',\n266     'Rational', 'Integer', 'NumberSymbol', 'RealNumber', 'igcd', 'ilcm',\n267     'seterr', 'E', 'I', 'nan', 'oo', 'pi', 'zoo', 'AlgebraicNumber', 'comp',\n268     'mod_inverse', 'Pow', 'integer_nthroot', 'integer_log', 'Mul', 'prod',\n269     'Add', 'Mod', 'Rel', 'Eq', 'Ne', 'Lt', 'Le', 'Gt', 'Ge', 'Equality',\n270     'GreaterThan', 'LessThan', 'Unequality', 'StrictGreaterThan',\n271     'StrictLessThan', 'vectorize', 'Lambda', 'WildFunction', 'Derivative',\n272     'diff', 'FunctionClass', 'Function', 'Subs', 'expand', 'PoleError',\n273     'count_ops', 'expand_mul', 'expand_log', 'expand_func', 'expand_trig',\n274     'expand_complex', 'expand_multinomial', 'nfloat', 'expand_power_base',\n275     'expand_power_exp', 'arity', 'PrecisionExhausted', 'N', 'evalf', 'Tuple',\n276     'Dict', 'gcd_terms', 'factor_terms', 'factor_nc', 'evaluate', 'Catalan',\n277     'EulerGamma', 'GoldenRatio', 'TribonacciConstant',\n278 \n279     # sympy.logic\n280     'to_cnf', 'to_dnf', 'to_nnf', 'And', 'Or', 'Not', 'Xor', 'Nand', 'Nor',\n281     'Implies', 'Equivalent', 'ITE', 'POSform', 'SOPform', 'simplify_logic',\n282     'bool_map', 'true', 'false', 'satisfiable',\n283 \n284     # sympy.assumptions\n285     'AppliedPredicate', 'Predicate', 'AssumptionsContext', 'assuming', 'Q',\n286     'ask', 'register_handler', 'remove_handler', 'refine',\n287 \n288     # sympy.polys\n289     'Poly', 'PurePoly', 'poly_from_expr', 'parallel_poly_from_expr', 'degree',\n290     'total_degree', 'degree_list', 'LC', 'LM', 'LT', 'pdiv', 'prem', 'pquo',\n291     'pexquo', 'div', 'rem', 'quo', 'exquo', 'half_gcdex', 'gcdex', 'invert',\n292     'subresultants', 'resultant', 'discriminant', 'cofactors', 'gcd_list',\n293     'gcd', 'lcm_list', 'lcm', 'terms_gcd', 'trunc', 'monic', 'content',\n294     'primitive', 'compose', 'decompose', 'sturm', 'gff_list', 'gff',\n295     'sqf_norm', 'sqf_part', 'sqf_list', 'sqf', 'factor_list', 'factor',\n296     'intervals', 'refine_root', 'count_roots', 'real_roots', 'nroots',\n297     'ground_roots', 'nth_power_roots_poly', 'cancel', 'reduced', 'groebner',\n298     'is_zero_dimensional', 'GroebnerBasis', 'poly', 'symmetrize', 'horner',\n299     'interpolate', 'rational_interpolate', 'viete', 'together',\n300     'BasePolynomialError', 'ExactQuotientFailed', 'PolynomialDivisionFailed',\n301     'OperationNotSupported', 'HeuristicGCDFailed', 'HomomorphismFailed',\n302     'IsomorphismFailed', 'ExtraneousFactors', 'EvaluationFailed',\n303     'RefinementFailed', 'CoercionFailed', 'NotInvertible', 'NotReversible',\n304     'NotAlgebraic', 'DomainError', 'PolynomialError', 'UnificationFailed',\n305     'GeneratorsError', 'GeneratorsNeeded', 'ComputationFailed',\n306     'UnivariatePolynomialError', 'MultivariatePolynomialError',\n307     'PolificationFailed', 'OptionError', 'FlagError', 'minpoly',\n308     'minimal_polynomial', 'primitive_element', 'field_isomorphism',\n309     'to_number_field', 'isolate', 'itermonomials', 'Monomial', 'lex', 'grlex',\n310     'grevlex', 'ilex', 'igrlex', 'igrevlex', 'CRootOf', 'rootof', 'RootOf',\n311     'ComplexRootOf', 'RootSum', 'roots', 'Domain', 'FiniteField',\n312     'IntegerRing', 'RationalField', 'RealField', 'ComplexField',\n313     'PythonFiniteField', 'GMPYFiniteField', 'PythonIntegerRing',\n314     'GMPYIntegerRing', 'PythonRational', 'GMPYRationalField',\n315     'AlgebraicField', 'PolynomialRing', 'FractionField', 'ExpressionDomain',\n316     'FF_python', 'FF_gmpy', 'ZZ_python', 'ZZ_gmpy', 'QQ_python', 'QQ_gmpy',\n317     'GF', 'FF', 'ZZ', 'QQ', 'RR', 'CC', 'EX', 'construct_domain',\n318     'swinnerton_dyer_poly', 'cyclotomic_poly', 'symmetric_poly',\n319     'random_poly', 'interpolating_poly', 'jacobi_poly', 'chebyshevt_poly',\n320     'chebyshevu_poly', 'hermite_poly', 'legendre_poly', 'laguerre_poly',\n321     'apart', 'apart_list', 'assemble_partfrac_list', 'Options', 'ring',\n322     'xring', 'vring', 'sring', 'field', 'xfield', 'vfield', 'sfield',\n323 \n324     # sympy.series\n325     'Order', 'O', 'limit', 'Limit', 'gruntz', 'series', 'approximants',\n326     'residue', 'EmptySequence', 'SeqPer', 'SeqFormula', 'sequence', 'SeqAdd',\n327     'SeqMul', 'fourier_series', 'fps', 'difference_delta', 'limit_seq',\n328 \n329     # sympy.functions\n330     'factorial', 'factorial2', 'rf', 'ff', 'binomial', 'RisingFactorial',\n331     'FallingFactorial', 'subfactorial', 'carmichael', 'fibonacci', 'lucas',\n332     'tribonacci', 'harmonic', 'bernoulli', 'bell', 'euler', 'catalan',\n333     'genocchi', 'partition', 'sqrt', 'root', 'Min', 'Max', 'Id', 'real_root',\n334     'cbrt', 're', 'im', 'sign', 'Abs', 'conjugate', 'arg', 'polar_lift',\n335     'periodic_argument', 'unbranched_argument', 'principal_branch',\n336     'transpose', 'adjoint', 'polarify', 'unpolarify', 'sin', 'cos', 'tan',\n337     'sec', 'csc', 'cot', 'sinc', 'asin', 'acos', 'atan', 'asec', 'acsc',\n338     'acot', 'atan2', 'exp_polar', 'exp', 'ln', 'log', 'LambertW', 'sinh',\n339     'cosh', 'tanh', 'coth', 'sech', 'csch', 'asinh', 'acosh', 'atanh',\n340     'acoth', 'asech', 'acsch', 'floor', 'ceiling', 'frac', 'Piecewise',\n341     'piecewise_fold', 'erf', 'erfc', 'erfi', 'erf2', 'erfinv', 'erfcinv',\n342     'erf2inv', 'Ei', 'expint', 'E1', 'li', 'Li', 'Si', 'Ci', 'Shi', 'Chi',\n343     'fresnels', 'fresnelc', 'gamma', 'lowergamma', 'uppergamma', 'polygamma',\n344     'loggamma', 'digamma', 'trigamma', 'multigamma', 'dirichlet_eta', 'zeta',\n345     'lerchphi', 'polylog', 'stieltjes', 'Eijk', 'LeviCivita',\n346     'KroneckerDelta', 'SingularityFunction', 'DiracDelta', 'Heaviside',\n347     'bspline_basis', 'bspline_basis_set', 'interpolating_spline', 'besselj',\n348     'bessely', 'besseli', 'besselk', 'hankel1', 'hankel2', 'jn', 'yn',\n349     'jn_zeros', 'hn1', 'hn2', 'airyai', 'airybi', 'airyaiprime',\n350     'airybiprime', 'marcumq', 'hyper', 'meijerg', 'appellf1', 'legendre',\n351     'assoc_legendre', 'hermite', 'chebyshevt', 'chebyshevu',\n352     'chebyshevu_root', 'chebyshevt_root', 'laguerre', 'assoc_laguerre',\n353     'gegenbauer', 'jacobi', 'jacobi_normalized', 'Ynm', 'Ynm_c', 'Znm',\n354     'elliptic_k', 'elliptic_f', 'elliptic_e', 'elliptic_pi', 'beta',\n355     'mathieus', 'mathieuc', 'mathieusprime', 'mathieucprime',\n356 \n357     # sympy.ntheory\n358     'nextprime', 'prevprime', 'prime', 'primepi', 'primerange', 'randprime',\n359     'Sieve', 'sieve', 'primorial', 'cycle_length', 'composite', 'compositepi',\n360     'isprime', 'divisors', 'proper_divisors', 'factorint', 'multiplicity',\n361     'perfect_power', 'pollard_pm1', 'pollard_rho', 'primefactors', 'totient',\n362     'trailing', 'divisor_count', 'proper_divisor_count', 'divisor_sigma',\n363     'factorrat', 'reduced_totient', 'primenu', 'primeomega',\n364     'mersenne_prime_exponent', 'is_perfect', 'is_mersenne_prime',\n365     'is_abundant', 'is_deficient', 'is_amicable', 'abundance', 'npartitions',\n366     'is_primitive_root', 'is_quad_residue', 'legendre_symbol',\n367     'jacobi_symbol', 'n_order', 'sqrt_mod', 'quadratic_residues',\n368     'primitive_root', 'nthroot_mod', 'is_nthpow_residue', 'sqrt_mod_iter',\n369     'mobius', 'discrete_log', 'quadratic_congruence', 'binomial_coefficients',\n370     'binomial_coefficients_list', 'multinomial_coefficients',\n371     'continued_fraction_periodic', 'continued_fraction_iterator',\n372     'continued_fraction_reduce', 'continued_fraction_convergents',\n373     'continued_fraction', 'egyptian_fraction',\n374 \n375     # sympy.concrete\n376     'product', 'Product', 'summation', 'Sum',\n377 \n378     # sympy.discrete\n379     'fft', 'ifft', 'ntt', 'intt', 'fwht', 'ifwht', 'mobius_transform',\n380     'inverse_mobius_transform', 'convolution', 'covering_product',\n381     'intersecting_product',\n382 \n383     # sympy.simplify\n384     'simplify', 'hypersimp', 'hypersimilar', 'logcombine', 'separatevars',\n385     'posify', 'besselsimp', 'kroneckersimp', 'signsimp', 'bottom_up',\n386     'nsimplify', 'FU', 'fu', 'sqrtdenest', 'cse', 'use', 'epath', 'EPath',\n387     'hyperexpand', 'collect', 'rcollect', 'radsimp', 'collect_const',\n388     'fraction', 'numer', 'denom', 'trigsimp', 'exptrigsimp', 'powsimp',\n389     'powdenest', 'combsimp', 'gammasimp', 'ratsimp', 'ratsimpmodprime',\n390 \n391     # sympy.sets\n392     'Set', 'Interval', 'Union', 'EmptySet', 'FiniteSet', 'ProductSet',\n393     'Intersection', 'imageset', 'DisjointUnion', 'Complement', 'SymmetricDifference',\n394     'ImageSet', 'Range', 'ComplexRegion', 'Reals', 'Contains', 'ConditionSet',\n395     'Ordinal', 'OmegaPower', 'ord0', 'PowerSet', 'Reals', 'Naturals',\n396     'Naturals0', 'UniversalSet', 'Integers', 'Rationals',\n397 \n398     # sympy.solvers\n399     'solve', 'solve_linear_system', 'solve_linear_system_LU',\n400     'solve_undetermined_coeffs', 'nsolve', 'solve_linear', 'checksol',\n401     'det_quick', 'inv_quick', 'check_assumptions', 'failing_assumptions',\n402     'diophantine', 'rsolve', 'rsolve_poly', 'rsolve_ratio', 'rsolve_hyper',\n403     'checkodesol', 'classify_ode', 'dsolve', 'homogeneous_order',\n404     'solve_poly_system', 'solve_triangulated', 'pde_separate',\n405     'pde_separate_add', 'pde_separate_mul', 'pdsolve', 'classify_pde',\n406     'checkpdesol', 'ode_order', 'reduce_inequalities',\n407     'reduce_abs_inequality', 'reduce_abs_inequalities',\n408     'solve_poly_inequality', 'solve_rational_inequalities',\n409     'solve_univariate_inequality', 'decompogen', 'solveset', 'linsolve',\n410     'linear_eq_to_matrix', 'nonlinsolve', 'substitution', 'Complexes',\n411 \n412     # sympy.matrices\n413     'ShapeError', 'NonSquareMatrixError', 'GramSchmidt', 'casoratian', 'diag',\n414     'eye', 'hessian', 'jordan_cell', 'list2numpy', 'matrix2numpy',\n415     'matrix_multiply_elementwise', 'ones', 'randMatrix', 'rot_axis1',\n416     'rot_axis2', 'rot_axis3', 'symarray', 'wronskian', 'zeros',\n417     'MutableDenseMatrix', 'DeferredVector', 'MatrixBase', 'Matrix',\n418     'MutableMatrix', 'MutableSparseMatrix', 'banded', 'ImmutableDenseMatrix',\n419     'ImmutableSparseMatrix', 'ImmutableMatrix', 'SparseMatrix', 'MatrixSlice',\n420     'BlockDiagMatrix', 'BlockMatrix', 'FunctionMatrix', 'Identity', 'Inverse',\n421     'MatAdd', 'MatMul', 'MatPow', 'MatrixExpr', 'MatrixSymbol', 'Trace',\n422     'Transpose', 'ZeroMatrix', 'OneMatrix', 'blockcut', 'block_collapse',\n423     'matrix_symbols', 'Adjoint', 'hadamard_product', 'HadamardProduct',\n424     'HadamardPower', 'Determinant', 'det', 'diagonalize_vector', 'DiagMatrix',\n425     'DiagonalMatrix', 'DiagonalOf', 'trace', 'DotProduct',\n426     'kronecker_product', 'KroneckerProduct', 'PermutationMatrix',\n427     'MatrixPermute',\n428 \n429     # sympy.geometry\n430     'Point', 'Point2D', 'Point3D', 'Line', 'Ray', 'Segment', 'Line2D',\n431     'Segment2D', 'Ray2D', 'Line3D', 'Segment3D', 'Ray3D', 'Plane', 'Ellipse',\n432     'Circle', 'Polygon', 'RegularPolygon', 'Triangle', 'rad', 'deg',\n433     'are_similar', 'centroid', 'convex_hull', 'idiff', 'intersection',\n434     'closest_points', 'farthest_points', 'GeometryError', 'Curve', 'Parabola',\n435 \n436     # sympy.utilities\n437     'flatten', 'group', 'take', 'subsets', 'variations', 'numbered_symbols',\n438     'cartes', 'capture', 'dict_merge', 'postorder_traversal',\n439     'interactive_traversal', 'prefixes', 'postfixes', 'sift',\n440     'topological_sort', 'unflatten', 'has_dups', 'has_variety', 'reshape',\n441     'default_sort_key', 'ordered', 'rotations', 'filldedent', 'lambdify',\n442     'source', 'threaded', 'xthreaded', 'public', 'memoize_property', 'test',\n443     'doctest', 'timed',\n444 \n445     # sympy.integrals\n446     'integrate', 'Integral', 'line_integrate', 'mellin_transform',\n447     'inverse_mellin_transform', 'MellinTransform', 'InverseMellinTransform',\n448     'laplace_transform', 'inverse_laplace_transform', 'LaplaceTransform',\n449     'InverseLaplaceTransform', 'fourier_transform',\n450     'inverse_fourier_transform', 'FourierTransform',\n451     'InverseFourierTransform', 'sine_transform', 'inverse_sine_transform',\n452     'SineTransform', 'InverseSineTransform', 'cosine_transform',\n453     'inverse_cosine_transform', 'CosineTransform', 'InverseCosineTransform',\n454     'hankel_transform', 'inverse_hankel_transform', 'HankelTransform',\n455     'InverseHankelTransform', 'singularityintegrate',\n456 \n457     # sympy.tensor\n458     'IndexedBase', 'Idx', 'Indexed', 'get_contraction_structure',\n459     'get_indices', 'MutableDenseNDimArray', 'ImmutableDenseNDimArray',\n460     'MutableSparseNDimArray', 'ImmutableSparseNDimArray', 'NDimArray',\n461     'tensorproduct', 'tensorcontraction', 'derive_by_array', 'permutedims',\n462     'Array', 'DenseNDimArray', 'SparseNDimArray',\n463 \n464     # sympy.parsing\n465     'parse_expr',\n466 \n467     # sympy.calculus\n468     'euler_equations', 'singularities', 'is_increasing',\n469     'is_strictly_increasing', 'is_decreasing', 'is_strictly_decreasing',\n470     'is_monotonic', 'finite_diff_weights', 'apply_finite_diff',\n471     'as_finite_diff', 'differentiate_finite', 'periodicity', 'not_empty_in',\n472     'AccumBounds', 'is_convex', 'stationary_points', 'minimum', 'maximum',\n473 \n474     # sympy.algebras\n475     'Quaternion',\n476 \n477     # sympy.printing\n478     'pager_print', 'pretty', 'pretty_print', 'pprint', 'pprint_use_unicode',\n479     'pprint_try_use_unicode', 'latex', 'print_latex', 'multiline_latex',\n480     'mathml', 'print_mathml', 'python', 'print_python', 'pycode', 'ccode',\n481     'print_ccode', 'glsl_code', 'print_glsl', 'cxxcode', 'fcode',\n482     'print_fcode', 'rcode', 'print_rcode', 'jscode', 'print_jscode',\n483     'julia_code', 'mathematica_code', 'octave_code', 'rust_code', 'print_gtk',\n484     'preview', 'srepr', 'print_tree', 'StrPrinter', 'sstr', 'sstrrepr',\n485     'TableForm', 'dotprint', 'maple_code', 'print_maple_code',\n486 \n487     # sympy.plotting\n488     'plot', 'textplot', 'plot_backends', 'plot_implicit', 'plot_parametric',\n489 \n490     # sympy.interactive\n491     'init_session', 'init_printing',\n492 \n493     # sympy.testing\n494     'test', 'doctest',\n495 \n496     # sympy.deprecated:\n497     'C', 'ClassRegistry', 'class_registry',\n498 ]\n499 \n500 \n501 #===========================================================================#\n502 #                                                                           #\n503 # XXX: The names below were importable before sympy 1.6 using               #\n504 #                                                                           #\n505 #          from sympy import *                                              #\n506 #                                                                           #\n507 # This happened implicitly because there was no __all__ defined in this     #\n508 # __init__.py file. Not every package is imported. The list matches what    #\n509 # would have been imported before. It is possible that these packages will  #\n510 # not be imported by a star-import from sympy in future.                    #\n511 #                                                                           #\n512 #===========================================================================#\n513 \n514 \n515 __all__.extend([\n516     'algebras',\n517     'assumptions',\n518     'calculus',\n519     'codegen',\n520     'combinatorics',\n521     'concrete',\n522     'deprecated',\n523     'discrete',\n524     'external',\n525     'functions',\n526     'geometry',\n527     'interactive',\n528     'multipledispatch',\n529     'ntheory',\n530     'parsing',\n531     'plotting',\n532     'polys',\n533     'printing',\n534     'release',\n535     'strategies',\n536     'tensor',\n537     'utilities',\n538 ])\n539 \n540 \n541 #===========================================================================#\n542 #                                                                           #\n543 # XXX: The names listed in _DEPRECATED_IMPORTS below were importable before #\n544 # sympy 1.6 using                                                           #\n545 #                                                                           #\n546 #          from sympy import *                                              #\n547 #                                                                           #\n548 # This happened implicitly because there was no __all__ defined in this     #\n549 # __init__.py file. The plan is to remove them but for now they remain      #\n550 # importable but will give a deprecation warning when used. In future these #\n551 # names will be removed and will not be importable from here.               #\n552 #                                                                           #\n553 #===========================================================================#\n554 \n555 \n556 class DeprecatedImportModule:\n557     # Add a docstring that someone can see if calling help on these objects\n558     \"\"\"Deprecated imported module object.\n559 \n560     See https://github.com/sympy/sympy/pull/19316\n561 \n562     This is a wrapper around a module that has been imported incorrectly.\n563     Previously this module was importable using\n564 \n565         from sympy import *\n566 \n567     or (for example)\n568 \n569         from sympy import add\n570 \n571     However it was unintentional that this module would be imported in that\n572     way and it will be removed in a future sympy version. If you do need to\n573     use this module then the correct way to import it is to give its full\n574     module path e.g.\n575 \n576         import sympy.core.add as add\n577     \"\"\"\n578 \n579     from sympy.utilities.exceptions import SymPyDeprecationWarning as Warn\n580     import sys\n581     sympy = sys.modules[__name__]\n582 \n583     _DEPRECATED_IMPORTS = [\n584         'sympy.concrete.expr_with_intlimits',\n585         'sympy.concrete.expr_with_limits',\n586         'sympy.concrete.gosper',\n587         'sympy.concrete.products',\n588         'sympy.concrete.summations',\n589         'sympy.core.add',\n590         'sympy.core.basic',\n591         'sympy.core.cache',\n592         'sympy.core.compatibility',\n593         'sympy.core.containers',\n594         'sympy.core.coreerrors',\n595         'sympy.core.decorators',\n596         'sympy.core.expr',\n597         'sympy.core.exprtools',\n598         'sympy.core.facts',\n599         'sympy.core.function',\n600         'sympy.core.logic',\n601         'sympy.core.mod',\n602         'sympy.core.mul',\n603         'sympy.core.multidimensional',\n604         'sympy.core.numbers',\n605         'sympy.core.operations',\n606         'sympy.core.power',\n607         'sympy.core.relational',\n608         'sympy.core.rules',\n609         'sympy.core.singleton',\n610         'sympy.core.symbol',\n611         'sympy.discrete.convolutions',\n612         'sympy.geometry.curve',\n613         'sympy.geometry.ellipse',\n614         'sympy.geometry.entity',\n615         'sympy.geometry.exceptions',\n616         'sympy.geometry.line',\n617         'sympy.geometry.parabola',\n618         'sympy.geometry.plane',\n619         'sympy.geometry.point',\n620         'sympy.geometry.polygon',\n621         'sympy.geometry.util',\n622         'sympy.integrals.integrals',\n623         'sympy.integrals.manualintegrate',\n624         'sympy.integrals.meijerint',\n625         'sympy.integrals.singularityfunctions',\n626         'sympy.integrals.transforms',\n627         'sympy.integrals.trigonometry',\n628         'sympy.logic.boolalg',\n629         'sympy.logic.inference',\n630         'sympy.matrices.common',\n631         'sympy.matrices.dense',\n632         'sympy.matrices.expressions',\n633         'sympy.matrices.immutable',\n634         'sympy.matrices.matrices',\n635         'sympy.matrices.sparse',\n636         'sympy.matrices.sparsetools',\n637         'sympy.ntheory.factor_',\n638         'sympy.ntheory.generate',\n639         'sympy.ntheory.multinomial',\n640         'sympy.ntheory.partitions_',\n641         'sympy.ntheory.primetest',\n642         'sympy.ntheory.residue_ntheory',\n643         'sympy.sets.conditionset',\n644         'sympy.sets.contains',\n645         'sympy.sets.fancysets',\n646         'sympy.sets.ordinals',\n647         'sympy.sets.powerset',\n648         'sympy.sets.sets',\n649         'sympy.simplify.cse_main',\n650         'sympy.simplify.cse_opts',\n651         'sympy.simplify.epathtools',\n652         'sympy.simplify.traversaltools',\n653         'sympy.solvers.bivariate',\n654         'sympy.solvers.deutils',\n655         'sympy.solvers.inequalities',\n656         'sympy.solvers.ode',\n657         'sympy.solvers.pde',\n658         'sympy.solvers.polysys',\n659         'sympy.solvers.recurr',\n660         'sympy.solvers.solvers',\n661         'sympy.tensor.array',\n662         'sympy.tensor.index_methods',\n663         'sympy.tensor.indexed'\n664     ]\n665 \n666     def __init__(self, modname):\n667         from importlib import import_module\n668         self.modname = modname\n669         self.mod = import_module(modname)\n670 \n671     def __getattr__(self, name):\n672         self.Warn(\n673             feature=\"importing %s with 'from sympy import *'\" % self.modname,\n674             useinstead=\"import %s\" % self.modname,\n675             issue=18245,\n676             deprecated_since_version=\"1.6\").warn()\n677         return getattr(self.mod, name)\n678 \n679     @classmethod\n680     def inject_imports(cls):\n681         for modname in cls._DEPRECATED_IMPORTS:\n682             name = modname.split('.')[-1]\n683             deprecated_mod = cls(modname)\n684             setattr(cls.sympy, name, deprecated_mod)\n685             __all__.append(name)\n686 \n687 \n688 DeprecatedImportModule.inject_imports()\n689 del DeprecatedImportModule\n",
        "intended_behavior": "The `__version__` attribute here should be updated to reflect the new versioning post patches being merged. This is crucial for runtime access to SymPy's version within the Python ecosystem."
    }
]