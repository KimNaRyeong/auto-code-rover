2025-10-18 20:38:56.108 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-18 20:39:06.468 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=190, output_tokens=12, cost=0.002260
2025-10-18 20:39:06.475 | INFO     | Test agent decides that the issue statement does not contain reproduction steps; skipping reproducer tracing
2025-10-18 20:39:06.479 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 20:39:14.571 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=499, output_tokens=323, cost=0.014680
2025-10-18 20:39:14.578 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 20:39:17.149 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=677, output_tokens=53, cost=0.008360
2025-10-18 20:39:17.150 | DEBUG    | Extracted a valid json.
2025-10-18 20:39:17.150 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_code(\"version=\")",
        "search_code(\"__version__\")",
        "search_code(\"CHANGELOG\")",
        "search_code(\"HISTORY\")"
    ],
    "bug_locations": []
}
2025-10-18 20:39:17.951 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-18 20:39:17.951 | DEBUG    | <Agent search> Analyzing search results.
2025-10-18 20:39:32.916 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2533, output_tokens=683, cost=0.045820
2025-10-18 20:39:32.923 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 20:39:40.664 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3432, output_tokens=299, cost=0.043290
2025-10-18 20:39:40.670 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 20:39:45.340 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=653, output_tokens=156, cost=0.011210
2025-10-18 20:39:45.341 | DEBUG    | Extracted a valid json.
2025-10-18 20:39:45.341 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations": [
        {
            "file": "setup.py",
            "class": "",
            "method": "",
            "intended_behavior": "This file should ensure the project version is correctly set up for packaging. The intended modification or checkout would be to ensure the version reflects the upcoming or new release version following the merge of significant patches."
        },
        {
            "file": "sympy/__init__.py",
            "class": "",
            "method": "",
            "intended_behavior": "The `__version__` attribute here should be updated to reflect the new versioning post patches being merged. This is crucial for runtime access to SymPy's version within the Python ecosystem."
        }
    ]
}
2025-10-18 20:39:45.344 | DEBUG    | Bug location extracted successfully: [<file>setup.py</file>
<class>None</class>
<method>None</method>
<code>
1 #!/usr/bin/env python
2 """Distutils based setup script for SymPy.
3 
4 This uses Distutils (https://python.org/sigs/distutils-sig/) the standard
5 python mechanism for installing packages. Optionally, you can use
6 Setuptools (https://setuptools.readthedocs.io/en/latest/)
7 to automatically handle dependencies. For the easiest installation
8 just type the command (you'll probably need root privileges for that):
9 
10     python setup.py install
11 
12 This will install the library in the default location. For instructions on
13 how to customize the install procedure read the output of:
14 
15     python setup.py --help install
16 
17 In addition, there are some other commands:
18 
19     python setup.py clean -> will clean all trash (*.pyc and stuff)
20     python setup.py test  -> will run the complete test suite
21     python setup.py bench -> will run the complete benchmark suite
22     python setup.py audit -> will run pyflakes checker on source code
23 
24 To get a full list of available commands, read the output of:
25 
26     python setup.py --help-commands
27 
28 Or, if all else fails, feel free to write to the sympy list at
29 sympy@googlegroups.com and ask for help.
30 """
31 
32 import sys
33 import os
34 import shutil
35 import glob
36 import subprocess
37 
38 from distutils.command.sdist import sdist
39 
40 
41 min_mpmath_version = '0.19'
42 
43 # This directory
44 dir_setup = os.path.dirname(os.path.realpath(__file__))
45 
46 extra_kwargs = {}
47 
48 try:
49     from setuptools import setup, Command
50     extra_kwargs['zip_safe'] = False
51     extra_kwargs['entry_points'] = {
52         'console_scripts': [
53             'isympy = isympy:main',
54         ]
55     }
56 except ImportError:
57     from distutils.core import setup, Command
58 
59     extra_kwargs['scripts'] = ['bin/isympy']
60 
61     # handle mpmath deps in the hard way:
62     from distutils.version import LooseVersion
63     try:
64         import mpmath
65         if mpmath.__version__ < LooseVersion(min_mpmath_version):
66             raise ImportError
67     except ImportError:
68         print("Please install the mpmath package with a version >= %s"
69               % min_mpmath_version)
70         sys.exit(-1)
71 
72 if sys.version_info < (3, 5):
73     print("SymPy requires Python 3.5 or newer. Python %d.%d detected"
74           % sys.version_info[:2])
75     sys.exit(-1)
76 
77 # Check that this list is uptodate against the result of the command:
78 # python bin/generate_module_list.py
79 modules = [
80     'sympy.algebras',
81     'sympy.assumptions',
82     'sympy.assumptions.handlers',
83     'sympy.benchmarks',
84     'sympy.calculus',
85     'sympy.categories',
86     'sympy.codegen',
87     'sympy.combinatorics',
88     'sympy.concrete',
89     'sympy.core',
90     'sympy.core.benchmarks',
91     'sympy.crypto',
92     'sympy.deprecated',
93     'sympy.diffgeom',
94     'sympy.discrete',
95     'sympy.external',
96     'sympy.functions',
97     'sympy.functions.combinatorial',
98     'sympy.functions.elementary',
99     'sympy.functions.elementary.benchmarks',
100     'sympy.functions.special',
101     'sympy.functions.special.benchmarks',
102     'sympy.geometry',
103     'sympy.holonomic',
104     'sympy.integrals',
105     'sympy.integrals.benchmarks',
106     'sympy.integrals.rubi',
107     'sympy.integrals.rubi.parsetools',
108     'sympy.integrals.rubi.rubi_tests',
109     'sympy.integrals.rubi.rules',
110     'sympy.interactive',
111     'sympy.liealgebras',
112     'sympy.logic',
113     'sympy.logic.algorithms',
114     'sympy.logic.utilities',
115     'sympy.matrices',
116     'sympy.matrices.benchmarks',
117     'sympy.matrices.expressions',
118     'sympy.multipledispatch',
119     'sympy.ntheory',
120     'sympy.parsing',
121     'sympy.parsing.autolev',
122     'sympy.parsing.autolev._antlr',
123     'sympy.parsing.c',
124     'sympy.parsing.fortran',
125     'sympy.parsing.latex',
126     'sympy.parsing.latex._antlr',
127     'sympy.physics',
128     'sympy.physics.continuum_mechanics',
129     'sympy.physics.hep',
130     'sympy.physics.mechanics',
131     'sympy.physics.optics',
132     'sympy.physics.quantum',
133     'sympy.physics.units',
134     'sympy.physics.units.definitions',
135     'sympy.physics.units.systems',
136     'sympy.physics.vector',
137     'sympy.plotting',
138     'sympy.plotting.intervalmath',
139     'sympy.plotting.pygletplot',
140     'sympy.polys',
141     'sympy.polys.agca',
142     'sympy.polys.benchmarks',
143     'sympy.polys.domains',
144     'sympy.printing',
145     'sympy.printing.pretty',
146     'sympy.sandbox',
147     'sympy.series',
148     'sympy.series.benchmarks',
149     'sympy.sets',
150     'sympy.sets.handlers',
151     'sympy.simplify',
152     'sympy.solvers',
153     'sympy.solvers.benchmarks',
154     'sympy.solvers.diophantine',
155     'sympy.solvers.ode',
156     'sympy.stats',
157     'sympy.strategies',
158     'sympy.strategies.branch',
159     'sympy.tensor',
160     'sympy.tensor.array',
161     'sympy.testing',
162     'sympy.unify',
163     'sympy.utilities',
164     'sympy.utilities._compilation',
165     'sympy.utilities.mathml',
166     'sympy.vector',
167 ]
168 
169 class audit(Command):
170     """Audits SymPy's source code for following issues:
171         - Names which are used but not defined or used before they are defined.
172         - Names which are redefined without having been used.
173     """
174 
175     description = "Audit SymPy source with PyFlakes"
176     user_options = []
177 
178     def initialize_options(self):
179         self.all = None
180 
181     def finalize_options(self):
182         pass
183 
184     def run(self):
185         import os
186         try:
187             import pyflakes.scripts.pyflakes as flakes
188         except ImportError:
189             print("In order to run the audit, you need to have PyFlakes installed.")
190             sys.exit(-1)
191         dirs = (os.path.join(*d) for d in (m.split('.') for m in modules))
192         warns = 0
193         for dir in dirs:
194             for filename in os.listdir(dir):
195                 if filename.endswith('.py') and filename != '__init__.py':
196                     warns += flakes.checkPath(os.path.join(dir, filename))
197         if warns > 0:
198             print("Audit finished with total %d warnings" % warns)
199 
200 
201 class clean(Command):
202     """Cleans *.pyc and debian trashs, so you should get the same copy as
203     is in the VCS.
204     """
205 
206     description = "remove build files"
207     user_options = [("all", "a", "the same")]
208 
209     def initialize_options(self):
210         self.all = None
211 
212     def finalize_options(self):
213         pass
214 
215     def run(self):
216         curr_dir = os.getcwd()
217         for root, dirs, files in os.walk(dir_setup):
218             for file in files:
219                 if file.endswith('.pyc') and os.path.isfile:
220                     os.remove(os.path.join(root, file))
221 
222         os.chdir(dir_setup)
223         names = ["python-build-stamp-2.4", "MANIFEST", "build",
224                  "dist", "doc/_build", "sample.tex"]
225 
226         for f in names:
227             if os.path.isfile(f):
228                 os.remove(f)
229             elif os.path.isdir(f):
230                 shutil.rmtree(f)
231 
232         for name in glob.glob(os.path.join(dir_setup, "doc", "src", "modules",
233                                            "physics", "vector", "*.pdf")):
234             if os.path.isfile(name):
235                 os.remove(name)
236 
237         os.chdir(curr_dir)
238 
239 
240 class test_sympy(Command):
241     """Runs all tests under the sympy/ folder
242     """
243 
244     description = "run all tests and doctests; also see bin/test and bin/doctest"
245     user_options = []  # distutils complains if this is not here.
246 
247     def __init__(self, *args):
248         self.args = args[0]  # so we can pass it to other classes
249         Command.__init__(self, *args)
250 
251     def initialize_options(self):  # distutils wants this
252         pass
253 
254     def finalize_options(self):    # this too
255         pass
256 
257     def run(self):
258         from sympy.utilities import runtests
259         runtests.run_all_tests()
260 
261 
262 class run_benchmarks(Command):
263     """Runs all SymPy benchmarks"""
264 
265     description = "run all benchmarks"
266     user_options = []  # distutils complains if this is not here.
267 
268     def __init__(self, *args):
269         self.args = args[0]  # so we can pass it to other classes
270         Command.__init__(self, *args)
271 
272     def initialize_options(self):  # distutils wants this
273         pass
274 
275     def finalize_options(self):    # this too
276         pass
277 
278     # we use py.test like architecture:
279     #
280     # o collector   -- collects benchmarks
281     # o runner      -- executes benchmarks
282     # o presenter   -- displays benchmarks results
283     #
284     # this is done in sympy.utilities.benchmarking on top of py.test
285     def run(self):
286         from sympy.utilities import benchmarking
287         benchmarking.main(['sympy'])
288 
289 
290 class antlr(Command):
291     """Generate code with antlr4"""
292     description = "generate parser code from antlr grammars"
293     user_options = []  # distutils complains if this is not here.
294 
295     def __init__(self, *args):
296         self.args = args[0]  # so we can pass it to other classes
297         Command.__init__(self, *args)
298 
299     def initialize_options(self):  # distutils wants this
300         pass
301 
302     def finalize_options(self):    # this too
303         pass
304 
305     def run(self):
306         from sympy.parsing.latex._build_latex_antlr import build_parser
307         if not build_parser():
308             sys.exit(-1)
309 
310 
311 class sdist_sympy(sdist):
312     def run(self):
313         # Fetch git commit hash and write down to commit_hash.txt before
314         # shipped in tarball.
315         commit_hash = None
316         commit_hash_filepath = 'doc/commit_hash.txt'
317         try:
318             commit_hash = \
319                 subprocess.check_output(['git', 'rev-parse', 'HEAD'])
320             commit_hash = commit_hash.decode('ascii')
321             commit_hash = commit_hash.rstrip()
322             print('Commit hash found : {}.'.format(commit_hash))
323             print('Writing it to {}.'.format(commit_hash_filepath))
324         except:
325             pass
326 
327         if commit_hash:
328             with open(commit_hash_filepath, 'w') as f:
329                 f.write(commit_hash)
330 
331         super(sdist_sympy, self).run()
332 
333         try:
334             os.remove(commit_hash_filepath)
335             print(
336                 'Successfully removed temporary file {}.'
337                 .format(commit_hash_filepath))
338         except OSError as e:
339             print("Error deleting %s - %s." % (e.filename, e.strerror))
340 
341 
342 # Check that this list is uptodate against the result of the command:
343 # python bin/generate_test_list.py
344 tests = [
345     'sympy.algebras.tests',
346     'sympy.assumptions.tests',
347     'sympy.calculus.tests',
348     'sympy.categories.tests',
349     'sympy.codegen.tests',
350     'sympy.combinatorics.tests',
351     'sympy.concrete.tests',
352     'sympy.core.tests',
353     'sympy.crypto.tests',
354     'sympy.deprecated.tests',
355     'sympy.diffgeom.tests',
356     'sympy.discrete.tests',
357     'sympy.external.tests',
358     'sympy.functions.combinatorial.tests',
359     'sympy.functions.elementary.tests',
360     'sympy.functions.special.tests',
361     'sympy.geometry.tests',
362     'sympy.holonomic.tests',
363     'sympy.integrals.rubi.parsetools.tests',
364     'sympy.integrals.rubi.rubi_tests.tests',
365     'sympy.integrals.rubi.tests',
366     'sympy.integrals.tests',
367     'sympy.interactive.tests',
368     'sympy.liealgebras.tests',
369     'sympy.logic.tests',
370     'sympy.matrices.expressions.tests',
371     'sympy.matrices.tests',
372     'sympy.multipledispatch.tests',
373     'sympy.ntheory.tests',
374     'sympy.parsing.tests',
375     'sympy.physics.continuum_mechanics.tests',
376     'sympy.physics.hep.tests',
377     'sympy.physics.mechanics.tests',
378     'sympy.physics.optics.tests',
379     'sympy.physics.quantum.tests',
380     'sympy.physics.tests',
381     'sympy.physics.units.tests',
382     'sympy.physics.vector.tests',
383     'sympy.plotting.intervalmath.tests',
384     'sympy.plotting.pygletplot.tests',
385     'sympy.plotting.tests',
386     'sympy.polys.agca.tests',
387     'sympy.polys.domains.tests',
388     'sympy.polys.tests',
389     'sympy.printing.pretty.tests',
390     'sympy.printing.tests',
391     'sympy.sandbox.tests',
392     'sympy.series.tests',
393     'sympy.sets.tests',
394     'sympy.simplify.tests',
395     'sympy.solvers.diophantine.tests',
396     'sympy.solvers.ode.tests',
397     'sympy.solvers.tests',
398     'sympy.stats.tests',
399     'sympy.strategies.branch.tests',
400     'sympy.strategies.tests',
401     'sympy.tensor.array.tests',
402     'sympy.tensor.tests',
403     'sympy.testing.tests',
404     'sympy.unify.tests',
405     'sympy.utilities._compilation.tests',
406     'sympy.utilities.tests',
407     'sympy.vector.tests',
408 ]
409 
410 
411 with open(os.path.join(dir_setup, 'sympy', 'release.py')) as f:
412     # Defines __version__
413     exec(f.read())
414 
415 
416 if __name__ == '__main__':
417     setup(name='sympy',
418           version=__version__,
419           description='Computer algebra system (CAS) in Python',
420           author='SymPy development team',
421           author_email='sympy@googlegroups.com',
422           license='BSD',
423           keywords="Math CAS",
424           url='https://sympy.org',
425           py_modules=['isympy'],
426           packages=['sympy'] + modules + tests,
427           ext_modules=[],
428           package_data={
429               'sympy.utilities.mathml': ['data/*.xsl'],
430               'sympy.logic.benchmarks': ['input/*.cnf'],
431               'sympy.parsing.autolev': [
432                   '*.g4', 'test-examples/*.al', 'test-examples/*.py',
433                   'test-examples/pydy-example-repo/*.al',
434                   'test-examples/pydy-example-repo/*.py',
435                   'test-examples/README.txt',
436                   ],
437               'sympy.parsing.latex': ['*.txt', '*.g4'],
438               'sympy.integrals.rubi.parsetools': ['header.py.txt'],
439               'sympy.plotting.tests': ['test_region_*.png'],
440               },
441           data_files=[('share/man/man1', ['doc/man/isympy.1'])],
442           cmdclass={'test': test_sympy,
443                     'bench': run_benchmarks,
444                     'clean': clean,
445                     'audit': audit,
446                     'antlr': antlr,
447                     'sdist': sdist_sympy,
448                     },
449           python_requires='>=3.5',
450           classifiers=[
451             'License :: OSI Approved :: BSD License',
452             'Operating System :: OS Independent',
453             'Programming Language :: Python',
454             'Topic :: Scientific/Engineering',
455             'Topic :: Scientific/Engineering :: Mathematics',
456             'Topic :: Scientific/Engineering :: Physics',
457             'Programming Language :: Python :: 3',
458             'Programming Language :: Python :: 3.5',
459             'Programming Language :: Python :: 3.6',
460             'Programming Language :: Python :: 3.7',
461             'Programming Language :: Python :: 3.8',
462             'Programming Language :: Python :: 3 :: Only',
463             'Programming Language :: Python :: Implementation :: CPython',
464             'Programming Language :: Python :: Implementation :: PyPy',
465             ],
466           install_requires=[
467             'mpmath>=%s' % min_mpmath_version,
468             ],
469           **extra_kwargs
470           )

</code><intended_behavior>This file should ensure the project version is correctly set up for packaging. The intended modification or checkout would be to ensure the version reflects the upcoming or new release version following the merge of significant patches.</intended_behavior>, <file>sympy/__init__.py</file>
<class>None</class>
<method>None</method>
<code>
1 """
2 SymPy is a Python library for symbolic mathematics. It aims to become a
3 full-featured computer algebra system (CAS) while keeping the code as simple
4 as possible in order to be comprehensible and easily extensible.  SymPy is
5 written entirely in Python. It depends on mpmath, and other external libraries
6 may be optionally for things like plotting support.
7 
8 See the webpage for more information and documentation:
9 
10     https://sympy.org
11 
12 """
13 
14 
15 import sys
16 if sys.version_info < (3, 5):
17     raise ImportError("Python version 3.5 or above is required for SymPy.")
18 del sys
19 
20 
21 try:
22     import mpmath
23 except ImportError:
24     raise ImportError("SymPy now depends on mpmath as an external library. "
25     "See https://docs.sympy.org/latest/install.html#mpmath for more information.")
26 
27 del mpmath
28 
29 from sympy.release import __version__
30 
31 if 'dev' in __version__:
32     def enable_warnings():
33         import warnings
34         warnings.filterwarnings('default',   '.*',   DeprecationWarning, module='sympy.*')
35         del warnings
36     enable_warnings()
37     del enable_warnings
38 
39 
40 def __sympy_debug():
41     # helper function so we don't import os globally
42     import os
43     debug_str = os.getenv('SYMPY_DEBUG', 'False')
44     if debug_str in ('True', 'False'):
45         return eval(debug_str)
46     else:
47         raise RuntimeError("unrecognized value for SYMPY_DEBUG: %s" %
48                            debug_str)
49 SYMPY_DEBUG = __sympy_debug()  # type: bool
50 
51 from .core import (sympify, SympifyError, cacheit, Basic, Atom,
52         preorder_traversal, S, Expr, AtomicExpr, UnevaluatedExpr, Symbol,
53         Wild, Dummy, symbols, var, Number, Float, Rational, Integer,
54         NumberSymbol, RealNumber, igcd, ilcm, seterr, E, I, nan, oo, pi, zoo,
55         AlgebraicNumber, comp, mod_inverse, Pow, integer_nthroot, integer_log,
56         Mul, prod, Add, Mod, Rel, Eq, Ne, Lt, Le, Gt, Ge, Equality,
57         GreaterThan, LessThan, Unequality, StrictGreaterThan, StrictLessThan,
58         vectorize, Lambda, WildFunction, Derivative, diff, FunctionClass,
59         Function, Subs, expand, PoleError, count_ops, expand_mul, expand_log,
60         expand_func, expand_trig, expand_complex, expand_multinomial, nfloat,
61         expand_power_base, expand_power_exp, arity, PrecisionExhausted, N,
62         evalf, Tuple, Dict, gcd_terms, factor_terms, factor_nc, evaluate,
63         Catalan, EulerGamma, GoldenRatio, TribonacciConstant)
64 
65 from .logic import (to_cnf, to_dnf, to_nnf, And, Or, Not, Xor, Nand, Nor,
66         Implies, Equivalent, ITE, POSform, SOPform, simplify_logic, bool_map,
67         true, false, satisfiable)
68 
69 from .assumptions import (AppliedPredicate, Predicate, AssumptionsContext,
70         assuming, Q, ask, register_handler, remove_handler, refine)
71 
72 from .polys import (Poly, PurePoly, poly_from_expr, parallel_poly_from_expr,
73         degree, total_degree, degree_list, LC, LM, LT, pdiv, prem, pquo,
74         pexquo, div, rem, quo, exquo, half_gcdex, gcdex, invert,
75         subresultants, resultant, discriminant, cofactors, gcd_list, gcd,
76         lcm_list, lcm, terms_gcd, trunc, monic, content, primitive, compose,
77         decompose, sturm, gff_list, gff, sqf_norm, sqf_part, sqf_list, sqf,
78         factor_list, factor, intervals, refine_root, count_roots, real_roots,
79         nroots, ground_roots, nth_power_roots_poly, cancel, reduced, groebner,
80         is_zero_dimensional, GroebnerBasis, poly, symmetrize, horner,
81         interpolate, rational_interpolate, viete, together,
82         BasePolynomialError, ExactQuotientFailed, PolynomialDivisionFailed,
83         OperationNotSupported, HeuristicGCDFailed, HomomorphismFailed,
84         IsomorphismFailed, ExtraneousFactors, EvaluationFailed,
85         RefinementFailed, CoercionFailed, NotInvertible, NotReversible,
86         NotAlgebraic, DomainError, PolynomialError, UnificationFailed,
87         GeneratorsError, GeneratorsNeeded, ComputationFailed,
88         UnivariatePolynomialError, MultivariatePolynomialError,
89         PolificationFailed, OptionError, FlagError, minpoly,
90         minimal_polynomial, primitive_element, field_isomorphism,
91         to_number_field, isolate, itermonomials, Monomial, lex, grlex,
92         grevlex, ilex, igrlex, igrevlex, CRootOf, rootof, RootOf,
93         ComplexRootOf, RootSum, roots, Domain, FiniteField, IntegerRing,
94         RationalField, RealField, ComplexField, PythonFiniteField,
95         GMPYFiniteField, PythonIntegerRing, GMPYIntegerRing, PythonRational,
96         GMPYRationalField, AlgebraicField, PolynomialRing, FractionField,
97         ExpressionDomain, FF_python, FF_gmpy, ZZ_python, ZZ_gmpy, QQ_python,
98         QQ_gmpy, GF, FF, ZZ, QQ, RR, CC, EX, construct_domain,
99         swinnerton_dyer_poly, cyclotomic_poly, symmetric_poly, random_poly,
100         interpolating_poly, jacobi_poly, chebyshevt_poly, chebyshevu_poly,
101         hermite_poly, legendre_poly, laguerre_poly, apart, apart_list,
102         assemble_partfrac_list, Options, ring, xring, vring, sring, field,
103         xfield, vfield, sfield)
104 
105 from .series import (Order, O, limit, Limit, gruntz, series, approximants,
106         residue, EmptySequence, SeqPer, SeqFormula, sequence, SeqAdd, SeqMul,
107         fourier_series, fps, difference_delta, limit_seq)
108 
109 from .functions import (factorial, factorial2, rf, ff, binomial,
110         RisingFactorial, FallingFactorial, subfactorial, carmichael,
111         fibonacci, lucas, tribonacci, harmonic, bernoulli, bell, euler,
112         catalan, genocchi, partition, sqrt, root, Min, Max, Id, real_root,
113         cbrt, re, im, sign, Abs, conjugate, arg, polar_lift,
114         periodic_argument, unbranched_argument, principal_branch, transpose,
115         adjoint, polarify, unpolarify, sin, cos, tan, sec, csc, cot, sinc,
116         asin, acos, atan, asec, acsc, acot, atan2, exp_polar, exp, ln, log,
117         LambertW, sinh, cosh, tanh, coth, sech, csch, asinh, acosh, atanh,
118         acoth, asech, acsch, floor, ceiling, frac, Piecewise, piecewise_fold,
119         erf, erfc, erfi, erf2, erfinv, erfcinv, erf2inv, Ei, expint, E1, li,
120         Li, Si, Ci, Shi, Chi, fresnels, fresnelc, gamma, lowergamma,
121         uppergamma, polygamma, loggamma, digamma, trigamma, multigamma,
122         dirichlet_eta, zeta, lerchphi, polylog, stieltjes, Eijk, LeviCivita,
123         KroneckerDelta, SingularityFunction, DiracDelta, Heaviside,
124         bspline_basis, bspline_basis_set, interpolating_spline, besselj,
125         bessely, besseli, besselk, hankel1, hankel2, jn, yn, jn_zeros, hn1,
126         hn2, airyai, airybi, airyaiprime, airybiprime, marcumq, hyper,
127         meijerg, appellf1, legendre, assoc_legendre, hermite, chebyshevt,
128         chebyshevu, chebyshevu_root, chebyshevt_root, laguerre,
129         assoc_laguerre, gegenbauer, jacobi, jacobi_normalized, Ynm, Ynm_c,
130         Znm, elliptic_k, elliptic_f, elliptic_e, elliptic_pi, beta, mathieus,
131         mathieuc, mathieusprime, mathieucprime)
132 
133 from .ntheory import (nextprime, prevprime, prime, primepi, primerange,
134         randprime, Sieve, sieve, primorial, cycle_length, composite,
135         compositepi, isprime, divisors, proper_divisors, factorint,
136         multiplicity, perfect_power, pollard_pm1, pollard_rho, primefactors,
137         totient, trailing, divisor_count, proper_divisor_count, divisor_sigma,
138         factorrat, reduced_totient, primenu, primeomega,
139         mersenne_prime_exponent, is_perfect, is_mersenne_prime, is_abundant,
140         is_deficient, is_amicable, abundance, npartitions, is_primitive_root,
141         is_quad_residue, legendre_symbol, jacobi_symbol, n_order, sqrt_mod,
142         quadratic_residues, primitive_root, nthroot_mod, is_nthpow_residue,
143         sqrt_mod_iter, mobius, discrete_log, quadratic_congruence,
144         binomial_coefficients, binomial_coefficients_list,
145         multinomial_coefficients, continued_fraction_periodic,
146         continued_fraction_iterator, continued_fraction_reduce,
147         continued_fraction_convergents, continued_fraction, egyptian_fraction)
148 
149 from .concrete import product, Product, summation, Sum
150 
151 from .discrete import (fft, ifft, ntt, intt, fwht, ifwht, mobius_transform,
152         inverse_mobius_transform, convolution, covering_product,
153         intersecting_product)
154 
155 from .simplify import (simplify, hypersimp, hypersimilar, logcombine,
156         separatevars, posify, besselsimp, kroneckersimp, signsimp, bottom_up,
157         nsimplify, FU, fu, sqrtdenest, cse, use, epath, EPath, hyperexpand,
158         collect, rcollect, radsimp, collect_const, fraction, numer, denom,
159         trigsimp, exptrigsimp, powsimp, powdenest, combsimp, gammasimp,
160         ratsimp, ratsimpmodprime)
161 
162 from .sets import (Set, Interval, Union, EmptySet, FiniteSet, ProductSet,
163         Intersection, DisjointUnion, imageset, Complement, SymmetricDifference, ImageSet,
164         Range, ComplexRegion, Reals, Contains, ConditionSet, Ordinal,
165         OmegaPower, ord0, PowerSet, Naturals, Naturals0, UniversalSet,
166         Integers, Rationals)
167 
168 from .solvers import (solve, solve_linear_system, solve_linear_system_LU,
169         solve_undetermined_coeffs, nsolve, solve_linear, checksol, det_quick,
170         inv_quick, check_assumptions, failing_assumptions, diophantine,
171         rsolve, rsolve_poly, rsolve_ratio, rsolve_hyper, checkodesol,
172         classify_ode, dsolve, homogeneous_order, solve_poly_system,
173         solve_triangulated, pde_separate, pde_separate_add, pde_separate_mul,
174         pdsolve, classify_pde, checkpdesol, ode_order, reduce_inequalities,
175         reduce_abs_inequality, reduce_abs_inequalities, solve_poly_inequality,
176         solve_rational_inequalities, solve_univariate_inequality, decompogen,
177         solveset, linsolve, linear_eq_to_matrix, nonlinsolve, substitution,
178         Complexes)
179 
180 from .matrices import (ShapeError, NonSquareMatrixError, GramSchmidt,
181         casoratian, diag, eye, hessian, jordan_cell, list2numpy, matrix2numpy,
182         matrix_multiply_elementwise, ones, randMatrix, rot_axis1, rot_axis2,
183         rot_axis3, symarray, wronskian, zeros, MutableDenseMatrix,
184         DeferredVector, MatrixBase, Matrix, MutableMatrix,
185         MutableSparseMatrix, banded, ImmutableDenseMatrix,
186         ImmutableSparseMatrix, ImmutableMatrix, SparseMatrix, MatrixSlice,
187         BlockDiagMatrix, BlockMatrix, FunctionMatrix, Identity, Inverse,
188         MatAdd, MatMul, MatPow, MatrixExpr, MatrixSymbol, Trace, Transpose,
189         ZeroMatrix, OneMatrix, blockcut, block_collapse, matrix_symbols,
190         Adjoint, hadamard_product, HadamardProduct, HadamardPower,
191         Determinant, det, diagonalize_vector, DiagMatrix, DiagonalMatrix,
192         DiagonalOf, trace, DotProduct, kronecker_product, KroneckerProduct,
193         PermutationMatrix, MatrixPermute)
194 
195 from .geometry import (Point, Point2D, Point3D, Line, Ray, Segment, Line2D,
196         Segment2D, Ray2D, Line3D, Segment3D, Ray3D, Plane, Ellipse, Circle,
197         Polygon, RegularPolygon, Triangle, rad, deg, are_similar, centroid,
198         convex_hull, idiff, intersection, closest_points, farthest_points,
199         GeometryError, Curve, Parabola)
200 
201 from .utilities import (flatten, group, take, subsets, variations,
202         numbered_symbols, cartes, capture, dict_merge, postorder_traversal,
203         interactive_traversal, prefixes, postfixes, sift, topological_sort,
204         unflatten, has_dups, has_variety, reshape, default_sort_key, ordered,
205         rotations, filldedent, lambdify, source, threaded, xthreaded, public,
206         memoize_property, timed)
207 
208 from .integrals import (integrate, Integral, line_integrate, mellin_transform,
209         inverse_mellin_transform, MellinTransform, InverseMellinTransform,
210         laplace_transform, inverse_laplace_transform, LaplaceTransform,
211         InverseLaplaceTransform, fourier_transform, inverse_fourier_transform,
212         FourierTransform, InverseFourierTransform, sine_transform,
213         inverse_sine_transform, SineTransform, InverseSineTransform,
214         cosine_transform, inverse_cosine_transform, CosineTransform,
215         InverseCosineTransform, hankel_transform, inverse_hankel_transform,
216         HankelTransform, InverseHankelTransform, singularityintegrate)
217 
218 from .tensor import (IndexedBase, Idx, Indexed, get_contraction_structure,
219         get_indices, MutableDenseNDimArray, ImmutableDenseNDimArray,
220         MutableSparseNDimArray, ImmutableSparseNDimArray, NDimArray,
221         tensorproduct, tensorcontraction, derive_by_array, permutedims, Array,
222         DenseNDimArray, SparseNDimArray)
223 
224 from .parsing import parse_expr
225 
226 from .calculus import (euler_equations, singularities, is_increasing,
227         is_strictly_increasing, is_decreasing, is_strictly_decreasing,
228         is_monotonic, finite_diff_weights, apply_finite_diff, as_finite_diff,
229         differentiate_finite, periodicity, not_empty_in, AccumBounds,
230         is_convex, stationary_points, minimum, maximum)
231 
232 from .algebras import Quaternion
233 
234 from .printing import (pager_print, pretty, pretty_print, pprint,
235         pprint_use_unicode, pprint_try_use_unicode, latex, print_latex,
236         multiline_latex, mathml, print_mathml, python, print_python, pycode,
237         ccode, print_ccode, glsl_code, print_glsl, cxxcode, fcode,
238         print_fcode, rcode, print_rcode, jscode, print_jscode, julia_code,
239         mathematica_code, octave_code, rust_code, print_gtk, preview, srepr,
240         print_tree, StrPrinter, sstr, sstrrepr, TableForm, dotprint,
241         maple_code, print_maple_code)
242 
243 from .testing import test, doctest
244 
245 # This module causes conflicts with other modules:
246 # from .stats import *
247 # Adds about .04-.05 seconds of import time
248 # from combinatorics import *
249 # This module is slow to import:
250 #from physics import units
251 from .plotting import plot, textplot, plot_backends, plot_implicit, plot_parametric
252 from .interactive import init_session, init_printing
253 
254 evalf._create_evalf_table()
255 
256 # This is slow to import:
257 #import abc
258 
259 from .deprecated import C, ClassRegistry, class_registry
260 
261 __all__ = [
262     # sympy.core
263     'sympify', 'SympifyError', 'cacheit', 'Basic', 'Atom',
264     'preorder_traversal', 'S', 'Expr', 'AtomicExpr', 'UnevaluatedExpr',
265     'Symbol', 'Wild', 'Dummy', 'symbols', 'var', 'Number', 'Float',
266     'Rational', 'Integer', 'NumberSymbol', 'RealNumber', 'igcd', 'ilcm',
267     'seterr', 'E', 'I', 'nan', 'oo', 'pi', 'zoo', 'AlgebraicNumber', 'comp',
268     'mod_inverse', 'Pow', 'integer_nthroot', 'integer_log', 'Mul', 'prod',
269     'Add', 'Mod', 'Rel', 'Eq', 'Ne', 'Lt', 'Le', 'Gt', 'Ge', 'Equality',
270     'GreaterThan', 'LessThan', 'Unequality', 'StrictGreaterThan',
271     'StrictLessThan', 'vectorize', 'Lambda', 'WildFunction', 'Derivative',
272     'diff', 'FunctionClass', 'Function', 'Subs', 'expand', 'PoleError',
273     'count_ops', 'expand_mul', 'expand_log', 'expand_func', 'expand_trig',
274     'expand_complex', 'expand_multinomial', 'nfloat', 'expand_power_base',
275     'expand_power_exp', 'arity', 'PrecisionExhausted', 'N', 'evalf', 'Tuple',
276     'Dict', 'gcd_terms', 'factor_terms', 'factor_nc', 'evaluate', 'Catalan',
277     'EulerGamma', 'GoldenRatio', 'TribonacciConstant',
278 
279     # sympy.logic
280     'to_cnf', 'to_dnf', 'to_nnf', 'And', 'Or', 'Not', 'Xor', 'Nand', 'Nor',
281     'Implies', 'Equivalent', 'ITE', 'POSform', 'SOPform', 'simplify_logic',
282     'bool_map', 'true', 'false', 'satisfiable',
283 
284     # sympy.assumptions
285     'AppliedPredicate', 'Predicate', 'AssumptionsContext', 'assuming', 'Q',
286     'ask', 'register_handler', 'remove_handler', 'refine',
287 
288     # sympy.polys
289     'Poly', 'PurePoly', 'poly_from_expr', 'parallel_poly_from_expr', 'degree',
290     'total_degree', 'degree_list', 'LC', 'LM', 'LT', 'pdiv', 'prem', 'pquo',
291     'pexquo', 'div', 'rem', 'quo', 'exquo', 'half_gcdex', 'gcdex', 'invert',
292     'subresultants', 'resultant', 'discriminant', 'cofactors', 'gcd_list',
293     'gcd', 'lcm_list', 'lcm', 'terms_gcd', 'trunc', 'monic', 'content',
294     'primitive', 'compose', 'decompose', 'sturm', 'gff_list', 'gff',
295     'sqf_norm', 'sqf_part', 'sqf_list', 'sqf', 'factor_list', 'factor',
296     'intervals', 'refine_root', 'count_roots', 'real_roots', 'nroots',
297     'ground_roots', 'nth_power_roots_poly', 'cancel', 'reduced', 'groebner',
298     'is_zero_dimensional', 'GroebnerBasis', 'poly', 'symmetrize', 'horner',
299     'interpolate', 'rational_interpolate', 'viete', 'together',
300     'BasePolynomialError', 'ExactQuotientFailed', 'PolynomialDivisionFailed',
301     'OperationNotSupported', 'HeuristicGCDFailed', 'HomomorphismFailed',
302     'IsomorphismFailed', 'ExtraneousFactors', 'EvaluationFailed',
303     'RefinementFailed', 'CoercionFailed', 'NotInvertible', 'NotReversible',
304     'NotAlgebraic', 'DomainError', 'PolynomialError', 'UnificationFailed',
305     'GeneratorsError', 'GeneratorsNeeded', 'ComputationFailed',
306     'UnivariatePolynomialError', 'MultivariatePolynomialError',
307     'PolificationFailed', 'OptionError', 'FlagError', 'minpoly',
308     'minimal_polynomial', 'primitive_element', 'field_isomorphism',
309     'to_number_field', 'isolate', 'itermonomials', 'Monomial', 'lex', 'grlex',
310     'grevlex', 'ilex', 'igrlex', 'igrevlex', 'CRootOf', 'rootof', 'RootOf',
311     'ComplexRootOf', 'RootSum', 'roots', 'Domain', 'FiniteField',
312     'IntegerRing', 'RationalField', 'RealField', 'ComplexField',
313     'PythonFiniteField', 'GMPYFiniteField', 'PythonIntegerRing',
314     'GMPYIntegerRing', 'PythonRational', 'GMPYRationalField',
315     'AlgebraicField', 'PolynomialRing', 'FractionField', 'ExpressionDomain',
316     'FF_python', 'FF_gmpy', 'ZZ_python', 'ZZ_gmpy', 'QQ_python', 'QQ_gmpy',
317     'GF', 'FF', 'ZZ', 'QQ', 'RR', 'CC', 'EX', 'construct_domain',
318     'swinnerton_dyer_poly', 'cyclotomic_poly', 'symmetric_poly',
319     'random_poly', 'interpolating_poly', 'jacobi_poly', 'chebyshevt_poly',
320     'chebyshevu_poly', 'hermite_poly', 'legendre_poly', 'laguerre_poly',
321     'apart', 'apart_list', 'assemble_partfrac_list', 'Options', 'ring',
322     'xring', 'vring', 'sring', 'field', 'xfield', 'vfield', 'sfield',
323 
324     # sympy.series
325     'Order', 'O', 'limit', 'Limit', 'gruntz', 'series', 'approximants',
326     'residue', 'EmptySequence', 'SeqPer', 'SeqFormula', 'sequence', 'SeqAdd',
327     'SeqMul', 'fourier_series', 'fps', 'difference_delta', 'limit_seq',
328 
329     # sympy.functions
330     'factorial', 'factorial2', 'rf', 'ff', 'binomial', 'RisingFactorial',
331     'FallingFactorial', 'subfactorial', 'carmichael', 'fibonacci', 'lucas',
332     'tribonacci', 'harmonic', 'bernoulli', 'bell', 'euler', 'catalan',
333     'genocchi', 'partition', 'sqrt', 'root', 'Min', 'Max', 'Id', 'real_root',
334     'cbrt', 're', 'im', 'sign', 'Abs', 'conjugate', 'arg', 'polar_lift',
335     'periodic_argument', 'unbranched_argument', 'principal_branch',
336     'transpose', 'adjoint', 'polarify', 'unpolarify', 'sin', 'cos', 'tan',
337     'sec', 'csc', 'cot', 'sinc', 'asin', 'acos', 'atan', 'asec', 'acsc',
338     'acot', 'atan2', 'exp_polar', 'exp', 'ln', 'log', 'LambertW', 'sinh',
339     'cosh', 'tanh', 'coth', 'sech', 'csch', 'asinh', 'acosh', 'atanh',
340     'acoth', 'asech', 'acsch', 'floor', 'ceiling', 'frac', 'Piecewise',
341     'piecewise_fold', 'erf', 'erfc', 'erfi', 'erf2', 'erfinv', 'erfcinv',
342     'erf2inv', 'Ei', 'expint', 'E1', 'li', 'Li', 'Si', 'Ci', 'Shi', 'Chi',
343     'fresnels', 'fresnelc', 'gamma', 'lowergamma', 'uppergamma', 'polygamma',
344     'loggamma', 'digamma', 'trigamma', 'multigamma', 'dirichlet_eta', 'zeta',
345     'lerchphi', 'polylog', 'stieltjes', 'Eijk', 'LeviCivita',
346     'KroneckerDelta', 'SingularityFunction', 'DiracDelta', 'Heaviside',
347     'bspline_basis', 'bspline_basis_set', 'interpolating_spline', 'besselj',
348     'bessely', 'besseli', 'besselk', 'hankel1', 'hankel2', 'jn', 'yn',
349     'jn_zeros', 'hn1', 'hn2', 'airyai', 'airybi', 'airyaiprime',
350     'airybiprime', 'marcumq', 'hyper', 'meijerg', 'appellf1', 'legendre',
351     'assoc_legendre', 'hermite', 'chebyshevt', 'chebyshevu',
352     'chebyshevu_root', 'chebyshevt_root', 'laguerre', 'assoc_laguerre',
353     'gegenbauer', 'jacobi', 'jacobi_normalized', 'Ynm', 'Ynm_c', 'Znm',
354     'elliptic_k', 'elliptic_f', 'elliptic_e', 'elliptic_pi', 'beta',
355     'mathieus', 'mathieuc', 'mathieusprime', 'mathieucprime',
356 
357     # sympy.ntheory
358     'nextprime', 'prevprime', 'prime', 'primepi', 'primerange', 'randprime',
359     'Sieve', 'sieve', 'primorial', 'cycle_length', 'composite', 'compositepi',
360     'isprime', 'divisors', 'proper_divisors', 'factorint', 'multiplicity',
361     'perfect_power', 'pollard_pm1', 'pollard_rho', 'primefactors', 'totient',
362     'trailing', 'divisor_count', 'proper_divisor_count', 'divisor_sigma',
363     'factorrat', 'reduced_totient', 'primenu', 'primeomega',
364     'mersenne_prime_exponent', 'is_perfect', 'is_mersenne_prime',
365     'is_abundant', 'is_deficient', 'is_amicable', 'abundance', 'npartitions',
366     'is_primitive_root', 'is_quad_residue', 'legendre_symbol',
367     'jacobi_symbol', 'n_order', 'sqrt_mod', 'quadratic_residues',
368     'primitive_root', 'nthroot_mod', 'is_nthpow_residue', 'sqrt_mod_iter',
369     'mobius', 'discrete_log', 'quadratic_congruence', 'binomial_coefficients',
370     'binomial_coefficients_list', 'multinomial_coefficients',
371     'continued_fraction_periodic', 'continued_fraction_iterator',
372     'continued_fraction_reduce', 'continued_fraction_convergents',
373     'continued_fraction', 'egyptian_fraction',
374 
375     # sympy.concrete
376     'product', 'Product', 'summation', 'Sum',
377 
378     # sympy.discrete
379     'fft', 'ifft', 'ntt', 'intt', 'fwht', 'ifwht', 'mobius_transform',
380     'inverse_mobius_transform', 'convolution', 'covering_product',
381     'intersecting_product',
382 
383     # sympy.simplify
384     'simplify', 'hypersimp', 'hypersimilar', 'logcombine', 'separatevars',
385     'posify', 'besselsimp', 'kroneckersimp', 'signsimp', 'bottom_up',
386     'nsimplify', 'FU', 'fu', 'sqrtdenest', 'cse', 'use', 'epath', 'EPath',
387     'hyperexpand', 'collect', 'rcollect', 'radsimp', 'collect_const',
388     'fraction', 'numer', 'denom', 'trigsimp', 'exptrigsimp', 'powsimp',
389     'powdenest', 'combsimp', 'gammasimp', 'ratsimp', 'ratsimpmodprime',
390 
391     # sympy.sets
392     'Set', 'Interval', 'Union', 'EmptySet', 'FiniteSet', 'ProductSet',
393     'Intersection', 'imageset', 'DisjointUnion', 'Complement', 'SymmetricDifference',
394     'ImageSet', 'Range', 'ComplexRegion', 'Reals', 'Contains', 'ConditionSet',
395     'Ordinal', 'OmegaPower', 'ord0', 'PowerSet', 'Reals', 'Naturals',
396     'Naturals0', 'UniversalSet', 'Integers', 'Rationals',
397 
398     # sympy.solvers
399     'solve', 'solve_linear_system', 'solve_linear_system_LU',
400     'solve_undetermined_coeffs', 'nsolve', 'solve_linear', 'checksol',
401     'det_quick', 'inv_quick', 'check_assumptions', 'failing_assumptions',
402     'diophantine', 'rsolve', 'rsolve_poly', 'rsolve_ratio', 'rsolve_hyper',
403     'checkodesol', 'classify_ode', 'dsolve', 'homogeneous_order',
404     'solve_poly_system', 'solve_triangulated', 'pde_separate',
405     'pde_separate_add', 'pde_separate_mul', 'pdsolve', 'classify_pde',
406     'checkpdesol', 'ode_order', 'reduce_inequalities',
407     'reduce_abs_inequality', 'reduce_abs_inequalities',
408     'solve_poly_inequality', 'solve_rational_inequalities',
409     'solve_univariate_inequality', 'decompogen', 'solveset', 'linsolve',
410     'linear_eq_to_matrix', 'nonlinsolve', 'substitution', 'Complexes',
411 
412     # sympy.matrices
413     'ShapeError', 'NonSquareMatrixError', 'GramSchmidt', 'casoratian', 'diag',
414     'eye', 'hessian', 'jordan_cell', 'list2numpy', 'matrix2numpy',
415     'matrix_multiply_elementwise', 'ones', 'randMatrix', 'rot_axis1',
416     'rot_axis2', 'rot_axis3', 'symarray', 'wronskian', 'zeros',
417     'MutableDenseMatrix', 'DeferredVector', 'MatrixBase', 'Matrix',
418     'MutableMatrix', 'MutableSparseMatrix', 'banded', 'ImmutableDenseMatrix',
419     'ImmutableSparseMatrix', 'ImmutableMatrix', 'SparseMatrix', 'MatrixSlice',
420     'BlockDiagMatrix', 'BlockMatrix', 'FunctionMatrix', 'Identity', 'Inverse',
421     'MatAdd', 'MatMul', 'MatPow', 'MatrixExpr', 'MatrixSymbol', 'Trace',
422     'Transpose', 'ZeroMatrix', 'OneMatrix', 'blockcut', 'block_collapse',
423     'matrix_symbols', 'Adjoint', 'hadamard_product', 'HadamardProduct',
424     'HadamardPower', 'Determinant', 'det', 'diagonalize_vector', 'DiagMatrix',
425     'DiagonalMatrix', 'DiagonalOf', 'trace', 'DotProduct',
426     'kronecker_product', 'KroneckerProduct', 'PermutationMatrix',
427     'MatrixPermute',
428 
429     # sympy.geometry
430     'Point', 'Point2D', 'Point3D', 'Line', 'Ray', 'Segment', 'Line2D',
431     'Segment2D', 'Ray2D', 'Line3D', 'Segment3D', 'Ray3D', 'Plane', 'Ellipse',
432     'Circle', 'Polygon', 'RegularPolygon', 'Triangle', 'rad', 'deg',
433     'are_similar', 'centroid', 'convex_hull', 'idiff', 'intersection',
434     'closest_points', 'farthest_points', 'GeometryError', 'Curve', 'Parabola',
435 
436     # sympy.utilities
437     'flatten', 'group', 'take', 'subsets', 'variations', 'numbered_symbols',
438     'cartes', 'capture', 'dict_merge', 'postorder_traversal',
439     'interactive_traversal', 'prefixes', 'postfixes', 'sift',
440     'topological_sort', 'unflatten', 'has_dups', 'has_variety', 'reshape',
441     'default_sort_key', 'ordered', 'rotations', 'filldedent', 'lambdify',
442     'source', 'threaded', 'xthreaded', 'public', 'memoize_property', 'test',
443     'doctest', 'timed',
444 
445     # sympy.integrals
446     'integrate', 'Integral', 'line_integrate', 'mellin_transform',
447     'inverse_mellin_transform', 'MellinTransform', 'InverseMellinTransform',
448     'laplace_transform', 'inverse_laplace_transform', 'LaplaceTransform',
449     'InverseLaplaceTransform', 'fourier_transform',
450     'inverse_fourier_transform', 'FourierTransform',
451     'InverseFourierTransform', 'sine_transform', 'inverse_sine_transform',
452     'SineTransform', 'InverseSineTransform', 'cosine_transform',
453     'inverse_cosine_transform', 'CosineTransform', 'InverseCosineTransform',
454     'hankel_transform', 'inverse_hankel_transform', 'HankelTransform',
455     'InverseHankelTransform', 'singularityintegrate',
456 
457     # sympy.tensor
458     'IndexedBase', 'Idx', 'Indexed', 'get_contraction_structure',
459     'get_indices', 'MutableDenseNDimArray', 'ImmutableDenseNDimArray',
460     'MutableSparseNDimArray', 'ImmutableSparseNDimArray', 'NDimArray',
461     'tensorproduct', 'tensorcontraction', 'derive_by_array', 'permutedims',
462     'Array', 'DenseNDimArray', 'SparseNDimArray',
463 
464     # sympy.parsing
465     'parse_expr',
466 
467     # sympy.calculus
468     'euler_equations', 'singularities', 'is_increasing',
469     'is_strictly_increasing', 'is_decreasing', 'is_strictly_decreasing',
470     'is_monotonic', 'finite_diff_weights', 'apply_finite_diff',
471     'as_finite_diff', 'differentiate_finite', 'periodicity', 'not_empty_in',
472     'AccumBounds', 'is_convex', 'stationary_points', 'minimum', 'maximum',
473 
474     # sympy.algebras
475     'Quaternion',
476 
477     # sympy.printing
478     'pager_print', 'pretty', 'pretty_print', 'pprint', 'pprint_use_unicode',
479     'pprint_try_use_unicode', 'latex', 'print_latex', 'multiline_latex',
480     'mathml', 'print_mathml', 'python', 'print_python', 'pycode', 'ccode',
481     'print_ccode', 'glsl_code', 'print_glsl', 'cxxcode', 'fcode',
482     'print_fcode', 'rcode', 'print_rcode', 'jscode', 'print_jscode',
483     'julia_code', 'mathematica_code', 'octave_code', 'rust_code', 'print_gtk',
484     'preview', 'srepr', 'print_tree', 'StrPrinter', 'sstr', 'sstrrepr',
485     'TableForm', 'dotprint', 'maple_code', 'print_maple_code',
486 
487     # sympy.plotting
488     'plot', 'textplot', 'plot_backends', 'plot_implicit', 'plot_parametric',
489 
490     # sympy.interactive
491     'init_session', 'init_printing',
492 
493     # sympy.testing
494     'test', 'doctest',
495 
496     # sympy.deprecated:
497     'C', 'ClassRegistry', 'class_registry',
498 ]
499 
500 
501 #===========================================================================#
502 #                                                                           #
503 # XXX: The names below were importable before sympy 1.6 using               #
504 #                                                                           #
505 #          from sympy import *                                              #
506 #                                                                           #
507 # This happened implicitly because there was no __all__ defined in this     #
508 # __init__.py file. Not every package is imported. The list matches what    #
509 # would have been imported before. It is possible that these packages will  #
510 # not be imported by a star-import from sympy in future.                    #
511 #                                                                           #
512 #===========================================================================#
513 
514 
515 __all__.extend([
516     'algebras',
517     'assumptions',
518     'calculus',
519     'codegen',
520     'combinatorics',
521     'concrete',
522     'deprecated',
523     'discrete',
524     'external',
525     'functions',
526     'geometry',
527     'interactive',
528     'multipledispatch',
529     'ntheory',
530     'parsing',
531     'plotting',
532     'polys',
533     'printing',
534     'release',
535     'strategies',
536     'tensor',
537     'utilities',
538 ])
539 
540 
541 #===========================================================================#
542 #                                                                           #
543 # XXX: The names listed in _DEPRECATED_IMPORTS below were importable before #
544 # sympy 1.6 using                                                           #
545 #                                                                           #
546 #          from sympy import *                                              #
547 #                                                                           #
548 # This happened implicitly because there was no __all__ defined in this     #
549 # __init__.py file. The plan is to remove them but for now they remain      #
550 # importable but will give a deprecation warning when used. In future these #
551 # names will be removed and will not be importable from here.               #
552 #                                                                           #
553 #===========================================================================#
554 
555 
556 class DeprecatedImportModule:
557     # Add a docstring that someone can see if calling help on these objects
558     """Deprecated imported module object.
559 
560     See https://github.com/sympy/sympy/pull/19316
561 
562     This is a wrapper around a module that has been imported incorrectly.
563     Previously this module was importable using
564 
565         from sympy import *
566 
567     or (for example)
568 
569         from sympy import add
570 
571     However it was unintentional that this module would be imported in that
572     way and it will be removed in a future sympy version. If you do need to
573     use this module then the correct way to import it is to give its full
574     module path e.g.
575 
576         import sympy.core.add as add
577     """
578 
579     from sympy.utilities.exceptions import SymPyDeprecationWarning as Warn
580     import sys
581     sympy = sys.modules[__name__]
582 
583     _DEPRECATED_IMPORTS = [
584         'sympy.concrete.expr_with_intlimits',
585         'sympy.concrete.expr_with_limits',
586         'sympy.concrete.gosper',
587         'sympy.concrete.products',
588         'sympy.concrete.summations',
589         'sympy.core.add',
590         'sympy.core.basic',
591         'sympy.core.cache',
592         'sympy.core.compatibility',
593         'sympy.core.containers',
594         'sympy.core.coreerrors',
595         'sympy.core.decorators',
596         'sympy.core.expr',
597         'sympy.core.exprtools',
598         'sympy.core.facts',
599         'sympy.core.function',
600         'sympy.core.logic',
601         'sympy.core.mod',
602         'sympy.core.mul',
603         'sympy.core.multidimensional',
604         'sympy.core.numbers',
605         'sympy.core.operations',
606         'sympy.core.power',
607         'sympy.core.relational',
608         'sympy.core.rules',
609         'sympy.core.singleton',
610         'sympy.core.symbol',
611         'sympy.discrete.convolutions',
612         'sympy.geometry.curve',
613         'sympy.geometry.ellipse',
614         'sympy.geometry.entity',
615         'sympy.geometry.exceptions',
616         'sympy.geometry.line',
617         'sympy.geometry.parabola',
618         'sympy.geometry.plane',
619         'sympy.geometry.point',
620         'sympy.geometry.polygon',
621         'sympy.geometry.util',
622         'sympy.integrals.integrals',
623         'sympy.integrals.manualintegrate',
624         'sympy.integrals.meijerint',
625         'sympy.integrals.singularityfunctions',
626         'sympy.integrals.transforms',
627         'sympy.integrals.trigonometry',
628         'sympy.logic.boolalg',
629         'sympy.logic.inference',
630         'sympy.matrices.common',
631         'sympy.matrices.dense',
632         'sympy.matrices.expressions',
633         'sympy.matrices.immutable',
634         'sympy.matrices.matrices',
635         'sympy.matrices.sparse',
636         'sympy.matrices.sparsetools',
637         'sympy.ntheory.factor_',
638         'sympy.ntheory.generate',
639         'sympy.ntheory.multinomial',
640         'sympy.ntheory.partitions_',
641         'sympy.ntheory.primetest',
642         'sympy.ntheory.residue_ntheory',
643         'sympy.sets.conditionset',
644         'sympy.sets.contains',
645         'sympy.sets.fancysets',
646         'sympy.sets.ordinals',
647         'sympy.sets.powerset',
648         'sympy.sets.sets',
649         'sympy.simplify.cse_main',
650         'sympy.simplify.cse_opts',
651         'sympy.simplify.epathtools',
652         'sympy.simplify.traversaltools',
653         'sympy.solvers.bivariate',
654         'sympy.solvers.deutils',
655         'sympy.solvers.inequalities',
656         'sympy.solvers.ode',
657         'sympy.solvers.pde',
658         'sympy.solvers.polysys',
659         'sympy.solvers.recurr',
660         'sympy.solvers.solvers',
661         'sympy.tensor.array',
662         'sympy.tensor.index_methods',
663         'sympy.tensor.indexed'
664     ]
665 
666     def __init__(self, modname):
667         from importlib import import_module
668         self.modname = modname
669         self.mod = import_module(modname)
670 
671     def __getattr__(self, name):
672         self.Warn(
673             feature="importing %s with 'from sympy import *'" % self.modname,
674             useinstead="import %s" % self.modname,
675             issue=18245,
676             deprecated_since_version="1.6").warn()
677         return getattr(self.mod, name)
678 
679     @classmethod
680     def inject_imports(cls):
681         for modname in cls._DEPRECATED_IMPORTS:
682             name = modname.split('.')[-1]
683             deprecated_mod = cls(modname)
684             setattr(cls.sympy, name, deprecated_mod)
685             __all__.append(name)
686 
687 
688 DeprecatedImportModule.inject_imports()
689 del DeprecatedImportModule

</code><intended_behavior>The `__version__` attribute here should be updated to reflect the new versioning post patches being merged. This is crucial for runtime access to SymPy's version within the Python ecosystem.</intended_behavior>]
2025-10-18 20:39:45.344 | INFO     | Search completed. Bug locations: [<file>setup.py</file>
<class>None</class>
<method>None</method>
<code>
1 #!/usr/bin/env python
2 """Distutils based setup script for SymPy.
3 
4 This uses Distutils (https://python.org/sigs/distutils-sig/) the standard
5 python mechanism for installing packages. Optionally, you can use
6 Setuptools (https://setuptools.readthedocs.io/en/latest/)
7 to automatically handle dependencies. For the easiest installation
8 just type the command (you'll probably need root privileges for that):
9 
10     python setup.py install
11 
12 This will install the library in the default location. For instructions on
13 how to customize the install procedure read the output of:
14 
15     python setup.py --help install
16 
17 In addition, there are some other commands:
18 
19     python setup.py clean -> will clean all trash (*.pyc and stuff)
20     python setup.py test  -> will run the complete test suite
21     python setup.py bench -> will run the complete benchmark suite
22     python setup.py audit -> will run pyflakes checker on source code
23 
24 To get a full list of available commands, read the output of:
25 
26     python setup.py --help-commands
27 
28 Or, if all else fails, feel free to write to the sympy list at
29 sympy@googlegroups.com and ask for help.
30 """
31 
32 import sys
33 import os
34 import shutil
35 import glob
36 import subprocess
37 
38 from distutils.command.sdist import sdist
39 
40 
41 min_mpmath_version = '0.19'
42 
43 # This directory
44 dir_setup = os.path.dirname(os.path.realpath(__file__))
45 
46 extra_kwargs = {}
47 
48 try:
49     from setuptools import setup, Command
50     extra_kwargs['zip_safe'] = False
51     extra_kwargs['entry_points'] = {
52         'console_scripts': [
53             'isympy = isympy:main',
54         ]
55     }
56 except ImportError:
57     from distutils.core import setup, Command
58 
59     extra_kwargs['scripts'] = ['bin/isympy']
60 
61     # handle mpmath deps in the hard way:
62     from distutils.version import LooseVersion
63     try:
64         import mpmath
65         if mpmath.__version__ < LooseVersion(min_mpmath_version):
66             raise ImportError
67     except ImportError:
68         print("Please install the mpmath package with a version >= %s"
69               % min_mpmath_version)
70         sys.exit(-1)
71 
72 if sys.version_info < (3, 5):
73     print("SymPy requires Python 3.5 or newer. Python %d.%d detected"
74           % sys.version_info[:2])
75     sys.exit(-1)
76 
77 # Check that this list is uptodate against the result of the command:
78 # python bin/generate_module_list.py
79 modules = [
80     'sympy.algebras',
81     'sympy.assumptions',
82     'sympy.assumptions.handlers',
83     'sympy.benchmarks',
84     'sympy.calculus',
85     'sympy.categories',
86     'sympy.codegen',
87     'sympy.combinatorics',
88     'sympy.concrete',
89     'sympy.core',
90     'sympy.core.benchmarks',
91     'sympy.crypto',
92     'sympy.deprecated',
93     'sympy.diffgeom',
94     'sympy.discrete',
95     'sympy.external',
96     'sympy.functions',
97     'sympy.functions.combinatorial',
98     'sympy.functions.elementary',
99     'sympy.functions.elementary.benchmarks',
100     'sympy.functions.special',
101     'sympy.functions.special.benchmarks',
102     'sympy.geometry',
103     'sympy.holonomic',
104     'sympy.integrals',
105     'sympy.integrals.benchmarks',
106     'sympy.integrals.rubi',
107     'sympy.integrals.rubi.parsetools',
108     'sympy.integrals.rubi.rubi_tests',
109     'sympy.integrals.rubi.rules',
110     'sympy.interactive',
111     'sympy.liealgebras',
112     'sympy.logic',
113     'sympy.logic.algorithms',
114     'sympy.logic.utilities',
115     'sympy.matrices',
116     'sympy.matrices.benchmarks',
117     'sympy.matrices.expressions',
118     'sympy.multipledispatch',
119     'sympy.ntheory',
120     'sympy.parsing',
121     'sympy.parsing.autolev',
122     'sympy.parsing.autolev._antlr',
123     'sympy.parsing.c',
124     'sympy.parsing.fortran',
125     'sympy.parsing.latex',
126     'sympy.parsing.latex._antlr',
127     'sympy.physics',
128     'sympy.physics.continuum_mechanics',
129     'sympy.physics.hep',
130     'sympy.physics.mechanics',
131     'sympy.physics.optics',
132     'sympy.physics.quantum',
133     'sympy.physics.units',
134     'sympy.physics.units.definitions',
135     'sympy.physics.units.systems',
136     'sympy.physics.vector',
137     'sympy.plotting',
138     'sympy.plotting.intervalmath',
139     'sympy.plotting.pygletplot',
140     'sympy.polys',
141     'sympy.polys.agca',
142     'sympy.polys.benchmarks',
143     'sympy.polys.domains',
144     'sympy.printing',
145     'sympy.printing.pretty',
146     'sympy.sandbox',
147     'sympy.series',
148     'sympy.series.benchmarks',
149     'sympy.sets',
150     'sympy.sets.handlers',
151     'sympy.simplify',
152     'sympy.solvers',
153     'sympy.solvers.benchmarks',
154     'sympy.solvers.diophantine',
155     'sympy.solvers.ode',
156     'sympy.stats',
157     'sympy.strategies',
158     'sympy.strategies.branch',
159     'sympy.tensor',
160     'sympy.tensor.array',
161     'sympy.testing',
162     'sympy.unify',
163     'sympy.utilities',
164     'sympy.utilities._compilation',
165     'sympy.utilities.mathml',
166     'sympy.vector',
167 ]
168 
169 class audit(Command):
170     """Audits SymPy's source code for following issues:
171         - Names which are used but not defined or used before they are defined.
172         - Names which are redefined without having been used.
173     """
174 
175     description = "Audit SymPy source with PyFlakes"
176     user_options = []
177 
178     def initialize_options(self):
179         self.all = None
180 
181     def finalize_options(self):
182         pass
183 
184     def run(self):
185         import os
186         try:
187             import pyflakes.scripts.pyflakes as flakes
188         except ImportError:
189             print("In order to run the audit, you need to have PyFlakes installed.")
190             sys.exit(-1)
191         dirs = (os.path.join(*d) for d in (m.split('.') for m in modules))
192         warns = 0
193         for dir in dirs:
194             for filename in os.listdir(dir):
195                 if filename.endswith('.py') and filename != '__init__.py':
196                     warns += flakes.checkPath(os.path.join(dir, filename))
197         if warns > 0:
198             print("Audit finished with total %d warnings" % warns)
199 
200 
201 class clean(Command):
202     """Cleans *.pyc and debian trashs, so you should get the same copy as
203     is in the VCS.
204     """
205 
206     description = "remove build files"
207     user_options = [("all", "a", "the same")]
208 
209     def initialize_options(self):
210         self.all = None
211 
212     def finalize_options(self):
213         pass
214 
215     def run(self):
216         curr_dir = os.getcwd()
217         for root, dirs, files in os.walk(dir_setup):
218             for file in files:
219                 if file.endswith('.pyc') and os.path.isfile:
220                     os.remove(os.path.join(root, file))
221 
222         os.chdir(dir_setup)
223         names = ["python-build-stamp-2.4", "MANIFEST", "build",
224                  "dist", "doc/_build", "sample.tex"]
225 
226         for f in names:
227             if os.path.isfile(f):
228                 os.remove(f)
229             elif os.path.isdir(f):
230                 shutil.rmtree(f)
231 
232         for name in glob.glob(os.path.join(dir_setup, "doc", "src", "modules",
233                                            "physics", "vector", "*.pdf")):
234             if os.path.isfile(name):
235                 os.remove(name)
236 
237         os.chdir(curr_dir)
238 
239 
240 class test_sympy(Command):
241     """Runs all tests under the sympy/ folder
242     """
243 
244     description = "run all tests and doctests; also see bin/test and bin/doctest"
245     user_options = []  # distutils complains if this is not here.
246 
247     def __init__(self, *args):
248         self.args = args[0]  # so we can pass it to other classes
249         Command.__init__(self, *args)
250 
251     def initialize_options(self):  # distutils wants this
252         pass
253 
254     def finalize_options(self):    # this too
255         pass
256 
257     def run(self):
258         from sympy.utilities import runtests
259         runtests.run_all_tests()
260 
261 
262 class run_benchmarks(Command):
263     """Runs all SymPy benchmarks"""
264 
265     description = "run all benchmarks"
266     user_options = []  # distutils complains if this is not here.
267 
268     def __init__(self, *args):
269         self.args = args[0]  # so we can pass it to other classes
270         Command.__init__(self, *args)
271 
272     def initialize_options(self):  # distutils wants this
273         pass
274 
275     def finalize_options(self):    # this too
276         pass
277 
278     # we use py.test like architecture:
279     #
280     # o collector   -- collects benchmarks
281     # o runner      -- executes benchmarks
282     # o presenter   -- displays benchmarks results
283     #
284     # this is done in sympy.utilities.benchmarking on top of py.test
285     def run(self):
286         from sympy.utilities import benchmarking
287         benchmarking.main(['sympy'])
288 
289 
290 class antlr(Command):
291     """Generate code with antlr4"""
292     description = "generate parser code from antlr grammars"
293     user_options = []  # distutils complains if this is not here.
294 
295     def __init__(self, *args):
296         self.args = args[0]  # so we can pass it to other classes
297         Command.__init__(self, *args)
298 
299     def initialize_options(self):  # distutils wants this
300         pass
301 
302     def finalize_options(self):    # this too
303         pass
304 
305     def run(self):
306         from sympy.parsing.latex._build_latex_antlr import build_parser
307         if not build_parser():
308             sys.exit(-1)
309 
310 
311 class sdist_sympy(sdist):
312     def run(self):
313         # Fetch git commit hash and write down to commit_hash.txt before
314         # shipped in tarball.
315         commit_hash = None
316         commit_hash_filepath = 'doc/commit_hash.txt'
317         try:
318             commit_hash = \
319                 subprocess.check_output(['git', 'rev-parse', 'HEAD'])
320             commit_hash = commit_hash.decode('ascii')
321             commit_hash = commit_hash.rstrip()
322             print('Commit hash found : {}.'.format(commit_hash))
323             print('Writing it to {}.'.format(commit_hash_filepath))
324         except:
325             pass
326 
327         if commit_hash:
328             with open(commit_hash_filepath, 'w') as f:
329                 f.write(commit_hash)
330 
331         super(sdist_sympy, self).run()
332 
333         try:
334             os.remove(commit_hash_filepath)
335             print(
336                 'Successfully removed temporary file {}.'
337                 .format(commit_hash_filepath))
338         except OSError as e:
339             print("Error deleting %s - %s." % (e.filename, e.strerror))
340 
341 
342 # Check that this list is uptodate against the result of the command:
343 # python bin/generate_test_list.py
344 tests = [
345     'sympy.algebras.tests',
346     'sympy.assumptions.tests',
347     'sympy.calculus.tests',
348     'sympy.categories.tests',
349     'sympy.codegen.tests',
350     'sympy.combinatorics.tests',
351     'sympy.concrete.tests',
352     'sympy.core.tests',
353     'sympy.crypto.tests',
354     'sympy.deprecated.tests',
355     'sympy.diffgeom.tests',
356     'sympy.discrete.tests',
357     'sympy.external.tests',
358     'sympy.functions.combinatorial.tests',
359     'sympy.functions.elementary.tests',
360     'sympy.functions.special.tests',
361     'sympy.geometry.tests',
362     'sympy.holonomic.tests',
363     'sympy.integrals.rubi.parsetools.tests',
364     'sympy.integrals.rubi.rubi_tests.tests',
365     'sympy.integrals.rubi.tests',
366     'sympy.integrals.tests',
367     'sympy.interactive.tests',
368     'sympy.liealgebras.tests',
369     'sympy.logic.tests',
370     'sympy.matrices.expressions.tests',
371     'sympy.matrices.tests',
372     'sympy.multipledispatch.tests',
373     'sympy.ntheory.tests',
374     'sympy.parsing.tests',
375     'sympy.physics.continuum_mechanics.tests',
376     'sympy.physics.hep.tests',
377     'sympy.physics.mechanics.tests',
378     'sympy.physics.optics.tests',
379     'sympy.physics.quantum.tests',
380     'sympy.physics.tests',
381     'sympy.physics.units.tests',
382     'sympy.physics.vector.tests',
383     'sympy.plotting.intervalmath.tests',
384     'sympy.plotting.pygletplot.tests',
385     'sympy.plotting.tests',
386     'sympy.polys.agca.tests',
387     'sympy.polys.domains.tests',
388     'sympy.polys.tests',
389     'sympy.printing.pretty.tests',
390     'sympy.printing.tests',
391     'sympy.sandbox.tests',
392     'sympy.series.tests',
393     'sympy.sets.tests',
394     'sympy.simplify.tests',
395     'sympy.solvers.diophantine.tests',
396     'sympy.solvers.ode.tests',
397     'sympy.solvers.tests',
398     'sympy.stats.tests',
399     'sympy.strategies.branch.tests',
400     'sympy.strategies.tests',
401     'sympy.tensor.array.tests',
402     'sympy.tensor.tests',
403     'sympy.testing.tests',
404     'sympy.unify.tests',
405     'sympy.utilities._compilation.tests',
406     'sympy.utilities.tests',
407     'sympy.vector.tests',
408 ]
409 
410 
411 with open(os.path.join(dir_setup, 'sympy', 'release.py')) as f:
412     # Defines __version__
413     exec(f.read())
414 
415 
416 if __name__ == '__main__':
417     setup(name='sympy',
418           version=__version__,
419           description='Computer algebra system (CAS) in Python',
420           author='SymPy development team',
421           author_email='sympy@googlegroups.com',
422           license='BSD',
423           keywords="Math CAS",
424           url='https://sympy.org',
425           py_modules=['isympy'],
426           packages=['sympy'] + modules + tests,
427           ext_modules=[],
428           package_data={
429               'sympy.utilities.mathml': ['data/*.xsl'],
430               'sympy.logic.benchmarks': ['input/*.cnf'],
431               'sympy.parsing.autolev': [
432                   '*.g4', 'test-examples/*.al', 'test-examples/*.py',
433                   'test-examples/pydy-example-repo/*.al',
434                   'test-examples/pydy-example-repo/*.py',
435                   'test-examples/README.txt',
436                   ],
437               'sympy.parsing.latex': ['*.txt', '*.g4'],
438               'sympy.integrals.rubi.parsetools': ['header.py.txt'],
439               'sympy.plotting.tests': ['test_region_*.png'],
440               },
441           data_files=[('share/man/man1', ['doc/man/isympy.1'])],
442           cmdclass={'test': test_sympy,
443                     'bench': run_benchmarks,
444                     'clean': clean,
445                     'audit': audit,
446                     'antlr': antlr,
447                     'sdist': sdist_sympy,
448                     },
449           python_requires='>=3.5',
450           classifiers=[
451             'License :: OSI Approved :: BSD License',
452             'Operating System :: OS Independent',
453             'Programming Language :: Python',
454             'Topic :: Scientific/Engineering',
455             'Topic :: Scientific/Engineering :: Mathematics',
456             'Topic :: Scientific/Engineering :: Physics',
457             'Programming Language :: Python :: 3',
458             'Programming Language :: Python :: 3.5',
459             'Programming Language :: Python :: 3.6',
460             'Programming Language :: Python :: 3.7',
461             'Programming Language :: Python :: 3.8',
462             'Programming Language :: Python :: 3 :: Only',
463             'Programming Language :: Python :: Implementation :: CPython',
464             'Programming Language :: Python :: Implementation :: PyPy',
465             ],
466           install_requires=[
467             'mpmath>=%s' % min_mpmath_version,
468             ],
469           **extra_kwargs
470           )

</code><intended_behavior>This file should ensure the project version is correctly set up for packaging. The intended modification or checkout would be to ensure the version reflects the upcoming or new release version following the merge of significant patches.</intended_behavior>, <file>sympy/__init__.py</file>
<class>None</class>
<method>None</method>
<code>
1 """
2 SymPy is a Python library for symbolic mathematics. It aims to become a
3 full-featured computer algebra system (CAS) while keeping the code as simple
4 as possible in order to be comprehensible and easily extensible.  SymPy is
5 written entirely in Python. It depends on mpmath, and other external libraries
6 may be optionally for things like plotting support.
7 
8 See the webpage for more information and documentation:
9 
10     https://sympy.org
11 
12 """
13 
14 
15 import sys
16 if sys.version_info < (3, 5):
17     raise ImportError("Python version 3.5 or above is required for SymPy.")
18 del sys
19 
20 
21 try:
22     import mpmath
23 except ImportError:
24     raise ImportError("SymPy now depends on mpmath as an external library. "
25     "See https://docs.sympy.org/latest/install.html#mpmath for more information.")
26 
27 del mpmath
28 
29 from sympy.release import __version__
30 
31 if 'dev' in __version__:
32     def enable_warnings():
33         import warnings
34         warnings.filterwarnings('default',   '.*',   DeprecationWarning, module='sympy.*')
35         del warnings
36     enable_warnings()
37     del enable_warnings
38 
39 
40 def __sympy_debug():
41     # helper function so we don't import os globally
42     import os
43     debug_str = os.getenv('SYMPY_DEBUG', 'False')
44     if debug_str in ('True', 'False'):
45         return eval(debug_str)
46     else:
47         raise RuntimeError("unrecognized value for SYMPY_DEBUG: %s" %
48                            debug_str)
49 SYMPY_DEBUG = __sympy_debug()  # type: bool
50 
51 from .core import (sympify, SympifyError, cacheit, Basic, Atom,
52         preorder_traversal, S, Expr, AtomicExpr, UnevaluatedExpr, Symbol,
53         Wild, Dummy, symbols, var, Number, Float, Rational, Integer,
54         NumberSymbol, RealNumber, igcd, ilcm, seterr, E, I, nan, oo, pi, zoo,
55         AlgebraicNumber, comp, mod_inverse, Pow, integer_nthroot, integer_log,
56         Mul, prod, Add, Mod, Rel, Eq, Ne, Lt, Le, Gt, Ge, Equality,
57         GreaterThan, LessThan, Unequality, StrictGreaterThan, StrictLessThan,
58         vectorize, Lambda, WildFunction, Derivative, diff, FunctionClass,
59         Function, Subs, expand, PoleError, count_ops, expand_mul, expand_log,
60         expand_func, expand_trig, expand_complex, expand_multinomial, nfloat,
61         expand_power_base, expand_power_exp, arity, PrecisionExhausted, N,
62         evalf, Tuple, Dict, gcd_terms, factor_terms, factor_nc, evaluate,
63         Catalan, EulerGamma, GoldenRatio, TribonacciConstant)
64 
65 from .logic import (to_cnf, to_dnf, to_nnf, And, Or, Not, Xor, Nand, Nor,
66         Implies, Equivalent, ITE, POSform, SOPform, simplify_logic, bool_map,
67         true, false, satisfiable)
68 
69 from .assumptions import (AppliedPredicate, Predicate, AssumptionsContext,
70         assuming, Q, ask, register_handler, remove_handler, refine)
71 
72 from .polys import (Poly, PurePoly, poly_from_expr, parallel_poly_from_expr,
73         degree, total_degree, degree_list, LC, LM, LT, pdiv, prem, pquo,
74         pexquo, div, rem, quo, exquo, half_gcdex, gcdex, invert,
75         subresultants, resultant, discriminant, cofactors, gcd_list, gcd,
76         lcm_list, lcm, terms_gcd, trunc, monic, content, primitive, compose,
77         decompose, sturm, gff_list, gff, sqf_norm, sqf_part, sqf_list, sqf,
78         factor_list, factor, intervals, refine_root, count_roots, real_roots,
79         nroots, ground_roots, nth_power_roots_poly, cancel, reduced, groebner,
80         is_zero_dimensional, GroebnerBasis, poly, symmetrize, horner,
81         interpolate, rational_interpolate, viete, together,
82         BasePolynomialError, ExactQuotientFailed, PolynomialDivisionFailed,
83         OperationNotSupported, HeuristicGCDFailed, HomomorphismFailed,
84         IsomorphismFailed, ExtraneousFactors, EvaluationFailed,
85         RefinementFailed, CoercionFailed, NotInvertible, NotReversible,
86         NotAlgebraic, DomainError, PolynomialError, UnificationFailed,
87         GeneratorsError, GeneratorsNeeded, ComputationFailed,
88         UnivariatePolynomialError, MultivariatePolynomialError,
89         PolificationFailed, OptionError, FlagError, minpoly,
90         minimal_polynomial, primitive_element, field_isomorphism,
91         to_number_field, isolate, itermonomials, Monomial, lex, grlex,
92         grevlex, ilex, igrlex, igrevlex, CRootOf, rootof, RootOf,
93         ComplexRootOf, RootSum, roots, Domain, FiniteField, IntegerRing,
94         RationalField, RealField, ComplexField, PythonFiniteField,
95         GMPYFiniteField, PythonIntegerRing, GMPYIntegerRing, PythonRational,
96         GMPYRationalField, AlgebraicField, PolynomialRing, FractionField,
97         ExpressionDomain, FF_python, FF_gmpy, ZZ_python, ZZ_gmpy, QQ_python,
98         QQ_gmpy, GF, FF, ZZ, QQ, RR, CC, EX, construct_domain,
99         swinnerton_dyer_poly, cyclotomic_poly, symmetric_poly, random_poly,
100         interpolating_poly, jacobi_poly, chebyshevt_poly, chebyshevu_poly,
101         hermite_poly, legendre_poly, laguerre_poly, apart, apart_list,
102         assemble_partfrac_list, Options, ring, xring, vring, sring, field,
103         xfield, vfield, sfield)
104 
105 from .series import (Order, O, limit, Limit, gruntz, series, approximants,
106         residue, EmptySequence, SeqPer, SeqFormula, sequence, SeqAdd, SeqMul,
107         fourier_series, fps, difference_delta, limit_seq)
108 
109 from .functions import (factorial, factorial2, rf, ff, binomial,
110         RisingFactorial, FallingFactorial, subfactorial, carmichael,
111         fibonacci, lucas, tribonacci, harmonic, bernoulli, bell, euler,
112         catalan, genocchi, partition, sqrt, root, Min, Max, Id, real_root,
113         cbrt, re, im, sign, Abs, conjugate, arg, polar_lift,
114         periodic_argument, unbranched_argument, principal_branch, transpose,
115         adjoint, polarify, unpolarify, sin, cos, tan, sec, csc, cot, sinc,
116         asin, acos, atan, asec, acsc, acot, atan2, exp_polar, exp, ln, log,
117         LambertW, sinh, cosh, tanh, coth, sech, csch, asinh, acosh, atanh,
118         acoth, asech, acsch, floor, ceiling, frac, Piecewise, piecewise_fold,
119         erf, erfc, erfi, erf2, erfinv, erfcinv, erf2inv, Ei, expint, E1, li,
120         Li, Si, Ci, Shi, Chi, fresnels, fresnelc, gamma, lowergamma,
121         uppergamma, polygamma, loggamma, digamma, trigamma, multigamma,
122         dirichlet_eta, zeta, lerchphi, polylog, stieltjes, Eijk, LeviCivita,
123         KroneckerDelta, SingularityFunction, DiracDelta, Heaviside,
124         bspline_basis, bspline_basis_set, interpolating_spline, besselj,
125         bessely, besseli, besselk, hankel1, hankel2, jn, yn, jn_zeros, hn1,
126         hn2, airyai, airybi, airyaiprime, airybiprime, marcumq, hyper,
127         meijerg, appellf1, legendre, assoc_legendre, hermite, chebyshevt,
128         chebyshevu, chebyshevu_root, chebyshevt_root, laguerre,
129         assoc_laguerre, gegenbauer, jacobi, jacobi_normalized, Ynm, Ynm_c,
130         Znm, elliptic_k, elliptic_f, elliptic_e, elliptic_pi, beta, mathieus,
131         mathieuc, mathieusprime, mathieucprime)
132 
133 from .ntheory import (nextprime, prevprime, prime, primepi, primerange,
134         randprime, Sieve, sieve, primorial, cycle_length, composite,
135         compositepi, isprime, divisors, proper_divisors, factorint,
136         multiplicity, perfect_power, pollard_pm1, pollard_rho, primefactors,
137         totient, trailing, divisor_count, proper_divisor_count, divisor_sigma,
138         factorrat, reduced_totient, primenu, primeomega,
139         mersenne_prime_exponent, is_perfect, is_mersenne_prime, is_abundant,
140         is_deficient, is_amicable, abundance, npartitions, is_primitive_root,
141         is_quad_residue, legendre_symbol, jacobi_symbol, n_order, sqrt_mod,
142         quadratic_residues, primitive_root, nthroot_mod, is_nthpow_residue,
143         sqrt_mod_iter, mobius, discrete_log, quadratic_congruence,
144         binomial_coefficients, binomial_coefficients_list,
145         multinomial_coefficients, continued_fraction_periodic,
146         continued_fraction_iterator, continued_fraction_reduce,
147         continued_fraction_convergents, continued_fraction, egyptian_fraction)
148 
149 from .concrete import product, Product, summation, Sum
150 
151 from .discrete import (fft, ifft, ntt, intt, fwht, ifwht, mobius_transform,
152         inverse_mobius_transform, convolution, covering_product,
153         intersecting_product)
154 
155 from .simplify import (simplify, hypersimp, hypersimilar, logcombine,
156         separatevars, posify, besselsimp, kroneckersimp, signsimp, bottom_up,
157         nsimplify, FU, fu, sqrtdenest, cse, use, epath, EPath, hyperexpand,
158         collect, rcollect, radsimp, collect_const, fraction, numer, denom,
159         trigsimp, exptrigsimp, powsimp, powdenest, combsimp, gammasimp,
160         ratsimp, ratsimpmodprime)
161 
162 from .sets import (Set, Interval, Union, EmptySet, FiniteSet, ProductSet,
163         Intersection, DisjointUnion, imageset, Complement, SymmetricDifference, ImageSet,
164         Range, ComplexRegion, Reals, Contains, ConditionSet, Ordinal,
165         OmegaPower, ord0, PowerSet, Naturals, Naturals0, UniversalSet,
166         Integers, Rationals)
167 
168 from .solvers import (solve, solve_linear_system, solve_linear_system_LU,
169         solve_undetermined_coeffs, nsolve, solve_linear, checksol, det_quick,
170         inv_quick, check_assumptions, failing_assumptions, diophantine,
171         rsolve, rsolve_poly, rsolve_ratio, rsolve_hyper, checkodesol,
172         classify_ode, dsolve, homogeneous_order, solve_poly_system,
173         solve_triangulated, pde_separate, pde_separate_add, pde_separate_mul,
174         pdsolve, classify_pde, checkpdesol, ode_order, reduce_inequalities,
175         reduce_abs_inequality, reduce_abs_inequalities, solve_poly_inequality,
176         solve_rational_inequalities, solve_univariate_inequality, decompogen,
177         solveset, linsolve, linear_eq_to_matrix, nonlinsolve, substitution,
178         Complexes)
179 
180 from .matrices import (ShapeError, NonSquareMatrixError, GramSchmidt,
181         casoratian, diag, eye, hessian, jordan_cell, list2numpy, matrix2numpy,
182         matrix_multiply_elementwise, ones, randMatrix, rot_axis1, rot_axis2,
183         rot_axis3, symarray, wronskian, zeros, MutableDenseMatrix,
184         DeferredVector, MatrixBase, Matrix, MutableMatrix,
185         MutableSparseMatrix, banded, ImmutableDenseMatrix,
186         ImmutableSparseMatrix, ImmutableMatrix, SparseMatrix, MatrixSlice,
187         BlockDiagMatrix, BlockMatrix, FunctionMatrix, Identity, Inverse,
188         MatAdd, MatMul, MatPow, MatrixExpr, MatrixSymbol, Trace, Transpose,
189         ZeroMatrix, OneMatrix, blockcut, block_collapse, matrix_symbols,
190         Adjoint, hadamard_product, HadamardProduct, HadamardPower,
191         Determinant, det, diagonalize_vector, DiagMatrix, DiagonalMatrix,
192         DiagonalOf, trace, DotProduct, kronecker_product, KroneckerProduct,
193         PermutationMatrix, MatrixPermute)
194 
195 from .geometry import (Point, Point2D, Point3D, Line, Ray, Segment, Line2D,
196         Segment2D, Ray2D, Line3D, Segment3D, Ray3D, Plane, Ellipse, Circle,
197         Polygon, RegularPolygon, Triangle, rad, deg, are_similar, centroid,
198         convex_hull, idiff, intersection, closest_points, farthest_points,
199         GeometryError, Curve, Parabola)
200 
201 from .utilities import (flatten, group, take, subsets, variations,
202         numbered_symbols, cartes, capture, dict_merge, postorder_traversal,
203         interactive_traversal, prefixes, postfixes, sift, topological_sort,
204         unflatten, has_dups, has_variety, reshape, default_sort_key, ordered,
205         rotations, filldedent, lambdify, source, threaded, xthreaded, public,
206         memoize_property, timed)
207 
208 from .integrals import (integrate, Integral, line_integrate, mellin_transform,
209         inverse_mellin_transform, MellinTransform, InverseMellinTransform,
210         laplace_transform, inverse_laplace_transform, LaplaceTransform,
211         InverseLaplaceTransform, fourier_transform, inverse_fourier_transform,
212         FourierTransform, InverseFourierTransform, sine_transform,
213         inverse_sine_transform, SineTransform, InverseSineTransform,
214         cosine_transform, inverse_cosine_transform, CosineTransform,
215         InverseCosineTransform, hankel_transform, inverse_hankel_transform,
216         HankelTransform, InverseHankelTransform, singularityintegrate)
217 
218 from .tensor import (IndexedBase, Idx, Indexed, get_contraction_structure,
219         get_indices, MutableDenseNDimArray, ImmutableDenseNDimArray,
220         MutableSparseNDimArray, ImmutableSparseNDimArray, NDimArray,
221         tensorproduct, tensorcontraction, derive_by_array, permutedims, Array,
222         DenseNDimArray, SparseNDimArray)
223 
224 from .parsing import parse_expr
225 
226 from .calculus import (euler_equations, singularities, is_increasing,
227         is_strictly_increasing, is_decreasing, is_strictly_decreasing,
228         is_monotonic, finite_diff_weights, apply_finite_diff, as_finite_diff,
229         differentiate_finite, periodicity, not_empty_in, AccumBounds,
230         is_convex, stationary_points, minimum, maximum)
231 
232 from .algebras import Quaternion
233 
234 from .printing import (pager_print, pretty, pretty_print, pprint,
235         pprint_use_unicode, pprint_try_use_unicode, latex, print_latex,
236         multiline_latex, mathml, print_mathml, python, print_python, pycode,
237         ccode, print_ccode, glsl_code, print_glsl, cxxcode, fcode,
238         print_fcode, rcode, print_rcode, jscode, print_jscode, julia_code,
239         mathematica_code, octave_code, rust_code, print_gtk, preview, srepr,
240         print_tree, StrPrinter, sstr, sstrrepr, TableForm, dotprint,
241         maple_code, print_maple_code)
242 
243 from .testing import test, doctest
244 
245 # This module causes conflicts with other modules:
246 # from .stats import *
247 # Adds about .04-.05 seconds of import time
248 # from combinatorics import *
249 # This module is slow to import:
250 #from physics import units
251 from .plotting import plot, textplot, plot_backends, plot_implicit, plot_parametric
252 from .interactive import init_session, init_printing
253 
254 evalf._create_evalf_table()
255 
256 # This is slow to import:
257 #import abc
258 
259 from .deprecated import C, ClassRegistry, class_registry
260 
261 __all__ = [
262     # sympy.core
263     'sympify', 'SympifyError', 'cacheit', 'Basic', 'Atom',
264     'preorder_traversal', 'S', 'Expr', 'AtomicExpr', 'UnevaluatedExpr',
265     'Symbol', 'Wild', 'Dummy', 'symbols', 'var', 'Number', 'Float',
266     'Rational', 'Integer', 'NumberSymbol', 'RealNumber', 'igcd', 'ilcm',
267     'seterr', 'E', 'I', 'nan', 'oo', 'pi', 'zoo', 'AlgebraicNumber', 'comp',
268     'mod_inverse', 'Pow', 'integer_nthroot', 'integer_log', 'Mul', 'prod',
269     'Add', 'Mod', 'Rel', 'Eq', 'Ne', 'Lt', 'Le', 'Gt', 'Ge', 'Equality',
270     'GreaterThan', 'LessThan', 'Unequality', 'StrictGreaterThan',
271     'StrictLessThan', 'vectorize', 'Lambda', 'WildFunction', 'Derivative',
272     'diff', 'FunctionClass', 'Function', 'Subs', 'expand', 'PoleError',
273     'count_ops', 'expand_mul', 'expand_log', 'expand_func', 'expand_trig',
274     'expand_complex', 'expand_multinomial', 'nfloat', 'expand_power_base',
275     'expand_power_exp', 'arity', 'PrecisionExhausted', 'N', 'evalf', 'Tuple',
276     'Dict', 'gcd_terms', 'factor_terms', 'factor_nc', 'evaluate', 'Catalan',
277     'EulerGamma', 'GoldenRatio', 'TribonacciConstant',
278 
279     # sympy.logic
280     'to_cnf', 'to_dnf', 'to_nnf', 'And', 'Or', 'Not', 'Xor', 'Nand', 'Nor',
281     'Implies', 'Equivalent', 'ITE', 'POSform', 'SOPform', 'simplify_logic',
282     'bool_map', 'true', 'false', 'satisfiable',
283 
284     # sympy.assumptions
285     'AppliedPredicate', 'Predicate', 'AssumptionsContext', 'assuming', 'Q',
286     'ask', 'register_handler', 'remove_handler', 'refine',
287 
288     # sympy.polys
289     'Poly', 'PurePoly', 'poly_from_expr', 'parallel_poly_from_expr', 'degree',
290     'total_degree', 'degree_list', 'LC', 'LM', 'LT', 'pdiv', 'prem', 'pquo',
291     'pexquo', 'div', 'rem', 'quo', 'exquo', 'half_gcdex', 'gcdex', 'invert',
292     'subresultants', 'resultant', 'discriminant', 'cofactors', 'gcd_list',
293     'gcd', 'lcm_list', 'lcm', 'terms_gcd', 'trunc', 'monic', 'content',
294     'primitive', 'compose', 'decompose', 'sturm', 'gff_list', 'gff',
295     'sqf_norm', 'sqf_part', 'sqf_list', 'sqf', 'factor_list', 'factor',
296     'intervals', 'refine_root', 'count_roots', 'real_roots', 'nroots',
297     'ground_roots', 'nth_power_roots_poly', 'cancel', 'reduced', 'groebner',
298     'is_zero_dimensional', 'GroebnerBasis', 'poly', 'symmetrize', 'horner',
299     'interpolate', 'rational_interpolate', 'viete', 'together',
300     'BasePolynomialError', 'ExactQuotientFailed', 'PolynomialDivisionFailed',
301     'OperationNotSupported', 'HeuristicGCDFailed', 'HomomorphismFailed',
302     'IsomorphismFailed', 'ExtraneousFactors', 'EvaluationFailed',
303     'RefinementFailed', 'CoercionFailed', 'NotInvertible', 'NotReversible',
304     'NotAlgebraic', 'DomainError', 'PolynomialError', 'UnificationFailed',
305     'GeneratorsError', 'GeneratorsNeeded', 'ComputationFailed',
306     'UnivariatePolynomialError', 'MultivariatePolynomialError',
307     'PolificationFailed', 'OptionError', 'FlagError', 'minpoly',
308     'minimal_polynomial', 'primitive_element', 'field_isomorphism',
309     'to_number_field', 'isolate', 'itermonomials', 'Monomial', 'lex', 'grlex',
310     'grevlex', 'ilex', 'igrlex', 'igrevlex', 'CRootOf', 'rootof', 'RootOf',
311     'ComplexRootOf', 'RootSum', 'roots', 'Domain', 'FiniteField',
312     'IntegerRing', 'RationalField', 'RealField', 'ComplexField',
313     'PythonFiniteField', 'GMPYFiniteField', 'PythonIntegerRing',
314     'GMPYIntegerRing', 'PythonRational', 'GMPYRationalField',
315     'AlgebraicField', 'PolynomialRing', 'FractionField', 'ExpressionDomain',
316     'FF_python', 'FF_gmpy', 'ZZ_python', 'ZZ_gmpy', 'QQ_python', 'QQ_gmpy',
317     'GF', 'FF', 'ZZ', 'QQ', 'RR', 'CC', 'EX', 'construct_domain',
318     'swinnerton_dyer_poly', 'cyclotomic_poly', 'symmetric_poly',
319     'random_poly', 'interpolating_poly', 'jacobi_poly', 'chebyshevt_poly',
320     'chebyshevu_poly', 'hermite_poly', 'legendre_poly', 'laguerre_poly',
321     'apart', 'apart_list', 'assemble_partfrac_list', 'Options', 'ring',
322     'xring', 'vring', 'sring', 'field', 'xfield', 'vfield', 'sfield',
323 
324     # sympy.series
325     'Order', 'O', 'limit', 'Limit', 'gruntz', 'series', 'approximants',
326     'residue', 'EmptySequence', 'SeqPer', 'SeqFormula', 'sequence', 'SeqAdd',
327     'SeqMul', 'fourier_series', 'fps', 'difference_delta', 'limit_seq',
328 
329     # sympy.functions
330     'factorial', 'factorial2', 'rf', 'ff', 'binomial', 'RisingFactorial',
331     'FallingFactorial', 'subfactorial', 'carmichael', 'fibonacci', 'lucas',
332     'tribonacci', 'harmonic', 'bernoulli', 'bell', 'euler', 'catalan',
333     'genocchi', 'partition', 'sqrt', 'root', 'Min', 'Max', 'Id', 'real_root',
334     'cbrt', 're', 'im', 'sign', 'Abs', 'conjugate', 'arg', 'polar_lift',
335     'periodic_argument', 'unbranched_argument', 'principal_branch',
336     'transpose', 'adjoint', 'polarify', 'unpolarify', 'sin', 'cos', 'tan',
337     'sec', 'csc', 'cot', 'sinc', 'asin', 'acos', 'atan', 'asec', 'acsc',
338     'acot', 'atan2', 'exp_polar', 'exp', 'ln', 'log', 'LambertW', 'sinh',
339     'cosh', 'tanh', 'coth', 'sech', 'csch', 'asinh', 'acosh', 'atanh',
340     'acoth', 'asech', 'acsch', 'floor', 'ceiling', 'frac', 'Piecewise',
341     'piecewise_fold', 'erf', 'erfc', 'erfi', 'erf2', 'erfinv', 'erfcinv',
342     'erf2inv', 'Ei', 'expint', 'E1', 'li', 'Li', 'Si', 'Ci', 'Shi', 'Chi',
343     'fresnels', 'fresnelc', 'gamma', 'lowergamma', 'uppergamma', 'polygamma',
344     'loggamma', 'digamma', 'trigamma', 'multigamma', 'dirichlet_eta', 'zeta',
345     'lerchphi', 'polylog', 'stieltjes', 'Eijk', 'LeviCivita',
346     'KroneckerDelta', 'SingularityFunction', 'DiracDelta', 'Heaviside',
347     'bspline_basis', 'bspline_basis_set', 'interpolating_spline', 'besselj',
348     'bessely', 'besseli', 'besselk', 'hankel1', 'hankel2', 'jn', 'yn',
349     'jn_zeros', 'hn1', 'hn2', 'airyai', 'airybi', 'airyaiprime',
350     'airybiprime', 'marcumq', 'hyper', 'meijerg', 'appellf1', 'legendre',
351     'assoc_legendre', 'hermite', 'chebyshevt', 'chebyshevu',
352     'chebyshevu_root', 'chebyshevt_root', 'laguerre', 'assoc_laguerre',
353     'gegenbauer', 'jacobi', 'jacobi_normalized', 'Ynm', 'Ynm_c', 'Znm',
354     'elliptic_k', 'elliptic_f', 'elliptic_e', 'elliptic_pi', 'beta',
355     'mathieus', 'mathieuc', 'mathieusprime', 'mathieucprime',
356 
357     # sympy.ntheory
358     'nextprime', 'prevprime', 'prime', 'primepi', 'primerange', 'randprime',
359     'Sieve', 'sieve', 'primorial', 'cycle_length', 'composite', 'compositepi',
360     'isprime', 'divisors', 'proper_divisors', 'factorint', 'multiplicity',
361     'perfect_power', 'pollard_pm1', 'pollard_rho', 'primefactors', 'totient',
362     'trailing', 'divisor_count', 'proper_divisor_count', 'divisor_sigma',
363     'factorrat', 'reduced_totient', 'primenu', 'primeomega',
364     'mersenne_prime_exponent', 'is_perfect', 'is_mersenne_prime',
365     'is_abundant', 'is_deficient', 'is_amicable', 'abundance', 'npartitions',
366     'is_primitive_root', 'is_quad_residue', 'legendre_symbol',
367     'jacobi_symbol', 'n_order', 'sqrt_mod', 'quadratic_residues',
368     'primitive_root', 'nthroot_mod', 'is_nthpow_residue', 'sqrt_mod_iter',
369     'mobius', 'discrete_log', 'quadratic_congruence', 'binomial_coefficients',
370     'binomial_coefficients_list', 'multinomial_coefficients',
371     'continued_fraction_periodic', 'continued_fraction_iterator',
372     'continued_fraction_reduce', 'continued_fraction_convergents',
373     'continued_fraction', 'egyptian_fraction',
374 
375     # sympy.concrete
376     'product', 'Product', 'summation', 'Sum',
377 
378     # sympy.discrete
379     'fft', 'ifft', 'ntt', 'intt', 'fwht', 'ifwht', 'mobius_transform',
380     'inverse_mobius_transform', 'convolution', 'covering_product',
381     'intersecting_product',
382 
383     # sympy.simplify
384     'simplify', 'hypersimp', 'hypersimilar', 'logcombine', 'separatevars',
385     'posify', 'besselsimp', 'kroneckersimp', 'signsimp', 'bottom_up',
386     'nsimplify', 'FU', 'fu', 'sqrtdenest', 'cse', 'use', 'epath', 'EPath',
387     'hyperexpand', 'collect', 'rcollect', 'radsimp', 'collect_const',
388     'fraction', 'numer', 'denom', 'trigsimp', 'exptrigsimp', 'powsimp',
389     'powdenest', 'combsimp', 'gammasimp', 'ratsimp', 'ratsimpmodprime',
390 
391     # sympy.sets
392     'Set', 'Interval', 'Union', 'EmptySet', 'FiniteSet', 'ProductSet',
393     'Intersection', 'imageset', 'DisjointUnion', 'Complement', 'SymmetricDifference',
394     'ImageSet', 'Range', 'ComplexRegion', 'Reals', 'Contains', 'ConditionSet',
395     'Ordinal', 'OmegaPower', 'ord0', 'PowerSet', 'Reals', 'Naturals',
396     'Naturals0', 'UniversalSet', 'Integers', 'Rationals',
397 
398     # sympy.solvers
399     'solve', 'solve_linear_system', 'solve_linear_system_LU',
400     'solve_undetermined_coeffs', 'nsolve', 'solve_linear', 'checksol',
401     'det_quick', 'inv_quick', 'check_assumptions', 'failing_assumptions',
402     'diophantine', 'rsolve', 'rsolve_poly', 'rsolve_ratio', 'rsolve_hyper',
403     'checkodesol', 'classify_ode', 'dsolve', 'homogeneous_order',
404     'solve_poly_system', 'solve_triangulated', 'pde_separate',
405     'pde_separate_add', 'pde_separate_mul', 'pdsolve', 'classify_pde',
406     'checkpdesol', 'ode_order', 'reduce_inequalities',
407     'reduce_abs_inequality', 'reduce_abs_inequalities',
408     'solve_poly_inequality', 'solve_rational_inequalities',
409     'solve_univariate_inequality', 'decompogen', 'solveset', 'linsolve',
410     'linear_eq_to_matrix', 'nonlinsolve', 'substitution', 'Complexes',
411 
412     # sympy.matrices
413     'ShapeError', 'NonSquareMatrixError', 'GramSchmidt', 'casoratian', 'diag',
414     'eye', 'hessian', 'jordan_cell', 'list2numpy', 'matrix2numpy',
415     'matrix_multiply_elementwise', 'ones', 'randMatrix', 'rot_axis1',
416     'rot_axis2', 'rot_axis3', 'symarray', 'wronskian', 'zeros',
417     'MutableDenseMatrix', 'DeferredVector', 'MatrixBase', 'Matrix',
418     'MutableMatrix', 'MutableSparseMatrix', 'banded', 'ImmutableDenseMatrix',
419     'ImmutableSparseMatrix', 'ImmutableMatrix', 'SparseMatrix', 'MatrixSlice',
420     'BlockDiagMatrix', 'BlockMatrix', 'FunctionMatrix', 'Identity', 'Inverse',
421     'MatAdd', 'MatMul', 'MatPow', 'MatrixExpr', 'MatrixSymbol', 'Trace',
422     'Transpose', 'ZeroMatrix', 'OneMatrix', 'blockcut', 'block_collapse',
423     'matrix_symbols', 'Adjoint', 'hadamard_product', 'HadamardProduct',
424     'HadamardPower', 'Determinant', 'det', 'diagonalize_vector', 'DiagMatrix',
425     'DiagonalMatrix', 'DiagonalOf', 'trace', 'DotProduct',
426     'kronecker_product', 'KroneckerProduct', 'PermutationMatrix',
427     'MatrixPermute',
428 
429     # sympy.geometry
430     'Point', 'Point2D', 'Point3D', 'Line', 'Ray', 'Segment', 'Line2D',
431     'Segment2D', 'Ray2D', 'Line3D', 'Segment3D', 'Ray3D', 'Plane', 'Ellipse',
432     'Circle', 'Polygon', 'RegularPolygon', 'Triangle', 'rad', 'deg',
433     'are_similar', 'centroid', 'convex_hull', 'idiff', 'intersection',
434     'closest_points', 'farthest_points', 'GeometryError', 'Curve', 'Parabola',
435 
436     # sympy.utilities
437     'flatten', 'group', 'take', 'subsets', 'variations', 'numbered_symbols',
438     'cartes', 'capture', 'dict_merge', 'postorder_traversal',
439     'interactive_traversal', 'prefixes', 'postfixes', 'sift',
440     'topological_sort', 'unflatten', 'has_dups', 'has_variety', 'reshape',
441     'default_sort_key', 'ordered', 'rotations', 'filldedent', 'lambdify',
442     'source', 'threaded', 'xthreaded', 'public', 'memoize_property', 'test',
443     'doctest', 'timed',
444 
445     # sympy.integrals
446     'integrate', 'Integral', 'line_integrate', 'mellin_transform',
447     'inverse_mellin_transform', 'MellinTransform', 'InverseMellinTransform',
448     'laplace_transform', 'inverse_laplace_transform', 'LaplaceTransform',
449     'InverseLaplaceTransform', 'fourier_transform',
450     'inverse_fourier_transform', 'FourierTransform',
451     'InverseFourierTransform', 'sine_transform', 'inverse_sine_transform',
452     'SineTransform', 'InverseSineTransform', 'cosine_transform',
453     'inverse_cosine_transform', 'CosineTransform', 'InverseCosineTransform',
454     'hankel_transform', 'inverse_hankel_transform', 'HankelTransform',
455     'InverseHankelTransform', 'singularityintegrate',
456 
457     # sympy.tensor
458     'IndexedBase', 'Idx', 'Indexed', 'get_contraction_structure',
459     'get_indices', 'MutableDenseNDimArray', 'ImmutableDenseNDimArray',
460     'MutableSparseNDimArray', 'ImmutableSparseNDimArray', 'NDimArray',
461     'tensorproduct', 'tensorcontraction', 'derive_by_array', 'permutedims',
462     'Array', 'DenseNDimArray', 'SparseNDimArray',
463 
464     # sympy.parsing
465     'parse_expr',
466 
467     # sympy.calculus
468     'euler_equations', 'singularities', 'is_increasing',
469     'is_strictly_increasing', 'is_decreasing', 'is_strictly_decreasing',
470     'is_monotonic', 'finite_diff_weights', 'apply_finite_diff',
471     'as_finite_diff', 'differentiate_finite', 'periodicity', 'not_empty_in',
472     'AccumBounds', 'is_convex', 'stationary_points', 'minimum', 'maximum',
473 
474     # sympy.algebras
475     'Quaternion',
476 
477     # sympy.printing
478     'pager_print', 'pretty', 'pretty_print', 'pprint', 'pprint_use_unicode',
479     'pprint_try_use_unicode', 'latex', 'print_latex', 'multiline_latex',
480     'mathml', 'print_mathml', 'python', 'print_python', 'pycode', 'ccode',
481     'print_ccode', 'glsl_code', 'print_glsl', 'cxxcode', 'fcode',
482     'print_fcode', 'rcode', 'print_rcode', 'jscode', 'print_jscode',
483     'julia_code', 'mathematica_code', 'octave_code', 'rust_code', 'print_gtk',
484     'preview', 'srepr', 'print_tree', 'StrPrinter', 'sstr', 'sstrrepr',
485     'TableForm', 'dotprint', 'maple_code', 'print_maple_code',
486 
487     # sympy.plotting
488     'plot', 'textplot', 'plot_backends', 'plot_implicit', 'plot_parametric',
489 
490     # sympy.interactive
491     'init_session', 'init_printing',
492 
493     # sympy.testing
494     'test', 'doctest',
495 
496     # sympy.deprecated:
497     'C', 'ClassRegistry', 'class_registry',
498 ]
499 
500 
501 #===========================================================================#
502 #                                                                           #
503 # XXX: The names below were importable before sympy 1.6 using               #
504 #                                                                           #
505 #          from sympy import *                                              #
506 #                                                                           #
507 # This happened implicitly because there was no __all__ defined in this     #
508 # __init__.py file. Not every package is imported. The list matches what    #
509 # would have been imported before. It is possible that these packages will  #
510 # not be imported by a star-import from sympy in future.                    #
511 #                                                                           #
512 #===========================================================================#
513 
514 
515 __all__.extend([
516     'algebras',
517     'assumptions',
518     'calculus',
519     'codegen',
520     'combinatorics',
521     'concrete',
522     'deprecated',
523     'discrete',
524     'external',
525     'functions',
526     'geometry',
527     'interactive',
528     'multipledispatch',
529     'ntheory',
530     'parsing',
531     'plotting',
532     'polys',
533     'printing',
534     'release',
535     'strategies',
536     'tensor',
537     'utilities',
538 ])
539 
540 
541 #===========================================================================#
542 #                                                                           #
543 # XXX: The names listed in _DEPRECATED_IMPORTS below were importable before #
544 # sympy 1.6 using                                                           #
545 #                                                                           #
546 #          from sympy import *                                              #
547 #                                                                           #
548 # This happened implicitly because there was no __all__ defined in this     #
549 # __init__.py file. The plan is to remove them but for now they remain      #
550 # importable but will give a deprecation warning when used. In future these #
551 # names will be removed and will not be importable from here.               #
552 #                                                                           #
553 #===========================================================================#
554 
555 
556 class DeprecatedImportModule:
557     # Add a docstring that someone can see if calling help on these objects
558     """Deprecated imported module object.
559 
560     See https://github.com/sympy/sympy/pull/19316
561 
562     This is a wrapper around a module that has been imported incorrectly.
563     Previously this module was importable using
564 
565         from sympy import *
566 
567     or (for example)
568 
569         from sympy import add
570 
571     However it was unintentional that this module would be imported in that
572     way and it will be removed in a future sympy version. If you do need to
573     use this module then the correct way to import it is to give its full
574     module path e.g.
575 
576         import sympy.core.add as add
577     """
578 
579     from sympy.utilities.exceptions import SymPyDeprecationWarning as Warn
580     import sys
581     sympy = sys.modules[__name__]
582 
583     _DEPRECATED_IMPORTS = [
584         'sympy.concrete.expr_with_intlimits',
585         'sympy.concrete.expr_with_limits',
586         'sympy.concrete.gosper',
587         'sympy.concrete.products',
588         'sympy.concrete.summations',
589         'sympy.core.add',
590         'sympy.core.basic',
591         'sympy.core.cache',
592         'sympy.core.compatibility',
593         'sympy.core.containers',
594         'sympy.core.coreerrors',
595         'sympy.core.decorators',
596         'sympy.core.expr',
597         'sympy.core.exprtools',
598         'sympy.core.facts',
599         'sympy.core.function',
600         'sympy.core.logic',
601         'sympy.core.mod',
602         'sympy.core.mul',
603         'sympy.core.multidimensional',
604         'sympy.core.numbers',
605         'sympy.core.operations',
606         'sympy.core.power',
607         'sympy.core.relational',
608         'sympy.core.rules',
609         'sympy.core.singleton',
610         'sympy.core.symbol',
611         'sympy.discrete.convolutions',
612         'sympy.geometry.curve',
613         'sympy.geometry.ellipse',
614         'sympy.geometry.entity',
615         'sympy.geometry.exceptions',
616         'sympy.geometry.line',
617         'sympy.geometry.parabola',
618         'sympy.geometry.plane',
619         'sympy.geometry.point',
620         'sympy.geometry.polygon',
621         'sympy.geometry.util',
622         'sympy.integrals.integrals',
623         'sympy.integrals.manualintegrate',
624         'sympy.integrals.meijerint',
625         'sympy.integrals.singularityfunctions',
626         'sympy.integrals.transforms',
627         'sympy.integrals.trigonometry',
628         'sympy.logic.boolalg',
629         'sympy.logic.inference',
630         'sympy.matrices.common',
631         'sympy.matrices.dense',
632         'sympy.matrices.expressions',
633         'sympy.matrices.immutable',
634         'sympy.matrices.matrices',
635         'sympy.matrices.sparse',
636         'sympy.matrices.sparsetools',
637         'sympy.ntheory.factor_',
638         'sympy.ntheory.generate',
639         'sympy.ntheory.multinomial',
640         'sympy.ntheory.partitions_',
641         'sympy.ntheory.primetest',
642         'sympy.ntheory.residue_ntheory',
643         'sympy.sets.conditionset',
644         'sympy.sets.contains',
645         'sympy.sets.fancysets',
646         'sympy.sets.ordinals',
647         'sympy.sets.powerset',
648         'sympy.sets.sets',
649         'sympy.simplify.cse_main',
650         'sympy.simplify.cse_opts',
651         'sympy.simplify.epathtools',
652         'sympy.simplify.traversaltools',
653         'sympy.solvers.bivariate',
654         'sympy.solvers.deutils',
655         'sympy.solvers.inequalities',
656         'sympy.solvers.ode',
657         'sympy.solvers.pde',
658         'sympy.solvers.polysys',
659         'sympy.solvers.recurr',
660         'sympy.solvers.solvers',
661         'sympy.tensor.array',
662         'sympy.tensor.index_methods',
663         'sympy.tensor.indexed'
664     ]
665 
666     def __init__(self, modname):
667         from importlib import import_module
668         self.modname = modname
669         self.mod = import_module(modname)
670 
671     def __getattr__(self, name):
672         self.Warn(
673             feature="importing %s with 'from sympy import *'" % self.modname,
674             useinstead="import %s" % self.modname,
675             issue=18245,
676             deprecated_since_version="1.6").warn()
677         return getattr(self.mod, name)
678 
679     @classmethod
680     def inject_imports(cls):
681         for modname in cls._DEPRECATED_IMPORTS:
682             name = modname.split('.')[-1]
683             deprecated_mod = cls(modname)
684             setattr(cls.sympy, name, deprecated_mod)
685             __all__.append(name)
686 
687 
688 DeprecatedImportModule.inject_imports()
689 del DeprecatedImportModule

</code><intended_behavior>The `__version__` attribute here should be updated to reflect the new versioning post patches being merged. This is crucial for runtime access to SymPy's version within the Python ecosystem.</intended_behavior>]
2025-10-18 20:39:45.344 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-18 20:39:45.344 | INFO     | Search-only: skipping patch selection
2025-10-18 20:39:45.417 | INFO     | Task sympy__sympy-19601 completed successfully.
2025-10-18 20:39:45.417 | INFO     | No patch generated. You can try running ACR again.
