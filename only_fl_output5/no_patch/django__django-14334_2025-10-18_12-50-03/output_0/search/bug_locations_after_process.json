[
    {
        "rel_file_path": "django/utils/translation/trans_real.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__4.0/django/utils/translation/trans_real.py",
        "start": 464,
        "end": 495,
        "class_name": null,
        "method_name": "get_supported_language_variant",
        "code": "464 def get_supported_language_variant(lang_code, strict=False):\n465     \"\"\"\n466     Return the language code that's listed in supported languages, possibly\n467     selecting a more generic variant. Raise LookupError if nothing is found.\n468 \n469     If `strict` is False (the default), look for a country-specific variant\n470     when neither the language code nor its generic variant is found.\n471 \n472     lru_cache should have a maxsize to prevent from memory exhaustion attacks,\n473     as the provided language codes are taken from the HTTP request. See also\n474     <https://www.djangoproject.com/weblog/2007/oct/26/security-fix/>.\n475     \"\"\"\n476     if lang_code:\n477         # If 'fr-ca' is not supported, try special fallback or language-only 'fr'.\n478         possible_lang_codes = [lang_code]\n479         try:\n480             possible_lang_codes.extend(LANG_INFO[lang_code]['fallback'])\n481         except KeyError:\n482             pass\n483         generic_lang_code = lang_code.split('-')[0]\n484         possible_lang_codes.append(generic_lang_code)\n485         supported_lang_codes = get_languages()\n486 \n487         for code in possible_lang_codes:\n488             if code in supported_lang_codes and check_for_language(code):\n489                 return code\n490         if not strict:\n491             # if fr-fr is not supported, try fr-ca.\n492             for supported_code in supported_lang_codes:\n493                 if supported_code.startswith(generic_lang_code + '-'):\n494                     return supported_code\n495     raise LookupError(lang_code)\n",
        "intended_behavior": "The method `get_supported_language_variant` should be modified to correctly handle language codes that include both a language variation (e.g., `zh-Hant`) and a regional designation (e.g., `HK` in `zh-Hant-HK`). Specifically, when presented with a specific language code that includes a script and region (like `zh-Hant-HK`), the method should prioritize this specific language code over its more generic variant (`zh-hans` or `zh-hant`) if both are present in the `settings.LANGUAGES`. The preservation of existing functionality is crucial, meaning the method still needs to perform its current function of selecting the best match for the provided language code from the list of available languages. This includes handling fallbacks and generic language codes as it currently does but with added logic to properly assess and prioritize language codes that offer a more precise match due to the inclusion of regional codes."
    }
]