[
    {
        "rel_file_path": "sphinx/directives/code.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sphinx-doc__sphinx/setup_sphinx-doc__sphinx__5.0/sphinx/directives/code.py",
        "start": 399,
        "end": 448,
        "class_name": "LiteralInclude",
        "method_name": "run",
        "code": "399     def run(self) -> List[Node]:\n400         document = self.state.document\n401         if not document.settings.file_insertion_enabled:\n402             return [document.reporter.warning('File insertion disabled',\n403                                               line=self.lineno)]\n404         # convert options['diff'] to absolute path\n405         if 'diff' in self.options:\n406             _, path = self.env.relfn2path(self.options['diff'])\n407             self.options['diff'] = path\n408 \n409         try:\n410             location = self.state_machine.get_source_and_line(self.lineno)\n411             rel_filename, filename = self.env.relfn2path(self.arguments[0])\n412             self.env.note_dependency(rel_filename)\n413 \n414             reader = LiteralIncludeReader(filename, self.options, self.config)\n415             text, lines = reader.read(location=location)\n416 \n417             retnode: Element = nodes.literal_block(text, text, source=filename)\n418             retnode['force'] = 'force' in self.options\n419             self.set_source_info(retnode)\n420             if self.options.get('diff'):  # if diff is set, set udiff\n421                 retnode['language'] = 'udiff'\n422             elif 'language' in self.options:\n423                 retnode['language'] = self.options['language']\n424             if ('linenos' in self.options or 'lineno-start' in self.options or\n425                     'lineno-match' in self.options):\n426                 retnode['linenos'] = True\n427             retnode['classes'] += self.options.get('class', [])\n428             extra_args = retnode['highlight_args'] = {}\n429             if 'emphasize-lines' in self.options:\n430                 hl_lines = parselinenos(self.options['emphasize-lines'], lines)\n431                 if any(i >= lines for i in hl_lines):\n432                     logger.warning(__('line number spec is out of range(1-%d): %r') %\n433                                    (lines, self.options['emphasize-lines']),\n434                                    location=location)\n435                 extra_args['hl_lines'] = [x + 1 for x in hl_lines if x < lines]\n436             extra_args['linenostart'] = reader.lineno_start\n437 \n438             if 'caption' in self.options:\n439                 caption = self.options['caption'] or self.arguments[0]\n440                 retnode = container_wrapper(self, retnode, caption)\n441 \n442             # retnode will be note_implicit_target that is linked from caption and numref.\n443             # when options['name'] is provided, it should be primary ID.\n444             self.add_name(retnode)\n445 \n446             return [retnode]\n447         except Exception as exc:\n448             return [document.reporter.warning(exc, line=self.lineno)]\n",
        "intended_behavior": "The `run` method of the `LiteralInclude` directive should be adjusted to ensure that when `prepend` or `append` options are used, the leading whitespace of these strings is preserved and correctly applies to the included content. This means improving how this method processes the `prepend` and `append` options to maintain the original formatting intentions. Specifically, it involves enhancing the logic that handles the inclusion of external content to ensure that any added `prepend` or `append` text aligns correctly with the intended code block indentation, without stripping or misinterpreting leading whitespace."
    },
    {
        "rel_file_path": "sphinx/directives/code.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sphinx-doc__sphinx/setup_sphinx-doc__sphinx__5.0/sphinx/directives/code.py",
        "start": 364,
        "end": 448,
        "class_name": "LiteralInclude",
        "method_name": null,
        "code": "364 class LiteralInclude(SphinxDirective):\n365     \"\"\"\n366     Like ``.. include:: :literal:``, but only warns if the include file is\n367     not found, and does not raise errors.  Also has several options for\n368     selecting what to include.\n369     \"\"\"\n370 \n371     has_content = False\n372     required_arguments = 1\n373     optional_arguments = 0\n374     final_argument_whitespace = True\n375     option_spec: OptionSpec = {\n376         'dedent': optional_int,\n377         'linenos': directives.flag,\n378         'lineno-start': int,\n379         'lineno-match': directives.flag,\n380         'tab-width': int,\n381         'language': directives.unchanged_required,\n382         'force': directives.flag,\n383         'encoding': directives.encoding,\n384         'pyobject': directives.unchanged_required,\n385         'lines': directives.unchanged_required,\n386         'start-after': directives.unchanged_required,\n387         'end-before': directives.unchanged_required,\n388         'start-at': directives.unchanged_required,\n389         'end-at': directives.unchanged_required,\n390         'prepend': directives.unchanged_required,\n391         'append': directives.unchanged_required,\n392         'emphasize-lines': directives.unchanged_required,\n393         'caption': directives.unchanged,\n394         'class': directives.class_option,\n395         'name': directives.unchanged,\n396         'diff': directives.unchanged_required,\n397     }\n398 \n399     def run(self) -> List[Node]:\n400         document = self.state.document\n401         if not document.settings.file_insertion_enabled:\n402             return [document.reporter.warning('File insertion disabled',\n403                                               line=self.lineno)]\n404         # convert options['diff'] to absolute path\n405         if 'diff' in self.options:\n406             _, path = self.env.relfn2path(self.options['diff'])\n407             self.options['diff'] = path\n408 \n409         try:\n410             location = self.state_machine.get_source_and_line(self.lineno)\n411             rel_filename, filename = self.env.relfn2path(self.arguments[0])\n412             self.env.note_dependency(rel_filename)\n413 \n414             reader = LiteralIncludeReader(filename, self.options, self.config)\n415             text, lines = reader.read(location=location)\n416 \n417             retnode: Element = nodes.literal_block(text, text, source=filename)\n418             retnode['force'] = 'force' in self.options\n419             self.set_source_info(retnode)\n420             if self.options.get('diff'):  # if diff is set, set udiff\n421                 retnode['language'] = 'udiff'\n422             elif 'language' in self.options:\n423                 retnode['language'] = self.options['language']\n424             if ('linenos' in self.options or 'lineno-start' in self.options or\n425                     'lineno-match' in self.options):\n426                 retnode['linenos'] = True\n427             retnode['classes'] += self.options.get('class', [])\n428             extra_args = retnode['highlight_args'] = {}\n429             if 'emphasize-lines' in self.options:\n430                 hl_lines = parselinenos(self.options['emphasize-lines'], lines)\n431                 if any(i >= lines for i in hl_lines):\n432                     logger.warning(__('line number spec is out of range(1-%d): %r') %\n433                                    (lines, self.options['emphasize-lines']),\n434                                    location=location)\n435                 extra_args['hl_lines'] = [x + 1 for x in hl_lines if x < lines]\n436             extra_args['linenostart'] = reader.lineno_start\n437 \n438             if 'caption' in self.options:\n439                 caption = self.options['caption'] or self.arguments[0]\n440                 retnode = container_wrapper(self, retnode, caption)\n441 \n442             # retnode will be note_implicit_target that is linked from caption and numref.\n443             # when options['name'] is provided, it should be primary ID.\n444             self.add_name(retnode)\n445 \n446             return [retnode]\n447         except Exception as exc:\n448             return [document.reporter.warning(exc, line=self.lineno)]\n",
        "intended_behavior": "This class provides additional context to the issue."
    }
]