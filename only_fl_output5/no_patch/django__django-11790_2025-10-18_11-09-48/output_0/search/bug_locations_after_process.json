[
    {
        "rel_file_path": "django/contrib/auth/forms.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.1/django/contrib/auth/forms.py",
        "start": 163,
        "end": 236,
        "class_name": "AuthenticationForm",
        "method_name": null,
        "code": "163 class AuthenticationForm(forms.Form):\n164     \"\"\"\n165     Base class for authenticating users. Extend this to get a form that accepts\n166     username/password logins.\n167     \"\"\"\n168     username = UsernameField(widget=forms.TextInput(attrs={'autofocus': True}))\n169     password = forms.CharField(\n170         label=_(\"Password\"),\n171         strip=False,\n172         widget=forms.PasswordInput(attrs={'autocomplete': 'current-password'}),\n173     )\n174 \n175     error_messages = {\n176         'invalid_login': _(\n177             \"Please enter a correct %(username)s and password. Note that both \"\n178             \"fields may be case-sensitive.\"\n179         ),\n180         'inactive': _(\"This account is inactive.\"),\n181     }\n182 \n183     def __init__(self, request=None, *args, **kwargs):\n184         \"\"\"\n185         The 'request' parameter is set for custom auth use by subclasses.\n186         The form data comes in via the standard 'data' kwarg.\n187         \"\"\"\n188         self.request = request\n189         self.user_cache = None\n190         super().__init__(*args, **kwargs)\n191 \n192         # Set the max length and label for the \"username\" field.\n193         self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n194         self.fields['username'].max_length = self.username_field.max_length or 254\n195         if self.fields['username'].label is None:\n196             self.fields['username'].label = capfirst(self.username_field.verbose_name)\n197 \n198     def clean(self):\n199         username = self.cleaned_data.get('username')\n200         password = self.cleaned_data.get('password')\n201 \n202         if username is not None and password:\n203             self.user_cache = authenticate(self.request, username=username, password=password)\n204             if self.user_cache is None:\n205                 raise self.get_invalid_login_error()\n206             else:\n207                 self.confirm_login_allowed(self.user_cache)\n208 \n209         return self.cleaned_data\n210 \n211     def confirm_login_allowed(self, user):\n212         \"\"\"\n213         Controls whether the given User may log in. This is a policy setting,\n214         independent of end-user authentication. This default behavior is to\n215         allow login by active users, and reject login by inactive users.\n216 \n217         If the given user cannot log in, this method should raise a\n218         ``forms.ValidationError``.\n219 \n220         If the given user may log in, this method should return None.\n221         \"\"\"\n222         if not user.is_active:\n223             raise forms.ValidationError(\n224                 self.error_messages['inactive'],\n225                 code='inactive',\n226             )\n227 \n228     def get_user(self):\n229         return self.user_cache\n230 \n231     def get_invalid_login_error(self):\n232         return forms.ValidationError(\n233             self.error_messages['invalid_login'],\n234             code='invalid_login',\n235             params={'username': self.username_field.verbose_name},\n236         )\n",
        "intended_behavior": "The `username` field within the `AuthenticationForm` should include a `maxlength` HTML attribute. The precise length should either reflect a sensible default that aligns with the underlying database field's maximum length (typically, a `username` might have a maximum length of 150 characters in many Django projects, but this should be confirmed against the project's specific user model) or be configurable via an attribute or setting to maintain flexibility.\n\nTo resolve the issue while preserving existing functionality, the definition of the `username` field in the `AuthenticationForm` class needs to be adjusted to include the `maxlength` attribute within the `attrs` dictionary of the `TextInput` widget. Considering the snippet from the search result, a line setting the `maxlength` could be added as follows:\n\nclass AuthenticationForm(forms.Form):\n    username = UsernameField(widget=forms.TextInput(attrs={'autofocus': True, 'maxlength': '150'}))  # assuming 150 is the intended maximum length\n\nThis change ensures the front-end HTML form will not allow more characters than specified to be entered into the `username` field, aligning with the intended behavior to prevent excessively long inputs, thereby improving usability and security. It directly addresses the regression by reintroducing an attribute that was once present but has been removed or omitted following recent changes."
    }
]