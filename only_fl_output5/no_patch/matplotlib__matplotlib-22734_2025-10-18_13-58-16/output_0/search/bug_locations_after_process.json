[
    {
        "rel_file_path": "lib/matplotlib/tri/tripcolor.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.5/lib/matplotlib/tri/tripcolor.py",
        "start": 9,
        "end": 158,
        "class_name": null,
        "method_name": "tripcolor",
        "code": "9 def tripcolor(ax, *args, alpha=1.0, norm=None, cmap=None, vmin=None,\n10               vmax=None, shading='flat', facecolors=None, **kwargs):\n11     \"\"\"\n12     Create a pseudocolor plot of an unstructured triangular grid.\n13 \n14     Call signatures::\n15 \n16       tripcolor(triangulation, C, *, ...)\n17       tripcolor(x, y, C, *, [triangles=triangles], [mask=mask], ...)\n18 \n19     The triangular grid can be specified either by passing a `.Triangulation`\n20     object as the first parameter, or by passing the points *x*, *y* and\n21     optionally the *triangles* and a *mask*. See `.Triangulation` for an\n22     explanation of these parameters.\n23 \n24     If neither of *triangulation* or *triangles* are given, the triangulation\n25     is calculated on the fly. In this case, it does not make sense to provide\n26     colors at the triangle faces via *C* or *facecolors* because there are\n27     multiple possible triangulations for a group of points and you don't know\n28     which triangles will be constructed.\n29 \n30     Parameters\n31     ----------\n32     triangulation : `.Triangulation`\n33         An already created triangular grid.\n34     x, y, triangles, mask\n35         Parameters defining the triangular grid. See `.Triangulation`.\n36         This is mutually exclusive with specifying *triangulation*.\n37     C : array-like\n38         The color values, either for the points or for the triangles. Which one\n39         is automatically inferred from the length of *C*, i.e. does it match\n40         the number of points or the number of triangles. If there are the same\n41         number of points and triangles in the triangulation it is assumed that\n42         color values are defined at points; to force the use of color values at\n43         triangles use the keyword argument ``facecolors=C`` instead of just\n44         ``C``.\n45         This parameter is position-only.\n46     facecolors : array-like, optional\n47         Can be used alternatively to *C* to specify colors at the triangle\n48         faces. This parameter takes precedence over *C*.\n49     shading : {'flat', 'gouraud'}, default: 'flat'\n50         If  'flat' and the color values *C* are defined at points, the color\n51         values used for each triangle are from the mean C of the triangle's\n52         three points. If *shading* is 'gouraud' then color values must be\n53         defined at points.\n54     other_parameters\n55         All other parameters are the same as for `~.Axes.pcolor`.\n56 \n57     Notes\n58     -----\n59     It is possible to pass the triangles positionally, i.e.\n60     ``tripcolor(x, y, triangles, C, ...)``. However, this is discouraged.\n61     For more clarity, pass *triangles* via keyword argument.\n62     \"\"\"\n63     _api.check_in_list(['flat', 'gouraud'], shading=shading)\n64 \n65     tri, args, kwargs = Triangulation.get_from_args_and_kwargs(*args, **kwargs)\n66 \n67     # Parse the color to be in one of (the other variable will be None):\n68     # - facecolors: if specified at the triangle faces\n69     # - point_colors: if specified at the points\n70     if facecolors is not None:\n71         if args:\n72             _api.warn_external(\n73                 \"Positional parameter C has no effect when the keyword \"\n74                 \"facecolors is given\")\n75         point_colors = None\n76         if len(facecolors) != len(tri.triangles):\n77             raise ValueError(\"The length of facecolors must match the number \"\n78                              \"of triangles\")\n79     else:\n80         # Color from positional parameter C\n81         if not args:\n82             raise ValueError(\n83                 \"Missing color parameter. Please pass C positionally or \"\n84                 \"facecolors via keyword\")\n85         elif len(args) > 1:\n86             _api.warn_external(\n87                 \"Additional positional parameters {args[1:]!r} are ignored\")\n88         C = np.asarray(args[0])\n89         if len(C) == len(tri.x):\n90             # having this before the len(tri.triangles) comparison gives\n91             # precedence to nodes if there are as many nodes as triangles\n92             point_colors = C\n93             facecolors = None\n94         elif len(C) == len(tri.triangles):\n95             point_colors = None\n96             facecolors = C\n97         else:\n98             raise ValueError('The length of C must match either the number '\n99                              'of points or the number of triangles')\n100 \n101     # Handling of linewidths, shading, edgecolors and antialiased as\n102     # in Axes.pcolor\n103     linewidths = (0.25,)\n104     if 'linewidth' in kwargs:\n105         kwargs['linewidths'] = kwargs.pop('linewidth')\n106     kwargs.setdefault('linewidths', linewidths)\n107 \n108     edgecolors = 'none'\n109     if 'edgecolor' in kwargs:\n110         kwargs['edgecolors'] = kwargs.pop('edgecolor')\n111     ec = kwargs.setdefault('edgecolors', edgecolors)\n112 \n113     if 'antialiased' in kwargs:\n114         kwargs['antialiaseds'] = kwargs.pop('antialiased')\n115     if 'antialiaseds' not in kwargs and ec.lower() == \"none\":\n116         kwargs['antialiaseds'] = False\n117 \n118     if shading == 'gouraud':\n119         if facecolors is not None:\n120             raise ValueError(\n121                 \"shading='gouraud' can only be used when the colors \"\n122                 \"are specified at the points, not at the faces.\")\n123         collection = TriMesh(tri, **kwargs)\n124         colors = point_colors\n125     else:\n126         # Vertices of triangles.\n127         maskedTris = tri.get_masked_triangles()\n128         verts = np.stack((tri.x[maskedTris], tri.y[maskedTris]), axis=-1)\n129 \n130         # Color values.\n131         if facecolors is None:\n132             # One color per triangle, the mean of the 3 vertex color values.\n133             colors = point_colors[maskedTris].mean(axis=1)\n134         elif tri.mask is not None:\n135             # Remove color values of masked triangles.\n136             colors = facecolors[~tri.mask]\n137         else:\n138             colors = facecolors\n139 \n140         collection = PolyCollection(verts, **kwargs)\n141 \n142     collection.set_alpha(alpha)\n143     collection.set_array(colors)\n144     _api.check_isinstance((Normalize, None), norm=norm)\n145     collection.set_cmap(cmap)\n146     collection.set_norm(norm)\n147     collection._scale_norm(norm, vmin, vmax)\n148     ax.grid(False)\n149 \n150     minx = tri.x.min()\n151     maxx = tri.x.max()\n152     miny = tri.y.min()\n153     maxy = tri.y.max()\n154     corners = (minx, miny), (maxx, maxy)\n155     ax.update_datalim(corners)\n156     ax.autoscale_view()\n157     ax.add_collection(collection)\n158     return collection\n",
        "intended_behavior": "The `tripcolor` function needs to ensure that the `clim` parameter (or `vmin` and `vmax` equivalents) is accurately considered and applied when creating the color plot. This involves proper handling of these values before the `_scale_norm` call to ensure they modify the color mapping limits as expected. Given the issue, the correction would likely involve ensuring that `vmin` and `vmax` are either directly extracted from `clim` (if passed) and used to set the color limits appropriately in the plotting process. The existing functionality around shading, triangulation, and color application must remain unaffected by this change. Properly forwarding `vmin` and `vmax` to `_scale_norm` ensures that color limits are accurately applied, addressing the bug where the color mapping does not respect the specified limits."
    },
    {
        "rel_file_path": "lib/matplotlib/cm.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.5/lib/matplotlib/cm.py",
        "start": 367,
        "end": 387,
        "class_name": "ScalarMappable",
        "method_name": "_scale_norm",
        "code": "367     def _scale_norm(self, norm, vmin, vmax):\n368         \"\"\"\n369         Helper for initial scaling.\n370 \n371         Used by public functions that create a ScalarMappable and support\n372         parameters *vmin*, *vmax* and *norm*. This makes sure that a *norm*\n373         will take precedence over *vmin*, *vmax*.\n374 \n375         Note that this method does not set the norm.\n376         \"\"\"\n377         if vmin is not None or vmax is not None:\n378             self.set_clim(vmin, vmax)\n379             if norm is not None:\n380                 raise ValueError(\n381                     \"Passing parameters norm and vmin/vmax simultaneously is \"\n382                     \"not supported. Please pass vmin/vmax directly to the \"\n383                     \"norm when creating it.\")\n384 \n385         # always resolve the autoscaling so we have concrete limits\n386         # rather than deferring to draw time.\n387         self.autoscale_None()\n",
        "intended_behavior": "While the `_scale_norm` method's main responsibility is ensuring that `norm` takes precedence over `vmin` and `vmax`, it may require a review to confirm it effectively supports the expected behavior when `vmin` and `vmax` are explicitly provided (via `clim` in `tripcolor`). The method should continue to enforce its rule that `norm` and `vmin`/`vmax` cannot be specified simultaneously unless it's part of the intended use-case with `clim`. The integrity of this error-checking mechanism should be maintained or adjusted only to allow correct application of `clim` without introducing regressions. This might involve adding a clearer pathway for `clim` values to be handled or ensuring that the interaction between `vmin`, `vmax`, and `norm` seamlessly accommodates the scenario described by the bug report."
    },
    {
        "rel_file_path": "lib/matplotlib/cm.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.5/lib/matplotlib/cm.py",
        "start": 334,
        "end": 619,
        "class_name": "ScalarMappable",
        "method_name": null,
        "code": "334 class ScalarMappable:\n335     \"\"\"\n336     A mixin class to map scalar data to RGBA.\n337 \n338     The ScalarMappable applies data normalization before returning RGBA colors\n339     from the given colormap.\n340     \"\"\"\n341 \n342     def __init__(self, norm=None, cmap=None):\n343         \"\"\"\n344 \n345         Parameters\n346         ----------\n347         norm : `matplotlib.colors.Normalize` (or subclass thereof)\n348             The normalizing object which scales data, typically into the\n349             interval ``[0, 1]``.\n350             If *None*, *norm* defaults to a *colors.Normalize* object which\n351             initializes its scaling based on the first data processed.\n352         cmap : str or `~matplotlib.colors.Colormap`\n353             The colormap used to map normalized data values to RGBA colors.\n354         \"\"\"\n355         self._A = None\n356         self._norm = None  # So that the setter knows we're initializing.\n357         self.set_norm(norm)  # The Normalize instance of this ScalarMappable.\n358         self.cmap = None  # So that the setter knows we're initializing.\n359         self.set_cmap(cmap)  # The Colormap instance of this ScalarMappable.\n360         #: The last colorbar associated with this ScalarMappable. May be None.\n361         self.colorbar = None\n362         self.callbacks = cbook.CallbackRegistry(signals=[\"changed\"])\n363 \n364     callbacksSM = _api.deprecated(\"3.5\", alternative=\"callbacks\")(\n365         property(lambda self: self.callbacks))\n366 \n367     def _scale_norm(self, norm, vmin, vmax):\n368         \"\"\"\n369         Helper for initial scaling.\n370 \n371         Used by public functions that create a ScalarMappable and support\n372         parameters *vmin*, *vmax* and *norm*. This makes sure that a *norm*\n373         will take precedence over *vmin*, *vmax*.\n374 \n375         Note that this method does not set the norm.\n376         \"\"\"\n377         if vmin is not None or vmax is not None:\n378             self.set_clim(vmin, vmax)\n379             if norm is not None:\n380                 raise ValueError(\n381                     \"Passing parameters norm and vmin/vmax simultaneously is \"\n382                     \"not supported. Please pass vmin/vmax directly to the \"\n383                     \"norm when creating it.\")\n384 \n385         # always resolve the autoscaling so we have concrete limits\n386         # rather than deferring to draw time.\n387         self.autoscale_None()\n388 \n389     def to_rgba(self, x, alpha=None, bytes=False, norm=True):\n390         \"\"\"\n391         Return a normalized rgba array corresponding to *x*.\n392 \n393         In the normal case, *x* is a 1D or 2D sequence of scalars, and\n394         the corresponding ndarray of rgba values will be returned,\n395         based on the norm and colormap set for this ScalarMappable.\n396 \n397         There is one special case, for handling images that are already\n398         rgb or rgba, such as might have been read from an image file.\n399         If *x* is an ndarray with 3 dimensions,\n400         and the last dimension is either 3 or 4, then it will be\n401         treated as an rgb or rgba array, and no mapping will be done.\n402         The array can be uint8, or it can be floating point with\n403         values in the 0-1 range; otherwise a ValueError will be raised.\n404         If it is a masked array, the mask will be ignored.\n405         If the last dimension is 3, the *alpha* kwarg (defaulting to 1)\n406         will be used to fill in the transparency.  If the last dimension\n407         is 4, the *alpha* kwarg is ignored; it does not\n408         replace the pre-existing alpha.  A ValueError will be raised\n409         if the third dimension is other than 3 or 4.\n410 \n411         In either case, if *bytes* is *False* (default), the rgba\n412         array will be floats in the 0-1 range; if it is *True*,\n413         the returned rgba array will be uint8 in the 0 to 255 range.\n414 \n415         If norm is False, no normalization of the input data is\n416         performed, and it is assumed to be in the range (0-1).\n417 \n418         \"\"\"\n419         # First check for special case, image input:\n420         try:\n421             if x.ndim == 3:\n422                 if x.shape[2] == 3:\n423                     if alpha is None:\n424                         alpha = 1\n425                     if x.dtype == np.uint8:\n426                         alpha = np.uint8(alpha * 255)\n427                     m, n = x.shape[:2]\n428                     xx = np.empty(shape=(m, n, 4), dtype=x.dtype)\n429                     xx[:, :, :3] = x\n430                     xx[:, :, 3] = alpha\n431                 elif x.shape[2] == 4:\n432                     xx = x\n433                 else:\n434                     raise ValueError(\"Third dimension must be 3 or 4\")\n435                 if xx.dtype.kind == 'f':\n436                     if norm and (xx.max() > 1 or xx.min() < 0):\n437                         raise ValueError(\"Floating point image RGB values \"\n438                                          \"must be in the 0..1 range.\")\n439                     if bytes:\n440                         xx = (xx * 255).astype(np.uint8)\n441                 elif xx.dtype == np.uint8:\n442                     if not bytes:\n443                         xx = xx.astype(np.float32) / 255\n444                 else:\n445                     raise ValueError(\"Image RGB array must be uint8 or \"\n446                                      \"floating point; found %s\" % xx.dtype)\n447                 return xx\n448         except AttributeError:\n449             # e.g., x is not an ndarray; so try mapping it\n450             pass\n451 \n452         # This is the normal case, mapping a scalar array:\n453         x = ma.asarray(x)\n454         if norm:\n455             x = self.norm(x)\n456         rgba = self.cmap(x, alpha=alpha, bytes=bytes)\n457         return rgba\n458 \n459     def set_array(self, A):\n460         \"\"\"\n461         Set the value array from array-like *A*.\n462 \n463         Parameters\n464         ----------\n465         A : array-like or None\n466             The values that are mapped to colors.\n467 \n468             The base class `.ScalarMappable` does not make any assumptions on\n469             the dimensionality and shape of the value array *A*.\n470         \"\"\"\n471         if A is None:\n472             self._A = None\n473             return\n474 \n475         A = cbook.safe_masked_invalid(A, copy=True)\n476         if not np.can_cast(A.dtype, float, \"same_kind\"):\n477             raise TypeError(f\"Image data of dtype {A.dtype} cannot be \"\n478                             \"converted to float\")\n479 \n480         self._A = A\n481 \n482     def get_array(self):\n483         \"\"\"\n484         Return the array of values, that are mapped to colors.\n485 \n486         The base class `.ScalarMappable` does not make any assumptions on\n487         the dimensionality and shape of the array.\n488         \"\"\"\n489         return self._A\n490 \n491     def get_cmap(self):\n492         \"\"\"Return the `.Colormap` instance.\"\"\"\n493         return self.cmap\n494 \n495     def get_clim(self):\n496         \"\"\"\n497         Return the values (min, max) that are mapped to the colormap limits.\n498         \"\"\"\n499         return self.norm.vmin, self.norm.vmax\n500 \n501     def set_clim(self, vmin=None, vmax=None):\n502         \"\"\"\n503         Set the norm limits for image scaling.\n504 \n505         Parameters\n506         ----------\n507         vmin, vmax : float\n508              The limits.\n509 \n510              The limits may also be passed as a tuple (*vmin*, *vmax*) as a\n511              single positional argument.\n512 \n513              .. ACCEPTS: (vmin: float, vmax: float)\n514         \"\"\"\n515         # If the norm's limits are updated self.changed() will be called\n516         # through the callbacks attached to the norm\n517         if vmax is None:\n518             try:\n519                 vmin, vmax = vmin\n520             except (TypeError, ValueError):\n521                 pass\n522         if vmin is not None:\n523             self.norm.vmin = colors._sanitize_extrema(vmin)\n524         if vmax is not None:\n525             self.norm.vmax = colors._sanitize_extrema(vmax)\n526 \n527     def get_alpha(self):\n528         \"\"\"\n529         Returns\n530         -------\n531         float\n532             Always returns 1.\n533         \"\"\"\n534         # This method is intended to be overridden by Artist sub-classes\n535         return 1.\n536 \n537     def set_cmap(self, cmap):\n538         \"\"\"\n539         Set the colormap for luminance data.\n540 \n541         Parameters\n542         ----------\n543         cmap : `.Colormap` or str or None\n544         \"\"\"\n545         in_init = self.cmap is None\n546         cmap = get_cmap(cmap)\n547         self.cmap = cmap\n548         if not in_init:\n549             self.changed()  # Things are not set up properly yet.\n550 \n551     @property\n552     def norm(self):\n553         return self._norm\n554 \n555     @norm.setter\n556     def norm(self, norm):\n557         _api.check_isinstance((colors.Normalize, None), norm=norm)\n558         if norm is None:\n559             norm = colors.Normalize()\n560 \n561         if norm is self.norm:\n562             # We aren't updating anything\n563             return\n564 \n565         in_init = self.norm is None\n566         # Remove the current callback and connect to the new one\n567         if not in_init:\n568             self.norm.callbacks.disconnect(self._id_norm)\n569         self._norm = norm\n570         self._id_norm = self.norm.callbacks.connect('changed',\n571                                                     self.changed)\n572         if not in_init:\n573             self.changed()\n574 \n575     def set_norm(self, norm):\n576         \"\"\"\n577         Set the normalization instance.\n578 \n579         Parameters\n580         ----------\n581         norm : `.Normalize` or None\n582 \n583         Notes\n584         -----\n585         If there are any colorbars using the mappable for this norm, setting\n586         the norm of the mappable will reset the norm, locator, and formatters\n587         on the colorbar to default.\n588         \"\"\"\n589         self.norm = norm\n590 \n591     def autoscale(self):\n592         \"\"\"\n593         Autoscale the scalar limits on the norm instance using the\n594         current array\n595         \"\"\"\n596         if self._A is None:\n597             raise TypeError('You must first set_array for mappable')\n598         # If the norm's limits are updated self.changed() will be called\n599         # through the callbacks attached to the norm\n600         self.norm.autoscale(self._A)\n601 \n602     def autoscale_None(self):\n603         \"\"\"\n604         Autoscale the scalar limits on the norm instance using the\n605         current array, changing only limits that are None\n606         \"\"\"\n607         if self._A is None:\n608             raise TypeError('You must first set_array for mappable')\n609         # If the norm's limits are updated self.changed() will be called\n610         # through the callbacks attached to the norm\n611         self.norm.autoscale_None(self._A)\n612 \n613     def changed(self):\n614         \"\"\"\n615         Call this whenever the mappable is changed to notify all the\n616         callbackSM listeners to the 'changed' signal.\n617         \"\"\"\n618         self.callbacks.process('changed', self)\n619         self.stale = True\n",
        "intended_behavior": "This class provides additional context to the issue."
    }
]