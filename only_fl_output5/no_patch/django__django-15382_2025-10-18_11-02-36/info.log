2025-10-18 11:02:36.387 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-18 11:02:41.196 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=178, output_tokens=13, cost=0.002170
2025-10-18 11:02:54.627 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=358, output_tokens=599, cost=0.021550
2025-10-18 11:02:55.749 | INFO     | registered non reproducing test 0
2025-10-18 11:03:09.469 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1732, output_tokens=650, cost=0.036820
2025-10-18 11:03:10.591 | INFO     | registered non reproducing test 1
2025-10-18 11:03:25.666 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1760, output_tokens=683, cost=0.038090
2025-10-18 11:03:26.771 | INFO     | registered non reproducing test 2
2025-10-18 11:03:26.771 | WARNING  | Failed to write a reproducer test; skipping reproducer tracing
2025-10-18 11:03:26.777 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 11:03:37.836 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=483, output_tokens=396, cost=0.016710
2025-10-18 11:03:37.845 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 11:03:40.029 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=750, output_tokens=51, cost=0.009030
2025-10-18 11:03:40.030 | DEBUG    | Extracted a valid json.
2025-10-18 11:03:40.030 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_class(\"Exists\")",
        "search_method(\"filter\")",
        "search_code(\"EmptyResultSet\")",
        "search_code(\"#33018\")"
    ],
    "bug_locations": []
}
2025-10-18 11:03:40.112 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-18 11:03:40.113 | DEBUG    | <Agent search> Analyzing search results.
2025-10-18 11:03:57.668 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1332, output_tokens=838, cost=0.038460
2025-10-18 11:03:57.676 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 11:04:07.078 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2386, output_tokens=431, cost=0.036790
2025-10-18 11:04:07.086 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 11:04:15.017 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=785, output_tokens=309, cost=0.017120
2025-10-18 11:04:15.018 | DEBUG    | Extracted a valid json.
2025-10-18 11:04:15.018 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations": [
        {
            "file": "django/db/models/expressions.py",
            "class": "Exists",
            "method": "as_sql",
            "intended_behavior": "The `as_sql` method within the `Exists` class should ensure the preservation of the WHERE clause in the query, even when the subquery is empty or results in an `EmptyResultSet`. This might involve inspecting how the `EmptyResultSet` is used or generated within this method and ensuring that the existence of conditions outside of the `Exists` clause (e.g., `name='test'`) still results in their inclusion in the final compiled SQL query. The method might need to explicitly handle cases where the queryset is known to be empty in such a way that it doesn't lead to the complete omission of other valid query parts."
        },
        {
            "file": "django/db/models/sql/compiler.py",
            "class": "",
            "method": "Relevant methods handling `EmptyResultSet`",
            "intended_behavior": "In methods within `django/db/models/sql/compiler.py` that handle the `EmptyResultSet` exception, there should be a review and potential adjustment to ensure that catching this exception does not lead to inadvertently dropping the entire WHERE block from the query. It's possible that optimizations or early return patterns in this file assume no need for further query construction upon encountering an `EmptyResultSet`, without considering other accompanying filter conditions that remain valid."
        }
    ]
}
2025-10-18 11:04:15.023 | DEBUG    | Found override of as_sql in Subquery
2025-10-18 11:04:15.023 | ERROR    | SearchBackend.search_method_in_class() missing 1 required positional argument: 'class_name'
Traceback (most recent call last):

  File "/home/kimnal0/auto-code-rover/app/main.py", line 656, in <module>
    main()
    └ <function main at 0x761e6b526c00>

  File "/home/kimnal0/auto-code-rover/app/main.py", line 120, in main
    run_task_groups(groups, num_processes, organize_output=True)
    │               │       └ 1
    │               └ {'setup_astropy__astropy__4.3': [<app.raw_tasks.RawSweTask object at 0x761d78dc37d0>, <app.raw_tasks.RawSweTask object at 0x7...
    └ <function run_task_groups at 0x761d7b11a3e0>

  File "/home/kimnal0/auto-code-rover/app/main.py", line 396, in run_task_groups
    run_tasks_serial(all_tasks)
    │                └ [<app.raw_tasks.RawSweTask object at 0x761d78dc37d0>, <app.raw_tasks.RawSweTask object at 0x761d78dc3800>, <app.raw_tasks.Raw...
    └ <function run_tasks_serial at 0x761d7b11a480>

  File "/home/kimnal0/auto-code-rover/app/main.py", line 414, in run_tasks_serial
    run_task_in_subprocess(task)
    │                      └ <app.raw_tasks.RawSweTask object at 0x761d78d3b170>
    └ <function run_task_in_subprocess at 0x761d7b11a660>

  File "/home/kimnal0/auto-code-rover/app/main.py", line 462, in run_task_in_subprocess
    executor.submit(run_raw_task, task)
    │        │      │             └ <app.raw_tasks.RawSweTask object at 0x761d78d3b170>
    │        │      └ <function run_raw_task at 0x761d7b11a700>
    │        └ <function ProcessPoolExecutor.submit at 0x761e6ae72020>
    └ <concurrent.futures.process.ProcessPoolExecutor object at 0x761d7b1d56d0>

  File "/home/kimnal0/miniconda3/envs/auto-code-rover/lib/python3.12/concurrent/futures/process.py", line 831, in submit
    self._start_executor_manager_thread()
    │    └ <function ProcessPoolExecutor._start_executor_manager_thread at 0x761e6ae71da0>
    └ <concurrent.futures.process.ProcessPoolExecutor object at 0x761d7b1d56d0>
  File "/home/kimnal0/miniconda3/envs/auto-code-rover/lib/python3.12/concurrent/futures/process.py", line 770, in _start_executor_manager_thread
    self._launch_processes()
    │    └ <function ProcessPoolExecutor._launch_processes at 0x761e6ae71ee0>
    └ <concurrent.futures.process.ProcessPoolExecutor object at 0x761d7b1d56d0>
  File "/home/kimnal0/miniconda3/envs/auto-code-rover/lib/python3.12/concurrent/futures/process.py", line 797, in _launch_processes
    self._spawn_process()
    │    └ <function ProcessPoolExecutor._spawn_process at 0x761e6ae71f80>
    └ <concurrent.futures.process.ProcessPoolExecutor object at 0x761d7b1d56d0>
  File "/home/kimnal0/miniconda3/envs/auto-code-rover/lib/python3.12/concurrent/futures/process.py", line 807, in _spawn_process
    p.start()
    │ └ <function BaseProcess.start at 0x761e6b02cea0>
    └ <ForkProcess name='ForkProcess-71' parent=497161 started>
  File "/home/kimnal0/miniconda3/envs/auto-code-rover/lib/python3.12/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
    │    │        │    │      └ <ForkProcess name='ForkProcess-71' parent=497161 started>
    │    │        │    └ <staticmethod(<function ForkProcess._Popen at 0x761e6b09e0c0>)>
    │    │        └ <ForkProcess name='ForkProcess-71' parent=497161 started>
    │    └ None
    └ <ForkProcess name='ForkProcess-71' parent=497161 started>
  File "/home/kimnal0/miniconda3/envs/auto-code-rover/lib/python3.12/multiprocessing/context.py", line 282, in _Popen
    return Popen(process_obj)
           │     └ <ForkProcess name='ForkProcess-71' parent=497161 started>
           └ <class 'multiprocessing.popen_fork.Popen'>
  File "/home/kimnal0/miniconda3/envs/auto-code-rover/lib/python3.12/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
    │    │       └ <ForkProcess name='ForkProcess-71' parent=497161 started>
    │    └ <function Popen._launch at 0x761d7911b7e0>
    └ <multiprocessing.popen_fork.Popen object at 0x761d7a57e630>
  File "/home/kimnal0/miniconda3/envs/auto-code-rover/lib/python3.12/multiprocessing/popen_fork.py", line 71, in _launch
    code = process_obj._bootstrap(parent_sentinel=child_r)
           │           │                          └ 13
           │           └ <function BaseProcess._bootstrap at 0x761e6b02d8a0>
           └ <ForkProcess name='ForkProcess-71' parent=497161 started>
  File "/home/kimnal0/miniconda3/envs/auto-code-rover/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap
    self.run()
    │    └ <function BaseProcess.run at 0x761e6b02ce00>
    └ <ForkProcess name='ForkProcess-71' parent=497161 started>
  File "/home/kimnal0/miniconda3/envs/auto-code-rover/lib/python3.12/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
    │    │        │    │        │    └ {}
    │    │        │    │        └ <ForkProcess name='ForkProcess-71' parent=497161 started>
    │    │        │    └ (<concurrent.futures.process._SafeQueue object at 0x761d795c7e30>, <multiprocessing.queues.SimpleQueue object at 0x761d795c4c...
    │    │        └ <ForkProcess name='ForkProcess-71' parent=497161 started>
    │    └ <function _process_worker at 0x761e6ae711c0>
    └ <ForkProcess name='ForkProcess-71' parent=497161 started>
  File "/home/kimnal0/miniconda3/envs/auto-code-rover/lib/python3.12/concurrent/futures/process.py", line 263, in _process_worker
    r = call_item.fn(*call_item.args, **call_item.kwargs)
        │         │   │         │       │         └ {}
        │         │   │         │       └ <concurrent.futures.process._CallItem object at 0x761d7b442db0>
        │         │   │         └ (<app.raw_tasks.RawSweTask object at 0x761d7a57e720>,)
        │         │   └ <concurrent.futures.process._CallItem object at 0x761d7b442db0>
        │         └ <function run_raw_task at 0x761d7b11a700>
        └ <concurrent.futures.process._CallItem object at 0x761d7b442db0>

  File "/home/kimnal0/auto-code-rover/app/main.py", line 494, in run_raw_task
    run_ok = do_inference(task.to_task(), task_output_dir)
             │            │    │          └ '/home/kimnal0/auto-code-rover/only_fl_output5/django__django-15382_2025-10-18_11-02-36'
             │            │    └ <function RawSweTask.to_task at 0x761d7b1196c0>
             │            └ <app.raw_tasks.RawSweTask object at 0x761d7a57e720>
             └ <function do_inference at 0x761d7b11a8e0>

  File "/home/kimnal0/auto-code-rover/app/main.py", line 590, in do_inference
    run_ok = inference.run_one_task(
             │         └ <function run_one_task at 0x761d7b228400>
             └ <module 'app.inference' from '/home/kimnal0/auto-code-rover/app/inference.py'>

  File "/home/kimnal0/auto-code-rover/app/inference.py", line 128, in run_one_task
    if _run_one_task(str(out_dir), api_manager, task.get_issue_statement()):
       │                 │         │            │    └ <function SweTask.get_issue_statement at 0x761d7b9b84a0>
       │                 │         │            └ SweTask(task_id='django__django-15382', problem_statement="filter on exists-subquery with empty queryset removes whole WHERE ...
       │                 │         └ <app.manage.ProjectApiManager object at 0x761d7b21d610>
       │                 └ Path('/home/kimnal0/auto-code-rover/only_fl_output5/django__django-15382_2025-10-18_11-02-36/output_0')
       └ <function _run_one_task at 0x761d7b2298a0>

  File "/home/kimnal0/auto-code-rover/app/inference.py", line 303, in _run_one_task
    bug_locs, search_msg_thread = api_manager.search_manager.search_iterative(
                                  │           │              └ <function SearchManager.search_iterative at 0x761d7b431bc0>
                                  │           └ <app.search.search_manage.SearchManager object at 0x761d795c7ec0>
                                  └ <app.manage.ProjectApiManager object at 0x761d7b21d610>

  File "/home/kimnal0/auto-code-rover/app/search/search_manage.py", line 125, in search_iterative
    new_bug_locations.extend(self.backend.get_bug_loc_snippets_new(loc))
    │                 │      │    │       │                        └ {'file': 'django/db/models/expressions.py', 'class': 'Exists', 'method': 'as_sql', 'intended_behavior': "The `as_sql` method ...
    │                 │      │    │       └ <function SearchBackend.get_bug_loc_snippets_new at 0x761d7b4318a0>
    │                 │      │    └ <app.search.search_backend.SearchBackend object at 0x761d7b6a3170>
    │                 │      └ <app.search.search_manage.SearchManager object at 0x761d795c7ec0>
    │                 └ <method 'extend' of 'list' objects>
    └ []

  File "/home/kimnal0/auto-code-rover/app/search/search_backend.py", line 825, in get_bug_loc_snippets_new
    self._get_inherited_methods(res.class_name, res.func_name)
    │    │                      │   │           │   └ 'as_sql'
    │    │                      │   │           └ SearchResult(file_path='/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__4.1/django/db/mo...
    │    │                      │   └ 'Exists'
    │    │                      └ SearchResult(file_path='/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__4.1/django/db/mo...
    │    └ <function SearchBackend._get_inherited_methods at 0x761d7b431800>
    └ <app.search.search_backend.SearchBackend object at 0x761d7b6a3170>

  File "/home/kimnal0/auto-code-rover/app/search/search_backend.py", line 748, in _get_inherited_methods
    output, search_res, call_ok = self.search_method_in_class(super_call)
                                  │    │                      └ {'class_name': 'Subquery', 'method_name': 'as_sql'}
                                  │    └ <function SearchBackend.search_method_in_class at 0x761d7b430f40>
                                  └ <app.search.search_backend.SearchBackend object at 0x761d7b6a3170>

> File "/home/kimnal0/auto-code-rover/app/utils.py", line 343, in wrapper
    return func(*args, **kwargs)
           │     │       └ {}
           │     └ (<app.search.search_backend.SearchBackend object at 0x761d7b6a3170>, {'class_name': 'Subquery', 'method_name': 'as_sql'})
           └ <function SearchBackend.search_method_in_class at 0x761d7b430ea0>

TypeError: SearchBackend.search_method_in_class() missing 1 required positional argument: 'class_name'
2025-10-18 11:04:15.039 | DEBUG    | Bug location extracted successfully: [<file>django/db/models/expressions.py</file>
<class>Exists</class>
<method>as_sql</method>
<code>
1212     def as_sql(self, compiler, connection, template=None, **extra_context):
1213         query = self.query.exists(using=connection.alias)
1214         sql, params = super().as_sql(
1215             compiler,
1216             connection,
1217             template=template,
1218             query=query,
1219             **extra_context,
1220         )
1221         if self.negated:
1222             sql = 'NOT {}'.format(sql)
1223         return sql, params

</code><intended_behavior>The `as_sql` method within the `Exists` class should ensure the preservation of the WHERE clause in the query, even when the subquery is empty or results in an `EmptyResultSet`. This might involve inspecting how the `EmptyResultSet` is used or generated within this method and ensuring that the existence of conditions outside of the `Exists` clause (e.g., `name='test'`) still results in their inclusion in the final compiled SQL query. The method might need to explicitly handle cases where the queryset is known to be empty in such a way that it doesn't lead to the complete omission of other valid query parts.</intended_behavior>, <file>django/db/models/expressions.py</file>
<class>Exists</class>
<method>None</method>
<code>
1199 class Exists(Subquery):
1200     template = 'EXISTS(%(subquery)s)'
1201     output_field = fields.BooleanField()
1202 
1203     def __init__(self, queryset, negated=False, **kwargs):
1204         self.negated = negated
1205         super().__init__(queryset, **kwargs)
1206 
1207     def __invert__(self):
1208         clone = self.copy()
1209         clone.negated = not self.negated
1210         return clone
1211 
1212     def as_sql(self, compiler, connection, template=None, **extra_context):
1213         query = self.query.exists(using=connection.alias)
1214         sql, params = super().as_sql(
1215             compiler,
1216             connection,
1217             template=template,
1218             query=query,
1219             **extra_context,
1220         )
1221         if self.negated:
1222             sql = 'NOT {}'.format(sql)
1223         return sql, params
1224 
1225     def select_format(self, compiler, sql, params):
1226         # Wrap EXISTS() with a CASE WHEN expression if a database backend
1227         # (e.g. Oracle) doesn't support boolean expression in SELECT or GROUP
1228         # BY list.
1229         if not compiler.connection.features.supports_boolean_expr_in_select_clause:
1230             sql = 'CASE WHEN {} THEN 1 ELSE 0 END'.format(sql)
1231         return sql, params

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>django/db/models/sql/compiler.py</file>
<class>None</class>
<method>None</method>
<code>
1 import collections
2 import json
3 import re
4 from functools import partial
5 from itertools import chain
6 
7 from django.core.exceptions import EmptyResultSet, FieldError
8 from django.db import DatabaseError, NotSupportedError
9 from django.db.models.constants import LOOKUP_SEP
10 from django.db.models.expressions import F, OrderBy, RawSQL, Ref, Value
11 from django.db.models.functions import Cast, Random
12 from django.db.models.query_utils import select_related_descend
13 from django.db.models.sql.constants import (
14     CURSOR, GET_ITERATOR_CHUNK_SIZE, MULTI, NO_RESULTS, ORDER_DIR, SINGLE,
15 )
16 from django.db.models.sql.query import Query, get_order_dir
17 from django.db.transaction import TransactionManagementError
18 from django.utils.functional import cached_property
19 from django.utils.hashable import make_hashable
20 from django.utils.regex_helper import _lazy_re_compile
21 
22 
23 class SQLCompiler:
24     # Multiline ordering SQL clause may appear from RawSQL.
25     ordering_parts = _lazy_re_compile(
26         r'^(.*)\s(?:ASC|DESC).*',
27         re.MULTILINE | re.DOTALL,
28     )
29 
30     def __init__(self, query, connection, using, elide_empty=True):
31         self.query = query
32         self.connection = connection
33         self.using = using
34         # Some queries, e.g. coalesced aggregation, need to be executed even if
35         # they would return an empty result set.
36         self.elide_empty = elide_empty
37         self.quote_cache = {'*': '*'}
38         # The select, klass_info, and annotations are needed by QuerySet.iterator()
39         # these are set as a side-effect of executing the query. Note that we calculate
40         # separately a list of extra select columns needed for grammatical correctness
41         # of the query, but these columns are not included in self.select.
42         self.select = None
43         self.annotation_col_map = None
44         self.klass_info = None
45         self._meta_ordering = None
46 
47     def __repr__(self):
48         return (
49             f'<{self.__class__.__qualname__} '
50             f'model={self.query.model.__qualname__} '
51             f'connection={self.connection!r} using={self.using!r}>'
52         )
53 
54     def setup_query(self):
55         if all(self.query.alias_refcount[a] == 0 for a in self.query.alias_map):
56             self.query.get_initial_alias()
57         self.select, self.klass_info, self.annotation_col_map = self.get_select()
58         self.col_count = len(self.select)
59 
60     def pre_sql_setup(self):
61         """
62         Do any necessary class setup immediately prior to producing SQL. This
63         is for things that can't necessarily be done in __init__ because we
64         might not have all the pieces in place at that time.
65         """
66         self.setup_query()
67         order_by = self.get_order_by()
68         self.where, self.having = self.query.where.split_having()
69         extra_select = self.get_extra_select(order_by, self.select)
70         self.has_extra_select = bool(extra_select)
71         group_by = self.get_group_by(self.select + extra_select, order_by)
72         return extra_select, order_by, group_by
73 
74     def get_group_by(self, select, order_by):
75         """
76         Return a list of 2-tuples of form (sql, params).
77 
78         The logic of what exactly the GROUP BY clause contains is hard
79         to describe in other words than "if it passes the test suite,
80         then it is correct".
81         """
82         # Some examples:
83         #     SomeModel.objects.annotate(Count('somecol'))
84         #     GROUP BY: all fields of the model
85         #
86         #    SomeModel.objects.values('name').annotate(Count('somecol'))
87         #    GROUP BY: name
88         #
89         #    SomeModel.objects.annotate(Count('somecol')).values('name')
90         #    GROUP BY: all cols of the model
91         #
92         #    SomeModel.objects.values('name', 'pk').annotate(Count('somecol')).values('pk')
93         #    GROUP BY: name, pk
94         #
95         #    SomeModel.objects.values('name').annotate(Count('somecol')).values('pk')
96         #    GROUP BY: name, pk
97         #
98         # In fact, the self.query.group_by is the minimal set to GROUP BY. It
99         # can't be ever restricted to a smaller set, but additional columns in
100         # HAVING, ORDER BY, and SELECT clauses are added to it. Unfortunately
101         # the end result is that it is impossible to force the query to have
102         # a chosen GROUP BY clause - you can almost do this by using the form:
103         #     .values(*wanted_cols).annotate(AnAggregate())
104         # but any later annotations, extra selects, values calls that
105         # refer some column outside of the wanted_cols, order_by, or even
106         # filter calls can alter the GROUP BY clause.
107 
108         # The query.group_by is either None (no GROUP BY at all), True
109         # (group by select fields), or a list of expressions to be added
110         # to the group by.
111         if self.query.group_by is None:
112             return []
113         expressions = []
114         if self.query.group_by is not True:
115             # If the group by is set to a list (by .values() call most likely),
116             # then we need to add everything in it to the GROUP BY clause.
117             # Backwards compatibility hack for setting query.group_by. Remove
118             # when  we have public API way of forcing the GROUP BY clause.
119             # Converts string references to expressions.
120             for expr in self.query.group_by:
121                 if not hasattr(expr, 'as_sql'):
122                     expressions.append(self.query.resolve_ref(expr))
123                 else:
124                     expressions.append(expr)
125         # Note that even if the group_by is set, it is only the minimal
126         # set to group by. So, we need to add cols in select, order_by, and
127         # having into the select in any case.
128         ref_sources = {
129             expr.source for expr in expressions if isinstance(expr, Ref)
130         }
131         for expr, _, _ in select:
132             # Skip members of the select clause that are already included
133             # by reference.
134             if expr in ref_sources:
135                 continue
136             cols = expr.get_group_by_cols()
137             for col in cols:
138                 expressions.append(col)
139         if not self._meta_ordering:
140             for expr, (sql, params, is_ref) in order_by:
141                 # Skip references to the SELECT clause, as all expressions in
142                 # the SELECT clause are already part of the GROUP BY.
143                 if not is_ref:
144                     expressions.extend(expr.get_group_by_cols())
145         having_group_by = self.having.get_group_by_cols() if self.having else ()
146         for expr in having_group_by:
147             expressions.append(expr)
148         result = []
149         seen = set()
150         expressions = self.collapse_group_by(expressions, having_group_by)
151 
152         for expr in expressions:
153             sql, params = self.compile(expr)
154             sql, params = expr.select_format(self, sql, params)
155             params_hash = make_hashable(params)
156             if (sql, params_hash) not in seen:
157                 result.append((sql, params))
158                 seen.add((sql, params_hash))
159         return result
160 
161     def collapse_group_by(self, expressions, having):
162         # If the DB can group by primary key, then group by the primary key of
163         # query's main model. Note that for PostgreSQL the GROUP BY clause must
164         # include the primary key of every table, but for MySQL it is enough to
165         # have the main table's primary key.
166         if self.connection.features.allows_group_by_pk:
167             # Determine if the main model's primary key is in the query.
168             pk = None
169             for expr in expressions:
170                 # Is this a reference to query's base table primary key? If the
171                 # expression isn't a Col-like, then skip the expression.
172                 if (getattr(expr, 'target', None) == self.query.model._meta.pk and
173                         getattr(expr, 'alias', None) == self.query.base_table):
174                     pk = expr
175                     break
176             # If the main model's primary key is in the query, group by that
177             # field, HAVING expressions, and expressions associated with tables
178             # that don't have a primary key included in the grouped columns.
179             if pk:
180                 pk_aliases = {
181                     expr.alias for expr in expressions
182                     if hasattr(expr, 'target') and expr.target.primary_key
183                 }
184                 expressions = [pk] + [
185                     expr for expr in expressions
186                     if expr in having or (
187                         getattr(expr, 'alias', None) is not None and expr.alias not in pk_aliases
188                     )
189                 ]
190         elif self.connection.features.allows_group_by_selected_pks:
191             # Filter out all expressions associated with a table's primary key
192             # present in the grouped columns. This is done by identifying all
193             # tables that have their primary key included in the grouped
194             # columns and removing non-primary key columns referring to them.
195             # Unmanaged models are excluded because they could be representing
196             # database views on which the optimization might not be allowed.
197             pks = {
198                 expr for expr in expressions
199                 if (
200                     hasattr(expr, 'target') and
201                     expr.target.primary_key and
202                     self.connection.features.allows_group_by_selected_pks_on_model(expr.target.model)
203                 )
204             }
205             aliases = {expr.alias for expr in pks}
206             expressions = [
207                 expr for expr in expressions if expr in pks or getattr(expr, 'alias', None) not in aliases
208             ]
209         return expressions
210 
211     def get_select(self):
212         """
213         Return three values:
214         - a list of 3-tuples of (expression, (sql, params), alias)
215         - a klass_info structure,
216         - a dictionary of annotations
217 
218         The (sql, params) is what the expression will produce, and alias is the
219         "AS alias" for the column (possibly None).
220 
221         The klass_info structure contains the following information:
222         - The base model of the query.
223         - Which columns for that model are present in the query (by
224           position of the select clause).
225         - related_klass_infos: [f, klass_info] to descent into
226 
227         The annotations is a dictionary of {'attname': column position} values.
228         """
229         select = []
230         klass_info = None
231         annotations = {}
232         select_idx = 0
233         for alias, (sql, params) in self.query.extra_select.items():
234             annotations[alias] = select_idx
235             select.append((RawSQL(sql, params), alias))
236             select_idx += 1
237         assert not (self.query.select and self.query.default_cols)
238         if self.query.default_cols:
239             cols = self.get_default_columns()
240         else:
241             # self.query.select is a special case. These columns never go to
242             # any model.
243             cols = self.query.select
244         if cols:
245             select_list = []
246             for col in cols:
247                 select_list.append(select_idx)
248                 select.append((col, None))
249                 select_idx += 1
250             klass_info = {
251                 'model': self.query.model,
252                 'select_fields': select_list,
253             }
254         for alias, annotation in self.query.annotation_select.items():
255             annotations[alias] = select_idx
256             select.append((annotation, alias))
257             select_idx += 1
258 
259         if self.query.select_related:
260             related_klass_infos = self.get_related_selections(select)
261             klass_info['related_klass_infos'] = related_klass_infos
262 
263             def get_select_from_parent(klass_info):
264                 for ki in klass_info['related_klass_infos']:
265                     if ki['from_parent']:
266                         ki['select_fields'] = (klass_info['select_fields'] +
267                                                ki['select_fields'])
268                     get_select_from_parent(ki)
269             get_select_from_parent(klass_info)
270 
271         ret = []
272         for col, alias in select:
273             try:
274                 sql, params = self.compile(col)
275             except EmptyResultSet:
276                 empty_result_set_value = getattr(col, 'empty_result_set_value', NotImplemented)
277                 if empty_result_set_value is NotImplemented:
278                     # Select a predicate that's always False.
279                     sql, params = '0', ()
280                 else:
281                     sql, params = self.compile(Value(empty_result_set_value))
282             else:
283                 sql, params = col.select_format(self, sql, params)
284             ret.append((col, (sql, params), alias))
285         return ret, klass_info, annotations
286 
287     def _order_by_pairs(self):
288         if self.query.extra_order_by:
289             ordering = self.query.extra_order_by
290         elif not self.query.default_ordering:
291             ordering = self.query.order_by
292         elif self.query.order_by:
293             ordering = self.query.order_by
294         elif self.query.get_meta().ordering:
295             ordering = self.query.get_meta().ordering
296             self._meta_ordering = ordering
297         else:
298             ordering = []
299         if self.query.standard_ordering:
300             default_order, _ = ORDER_DIR['ASC']
301         else:
302             default_order, _ = ORDER_DIR['DESC']
303 
304         for field in ordering:
305             if hasattr(field, 'resolve_expression'):
306                 if isinstance(field, Value):
307                     # output_field must be resolved for constants.
308                     field = Cast(field, field.output_field)
309                 if not isinstance(field, OrderBy):
310                     field = field.asc()
311                 if not self.query.standard_ordering:
312                     field = field.copy()
313                     field.reverse_ordering()
314                 yield field, False
315                 continue
316             if field == '?':  # random
317                 yield OrderBy(Random()), False
318                 continue
319 
320             col, order = get_order_dir(field, default_order)
321             descending = order == 'DESC'
322 
323             if col in self.query.annotation_select:
324                 # Reference to expression in SELECT clause
325                 yield (
326                     OrderBy(
327                         Ref(col, self.query.annotation_select[col]),
328                         descending=descending,
329                     ),
330                     True,
331                 )
332                 continue
333             if col in self.query.annotations:
334                 # References to an expression which is masked out of the SELECT
335                 # clause.
336                 if self.query.combinator and self.select:
337                     # Don't use the resolved annotation because other
338                     # combinated queries might define it differently.
339                     expr = F(col)
340                 else:
341                     expr = self.query.annotations[col]
342                     if isinstance(expr, Value):
343                         # output_field must be resolved for constants.
344                         expr = Cast(expr, expr.output_field)
345                 yield OrderBy(expr, descending=descending), False
346                 continue
347 
348             if '.' in field:
349                 # This came in through an extra(order_by=...) addition. Pass it
350                 # on verbatim.
351                 table, col = col.split('.', 1)
352                 yield (
353                     OrderBy(
354                         RawSQL('%s.%s' % (self.quote_name_unless_alias(table), col), []),
355                         descending=descending,
356                     ),
357                     False,
358                 )
359                 continue
360 
361             if self.query.extra and col in self.query.extra:
362                 if col in self.query.extra_select:
363                     yield (
364                         OrderBy(Ref(col, RawSQL(*self.query.extra[col])), descending=descending),
365                         True,
366                     )
367                 else:
368                     yield (
369                         OrderBy(RawSQL(*self.query.extra[col]), descending=descending),
370                         False,
371                     )
372             else:
373                 if self.query.combinator and self.select:
374                     # Don't use the first model's field because other
375                     # combinated queries might define it differently.
376                     yield OrderBy(F(col), descending=descending), False
377                 else:
378                     # 'col' is of the form 'field' or 'field1__field2' or
379                     # '-field1__field2__field', etc.
380                     yield from self.find_ordering_name(
381                         field, self.query.get_meta(), default_order=default_order,
382                     )
383 
384     def get_order_by(self):
385         """
386         Return a list of 2-tuples of the form (expr, (sql, params, is_ref)) for
387         the ORDER BY clause.
388 
389         The order_by clause can alter the select clause (for example it can add
390         aliases to clauses that do not yet have one, or it can add totally new
391         select clauses).
392         """
393         result = []
394         seen = set()
395 
396         for expr, is_ref in self._order_by_pairs():
397             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)
398             if self.query.combinator and self.select:
399                 src = resolved.get_source_expressions()[0]
400                 expr_src = expr.get_source_expressions()[0]
401                 # Relabel order by columns to raw numbers if this is a combined
402                 # query; necessary since the columns can't be referenced by the
403                 # fully qualified name and the simple column names may collide.
404                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):
405                     if is_ref and col_alias == src.refs:
406                         src = src.source
407                     elif col_alias and not (
408                         isinstance(expr_src, F) and col_alias == expr_src.name
409                     ):
410                         continue
411                     if src == sel_expr:
412                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
413                         break
414                 else:
415                     if col_alias:
416                         raise DatabaseError('ORDER BY term does not match any column in the result set.')
417                     # Add column used in ORDER BY clause to the selected
418                     # columns and to each combined query.
419                     order_by_idx = len(self.query.select) + 1
420                     col_name = f'__orderbycol{order_by_idx}'
421                     for q in self.query.combined_queries:
422                         q.add_annotation(expr_src, col_name)
423                     self.query.add_select_col(resolved, col_name)
424                     resolved.set_source_expressions([RawSQL(f'{order_by_idx}', ())])
425             sql, params = self.compile(resolved)
426             # Don't add the same column twice, but the order direction is
427             # not taken into account so we strip it. When this entire method
428             # is refactored into expressions, then we can check each part as we
429             # generate it.
430             without_ordering = self.ordering_parts.search(sql)[1]
431             params_hash = make_hashable(params)
432             if (without_ordering, params_hash) in seen:
433                 continue
434             seen.add((without_ordering, params_hash))
435             result.append((resolved, (sql, params, is_ref)))
436         return result
437 
438     def get_extra_select(self, order_by, select):
439         extra_select = []
440         if self.query.distinct and not self.query.distinct_fields:
441             select_sql = [t[1] for t in select]
442             for expr, (sql, params, is_ref) in order_by:
443                 without_ordering = self.ordering_parts.search(sql)[1]
444                 if not is_ref and (without_ordering, params) not in select_sql:
445                     extra_select.append((expr, (without_ordering, params), None))
446         return extra_select
447 
448     def quote_name_unless_alias(self, name):
449         """
450         A wrapper around connection.ops.quote_name that doesn't quote aliases
451         for table names. This avoids problems with some SQL dialects that treat
452         quoted strings specially (e.g. PostgreSQL).
453         """
454         if name in self.quote_cache:
455             return self.quote_cache[name]
456         if ((name in self.query.alias_map and name not in self.query.table_map) or
457                 name in self.query.extra_select or (
458                     self.query.external_aliases.get(name) and name not in self.query.table_map)):
459             self.quote_cache[name] = name
460             return name
461         r = self.connection.ops.quote_name(name)
462         self.quote_cache[name] = r
463         return r
464 
465     def compile(self, node):
466         vendor_impl = getattr(node, 'as_' + self.connection.vendor, None)
467         if vendor_impl:
468             sql, params = vendor_impl(self, self.connection)
469         else:
470             sql, params = node.as_sql(self, self.connection)
471         return sql, params
472 
473     def get_combinator_sql(self, combinator, all):
474         features = self.connection.features
475         compilers = [
476             query.get_compiler(self.using, self.connection, self.elide_empty)
477             for query in self.query.combined_queries if not query.is_empty()
478         ]
479         if not features.supports_slicing_ordering_in_compound:
480             for query, compiler in zip(self.query.combined_queries, compilers):
481                 if query.low_mark or query.high_mark:
482                     raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')
483                 if compiler.get_order_by():
484                     raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')
485         parts = ()
486         for compiler in compilers:
487             try:
488                 # If the columns list is limited, then all combined queries
489                 # must have the same columns list. Set the selects defined on
490                 # the query on all combined queries, if not already set.
491                 if not compiler.query.values_select and self.query.values_select:
492                     compiler.query = compiler.query.clone()
493                     compiler.query.set_values((
494                         *self.query.extra_select,
495                         *self.query.values_select,
496                         *self.query.annotation_select,
497                     ))
498                 part_sql, part_args = compiler.as_sql()
499                 if compiler.query.combinator:
500                     # Wrap in a subquery if wrapping in parentheses isn't
501                     # supported.
502                     if not features.supports_parentheses_in_compound:
503                         part_sql = 'SELECT * FROM ({})'.format(part_sql)
504                     # Add parentheses when combining with compound query if not
505                     # already added for all compound queries.
506                     elif (
507                         self.query.subquery or
508                         not features.supports_slicing_ordering_in_compound
509                     ):
510                         part_sql = '({})'.format(part_sql)
511                 parts += ((part_sql, part_args),)
512             except EmptyResultSet:
513                 # Omit the empty queryset with UNION and with DIFFERENCE if the
514                 # first queryset is nonempty.
515                 if combinator == 'union' or (combinator == 'difference' and parts):
516                     continue
517                 raise
518         if not parts:
519             raise EmptyResultSet
520         combinator_sql = self.connection.ops.set_operators[combinator]
521         if all and combinator == 'union':
522             combinator_sql += ' ALL'
523         braces = '{}'
524         if not self.query.subquery and features.supports_slicing_ordering_in_compound:
525             braces = '({})'
526         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))
527         result = [' {} '.format(combinator_sql).join(sql_parts)]
528         params = []
529         for part in args_parts:
530             params.extend(part)
531         return result, params
532 
533     def as_sql(self, with_limits=True, with_col_aliases=False):
534         """
535         Create the SQL for this query. Return the SQL string and list of
536         parameters.
537 
538         If 'with_limits' is False, any limit/offset information is not included
539         in the query.
540         """
541         refcounts_before = self.query.alias_refcount.copy()
542         try:
543             extra_select, order_by, group_by = self.pre_sql_setup()
544             for_update_part = None
545             # Is a LIMIT/OFFSET clause needed?
546             with_limit_offset = with_limits and (self.query.high_mark is not None or self.query.low_mark)
547             combinator = self.query.combinator
548             features = self.connection.features
549             if combinator:
550                 if not getattr(features, 'supports_select_{}'.format(combinator)):
551                     raise NotSupportedError('{} is not supported on this database backend.'.format(combinator))
552                 result, params = self.get_combinator_sql(combinator, self.query.combinator_all)
553             else:
554                 distinct_fields, distinct_params = self.get_distinct()
555                 # This must come after 'select', 'ordering', and 'distinct'
556                 # (see docstring of get_from_clause() for details).
557                 from_, f_params = self.get_from_clause()
558                 try:
559                     where, w_params = self.compile(self.where) if self.where is not None else ('', [])
560                 except EmptyResultSet:
561                     if self.elide_empty:
562                         raise
563                     # Use a predicate that's always False.
564                     where, w_params = '0 = 1', []
565                 having, h_params = self.compile(self.having) if self.having is not None else ("", [])
566                 result = ['SELECT']
567                 params = []
568 
569                 if self.query.distinct:
570                     distinct_result, distinct_params = self.connection.ops.distinct_sql(
571                         distinct_fields,
572                         distinct_params,
573                     )
574                     result += distinct_result
575                     params += distinct_params
576 
577                 out_cols = []
578                 col_idx = 1
579                 for _, (s_sql, s_params), alias in self.select + extra_select:
580                     if alias:
581                         s_sql = '%s AS %s' % (s_sql, self.connection.ops.quote_name(alias))
582                     elif with_col_aliases:
583                         s_sql = '%s AS %s' % (
584                             s_sql,
585                             self.connection.ops.quote_name('col%d' % col_idx),
586                         )
587                         col_idx += 1
588                     params.extend(s_params)
589                     out_cols.append(s_sql)
590 
591                 result += [', '.join(out_cols), 'FROM', *from_]
592                 params.extend(f_params)
593 
594                 if self.query.select_for_update and self.connection.features.has_select_for_update:
595                     if self.connection.get_autocommit():
596                         raise TransactionManagementError('select_for_update cannot be used outside of a transaction.')
597 
598                     if with_limit_offset and not self.connection.features.supports_select_for_update_with_limit:
599                         raise NotSupportedError(
600                             'LIMIT/OFFSET is not supported with '
601                             'select_for_update on this database backend.'
602                         )
603                     nowait = self.query.select_for_update_nowait
604                     skip_locked = self.query.select_for_update_skip_locked
605                     of = self.query.select_for_update_of
606                     no_key = self.query.select_for_no_key_update
607                     # If it's a NOWAIT/SKIP LOCKED/OF/NO KEY query but the
608                     # backend doesn't support it, raise NotSupportedError to
609                     # prevent a possible deadlock.
610                     if nowait and not self.connection.features.has_select_for_update_nowait:
611                         raise NotSupportedError('NOWAIT is not supported on this database backend.')
612                     elif skip_locked and not self.connection.features.has_select_for_update_skip_locked:
613                         raise NotSupportedError('SKIP LOCKED is not supported on this database backend.')
614                     elif of and not self.connection.features.has_select_for_update_of:
615                         raise NotSupportedError('FOR UPDATE OF is not supported on this database backend.')
616                     elif no_key and not self.connection.features.has_select_for_no_key_update:
617                         raise NotSupportedError(
618                             'FOR NO KEY UPDATE is not supported on this '
619                             'database backend.'
620                         )
621                     for_update_part = self.connection.ops.for_update_sql(
622                         nowait=nowait,
623                         skip_locked=skip_locked,
624                         of=self.get_select_for_update_of_arguments(),
625                         no_key=no_key,
626                     )
627 
628                 if for_update_part and self.connection.features.for_update_after_from:
629                     result.append(for_update_part)
630 
631                 if where:
632                     result.append('WHERE %s' % where)
633                     params.extend(w_params)
634 
635                 grouping = []
636                 for g_sql, g_params in group_by:
637                     grouping.append(g_sql)
638                     params.extend(g_params)
639                 if grouping:
640                     if distinct_fields:
641                         raise NotImplementedError('annotate() + distinct(fields) is not implemented.')
642                     order_by = order_by or self.connection.ops.force_no_ordering()
643                     result.append('GROUP BY %s' % ', '.join(grouping))
644                     if self._meta_ordering:
645                         order_by = None
646                 if having:
647                     result.append('HAVING %s' % having)
648                     params.extend(h_params)
649 
650             if self.query.explain_info:
651                 result.insert(0, self.connection.ops.explain_query_prefix(
652                     self.query.explain_info.format,
653                     **self.query.explain_info.options
654                 ))
655 
656             if order_by:
657                 ordering = []
658                 for _, (o_sql, o_params, _) in order_by:
659                     ordering.append(o_sql)
660                     params.extend(o_params)
661                 result.append('ORDER BY %s' % ', '.join(ordering))
662 
663             if with_limit_offset:
664                 result.append(self.connection.ops.limit_offset_sql(self.query.low_mark, self.query.high_mark))
665 
666             if for_update_part and not self.connection.features.for_update_after_from:
667                 result.append(for_update_part)
668 
669             if self.query.subquery and extra_select:
670                 # If the query is used as a subquery, the extra selects would
671                 # result in more columns than the left-hand side expression is
672                 # expecting. This can happen when a subquery uses a combination
673                 # of order_by() and distinct(), forcing the ordering expressions
674                 # to be selected as well. Wrap the query in another subquery
675                 # to exclude extraneous selects.
676                 sub_selects = []
677                 sub_params = []
678                 for index, (select, _, alias) in enumerate(self.select, start=1):
679                     if not alias and with_col_aliases:
680                         alias = 'col%d' % index
681                     if alias:
682                         sub_selects.append("%s.%s" % (
683                             self.connection.ops.quote_name('subquery'),
684                             self.connection.ops.quote_name(alias),
685                         ))
686                     else:
687                         select_clone = select.relabeled_clone({select.alias: 'subquery'})
688                         subselect, subparams = select_clone.as_sql(self, self.connection)
689                         sub_selects.append(subselect)
690                         sub_params.extend(subparams)
691                 return 'SELECT %s FROM (%s) subquery' % (
692                     ', '.join(sub_selects),
693                     ' '.join(result),
694                 ), tuple(sub_params + params)
695 
696             return ' '.join(result), tuple(params)
697         finally:
698             # Finally do cleanup - get rid of the joins we created above.
699             self.query.reset_refcounts(refcounts_before)
700 
701     def get_default_columns(self, start_alias=None, opts=None, from_parent=None):
702         """
703         Compute the default columns for selecting every field in the base
704         model. Will sometimes be called to pull in related models (e.g. via
705         select_related), in which case "opts" and "start_alias" will be given
706         to provide a starting point for the traversal.
707 
708         Return a list of strings, quoted appropriately for use in SQL
709         directly, as well as a set of aliases used in the select statement (if
710         'as_pairs' is True, return a list of (alias, col_name) pairs instead
711         of strings as the first component and None as the second component).
712         """
713         result = []
714         if opts is None:
715             opts = self.query.get_meta()
716         only_load = self.deferred_to_columns()
717         start_alias = start_alias or self.query.get_initial_alias()
718         # The 'seen_models' is used to optimize checking the needed parent
719         # alias for a given field. This also includes None -> start_alias to
720         # be used by local fields.
721         seen_models = {None: start_alias}
722 
723         for field in opts.concrete_fields:
724             model = field.model._meta.concrete_model
725             # A proxy model will have a different model and concrete_model. We
726             # will assign None if the field belongs to this model.
727             if model == opts.model:
728                 model = None
729             if from_parent and model is not None and issubclass(
730                     from_parent._meta.concrete_model, model._meta.concrete_model):
731                 # Avoid loading data for already loaded parents.
732                 # We end up here in the case select_related() resolution
733                 # proceeds from parent model to child model. In that case the
734                 # parent model data is already present in the SELECT clause,
735                 # and we want to avoid reloading the same data again.
736                 continue
737             if field.model in only_load and field.attname not in only_load[field.model]:
738                 continue
739             alias = self.query.join_parent_model(opts, model, start_alias,
740                                                  seen_models)
741             column = field.get_col(alias)
742             result.append(column)
743         return result
744 
745     def get_distinct(self):
746         """
747         Return a quoted list of fields to use in DISTINCT ON part of the query.
748 
749         This method can alter the tables in the query, and thus it must be
750         called before get_from_clause().
751         """
752         result = []
753         params = []
754         opts = self.query.get_meta()
755 
756         for name in self.query.distinct_fields:
757             parts = name.split(LOOKUP_SEP)
758             _, targets, alias, joins, path, _, transform_function = self._setup_joins(parts, opts, None)
759             targets, alias, _ = self.query.trim_joins(targets, joins, path)
760             for target in targets:
761                 if name in self.query.annotation_select:
762                     result.append(self.connection.ops.quote_name(name))
763                 else:
764                     r, p = self.compile(transform_function(target, alias))
765                     result.append(r)
766                     params.append(p)
767         return result, params
768 
769     def find_ordering_name(self, name, opts, alias=None, default_order='ASC',
770                            already_seen=None):
771         """
772         Return the table alias (the name might be ambiguous, the alias will
773         not be) and column name for ordering by the given 'name' parameter.
774         The 'name' is of the form 'field1__field2__...__fieldN'.
775         """
776         name, order = get_order_dir(name, default_order)
777         descending = order == 'DESC'
778         pieces = name.split(LOOKUP_SEP)
779         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)
780 
781         # If we get to this point and the field is a relation to another model,
782         # append the default ordering for that model unless it is the pk
783         # shortcut or the attribute name of the field that is specified.
784         if (
785             field.is_relation and
786             opts.ordering and
787             getattr(field, 'attname', None) != pieces[-1] and
788             name != 'pk'
789         ):
790             # Firstly, avoid infinite loops.
791             already_seen = already_seen or set()
792             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)
793             if join_tuple in already_seen:
794                 raise FieldError('Infinite loop caused by ordering.')
795             already_seen.add(join_tuple)
796 
797             results = []
798             for item in opts.ordering:
799                 if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):
800                     item = item.desc() if descending else item.asc()
801                 if isinstance(item, OrderBy):
802                     results.append((item, False))
803                     continue
804                 results.extend(self.find_ordering_name(item, opts, alias,
805                                                        order, already_seen))
806             return results
807         targets, alias, _ = self.query.trim_joins(targets, joins, path)
808         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]
809 
810     def _setup_joins(self, pieces, opts, alias):
811         """
812         Helper method for get_order_by() and get_distinct().
813 
814         get_ordering() and get_distinct() must produce same target columns on
815         same input, as the prefixes of get_ordering() and get_distinct() must
816         match. Executing SQL where this is not true is an error.
817         """
818         alias = alias or self.query.get_initial_alias()
819         field, targets, opts, joins, path, transform_function = self.query.setup_joins(pieces, opts, alias)
820         alias = joins[-1]
821         return field, targets, alias, joins, path, opts, transform_function
822 
823     def get_from_clause(self):
824         """
825         Return a list of strings that are joined together to go after the
826         "FROM" part of the query, as well as a list any extra parameters that
827         need to be included. Subclasses, can override this to create a
828         from-clause via a "select".
829 
830         This should only be called after any SQL construction methods that
831         might change the tables that are needed. This means the select columns,
832         ordering, and distinct must be done first.
833         """
834         result = []
835         params = []
836         for alias in tuple(self.query.alias_map):
837             if not self.query.alias_refcount[alias]:
838                 continue
839             try:
840                 from_clause = self.query.alias_map[alias]
841             except KeyError:
842                 # Extra tables can end up in self.tables, but not in the
843                 # alias_map if they aren't in a join. That's OK. We skip them.
844                 continue
845             clause_sql, clause_params = self.compile(from_clause)
846             result.append(clause_sql)
847             params.extend(clause_params)
848         for t in self.query.extra_tables:
849             alias, _ = self.query.table_alias(t)
850             # Only add the alias if it's not already present (the table_alias()
851             # call increments the refcount, so an alias refcount of one means
852             # this is the only reference).
853             if alias not in self.query.alias_map or self.query.alias_refcount[alias] == 1:
854                 result.append(', %s' % self.quote_name_unless_alias(alias))
855         return result, params
856 
857     def get_related_selections(self, select, opts=None, root_alias=None, cur_depth=1,
858                                requested=None, restricted=None):
859         """
860         Fill in the information needed for a select_related query. The current
861         depth is measured as the number of connections away from the root model
862         (for example, cur_depth=1 means we are looking at models with direct
863         connections to the root model).
864         """
865         def _get_field_choices():
866             direct_choices = (f.name for f in opts.fields if f.is_relation)
867             reverse_choices = (
868                 f.field.related_query_name()
869                 for f in opts.related_objects if f.field.unique
870             )
871             return chain(direct_choices, reverse_choices, self.query._filtered_relations)
872 
873         related_klass_infos = []
874         if not restricted and cur_depth > self.query.max_depth:
875             # We've recursed far enough; bail out.
876             return related_klass_infos
877 
878         if not opts:
879             opts = self.query.get_meta()
880             root_alias = self.query.get_initial_alias()
881         only_load = self.query.get_loaded_field_names()
882 
883         # Setup for the case when only particular related fields should be
884         # included in the related selection.
885         fields_found = set()
886         if requested is None:
887             restricted = isinstance(self.query.select_related, dict)
888             if restricted:
889                 requested = self.query.select_related
890 
891         def get_related_klass_infos(klass_info, related_klass_infos):
892             klass_info['related_klass_infos'] = related_klass_infos
893 
894         for f in opts.fields:
895             field_model = f.model._meta.concrete_model
896             fields_found.add(f.name)
897 
898             if restricted:
899                 next = requested.get(f.name, {})
900                 if not f.is_relation:
901                     # If a non-related field is used like a relation,
902                     # or if a single non-relational field is given.
903                     if next or f.name in requested:
904                         raise FieldError(
905                             "Non-relational field given in select_related: '%s'. "
906                             "Choices are: %s" % (
907                                 f.name,
908                                 ", ".join(_get_field_choices()) or '(none)',
909                             )
910                         )
911             else:
912                 next = False
913 
914             if not select_related_descend(f, restricted, requested,
915                                           only_load.get(field_model)):
916                 continue
917             klass_info = {
918                 'model': f.remote_field.model,
919                 'field': f,
920                 'reverse': False,
921                 'local_setter': f.set_cached_value,
922                 'remote_setter': f.remote_field.set_cached_value if f.unique else lambda x, y: None,
923                 'from_parent': False,
924             }
925             related_klass_infos.append(klass_info)
926             select_fields = []
927             _, _, _, joins, _, _ = self.query.setup_joins(
928                 [f.name], opts, root_alias)
929             alias = joins[-1]
930             columns = self.get_default_columns(start_alias=alias, opts=f.remote_field.model._meta)
931             for col in columns:
932                 select_fields.append(len(select))
933                 select.append((col, None))
934             klass_info['select_fields'] = select_fields
935             next_klass_infos = self.get_related_selections(
936                 select, f.remote_field.model._meta, alias, cur_depth + 1, next, restricted)
937             get_related_klass_infos(klass_info, next_klass_infos)
938 
939         if restricted:
940             related_fields = [
941                 (o.field, o.related_model)
942                 for o in opts.related_objects
943                 if o.field.unique and not o.many_to_many
944             ]
945             for f, model in related_fields:
946                 if not select_related_descend(f, restricted, requested,
947                                               only_load.get(model), reverse=True):
948                     continue
949 
950                 related_field_name = f.related_query_name()
951                 fields_found.add(related_field_name)
952 
953                 join_info = self.query.setup_joins([related_field_name], opts, root_alias)
954                 alias = join_info.joins[-1]
955                 from_parent = issubclass(model, opts.model) and model is not opts.model
956                 klass_info = {
957                     'model': model,
958                     'field': f,
959                     'reverse': True,
960                     'local_setter': f.remote_field.set_cached_value,
961                     'remote_setter': f.set_cached_value,
962                     'from_parent': from_parent,
963                 }
964                 related_klass_infos.append(klass_info)
965                 select_fields = []
966                 columns = self.get_default_columns(
967                     start_alias=alias, opts=model._meta, from_parent=opts.model)
968                 for col in columns:
969                     select_fields.append(len(select))
970                     select.append((col, None))
971                 klass_info['select_fields'] = select_fields
972                 next = requested.get(f.related_query_name(), {})
973                 next_klass_infos = self.get_related_selections(
974                     select, model._meta, alias, cur_depth + 1,
975                     next, restricted)
976                 get_related_klass_infos(klass_info, next_klass_infos)
977 
978             def local_setter(obj, from_obj):
979                 # Set a reverse fk object when relation is non-empty.
980                 if from_obj:
981                     f.remote_field.set_cached_value(from_obj, obj)
982 
983             def remote_setter(name, obj, from_obj):
984                 setattr(from_obj, name, obj)
985 
986             for name in list(requested):
987                 # Filtered relations work only on the topmost level.
988                 if cur_depth > 1:
989                     break
990                 if name in self.query._filtered_relations:
991                     fields_found.add(name)
992                     f, _, join_opts, joins, _, _ = self.query.setup_joins([name], opts, root_alias)
993                     model = join_opts.model
994                     alias = joins[-1]
995                     from_parent = issubclass(model, opts.model) and model is not opts.model
996                     klass_info = {
997                         'model': model,
998                         'field': f,
999                         'reverse': True,
1000                         'local_setter': local_setter,
1001                         'remote_setter': partial(remote_setter, name),
1002                         'from_parent': from_parent,
1003                     }
1004                     related_klass_infos.append(klass_info)
1005                     select_fields = []
1006                     columns = self.get_default_columns(
1007                         start_alias=alias, opts=model._meta,
1008                         from_parent=opts.model,
1009                     )
1010                     for col in columns:
1011                         select_fields.append(len(select))
1012                         select.append((col, None))
1013                     klass_info['select_fields'] = select_fields
1014                     next_requested = requested.get(name, {})
1015                     next_klass_infos = self.get_related_selections(
1016                         select, opts=model._meta, root_alias=alias,
1017                         cur_depth=cur_depth + 1, requested=next_requested,
1018                         restricted=restricted,
1019                     )
1020                     get_related_klass_infos(klass_info, next_klass_infos)
1021             fields_not_found = set(requested).difference(fields_found)
1022             if fields_not_found:
1023                 invalid_fields = ("'%s'" % s for s in fields_not_found)
1024                 raise FieldError(
1025                     'Invalid field name(s) given in select_related: %s. '
1026                     'Choices are: %s' % (
1027                         ', '.join(invalid_fields),
1028                         ', '.join(_get_field_choices()) or '(none)',
1029                     )
1030                 )
1031         return related_klass_infos
1032 
1033     def get_select_for_update_of_arguments(self):
1034         """
1035         Return a quoted list of arguments for the SELECT FOR UPDATE OF part of
1036         the query.
1037         """
1038         def _get_parent_klass_info(klass_info):
1039             concrete_model = klass_info['model']._meta.concrete_model
1040             for parent_model, parent_link in concrete_model._meta.parents.items():
1041                 parent_list = parent_model._meta.get_parent_list()
1042                 yield {
1043                     'model': parent_model,
1044                     'field': parent_link,
1045                     'reverse': False,
1046                     'select_fields': [
1047                         select_index
1048                         for select_index in klass_info['select_fields']
1049                         # Selected columns from a model or its parents.
1050                         if (
1051                             self.select[select_index][0].target.model == parent_model or
1052                             self.select[select_index][0].target.model in parent_list
1053                         )
1054                     ],
1055                 }
1056 
1057         def _get_first_selected_col_from_model(klass_info):
1058             """
1059             Find the first selected column from a model. If it doesn't exist,
1060             don't lock a model.
1061 
1062             select_fields is filled recursively, so it also contains fields
1063             from the parent models.
1064             """
1065             concrete_model = klass_info['model']._meta.concrete_model
1066             for select_index in klass_info['select_fields']:
1067                 if self.select[select_index][0].target.model == concrete_model:
1068                     return self.select[select_index][0]
1069 
1070         def _get_field_choices():
1071             """Yield all allowed field paths in breadth-first search order."""
1072             queue = collections.deque([(None, self.klass_info)])
1073             while queue:
1074                 parent_path, klass_info = queue.popleft()
1075                 if parent_path is None:
1076                     path = []
1077                     yield 'self'
1078                 else:
1079                     field = klass_info['field']
1080                     if klass_info['reverse']:
1081                         field = field.remote_field
1082                     path = parent_path + [field.name]
1083                     yield LOOKUP_SEP.join(path)
1084                 queue.extend(
1085                     (path, klass_info)
1086                     for klass_info in _get_parent_klass_info(klass_info)
1087                 )
1088                 queue.extend(
1089                     (path, klass_info)
1090                     for klass_info in klass_info.get('related_klass_infos', [])
1091                 )
1092         if not self.klass_info:
1093             return []
1094         result = []
1095         invalid_names = []
1096         for name in self.query.select_for_update_of:
1097             klass_info = self.klass_info
1098             if name == 'self':
1099                 col = _get_first_selected_col_from_model(klass_info)
1100             else:
1101                 for part in name.split(LOOKUP_SEP):
1102                     klass_infos = (
1103                         *klass_info.get('related_klass_infos', []),
1104                         *_get_parent_klass_info(klass_info),
1105                     )
1106                     for related_klass_info in klass_infos:
1107                         field = related_klass_info['field']
1108                         if related_klass_info['reverse']:
1109                             field = field.remote_field
1110                         if field.name == part:
1111                             klass_info = related_klass_info
1112                             break
1113                     else:
1114                         klass_info = None
1115                         break
1116                 if klass_info is None:
1117                     invalid_names.append(name)
1118                     continue
1119                 col = _get_first_selected_col_from_model(klass_info)
1120             if col is not None:
1121                 if self.connection.features.select_for_update_of_column:
1122                     result.append(self.compile(col)[0])
1123                 else:
1124                     result.append(self.quote_name_unless_alias(col.alias))
1125         if invalid_names:
1126             raise FieldError(
1127                 'Invalid field name(s) given in select_for_update(of=(...)): %s. '
1128                 'Only relational fields followed in the query are allowed. '
1129                 'Choices are: %s.' % (
1130                     ', '.join(invalid_names),
1131                     ', '.join(_get_field_choices()),
1132                 )
1133             )
1134         return result
1135 
1136     def deferred_to_columns(self):
1137         """
1138         Convert the self.deferred_loading data structure to mapping of table
1139         names to sets of column names which are to be loaded. Return the
1140         dictionary.
1141         """
1142         columns = {}
1143         self.query.deferred_to_data(columns, self.query.get_loaded_field_names_cb)
1144         return columns
1145 
1146     def get_converters(self, expressions):
1147         converters = {}
1148         for i, expression in enumerate(expressions):
1149             if expression:
1150                 backend_converters = self.connection.ops.get_db_converters(expression)
1151                 field_converters = expression.get_db_converters(self.connection)
1152                 if backend_converters or field_converters:
1153                     converters[i] = (backend_converters + field_converters, expression)
1154         return converters
1155 
1156     def apply_converters(self, rows, converters):
1157         connection = self.connection
1158         converters = list(converters.items())
1159         for row in map(list, rows):
1160             for pos, (convs, expression) in converters:
1161                 value = row[pos]
1162                 for converter in convs:
1163                     value = converter(value, expression, connection)
1164                 row[pos] = value
1165             yield row
1166 
1167     def results_iter(self, results=None, tuple_expected=False, chunked_fetch=False,
1168                      chunk_size=GET_ITERATOR_CHUNK_SIZE):
1169         """Return an iterator over the results from executing this query."""
1170         if results is None:
1171             results = self.execute_sql(MULTI, chunked_fetch=chunked_fetch, chunk_size=chunk_size)
1172         fields = [s[0] for s in self.select[0:self.col_count]]
1173         converters = self.get_converters(fields)
1174         rows = chain.from_iterable(results)
1175         if converters:
1176             rows = self.apply_converters(rows, converters)
1177             if tuple_expected:
1178                 rows = map(tuple, rows)
1179         return rows
1180 
1181     def has_results(self):
1182         """
1183         Backends (e.g. NoSQL) can override this in order to use optimized
1184         versions of "query has any results."
1185         """
1186         return bool(self.execute_sql(SINGLE))
1187 
1188     def execute_sql(self, result_type=MULTI, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE):
1189         """
1190         Run the query against the database and return the result(s). The
1191         return value is a single data item if result_type is SINGLE, or an
1192         iterator over the results if the result_type is MULTI.
1193 
1194         result_type is either MULTI (use fetchmany() to retrieve all rows),
1195         SINGLE (only retrieve a single row), or None. In this last case, the
1196         cursor is returned if any query is executed, since it's used by
1197         subclasses such as InsertQuery). It's possible, however, that no query
1198         is needed, as the filters describe an empty set. In that case, None is
1199         returned, to avoid any unnecessary database interaction.
1200         """
1201         result_type = result_type or NO_RESULTS
1202         try:
1203             sql, params = self.as_sql()
1204             if not sql:
1205                 raise EmptyResultSet
1206         except EmptyResultSet:
1207             if result_type == MULTI:
1208                 return iter([])
1209             else:
1210                 return
1211         if chunked_fetch:
1212             cursor = self.connection.chunked_cursor()
1213         else:
1214             cursor = self.connection.cursor()
1215         try:
1216             cursor.execute(sql, params)
1217         except Exception:
1218             # Might fail for server-side cursors (e.g. connection closed)
1219             cursor.close()
1220             raise
1221 
1222         if result_type == CURSOR:
1223             # Give the caller the cursor to process and close.
1224             return cursor
1225         if result_type == SINGLE:
1226             try:
1227                 val = cursor.fetchone()
1228                 if val:
1229                     return val[0:self.col_count]
1230                 return val
1231             finally:
1232                 # done with the cursor
1233                 cursor.close()
1234         if result_type == NO_RESULTS:
1235             cursor.close()
1236             return
1237 
1238         result = cursor_iter(
1239             cursor, self.connection.features.empty_fetchmany_value,
1240             self.col_count if self.has_extra_select else None,
1241             chunk_size,
1242         )
1243         if not chunked_fetch or not self.connection.features.can_use_chunked_reads:
1244             # If we are using non-chunked reads, we return the same data
1245             # structure as normally, but ensure it is all read into memory
1246             # before going any further. Use chunked_fetch if requested,
1247             # unless the database doesn't support it.
1248             return list(result)
1249         return result
1250 
1251     def as_subquery_condition(self, alias, columns, compiler):
1252         qn = compiler.quote_name_unless_alias
1253         qn2 = self.connection.ops.quote_name
1254 
1255         for index, select_col in enumerate(self.query.select):
1256             lhs_sql, lhs_params = self.compile(select_col)
1257             rhs = '%s.%s' % (qn(alias), qn2(columns[index]))
1258             self.query.where.add(
1259                 RawSQL('%s = %s' % (lhs_sql, rhs), lhs_params), 'AND')
1260 
1261         sql, params = self.as_sql()
1262         return 'EXISTS (%s)' % sql, params
1263 
1264     def explain_query(self):
1265         result = list(self.execute_sql())
1266         # Some backends return 1 item tuples with strings, and others return
1267         # tuples with integers and strings. Flatten them out into strings.
1268         output_formatter = json.dumps if self.query.explain_info.format == 'json' else str
1269         for row in result[0]:
1270             if not isinstance(row, str):
1271                 yield ' '.join(output_formatter(c) for c in row)
1272             else:
1273                 yield row
1274 
1275 
1276 class SQLInsertCompiler(SQLCompiler):
1277     returning_fields = None
1278     returning_params = tuple()
1279 
1280     def field_as_sql(self, field, val):
1281         """
1282         Take a field and a value intended to be saved on that field, and
1283         return placeholder SQL and accompanying params. Check for raw values,
1284         expressions, and fields with get_placeholder() defined in that order.
1285 
1286         When field is None, consider the value raw and use it as the
1287         placeholder, with no corresponding parameters returned.
1288         """
1289         if field is None:
1290             # A field value of None means the value is raw.
1291             sql, params = val, []
1292         elif hasattr(val, 'as_sql'):
1293             # This is an expression, let's compile it.
1294             sql, params = self.compile(val)
1295         elif hasattr(field, 'get_placeholder'):
1296             # Some fields (e.g. geo fields) need special munging before
1297             # they can be inserted.
1298             sql, params = field.get_placeholder(val, self, self.connection), [val]
1299         else:
1300             # Return the common case for the placeholder
1301             sql, params = '%s', [val]
1302 
1303         # The following hook is only used by Oracle Spatial, which sometimes
1304         # needs to yield 'NULL' and [] as its placeholder and params instead
1305         # of '%s' and [None]. The 'NULL' placeholder is produced earlier by
1306         # OracleOperations.get_geom_placeholder(). The following line removes
1307         # the corresponding None parameter. See ticket #10888.
1308         params = self.connection.ops.modify_insert_params(sql, params)
1309 
1310         return sql, params
1311 
1312     def prepare_value(self, field, value):
1313         """
1314         Prepare a value to be used in a query by resolving it if it is an
1315         expression and otherwise calling the field's get_db_prep_save().
1316         """
1317         if hasattr(value, 'resolve_expression'):
1318             value = value.resolve_expression(self.query, allow_joins=False, for_save=True)
1319             # Don't allow values containing Col expressions. They refer to
1320             # existing columns on a row, but in the case of insert the row
1321             # doesn't exist yet.
1322             if value.contains_column_references:
1323                 raise ValueError(
1324                     'Failed to insert expression "%s" on %s. F() expressions '
1325                     'can only be used to update, not to insert.' % (value, field)
1326                 )
1327             if value.contains_aggregate:
1328                 raise FieldError(
1329                     'Aggregate functions are not allowed in this query '
1330                     '(%s=%r).' % (field.name, value)
1331                 )
1332             if value.contains_over_clause:
1333                 raise FieldError(
1334                     'Window expressions are not allowed in this query (%s=%r).'
1335                     % (field.name, value)
1336                 )
1337         else:
1338             value = field.get_db_prep_save(value, connection=self.connection)
1339         return value
1340 
1341     def pre_save_val(self, field, obj):
1342         """
1343         Get the given field's value off the given obj. pre_save() is used for
1344         things like auto_now on DateTimeField. Skip it if this is a raw query.
1345         """
1346         if self.query.raw:
1347             return getattr(obj, field.attname)
1348         return field.pre_save(obj, add=True)
1349 
1350     def assemble_as_sql(self, fields, value_rows):
1351         """
1352         Take a sequence of N fields and a sequence of M rows of values, and
1353         generate placeholder SQL and parameters for each field and value.
1354         Return a pair containing:
1355          * a sequence of M rows of N SQL placeholder strings, and
1356          * a sequence of M rows of corresponding parameter values.
1357 
1358         Each placeholder string may contain any number of '%s' interpolation
1359         strings, and each parameter row will contain exactly as many params
1360         as the total number of '%s's in the corresponding placeholder row.
1361         """
1362         if not value_rows:
1363             return [], []
1364 
1365         # list of (sql, [params]) tuples for each object to be saved
1366         # Shape: [n_objs][n_fields][2]
1367         rows_of_fields_as_sql = (
1368             (self.field_as_sql(field, v) for field, v in zip(fields, row))
1369             for row in value_rows
1370         )
1371 
1372         # tuple like ([sqls], [[params]s]) for each object to be saved
1373         # Shape: [n_objs][2][n_fields]
1374         sql_and_param_pair_rows = (zip(*row) for row in rows_of_fields_as_sql)
1375 
1376         # Extract separate lists for placeholders and params.
1377         # Each of these has shape [n_objs][n_fields]
1378         placeholder_rows, param_rows = zip(*sql_and_param_pair_rows)
1379 
1380         # Params for each field are still lists, and need to be flattened.
1381         param_rows = [[p for ps in row for p in ps] for row in param_rows]
1382 
1383         return placeholder_rows, param_rows
1384 
1385     def as_sql(self):
1386         # We don't need quote_name_unless_alias() here, since these are all
1387         # going to be column names (so we can avoid the extra overhead).
1388         qn = self.connection.ops.quote_name
1389         opts = self.query.get_meta()
1390         insert_statement = self.connection.ops.insert_statement(
1391             on_conflict=self.query.on_conflict,
1392         )
1393         result = ['%s %s' % (insert_statement, qn(opts.db_table))]
1394         fields = self.query.fields or [opts.pk]
1395         result.append('(%s)' % ', '.join(qn(f.column) for f in fields))
1396 
1397         if self.query.fields:
1398             value_rows = [
1399                 [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
1400                 for obj in self.query.objs
1401             ]
1402         else:
1403             # An empty object.
1404             value_rows = [[self.connection.ops.pk_default_value()] for _ in self.query.objs]
1405             fields = [None]
1406 
1407         # Currently the backends just accept values when generating bulk
1408         # queries and generate their own placeholders. Doing that isn't
1409         # necessary and it should be possible to use placeholders and
1410         # expressions in bulk inserts too.
1411         can_bulk = (not self.returning_fields and self.connection.features.has_bulk_insert)
1412 
1413         placeholder_rows, param_rows = self.assemble_as_sql(fields, value_rows)
1414 
1415         on_conflict_suffix_sql = self.connection.ops.on_conflict_suffix_sql(
1416             fields,
1417             self.query.on_conflict,
1418             self.query.update_fields,
1419             self.query.unique_fields,
1420         )
1421         if self.returning_fields and self.connection.features.can_return_columns_from_insert:
1422             if self.connection.features.can_return_rows_from_bulk_insert:
1423                 result.append(self.connection.ops.bulk_insert_sql(fields, placeholder_rows))
1424                 params = param_rows
1425             else:
1426                 result.append("VALUES (%s)" % ", ".join(placeholder_rows[0]))
1427                 params = [param_rows[0]]
1428             if on_conflict_suffix_sql:
1429                 result.append(on_conflict_suffix_sql)
1430             # Skip empty r_sql to allow subclasses to customize behavior for
1431             # 3rd party backends. Refs #19096.
1432             r_sql, self.returning_params = self.connection.ops.return_insert_columns(self.returning_fields)
1433             if r_sql:
1434                 result.append(r_sql)
1435                 params += [self.returning_params]
1436             return [(" ".join(result), tuple(chain.from_iterable(params)))]
1437 
1438         if can_bulk:
1439             result.append(self.connection.ops.bulk_insert_sql(fields, placeholder_rows))
1440             if on_conflict_suffix_sql:
1441                 result.append(on_conflict_suffix_sql)
1442             return [(" ".join(result), tuple(p for ps in param_rows for p in ps))]
1443         else:
1444             if on_conflict_suffix_sql:
1445                 result.append(on_conflict_suffix_sql)
1446             return [
1447                 (" ".join(result + ["VALUES (%s)" % ", ".join(p)]), vals)
1448                 for p, vals in zip(placeholder_rows, param_rows)
1449             ]
1450 
1451     def execute_sql(self, returning_fields=None):
1452         assert not (
1453             returning_fields and len(self.query.objs) != 1 and
1454             not self.connection.features.can_return_rows_from_bulk_insert
1455         )
1456         opts = self.query.get_meta()
1457         self.returning_fields = returning_fields
1458         with self.connection.cursor() as cursor:
1459             for sql, params in self.as_sql():
1460                 cursor.execute(sql, params)
1461             if not self.returning_fields:
1462                 return []
1463             if self.connection.features.can_return_rows_from_bulk_insert and len(self.query.objs) > 1:
1464                 rows = self.connection.ops.fetch_returned_insert_rows(cursor)
1465             elif self.connection.features.can_return_columns_from_insert:
1466                 assert len(self.query.objs) == 1
1467                 rows = [self.connection.ops.fetch_returned_insert_columns(
1468                     cursor, self.returning_params,
1469                 )]
1470             else:
1471                 rows = [(self.connection.ops.last_insert_id(
1472                     cursor, opts.db_table, opts.pk.column,
1473                 ),)]
1474         cols = [field.get_col(opts.db_table) for field in self.returning_fields]
1475         converters = self.get_converters(cols)
1476         if converters:
1477             rows = list(self.apply_converters(rows, converters))
1478         return rows
1479 
1480 
1481 class SQLDeleteCompiler(SQLCompiler):
1482     @cached_property
1483     def single_alias(self):
1484         # Ensure base table is in aliases.
1485         self.query.get_initial_alias()
1486         return sum(self.query.alias_refcount[t] > 0 for t in self.query.alias_map) == 1
1487 
1488     @classmethod
1489     def _expr_refs_base_model(cls, expr, base_model):
1490         if isinstance(expr, Query):
1491             return expr.model == base_model
1492         if not hasattr(expr, 'get_source_expressions'):
1493             return False
1494         return any(
1495             cls._expr_refs_base_model(source_expr, base_model)
1496             for source_expr in expr.get_source_expressions()
1497         )
1498 
1499     @cached_property
1500     def contains_self_reference_subquery(self):
1501         return any(
1502             self._expr_refs_base_model(expr, self.query.model)
1503             for expr in chain(self.query.annotations.values(), self.query.where.children)
1504         )
1505 
1506     def _as_sql(self, query):
1507         result = [
1508             'DELETE FROM %s' % self.quote_name_unless_alias(query.base_table)
1509         ]
1510         where, params = self.compile(query.where)
1511         if where:
1512             result.append('WHERE %s' % where)
1513         return ' '.join(result), tuple(params)
1514 
1515     def as_sql(self):
1516         """
1517         Create the SQL for this query. Return the SQL string and list of
1518         parameters.
1519         """
1520         if self.single_alias and not self.contains_self_reference_subquery:
1521             return self._as_sql(self.query)
1522         innerq = self.query.clone()
1523         innerq.__class__ = Query
1524         innerq.clear_select_clause()
1525         pk = self.query.model._meta.pk
1526         innerq.select = [
1527             pk.get_col(self.query.get_initial_alias())
1528         ]
1529         outerq = Query(self.query.model)
1530         if not self.connection.features.update_can_self_select:
1531             # Force the materialization of the inner query to allow reference
1532             # to the target table on MySQL.
1533             sql, params = innerq.get_compiler(connection=self.connection).as_sql()
1534             innerq = RawSQL('SELECT * FROM (%s) subquery' % sql, params)
1535         outerq.add_filter('pk__in', innerq)
1536         return self._as_sql(outerq)
1537 
1538 
1539 class SQLUpdateCompiler(SQLCompiler):
1540     def as_sql(self):
1541         """
1542         Create the SQL for this query. Return the SQL string and list of
1543         parameters.
1544         """
1545         self.pre_sql_setup()
1546         if not self.query.values:
1547             return '', ()
1548         qn = self.quote_name_unless_alias
1549         values, update_params = [], []
1550         for field, model, val in self.query.values:
1551             if hasattr(val, 'resolve_expression'):
1552                 val = val.resolve_expression(self.query, allow_joins=False, for_save=True)
1553                 if val.contains_aggregate:
1554                     raise FieldError(
1555                         'Aggregate functions are not allowed in this query '
1556                         '(%s=%r).' % (field.name, val)
1557                     )
1558                 if val.contains_over_clause:
1559                     raise FieldError(
1560                         'Window expressions are not allowed in this query '
1561                         '(%s=%r).' % (field.name, val)
1562                     )
1563             elif hasattr(val, 'prepare_database_save'):
1564                 if field.remote_field:
1565                     val = field.get_db_prep_save(
1566                         val.prepare_database_save(field),
1567                         connection=self.connection,
1568                     )
1569                 else:
1570                     raise TypeError(
1571                         "Tried to update field %s with a model instance, %r. "
1572                         "Use a value compatible with %s."
1573                         % (field, val, field.__class__.__name__)
1574                     )
1575             else:
1576                 val = field.get_db_prep_save(val, connection=self.connection)
1577 
1578             # Getting the placeholder for the field.
1579             if hasattr(field, 'get_placeholder'):
1580                 placeholder = field.get_placeholder(val, self, self.connection)
1581             else:
1582                 placeholder = '%s'
1583             name = field.column
1584             if hasattr(val, 'as_sql'):
1585                 sql, params = self.compile(val)
1586                 values.append('%s = %s' % (qn(name), placeholder % sql))
1587                 update_params.extend(params)
1588             elif val is not None:
1589                 values.append('%s = %s' % (qn(name), placeholder))
1590                 update_params.append(val)
1591             else:
1592                 values.append('%s = NULL' % qn(name))
1593         table = self.query.base_table
1594         result = [
1595             'UPDATE %s SET' % qn(table),
1596             ', '.join(values),
1597         ]
1598         where, params = self.compile(self.query.where)
1599         if where:
1600             result.append('WHERE %s' % where)
1601         return ' '.join(result), tuple(update_params + params)
1602 
1603     def execute_sql(self, result_type):
1604         """
1605         Execute the specified update. Return the number of rows affected by
1606         the primary update query. The "primary update query" is the first
1607         non-empty query that is executed. Row counts for any subsequent,
1608         related queries are not available.
1609         """
1610         cursor = super().execute_sql(result_type)
1611         try:
1612             rows = cursor.rowcount if cursor else 0
1613             is_empty = cursor is None
1614         finally:
1615             if cursor:
1616                 cursor.close()
1617         for query in self.query.get_related_updates():
1618             aux_rows = query.get_compiler(self.using).execute_sql(result_type)
1619             if is_empty and aux_rows:
1620                 rows = aux_rows
1621                 is_empty = False
1622         return rows
1623 
1624     def pre_sql_setup(self):
1625         """
1626         If the update depends on results from other tables, munge the "where"
1627         conditions to match the format required for (portable) SQL updates.
1628 
1629         If multiple updates are required, pull out the id values to update at
1630         this point so that they don't change as a result of the progressive
1631         updates.
1632         """
1633         refcounts_before = self.query.alias_refcount.copy()
1634         # Ensure base table is in the query
1635         self.query.get_initial_alias()
1636         count = self.query.count_active_tables()
1637         if not self.query.related_updates and count == 1:
1638             return
1639         query = self.query.chain(klass=Query)
1640         query.select_related = False
1641         query.clear_ordering(force=True)
1642         query.extra = {}
1643         query.select = []
1644         query.add_fields([query.get_meta().pk.name])
1645         super().pre_sql_setup()
1646 
1647         must_pre_select = count > 1 and not self.connection.features.update_can_self_select
1648 
1649         # Now we adjust the current query: reset the where clause and get rid
1650         # of all the tables we don't need (since they're in the sub-select).
1651         self.query.clear_where()
1652         if self.query.related_updates or must_pre_select:
1653             # Either we're using the idents in multiple update queries (so
1654             # don't want them to change), or the db backend doesn't support
1655             # selecting from the updating table (e.g. MySQL).
1656             idents = []
1657             for rows in query.get_compiler(self.using).execute_sql(MULTI):
1658                 idents.extend(r[0] for r in rows)
1659             self.query.add_filter('pk__in', idents)
1660             self.query.related_ids = idents
1661         else:
1662             # The fast path. Filters and updates in one query.
1663             self.query.add_filter('pk__in', query)
1664         self.query.reset_refcounts(refcounts_before)
1665 
1666 
1667 class SQLAggregateCompiler(SQLCompiler):
1668     def as_sql(self):
1669         """
1670         Create the SQL for this query. Return the SQL string and list of
1671         parameters.
1672         """
1673         sql, params = [], []
1674         for annotation in self.query.annotation_select.values():
1675             ann_sql, ann_params = self.compile(annotation)
1676             ann_sql, ann_params = annotation.select_format(self, ann_sql, ann_params)
1677             sql.append(ann_sql)
1678             params.extend(ann_params)
1679         self.col_count = len(self.query.annotation_select)
1680         sql = ', '.join(sql)
1681         params = tuple(params)
1682 
1683         inner_query_sql, inner_query_params = self.query.inner_query.get_compiler(
1684             self.using, elide_empty=self.elide_empty,
1685         ).as_sql(with_col_aliases=True)
1686         sql = 'SELECT %s FROM (%s) subquery' % (sql, inner_query_sql)
1687         params = params + inner_query_params
1688         return sql, params
1689 
1690 
1691 def cursor_iter(cursor, sentinel, col_count, itersize):
1692     """
1693     Yield blocks of rows from a cursor and ensure the cursor is closed when
1694     done.
1695     """
1696     try:
1697         for rows in iter((lambda: cursor.fetchmany(itersize)), sentinel):
1698             yield rows if col_count is None else [r[:col_count] for r in rows]
1699     finally:
1700         cursor.close()

</code><intended_behavior>In methods within `django/db/models/sql/compiler.py` that handle the `EmptyResultSet` exception, there should be a review and potential adjustment to ensure that catching this exception does not lead to inadvertently dropping the entire WHERE block from the query. It's possible that optimizations or early return patterns in this file assume no need for further query construction upon encountering an `EmptyResultSet`, without considering other accompanying filter conditions that remain valid.</intended_behavior>]
2025-10-18 11:04:15.040 | INFO     | Search completed. Bug locations: [<file>django/db/models/expressions.py</file>
<class>Exists</class>
<method>as_sql</method>
<code>
1212     def as_sql(self, compiler, connection, template=None, **extra_context):
1213         query = self.query.exists(using=connection.alias)
1214         sql, params = super().as_sql(
1215             compiler,
1216             connection,
1217             template=template,
1218             query=query,
1219             **extra_context,
1220         )
1221         if self.negated:
1222             sql = 'NOT {}'.format(sql)
1223         return sql, params

</code><intended_behavior>The `as_sql` method within the `Exists` class should ensure the preservation of the WHERE clause in the query, even when the subquery is empty or results in an `EmptyResultSet`. This might involve inspecting how the `EmptyResultSet` is used or generated within this method and ensuring that the existence of conditions outside of the `Exists` clause (e.g., `name='test'`) still results in their inclusion in the final compiled SQL query. The method might need to explicitly handle cases where the queryset is known to be empty in such a way that it doesn't lead to the complete omission of other valid query parts.</intended_behavior>, <file>django/db/models/expressions.py</file>
<class>Exists</class>
<method>None</method>
<code>
1199 class Exists(Subquery):
1200     template = 'EXISTS(%(subquery)s)'
1201     output_field = fields.BooleanField()
1202 
1203     def __init__(self, queryset, negated=False, **kwargs):
1204         self.negated = negated
1205         super().__init__(queryset, **kwargs)
1206 
1207     def __invert__(self):
1208         clone = self.copy()
1209         clone.negated = not self.negated
1210         return clone
1211 
1212     def as_sql(self, compiler, connection, template=None, **extra_context):
1213         query = self.query.exists(using=connection.alias)
1214         sql, params = super().as_sql(
1215             compiler,
1216             connection,
1217             template=template,
1218             query=query,
1219             **extra_context,
1220         )
1221         if self.negated:
1222             sql = 'NOT {}'.format(sql)
1223         return sql, params
1224 
1225     def select_format(self, compiler, sql, params):
1226         # Wrap EXISTS() with a CASE WHEN expression if a database backend
1227         # (e.g. Oracle) doesn't support boolean expression in SELECT or GROUP
1228         # BY list.
1229         if not compiler.connection.features.supports_boolean_expr_in_select_clause:
1230             sql = 'CASE WHEN {} THEN 1 ELSE 0 END'.format(sql)
1231         return sql, params

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>django/db/models/sql/compiler.py</file>
<class>None</class>
<method>None</method>
<code>
1 import collections
2 import json
3 import re
4 from functools import partial
5 from itertools import chain
6 
7 from django.core.exceptions import EmptyResultSet, FieldError
8 from django.db import DatabaseError, NotSupportedError
9 from django.db.models.constants import LOOKUP_SEP
10 from django.db.models.expressions import F, OrderBy, RawSQL, Ref, Value
11 from django.db.models.functions import Cast, Random
12 from django.db.models.query_utils import select_related_descend
13 from django.db.models.sql.constants import (
14     CURSOR, GET_ITERATOR_CHUNK_SIZE, MULTI, NO_RESULTS, ORDER_DIR, SINGLE,
15 )
16 from django.db.models.sql.query import Query, get_order_dir
17 from django.db.transaction import TransactionManagementError
18 from django.utils.functional import cached_property
19 from django.utils.hashable import make_hashable
20 from django.utils.regex_helper import _lazy_re_compile
21 
22 
23 class SQLCompiler:
24     # Multiline ordering SQL clause may appear from RawSQL.
25     ordering_parts = _lazy_re_compile(
26         r'^(.*)\s(?:ASC|DESC).*',
27         re.MULTILINE | re.DOTALL,
28     )
29 
30     def __init__(self, query, connection, using, elide_empty=True):
31         self.query = query
32         self.connection = connection
33         self.using = using
34         # Some queries, e.g. coalesced aggregation, need to be executed even if
35         # they would return an empty result set.
36         self.elide_empty = elide_empty
37         self.quote_cache = {'*': '*'}
38         # The select, klass_info, and annotations are needed by QuerySet.iterator()
39         # these are set as a side-effect of executing the query. Note that we calculate
40         # separately a list of extra select columns needed for grammatical correctness
41         # of the query, but these columns are not included in self.select.
42         self.select = None
43         self.annotation_col_map = None
44         self.klass_info = None
45         self._meta_ordering = None
46 
47     def __repr__(self):
48         return (
49             f'<{self.__class__.__qualname__} '
50             f'model={self.query.model.__qualname__} '
51             f'connection={self.connection!r} using={self.using!r}>'
52         )
53 
54     def setup_query(self):
55         if all(self.query.alias_refcount[a] == 0 for a in self.query.alias_map):
56             self.query.get_initial_alias()
57         self.select, self.klass_info, self.annotation_col_map = self.get_select()
58         self.col_count = len(self.select)
59 
60     def pre_sql_setup(self):
61         """
62         Do any necessary class setup immediately prior to producing SQL. This
63         is for things that can't necessarily be done in __init__ because we
64         might not have all the pieces in place at that time.
65         """
66         self.setup_query()
67         order_by = self.get_order_by()
68         self.where, self.having = self.query.where.split_having()
69         extra_select = self.get_extra_select(order_by, self.select)
70         self.has_extra_select = bool(extra_select)
71         group_by = self.get_group_by(self.select + extra_select, order_by)
72         return extra_select, order_by, group_by
73 
74     def get_group_by(self, select, order_by):
75         """
76         Return a list of 2-tuples of form (sql, params).
77 
78         The logic of what exactly the GROUP BY clause contains is hard
79         to describe in other words than "if it passes the test suite,
80         then it is correct".
81         """
82         # Some examples:
83         #     SomeModel.objects.annotate(Count('somecol'))
84         #     GROUP BY: all fields of the model
85         #
86         #    SomeModel.objects.values('name').annotate(Count('somecol'))
87         #    GROUP BY: name
88         #
89         #    SomeModel.objects.annotate(Count('somecol')).values('name')
90         #    GROUP BY: all cols of the model
91         #
92         #    SomeModel.objects.values('name', 'pk').annotate(Count('somecol')).values('pk')
93         #    GROUP BY: name, pk
94         #
95         #    SomeModel.objects.values('name').annotate(Count('somecol')).values('pk')
96         #    GROUP BY: name, pk
97         #
98         # In fact, the self.query.group_by is the minimal set to GROUP BY. It
99         # can't be ever restricted to a smaller set, but additional columns in
100         # HAVING, ORDER BY, and SELECT clauses are added to it. Unfortunately
101         # the end result is that it is impossible to force the query to have
102         # a chosen GROUP BY clause - you can almost do this by using the form:
103         #     .values(*wanted_cols).annotate(AnAggregate())
104         # but any later annotations, extra selects, values calls that
105         # refer some column outside of the wanted_cols, order_by, or even
106         # filter calls can alter the GROUP BY clause.
107 
108         # The query.group_by is either None (no GROUP BY at all), True
109         # (group by select fields), or a list of expressions to be added
110         # to the group by.
111         if self.query.group_by is None:
112             return []
113         expressions = []
114         if self.query.group_by is not True:
115             # If the group by is set to a list (by .values() call most likely),
116             # then we need to add everything in it to the GROUP BY clause.
117             # Backwards compatibility hack for setting query.group_by. Remove
118             # when  we have public API way of forcing the GROUP BY clause.
119             # Converts string references to expressions.
120             for expr in self.query.group_by:
121                 if not hasattr(expr, 'as_sql'):
122                     expressions.append(self.query.resolve_ref(expr))
123                 else:
124                     expressions.append(expr)
125         # Note that even if the group_by is set, it is only the minimal
126         # set to group by. So, we need to add cols in select, order_by, and
127         # having into the select in any case.
128         ref_sources = {
129             expr.source for expr in expressions if isinstance(expr, Ref)
130         }
131         for expr, _, _ in select:
132             # Skip members of the select clause that are already included
133             # by reference.
134             if expr in ref_sources:
135                 continue
136             cols = expr.get_group_by_cols()
137             for col in cols:
138                 expressions.append(col)
139         if not self._meta_ordering:
140             for expr, (sql, params, is_ref) in order_by:
141                 # Skip references to the SELECT clause, as all expressions in
142                 # the SELECT clause are already part of the GROUP BY.
143                 if not is_ref:
144                     expressions.extend(expr.get_group_by_cols())
145         having_group_by = self.having.get_group_by_cols() if self.having else ()
146         for expr in having_group_by:
147             expressions.append(expr)
148         result = []
149         seen = set()
150         expressions = self.collapse_group_by(expressions, having_group_by)
151 
152         for expr in expressions:
153             sql, params = self.compile(expr)
154             sql, params = expr.select_format(self, sql, params)
155             params_hash = make_hashable(params)
156             if (sql, params_hash) not in seen:
157                 result.append((sql, params))
158                 seen.add((sql, params_hash))
159         return result
160 
161     def collapse_group_by(self, expressions, having):
162         # If the DB can group by primary key, then group by the primary key of
163         # query's main model. Note that for PostgreSQL the GROUP BY clause must
164         # include the primary key of every table, but for MySQL it is enough to
165         # have the main table's primary key.
166         if self.connection.features.allows_group_by_pk:
167             # Determine if the main model's primary key is in the query.
168             pk = None
169             for expr in expressions:
170                 # Is this a reference to query's base table primary key? If the
171                 # expression isn't a Col-like, then skip the expression.
172                 if (getattr(expr, 'target', None) == self.query.model._meta.pk and
173                         getattr(expr, 'alias', None) == self.query.base_table):
174                     pk = expr
175                     break
176             # If the main model's primary key is in the query, group by that
177             # field, HAVING expressions, and expressions associated with tables
178             # that don't have a primary key included in the grouped columns.
179             if pk:
180                 pk_aliases = {
181                     expr.alias for expr in expressions
182                     if hasattr(expr, 'target') and expr.target.primary_key
183                 }
184                 expressions = [pk] + [
185                     expr for expr in expressions
186                     if expr in having or (
187                         getattr(expr, 'alias', None) is not None and expr.alias not in pk_aliases
188                     )
189                 ]
190         elif self.connection.features.allows_group_by_selected_pks:
191             # Filter out all expressions associated with a table's primary key
192             # present in the grouped columns. This is done by identifying all
193             # tables that have their primary key included in the grouped
194             # columns and removing non-primary key columns referring to them.
195             # Unmanaged models are excluded because they could be representing
196             # database views on which the optimization might not be allowed.
197             pks = {
198                 expr for expr in expressions
199                 if (
200                     hasattr(expr, 'target') and
201                     expr.target.primary_key and
202                     self.connection.features.allows_group_by_selected_pks_on_model(expr.target.model)
203                 )
204             }
205             aliases = {expr.alias for expr in pks}
206             expressions = [
207                 expr for expr in expressions if expr in pks or getattr(expr, 'alias', None) not in aliases
208             ]
209         return expressions
210 
211     def get_select(self):
212         """
213         Return three values:
214         - a list of 3-tuples of (expression, (sql, params), alias)
215         - a klass_info structure,
216         - a dictionary of annotations
217 
218         The (sql, params) is what the expression will produce, and alias is the
219         "AS alias" for the column (possibly None).
220 
221         The klass_info structure contains the following information:
222         - The base model of the query.
223         - Which columns for that model are present in the query (by
224           position of the select clause).
225         - related_klass_infos: [f, klass_info] to descent into
226 
227         The annotations is a dictionary of {'attname': column position} values.
228         """
229         select = []
230         klass_info = None
231         annotations = {}
232         select_idx = 0
233         for alias, (sql, params) in self.query.extra_select.items():
234             annotations[alias] = select_idx
235             select.append((RawSQL(sql, params), alias))
236             select_idx += 1
237         assert not (self.query.select and self.query.default_cols)
238         if self.query.default_cols:
239             cols = self.get_default_columns()
240         else:
241             # self.query.select is a special case. These columns never go to
242             # any model.
243             cols = self.query.select
244         if cols:
245             select_list = []
246             for col in cols:
247                 select_list.append(select_idx)
248                 select.append((col, None))
249                 select_idx += 1
250             klass_info = {
251                 'model': self.query.model,
252                 'select_fields': select_list,
253             }
254         for alias, annotation in self.query.annotation_select.items():
255             annotations[alias] = select_idx
256             select.append((annotation, alias))
257             select_idx += 1
258 
259         if self.query.select_related:
260             related_klass_infos = self.get_related_selections(select)
261             klass_info['related_klass_infos'] = related_klass_infos
262 
263             def get_select_from_parent(klass_info):
264                 for ki in klass_info['related_klass_infos']:
265                     if ki['from_parent']:
266                         ki['select_fields'] = (klass_info['select_fields'] +
267                                                ki['select_fields'])
268                     get_select_from_parent(ki)
269             get_select_from_parent(klass_info)
270 
271         ret = []
272         for col, alias in select:
273             try:
274                 sql, params = self.compile(col)
275             except EmptyResultSet:
276                 empty_result_set_value = getattr(col, 'empty_result_set_value', NotImplemented)
277                 if empty_result_set_value is NotImplemented:
278                     # Select a predicate that's always False.
279                     sql, params = '0', ()
280                 else:
281                     sql, params = self.compile(Value(empty_result_set_value))
282             else:
283                 sql, params = col.select_format(self, sql, params)
284             ret.append((col, (sql, params), alias))
285         return ret, klass_info, annotations
286 
287     def _order_by_pairs(self):
288         if self.query.extra_order_by:
289             ordering = self.query.extra_order_by
290         elif not self.query.default_ordering:
291             ordering = self.query.order_by
292         elif self.query.order_by:
293             ordering = self.query.order_by
294         elif self.query.get_meta().ordering:
295             ordering = self.query.get_meta().ordering
296             self._meta_ordering = ordering
297         else:
298             ordering = []
299         if self.query.standard_ordering:
300             default_order, _ = ORDER_DIR['ASC']
301         else:
302             default_order, _ = ORDER_DIR['DESC']
303 
304         for field in ordering:
305             if hasattr(field, 'resolve_expression'):
306                 if isinstance(field, Value):
307                     # output_field must be resolved for constants.
308                     field = Cast(field, field.output_field)
309                 if not isinstance(field, OrderBy):
310                     field = field.asc()
311                 if not self.query.standard_ordering:
312                     field = field.copy()
313                     field.reverse_ordering()
314                 yield field, False
315                 continue
316             if field == '?':  # random
317                 yield OrderBy(Random()), False
318                 continue
319 
320             col, order = get_order_dir(field, default_order)
321             descending = order == 'DESC'
322 
323             if col in self.query.annotation_select:
324                 # Reference to expression in SELECT clause
325                 yield (
326                     OrderBy(
327                         Ref(col, self.query.annotation_select[col]),
328                         descending=descending,
329                     ),
330                     True,
331                 )
332                 continue
333             if col in self.query.annotations:
334                 # References to an expression which is masked out of the SELECT
335                 # clause.
336                 if self.query.combinator and self.select:
337                     # Don't use the resolved annotation because other
338                     # combinated queries might define it differently.
339                     expr = F(col)
340                 else:
341                     expr = self.query.annotations[col]
342                     if isinstance(expr, Value):
343                         # output_field must be resolved for constants.
344                         expr = Cast(expr, expr.output_field)
345                 yield OrderBy(expr, descending=descending), False
346                 continue
347 
348             if '.' in field:
349                 # This came in through an extra(order_by=...) addition. Pass it
350                 # on verbatim.
351                 table, col = col.split('.', 1)
352                 yield (
353                     OrderBy(
354                         RawSQL('%s.%s' % (self.quote_name_unless_alias(table), col), []),
355                         descending=descending,
356                     ),
357                     False,
358                 )
359                 continue
360 
361             if self.query.extra and col in self.query.extra:
362                 if col in self.query.extra_select:
363                     yield (
364                         OrderBy(Ref(col, RawSQL(*self.query.extra[col])), descending=descending),
365                         True,
366                     )
367                 else:
368                     yield (
369                         OrderBy(RawSQL(*self.query.extra[col]), descending=descending),
370                         False,
371                     )
372             else:
373                 if self.query.combinator and self.select:
374                     # Don't use the first model's field because other
375                     # combinated queries might define it differently.
376                     yield OrderBy(F(col), descending=descending), False
377                 else:
378                     # 'col' is of the form 'field' or 'field1__field2' or
379                     # '-field1__field2__field', etc.
380                     yield from self.find_ordering_name(
381                         field, self.query.get_meta(), default_order=default_order,
382                     )
383 
384     def get_order_by(self):
385         """
386         Return a list of 2-tuples of the form (expr, (sql, params, is_ref)) for
387         the ORDER BY clause.
388 
389         The order_by clause can alter the select clause (for example it can add
390         aliases to clauses that do not yet have one, or it can add totally new
391         select clauses).
392         """
393         result = []
394         seen = set()
395 
396         for expr, is_ref in self._order_by_pairs():
397             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)
398             if self.query.combinator and self.select:
399                 src = resolved.get_source_expressions()[0]
400                 expr_src = expr.get_source_expressions()[0]
401                 # Relabel order by columns to raw numbers if this is a combined
402                 # query; necessary since the columns can't be referenced by the
403                 # fully qualified name and the simple column names may collide.
404                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):
405                     if is_ref and col_alias == src.refs:
406                         src = src.source
407                     elif col_alias and not (
408                         isinstance(expr_src, F) and col_alias == expr_src.name
409                     ):
410                         continue
411                     if src == sel_expr:
412                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
413                         break
414                 else:
415                     if col_alias:
416                         raise DatabaseError('ORDER BY term does not match any column in the result set.')
417                     # Add column used in ORDER BY clause to the selected
418                     # columns and to each combined query.
419                     order_by_idx = len(self.query.select) + 1
420                     col_name = f'__orderbycol{order_by_idx}'
421                     for q in self.query.combined_queries:
422                         q.add_annotation(expr_src, col_name)
423                     self.query.add_select_col(resolved, col_name)
424                     resolved.set_source_expressions([RawSQL(f'{order_by_idx}', ())])
425             sql, params = self.compile(resolved)
426             # Don't add the same column twice, but the order direction is
427             # not taken into account so we strip it. When this entire method
428             # is refactored into expressions, then we can check each part as we
429             # generate it.
430             without_ordering = self.ordering_parts.search(sql)[1]
431             params_hash = make_hashable(params)
432             if (without_ordering, params_hash) in seen:
433                 continue
434             seen.add((without_ordering, params_hash))
435             result.append((resolved, (sql, params, is_ref)))
436         return result
437 
438     def get_extra_select(self, order_by, select):
439         extra_select = []
440         if self.query.distinct and not self.query.distinct_fields:
441             select_sql = [t[1] for t in select]
442             for expr, (sql, params, is_ref) in order_by:
443                 without_ordering = self.ordering_parts.search(sql)[1]
444                 if not is_ref and (without_ordering, params) not in select_sql:
445                     extra_select.append((expr, (without_ordering, params), None))
446         return extra_select
447 
448     def quote_name_unless_alias(self, name):
449         """
450         A wrapper around connection.ops.quote_name that doesn't quote aliases
451         for table names. This avoids problems with some SQL dialects that treat
452         quoted strings specially (e.g. PostgreSQL).
453         """
454         if name in self.quote_cache:
455             return self.quote_cache[name]
456         if ((name in self.query.alias_map and name not in self.query.table_map) or
457                 name in self.query.extra_select or (
458                     self.query.external_aliases.get(name) and name not in self.query.table_map)):
459             self.quote_cache[name] = name
460             return name
461         r = self.connection.ops.quote_name(name)
462         self.quote_cache[name] = r
463         return r
464 
465     def compile(self, node):
466         vendor_impl = getattr(node, 'as_' + self.connection.vendor, None)
467         if vendor_impl:
468             sql, params = vendor_impl(self, self.connection)
469         else:
470             sql, params = node.as_sql(self, self.connection)
471         return sql, params
472 
473     def get_combinator_sql(self, combinator, all):
474         features = self.connection.features
475         compilers = [
476             query.get_compiler(self.using, self.connection, self.elide_empty)
477             for query in self.query.combined_queries if not query.is_empty()
478         ]
479         if not features.supports_slicing_ordering_in_compound:
480             for query, compiler in zip(self.query.combined_queries, compilers):
481                 if query.low_mark or query.high_mark:
482                     raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')
483                 if compiler.get_order_by():
484                     raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')
485         parts = ()
486         for compiler in compilers:
487             try:
488                 # If the columns list is limited, then all combined queries
489                 # must have the same columns list. Set the selects defined on
490                 # the query on all combined queries, if not already set.
491                 if not compiler.query.values_select and self.query.values_select:
492                     compiler.query = compiler.query.clone()
493                     compiler.query.set_values((
494                         *self.query.extra_select,
495                         *self.query.values_select,
496                         *self.query.annotation_select,
497                     ))
498                 part_sql, part_args = compiler.as_sql()
499                 if compiler.query.combinator:
500                     # Wrap in a subquery if wrapping in parentheses isn't
501                     # supported.
502                     if not features.supports_parentheses_in_compound:
503                         part_sql = 'SELECT * FROM ({})'.format(part_sql)
504                     # Add parentheses when combining with compound query if not
505                     # already added for all compound queries.
506                     elif (
507                         self.query.subquery or
508                         not features.supports_slicing_ordering_in_compound
509                     ):
510                         part_sql = '({})'.format(part_sql)
511                 parts += ((part_sql, part_args),)
512             except EmptyResultSet:
513                 # Omit the empty queryset with UNION and with DIFFERENCE if the
514                 # first queryset is nonempty.
515                 if combinator == 'union' or (combinator == 'difference' and parts):
516                     continue
517                 raise
518         if not parts:
519             raise EmptyResultSet
520         combinator_sql = self.connection.ops.set_operators[combinator]
521         if all and combinator == 'union':
522             combinator_sql += ' ALL'
523         braces = '{}'
524         if not self.query.subquery and features.supports_slicing_ordering_in_compound:
525             braces = '({})'
526         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))
527         result = [' {} '.format(combinator_sql).join(sql_parts)]
528         params = []
529         for part in args_parts:
530             params.extend(part)
531         return result, params
532 
533     def as_sql(self, with_limits=True, with_col_aliases=False):
534         """
535         Create the SQL for this query. Return the SQL string and list of
536         parameters.
537 
538         If 'with_limits' is False, any limit/offset information is not included
539         in the query.
540         """
541         refcounts_before = self.query.alias_refcount.copy()
542         try:
543             extra_select, order_by, group_by = self.pre_sql_setup()
544             for_update_part = None
545             # Is a LIMIT/OFFSET clause needed?
546             with_limit_offset = with_limits and (self.query.high_mark is not None or self.query.low_mark)
547             combinator = self.query.combinator
548             features = self.connection.features
549             if combinator:
550                 if not getattr(features, 'supports_select_{}'.format(combinator)):
551                     raise NotSupportedError('{} is not supported on this database backend.'.format(combinator))
552                 result, params = self.get_combinator_sql(combinator, self.query.combinator_all)
553             else:
554                 distinct_fields, distinct_params = self.get_distinct()
555                 # This must come after 'select', 'ordering', and 'distinct'
556                 # (see docstring of get_from_clause() for details).
557                 from_, f_params = self.get_from_clause()
558                 try:
559                     where, w_params = self.compile(self.where) if self.where is not None else ('', [])
560                 except EmptyResultSet:
561                     if self.elide_empty:
562                         raise
563                     # Use a predicate that's always False.
564                     where, w_params = '0 = 1', []
565                 having, h_params = self.compile(self.having) if self.having is not None else ("", [])
566                 result = ['SELECT']
567                 params = []
568 
569                 if self.query.distinct:
570                     distinct_result, distinct_params = self.connection.ops.distinct_sql(
571                         distinct_fields,
572                         distinct_params,
573                     )
574                     result += distinct_result
575                     params += distinct_params
576 
577                 out_cols = []
578                 col_idx = 1
579                 for _, (s_sql, s_params), alias in self.select + extra_select:
580                     if alias:
581                         s_sql = '%s AS %s' % (s_sql, self.connection.ops.quote_name(alias))
582                     elif with_col_aliases:
583                         s_sql = '%s AS %s' % (
584                             s_sql,
585                             self.connection.ops.quote_name('col%d' % col_idx),
586                         )
587                         col_idx += 1
588                     params.extend(s_params)
589                     out_cols.append(s_sql)
590 
591                 result += [', '.join(out_cols), 'FROM', *from_]
592                 params.extend(f_params)
593 
594                 if self.query.select_for_update and self.connection.features.has_select_for_update:
595                     if self.connection.get_autocommit():
596                         raise TransactionManagementError('select_for_update cannot be used outside of a transaction.')
597 
598                     if with_limit_offset and not self.connection.features.supports_select_for_update_with_limit:
599                         raise NotSupportedError(
600                             'LIMIT/OFFSET is not supported with '
601                             'select_for_update on this database backend.'
602                         )
603                     nowait = self.query.select_for_update_nowait
604                     skip_locked = self.query.select_for_update_skip_locked
605                     of = self.query.select_for_update_of
606                     no_key = self.query.select_for_no_key_update
607                     # If it's a NOWAIT/SKIP LOCKED/OF/NO KEY query but the
608                     # backend doesn't support it, raise NotSupportedError to
609                     # prevent a possible deadlock.
610                     if nowait and not self.connection.features.has_select_for_update_nowait:
611                         raise NotSupportedError('NOWAIT is not supported on this database backend.')
612                     elif skip_locked and not self.connection.features.has_select_for_update_skip_locked:
613                         raise NotSupportedError('SKIP LOCKED is not supported on this database backend.')
614                     elif of and not self.connection.features.has_select_for_update_of:
615                         raise NotSupportedError('FOR UPDATE OF is not supported on this database backend.')
616                     elif no_key and not self.connection.features.has_select_for_no_key_update:
617                         raise NotSupportedError(
618                             'FOR NO KEY UPDATE is not supported on this '
619                             'database backend.'
620                         )
621                     for_update_part = self.connection.ops.for_update_sql(
622                         nowait=nowait,
623                         skip_locked=skip_locked,
624                         of=self.get_select_for_update_of_arguments(),
625                         no_key=no_key,
626                     )
627 
628                 if for_update_part and self.connection.features.for_update_after_from:
629                     result.append(for_update_part)
630 
631                 if where:
632                     result.append('WHERE %s' % where)
633                     params.extend(w_params)
634 
635                 grouping = []
636                 for g_sql, g_params in group_by:
637                     grouping.append(g_sql)
638                     params.extend(g_params)
639                 if grouping:
640                     if distinct_fields:
641                         raise NotImplementedError('annotate() + distinct(fields) is not implemented.')
642                     order_by = order_by or self.connection.ops.force_no_ordering()
643                     result.append('GROUP BY %s' % ', '.join(grouping))
644                     if self._meta_ordering:
645                         order_by = None
646                 if having:
647                     result.append('HAVING %s' % having)
648                     params.extend(h_params)
649 
650             if self.query.explain_info:
651                 result.insert(0, self.connection.ops.explain_query_prefix(
652                     self.query.explain_info.format,
653                     **self.query.explain_info.options
654                 ))
655 
656             if order_by:
657                 ordering = []
658                 for _, (o_sql, o_params, _) in order_by:
659                     ordering.append(o_sql)
660                     params.extend(o_params)
661                 result.append('ORDER BY %s' % ', '.join(ordering))
662 
663             if with_limit_offset:
664                 result.append(self.connection.ops.limit_offset_sql(self.query.low_mark, self.query.high_mark))
665 
666             if for_update_part and not self.connection.features.for_update_after_from:
667                 result.append(for_update_part)
668 
669             if self.query.subquery and extra_select:
670                 # If the query is used as a subquery, the extra selects would
671                 # result in more columns than the left-hand side expression is
672                 # expecting. This can happen when a subquery uses a combination
673                 # of order_by() and distinct(), forcing the ordering expressions
674                 # to be selected as well. Wrap the query in another subquery
675                 # to exclude extraneous selects.
676                 sub_selects = []
677                 sub_params = []
678                 for index, (select, _, alias) in enumerate(self.select, start=1):
679                     if not alias and with_col_aliases:
680                         alias = 'col%d' % index
681                     if alias:
682                         sub_selects.append("%s.%s" % (
683                             self.connection.ops.quote_name('subquery'),
684                             self.connection.ops.quote_name(alias),
685                         ))
686                     else:
687                         select_clone = select.relabeled_clone({select.alias: 'subquery'})
688                         subselect, subparams = select_clone.as_sql(self, self.connection)
689                         sub_selects.append(subselect)
690                         sub_params.extend(subparams)
691                 return 'SELECT %s FROM (%s) subquery' % (
692                     ', '.join(sub_selects),
693                     ' '.join(result),
694                 ), tuple(sub_params + params)
695 
696             return ' '.join(result), tuple(params)
697         finally:
698             # Finally do cleanup - get rid of the joins we created above.
699             self.query.reset_refcounts(refcounts_before)
700 
701     def get_default_columns(self, start_alias=None, opts=None, from_parent=None):
702         """
703         Compute the default columns for selecting every field in the base
704         model. Will sometimes be called to pull in related models (e.g. via
705         select_related), in which case "opts" and "start_alias" will be given
706         to provide a starting point for the traversal.
707 
708         Return a list of strings, quoted appropriately for use in SQL
709         directly, as well as a set of aliases used in the select statement (if
710         'as_pairs' is True, return a list of (alias, col_name) pairs instead
711         of strings as the first component and None as the second component).
712         """
713         result = []
714         if opts is None:
715             opts = self.query.get_meta()
716         only_load = self.deferred_to_columns()
717         start_alias = start_alias or self.query.get_initial_alias()
718         # The 'seen_models' is used to optimize checking the needed parent
719         # alias for a given field. This also includes None -> start_alias to
720         # be used by local fields.
721         seen_models = {None: start_alias}
722 
723         for field in opts.concrete_fields:
724             model = field.model._meta.concrete_model
725             # A proxy model will have a different model and concrete_model. We
726             # will assign None if the field belongs to this model.
727             if model == opts.model:
728                 model = None
729             if from_parent and model is not None and issubclass(
730                     from_parent._meta.concrete_model, model._meta.concrete_model):
731                 # Avoid loading data for already loaded parents.
732                 # We end up here in the case select_related() resolution
733                 # proceeds from parent model to child model. In that case the
734                 # parent model data is already present in the SELECT clause,
735                 # and we want to avoid reloading the same data again.
736                 continue
737             if field.model in only_load and field.attname not in only_load[field.model]:
738                 continue
739             alias = self.query.join_parent_model(opts, model, start_alias,
740                                                  seen_models)
741             column = field.get_col(alias)
742             result.append(column)
743         return result
744 
745     def get_distinct(self):
746         """
747         Return a quoted list of fields to use in DISTINCT ON part of the query.
748 
749         This method can alter the tables in the query, and thus it must be
750         called before get_from_clause().
751         """
752         result = []
753         params = []
754         opts = self.query.get_meta()
755 
756         for name in self.query.distinct_fields:
757             parts = name.split(LOOKUP_SEP)
758             _, targets, alias, joins, path, _, transform_function = self._setup_joins(parts, opts, None)
759             targets, alias, _ = self.query.trim_joins(targets, joins, path)
760             for target in targets:
761                 if name in self.query.annotation_select:
762                     result.append(self.connection.ops.quote_name(name))
763                 else:
764                     r, p = self.compile(transform_function(target, alias))
765                     result.append(r)
766                     params.append(p)
767         return result, params
768 
769     def find_ordering_name(self, name, opts, alias=None, default_order='ASC',
770                            already_seen=None):
771         """
772         Return the table alias (the name might be ambiguous, the alias will
773         not be) and column name for ordering by the given 'name' parameter.
774         The 'name' is of the form 'field1__field2__...__fieldN'.
775         """
776         name, order = get_order_dir(name, default_order)
777         descending = order == 'DESC'
778         pieces = name.split(LOOKUP_SEP)
779         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)
780 
781         # If we get to this point and the field is a relation to another model,
782         # append the default ordering for that model unless it is the pk
783         # shortcut or the attribute name of the field that is specified.
784         if (
785             field.is_relation and
786             opts.ordering and
787             getattr(field, 'attname', None) != pieces[-1] and
788             name != 'pk'
789         ):
790             # Firstly, avoid infinite loops.
791             already_seen = already_seen or set()
792             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)
793             if join_tuple in already_seen:
794                 raise FieldError('Infinite loop caused by ordering.')
795             already_seen.add(join_tuple)
796 
797             results = []
798             for item in opts.ordering:
799                 if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):
800                     item = item.desc() if descending else item.asc()
801                 if isinstance(item, OrderBy):
802                     results.append((item, False))
803                     continue
804                 results.extend(self.find_ordering_name(item, opts, alias,
805                                                        order, already_seen))
806             return results
807         targets, alias, _ = self.query.trim_joins(targets, joins, path)
808         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]
809 
810     def _setup_joins(self, pieces, opts, alias):
811         """
812         Helper method for get_order_by() and get_distinct().
813 
814         get_ordering() and get_distinct() must produce same target columns on
815         same input, as the prefixes of get_ordering() and get_distinct() must
816         match. Executing SQL where this is not true is an error.
817         """
818         alias = alias or self.query.get_initial_alias()
819         field, targets, opts, joins, path, transform_function = self.query.setup_joins(pieces, opts, alias)
820         alias = joins[-1]
821         return field, targets, alias, joins, path, opts, transform_function
822 
823     def get_from_clause(self):
824         """
825         Return a list of strings that are joined together to go after the
826         "FROM" part of the query, as well as a list any extra parameters that
827         need to be included. Subclasses, can override this to create a
828         from-clause via a "select".
829 
830         This should only be called after any SQL construction methods that
831         might change the tables that are needed. This means the select columns,
832         ordering, and distinct must be done first.
833         """
834         result = []
835         params = []
836         for alias in tuple(self.query.alias_map):
837             if not self.query.alias_refcount[alias]:
838                 continue
839             try:
840                 from_clause = self.query.alias_map[alias]
841             except KeyError:
842                 # Extra tables can end up in self.tables, but not in the
843                 # alias_map if they aren't in a join. That's OK. We skip them.
844                 continue
845             clause_sql, clause_params = self.compile(from_clause)
846             result.append(clause_sql)
847             params.extend(clause_params)
848         for t in self.query.extra_tables:
849             alias, _ = self.query.table_alias(t)
850             # Only add the alias if it's not already present (the table_alias()
851             # call increments the refcount, so an alias refcount of one means
852             # this is the only reference).
853             if alias not in self.query.alias_map or self.query.alias_refcount[alias] == 1:
854                 result.append(', %s' % self.quote_name_unless_alias(alias))
855         return result, params
856 
857     def get_related_selections(self, select, opts=None, root_alias=None, cur_depth=1,
858                                requested=None, restricted=None):
859         """
860         Fill in the information needed for a select_related query. The current
861         depth is measured as the number of connections away from the root model
862         (for example, cur_depth=1 means we are looking at models with direct
863         connections to the root model).
864         """
865         def _get_field_choices():
866             direct_choices = (f.name for f in opts.fields if f.is_relation)
867             reverse_choices = (
868                 f.field.related_query_name()
869                 for f in opts.related_objects if f.field.unique
870             )
871             return chain(direct_choices, reverse_choices, self.query._filtered_relations)
872 
873         related_klass_infos = []
874         if not restricted and cur_depth > self.query.max_depth:
875             # We've recursed far enough; bail out.
876             return related_klass_infos
877 
878         if not opts:
879             opts = self.query.get_meta()
880             root_alias = self.query.get_initial_alias()
881         only_load = self.query.get_loaded_field_names()
882 
883         # Setup for the case when only particular related fields should be
884         # included in the related selection.
885         fields_found = set()
886         if requested is None:
887             restricted = isinstance(self.query.select_related, dict)
888             if restricted:
889                 requested = self.query.select_related
890 
891         def get_related_klass_infos(klass_info, related_klass_infos):
892             klass_info['related_klass_infos'] = related_klass_infos
893 
894         for f in opts.fields:
895             field_model = f.model._meta.concrete_model
896             fields_found.add(f.name)
897 
898             if restricted:
899                 next = requested.get(f.name, {})
900                 if not f.is_relation:
901                     # If a non-related field is used like a relation,
902                     # or if a single non-relational field is given.
903                     if next or f.name in requested:
904                         raise FieldError(
905                             "Non-relational field given in select_related: '%s'. "
906                             "Choices are: %s" % (
907                                 f.name,
908                                 ", ".join(_get_field_choices()) or '(none)',
909                             )
910                         )
911             else:
912                 next = False
913 
914             if not select_related_descend(f, restricted, requested,
915                                           only_load.get(field_model)):
916                 continue
917             klass_info = {
918                 'model': f.remote_field.model,
919                 'field': f,
920                 'reverse': False,
921                 'local_setter': f.set_cached_value,
922                 'remote_setter': f.remote_field.set_cached_value if f.unique else lambda x, y: None,
923                 'from_parent': False,
924             }
925             related_klass_infos.append(klass_info)
926             select_fields = []
927             _, _, _, joins, _, _ = self.query.setup_joins(
928                 [f.name], opts, root_alias)
929             alias = joins[-1]
930             columns = self.get_default_columns(start_alias=alias, opts=f.remote_field.model._meta)
931             for col in columns:
932                 select_fields.append(len(select))
933                 select.append((col, None))
934             klass_info['select_fields'] = select_fields
935             next_klass_infos = self.get_related_selections(
936                 select, f.remote_field.model._meta, alias, cur_depth + 1, next, restricted)
937             get_related_klass_infos(klass_info, next_klass_infos)
938 
939         if restricted:
940             related_fields = [
941                 (o.field, o.related_model)
942                 for o in opts.related_objects
943                 if o.field.unique and not o.many_to_many
944             ]
945             for f, model in related_fields:
946                 if not select_related_descend(f, restricted, requested,
947                                               only_load.get(model), reverse=True):
948                     continue
949 
950                 related_field_name = f.related_query_name()
951                 fields_found.add(related_field_name)
952 
953                 join_info = self.query.setup_joins([related_field_name], opts, root_alias)
954                 alias = join_info.joins[-1]
955                 from_parent = issubclass(model, opts.model) and model is not opts.model
956                 klass_info = {
957                     'model': model,
958                     'field': f,
959                     'reverse': True,
960                     'local_setter': f.remote_field.set_cached_value,
961                     'remote_setter': f.set_cached_value,
962                     'from_parent': from_parent,
963                 }
964                 related_klass_infos.append(klass_info)
965                 select_fields = []
966                 columns = self.get_default_columns(
967                     start_alias=alias, opts=model._meta, from_parent=opts.model)
968                 for col in columns:
969                     select_fields.append(len(select))
970                     select.append((col, None))
971                 klass_info['select_fields'] = select_fields
972                 next = requested.get(f.related_query_name(), {})
973                 next_klass_infos = self.get_related_selections(
974                     select, model._meta, alias, cur_depth + 1,
975                     next, restricted)
976                 get_related_klass_infos(klass_info, next_klass_infos)
977 
978             def local_setter(obj, from_obj):
979                 # Set a reverse fk object when relation is non-empty.
980                 if from_obj:
981                     f.remote_field.set_cached_value(from_obj, obj)
982 
983             def remote_setter(name, obj, from_obj):
984                 setattr(from_obj, name, obj)
985 
986             for name in list(requested):
987                 # Filtered relations work only on the topmost level.
988                 if cur_depth > 1:
989                     break
990                 if name in self.query._filtered_relations:
991                     fields_found.add(name)
992                     f, _, join_opts, joins, _, _ = self.query.setup_joins([name], opts, root_alias)
993                     model = join_opts.model
994                     alias = joins[-1]
995                     from_parent = issubclass(model, opts.model) and model is not opts.model
996                     klass_info = {
997                         'model': model,
998                         'field': f,
999                         'reverse': True,
1000                         'local_setter': local_setter,
1001                         'remote_setter': partial(remote_setter, name),
1002                         'from_parent': from_parent,
1003                     }
1004                     related_klass_infos.append(klass_info)
1005                     select_fields = []
1006                     columns = self.get_default_columns(
1007                         start_alias=alias, opts=model._meta,
1008                         from_parent=opts.model,
1009                     )
1010                     for col in columns:
1011                         select_fields.append(len(select))
1012                         select.append((col, None))
1013                     klass_info['select_fields'] = select_fields
1014                     next_requested = requested.get(name, {})
1015                     next_klass_infos = self.get_related_selections(
1016                         select, opts=model._meta, root_alias=alias,
1017                         cur_depth=cur_depth + 1, requested=next_requested,
1018                         restricted=restricted,
1019                     )
1020                     get_related_klass_infos(klass_info, next_klass_infos)
1021             fields_not_found = set(requested).difference(fields_found)
1022             if fields_not_found:
1023                 invalid_fields = ("'%s'" % s for s in fields_not_found)
1024                 raise FieldError(
1025                     'Invalid field name(s) given in select_related: %s. '
1026                     'Choices are: %s' % (
1027                         ', '.join(invalid_fields),
1028                         ', '.join(_get_field_choices()) or '(none)',
1029                     )
1030                 )
1031         return related_klass_infos
1032 
1033     def get_select_for_update_of_arguments(self):
1034         """
1035         Return a quoted list of arguments for the SELECT FOR UPDATE OF part of
1036         the query.
1037         """
1038         def _get_parent_klass_info(klass_info):
1039             concrete_model = klass_info['model']._meta.concrete_model
1040             for parent_model, parent_link in concrete_model._meta.parents.items():
1041                 parent_list = parent_model._meta.get_parent_list()
1042                 yield {
1043                     'model': parent_model,
1044                     'field': parent_link,
1045                     'reverse': False,
1046                     'select_fields': [
1047                         select_index
1048                         for select_index in klass_info['select_fields']
1049                         # Selected columns from a model or its parents.
1050                         if (
1051                             self.select[select_index][0].target.model == parent_model or
1052                             self.select[select_index][0].target.model in parent_list
1053                         )
1054                     ],
1055                 }
1056 
1057         def _get_first_selected_col_from_model(klass_info):
1058             """
1059             Find the first selected column from a model. If it doesn't exist,
1060             don't lock a model.
1061 
1062             select_fields is filled recursively, so it also contains fields
1063             from the parent models.
1064             """
1065             concrete_model = klass_info['model']._meta.concrete_model
1066             for select_index in klass_info['select_fields']:
1067                 if self.select[select_index][0].target.model == concrete_model:
1068                     return self.select[select_index][0]
1069 
1070         def _get_field_choices():
1071             """Yield all allowed field paths in breadth-first search order."""
1072             queue = collections.deque([(None, self.klass_info)])
1073             while queue:
1074                 parent_path, klass_info = queue.popleft()
1075                 if parent_path is None:
1076                     path = []
1077                     yield 'self'
1078                 else:
1079                     field = klass_info['field']
1080                     if klass_info['reverse']:
1081                         field = field.remote_field
1082                     path = parent_path + [field.name]
1083                     yield LOOKUP_SEP.join(path)
1084                 queue.extend(
1085                     (path, klass_info)
1086                     for klass_info in _get_parent_klass_info(klass_info)
1087                 )
1088                 queue.extend(
1089                     (path, klass_info)
1090                     for klass_info in klass_info.get('related_klass_infos', [])
1091                 )
1092         if not self.klass_info:
1093             return []
1094         result = []
1095         invalid_names = []
1096         for name in self.query.select_for_update_of:
1097             klass_info = self.klass_info
1098             if name == 'self':
1099                 col = _get_first_selected_col_from_model(klass_info)
1100             else:
1101                 for part in name.split(LOOKUP_SEP):
1102                     klass_infos = (
1103                         *klass_info.get('related_klass_infos', []),
1104                         *_get_parent_klass_info(klass_info),
1105                     )
1106                     for related_klass_info in klass_infos:
1107                         field = related_klass_info['field']
1108                         if related_klass_info['reverse']:
1109                             field = field.remote_field
1110                         if field.name == part:
1111                             klass_info = related_klass_info
1112                             break
1113                     else:
1114                         klass_info = None
1115                         break
1116                 if klass_info is None:
1117                     invalid_names.append(name)
1118                     continue
1119                 col = _get_first_selected_col_from_model(klass_info)
1120             if col is not None:
1121                 if self.connection.features.select_for_update_of_column:
1122                     result.append(self.compile(col)[0])
1123                 else:
1124                     result.append(self.quote_name_unless_alias(col.alias))
1125         if invalid_names:
1126             raise FieldError(
1127                 'Invalid field name(s) given in select_for_update(of=(...)): %s. '
1128                 'Only relational fields followed in the query are allowed. '
1129                 'Choices are: %s.' % (
1130                     ', '.join(invalid_names),
1131                     ', '.join(_get_field_choices()),
1132                 )
1133             )
1134         return result
1135 
1136     def deferred_to_columns(self):
1137         """
1138         Convert the self.deferred_loading data structure to mapping of table
1139         names to sets of column names which are to be loaded. Return the
1140         dictionary.
1141         """
1142         columns = {}
1143         self.query.deferred_to_data(columns, self.query.get_loaded_field_names_cb)
1144         return columns
1145 
1146     def get_converters(self, expressions):
1147         converters = {}
1148         for i, expression in enumerate(expressions):
1149             if expression:
1150                 backend_converters = self.connection.ops.get_db_converters(expression)
1151                 field_converters = expression.get_db_converters(self.connection)
1152                 if backend_converters or field_converters:
1153                     converters[i] = (backend_converters + field_converters, expression)
1154         return converters
1155 
1156     def apply_converters(self, rows, converters):
1157         connection = self.connection
1158         converters = list(converters.items())
1159         for row in map(list, rows):
1160             for pos, (convs, expression) in converters:
1161                 value = row[pos]
1162                 for converter in convs:
1163                     value = converter(value, expression, connection)
1164                 row[pos] = value
1165             yield row
1166 
1167     def results_iter(self, results=None, tuple_expected=False, chunked_fetch=False,
1168                      chunk_size=GET_ITERATOR_CHUNK_SIZE):
1169         """Return an iterator over the results from executing this query."""
1170         if results is None:
1171             results = self.execute_sql(MULTI, chunked_fetch=chunked_fetch, chunk_size=chunk_size)
1172         fields = [s[0] for s in self.select[0:self.col_count]]
1173         converters = self.get_converters(fields)
1174         rows = chain.from_iterable(results)
1175         if converters:
1176             rows = self.apply_converters(rows, converters)
1177             if tuple_expected:
1178                 rows = map(tuple, rows)
1179         return rows
1180 
1181     def has_results(self):
1182         """
1183         Backends (e.g. NoSQL) can override this in order to use optimized
1184         versions of "query has any results."
1185         """
1186         return bool(self.execute_sql(SINGLE))
1187 
1188     def execute_sql(self, result_type=MULTI, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE):
1189         """
1190         Run the query against the database and return the result(s). The
1191         return value is a single data item if result_type is SINGLE, or an
1192         iterator over the results if the result_type is MULTI.
1193 
1194         result_type is either MULTI (use fetchmany() to retrieve all rows),
1195         SINGLE (only retrieve a single row), or None. In this last case, the
1196         cursor is returned if any query is executed, since it's used by
1197         subclasses such as InsertQuery). It's possible, however, that no query
1198         is needed, as the filters describe an empty set. In that case, None is
1199         returned, to avoid any unnecessary database interaction.
1200         """
1201         result_type = result_type or NO_RESULTS
1202         try:
1203             sql, params = self.as_sql()
1204             if not sql:
1205                 raise EmptyResultSet
1206         except EmptyResultSet:
1207             if result_type == MULTI:
1208                 return iter([])
1209             else:
1210                 return
1211         if chunked_fetch:
1212             cursor = self.connection.chunked_cursor()
1213         else:
1214             cursor = self.connection.cursor()
1215         try:
1216             cursor.execute(sql, params)
1217         except Exception:
1218             # Might fail for server-side cursors (e.g. connection closed)
1219             cursor.close()
1220             raise
1221 
1222         if result_type == CURSOR:
1223             # Give the caller the cursor to process and close.
1224             return cursor
1225         if result_type == SINGLE:
1226             try:
1227                 val = cursor.fetchone()
1228                 if val:
1229                     return val[0:self.col_count]
1230                 return val
1231             finally:
1232                 # done with the cursor
1233                 cursor.close()
1234         if result_type == NO_RESULTS:
1235             cursor.close()
1236             return
1237 
1238         result = cursor_iter(
1239             cursor, self.connection.features.empty_fetchmany_value,
1240             self.col_count if self.has_extra_select else None,
1241             chunk_size,
1242         )
1243         if not chunked_fetch or not self.connection.features.can_use_chunked_reads:
1244             # If we are using non-chunked reads, we return the same data
1245             # structure as normally, but ensure it is all read into memory
1246             # before going any further. Use chunked_fetch if requested,
1247             # unless the database doesn't support it.
1248             return list(result)
1249         return result
1250 
1251     def as_subquery_condition(self, alias, columns, compiler):
1252         qn = compiler.quote_name_unless_alias
1253         qn2 = self.connection.ops.quote_name
1254 
1255         for index, select_col in enumerate(self.query.select):
1256             lhs_sql, lhs_params = self.compile(select_col)
1257             rhs = '%s.%s' % (qn(alias), qn2(columns[index]))
1258             self.query.where.add(
1259                 RawSQL('%s = %s' % (lhs_sql, rhs), lhs_params), 'AND')
1260 
1261         sql, params = self.as_sql()
1262         return 'EXISTS (%s)' % sql, params
1263 
1264     def explain_query(self):
1265         result = list(self.execute_sql())
1266         # Some backends return 1 item tuples with strings, and others return
1267         # tuples with integers and strings. Flatten them out into strings.
1268         output_formatter = json.dumps if self.query.explain_info.format == 'json' else str
1269         for row in result[0]:
1270             if not isinstance(row, str):
1271                 yield ' '.join(output_formatter(c) for c in row)
1272             else:
1273                 yield row
1274 
1275 
1276 class SQLInsertCompiler(SQLCompiler):
1277     returning_fields = None
1278     returning_params = tuple()
1279 
1280     def field_as_sql(self, field, val):
1281         """
1282         Take a field and a value intended to be saved on that field, and
1283         return placeholder SQL and accompanying params. Check for raw values,
1284         expressions, and fields with get_placeholder() defined in that order.
1285 
1286         When field is None, consider the value raw and use it as the
1287         placeholder, with no corresponding parameters returned.
1288         """
1289         if field is None:
1290             # A field value of None means the value is raw.
1291             sql, params = val, []
1292         elif hasattr(val, 'as_sql'):
1293             # This is an expression, let's compile it.
1294             sql, params = self.compile(val)
1295         elif hasattr(field, 'get_placeholder'):
1296             # Some fields (e.g. geo fields) need special munging before
1297             # they can be inserted.
1298             sql, params = field.get_placeholder(val, self, self.connection), [val]
1299         else:
1300             # Return the common case for the placeholder
1301             sql, params = '%s', [val]
1302 
1303         # The following hook is only used by Oracle Spatial, which sometimes
1304         # needs to yield 'NULL' and [] as its placeholder and params instead
1305         # of '%s' and [None]. The 'NULL' placeholder is produced earlier by
1306         # OracleOperations.get_geom_placeholder(). The following line removes
1307         # the corresponding None parameter. See ticket #10888.
1308         params = self.connection.ops.modify_insert_params(sql, params)
1309 
1310         return sql, params
1311 
1312     def prepare_value(self, field, value):
1313         """
1314         Prepare a value to be used in a query by resolving it if it is an
1315         expression and otherwise calling the field's get_db_prep_save().
1316         """
1317         if hasattr(value, 'resolve_expression'):
1318             value = value.resolve_expression(self.query, allow_joins=False, for_save=True)
1319             # Don't allow values containing Col expressions. They refer to
1320             # existing columns on a row, but in the case of insert the row
1321             # doesn't exist yet.
1322             if value.contains_column_references:
1323                 raise ValueError(
1324                     'Failed to insert expression "%s" on %s. F() expressions '
1325                     'can only be used to update, not to insert.' % (value, field)
1326                 )
1327             if value.contains_aggregate:
1328                 raise FieldError(
1329                     'Aggregate functions are not allowed in this query '
1330                     '(%s=%r).' % (field.name, value)
1331                 )
1332             if value.contains_over_clause:
1333                 raise FieldError(
1334                     'Window expressions are not allowed in this query (%s=%r).'
1335                     % (field.name, value)
1336                 )
1337         else:
1338             value = field.get_db_prep_save(value, connection=self.connection)
1339         return value
1340 
1341     def pre_save_val(self, field, obj):
1342         """
1343         Get the given field's value off the given obj. pre_save() is used for
1344         things like auto_now on DateTimeField. Skip it if this is a raw query.
1345         """
1346         if self.query.raw:
1347             return getattr(obj, field.attname)
1348         return field.pre_save(obj, add=True)
1349 
1350     def assemble_as_sql(self, fields, value_rows):
1351         """
1352         Take a sequence of N fields and a sequence of M rows of values, and
1353         generate placeholder SQL and parameters for each field and value.
1354         Return a pair containing:
1355          * a sequence of M rows of N SQL placeholder strings, and
1356          * a sequence of M rows of corresponding parameter values.
1357 
1358         Each placeholder string may contain any number of '%s' interpolation
1359         strings, and each parameter row will contain exactly as many params
1360         as the total number of '%s's in the corresponding placeholder row.
1361         """
1362         if not value_rows:
1363             return [], []
1364 
1365         # list of (sql, [params]) tuples for each object to be saved
1366         # Shape: [n_objs][n_fields][2]
1367         rows_of_fields_as_sql = (
1368             (self.field_as_sql(field, v) for field, v in zip(fields, row))
1369             for row in value_rows
1370         )
1371 
1372         # tuple like ([sqls], [[params]s]) for each object to be saved
1373         # Shape: [n_objs][2][n_fields]
1374         sql_and_param_pair_rows = (zip(*row) for row in rows_of_fields_as_sql)
1375 
1376         # Extract separate lists for placeholders and params.
1377         # Each of these has shape [n_objs][n_fields]
1378         placeholder_rows, param_rows = zip(*sql_and_param_pair_rows)
1379 
1380         # Params for each field are still lists, and need to be flattened.
1381         param_rows = [[p for ps in row for p in ps] for row in param_rows]
1382 
1383         return placeholder_rows, param_rows
1384 
1385     def as_sql(self):
1386         # We don't need quote_name_unless_alias() here, since these are all
1387         # going to be column names (so we can avoid the extra overhead).
1388         qn = self.connection.ops.quote_name
1389         opts = self.query.get_meta()
1390         insert_statement = self.connection.ops.insert_statement(
1391             on_conflict=self.query.on_conflict,
1392         )
1393         result = ['%s %s' % (insert_statement, qn(opts.db_table))]
1394         fields = self.query.fields or [opts.pk]
1395         result.append('(%s)' % ', '.join(qn(f.column) for f in fields))
1396 
1397         if self.query.fields:
1398             value_rows = [
1399                 [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
1400                 for obj in self.query.objs
1401             ]
1402         else:
1403             # An empty object.
1404             value_rows = [[self.connection.ops.pk_default_value()] for _ in self.query.objs]
1405             fields = [None]
1406 
1407         # Currently the backends just accept values when generating bulk
1408         # queries and generate their own placeholders. Doing that isn't
1409         # necessary and it should be possible to use placeholders and
1410         # expressions in bulk inserts too.
1411         can_bulk = (not self.returning_fields and self.connection.features.has_bulk_insert)
1412 
1413         placeholder_rows, param_rows = self.assemble_as_sql(fields, value_rows)
1414 
1415         on_conflict_suffix_sql = self.connection.ops.on_conflict_suffix_sql(
1416             fields,
1417             self.query.on_conflict,
1418             self.query.update_fields,
1419             self.query.unique_fields,
1420         )
1421         if self.returning_fields and self.connection.features.can_return_columns_from_insert:
1422             if self.connection.features.can_return_rows_from_bulk_insert:
1423                 result.append(self.connection.ops.bulk_insert_sql(fields, placeholder_rows))
1424                 params = param_rows
1425             else:
1426                 result.append("VALUES (%s)" % ", ".join(placeholder_rows[0]))
1427                 params = [param_rows[0]]
1428             if on_conflict_suffix_sql:
1429                 result.append(on_conflict_suffix_sql)
1430             # Skip empty r_sql to allow subclasses to customize behavior for
1431             # 3rd party backends. Refs #19096.
1432             r_sql, self.returning_params = self.connection.ops.return_insert_columns(self.returning_fields)
1433             if r_sql:
1434                 result.append(r_sql)
1435                 params += [self.returning_params]
1436             return [(" ".join(result), tuple(chain.from_iterable(params)))]
1437 
1438         if can_bulk:
1439             result.append(self.connection.ops.bulk_insert_sql(fields, placeholder_rows))
1440             if on_conflict_suffix_sql:
1441                 result.append(on_conflict_suffix_sql)
1442             return [(" ".join(result), tuple(p for ps in param_rows for p in ps))]
1443         else:
1444             if on_conflict_suffix_sql:
1445                 result.append(on_conflict_suffix_sql)
1446             return [
1447                 (" ".join(result + ["VALUES (%s)" % ", ".join(p)]), vals)
1448                 for p, vals in zip(placeholder_rows, param_rows)
1449             ]
1450 
1451     def execute_sql(self, returning_fields=None):
1452         assert not (
1453             returning_fields and len(self.query.objs) != 1 and
1454             not self.connection.features.can_return_rows_from_bulk_insert
1455         )
1456         opts = self.query.get_meta()
1457         self.returning_fields = returning_fields
1458         with self.connection.cursor() as cursor:
1459             for sql, params in self.as_sql():
1460                 cursor.execute(sql, params)
1461             if not self.returning_fields:
1462                 return []
1463             if self.connection.features.can_return_rows_from_bulk_insert and len(self.query.objs) > 1:
1464                 rows = self.connection.ops.fetch_returned_insert_rows(cursor)
1465             elif self.connection.features.can_return_columns_from_insert:
1466                 assert len(self.query.objs) == 1
1467                 rows = [self.connection.ops.fetch_returned_insert_columns(
1468                     cursor, self.returning_params,
1469                 )]
1470             else:
1471                 rows = [(self.connection.ops.last_insert_id(
1472                     cursor, opts.db_table, opts.pk.column,
1473                 ),)]
1474         cols = [field.get_col(opts.db_table) for field in self.returning_fields]
1475         converters = self.get_converters(cols)
1476         if converters:
1477             rows = list(self.apply_converters(rows, converters))
1478         return rows
1479 
1480 
1481 class SQLDeleteCompiler(SQLCompiler):
1482     @cached_property
1483     def single_alias(self):
1484         # Ensure base table is in aliases.
1485         self.query.get_initial_alias()
1486         return sum(self.query.alias_refcount[t] > 0 for t in self.query.alias_map) == 1
1487 
1488     @classmethod
1489     def _expr_refs_base_model(cls, expr, base_model):
1490         if isinstance(expr, Query):
1491             return expr.model == base_model
1492         if not hasattr(expr, 'get_source_expressions'):
1493             return False
1494         return any(
1495             cls._expr_refs_base_model(source_expr, base_model)
1496             for source_expr in expr.get_source_expressions()
1497         )
1498 
1499     @cached_property
1500     def contains_self_reference_subquery(self):
1501         return any(
1502             self._expr_refs_base_model(expr, self.query.model)
1503             for expr in chain(self.query.annotations.values(), self.query.where.children)
1504         )
1505 
1506     def _as_sql(self, query):
1507         result = [
1508             'DELETE FROM %s' % self.quote_name_unless_alias(query.base_table)
1509         ]
1510         where, params = self.compile(query.where)
1511         if where:
1512             result.append('WHERE %s' % where)
1513         return ' '.join(result), tuple(params)
1514 
1515     def as_sql(self):
1516         """
1517         Create the SQL for this query. Return the SQL string and list of
1518         parameters.
1519         """
1520         if self.single_alias and not self.contains_self_reference_subquery:
1521             return self._as_sql(self.query)
1522         innerq = self.query.clone()
1523         innerq.__class__ = Query
1524         innerq.clear_select_clause()
1525         pk = self.query.model._meta.pk
1526         innerq.select = [
1527             pk.get_col(self.query.get_initial_alias())
1528         ]
1529         outerq = Query(self.query.model)
1530         if not self.connection.features.update_can_self_select:
1531             # Force the materialization of the inner query to allow reference
1532             # to the target table on MySQL.
1533             sql, params = innerq.get_compiler(connection=self.connection).as_sql()
1534             innerq = RawSQL('SELECT * FROM (%s) subquery' % sql, params)
1535         outerq.add_filter('pk__in', innerq)
1536         return self._as_sql(outerq)
1537 
1538 
1539 class SQLUpdateCompiler(SQLCompiler):
1540     def as_sql(self):
1541         """
1542         Create the SQL for this query. Return the SQL string and list of
1543         parameters.
1544         """
1545         self.pre_sql_setup()
1546         if not self.query.values:
1547             return '', ()
1548         qn = self.quote_name_unless_alias
1549         values, update_params = [], []
1550         for field, model, val in self.query.values:
1551             if hasattr(val, 'resolve_expression'):
1552                 val = val.resolve_expression(self.query, allow_joins=False, for_save=True)
1553                 if val.contains_aggregate:
1554                     raise FieldError(
1555                         'Aggregate functions are not allowed in this query '
1556                         '(%s=%r).' % (field.name, val)
1557                     )
1558                 if val.contains_over_clause:
1559                     raise FieldError(
1560                         'Window expressions are not allowed in this query '
1561                         '(%s=%r).' % (field.name, val)
1562                     )
1563             elif hasattr(val, 'prepare_database_save'):
1564                 if field.remote_field:
1565                     val = field.get_db_prep_save(
1566                         val.prepare_database_save(field),
1567                         connection=self.connection,
1568                     )
1569                 else:
1570                     raise TypeError(
1571                         "Tried to update field %s with a model instance, %r. "
1572                         "Use a value compatible with %s."
1573                         % (field, val, field.__class__.__name__)
1574                     )
1575             else:
1576                 val = field.get_db_prep_save(val, connection=self.connection)
1577 
1578             # Getting the placeholder for the field.
1579             if hasattr(field, 'get_placeholder'):
1580                 placeholder = field.get_placeholder(val, self, self.connection)
1581             else:
1582                 placeholder = '%s'
1583             name = field.column
1584             if hasattr(val, 'as_sql'):
1585                 sql, params = self.compile(val)
1586                 values.append('%s = %s' % (qn(name), placeholder % sql))
1587                 update_params.extend(params)
1588             elif val is not None:
1589                 values.append('%s = %s' % (qn(name), placeholder))
1590                 update_params.append(val)
1591             else:
1592                 values.append('%s = NULL' % qn(name))
1593         table = self.query.base_table
1594         result = [
1595             'UPDATE %s SET' % qn(table),
1596             ', '.join(values),
1597         ]
1598         where, params = self.compile(self.query.where)
1599         if where:
1600             result.append('WHERE %s' % where)
1601         return ' '.join(result), tuple(update_params + params)
1602 
1603     def execute_sql(self, result_type):
1604         """
1605         Execute the specified update. Return the number of rows affected by
1606         the primary update query. The "primary update query" is the first
1607         non-empty query that is executed. Row counts for any subsequent,
1608         related queries are not available.
1609         """
1610         cursor = super().execute_sql(result_type)
1611         try:
1612             rows = cursor.rowcount if cursor else 0
1613             is_empty = cursor is None
1614         finally:
1615             if cursor:
1616                 cursor.close()
1617         for query in self.query.get_related_updates():
1618             aux_rows = query.get_compiler(self.using).execute_sql(result_type)
1619             if is_empty and aux_rows:
1620                 rows = aux_rows
1621                 is_empty = False
1622         return rows
1623 
1624     def pre_sql_setup(self):
1625         """
1626         If the update depends on results from other tables, munge the "where"
1627         conditions to match the format required for (portable) SQL updates.
1628 
1629         If multiple updates are required, pull out the id values to update at
1630         this point so that they don't change as a result of the progressive
1631         updates.
1632         """
1633         refcounts_before = self.query.alias_refcount.copy()
1634         # Ensure base table is in the query
1635         self.query.get_initial_alias()
1636         count = self.query.count_active_tables()
1637         if not self.query.related_updates and count == 1:
1638             return
1639         query = self.query.chain(klass=Query)
1640         query.select_related = False
1641         query.clear_ordering(force=True)
1642         query.extra = {}
1643         query.select = []
1644         query.add_fields([query.get_meta().pk.name])
1645         super().pre_sql_setup()
1646 
1647         must_pre_select = count > 1 and not self.connection.features.update_can_self_select
1648 
1649         # Now we adjust the current query: reset the where clause and get rid
1650         # of all the tables we don't need (since they're in the sub-select).
1651         self.query.clear_where()
1652         if self.query.related_updates or must_pre_select:
1653             # Either we're using the idents in multiple update queries (so
1654             # don't want them to change), or the db backend doesn't support
1655             # selecting from the updating table (e.g. MySQL).
1656             idents = []
1657             for rows in query.get_compiler(self.using).execute_sql(MULTI):
1658                 idents.extend(r[0] for r in rows)
1659             self.query.add_filter('pk__in', idents)
1660             self.query.related_ids = idents
1661         else:
1662             # The fast path. Filters and updates in one query.
1663             self.query.add_filter('pk__in', query)
1664         self.query.reset_refcounts(refcounts_before)
1665 
1666 
1667 class SQLAggregateCompiler(SQLCompiler):
1668     def as_sql(self):
1669         """
1670         Create the SQL for this query. Return the SQL string and list of
1671         parameters.
1672         """
1673         sql, params = [], []
1674         for annotation in self.query.annotation_select.values():
1675             ann_sql, ann_params = self.compile(annotation)
1676             ann_sql, ann_params = annotation.select_format(self, ann_sql, ann_params)
1677             sql.append(ann_sql)
1678             params.extend(ann_params)
1679         self.col_count = len(self.query.annotation_select)
1680         sql = ', '.join(sql)
1681         params = tuple(params)
1682 
1683         inner_query_sql, inner_query_params = self.query.inner_query.get_compiler(
1684             self.using, elide_empty=self.elide_empty,
1685         ).as_sql(with_col_aliases=True)
1686         sql = 'SELECT %s FROM (%s) subquery' % (sql, inner_query_sql)
1687         params = params + inner_query_params
1688         return sql, params
1689 
1690 
1691 def cursor_iter(cursor, sentinel, col_count, itersize):
1692     """
1693     Yield blocks of rows from a cursor and ensure the cursor is closed when
1694     done.
1695     """
1696     try:
1697         for rows in iter((lambda: cursor.fetchmany(itersize)), sentinel):
1698             yield rows if col_count is None else [r[:col_count] for r in rows]
1699     finally:
1700         cursor.close()

</code><intended_behavior>In methods within `django/db/models/sql/compiler.py` that handle the `EmptyResultSet` exception, there should be a review and potential adjustment to ensure that catching this exception does not lead to inadvertently dropping the entire WHERE block from the query. It's possible that optimizations or early return patterns in this file assume no need for further query construction upon encountering an `EmptyResultSet`, without considering other accompanying filter conditions that remain valid.</intended_behavior>]
2025-10-18 11:04:15.040 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-18 11:04:15.040 | INFO     | Search-only: skipping patch selection
2025-10-18 11:04:15.186 | INFO     | Task django__django-15382 completed successfully.
2025-10-18 11:04:15.187 | INFO     | No patch generated. You can try running ACR again.
