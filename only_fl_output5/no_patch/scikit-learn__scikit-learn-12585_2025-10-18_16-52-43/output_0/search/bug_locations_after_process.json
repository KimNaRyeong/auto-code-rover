[
    {
        "rel_file_path": "sklearn/base.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/scikit-learn__scikit-learn/setup_scikit-learn__scikit-learn__0.21/sklearn/base.py",
        "start": 30,
        "end": 74,
        "class_name": null,
        "method_name": "clone",
        "code": "30 def clone(estimator, safe=True):\n31     \"\"\"Constructs a new estimator with the same parameters.\n32 \n33     Clone does a deep copy of the model in an estimator\n34     without actually copying attached data. It yields a new estimator\n35     with the same parameters that has not been fit on any data.\n36 \n37     Parameters\n38     ----------\n39     estimator : estimator object, or list, tuple or set of objects\n40         The estimator or group of estimators to be cloned\n41 \n42     safe : boolean, optional\n43         If safe is false, clone will fall back to a deep copy on objects\n44         that are not estimators.\n45 \n46     \"\"\"\n47     estimator_type = type(estimator)\n48     # XXX: not handling dictionaries\n49     if estimator_type in (list, tuple, set, frozenset):\n50         return estimator_type([clone(e, safe=safe) for e in estimator])\n51     elif not hasattr(estimator, 'get_params'):\n52         if not safe:\n53             return copy.deepcopy(estimator)\n54         else:\n55             raise TypeError(\"Cannot clone object '%s' (type %s): \"\n56                             \"it does not seem to be a scikit-learn estimator \"\n57                             \"as it does not implement a 'get_params' methods.\"\n58                             % (repr(estimator), type(estimator)))\n59     klass = estimator.__class__\n60     new_object_params = estimator.get_params(deep=False)\n61     for name, param in six.iteritems(new_object_params):\n62         new_object_params[name] = clone(param, safe=False)\n63     new_object = klass(**new_object_params)\n64     params_set = new_object.get_params(deep=False)\n65 \n66     # quick sanity check of the parameters of the clone\n67     for name in new_object_params:\n68         param1 = new_object_params[name]\n69         param2 = params_set[name]\n70         if param1 is not param2:\n71             raise RuntimeError('Cannot clone object %s, as the constructor '\n72                                'either does not set or modifies parameter %s' %\n73                                (estimator, name))\n74     return new_object\n",
        "intended_behavior": "The `clone` method is intended to create a deep copy of an estimator with the same parameters. To resolve the issue, the method should be updated to properly handle cases where the `estimator` parameter is a class rather than an instance of a class. Specifically, before attempting to call `get_params` on the `estimator`, the method should check if `estimator` is a type. If it is, the method should either handle the type directly in a manner that is sensible for cloning (e.g., by returning the class itself without calling `get_params`, or by instantiating the class with default parameters if that aligns with the clone's intended usage). This ensures that when cloning an estimator type, the function does not fail because it tries to call an instance method (`get_params`) on a class. This behavior would preserve existing functionality while extending `clone`'s use to also cover estimator types, accommodating the specific use case mentioned in the issue without breaking existing expectations for instances of estimators."
    }
]