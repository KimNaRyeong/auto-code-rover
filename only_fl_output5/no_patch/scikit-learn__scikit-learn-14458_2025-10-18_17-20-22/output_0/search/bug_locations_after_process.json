[
    {
        "rel_file_path": "sklearn/linear_model/base.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/scikit-learn__scikit-learn/setup_scikit-learn__scikit-learn__0.22/sklearn/linear_model/base.py",
        "start": 48,
        "end": 97,
        "class_name": null,
        "method_name": "make_dataset",
        "code": "48 def make_dataset(X, y, sample_weight, random_state=None):\n49     \"\"\"Create ``Dataset`` abstraction for sparse and dense inputs.\n50 \n51     This also returns the ``intercept_decay`` which is different\n52     for sparse datasets.\n53 \n54     Parameters\n55     ----------\n56     X : array_like, shape (n_samples, n_features)\n57         Training data\n58 \n59     y : array_like, shape (n_samples, )\n60         Target values.\n61 \n62     sample_weight : numpy array of shape (n_samples,)\n63         The weight of each sample\n64 \n65     random_state : int, RandomState instance or None (default)\n66         Determines random number generation for dataset shuffling and noise.\n67         Pass an int for reproducible output across multiple function calls.\n68         See :term:`Glossary <random_state>`.\n69 \n70     Returns\n71     -------\n72     dataset\n73         The ``Dataset`` abstraction\n74     intercept_decay\n75         The intercept decay\n76     \"\"\"\n77 \n78     rng = check_random_state(random_state)\n79     # seed should never be 0 in SequentialDataset64\n80     seed = rng.randint(1, np.iinfo(np.int32).max)\n81 \n82     if X.dtype == np.float32:\n83         CSRData = CSRDataset32\n84         ArrayData = ArrayDataset32\n85     else:\n86         CSRData = CSRDataset64\n87         ArrayData = ArrayDataset64\n88 \n89     if sp.issparse(X):\n90         dataset = CSRData(X.data, X.indptr, X.indices, y, sample_weight,\n91                           seed=seed)\n92         intercept_decay = SPARSE_INTERCEPT_DECAY\n93     else:\n94         dataset = ArrayData(X, y, sample_weight, seed=seed)\n95         intercept_decay = 1.0\n96 \n97     return dataset, intercept_decay\n",
        "intended_behavior": "Prior to passing the `X` numpy array to the `ArrayDataset64` or `ArrayDataset32` constructor in the `make_dataset` function, the code should ensure that `X` is C-contiguous. This can be achieved by checking the contiguity of `X` and, if necessary, converting `X` to C-contiguous format using `numpy.ascontiguousarray(X)` (or a similar method deemed appropriate within the context of scikit-learn's practices). This step ensures that when `ArrayDataset64` or `ArrayDataset32` receives the `X` array, it meets the internal requirement for being C-contiguous, thereby preventing the `ValueError: ndarray is not C-contiguous` from occurring. This addition preserves the existing functionality for handling both sparse and dense data inputs. For dense inputs, it adds a necessary pre-processing step to align with the expected input format of `ArrayDataset64` or `ArrayDataset32`, thus avoiding the generation of errors related to data contiguity. This change must be carefully implemented to ensure that it doesn't unintentionally affect performance or data integrity, especially considering the implications of copying large datasets to satisfy contiguity requirements."
    }
]