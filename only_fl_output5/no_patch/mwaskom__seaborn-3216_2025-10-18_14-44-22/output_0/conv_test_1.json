[
    {
        "role": "system",
        "content": "You are an experienced software engineer responsible for reproducing given issues."
    },
    {
        "role": "user",
        "content": "Here is an issue:\n\nFigure title being removed by seaborn objects API when plotting on subfigures\nI recently came across an odd behaviour with the seaborn objects API when using subfigures. Here is a minimal example : \r\n```\r\nimport seaborn as sns\r\nimport seaborn.objects as so\r\nimport matplotlib.pyplot as plt\r\n\r\nfig = plt.figure(constrained_layout=True)\r\nsubfigs = fig.subfigures(1,2)\r\ntips = sns.load_dataset(\"tips\")\r\np = (\r\n    so.Plot(tips, \"total_bill\")\r\n    .add(so.Bars(), so.Hist())\r\n)\r\np.on(subfigs[0]).plot()\r\n\r\nax = subfigs[1].subplots()\r\nax.scatter([1],[1])\r\n\r\nfig.suptitle(\"Test title\")\r\nplt.show()\r\n```\r\nwhich results in the title missing from the image :\r\n![title_issue_bad](https://user-images.githubusercontent.com/1338337/210242982-57262fb0-d1d4-4aab-b400-8f59cae522f3.png)\r\n\r\nCommenting the `p.on(subfigs[0]).plot()` results in the title reappearing.\r\nI have done a bit of digging and found that changing  line 186 from the _core/subplots.py file from `figure = target.figure` to `figure = target` seems to solve the issue. Is there a specific reason to why it fetches the parent figure currently, since Subfigure is supposed to be a drop-in replacement for Figure ? I also expect this will not have the intended behaviour if we deal with subfigures of subfigures.\n"
    },
    {
        "role": "user",
        "content": "Please try to write a standalone python file `reproducer.py` to reproduce the issue. Put the file in a code block.\n\nThe file would be put in the root directory of the project and executed by `python3 reproducer.py`. The script should raise an `AssertionError` when the issue is present and print a stack trace of the issue. The script should also exit with code 0 when the issue is fixed.\n\nPlease use the following function to print the stack trace, so that the line numbers of the statements are shown clearly:\n```\ndef print_stacktrace(e: Exception):\n    import traceback    import sys    tb = traceback.extract_tb(e.__traceback__)\n    print(\"Traceback (most recent call last):\", file=sys.stderr)\n    for frame in tb:\n        line_number = frame.lineno\n        code_context = frame.line.strip() if frame.line else \"Unknown\"\n        print(f'  File \"{frame.filename}\"', file=sys.stderr)\n        print(f\"    {line_number}: {code_context}\", file=sys.stderr)\n    print(f\"{e.__class__.__name__}: {e}\", file=sys.stderr)\n```\n"
    },
    {
        "role": "assistant",
        "content": "```python\n# reproducer.py\n\ndef print_stacktrace(e: Exception):\n    import traceback\n    import sys\n    tb = traceback.extract_tb(e.__traceback__)\n    print(\"Traceback (most recent call last):\", file=sys.stderr)\n    for frame in tb:\n        line_number = frame.lineno\n        code_context = frame.line.strip() if frame.line else \"Unknown\"\n        print(f'  File \"{frame.filename}\"', file=sys.stderr)\n        print(f\"    {line_number}: {code_context}\", file=sys.stderr)\n    print(f\"{e.__class__.__name__}: {e}\", file=sys.stderr)\n\ndef test_figure_title_with_seaborn_objects_api():\n    import seaborn as sns\n    import seaborn.objects as so\n    import matplotlib.pyplot as plt\n\n    try:\n        fig = plt.figure(constrained_layout=True)\n        subfigs = fig.subfigures(1,2)\n        tips = sns.load_dataset(\"tips\")\n        p = (\n            so.Plot(tips, \"total_bill\")\n            .add(so.Bars(), so.Hist())\n        )\n        p.on(subfigs[0]).plot()\n\n        ax = subfigs[1].subplots()\n        ax.scatter([1],[1])\n\n        fig.suptitle(\"Test title\")\n\n        plt.savefig(\"output_figure.png\")  # Save figure instead of displaying\n        title_text = fig._suptitle.get_text()\n        assert title_text == \"Test title\", \"Figure title does not match expected value.\"\n\n    except AssertionError as e:\n        print_stacktrace(e)\n        raise\n\n    except Exception as e:\n        print(\"An unexpected error occurred:\", str(e))\n        raise\n\nif __name__ == \"__main__\":\n    try:\n        test_figure_title_with_seaborn_objects_api()\n        print(\"Issue not found: Figure title correctly set.\")\n    except AssertionError:\n        print(\"Issue found: Figure title missing with seaborn objects API.\")\n        exit(1)  # Exit with error code when issue is present\n    except Exception:\n        exit(1)  # Exit with error code if any other unexpected errors occur\n    exit(0)  # Proper execution without issues\n```"
    },
    {
        "role": "user",
        "content": "This test did not reproduce the issue.\n\nThe test execution exited with code 1.\n\nStandard output: \n\nStandard error: ERROR conda.cli.main_run:execute(125): `conda run python /tmp/reproducer-d_oy5sof.py` failed. (See above for error)\n"
    },
    {
        "role": "user",
        "content": "Please try to write a standalone python file `reproducer.py` to reproduce the issue. Put the file in a code block.\n\nThe file would be put in the root directory of the project and executed by `python3 reproducer.py`. The script should raise an `AssertionError` when the issue is present and print a stack trace of the issue. The script should also exit with code 0 when the issue is fixed.\n\nPlease use the following function to print the stack trace, so that the line numbers of the statements are shown clearly:\n```\ndef print_stacktrace(e: Exception):\n    import traceback    import sys    tb = traceback.extract_tb(e.__traceback__)\n    print(\"Traceback (most recent call last):\", file=sys.stderr)\n    for frame in tb:\n        line_number = frame.lineno\n        code_context = frame.line.strip() if frame.line else \"Unknown\"\n        print(f'  File \"{frame.filename}\"', file=sys.stderr)\n        print(f\"    {line_number}: {code_context}\", file=sys.stderr)\n    print(f\"{e.__class__.__name__}: {e}\", file=sys.stderr)\n```\n"
    }
]