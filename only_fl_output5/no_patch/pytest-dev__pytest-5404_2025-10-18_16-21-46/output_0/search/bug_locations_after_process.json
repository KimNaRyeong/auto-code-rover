[
    {
        "rel_file_path": "testing/conftest.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/pytest-dev__pytest/setup_pytest-dev__pytest__4.6/testing/conftest.py",
        "start": 20,
        "end": 57,
        "class_name": null,
        "method_name": "pytest_collection_modifyitems",
        "code": "20 def pytest_collection_modifyitems(config, items):\n21     \"\"\"Prefer faster tests.\n22 \n23     Use a hookwrapper to do this in the beginning, so e.g. --ff still works\n24     correctly.\n25     \"\"\"\n26     fast_items = []\n27     slow_items = []\n28     slowest_items = []\n29     neutral_items = []\n30 \n31     spawn_names = {\"spawn_pytest\", \"spawn\"}\n32 \n33     for item in items:\n34         try:\n35             fixtures = item.fixturenames\n36         except AttributeError:\n37             # doctest at least\n38             # (https://github.com/pytest-dev/pytest/issues/5070)\n39             neutral_items.append(item)\n40         else:\n41             if \"testdir\" in fixtures:\n42                 if spawn_names.intersection(item.function.__code__.co_names):\n43                     item.add_marker(pytest.mark.uses_pexpect)\n44                     slowest_items.append(item)\n45                 else:\n46                     slow_items.append(item)\n47                 item.add_marker(pytest.mark.slow)\n48             else:\n49                 marker = item.get_closest_marker(\"slow\")\n50                 if marker:\n51                     slowest_items.append(item)\n52                 else:\n53                     fast_items.append(item)\n54 \n55     items[:] = fast_items + neutral_items + slow_items + slowest_items\n56 \n57     yield\n",
        "intended_behavior": "The intended behavior in the adjustment or implementation of `pytest` hooks (`pytest_collection_modifyitems`) should ensure that any manipulation of test items or doctest items checks for and handles the existence of expected attributes safely. Specifically, when accessing or modifying attributes such as `__wrapped__`, the code should include checks to ensure the attribute exists, avoiding the `KeyError`."
    }
]