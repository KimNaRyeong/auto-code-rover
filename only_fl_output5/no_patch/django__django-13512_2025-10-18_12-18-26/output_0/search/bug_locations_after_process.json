[
    {
        "rel_file_path": "django/db/models/fields/json.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/db/models/fields/json.py",
        "start": 16,
        "end": 112,
        "class_name": "JSONField",
        "method_name": null,
        "code": "16 class JSONField(CheckFieldDefaultMixin, Field):\n17     empty_strings_allowed = False\n18     description = _('A JSON object')\n19     default_error_messages = {\n20         'invalid': _('Value must be valid JSON.'),\n21     }\n22     _default_hint = ('dict', '{}')\n23 \n24     def __init__(\n25         self, verbose_name=None, name=None, encoder=None, decoder=None,\n26         **kwargs,\n27     ):\n28         if encoder and not callable(encoder):\n29             raise ValueError('The encoder parameter must be a callable object.')\n30         if decoder and not callable(decoder):\n31             raise ValueError('The decoder parameter must be a callable object.')\n32         self.encoder = encoder\n33         self.decoder = decoder\n34         super().__init__(verbose_name, name, **kwargs)\n35 \n36     def check(self, **kwargs):\n37         errors = super().check(**kwargs)\n38         databases = kwargs.get('databases') or []\n39         errors.extend(self._check_supported(databases))\n40         return errors\n41 \n42     def _check_supported(self, databases):\n43         errors = []\n44         for db in databases:\n45             if not router.allow_migrate_model(db, self.model):\n46                 continue\n47             connection = connections[db]\n48             if not (\n49                 'supports_json_field' in self.model._meta.required_db_features or\n50                 connection.features.supports_json_field\n51             ):\n52                 errors.append(\n53                     checks.Error(\n54                         '%s does not support JSONFields.'\n55                         % connection.display_name,\n56                         obj=self.model,\n57                         id='fields.E180',\n58                     )\n59                 )\n60         return errors\n61 \n62     def deconstruct(self):\n63         name, path, args, kwargs = super().deconstruct()\n64         if self.encoder is not None:\n65             kwargs['encoder'] = self.encoder\n66         if self.decoder is not None:\n67             kwargs['decoder'] = self.decoder\n68         return name, path, args, kwargs\n69 \n70     def from_db_value(self, value, expression, connection):\n71         if value is None:\n72             return value\n73         try:\n74             return json.loads(value, cls=self.decoder)\n75         except json.JSONDecodeError:\n76             return value\n77 \n78     def get_internal_type(self):\n79         return 'JSONField'\n80 \n81     def get_prep_value(self, value):\n82         if value is None:\n83             return value\n84         return json.dumps(value, cls=self.encoder)\n85 \n86     def get_transform(self, name):\n87         transform = super().get_transform(name)\n88         if transform:\n89             return transform\n90         return KeyTransformFactory(name)\n91 \n92     def validate(self, value, model_instance):\n93         super().validate(value, model_instance)\n94         try:\n95             json.dumps(value, cls=self.encoder)\n96         except TypeError:\n97             raise exceptions.ValidationError(\n98                 self.error_messages['invalid'],\n99                 code='invalid',\n100                 params={'value': value},\n101             )\n102 \n103     def value_to_string(self, obj):\n104         return self.value_from_object(obj)\n105 \n106     def formfield(self, **kwargs):\n107         return super().formfield(**{\n108             'form_class': forms.JSONField,\n109             'encoder': self.encoder,\n110             'decoder': self.decoder,\n111             **kwargs,\n112         })\n",
        "intended_behavior": "The `JSONField` class in this file should ensure that when it serializes model field data to JSON for storage or for display (including in the Django admin), it does so in a way that preserves non-ASCII characters like Chinese in their original form. This might involve modifying serialization logic to include `json.dumps` with `ensure_ascii=False`. This change must be done in a way that does not interfere with the existing functionality of storing and retrieving JSON data, including compatibility with databases and the Django ORM's expectations."
    },
    {
        "rel_file_path": "django/contrib/admin/widgets.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/contrib/admin/widgets.py",
        "start": 1,
        "end": 471,
        "class_name": null,
        "method_name": null,
        "code": "1 \"\"\"\n2 Form Widget classes specific to the Django admin site.\n3 \"\"\"\n4 import copy\n5 import json\n6 \n7 from django import forms\n8 from django.conf import settings\n9 from django.core.exceptions import ValidationError\n10 from django.core.validators import URLValidator\n11 from django.db.models import CASCADE\n12 from django.urls import reverse\n13 from django.urls.exceptions import NoReverseMatch\n14 from django.utils.html import smart_urlquote\n15 from django.utils.http import urlencode\n16 from django.utils.text import Truncator\n17 from django.utils.translation import get_language, gettext as _\n18 \n19 \n20 class FilteredSelectMultiple(forms.SelectMultiple):\n21     \"\"\"\n22     A SelectMultiple with a JavaScript filter interface.\n23 \n24     Note that the resulting JavaScript assumes that the jsi18n\n25     catalog has been loaded in the page\n26     \"\"\"\n27     class Media:\n28         js = [\n29             'admin/js/core.js',\n30             'admin/js/SelectBox.js',\n31             'admin/js/SelectFilter2.js',\n32         ]\n33 \n34     def __init__(self, verbose_name, is_stacked, attrs=None, choices=()):\n35         self.verbose_name = verbose_name\n36         self.is_stacked = is_stacked\n37         super().__init__(attrs, choices)\n38 \n39     def get_context(self, name, value, attrs):\n40         context = super().get_context(name, value, attrs)\n41         context['widget']['attrs']['class'] = 'selectfilter'\n42         if self.is_stacked:\n43             context['widget']['attrs']['class'] += 'stacked'\n44         context['widget']['attrs']['data-field-name'] = self.verbose_name\n45         context['widget']['attrs']['data-is-stacked'] = int(self.is_stacked)\n46         return context\n47 \n48 \n49 class AdminDateWidget(forms.DateInput):\n50     class Media:\n51         js = [\n52             'admin/js/calendar.js',\n53             'admin/js/admin/DateTimeShortcuts.js',\n54         ]\n55 \n56     def __init__(self, attrs=None, format=None):\n57         attrs = {'class': 'vDateField', 'size': '10', **(attrs or {})}\n58         super().__init__(attrs=attrs, format=format)\n59 \n60 \n61 class AdminTimeWidget(forms.TimeInput):\n62     class Media:\n63         js = [\n64             'admin/js/calendar.js',\n65             'admin/js/admin/DateTimeShortcuts.js',\n66         ]\n67 \n68     def __init__(self, attrs=None, format=None):\n69         attrs = {'class': 'vTimeField', 'size': '8', **(attrs or {})}\n70         super().__init__(attrs=attrs, format=format)\n71 \n72 \n73 class AdminSplitDateTime(forms.SplitDateTimeWidget):\n74     \"\"\"\n75     A SplitDateTime Widget that has some admin-specific styling.\n76     \"\"\"\n77     template_name = 'admin/widgets/split_datetime.html'\n78 \n79     def __init__(self, attrs=None):\n80         widgets = [AdminDateWidget, AdminTimeWidget]\n81         # Note that we're calling MultiWidget, not SplitDateTimeWidget, because\n82         # we want to define widgets.\n83         forms.MultiWidget.__init__(self, widgets, attrs)\n84 \n85     def get_context(self, name, value, attrs):\n86         context = super().get_context(name, value, attrs)\n87         context['date_label'] = _('Date:')\n88         context['time_label'] = _('Time:')\n89         return context\n90 \n91 \n92 class AdminRadioSelect(forms.RadioSelect):\n93     template_name = 'admin/widgets/radio.html'\n94 \n95 \n96 class AdminFileWidget(forms.ClearableFileInput):\n97     template_name = 'admin/widgets/clearable_file_input.html'\n98 \n99 \n100 def url_params_from_lookup_dict(lookups):\n101     \"\"\"\n102     Convert the type of lookups specified in a ForeignKey limit_choices_to\n103     attribute to a dictionary of query parameters\n104     \"\"\"\n105     params = {}\n106     if lookups and hasattr(lookups, 'items'):\n107         for k, v in lookups.items():\n108             if callable(v):\n109                 v = v()\n110             if isinstance(v, (tuple, list)):\n111                 v = ','.join(str(x) for x in v)\n112             elif isinstance(v, bool):\n113                 v = ('0', '1')[v]\n114             else:\n115                 v = str(v)\n116             params[k] = v\n117     return params\n118 \n119 \n120 class ForeignKeyRawIdWidget(forms.TextInput):\n121     \"\"\"\n122     A Widget for displaying ForeignKeys in the \"raw_id\" interface rather than\n123     in a <select> box.\n124     \"\"\"\n125     template_name = 'admin/widgets/foreign_key_raw_id.html'\n126 \n127     def __init__(self, rel, admin_site, attrs=None, using=None):\n128         self.rel = rel\n129         self.admin_site = admin_site\n130         self.db = using\n131         super().__init__(attrs)\n132 \n133     def get_context(self, name, value, attrs):\n134         context = super().get_context(name, value, attrs)\n135         rel_to = self.rel.model\n136         if rel_to in self.admin_site._registry:\n137             # The related object is registered with the same AdminSite\n138             related_url = reverse(\n139                 'admin:%s_%s_changelist' % (\n140                     rel_to._meta.app_label,\n141                     rel_to._meta.model_name,\n142                 ),\n143                 current_app=self.admin_site.name,\n144             )\n145 \n146             params = self.url_parameters()\n147             if params:\n148                 related_url += '?' + urlencode(params)\n149             context['related_url'] = related_url\n150             context['link_title'] = _('Lookup')\n151             # The JavaScript code looks for this class.\n152             context['widget']['attrs'].setdefault('class', 'vForeignKeyRawIdAdminField')\n153         else:\n154             context['related_url'] = None\n155         if context['widget']['value']:\n156             context['link_label'], context['link_url'] = self.label_and_url_for_value(value)\n157         else:\n158             context['link_label'] = None\n159         return context\n160 \n161     def base_url_parameters(self):\n162         limit_choices_to = self.rel.limit_choices_to\n163         if callable(limit_choices_to):\n164             limit_choices_to = limit_choices_to()\n165         return url_params_from_lookup_dict(limit_choices_to)\n166 \n167     def url_parameters(self):\n168         from django.contrib.admin.views.main import TO_FIELD_VAR\n169         params = self.base_url_parameters()\n170         params.update({TO_FIELD_VAR: self.rel.get_related_field().name})\n171         return params\n172 \n173     def label_and_url_for_value(self, value):\n174         key = self.rel.get_related_field().name\n175         try:\n176             obj = self.rel.model._default_manager.using(self.db).get(**{key: value})\n177         except (ValueError, self.rel.model.DoesNotExist, ValidationError):\n178             return '', ''\n179 \n180         try:\n181             url = reverse(\n182                 '%s:%s_%s_change' % (\n183                     self.admin_site.name,\n184                     obj._meta.app_label,\n185                     obj._meta.object_name.lower(),\n186                 ),\n187                 args=(obj.pk,)\n188             )\n189         except NoReverseMatch:\n190             url = ''  # Admin not registered for target model.\n191 \n192         return Truncator(obj).words(14), url\n193 \n194 \n195 class ManyToManyRawIdWidget(ForeignKeyRawIdWidget):\n196     \"\"\"\n197     A Widget for displaying ManyToMany ids in the \"raw_id\" interface rather than\n198     in a <select multiple> box.\n199     \"\"\"\n200     template_name = 'admin/widgets/many_to_many_raw_id.html'\n201 \n202     def get_context(self, name, value, attrs):\n203         context = super().get_context(name, value, attrs)\n204         if self.rel.model in self.admin_site._registry:\n205             # The related object is registered with the same AdminSite\n206             context['widget']['attrs']['class'] = 'vManyToManyRawIdAdminField'\n207         return context\n208 \n209     def url_parameters(self):\n210         return self.base_url_parameters()\n211 \n212     def label_and_url_for_value(self, value):\n213         return '', ''\n214 \n215     def value_from_datadict(self, data, files, name):\n216         value = data.get(name)\n217         if value:\n218             return value.split(',')\n219 \n220     def format_value(self, value):\n221         return ','.join(str(v) for v in value) if value else ''\n222 \n223 \n224 class RelatedFieldWidgetWrapper(forms.Widget):\n225     \"\"\"\n226     This class is a wrapper to a given widget to add the add icon for the\n227     admin interface.\n228     \"\"\"\n229     template_name = 'admin/widgets/related_widget_wrapper.html'\n230 \n231     def __init__(self, widget, rel, admin_site, can_add_related=None,\n232                  can_change_related=False, can_delete_related=False,\n233                  can_view_related=False):\n234         self.needs_multipart_form = widget.needs_multipart_form\n235         self.attrs = widget.attrs\n236         self.choices = widget.choices\n237         self.widget = widget\n238         self.rel = rel\n239         # Backwards compatible check for whether a user can add related\n240         # objects.\n241         if can_add_related is None:\n242             can_add_related = rel.model in admin_site._registry\n243         self.can_add_related = can_add_related\n244         # XXX: The UX does not support multiple selected values.\n245         multiple = getattr(widget, 'allow_multiple_selected', False)\n246         self.can_change_related = not multiple and can_change_related\n247         # XXX: The deletion UX can be confusing when dealing with cascading deletion.\n248         cascade = getattr(rel, 'on_delete', None) is CASCADE\n249         self.can_delete_related = not multiple and not cascade and can_delete_related\n250         self.can_view_related = not multiple and can_view_related\n251         # so we can check if the related object is registered with this AdminSite\n252         self.admin_site = admin_site\n253 \n254     def __deepcopy__(self, memo):\n255         obj = copy.copy(self)\n256         obj.widget = copy.deepcopy(self.widget, memo)\n257         obj.attrs = self.widget.attrs\n258         memo[id(self)] = obj\n259         return obj\n260 \n261     @property\n262     def is_hidden(self):\n263         return self.widget.is_hidden\n264 \n265     @property\n266     def media(self):\n267         return self.widget.media\n268 \n269     def get_related_url(self, info, action, *args):\n270         return reverse(\"admin:%s_%s_%s\" % (info + (action,)),\n271                        current_app=self.admin_site.name, args=args)\n272 \n273     def get_context(self, name, value, attrs):\n274         from django.contrib.admin.views.main import IS_POPUP_VAR, TO_FIELD_VAR\n275         rel_opts = self.rel.model._meta\n276         info = (rel_opts.app_label, rel_opts.model_name)\n277         self.widget.choices = self.choices\n278         url_params = '&'.join(\"%s=%s\" % param for param in [\n279             (TO_FIELD_VAR, self.rel.get_related_field().name),\n280             (IS_POPUP_VAR, 1),\n281         ])\n282         context = {\n283             'rendered_widget': self.widget.render(name, value, attrs),\n284             'is_hidden': self.is_hidden,\n285             'name': name,\n286             'url_params': url_params,\n287             'model': rel_opts.verbose_name,\n288             'can_add_related': self.can_add_related,\n289             'can_change_related': self.can_change_related,\n290             'can_delete_related': self.can_delete_related,\n291             'can_view_related': self.can_view_related,\n292         }\n293         if self.can_add_related:\n294             context['add_related_url'] = self.get_related_url(info, 'add')\n295         if self.can_delete_related:\n296             context['delete_related_template_url'] = self.get_related_url(info, 'delete', '__fk__')\n297         if self.can_view_related or self.can_change_related:\n298             context['change_related_template_url'] = self.get_related_url(info, 'change', '__fk__')\n299         return context\n300 \n301     def value_from_datadict(self, data, files, name):\n302         return self.widget.value_from_datadict(data, files, name)\n303 \n304     def value_omitted_from_data(self, data, files, name):\n305         return self.widget.value_omitted_from_data(data, files, name)\n306 \n307     def id_for_label(self, id_):\n308         return self.widget.id_for_label(id_)\n309 \n310 \n311 class AdminTextareaWidget(forms.Textarea):\n312     def __init__(self, attrs=None):\n313         super().__init__(attrs={'class': 'vLargeTextField', **(attrs or {})})\n314 \n315 \n316 class AdminTextInputWidget(forms.TextInput):\n317     def __init__(self, attrs=None):\n318         super().__init__(attrs={'class': 'vTextField', **(attrs or {})})\n319 \n320 \n321 class AdminEmailInputWidget(forms.EmailInput):\n322     def __init__(self, attrs=None):\n323         super().__init__(attrs={'class': 'vTextField', **(attrs or {})})\n324 \n325 \n326 class AdminURLFieldWidget(forms.URLInput):\n327     template_name = 'admin/widgets/url.html'\n328 \n329     def __init__(self, attrs=None, validator_class=URLValidator):\n330         super().__init__(attrs={'class': 'vURLField', **(attrs or {})})\n331         self.validator = validator_class()\n332 \n333     def get_context(self, name, value, attrs):\n334         try:\n335             self.validator(value if value else '')\n336             url_valid = True\n337         except ValidationError:\n338             url_valid = False\n339         context = super().get_context(name, value, attrs)\n340         context['current_label'] = _('Currently:')\n341         context['change_label'] = _('Change:')\n342         context['widget']['href'] = smart_urlquote(context['widget']['value']) if value else ''\n343         context['url_valid'] = url_valid\n344         return context\n345 \n346 \n347 class AdminIntegerFieldWidget(forms.NumberInput):\n348     class_name = 'vIntegerField'\n349 \n350     def __init__(self, attrs=None):\n351         super().__init__(attrs={'class': self.class_name, **(attrs or {})})\n352 \n353 \n354 class AdminBigIntegerFieldWidget(AdminIntegerFieldWidget):\n355     class_name = 'vBigIntegerField'\n356 \n357 \n358 class AdminUUIDInputWidget(forms.TextInput):\n359     def __init__(self, attrs=None):\n360         super().__init__(attrs={'class': 'vUUIDField', **(attrs or {})})\n361 \n362 \n363 # Mapping of lowercase language codes [returned by Django's get_language()] to\n364 # language codes supported by select2.\n365 # See django/contrib/admin/static/admin/js/vendor/select2/i18n/*\n366 SELECT2_TRANSLATIONS = {x.lower(): x for x in [\n367     'ar', 'az', 'bg', 'ca', 'cs', 'da', 'de', 'el', 'en', 'es', 'et',\n368     'eu', 'fa', 'fi', 'fr', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'is',\n369     'it', 'ja', 'km', 'ko', 'lt', 'lv', 'mk', 'ms', 'nb', 'nl', 'pl',\n370     'pt-BR', 'pt', 'ro', 'ru', 'sk', 'sr-Cyrl', 'sr', 'sv', 'th',\n371     'tr', 'uk', 'vi',\n372 ]}\n373 SELECT2_TRANSLATIONS.update({'zh-hans': 'zh-CN', 'zh-hant': 'zh-TW'})\n374 \n375 \n376 class AutocompleteMixin:\n377     \"\"\"\n378     Select widget mixin that loads options from AutocompleteJsonView via AJAX.\n379 \n380     Renders the necessary data attributes for select2 and adds the static form\n381     media.\n382     \"\"\"\n383     url_name = '%s:%s_%s_autocomplete'\n384 \n385     def __init__(self, rel, admin_site, attrs=None, choices=(), using=None):\n386         self.rel = rel\n387         self.admin_site = admin_site\n388         self.db = using\n389         self.choices = choices\n390         self.attrs = {} if attrs is None else attrs.copy()\n391 \n392     def get_url(self):\n393         model = self.rel.model\n394         return reverse(self.url_name % (self.admin_site.name, model._meta.app_label, model._meta.model_name))\n395 \n396     def build_attrs(self, base_attrs, extra_attrs=None):\n397         \"\"\"\n398         Set select2's AJAX attributes.\n399 \n400         Attributes can be set using the html5 data attribute.\n401         Nested attributes require a double dash as per\n402         https://select2.org/configuration/data-attributes#nested-subkey-options\n403         \"\"\"\n404         attrs = super().build_attrs(base_attrs, extra_attrs=extra_attrs)\n405         attrs.setdefault('class', '')\n406         attrs.update({\n407             'data-ajax--cache': 'true',\n408             'data-ajax--delay': 250,\n409             'data-ajax--type': 'GET',\n410             'data-ajax--url': self.get_url(),\n411             'data-theme': 'admin-autocomplete',\n412             'data-allow-clear': json.dumps(not self.is_required),\n413             'data-placeholder': '',  # Allows clearing of the input.\n414             'class': attrs['class'] + (' ' if attrs['class'] else '') + 'admin-autocomplete',\n415         })\n416         return attrs\n417 \n418     def optgroups(self, name, value, attr=None):\n419         \"\"\"Return selected options based on the ModelChoiceIterator.\"\"\"\n420         default = (None, [], 0)\n421         groups = [default]\n422         has_selected = False\n423         selected_choices = {\n424             str(v) for v in value\n425             if str(v) not in self.choices.field.empty_values\n426         }\n427         if not self.is_required and not self.allow_multiple_selected:\n428             default[1].append(self.create_option(name, '', '', False, 0))\n429         choices = (\n430             (obj.pk, self.choices.field.label_from_instance(obj))\n431             for obj in self.choices.queryset.using(self.db).filter(pk__in=selected_choices)\n432         )\n433         for option_value, option_label in choices:\n434             selected = (\n435                 str(option_value) in value and\n436                 (has_selected is False or self.allow_multiple_selected)\n437             )\n438             has_selected |= selected\n439             index = len(default[1])\n440             subgroup = default[1]\n441             subgroup.append(self.create_option(name, option_value, option_label, selected_choices, index))\n442         return groups\n443 \n444     @property\n445     def media(self):\n446         extra = '' if settings.DEBUG else '.min'\n447         i18n_name = SELECT2_TRANSLATIONS.get(get_language())\n448         i18n_file = ('admin/js/vendor/select2/i18n/%s.js' % i18n_name,) if i18n_name else ()\n449         return forms.Media(\n450             js=(\n451                 'admin/js/vendor/jquery/jquery%s.js' % extra,\n452                 'admin/js/vendor/select2/select2.full%s.js' % extra,\n453             ) + i18n_file + (\n454                 'admin/js/jquery.init.js',\n455                 'admin/js/autocomplete.js',\n456             ),\n457             css={\n458                 'screen': (\n459                     'admin/css/vendor/select2/select2%s.css' % extra,\n460                     'admin/css/autocomplete.css',\n461                 ),\n462             },\n463         )\n464 \n465 \n466 class AutocompleteSelect(AutocompleteMixin, forms.Select):\n467     pass\n468 \n469 \n470 class AutocompleteSelectMultiple(AutocompleteMixin, forms.SelectMultiple):\n471     pass\n",
        "intended_behavior": "In any method or function within this file where `json.dumps` is used to prepare `JSONField` data for display in the admin interface, the function call should be modified to use `json.dumps(ensure_ascii=False)`. This ensures that Unicode characters are correctly displayed in their original form within the Django admin. The rest of the admin interface's functionality, including any validation, storage, and retrieval of `JSONField` data, should remain unaffected by this change."
    }
]