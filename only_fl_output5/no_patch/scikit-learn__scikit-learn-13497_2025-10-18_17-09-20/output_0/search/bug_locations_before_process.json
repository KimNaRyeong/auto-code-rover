[
    {
        "file": "sklearn/feature_selection/mutual_info_.py",
        "class": "",
        "method": "_estimate_mi",
        "intended_behavior": "To resolve the issue, the `_estimate_mi` function's handling of `discrete_features` when it equals `'auto'` needs to be refined. Currently, it uses a straightforward comparison `if discrete_features == 'auto':`, which assumes `discrete_features` to be a simple type (string). However, since `discrete_features` can also be a boolean or an array indicating the indices or mask of the discrete features, this comparison could fail or behave unexpectedly in future numpy versions due to type compatibility issues.\n\nThe intended behavior is to ensure that the function can accurately interpret and handle the `discrete_features` parameter when it is set to `'auto'`, a boolean, or an array. When `discrete_features` is `'auto'`, the function should continue to determine whether features are considered discrete or continuous based on the sparsity of `X`. However, this decision should be made through a more robust type check, gracefully handling cases where `discrete_features` is an array or boolean.\n\nSpecifically, the function should:\n- Implement a type check to determine if `discrete_features` is a string before comparing it to `'auto'`. If it is not a string, the function should use an alternative logic to handle boolean or array inputs without attempting the string comparison.\n- Maintain the existing functionality where, if `discrete_features == 'auto'`, the decision on whether features are discrete or continuous is made based on the type and sparsity of `X`.\n- Ensure that any non-string inputs for `discrete_features` (e.g., boolean values or arrays) are handled appropriately, without relying on string comparison logic.\n\nThis adjustment will prevent potential errors with future versions of numpy and ensure that the function remains robust and flexible to different types of `discrete_features` inputs."
    }
]