2025-10-18 12:20:50.654 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-18 12:20:54.311 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=189, output_tokens=12, cost=0.002250
2025-10-18 12:20:54.312 | INFO     | Test agent decides that the issue statement does not contain reproduction steps; skipping reproducer tracing
2025-10-18 12:20:54.316 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 12:20:59.673 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=498, output_tokens=161, cost=0.009810
2025-10-18 12:20:59.710 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 12:21:02.799 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=515, output_tokens=33, cost=0.006140
2025-10-18 12:21:02.800 | DEBUG    | Extracted a valid json.
2025-10-18 12:21:02.801 | DEBUG    | Agent proxy return the following json: {
    "API_calls": ["search_class(\"Query\")", "search_method_in_class(\"split_exclude\", \"Query\")"],
    "bug_locations": []
}
2025-10-18 12:21:02.864 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-18 12:21:02.865 | DEBUG    | <Agent search> Analyzing search results.
2025-10-18 12:21:16.629 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2903, output_tokens=614, cost=0.047450
2025-10-18 12:21:16.642 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 12:21:24.748 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3733, output_tokens=372, cost=0.048490
2025-10-18 12:21:24.756 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 12:21:33.447 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=726, output_tokens=368, cost=0.018300
2025-10-18 12:21:33.448 | DEBUG    | Extracted a valid json.
2025-10-18 12:21:33.448 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations":[{"file": "django/db/models/sql/query.py", "class": "Query", "method": "split_exclude", "intended_behavior": "The `split_exclude` method in the `Query` class currently constructs a subquery using a `NOT IN` SQL clause to exclude records linked through multi-valued relationships. The intended behavior is to modify this method to use a `NOT EXISTS` SQL clause instead. This change aims to improve performance and address potential issues with `NULL` values that can arise with the `NOT IN` approach.\n\nTo preserve existing functionality while implementing this change, the method must still:\n\n- Accurately exclude the intended records based on the provided filter expression.\n- Handle `NULL` values correctly, such that the presence of `NULL` does not incorrectly affect the exclusion logic.\n- Maintain performance, or preferably improve it, by leveraging `NOT EXISTS` in a way that database query planners can more efficiently optimize.\n\nSpecifically, the modification should:\n\n- Replace the current construct of generating a subquery for `NOT IN` with a `NOT EXISTS` clause that includes the same filtering criteria within its subquery.\n- Ensure that the `NOT EXISTS` check integrates seamlessly with the outer query, adequately applying the exclusion criteria without introducing inefficiencies or changing the semantic meaning of the query.\n- Retain compatibility with Django's support for multiple database backends, ensuring that the change is applicable and optimized across different SQL dialects.\n\nThis change would directly address the issue's concern regarding optimization difficulties and the handling of `NULL` values by `NOT IN`, ultimately leading to more reliable and potentially faster query execution in the ORM's handling of exclude operations involving multi-valued relationships."}]
}
2025-10-18 12:21:33.469 | DEBUG    | Bug location extracted successfully: [<file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>split_exclude</method>
<code>
1747     def split_exclude(self, filter_expr, can_reuse, names_with_path):
1748         """
1749         When doing an exclude against any kind of N-to-many relation, we need
1750         to use a subquery. This method constructs the nested query, given the
1751         original exclude filter (filter_expr) and the portion up to the first
1752         N-to-many relation field.
1753 
1754         For example, if the origin filter is ~Q(child__name='foo'), filter_expr
1755         is ('child__name', 'foo') and can_reuse is a set of joins usable for
1756         filters in the original query.
1757 
1758         We will turn this into equivalent of:
1759             WHERE NOT (pk IN (SELECT parent_id FROM thetable
1760                               WHERE name = 'foo' AND parent_id IS NOT NULL))
1761 
1762         It might be worth it to consider using WHERE NOT EXISTS as that has
1763         saner null handling, and is easier for the backend's optimizer to
1764         handle.
1765         """
1766         filter_lhs, filter_rhs = filter_expr
1767         if isinstance(filter_rhs, OuterRef):
1768             filter_expr = (filter_lhs, OuterRef(filter_rhs))
1769         elif isinstance(filter_rhs, F):
1770             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
1771         # Generate the inner query.
1772         query = Query(self.model)
1773         query._filtered_relations = self._filtered_relations
1774         query.add_filter(filter_expr)
1775         query.clear_ordering(True)
1776         # Try to have as simple as possible subquery -> trim leading joins from
1777         # the subquery.
1778         trimmed_prefix, contains_louter = query.trim_start(names_with_path)
1779 
1780         # Add extra check to make sure the selected field will not be null
1781         # since we are adding an IN <subquery> clause. This prevents the
1782         # database from tripping over IN (...,NULL,...) selects and returning
1783         # nothing
1784         col = query.select[0]
1785         select_field = col.target
1786         alias = col.alias
1787         if self.is_nullable(select_field):
1788             lookup_class = select_field.get_lookup('isnull')
1789             lookup = lookup_class(select_field.get_col(alias), False)
1790             query.where.add(lookup, AND)
1791         if alias in can_reuse:
1792             pk = select_field.model._meta.pk
1793             # Need to add a restriction so that outer query's filters are in effect for
1794             # the subquery, too.
1795             query.bump_prefix(self)
1796             lookup_class = select_field.get_lookup('exact')
1797             # Note that the query.select[0].alias is different from alias
1798             # due to bump_prefix above.
1799             lookup = lookup_class(pk.get_col(query.select[0].alias),
1800                                   pk.get_col(alias))
1801             query.where.add(lookup, AND)
1802             query.external_aliases[alias] = True
1803 
1804         condition, needed_inner = self.build_filter(
1805             ('%s__in' % trimmed_prefix, query),
1806             current_negated=True, branch_negated=True, can_reuse=can_reuse)
1807         if contains_louter:
1808             or_null_condition, _ = self.build_filter(
1809                 ('%s__isnull' % trimmed_prefix, True),
1810                 current_negated=True, branch_negated=True, can_reuse=can_reuse)
1811             condition.add(or_null_condition, OR)
1812             # Note that the end result will be:
1813             # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.
1814             # This might look crazy but due to how IN works, this seems to be
1815             # correct. If the IS NOT NULL check is removed then outercol NOT
1816             # IN will return UNKNOWN. If the IS NULL check is removed, then if
1817             # outercol IS NULL we will not match the row.
1818         return condition, needed_inner

</code><intended_behavior>The `split_exclude` method in the `Query` class currently constructs a subquery using a `NOT IN` SQL clause to exclude records linked through multi-valued relationships. The intended behavior is to modify this method to use a `NOT EXISTS` SQL clause instead. This change aims to improve performance and address potential issues with `NULL` values that can arise with the `NOT IN` approach.

To preserve existing functionality while implementing this change, the method must still:

- Accurately exclude the intended records based on the provided filter expression.
- Handle `NULL` values correctly, such that the presence of `NULL` does not incorrectly affect the exclusion logic.
- Maintain performance, or preferably improve it, by leveraging `NOT EXISTS` in a way that database query planners can more efficiently optimize.

Specifically, the modification should:

- Replace the current construct of generating a subquery for `NOT IN` with a `NOT EXISTS` clause that includes the same filtering criteria within its subquery.
- Ensure that the `NOT EXISTS` check integrates seamlessly with the outer query, adequately applying the exclusion criteria without introducing inefficiencies or changing the semantic meaning of the query.
- Retain compatibility with Django's support for multiple database backends, ensuring that the change is applicable and optimized across different SQL dialects.

This change would directly address the issue's concern regarding optimization difficulties and the handling of `NULL` values by `NOT IN`, ultimately leading to more reliable and potentially faster query execution in the ORM's handling of exclude operations involving multi-valued relationships.</intended_behavior>, <file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>None</method>
<code>
136 class Query(BaseExpression):
137     """A single SQL query."""
138 
139     alias_prefix = 'T'
140     subq_aliases = frozenset([alias_prefix])
141 
142     compiler = 'SQLCompiler'
143 
144     def __init__(self, model, where=WhereNode, alias_cols=True):
145         self.model = model
146         self.alias_refcount = {}
147         # alias_map is the most important data structure regarding joins.
148         # It's used for recording which joins exist in the query and what
149         # types they are. The key is the alias of the joined table (possibly
150         # the table name) and the value is a Join-like object (see
151         # sql.datastructures.Join for more information).
152         self.alias_map = {}
153         # Whether to provide alias to columns during reference resolving.
154         self.alias_cols = alias_cols
155         # Sometimes the query contains references to aliases in outer queries (as
156         # a result of split_exclude). Correct alias quoting needs to know these
157         # aliases too.
158         # Map external tables to whether they are aliased.
159         self.external_aliases = {}
160         self.table_map = {}     # Maps table names to list of aliases.
161         self.default_cols = True
162         self.default_ordering = True
163         self.standard_ordering = True
164         self.used_aliases = set()
165         self.filter_is_sticky = False
166         self.subquery = False
167 
168         # SQL-related attributes
169         # Select and related select clauses are expressions to use in the
170         # SELECT clause of the query.
171         # The select is used for cases where we want to set up the select
172         # clause to contain other than default fields (values(), subqueries...)
173         # Note that annotations go to annotations dictionary.
174         self.select = ()
175         self.where = where()
176         self.where_class = where
177         # The group_by attribute can have one of the following forms:
178         #  - None: no group by at all in the query
179         #  - A tuple of expressions: group by (at least) those expressions.
180         #    String refs are also allowed for now.
181         #  - True: group by all select fields of the model
182         # See compiler.get_group_by() for details.
183         self.group_by = None
184         self.order_by = ()
185         self.low_mark, self.high_mark = 0, None  # Used for offset/limit
186         self.distinct = False
187         self.distinct_fields = ()
188         self.select_for_update = False
189         self.select_for_update_nowait = False
190         self.select_for_update_skip_locked = False
191         self.select_for_update_of = ()
192         self.select_for_no_key_update = False
193 
194         self.select_related = False
195         # Arbitrary limit for select_related to prevents infinite recursion.
196         self.max_depth = 5
197 
198         # Holds the selects defined by a call to values() or values_list()
199         # excluding annotation_select and extra_select.
200         self.values_select = ()
201 
202         # SQL annotation-related attributes
203         self.annotations = {}  # Maps alias -> Annotation Expression
204         self.annotation_select_mask = None
205         self._annotation_select_cache = None
206 
207         # Set combination attributes
208         self.combinator = None
209         self.combinator_all = False
210         self.combined_queries = ()
211 
212         # These are for extensions. The contents are more or less appended
213         # verbatim to the appropriate clause.
214         self.extra = {}  # Maps col_alias -> (col_sql, params).
215         self.extra_select_mask = None
216         self._extra_select_cache = None
217 
218         self.extra_tables = ()
219         self.extra_order_by = ()
220 
221         # A tuple that is a set of model field names and either True, if these
222         # are the fields to defer, or False if these are the only fields to
223         # load.
224         self.deferred_loading = (frozenset(), True)
225 
226         self._filtered_relations = {}
227 
228         self.explain_query = False
229         self.explain_format = None
230         self.explain_options = {}
231 
232     @property
233     def output_field(self):
234         if len(self.select) == 1:
235             select = self.select[0]
236             return getattr(select, 'target', None) or select.field
237         elif len(self.annotation_select) == 1:
238             return next(iter(self.annotation_select.values())).output_field
239 
240     @property
241     def has_select_fields(self):
242         return bool(self.select or self.annotation_select_mask or self.extra_select_mask)
243 
244     @cached_property
245     def base_table(self):
246         for alias in self.alias_map:
247             return alias
248 
249     def __str__(self):
250         """
251         Return the query as a string of SQL with the parameter values
252         substituted in (use sql_with_params() to see the unsubstituted string).
253 
254         Parameter values won't necessarily be quoted correctly, since that is
255         done by the database interface at execution time.
256         """
257         sql, params = self.sql_with_params()
258         return sql % params
259 
260     def sql_with_params(self):
261         """
262         Return the query as an SQL string and the parameters that will be
263         substituted into the query.
264         """
265         return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()
266 
267     def __deepcopy__(self, memo):
268         """Limit the amount of work when a Query is deepcopied."""
269         result = self.clone()
270         memo[id(self)] = result
271         return result
272 
273     def get_compiler(self, using=None, connection=None):
274         if using is None and connection is None:
275             raise ValueError("Need either using or connection")
276         if using:
277             connection = connections[using]
278         return connection.ops.compiler(self.compiler)(self, connection, using)
279 
280     def get_meta(self):
281         """
282         Return the Options instance (the model._meta) from which to start
283         processing. Normally, this is self.model._meta, but it can be changed
284         by subclasses.
285         """
286         return self.model._meta
287 
288     def clone(self):
289         """
290         Return a copy of the current Query. A lightweight alternative to
291         to deepcopy().
292         """
293         obj = Empty()
294         obj.__class__ = self.__class__
295         # Copy references to everything.
296         obj.__dict__ = self.__dict__.copy()
297         # Clone attributes that can't use shallow copy.
298         obj.alias_refcount = self.alias_refcount.copy()
299         obj.alias_map = self.alias_map.copy()
300         obj.external_aliases = self.external_aliases.copy()
301         obj.table_map = self.table_map.copy()
302         obj.where = self.where.clone()
303         obj.annotations = self.annotations.copy()
304         if self.annotation_select_mask is None:
305             obj.annotation_select_mask = None
306         else:
307             obj.annotation_select_mask = self.annotation_select_mask.copy()
308         obj.combined_queries = tuple(query.clone() for query in self.combined_queries)
309         # _annotation_select_cache cannot be copied, as doing so breaks the
310         # (necessary) state in which both annotations and
311         # _annotation_select_cache point to the same underlying objects.
312         # It will get re-populated in the cloned queryset the next time it's
313         # used.
314         obj._annotation_select_cache = None
315         obj.extra = self.extra.copy()
316         if self.extra_select_mask is None:
317             obj.extra_select_mask = None
318         else:
319             obj.extra_select_mask = self.extra_select_mask.copy()
320         if self._extra_select_cache is None:
321             obj._extra_select_cache = None
322         else:
323             obj._extra_select_cache = self._extra_select_cache.copy()
324         if self.select_related is not False:
325             # Use deepcopy because select_related stores fields in nested
326             # dicts.
327             obj.select_related = copy.deepcopy(obj.select_related)
328         if 'subq_aliases' in self.__dict__:
329             obj.subq_aliases = self.subq_aliases.copy()
330         obj.used_aliases = self.used_aliases.copy()
331         obj._filtered_relations = self._filtered_relations.copy()
332         # Clear the cached_property
333         try:
334             del obj.base_table
335         except AttributeError:
336             pass
337         return obj
338 
339     def chain(self, klass=None):
340         """
341         Return a copy of the current Query that's ready for another operation.
342         The klass argument changes the type of the Query, e.g. UpdateQuery.
343         """
344         obj = self.clone()
345         if klass and obj.__class__ != klass:
346             obj.__class__ = klass
347         if not obj.filter_is_sticky:
348             obj.used_aliases = set()
349         obj.filter_is_sticky = False
350         if hasattr(obj, '_setup_query'):
351             obj._setup_query()
352         return obj
353 
354     def relabeled_clone(self, change_map):
355         clone = self.clone()
356         clone.change_aliases(change_map)
357         return clone
358 
359     def _get_col(self, target, field, alias):
360         if not self.alias_cols:
361             alias = None
362         return target.get_col(alias, field)
363 
364     def rewrite_cols(self, annotation, col_cnt):
365         # We must make sure the inner query has the referred columns in it.
366         # If we are aggregating over an annotation, then Django uses Ref()
367         # instances to note this. However, if we are annotating over a column
368         # of a related model, then it might be that column isn't part of the
369         # SELECT clause of the inner query, and we must manually make sure
370         # the column is selected. An example case is:
371         #    .aggregate(Sum('author__awards'))
372         # Resolving this expression results in a join to author, but there
373         # is no guarantee the awards column of author is in the select clause
374         # of the query. Thus we must manually add the column to the inner
375         # query.
376         orig_exprs = annotation.get_source_expressions()
377         new_exprs = []
378         for expr in orig_exprs:
379             # FIXME: These conditions are fairly arbitrary. Identify a better
380             # method of having expressions decide which code path they should
381             # take.
382             if isinstance(expr, Ref):
383                 # Its already a Ref to subquery (see resolve_ref() for
384                 # details)
385                 new_exprs.append(expr)
386             elif isinstance(expr, (WhereNode, Lookup)):
387                 # Decompose the subexpressions further. The code here is
388                 # copied from the else clause, but this condition must appear
389                 # before the contains_aggregate/is_summary condition below.
390                 new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
391                 new_exprs.append(new_expr)
392             else:
393                 # Reuse aliases of expressions already selected in subquery.
394                 for col_alias, selected_annotation in self.annotation_select.items():
395                     if selected_annotation is expr:
396                         new_expr = Ref(col_alias, expr)
397                         break
398                 else:
399                     # An expression that is not selected the subquery.
400                     if isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):
401                         # Reference column or another aggregate. Select it
402                         # under a non-conflicting alias.
403                         col_cnt += 1
404                         col_alias = '__col%d' % col_cnt
405                         self.annotations[col_alias] = expr
406                         self.append_annotation_mask([col_alias])
407                         new_expr = Ref(col_alias, expr)
408                     else:
409                         # Some other expression not referencing database values
410                         # directly. Its subexpression might contain Cols.
411                         new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
412                 new_exprs.append(new_expr)
413         annotation.set_source_expressions(new_exprs)
414         return annotation, col_cnt
415 
416     def get_aggregation(self, using, added_aggregate_names):
417         """
418         Return the dictionary with the values of the existing aggregations.
419         """
420         if not self.annotation_select:
421             return {}
422         existing_annotations = [
423             annotation for alias, annotation
424             in self.annotations.items()
425             if alias not in added_aggregate_names
426         ]
427         # Decide if we need to use a subquery.
428         #
429         # Existing annotations would cause incorrect results as get_aggregation()
430         # must produce just one result and thus must not use GROUP BY. But we
431         # aren't smart enough to remove the existing annotations from the
432         # query, so those would force us to use GROUP BY.
433         #
434         # If the query has limit or distinct, or uses set operations, then
435         # those operations must be done in a subquery so that the query
436         # aggregates on the limit and/or distinct results instead of applying
437         # the distinct and limit after the aggregation.
438         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or
439                 self.distinct or self.combinator):
440             from django.db.models.sql.subqueries import AggregateQuery
441             outer_query = AggregateQuery(self.model)
442             inner_query = self.clone()
443             inner_query.select_for_update = False
444             inner_query.select_related = False
445             inner_query.set_annotation_mask(self.annotation_select)
446             if not self.is_sliced and not self.distinct_fields:
447                 # Queries with distinct_fields need ordering and when a limit
448                 # is applied we must take the slice from the ordered query.
449                 # Otherwise no need for ordering.
450                 inner_query.clear_ordering(True)
451             if not inner_query.distinct:
452                 # If the inner query uses default select and it has some
453                 # aggregate annotations, then we must make sure the inner
454                 # query is grouped by the main model's primary key. However,
455                 # clearing the select clause can alter results if distinct is
456                 # used.
457                 has_existing_aggregate_annotations = any(
458                     annotation for annotation in existing_annotations
459                     if getattr(annotation, 'contains_aggregate', True)
460                 )
461                 if inner_query.default_cols and has_existing_aggregate_annotations:
462                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
463                 inner_query.default_cols = False
464 
465             relabels = {t: 'subquery' for t in inner_query.alias_map}
466             relabels[None] = 'subquery'
467             # Remove any aggregates marked for reduction from the subquery
468             # and move them to the outer AggregateQuery.
469             col_cnt = 0
470             for alias, expression in list(inner_query.annotation_select.items()):
471                 annotation_select_mask = inner_query.annotation_select_mask
472                 if expression.is_summary:
473                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
474                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
475                     del inner_query.annotations[alias]
476                     annotation_select_mask.remove(alias)
477                 # Make sure the annotation_select wont use cached results.
478                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)
479             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
480                 # In case of Model.objects[0:3].count(), there would be no
481                 # field selected in the inner query, yet we must use a subquery.
482                 # So, make sure at least one field is selected.
483                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
484             try:
485                 outer_query.add_subquery(inner_query, using)
486             except EmptyResultSet:
487                 return {
488                     alias: None
489                     for alias in outer_query.annotation_select
490                 }
491         else:
492             outer_query = self
493             self.select = ()
494             self.default_cols = False
495             self.extra = {}
496 
497         outer_query.clear_ordering(True)
498         outer_query.clear_limits()
499         outer_query.select_for_update = False
500         outer_query.select_related = False
501         compiler = outer_query.get_compiler(using)
502         result = compiler.execute_sql(SINGLE)
503         if result is None:
504             result = [None] * len(outer_query.annotation_select)
505 
506         converters = compiler.get_converters(outer_query.annotation_select.values())
507         result = next(compiler.apply_converters((result,), converters))
508 
509         return dict(zip(outer_query.annotation_select, result))
510 
511     def get_count(self, using):
512         """
513         Perform a COUNT() query using the current filter constraints.
514         """
515         obj = self.clone()
516         obj.add_annotation(Count('*'), alias='__count', is_summary=True)
517         number = obj.get_aggregation(using, ['__count'])['__count']
518         if number is None:
519             number = 0
520         return number
521 
522     def has_filters(self):
523         return self.where
524 
525     def exists(self):
526         q = self.clone()
527         if not q.distinct:
528             if q.group_by is True:
529                 q.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
530                 # Disable GROUP BY aliases to avoid orphaning references to the
531                 # SELECT clause which is about to be cleared.
532                 q.set_group_by(allow_aliases=False)
533             q.clear_select_clause()
534         q.clear_ordering(True)
535         q.set_limits(high=1)
536         q.add_extra({'a': 1}, None, None, None, None, None)
537         q.set_extra_mask(['a'])
538         return q
539 
540     def has_results(self, using):
541         q = self.exists()
542         compiler = q.get_compiler(using=using)
543         return compiler.has_results()
544 
545     def explain(self, using, format=None, **options):
546         q = self.clone()
547         q.explain_query = True
548         q.explain_format = format
549         q.explain_options = options
550         compiler = q.get_compiler(using=using)
551         return '\n'.join(compiler.explain_query())
552 
553     def combine(self, rhs, connector):
554         """
555         Merge the 'rhs' query into the current one (with any 'rhs' effects
556         being applied *after* (that is, "to the right of") anything in the
557         current query. 'rhs' is not modified during a call to this function.
558 
559         The 'connector' parameter describes how to connect filters from the
560         'rhs' query.
561         """
562         assert self.model == rhs.model, \
563             "Cannot combine queries on two different base models."
564         assert not self.is_sliced, \
565             "Cannot combine queries once a slice has been taken."
566         assert self.distinct == rhs.distinct, \
567             "Cannot combine a unique query with a non-unique query."
568         assert self.distinct_fields == rhs.distinct_fields, \
569             "Cannot combine queries with different distinct fields."
570 
571         # Work out how to relabel the rhs aliases, if necessary.
572         change_map = {}
573         conjunction = (connector == AND)
574 
575         # Determine which existing joins can be reused. When combining the
576         # query with AND we must recreate all joins for m2m filters. When
577         # combining with OR we can reuse joins. The reason is that in AND
578         # case a single row can't fulfill a condition like:
579         #     revrel__col=1 & revrel__col=2
580         # But, there might be two different related rows matching this
581         # condition. In OR case a single True is enough, so single row is
582         # enough, too.
583         #
584         # Note that we will be creating duplicate joins for non-m2m joins in
585         # the AND case. The results will be correct but this creates too many
586         # joins. This is something that could be fixed later on.
587         reuse = set() if conjunction else set(self.alias_map)
588         # Base table must be present in the query - this is the same
589         # table on both sides.
590         self.get_initial_alias()
591         joinpromoter = JoinPromoter(connector, 2, False)
592         joinpromoter.add_votes(
593             j for j in self.alias_map if self.alias_map[j].join_type == INNER)
594         rhs_votes = set()
595         # Now, add the joins from rhs query into the new query (skipping base
596         # table).
597         rhs_tables = list(rhs.alias_map)[1:]
598         for alias in rhs_tables:
599             join = rhs.alias_map[alias]
600             # If the left side of the join was already relabeled, use the
601             # updated alias.
602             join = join.relabeled_clone(change_map)
603             new_alias = self.join(join, reuse=reuse)
604             if join.join_type == INNER:
605                 rhs_votes.add(new_alias)
606             # We can't reuse the same join again in the query. If we have two
607             # distinct joins for the same connection in rhs query, then the
608             # combined query must have two joins, too.
609             reuse.discard(new_alias)
610             if alias != new_alias:
611                 change_map[alias] = new_alias
612             if not rhs.alias_refcount[alias]:
613                 # The alias was unused in the rhs query. Unref it so that it
614                 # will be unused in the new query, too. We have to add and
615                 # unref the alias so that join promotion has information of
616                 # the join type for the unused alias.
617                 self.unref_alias(new_alias)
618         joinpromoter.add_votes(rhs_votes)
619         joinpromoter.update_join_types(self)
620 
621         # Now relabel a copy of the rhs where-clause and add it to the current
622         # one.
623         w = rhs.where.clone()
624         w.relabel_aliases(change_map)
625         self.where.add(w, connector)
626 
627         # Selection columns and extra extensions are those provided by 'rhs'.
628         if rhs.select:
629             self.set_select([col.relabeled_clone(change_map) for col in rhs.select])
630         else:
631             self.select = ()
632 
633         if connector == OR:
634             # It would be nice to be able to handle this, but the queries don't
635             # really make sense (or return consistent value sets). Not worth
636             # the extra complexity when you can write a real query instead.
637             if self.extra and rhs.extra:
638                 raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")
639         self.extra.update(rhs.extra)
640         extra_select_mask = set()
641         if self.extra_select_mask is not None:
642             extra_select_mask.update(self.extra_select_mask)
643         if rhs.extra_select_mask is not None:
644             extra_select_mask.update(rhs.extra_select_mask)
645         if extra_select_mask:
646             self.set_extra_mask(extra_select_mask)
647         self.extra_tables += rhs.extra_tables
648 
649         # Ordering uses the 'rhs' ordering, unless it has none, in which case
650         # the current ordering is used.
651         self.order_by = rhs.order_by or self.order_by
652         self.extra_order_by = rhs.extra_order_by or self.extra_order_by
653 
654     def deferred_to_data(self, target, callback):
655         """
656         Convert the self.deferred_loading data structure to an alternate data
657         structure, describing the field that *will* be loaded. This is used to
658         compute the columns to select from the database and also by the
659         QuerySet class to work out which fields are being initialized on each
660         model. Models that have all their fields included aren't mentioned in
661         the result, only those that have field restrictions in place.
662 
663         The "target" parameter is the instance that is populated (in place).
664         The "callback" is a function that is called whenever a (model, field)
665         pair need to be added to "target". It accepts three parameters:
666         "target", and the model and list of fields being added for that model.
667         """
668         field_names, defer = self.deferred_loading
669         if not field_names:
670             return
671         orig_opts = self.get_meta()
672         seen = {}
673         must_include = {orig_opts.concrete_model: {orig_opts.pk}}
674         for field_name in field_names:
675             parts = field_name.split(LOOKUP_SEP)
676             cur_model = self.model._meta.concrete_model
677             opts = orig_opts
678             for name in parts[:-1]:
679                 old_model = cur_model
680                 if name in self._filtered_relations:
681                     name = self._filtered_relations[name].relation_name
682                 source = opts.get_field(name)
683                 if is_reverse_o2o(source):
684                     cur_model = source.related_model
685                 else:
686                     cur_model = source.remote_field.model
687                 opts = cur_model._meta
688                 # Even if we're "just passing through" this model, we must add
689                 # both the current model's pk and the related reference field
690                 # (if it's not a reverse relation) to the things we select.
691                 if not is_reverse_o2o(source):
692                     must_include[old_model].add(source)
693                 add_to_dict(must_include, cur_model, opts.pk)
694             field = opts.get_field(parts[-1])
695             is_reverse_object = field.auto_created and not field.concrete
696             model = field.related_model if is_reverse_object else field.model
697             model = model._meta.concrete_model
698             if model == opts.model:
699                 model = cur_model
700             if not is_reverse_o2o(field):
701                 add_to_dict(seen, model, field)
702 
703         if defer:
704             # We need to load all fields for each model, except those that
705             # appear in "seen" (for all models that appear in "seen"). The only
706             # slight complexity here is handling fields that exist on parent
707             # models.
708             workset = {}
709             for model, values in seen.items():
710                 for field in model._meta.local_fields:
711                     if field not in values:
712                         m = field.model._meta.concrete_model
713                         add_to_dict(workset, m, field)
714             for model, values in must_include.items():
715                 # If we haven't included a model in workset, we don't add the
716                 # corresponding must_include fields for that model, since an
717                 # empty set means "include all fields". That's why there's no
718                 # "else" branch here.
719                 if model in workset:
720                     workset[model].update(values)
721             for model, values in workset.items():
722                 callback(target, model, values)
723         else:
724             for model, values in must_include.items():
725                 if model in seen:
726                     seen[model].update(values)
727                 else:
728                     # As we've passed through this model, but not explicitly
729                     # included any fields, we have to make sure it's mentioned
730                     # so that only the "must include" fields are pulled in.
731                     seen[model] = values
732             # Now ensure that every model in the inheritance chain is mentioned
733             # in the parent list. Again, it must be mentioned to ensure that
734             # only "must include" fields are pulled in.
735             for model in orig_opts.get_parent_list():
736                 seen.setdefault(model, set())
737             for model, values in seen.items():
738                 callback(target, model, values)
739 
740     def table_alias(self, table_name, create=False, filtered_relation=None):
741         """
742         Return a table alias for the given table_name and whether this is a
743         new alias or not.
744 
745         If 'create' is true, a new alias is always created. Otherwise, the
746         most recently created alias for the table (if one exists) is reused.
747         """
748         alias_list = self.table_map.get(table_name)
749         if not create and alias_list:
750             alias = alias_list[0]
751             self.alias_refcount[alias] += 1
752             return alias, False
753 
754         # Create a new alias for this table.
755         if alias_list:
756             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
757             alias_list.append(alias)
758         else:
759             # The first occurrence of a table uses the table name directly.
760             alias = filtered_relation.alias if filtered_relation is not None else table_name
761             self.table_map[table_name] = [alias]
762         self.alias_refcount[alias] = 1
763         return alias, True
764 
765     def ref_alias(self, alias):
766         """Increases the reference count for this alias."""
767         self.alias_refcount[alias] += 1
768 
769     def unref_alias(self, alias, amount=1):
770         """Decreases the reference count for this alias."""
771         self.alias_refcount[alias] -= amount
772 
773     def promote_joins(self, aliases):
774         """
775         Promote recursively the join type of given aliases and its children to
776         an outer join. If 'unconditional' is False, only promote the join if
777         it is nullable or the parent join is an outer join.
778 
779         The children promotion is done to avoid join chains that contain a LOUTER
780         b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,
781         then we must also promote b->c automatically, or otherwise the promotion
782         of a->b doesn't actually change anything in the query results.
783         """
784         aliases = list(aliases)
785         while aliases:
786             alias = aliases.pop(0)
787             if self.alias_map[alias].join_type is None:
788                 # This is the base table (first FROM entry) - this table
789                 # isn't really joined at all in the query, so we should not
790                 # alter its join type.
791                 continue
792             # Only the first alias (skipped above) should have None join_type
793             assert self.alias_map[alias].join_type is not None
794             parent_alias = self.alias_map[alias].parent_alias
795             parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER
796             already_louter = self.alias_map[alias].join_type == LOUTER
797             if ((self.alias_map[alias].nullable or parent_louter) and
798                     not already_louter):
799                 self.alias_map[alias] = self.alias_map[alias].promote()
800                 # Join type of 'alias' changed, so re-examine all aliases that
801                 # refer to this one.
802                 aliases.extend(
803                     join for join in self.alias_map
804                     if self.alias_map[join].parent_alias == alias and join not in aliases
805                 )
806 
807     def demote_joins(self, aliases):
808         """
809         Change join type from LOUTER to INNER for all joins in aliases.
810 
811         Similarly to promote_joins(), this method must ensure no join chains
812         containing first an outer, then an inner join are generated. If we
813         are demoting b->c join in chain a LOUTER b LOUTER c then we must
814         demote a->b automatically, or otherwise the demotion of b->c doesn't
815         actually change anything in the query results. .
816         """
817         aliases = list(aliases)
818         while aliases:
819             alias = aliases.pop(0)
820             if self.alias_map[alias].join_type == LOUTER:
821                 self.alias_map[alias] = self.alias_map[alias].demote()
822                 parent_alias = self.alias_map[alias].parent_alias
823                 if self.alias_map[parent_alias].join_type == INNER:
824                     aliases.append(parent_alias)
825 
826     def reset_refcounts(self, to_counts):
827         """
828         Reset reference counts for aliases so that they match the value passed
829         in `to_counts`.
830         """
831         for alias, cur_refcount in self.alias_refcount.copy().items():
832             unref_amount = cur_refcount - to_counts.get(alias, 0)
833             self.unref_alias(alias, unref_amount)
834 
835     def change_aliases(self, change_map):
836         """
837         Change the aliases in change_map (which maps old-alias -> new-alias),
838         relabelling any references to them in select columns and the where
839         clause.
840         """
841         assert set(change_map).isdisjoint(change_map.values())
842 
843         # 1. Update references in "select" (normal columns plus aliases),
844         # "group by" and "where".
845         self.where.relabel_aliases(change_map)
846         if isinstance(self.group_by, tuple):
847             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])
848         self.select = tuple([col.relabeled_clone(change_map) for col in self.select])
849         self.annotations = self.annotations and {
850             key: col.relabeled_clone(change_map) for key, col in self.annotations.items()
851         }
852 
853         # 2. Rename the alias in the internal table/alias datastructures.
854         for old_alias, new_alias in change_map.items():
855             if old_alias not in self.alias_map:
856                 continue
857             alias_data = self.alias_map[old_alias].relabeled_clone(change_map)
858             self.alias_map[new_alias] = alias_data
859             self.alias_refcount[new_alias] = self.alias_refcount[old_alias]
860             del self.alias_refcount[old_alias]
861             del self.alias_map[old_alias]
862 
863             table_aliases = self.table_map[alias_data.table_name]
864             for pos, alias in enumerate(table_aliases):
865                 if alias == old_alias:
866                     table_aliases[pos] = new_alias
867                     break
868         self.external_aliases = {
869             # Table is aliased or it's being changed and thus is aliased.
870             change_map.get(alias, alias): (aliased or alias in change_map)
871             for alias, aliased in self.external_aliases.items()
872         }
873 
874     def bump_prefix(self, outer_query):
875         """
876         Change the alias prefix to the next letter in the alphabet in a way
877         that the outer query's aliases and this query's aliases will not
878         conflict. Even tables that previously had no alias will get an alias
879         after this call.
880         """
881         def prefix_gen():
882             """
883             Generate a sequence of characters in alphabetical order:
884                 -> 'A', 'B', 'C', ...
885 
886             When the alphabet is finished, the sequence will continue with the
887             Cartesian product:
888                 -> 'AA', 'AB', 'AC', ...
889             """
890             alphabet = ascii_uppercase
891             prefix = chr(ord(self.alias_prefix) + 1)
892             yield prefix
893             for n in count(1):
894                 seq = alphabet[alphabet.index(prefix):] if prefix else alphabet
895                 for s in product(seq, repeat=n):
896                     yield ''.join(s)
897                 prefix = None
898 
899         if self.alias_prefix != outer_query.alias_prefix:
900             # No clashes between self and outer query should be possible.
901             return
902 
903         # Explicitly avoid infinite loop. The constant divider is based on how
904         # much depth recursive subquery references add to the stack. This value
905         # might need to be adjusted when adding or removing function calls from
906         # the code path in charge of performing these operations.
907         local_recursion_limit = sys.getrecursionlimit() // 16
908         for pos, prefix in enumerate(prefix_gen()):
909             if prefix not in self.subq_aliases:
910                 self.alias_prefix = prefix
911                 break
912             if pos > local_recursion_limit:
913                 raise RecursionError(
914                     'Maximum recursion depth exceeded: too many subqueries.'
915                 )
916         self.subq_aliases = self.subq_aliases.union([self.alias_prefix])
917         outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)
918         self.change_aliases({
919             alias: '%s%d' % (self.alias_prefix, pos)
920             for pos, alias in enumerate(self.alias_map)
921         })
922 
923     def get_initial_alias(self):
924         """
925         Return the first alias for this query, after increasing its reference
926         count.
927         """
928         if self.alias_map:
929             alias = self.base_table
930             self.ref_alias(alias)
931         else:
932             alias = self.join(BaseTable(self.get_meta().db_table, None))
933         return alias
934 
935     def count_active_tables(self):
936         """
937         Return the number of tables in this query with a non-zero reference
938         count. After execution, the reference counts are zeroed, so tables
939         added in compiler will not be seen by this method.
940         """
941         return len([1 for count in self.alias_refcount.values() if count])
942 
943     def join(self, join, reuse=None, reuse_with_filtered_relation=False):
944         """
945         Return an alias for the 'join', either reusing an existing alias for
946         that join or creating a new one. 'join' is either a
947         sql.datastructures.BaseTable or Join.
948 
949         The 'reuse' parameter can be either None which means all joins are
950         reusable, or it can be a set containing the aliases that can be reused.
951 
952         The 'reuse_with_filtered_relation' parameter is used when computing
953         FilteredRelation instances.
954 
955         A join is always created as LOUTER if the lhs alias is LOUTER to make
956         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new
957         joins are created as LOUTER if the join is nullable.
958         """
959         if reuse_with_filtered_relation and reuse:
960             reuse_aliases = [
961                 a for a, j in self.alias_map.items()
962                 if a in reuse and j.equals(join, with_filtered_relation=False)
963             ]
964         else:
965             reuse_aliases = [
966                 a for a, j in self.alias_map.items()
967                 if (reuse is None or a in reuse) and j == join
968             ]
969         if reuse_aliases:
970             if join.table_alias in reuse_aliases:
971                 reuse_alias = join.table_alias
972             else:
973                 # Reuse the most recent alias of the joined table
974                 # (a many-to-many relation may be joined multiple times).
975                 reuse_alias = reuse_aliases[-1]
976             self.ref_alias(reuse_alias)
977             return reuse_alias
978 
979         # No reuse is possible, so we need a new alias.
980         alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)
981         if join.join_type:
982             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:
983                 join_type = LOUTER
984             else:
985                 join_type = INNER
986             join.join_type = join_type
987         join.table_alias = alias
988         self.alias_map[alias] = join
989         return alias
990 
991     def join_parent_model(self, opts, model, alias, seen):
992         """
993         Make sure the given 'model' is joined in the query. If 'model' isn't
994         a parent of 'opts' or if it is None this method is a no-op.
995 
996         The 'alias' is the root alias for starting the join, 'seen' is a dict
997         of model -> alias of existing joins. It must also contain a mapping
998         of None -> some alias. This will be returned in the no-op case.
999         """
1000         if model in seen:
1001             return seen[model]
1002         chain = opts.get_base_chain(model)
1003         if not chain:
1004             return alias
1005         curr_opts = opts
1006         for int_model in chain:
1007             if int_model in seen:
1008                 curr_opts = int_model._meta
1009                 alias = seen[int_model]
1010                 continue
1011             # Proxy model have elements in base chain
1012             # with no parents, assign the new options
1013             # object and skip to the next base in that
1014             # case
1015             if not curr_opts.parents[int_model]:
1016                 curr_opts = int_model._meta
1017                 continue
1018             link_field = curr_opts.get_ancestor_link(int_model)
1019             join_info = self.setup_joins([link_field.name], curr_opts, alias)
1020             curr_opts = int_model._meta
1021             alias = seen[int_model] = join_info.joins[-1]
1022         return alias or seen[None]
1023 
1024     def add_annotation(self, annotation, alias, is_summary=False, select=True):
1025         """Add a single annotation expression to the Query."""
1026         annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
1027                                                    summarize=is_summary)
1028         if select:
1029             self.append_annotation_mask([alias])
1030         else:
1031             self.set_annotation_mask(set(self.annotation_select).difference({alias}))
1032         self.annotations[alias] = annotation
1033 
1034     def resolve_expression(self, query, *args, **kwargs):
1035         clone = self.clone()
1036         # Subqueries need to use a different set of aliases than the outer query.
1037         clone.bump_prefix(query)
1038         clone.subquery = True
1039         # It's safe to drop ordering if the queryset isn't using slicing,
1040         # distinct(*fields) or select_for_update().
1041         if (self.low_mark == 0 and self.high_mark is None and
1042                 not self.distinct_fields and
1043                 not self.select_for_update):
1044             clone.clear_ordering(True)
1045         clone.where.resolve_expression(query, *args, **kwargs)
1046         for key, value in clone.annotations.items():
1047             resolved = value.resolve_expression(query, *args, **kwargs)
1048             if hasattr(resolved, 'external_aliases'):
1049                 resolved.external_aliases.update(clone.external_aliases)
1050             clone.annotations[key] = resolved
1051         # Outer query's aliases are considered external.
1052         for alias, table in query.alias_map.items():
1053             clone.external_aliases[alias] = (
1054                 (isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias) or
1055                 (isinstance(table, BaseTable) and table.table_name != table.table_alias)
1056             )
1057         return clone
1058 
1059     def get_external_cols(self):
1060         exprs = chain(self.annotations.values(), self.where.children)
1061         return [
1062             col for col in self._gen_cols(exprs)
1063             if col.alias in self.external_aliases
1064         ]
1065 
1066     def as_sql(self, compiler, connection):
1067         sql, params = self.get_compiler(connection=connection).as_sql()
1068         if self.subquery:
1069             sql = '(%s)' % sql
1070         return sql, params
1071 
1072     def resolve_lookup_value(self, value, can_reuse, allow_joins):
1073         if hasattr(value, 'resolve_expression'):
1074             value = value.resolve_expression(
1075                 self, reuse=can_reuse, allow_joins=allow_joins,
1076             )
1077         elif isinstance(value, (list, tuple)):
1078             # The items of the iterable may be expressions and therefore need
1079             # to be resolved independently.
1080             values = (
1081                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
1082                 for sub_value in value
1083             )
1084             type_ = type(value)
1085             if hasattr(type_, '_make'):  # namedtuple
1086                 return type_(*values)
1087             return type_(values)
1088         return value
1089 
1090     def solve_lookup_type(self, lookup):
1091         """
1092         Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').
1093         """
1094         lookup_splitted = lookup.split(LOOKUP_SEP)
1095         if self.annotations:
1096             expression, expression_lookups = refs_expression(lookup_splitted, self.annotations)
1097             if expression:
1098                 return expression_lookups, (), expression
1099         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
1100         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
1101         if len(lookup_parts) > 1 and not field_parts:
1102             raise FieldError(
1103                 'Invalid lookup "%s" for model %s".' %
1104                 (lookup, self.get_meta().model.__name__)
1105             )
1106         return lookup_parts, field_parts, False
1107 
1108     def check_query_object_type(self, value, opts, field):
1109         """
1110         Check whether the object passed while querying is of the correct type.
1111         If not, raise a ValueError specifying the wrong object.
1112         """
1113         if hasattr(value, '_meta'):
1114             if not check_rel_lookup_compatibility(value._meta.model, opts, field):
1115                 raise ValueError(
1116                     'Cannot query "%s": Must be "%s" instance.' %
1117                     (value, opts.object_name))
1118 
1119     def check_related_objects(self, field, value, opts):
1120         """Check the type of object passed to query relations."""
1121         if field.is_relation:
1122             # Check that the field and the queryset use the same model in a
1123             # query like .filter(author=Author.objects.all()). For example, the
1124             # opts would be Author's (from the author field) and value.model
1125             # would be Author.objects.all() queryset's .model (Author also).
1126             # The field is the related field on the lhs side.
1127             if (isinstance(value, Query) and not value.has_select_fields and
1128                     not check_rel_lookup_compatibility(value.model, opts, field)):
1129                 raise ValueError(
1130                     'Cannot use QuerySet for "%s": Use a QuerySet for "%s".' %
1131                     (value.model._meta.object_name, opts.object_name)
1132                 )
1133             elif hasattr(value, '_meta'):
1134                 self.check_query_object_type(value, opts, field)
1135             elif hasattr(value, '__iter__'):
1136                 for v in value:
1137                     self.check_query_object_type(v, opts, field)
1138 
1139     def check_filterable(self, expression):
1140         """Raise an error if expression cannot be used in a WHERE clause."""
1141         if (
1142             hasattr(expression, 'resolve_expression') and
1143             not getattr(expression, 'filterable', True)
1144         ):
1145             raise NotSupportedError(
1146                 expression.__class__.__name__ + ' is disallowed in the filter '
1147                 'clause.'
1148             )
1149         if hasattr(expression, 'get_source_expressions'):
1150             for expr in expression.get_source_expressions():
1151                 self.check_filterable(expr)
1152 
1153     def build_lookup(self, lookups, lhs, rhs):
1154         """
1155         Try to extract transforms and lookup from given lhs.
1156 
1157         The lhs value is something that works like SQLExpression.
1158         The rhs value is what the lookup is going to compare against.
1159         The lookups is a list of names to extract using get_lookup()
1160         and get_transform().
1161         """
1162         # __exact is the default lookup if one isn't given.
1163         *transforms, lookup_name = lookups or ['exact']
1164         for name in transforms:
1165             lhs = self.try_transform(lhs, name)
1166         # First try get_lookup() so that the lookup takes precedence if the lhs
1167         # supports both transform and lookup for the name.
1168         lookup_class = lhs.get_lookup(lookup_name)
1169         if not lookup_class:
1170             if lhs.field.is_relation:
1171                 raise FieldError('Related Field got invalid lookup: {}'.format(lookup_name))
1172             # A lookup wasn't found. Try to interpret the name as a transform
1173             # and do an Exact lookup against it.
1174             lhs = self.try_transform(lhs, lookup_name)
1175             lookup_name = 'exact'
1176             lookup_class = lhs.get_lookup(lookup_name)
1177             if not lookup_class:
1178                 return
1179 
1180         lookup = lookup_class(lhs, rhs)
1181         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all
1182         # uses of None as a query value unless the lookup supports it.
1183         if lookup.rhs is None and not lookup.can_use_none_as_rhs:
1184             if lookup_name not in ('exact', 'iexact'):
1185                 raise ValueError("Cannot use None as a query value")
1186             return lhs.get_lookup('isnull')(lhs, True)
1187 
1188         # For Oracle '' is equivalent to null. The check must be done at this
1189         # stage because join promotion can't be done in the compiler. Using
1190         # DEFAULT_DB_ALIAS isn't nice but it's the best that can be done here.
1191         # A similar thing is done in is_nullable(), too.
1192         if (connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
1193                 lookup_name == 'exact' and lookup.rhs == ''):
1194             return lhs.get_lookup('isnull')(lhs, True)
1195 
1196         return lookup
1197 
1198     def try_transform(self, lhs, name):
1199         """
1200         Helper method for build_lookup(). Try to fetch and initialize
1201         a transform for name parameter from lhs.
1202         """
1203         transform_class = lhs.get_transform(name)
1204         if transform_class:
1205             return transform_class(lhs)
1206         else:
1207             output_field = lhs.output_field.__class__
1208             suggested_lookups = difflib.get_close_matches(name, output_field.get_lookups())
1209             if suggested_lookups:
1210                 suggestion = ', perhaps you meant %s?' % ' or '.join(suggested_lookups)
1211             else:
1212                 suggestion = '.'
1213             raise FieldError(
1214                 "Unsupported lookup '%s' for %s or join on the field not "
1215                 "permitted%s" % (name, output_field.__name__, suggestion)
1216             )
1217 
1218     def build_filter(self, filter_expr, branch_negated=False, current_negated=False,
1219                      can_reuse=None, allow_joins=True, split_subq=True,
1220                      reuse_with_filtered_relation=False, check_filterable=True):
1221         """
1222         Build a WhereNode for a single filter clause but don't add it
1223         to this Query. Query.add_q() will then add this filter to the where
1224         Node.
1225 
1226         The 'branch_negated' tells us if the current branch contains any
1227         negations. This will be used to determine if subqueries are needed.
1228 
1229         The 'current_negated' is used to determine if the current filter is
1230         negated or not and this will be used to determine if IS NULL filtering
1231         is needed.
1232 
1233         The difference between current_negated and branch_negated is that
1234         branch_negated is set on first negation, but current_negated is
1235         flipped for each negation.
1236 
1237         Note that add_filter will not do any negating itself, that is done
1238         upper in the code by add_q().
1239 
1240         The 'can_reuse' is a set of reusable joins for multijoins.
1241 
1242         If 'reuse_with_filtered_relation' is True, then only joins in can_reuse
1243         will be reused.
1244 
1245         The method will create a filter clause that can be added to the current
1246         query. However, if the filter isn't added to the query then the caller
1247         is responsible for unreffing the joins used.
1248         """
1249         if isinstance(filter_expr, dict):
1250             raise FieldError("Cannot parse keyword query as dict")
1251         if isinstance(filter_expr, Q):
1252             return self._add_q(
1253                 filter_expr,
1254                 branch_negated=branch_negated,
1255                 current_negated=current_negated,
1256                 used_aliases=can_reuse,
1257                 allow_joins=allow_joins,
1258                 split_subq=split_subq,
1259                 check_filterable=check_filterable,
1260             )
1261         if hasattr(filter_expr, 'resolve_expression'):
1262             if not getattr(filter_expr, 'conditional', False):
1263                 raise TypeError('Cannot filter against a non-conditional expression.')
1264             condition = self.build_lookup(
1265                 ['exact'], filter_expr.resolve_expression(self, allow_joins=allow_joins), True
1266             )
1267             clause = self.where_class()
1268             clause.add(condition, AND)
1269             return clause, []
1270         arg, value = filter_expr
1271         if not arg:
1272             raise FieldError("Cannot parse keyword query %r" % arg)
1273         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
1274 
1275         if check_filterable:
1276             self.check_filterable(reffed_expression)
1277 
1278         if not allow_joins and len(parts) > 1:
1279             raise FieldError("Joined field references are not permitted in this query")
1280 
1281         pre_joins = self.alias_refcount.copy()
1282         value = self.resolve_lookup_value(value, can_reuse, allow_joins)
1283         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}
1284 
1285         if check_filterable:
1286             self.check_filterable(value)
1287 
1288         clause = self.where_class()
1289         if reffed_expression:
1290             condition = self.build_lookup(lookups, reffed_expression, value)
1291             clause.add(condition, AND)
1292             return clause, []
1293 
1294         opts = self.get_meta()
1295         alias = self.get_initial_alias()
1296         allow_many = not branch_negated or not split_subq
1297 
1298         try:
1299             join_info = self.setup_joins(
1300                 parts, opts, alias, can_reuse=can_reuse, allow_many=allow_many,
1301                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1302             )
1303 
1304             # Prevent iterator from being consumed by check_related_objects()
1305             if isinstance(value, Iterator):
1306                 value = list(value)
1307             self.check_related_objects(join_info.final_field, value, join_info.opts)
1308 
1309             # split_exclude() needs to know which joins were generated for the
1310             # lookup parts
1311             self._lookup_joins = join_info.joins
1312         except MultiJoin as e:
1313             return self.split_exclude(filter_expr, can_reuse, e.names_with_path)
1314 
1315         # Update used_joins before trimming since they are reused to determine
1316         # which joins could be later promoted to INNER.
1317         used_joins.update(join_info.joins)
1318         targets, alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1319         if can_reuse is not None:
1320             can_reuse.update(join_list)
1321 
1322         if join_info.final_field.is_relation:
1323             # No support for transforms for relational fields
1324             num_lookups = len(lookups)
1325             if num_lookups > 1:
1326                 raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))
1327             if len(targets) == 1:
1328                 col = self._get_col(targets[0], join_info.final_field, alias)
1329             else:
1330                 col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)
1331         else:
1332             col = self._get_col(targets[0], join_info.final_field, alias)
1333 
1334         condition = self.build_lookup(lookups, col, value)
1335         lookup_type = condition.lookup_name
1336         clause.add(condition, AND)
1337 
1338         require_outer = lookup_type == 'isnull' and condition.rhs is True and not current_negated
1339         if current_negated and (lookup_type != 'isnull' or condition.rhs is False) and condition.rhs is not None:
1340             require_outer = True
1341             if lookup_type != 'isnull':
1342                 # The condition added here will be SQL like this:
1343                 # NOT (col IS NOT NULL), where the first NOT is added in
1344                 # upper layers of code. The reason for addition is that if col
1345                 # is null, then col != someval will result in SQL "unknown"
1346                 # which isn't the same as in Python. The Python None handling
1347                 # is wanted, and it can be gotten by
1348                 # (col IS NULL OR col != someval)
1349                 #   <=>
1350                 # NOT (col IS NOT NULL AND col = someval).
1351                 if (
1352                     self.is_nullable(targets[0]) or
1353                     self.alias_map[join_list[-1]].join_type == LOUTER
1354                 ):
1355                     lookup_class = targets[0].get_lookup('isnull')
1356                     col = self._get_col(targets[0], join_info.targets[0], alias)
1357                     clause.add(lookup_class(col, False), AND)
1358                 # If someval is a nullable column, someval IS NOT NULL is
1359                 # added.
1360                 if isinstance(value, Col) and self.is_nullable(value.target):
1361                     lookup_class = value.target.get_lookup('isnull')
1362                     clause.add(lookup_class(value, False), AND)
1363         return clause, used_joins if not require_outer else ()
1364 
1365     def add_filter(self, filter_clause):
1366         self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))
1367 
1368     def add_q(self, q_object):
1369         """
1370         A preprocessor for the internal _add_q(). Responsible for doing final
1371         join promotion.
1372         """
1373         # For join promotion this case is doing an AND for the added q_object
1374         # and existing conditions. So, any existing inner join forces the join
1375         # type to remain inner. Existing outer joins can however be demoted.
1376         # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if
1377         # rel_a doesn't produce any rows, then the whole condition must fail.
1378         # So, demotion is OK.
1379         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}
1380         clause, _ = self._add_q(q_object, self.used_aliases)
1381         if clause:
1382             self.where.add(clause, AND)
1383         self.demote_joins(existing_inner)
1384 
1385     def build_where(self, filter_expr):
1386         return self.build_filter(filter_expr, allow_joins=False)[0]
1387 
1388     def _add_q(self, q_object, used_aliases, branch_negated=False,
1389                current_negated=False, allow_joins=True, split_subq=True,
1390                check_filterable=True):
1391         """Add a Q-object to the current filter."""
1392         connector = q_object.connector
1393         current_negated = current_negated ^ q_object.negated
1394         branch_negated = branch_negated or q_object.negated
1395         target_clause = self.where_class(connector=connector,
1396                                          negated=q_object.negated)
1397         joinpromoter = JoinPromoter(q_object.connector, len(q_object.children), current_negated)
1398         for child in q_object.children:
1399             child_clause, needed_inner = self.build_filter(
1400                 child, can_reuse=used_aliases, branch_negated=branch_negated,
1401                 current_negated=current_negated, allow_joins=allow_joins,
1402                 split_subq=split_subq, check_filterable=check_filterable,
1403             )
1404             joinpromoter.add_votes(needed_inner)
1405             if child_clause:
1406                 target_clause.add(child_clause, connector)
1407         needed_inner = joinpromoter.update_join_types(self)
1408         return target_clause, needed_inner
1409 
1410     def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
1411         """Add a FilteredRelation object to the current filter."""
1412         connector = q_object.connector
1413         current_negated ^= q_object.negated
1414         branch_negated = branch_negated or q_object.negated
1415         target_clause = self.where_class(connector=connector, negated=q_object.negated)
1416         for child in q_object.children:
1417             if isinstance(child, Node):
1418                 child_clause = self.build_filtered_relation_q(
1419                     child, reuse=reuse, branch_negated=branch_negated,
1420                     current_negated=current_negated,
1421                 )
1422             else:
1423                 child_clause, _ = self.build_filter(
1424                     child, can_reuse=reuse, branch_negated=branch_negated,
1425                     current_negated=current_negated,
1426                     allow_joins=True, split_subq=False,
1427                     reuse_with_filtered_relation=True,
1428                 )
1429             target_clause.add(child_clause, connector)
1430         return target_clause
1431 
1432     def add_filtered_relation(self, filtered_relation, alias):
1433         filtered_relation.alias = alias
1434         lookups = dict(get_children_from_q(filtered_relation.condition))
1435         relation_lookup_parts, relation_field_parts, _ = self.solve_lookup_type(filtered_relation.relation_name)
1436         if relation_lookup_parts:
1437             raise ValueError(
1438                 "FilteredRelation's relation_name cannot contain lookups "
1439                 "(got %r)." % filtered_relation.relation_name
1440             )
1441         for lookup in chain(lookups):
1442             lookup_parts, lookup_field_parts, _ = self.solve_lookup_type(lookup)
1443             shift = 2 if not lookup_parts else 1
1444             lookup_field_path = lookup_field_parts[:-shift]
1445             for idx, lookup_field_part in enumerate(lookup_field_path):
1446                 if len(relation_field_parts) > idx:
1447                     if relation_field_parts[idx] != lookup_field_part:
1448                         raise ValueError(
1449                             "FilteredRelation's condition doesn't support "
1450                             "relations outside the %r (got %r)."
1451                             % (filtered_relation.relation_name, lookup)
1452                         )
1453                 else:
1454                     raise ValueError(
1455                         "FilteredRelation's condition doesn't support nested "
1456                         "relations deeper than the relation_name (got %r for "
1457                         "%r)." % (lookup, filtered_relation.relation_name)
1458                     )
1459         self._filtered_relations[filtered_relation.alias] = filtered_relation
1460 
1461     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
1462         """
1463         Walk the list of names and turns them into PathInfo tuples. A single
1464         name in 'names' can generate multiple PathInfos (m2m, for example).
1465 
1466         'names' is the path of names to travel, 'opts' is the model Options we
1467         start the name resolving from, 'allow_many' is as for setup_joins().
1468         If fail_on_missing is set to True, then a name that can't be resolved
1469         will generate a FieldError.
1470 
1471         Return a list of PathInfo tuples. In addition return the final field
1472         (the last used join field) and target (which is a field guaranteed to
1473         contain the same value as the final field). Finally, return those names
1474         that weren't found (which are likely transforms and the final lookup).
1475         """
1476         path, names_with_path = [], []
1477         for pos, name in enumerate(names):
1478             cur_names_with_path = (name, [])
1479             if name == 'pk':
1480                 name = opts.pk.name
1481 
1482             field = None
1483             filtered_relation = None
1484             try:
1485                 field = opts.get_field(name)
1486             except FieldDoesNotExist:
1487                 if name in self.annotation_select:
1488                     field = self.annotation_select[name].output_field
1489                 elif name in self._filtered_relations and pos == 0:
1490                     filtered_relation = self._filtered_relations[name]
1491                     if LOOKUP_SEP in filtered_relation.relation_name:
1492                         parts = filtered_relation.relation_name.split(LOOKUP_SEP)
1493                         filtered_relation_path, field, _, _ = self.names_to_path(
1494                             parts, opts, allow_many, fail_on_missing,
1495                         )
1496                         path.extend(filtered_relation_path[:-1])
1497                     else:
1498                         field = opts.get_field(filtered_relation.relation_name)
1499             if field is not None:
1500                 # Fields that contain one-to-many relations with a generic
1501                 # model (like a GenericForeignKey) cannot generate reverse
1502                 # relations and therefore cannot be used for reverse querying.
1503                 if field.is_relation and not field.related_model:
1504                     raise FieldError(
1505                         "Field %r does not generate an automatic reverse "
1506                         "relation and therefore cannot be used for reverse "
1507                         "querying. If it is a GenericForeignKey, consider "
1508                         "adding a GenericRelation." % name
1509                     )
1510                 try:
1511                     model = field.model._meta.concrete_model
1512                 except AttributeError:
1513                     # QuerySet.annotate() may introduce fields that aren't
1514                     # attached to a model.
1515                     model = None
1516             else:
1517                 # We didn't find the current field, so move position back
1518                 # one step.
1519                 pos -= 1
1520                 if pos == -1 or fail_on_missing:
1521                     available = sorted([
1522                         *get_field_names_from_opts(opts),
1523                         *self.annotation_select,
1524                         *self._filtered_relations,
1525                     ])
1526                     raise FieldError("Cannot resolve keyword '%s' into field. "
1527                                      "Choices are: %s" % (name, ", ".join(available)))
1528                 break
1529             # Check if we need any joins for concrete inheritance cases (the
1530             # field lives in parent, but we are currently in one of its
1531             # children)
1532             if model is not opts.model:
1533                 path_to_parent = opts.get_path_to_parent(model)
1534                 if path_to_parent:
1535                     path.extend(path_to_parent)
1536                     cur_names_with_path[1].extend(path_to_parent)
1537                     opts = path_to_parent[-1].to_opts
1538             if hasattr(field, 'get_path_info'):
1539                 pathinfos = field.get_path_info(filtered_relation)
1540                 if not allow_many:
1541                     for inner_pos, p in enumerate(pathinfos):
1542                         if p.m2m:
1543                             cur_names_with_path[1].extend(pathinfos[0:inner_pos + 1])
1544                             names_with_path.append(cur_names_with_path)
1545                             raise MultiJoin(pos + 1, names_with_path)
1546                 last = pathinfos[-1]
1547                 path.extend(pathinfos)
1548                 final_field = last.join_field
1549                 opts = last.to_opts
1550                 targets = last.target_fields
1551                 cur_names_with_path[1].extend(pathinfos)
1552                 names_with_path.append(cur_names_with_path)
1553             else:
1554                 # Local non-relational field.
1555                 final_field = field
1556                 targets = (field,)
1557                 if fail_on_missing and pos + 1 != len(names):
1558                     raise FieldError(
1559                         "Cannot resolve keyword %r into field. Join on '%s'"
1560                         " not permitted." % (names[pos + 1], name))
1561                 break
1562         return path, final_field, targets, names[pos + 1:]
1563 
1564     def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True,
1565                     reuse_with_filtered_relation=False):
1566         """
1567         Compute the necessary table joins for the passage through the fields
1568         given in 'names'. 'opts' is the Options class for the current model
1569         (which gives the table we are starting from), 'alias' is the alias for
1570         the table to start the joining from.
1571 
1572         The 'can_reuse' defines the reverse foreign key joins we can reuse. It
1573         can be None in which case all joins are reusable or a set of aliases
1574         that can be reused. Note that non-reverse foreign keys are always
1575         reusable when using setup_joins().
1576 
1577         The 'reuse_with_filtered_relation' can be used to force 'can_reuse'
1578         parameter and force the relation on the given connections.
1579 
1580         If 'allow_many' is False, then any reverse foreign key seen will
1581         generate a MultiJoin exception.
1582 
1583         Return the final field involved in the joins, the target field (used
1584         for any 'where' constraint), the final 'opts' value, the joins, the
1585         field path traveled to generate the joins, and a transform function
1586         that takes a field and alias and is equivalent to `field.get_col(alias)`
1587         in the simple case but wraps field transforms if they were included in
1588         names.
1589 
1590         The target field is the field containing the concrete value. Final
1591         field can be something different, for example foreign key pointing to
1592         that value. Final field is needed for example in some value
1593         conversions (convert 'obj' in fk__id=obj to pk val using the foreign
1594         key field for example).
1595         """
1596         joins = [alias]
1597         # The transform can't be applied yet, as joins must be trimmed later.
1598         # To avoid making every caller of this method look up transforms
1599         # directly, compute transforms here and create a partial that converts
1600         # fields to the appropriate wrapped version.
1601 
1602         def final_transformer(field, alias):
1603             return field.get_col(alias)
1604 
1605         # Try resolving all the names as fields first. If there's an error,
1606         # treat trailing names as lookups until a field can be resolved.
1607         last_field_exception = None
1608         for pivot in range(len(names), 0, -1):
1609             try:
1610                 path, final_field, targets, rest = self.names_to_path(
1611                     names[:pivot], opts, allow_many, fail_on_missing=True,
1612                 )
1613             except FieldError as exc:
1614                 if pivot == 1:
1615                     # The first item cannot be a lookup, so it's safe
1616                     # to raise the field error here.
1617                     raise
1618                 else:
1619                     last_field_exception = exc
1620             else:
1621                 # The transforms are the remaining items that couldn't be
1622                 # resolved into fields.
1623                 transforms = names[pivot:]
1624                 break
1625         for name in transforms:
1626             def transform(field, alias, *, name, previous):
1627                 try:
1628                     wrapped = previous(field, alias)
1629                     return self.try_transform(wrapped, name)
1630                 except FieldError:
1631                     # FieldError is raised if the transform doesn't exist.
1632                     if isinstance(final_field, Field) and last_field_exception:
1633                         raise last_field_exception
1634                     else:
1635                         raise
1636             final_transformer = functools.partial(transform, name=name, previous=final_transformer)
1637         # Then, add the path to the query's joins. Note that we can't trim
1638         # joins at this stage - we will need the information about join type
1639         # of the trimmed joins.
1640         for join in path:
1641             if join.filtered_relation:
1642                 filtered_relation = join.filtered_relation.clone()
1643                 table_alias = filtered_relation.alias
1644             else:
1645                 filtered_relation = None
1646                 table_alias = None
1647             opts = join.to_opts
1648             if join.direct:
1649                 nullable = self.is_nullable(join.join_field)
1650             else:
1651                 nullable = True
1652             connection = Join(
1653                 opts.db_table, alias, table_alias, INNER, join.join_field,
1654                 nullable, filtered_relation=filtered_relation,
1655             )
1656             reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None
1657             alias = self.join(
1658                 connection, reuse=reuse,
1659                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1660             )
1661             joins.append(alias)
1662             if filtered_relation:
1663                 filtered_relation.path = joins[:]
1664         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)
1665 
1666     def trim_joins(self, targets, joins, path):
1667         """
1668         The 'target' parameter is the final field being joined to, 'joins'
1669         is the full list of join aliases. The 'path' contain the PathInfos
1670         used to create the joins.
1671 
1672         Return the final target field and table alias and the new active
1673         joins.
1674 
1675         Always trim any direct join if the target column is already in the
1676         previous table. Can't trim reverse joins as it's unknown if there's
1677         anything on the other side of the join.
1678         """
1679         joins = joins[:]
1680         for pos, info in enumerate(reversed(path)):
1681             if len(joins) == 1 or not info.direct:
1682                 break
1683             if info.filtered_relation:
1684                 break
1685             join_targets = {t.column for t in info.join_field.foreign_related_fields}
1686             cur_targets = {t.column for t in targets}
1687             if not cur_targets.issubset(join_targets):
1688                 break
1689             targets_dict = {r[1].column: r[0] for r in info.join_field.related_fields if r[1].column in cur_targets}
1690             targets = tuple(targets_dict[t.column] for t in targets)
1691             self.unref_alias(joins.pop())
1692         return targets, joins[-1], joins
1693 
1694     @classmethod
1695     def _gen_cols(cls, exprs):
1696         for expr in exprs:
1697             if isinstance(expr, Col):
1698                 yield expr
1699             else:
1700                 yield from cls._gen_cols(expr.get_source_expressions())
1701 
1702     @classmethod
1703     def _gen_col_aliases(cls, exprs):
1704         yield from (expr.alias for expr in cls._gen_cols(exprs))
1705 
1706     def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False):
1707         if not allow_joins and LOOKUP_SEP in name:
1708             raise FieldError("Joined field references are not permitted in this query")
1709         annotation = self.annotations.get(name)
1710         if annotation is not None:
1711             if not allow_joins:
1712                 for alias in self._gen_col_aliases([annotation]):
1713                     if isinstance(self.alias_map[alias], Join):
1714                         raise FieldError(
1715                             'Joined field references are not permitted in '
1716                             'this query'
1717                         )
1718             if summarize:
1719                 # Summarize currently means we are doing an aggregate() query
1720                 # which is executed as a wrapped subquery if any of the
1721                 # aggregate() elements reference an existing annotation. In
1722                 # that case we need to return a Ref to the subquery's annotation.
1723                 if name not in self.annotation_select:
1724                     raise FieldError(
1725                         "Cannot aggregate over the '%s' alias. Use annotate() "
1726                         "to promote it." % name
1727                     )
1728                 return Ref(name, self.annotation_select[name])
1729             else:
1730                 return annotation
1731         else:
1732             field_list = name.split(LOOKUP_SEP)
1733             join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)
1734             targets, final_alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1735             if not allow_joins and len(join_list) > 1:
1736                 raise FieldError('Joined field references are not permitted in this query')
1737             if len(targets) > 1:
1738                 raise FieldError("Referencing multicolumn fields with F() objects "
1739                                  "isn't supported")
1740             # Verify that the last lookup in name is a field or a transform:
1741             # transform_function() raises FieldError if not.
1742             join_info.transform_function(targets[0], final_alias)
1743             if reuse is not None:
1744                 reuse.update(join_list)
1745             return self._get_col(targets[0], join_info.targets[0], join_list[-1])
1746 
1747     def split_exclude(self, filter_expr, can_reuse, names_with_path):
1748         """
1749         When doing an exclude against any kind of N-to-many relation, we need
1750         to use a subquery. This method constructs the nested query, given the
1751         original exclude filter (filter_expr) and the portion up to the first
1752         N-to-many relation field.
1753 
1754         For example, if the origin filter is ~Q(child__name='foo'), filter_expr
1755         is ('child__name', 'foo') and can_reuse is a set of joins usable for
1756         filters in the original query.
1757 
1758         We will turn this into equivalent of:
1759             WHERE NOT (pk IN (SELECT parent_id FROM thetable
1760                               WHERE name = 'foo' AND parent_id IS NOT NULL))
1761 
1762         It might be worth it to consider using WHERE NOT EXISTS as that has
1763         saner null handling, and is easier for the backend's optimizer to
1764         handle.
1765         """
1766         filter_lhs, filter_rhs = filter_expr
1767         if isinstance(filter_rhs, OuterRef):
1768             filter_expr = (filter_lhs, OuterRef(filter_rhs))
1769         elif isinstance(filter_rhs, F):
1770             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
1771         # Generate the inner query.
1772         query = Query(self.model)
1773         query._filtered_relations = self._filtered_relations
1774         query.add_filter(filter_expr)
1775         query.clear_ordering(True)
1776         # Try to have as simple as possible subquery -> trim leading joins from
1777         # the subquery.
1778         trimmed_prefix, contains_louter = query.trim_start(names_with_path)
1779 
1780         # Add extra check to make sure the selected field will not be null
1781         # since we are adding an IN <subquery> clause. This prevents the
1782         # database from tripping over IN (...,NULL,...) selects and returning
1783         # nothing
1784         col = query.select[0]
1785         select_field = col.target
1786         alias = col.alias
1787         if self.is_nullable(select_field):
1788             lookup_class = select_field.get_lookup('isnull')
1789             lookup = lookup_class(select_field.get_col(alias), False)
1790             query.where.add(lookup, AND)
1791         if alias in can_reuse:
1792             pk = select_field.model._meta.pk
1793             # Need to add a restriction so that outer query's filters are in effect for
1794             # the subquery, too.
1795             query.bump_prefix(self)
1796             lookup_class = select_field.get_lookup('exact')
1797             # Note that the query.select[0].alias is different from alias
1798             # due to bump_prefix above.
1799             lookup = lookup_class(pk.get_col(query.select[0].alias),
1800                                   pk.get_col(alias))
1801             query.where.add(lookup, AND)
1802             query.external_aliases[alias] = True
1803 
1804         condition, needed_inner = self.build_filter(
1805             ('%s__in' % trimmed_prefix, query),
1806             current_negated=True, branch_negated=True, can_reuse=can_reuse)
1807         if contains_louter:
1808             or_null_condition, _ = self.build_filter(
1809                 ('%s__isnull' % trimmed_prefix, True),
1810                 current_negated=True, branch_negated=True, can_reuse=can_reuse)
1811             condition.add(or_null_condition, OR)
1812             # Note that the end result will be:
1813             # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.
1814             # This might look crazy but due to how IN works, this seems to be
1815             # correct. If the IS NOT NULL check is removed then outercol NOT
1816             # IN will return UNKNOWN. If the IS NULL check is removed, then if
1817             # outercol IS NULL we will not match the row.
1818         return condition, needed_inner
1819 
1820     def set_empty(self):
1821         self.where.add(NothingNode(), AND)
1822         for query in self.combined_queries:
1823             query.set_empty()
1824 
1825     def is_empty(self):
1826         return any(isinstance(c, NothingNode) for c in self.where.children)
1827 
1828     def set_limits(self, low=None, high=None):
1829         """
1830         Adjust the limits on the rows retrieved. Use low/high to set these,
1831         as it makes it more Pythonic to read and write. When the SQL query is
1832         created, convert them to the appropriate offset and limit values.
1833 
1834         Apply any limits passed in here to the existing constraints. Add low
1835         to the current low value and clamp both to any existing high value.
1836         """
1837         if high is not None:
1838             if self.high_mark is not None:
1839                 self.high_mark = min(self.high_mark, self.low_mark + high)
1840             else:
1841                 self.high_mark = self.low_mark + high
1842         if low is not None:
1843             if self.high_mark is not None:
1844                 self.low_mark = min(self.high_mark, self.low_mark + low)
1845             else:
1846                 self.low_mark = self.low_mark + low
1847 
1848         if self.low_mark == self.high_mark:
1849             self.set_empty()
1850 
1851     def clear_limits(self):
1852         """Clear any existing limits."""
1853         self.low_mark, self.high_mark = 0, None
1854 
1855     @property
1856     def is_sliced(self):
1857         return self.low_mark != 0 or self.high_mark is not None
1858 
1859     def has_limit_one(self):
1860         return self.high_mark is not None and (self.high_mark - self.low_mark) == 1
1861 
1862     def can_filter(self):
1863         """
1864         Return True if adding filters to this instance is still possible.
1865 
1866         Typically, this means no limits or offsets have been put on the results.
1867         """
1868         return not self.is_sliced
1869 
1870     def clear_select_clause(self):
1871         """Remove all fields from SELECT clause."""
1872         self.select = ()
1873         self.default_cols = False
1874         self.select_related = False
1875         self.set_extra_mask(())
1876         self.set_annotation_mask(())
1877 
1878     def clear_select_fields(self):
1879         """
1880         Clear the list of fields to select (but not extra_select columns).
1881         Some queryset types completely replace any existing list of select
1882         columns.
1883         """
1884         self.select = ()
1885         self.values_select = ()
1886 
1887     def add_select_col(self, col):
1888         self.select += col,
1889         self.values_select += col.output_field.name,
1890 
1891     def set_select(self, cols):
1892         self.default_cols = False
1893         self.select = tuple(cols)
1894 
1895     def add_distinct_fields(self, *field_names):
1896         """
1897         Add and resolve the given fields to the query's "distinct on" clause.
1898         """
1899         self.distinct_fields = field_names
1900         self.distinct = True
1901 
1902     def add_fields(self, field_names, allow_m2m=True):
1903         """
1904         Add the given (model) fields to the select set. Add the field names in
1905         the order specified.
1906         """
1907         alias = self.get_initial_alias()
1908         opts = self.get_meta()
1909 
1910         try:
1911             cols = []
1912             for name in field_names:
1913                 # Join promotion note - we must not remove any rows here, so
1914                 # if there is no existing joins, use outer join.
1915                 join_info = self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m)
1916                 targets, final_alias, joins = self.trim_joins(
1917                     join_info.targets,
1918                     join_info.joins,
1919                     join_info.path,
1920                 )
1921                 for target in targets:
1922                     cols.append(join_info.transform_function(target, final_alias))
1923             if cols:
1924                 self.set_select(cols)
1925         except MultiJoin:
1926             raise FieldError("Invalid field name: '%s'" % name)
1927         except FieldError:
1928             if LOOKUP_SEP in name:
1929                 # For lookups spanning over relationships, show the error
1930                 # from the model on which the lookup failed.
1931                 raise
1932             elif name in self.annotations:
1933                 raise FieldError(
1934                     "Cannot select the '%s' alias. Use annotate() to promote "
1935                     "it." % name
1936                 )
1937             else:
1938                 names = sorted([
1939                     *get_field_names_from_opts(opts), *self.extra,
1940                     *self.annotation_select, *self._filtered_relations
1941                 ])
1942                 raise FieldError("Cannot resolve keyword %r into field. "
1943                                  "Choices are: %s" % (name, ", ".join(names)))
1944 
1945     def add_ordering(self, *ordering):
1946         """
1947         Add items from the 'ordering' sequence to the query's "order by"
1948         clause. These items are either field names (not column names) --
1949         possibly with a direction prefix ('-' or '?') -- or OrderBy
1950         expressions.
1951 
1952         If 'ordering' is empty, clear all ordering from the query.
1953         """
1954         errors = []
1955         for item in ordering:
1956             if isinstance(item, str):
1957                 if '.' in item:
1958                     warnings.warn(
1959                         'Passing column raw column aliases to order_by() is '
1960                         'deprecated. Wrap %r in a RawSQL expression before '
1961                         'passing it to order_by().' % item,
1962                         category=RemovedInDjango40Warning,
1963                         stacklevel=3,
1964                     )
1965                     continue
1966                 if item == '?':
1967                     continue
1968                 if item.startswith('-'):
1969                     item = item[1:]
1970                 if item in self.annotations:
1971                     continue
1972                 if self.extra and item in self.extra:
1973                     continue
1974                 # names_to_path() validates the lookup. A descriptive
1975                 # FieldError will be raise if it's not.
1976                 self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)
1977             elif not hasattr(item, 'resolve_expression'):
1978                 errors.append(item)
1979             if getattr(item, 'contains_aggregate', False):
1980                 raise FieldError(
1981                     'Using an aggregate in order_by() without also including '
1982                     'it in annotate() is not allowed: %s' % item
1983                 )
1984         if errors:
1985             raise FieldError('Invalid order_by arguments: %s' % errors)
1986         if ordering:
1987             self.order_by += ordering
1988         else:
1989             self.default_ordering = False
1990 
1991     def clear_ordering(self, force_empty):
1992         """
1993         Remove any ordering settings. If 'force_empty' is True, there will be
1994         no ordering in the resulting query (not even the model's default).
1995         """
1996         self.order_by = ()
1997         self.extra_order_by = ()
1998         if force_empty:
1999             self.default_ordering = False
2000 
2001     def set_group_by(self, allow_aliases=True):
2002         """
2003         Expand the GROUP BY clause required by the query.
2004 
2005         This will usually be the set of all non-aggregate fields in the
2006         return data. If the database backend supports grouping by the
2007         primary key, and the query would be equivalent, the optimization
2008         will be made automatically.
2009         """
2010         # Column names from JOINs to check collisions with aliases.
2011         if allow_aliases:
2012             column_names = set()
2013             seen_models = set()
2014             for join in list(self.alias_map.values())[1:]:  # Skip base table.
2015                 model = join.join_field.related_model
2016                 if model not in seen_models:
2017                     column_names.update({
2018                         field.column
2019                         for field in model._meta.local_concrete_fields
2020                     })
2021                     seen_models.add(model)
2022 
2023         group_by = list(self.select)
2024         if self.annotation_select:
2025             for alias, annotation in self.annotation_select.items():
2026                 signature = inspect.signature(annotation.get_group_by_cols)
2027                 if 'alias' not in signature.parameters:
2028                     annotation_class = annotation.__class__
2029                     msg = (
2030                         '`alias=None` must be added to the signature of '
2031                         '%s.%s.get_group_by_cols().'
2032                     ) % (annotation_class.__module__, annotation_class.__qualname__)
2033                     warnings.warn(msg, category=RemovedInDjango40Warning)
2034                     group_by_cols = annotation.get_group_by_cols()
2035                 else:
2036                     if not allow_aliases or alias in column_names:
2037                         alias = None
2038                     group_by_cols = annotation.get_group_by_cols(alias=alias)
2039                 group_by.extend(group_by_cols)
2040         self.group_by = tuple(group_by)
2041 
2042     def add_select_related(self, fields):
2043         """
2044         Set up the select_related data structure so that we only select
2045         certain related models (as opposed to all models, when
2046         self.select_related=True).
2047         """
2048         if isinstance(self.select_related, bool):
2049             field_dict = {}
2050         else:
2051             field_dict = self.select_related
2052         for field in fields:
2053             d = field_dict
2054             for part in field.split(LOOKUP_SEP):
2055                 d = d.setdefault(part, {})
2056         self.select_related = field_dict
2057 
2058     def add_extra(self, select, select_params, where, params, tables, order_by):
2059         """
2060         Add data to the various extra_* attributes for user-created additions
2061         to the query.
2062         """
2063         if select:
2064             # We need to pair any placeholder markers in the 'select'
2065             # dictionary with their parameters in 'select_params' so that
2066             # subsequent updates to the select dictionary also adjust the
2067             # parameters appropriately.
2068             select_pairs = {}
2069             if select_params:
2070                 param_iter = iter(select_params)
2071             else:
2072                 param_iter = iter([])
2073             for name, entry in select.items():
2074                 entry = str(entry)
2075                 entry_params = []
2076                 pos = entry.find("%s")
2077                 while pos != -1:
2078                     if pos == 0 or entry[pos - 1] != '%':
2079                         entry_params.append(next(param_iter))
2080                     pos = entry.find("%s", pos + 2)
2081                 select_pairs[name] = (entry, entry_params)
2082             self.extra.update(select_pairs)
2083         if where or params:
2084             self.where.add(ExtraWhere(where, params), AND)
2085         if tables:
2086             self.extra_tables += tuple(tables)
2087         if order_by:
2088             self.extra_order_by = order_by
2089 
2090     def clear_deferred_loading(self):
2091         """Remove any fields from the deferred loading set."""
2092         self.deferred_loading = (frozenset(), True)
2093 
2094     def add_deferred_loading(self, field_names):
2095         """
2096         Add the given list of model field names to the set of fields to
2097         exclude from loading from the database when automatic column selection
2098         is done. Add the new field names to any existing field names that
2099         are deferred (or removed from any existing field names that are marked
2100         as the only ones for immediate loading).
2101         """
2102         # Fields on related models are stored in the literal double-underscore
2103         # format, so that we can use a set datastructure. We do the foo__bar
2104         # splitting and handling when computing the SQL column names (as part of
2105         # get_columns()).
2106         existing, defer = self.deferred_loading
2107         if defer:
2108             # Add to existing deferred names.
2109             self.deferred_loading = existing.union(field_names), True
2110         else:
2111             # Remove names from the set of any existing "immediate load" names.
2112             self.deferred_loading = existing.difference(field_names), False
2113 
2114     def add_immediate_loading(self, field_names):
2115         """
2116         Add the given list of model field names to the set of fields to
2117         retrieve when the SQL is executed ("immediate loading" fields). The
2118         field names replace any existing immediate loading field names. If
2119         there are field names already specified for deferred loading, remove
2120         those names from the new field_names before storing the new names
2121         for immediate loading. (That is, immediate loading overrides any
2122         existing immediate values, but respects existing deferrals.)
2123         """
2124         existing, defer = self.deferred_loading
2125         field_names = set(field_names)
2126         if 'pk' in field_names:
2127             field_names.remove('pk')
2128             field_names.add(self.get_meta().pk.name)
2129 
2130         if defer:
2131             # Remove any existing deferred names from the current set before
2132             # setting the new names.
2133             self.deferred_loading = field_names.difference(existing), False
2134         else:
2135             # Replace any existing "immediate load" field names.
2136             self.deferred_loading = frozenset(field_names), False
2137 
2138     def get_loaded_field_names(self):
2139         """
2140         If any fields are marked to be deferred, return a dictionary mapping
2141         models to a set of names in those fields that will be loaded. If a
2142         model is not in the returned dictionary, none of its fields are
2143         deferred.
2144 
2145         If no fields are marked for deferral, return an empty dictionary.
2146         """
2147         # We cache this because we call this function multiple times
2148         # (compiler.fill_related_selections, query.iterator)
2149         try:
2150             return self._loaded_field_names_cache
2151         except AttributeError:
2152             collection = {}
2153             self.deferred_to_data(collection, self.get_loaded_field_names_cb)
2154             self._loaded_field_names_cache = collection
2155             return collection
2156 
2157     def get_loaded_field_names_cb(self, target, model, fields):
2158         """Callback used by get_deferred_field_names()."""
2159         target[model] = {f.attname for f in fields}
2160 
2161     def set_annotation_mask(self, names):
2162         """Set the mask of annotations that will be returned by the SELECT."""
2163         if names is None:
2164             self.annotation_select_mask = None
2165         else:
2166             self.annotation_select_mask = set(names)
2167         self._annotation_select_cache = None
2168 
2169     def append_annotation_mask(self, names):
2170         if self.annotation_select_mask is not None:
2171             self.set_annotation_mask(self.annotation_select_mask.union(names))
2172 
2173     def set_extra_mask(self, names):
2174         """
2175         Set the mask of extra select items that will be returned by SELECT.
2176         Don't remove them from the Query since they might be used later.
2177         """
2178         if names is None:
2179             self.extra_select_mask = None
2180         else:
2181             self.extra_select_mask = set(names)
2182         self._extra_select_cache = None
2183 
2184     def set_values(self, fields):
2185         self.select_related = False
2186         self.clear_deferred_loading()
2187         self.clear_select_fields()
2188 
2189         if fields:
2190             field_names = []
2191             extra_names = []
2192             annotation_names = []
2193             if not self.extra and not self.annotations:
2194                 # Shortcut - if there are no extra or annotations, then
2195                 # the values() clause must be just field names.
2196                 field_names = list(fields)
2197             else:
2198                 self.default_cols = False
2199                 for f in fields:
2200                     if f in self.extra_select:
2201                         extra_names.append(f)
2202                     elif f in self.annotation_select:
2203                         annotation_names.append(f)
2204                     else:
2205                         field_names.append(f)
2206             self.set_extra_mask(extra_names)
2207             self.set_annotation_mask(annotation_names)
2208         else:
2209             field_names = [f.attname for f in self.model._meta.concrete_fields]
2210         # Selected annotations must be known before setting the GROUP BY
2211         # clause.
2212         if self.group_by is True:
2213             self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
2214             # Disable GROUP BY aliases to avoid orphaning references to the
2215             # SELECT clause which is about to be cleared.
2216             self.set_group_by(allow_aliases=False)
2217             self.clear_select_fields()
2218         elif self.group_by:
2219             # Resolve GROUP BY annotation references if they are not part of
2220             # the selected fields anymore.
2221             group_by = []
2222             for expr in self.group_by:
2223                 if isinstance(expr, Ref) and expr.refs not in field_names:
2224                     expr = self.annotations[expr.refs]
2225                 group_by.append(expr)
2226             self.group_by = tuple(group_by)
2227 
2228         self.values_select = tuple(field_names)
2229         self.add_fields(field_names, True)
2230 
2231     @property
2232     def annotation_select(self):
2233         """
2234         Return the dictionary of aggregate columns that are not masked and
2235         should be used in the SELECT clause. Cache this result for performance.
2236         """
2237         if self._annotation_select_cache is not None:
2238             return self._annotation_select_cache
2239         elif not self.annotations:
2240             return {}
2241         elif self.annotation_select_mask is not None:
2242             self._annotation_select_cache = {
2243                 k: v for k, v in self.annotations.items()
2244                 if k in self.annotation_select_mask
2245             }
2246             return self._annotation_select_cache
2247         else:
2248             return self.annotations
2249 
2250     @property
2251     def extra_select(self):
2252         if self._extra_select_cache is not None:
2253             return self._extra_select_cache
2254         if not self.extra:
2255             return {}
2256         elif self.extra_select_mask is not None:
2257             self._extra_select_cache = {
2258                 k: v for k, v in self.extra.items()
2259                 if k in self.extra_select_mask
2260             }
2261             return self._extra_select_cache
2262         else:
2263             return self.extra
2264 
2265     def trim_start(self, names_with_path):
2266         """
2267         Trim joins from the start of the join path. The candidates for trim
2268         are the PathInfos in names_with_path structure that are m2m joins.
2269 
2270         Also set the select column so the start matches the join.
2271 
2272         This method is meant to be used for generating the subquery joins &
2273         cols in split_exclude().
2274 
2275         Return a lookup usable for doing outerq.filter(lookup=self) and a
2276         boolean indicating if the joins in the prefix contain a LEFT OUTER join.
2277         _"""
2278         all_paths = []
2279         for _, paths in names_with_path:
2280             all_paths.extend(paths)
2281         contains_louter = False
2282         # Trim and operate only on tables that were generated for
2283         # the lookup part of the query. That is, avoid trimming
2284         # joins generated for F() expressions.
2285         lookup_tables = [
2286             t for t in self.alias_map
2287             if t in self._lookup_joins or t == self.base_table
2288         ]
2289         for trimmed_paths, path in enumerate(all_paths):
2290             if path.m2m:
2291                 break
2292             if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type == LOUTER:
2293                 contains_louter = True
2294             alias = lookup_tables[trimmed_paths]
2295             self.unref_alias(alias)
2296         # The path.join_field is a Rel, lets get the other side's field
2297         join_field = path.join_field.field
2298         # Build the filter prefix.
2299         paths_in_prefix = trimmed_paths
2300         trimmed_prefix = []
2301         for name, path in names_with_path:
2302             if paths_in_prefix - len(path) < 0:
2303                 break
2304             trimmed_prefix.append(name)
2305             paths_in_prefix -= len(path)
2306         trimmed_prefix.append(
2307             join_field.foreign_related_fields[0].name)
2308         trimmed_prefix = LOOKUP_SEP.join(trimmed_prefix)
2309         # Lets still see if we can trim the first join from the inner query
2310         # (that is, self). We can't do this for:
2311         # - LEFT JOINs because we would miss those rows that have nothing on
2312         #   the outer side,
2313         # - INNER JOINs from filtered relations because we would miss their
2314         #   filters.
2315         first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]
2316         if first_join.join_type != LOUTER and not first_join.filtered_relation:
2317             select_fields = [r[0] for r in join_field.related_fields]
2318             select_alias = lookup_tables[trimmed_paths + 1]
2319             self.unref_alias(lookup_tables[trimmed_paths])
2320             extra_restriction = join_field.get_extra_restriction(
2321                 self.where_class, None, lookup_tables[trimmed_paths + 1])
2322             if extra_restriction:
2323                 self.where.add(extra_restriction, AND)
2324         else:
2325             # TODO: It might be possible to trim more joins from the start of the
2326             # inner query if it happens to have a longer join chain containing the
2327             # values in select_fields. Lets punt this one for now.
2328             select_fields = [r[1] for r in join_field.related_fields]
2329             select_alias = lookup_tables[trimmed_paths]
2330         # The found starting point is likely a Join instead of a BaseTable reference.
2331         # But the first entry in the query's FROM clause must not be a JOIN.
2332         for table in self.alias_map:
2333             if self.alias_refcount[table] > 0:
2334                 self.alias_map[table] = BaseTable(self.alias_map[table].table_name, table)
2335                 break
2336         self.set_select([f.get_col(select_alias) for f in select_fields])
2337         return trimmed_prefix, contains_louter
2338 
2339     def is_nullable(self, field):
2340         """
2341         Check if the given field should be treated as nullable.
2342 
2343         Some backends treat '' as null and Django treats such fields as
2344         nullable for those backends. In such situations field.null can be
2345         False even if we should treat the field as nullable.
2346         """
2347         # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have
2348         # (nor should it have) knowledge of which connection is going to be
2349         # used. The proper fix would be to defer all decisions where
2350         # is_nullable() is needed to the compiler stage, but that is not easy
2351         # to do currently.
2352         return (
2353             connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
2354             field.empty_strings_allowed
2355         ) or field.null

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>]
2025-10-18 12:21:33.469 | INFO     | Search completed. Bug locations: [<file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>split_exclude</method>
<code>
1747     def split_exclude(self, filter_expr, can_reuse, names_with_path):
1748         """
1749         When doing an exclude against any kind of N-to-many relation, we need
1750         to use a subquery. This method constructs the nested query, given the
1751         original exclude filter (filter_expr) and the portion up to the first
1752         N-to-many relation field.
1753 
1754         For example, if the origin filter is ~Q(child__name='foo'), filter_expr
1755         is ('child__name', 'foo') and can_reuse is a set of joins usable for
1756         filters in the original query.
1757 
1758         We will turn this into equivalent of:
1759             WHERE NOT (pk IN (SELECT parent_id FROM thetable
1760                               WHERE name = 'foo' AND parent_id IS NOT NULL))
1761 
1762         It might be worth it to consider using WHERE NOT EXISTS as that has
1763         saner null handling, and is easier for the backend's optimizer to
1764         handle.
1765         """
1766         filter_lhs, filter_rhs = filter_expr
1767         if isinstance(filter_rhs, OuterRef):
1768             filter_expr = (filter_lhs, OuterRef(filter_rhs))
1769         elif isinstance(filter_rhs, F):
1770             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
1771         # Generate the inner query.
1772         query = Query(self.model)
1773         query._filtered_relations = self._filtered_relations
1774         query.add_filter(filter_expr)
1775         query.clear_ordering(True)
1776         # Try to have as simple as possible subquery -> trim leading joins from
1777         # the subquery.
1778         trimmed_prefix, contains_louter = query.trim_start(names_with_path)
1779 
1780         # Add extra check to make sure the selected field will not be null
1781         # since we are adding an IN <subquery> clause. This prevents the
1782         # database from tripping over IN (...,NULL,...) selects and returning
1783         # nothing
1784         col = query.select[0]
1785         select_field = col.target
1786         alias = col.alias
1787         if self.is_nullable(select_field):
1788             lookup_class = select_field.get_lookup('isnull')
1789             lookup = lookup_class(select_field.get_col(alias), False)
1790             query.where.add(lookup, AND)
1791         if alias in can_reuse:
1792             pk = select_field.model._meta.pk
1793             # Need to add a restriction so that outer query's filters are in effect for
1794             # the subquery, too.
1795             query.bump_prefix(self)
1796             lookup_class = select_field.get_lookup('exact')
1797             # Note that the query.select[0].alias is different from alias
1798             # due to bump_prefix above.
1799             lookup = lookup_class(pk.get_col(query.select[0].alias),
1800                                   pk.get_col(alias))
1801             query.where.add(lookup, AND)
1802             query.external_aliases[alias] = True
1803 
1804         condition, needed_inner = self.build_filter(
1805             ('%s__in' % trimmed_prefix, query),
1806             current_negated=True, branch_negated=True, can_reuse=can_reuse)
1807         if contains_louter:
1808             or_null_condition, _ = self.build_filter(
1809                 ('%s__isnull' % trimmed_prefix, True),
1810                 current_negated=True, branch_negated=True, can_reuse=can_reuse)
1811             condition.add(or_null_condition, OR)
1812             # Note that the end result will be:
1813             # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.
1814             # This might look crazy but due to how IN works, this seems to be
1815             # correct. If the IS NOT NULL check is removed then outercol NOT
1816             # IN will return UNKNOWN. If the IS NULL check is removed, then if
1817             # outercol IS NULL we will not match the row.
1818         return condition, needed_inner

</code><intended_behavior>The `split_exclude` method in the `Query` class currently constructs a subquery using a `NOT IN` SQL clause to exclude records linked through multi-valued relationships. The intended behavior is to modify this method to use a `NOT EXISTS` SQL clause instead. This change aims to improve performance and address potential issues with `NULL` values that can arise with the `NOT IN` approach.

To preserve existing functionality while implementing this change, the method must still:

- Accurately exclude the intended records based on the provided filter expression.
- Handle `NULL` values correctly, such that the presence of `NULL` does not incorrectly affect the exclusion logic.
- Maintain performance, or preferably improve it, by leveraging `NOT EXISTS` in a way that database query planners can more efficiently optimize.

Specifically, the modification should:

- Replace the current construct of generating a subquery for `NOT IN` with a `NOT EXISTS` clause that includes the same filtering criteria within its subquery.
- Ensure that the `NOT EXISTS` check integrates seamlessly with the outer query, adequately applying the exclusion criteria without introducing inefficiencies or changing the semantic meaning of the query.
- Retain compatibility with Django's support for multiple database backends, ensuring that the change is applicable and optimized across different SQL dialects.

This change would directly address the issue's concern regarding optimization difficulties and the handling of `NULL` values by `NOT IN`, ultimately leading to more reliable and potentially faster query execution in the ORM's handling of exclude operations involving multi-valued relationships.</intended_behavior>, <file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>None</method>
<code>
136 class Query(BaseExpression):
137     """A single SQL query."""
138 
139     alias_prefix = 'T'
140     subq_aliases = frozenset([alias_prefix])
141 
142     compiler = 'SQLCompiler'
143 
144     def __init__(self, model, where=WhereNode, alias_cols=True):
145         self.model = model
146         self.alias_refcount = {}
147         # alias_map is the most important data structure regarding joins.
148         # It's used for recording which joins exist in the query and what
149         # types they are. The key is the alias of the joined table (possibly
150         # the table name) and the value is a Join-like object (see
151         # sql.datastructures.Join for more information).
152         self.alias_map = {}
153         # Whether to provide alias to columns during reference resolving.
154         self.alias_cols = alias_cols
155         # Sometimes the query contains references to aliases in outer queries (as
156         # a result of split_exclude). Correct alias quoting needs to know these
157         # aliases too.
158         # Map external tables to whether they are aliased.
159         self.external_aliases = {}
160         self.table_map = {}     # Maps table names to list of aliases.
161         self.default_cols = True
162         self.default_ordering = True
163         self.standard_ordering = True
164         self.used_aliases = set()
165         self.filter_is_sticky = False
166         self.subquery = False
167 
168         # SQL-related attributes
169         # Select and related select clauses are expressions to use in the
170         # SELECT clause of the query.
171         # The select is used for cases where we want to set up the select
172         # clause to contain other than default fields (values(), subqueries...)
173         # Note that annotations go to annotations dictionary.
174         self.select = ()
175         self.where = where()
176         self.where_class = where
177         # The group_by attribute can have one of the following forms:
178         #  - None: no group by at all in the query
179         #  - A tuple of expressions: group by (at least) those expressions.
180         #    String refs are also allowed for now.
181         #  - True: group by all select fields of the model
182         # See compiler.get_group_by() for details.
183         self.group_by = None
184         self.order_by = ()
185         self.low_mark, self.high_mark = 0, None  # Used for offset/limit
186         self.distinct = False
187         self.distinct_fields = ()
188         self.select_for_update = False
189         self.select_for_update_nowait = False
190         self.select_for_update_skip_locked = False
191         self.select_for_update_of = ()
192         self.select_for_no_key_update = False
193 
194         self.select_related = False
195         # Arbitrary limit for select_related to prevents infinite recursion.
196         self.max_depth = 5
197 
198         # Holds the selects defined by a call to values() or values_list()
199         # excluding annotation_select and extra_select.
200         self.values_select = ()
201 
202         # SQL annotation-related attributes
203         self.annotations = {}  # Maps alias -> Annotation Expression
204         self.annotation_select_mask = None
205         self._annotation_select_cache = None
206 
207         # Set combination attributes
208         self.combinator = None
209         self.combinator_all = False
210         self.combined_queries = ()
211 
212         # These are for extensions. The contents are more or less appended
213         # verbatim to the appropriate clause.
214         self.extra = {}  # Maps col_alias -> (col_sql, params).
215         self.extra_select_mask = None
216         self._extra_select_cache = None
217 
218         self.extra_tables = ()
219         self.extra_order_by = ()
220 
221         # A tuple that is a set of model field names and either True, if these
222         # are the fields to defer, or False if these are the only fields to
223         # load.
224         self.deferred_loading = (frozenset(), True)
225 
226         self._filtered_relations = {}
227 
228         self.explain_query = False
229         self.explain_format = None
230         self.explain_options = {}
231 
232     @property
233     def output_field(self):
234         if len(self.select) == 1:
235             select = self.select[0]
236             return getattr(select, 'target', None) or select.field
237         elif len(self.annotation_select) == 1:
238             return next(iter(self.annotation_select.values())).output_field
239 
240     @property
241     def has_select_fields(self):
242         return bool(self.select or self.annotation_select_mask or self.extra_select_mask)
243 
244     @cached_property
245     def base_table(self):
246         for alias in self.alias_map:
247             return alias
248 
249     def __str__(self):
250         """
251         Return the query as a string of SQL with the parameter values
252         substituted in (use sql_with_params() to see the unsubstituted string).
253 
254         Parameter values won't necessarily be quoted correctly, since that is
255         done by the database interface at execution time.
256         """
257         sql, params = self.sql_with_params()
258         return sql % params
259 
260     def sql_with_params(self):
261         """
262         Return the query as an SQL string and the parameters that will be
263         substituted into the query.
264         """
265         return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()
266 
267     def __deepcopy__(self, memo):
268         """Limit the amount of work when a Query is deepcopied."""
269         result = self.clone()
270         memo[id(self)] = result
271         return result
272 
273     def get_compiler(self, using=None, connection=None):
274         if using is None and connection is None:
275             raise ValueError("Need either using or connection")
276         if using:
277             connection = connections[using]
278         return connection.ops.compiler(self.compiler)(self, connection, using)
279 
280     def get_meta(self):
281         """
282         Return the Options instance (the model._meta) from which to start
283         processing. Normally, this is self.model._meta, but it can be changed
284         by subclasses.
285         """
286         return self.model._meta
287 
288     def clone(self):
289         """
290         Return a copy of the current Query. A lightweight alternative to
291         to deepcopy().
292         """
293         obj = Empty()
294         obj.__class__ = self.__class__
295         # Copy references to everything.
296         obj.__dict__ = self.__dict__.copy()
297         # Clone attributes that can't use shallow copy.
298         obj.alias_refcount = self.alias_refcount.copy()
299         obj.alias_map = self.alias_map.copy()
300         obj.external_aliases = self.external_aliases.copy()
301         obj.table_map = self.table_map.copy()
302         obj.where = self.where.clone()
303         obj.annotations = self.annotations.copy()
304         if self.annotation_select_mask is None:
305             obj.annotation_select_mask = None
306         else:
307             obj.annotation_select_mask = self.annotation_select_mask.copy()
308         obj.combined_queries = tuple(query.clone() for query in self.combined_queries)
309         # _annotation_select_cache cannot be copied, as doing so breaks the
310         # (necessary) state in which both annotations and
311         # _annotation_select_cache point to the same underlying objects.
312         # It will get re-populated in the cloned queryset the next time it's
313         # used.
314         obj._annotation_select_cache = None
315         obj.extra = self.extra.copy()
316         if self.extra_select_mask is None:
317             obj.extra_select_mask = None
318         else:
319             obj.extra_select_mask = self.extra_select_mask.copy()
320         if self._extra_select_cache is None:
321             obj._extra_select_cache = None
322         else:
323             obj._extra_select_cache = self._extra_select_cache.copy()
324         if self.select_related is not False:
325             # Use deepcopy because select_related stores fields in nested
326             # dicts.
327             obj.select_related = copy.deepcopy(obj.select_related)
328         if 'subq_aliases' in self.__dict__:
329             obj.subq_aliases = self.subq_aliases.copy()
330         obj.used_aliases = self.used_aliases.copy()
331         obj._filtered_relations = self._filtered_relations.copy()
332         # Clear the cached_property
333         try:
334             del obj.base_table
335         except AttributeError:
336             pass
337         return obj
338 
339     def chain(self, klass=None):
340         """
341         Return a copy of the current Query that's ready for another operation.
342         The klass argument changes the type of the Query, e.g. UpdateQuery.
343         """
344         obj = self.clone()
345         if klass and obj.__class__ != klass:
346             obj.__class__ = klass
347         if not obj.filter_is_sticky:
348             obj.used_aliases = set()
349         obj.filter_is_sticky = False
350         if hasattr(obj, '_setup_query'):
351             obj._setup_query()
352         return obj
353 
354     def relabeled_clone(self, change_map):
355         clone = self.clone()
356         clone.change_aliases(change_map)
357         return clone
358 
359     def _get_col(self, target, field, alias):
360         if not self.alias_cols:
361             alias = None
362         return target.get_col(alias, field)
363 
364     def rewrite_cols(self, annotation, col_cnt):
365         # We must make sure the inner query has the referred columns in it.
366         # If we are aggregating over an annotation, then Django uses Ref()
367         # instances to note this. However, if we are annotating over a column
368         # of a related model, then it might be that column isn't part of the
369         # SELECT clause of the inner query, and we must manually make sure
370         # the column is selected. An example case is:
371         #    .aggregate(Sum('author__awards'))
372         # Resolving this expression results in a join to author, but there
373         # is no guarantee the awards column of author is in the select clause
374         # of the query. Thus we must manually add the column to the inner
375         # query.
376         orig_exprs = annotation.get_source_expressions()
377         new_exprs = []
378         for expr in orig_exprs:
379             # FIXME: These conditions are fairly arbitrary. Identify a better
380             # method of having expressions decide which code path they should
381             # take.
382             if isinstance(expr, Ref):
383                 # Its already a Ref to subquery (see resolve_ref() for
384                 # details)
385                 new_exprs.append(expr)
386             elif isinstance(expr, (WhereNode, Lookup)):
387                 # Decompose the subexpressions further. The code here is
388                 # copied from the else clause, but this condition must appear
389                 # before the contains_aggregate/is_summary condition below.
390                 new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
391                 new_exprs.append(new_expr)
392             else:
393                 # Reuse aliases of expressions already selected in subquery.
394                 for col_alias, selected_annotation in self.annotation_select.items():
395                     if selected_annotation is expr:
396                         new_expr = Ref(col_alias, expr)
397                         break
398                 else:
399                     # An expression that is not selected the subquery.
400                     if isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):
401                         # Reference column or another aggregate. Select it
402                         # under a non-conflicting alias.
403                         col_cnt += 1
404                         col_alias = '__col%d' % col_cnt
405                         self.annotations[col_alias] = expr
406                         self.append_annotation_mask([col_alias])
407                         new_expr = Ref(col_alias, expr)
408                     else:
409                         # Some other expression not referencing database values
410                         # directly. Its subexpression might contain Cols.
411                         new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
412                 new_exprs.append(new_expr)
413         annotation.set_source_expressions(new_exprs)
414         return annotation, col_cnt
415 
416     def get_aggregation(self, using, added_aggregate_names):
417         """
418         Return the dictionary with the values of the existing aggregations.
419         """
420         if not self.annotation_select:
421             return {}
422         existing_annotations = [
423             annotation for alias, annotation
424             in self.annotations.items()
425             if alias not in added_aggregate_names
426         ]
427         # Decide if we need to use a subquery.
428         #
429         # Existing annotations would cause incorrect results as get_aggregation()
430         # must produce just one result and thus must not use GROUP BY. But we
431         # aren't smart enough to remove the existing annotations from the
432         # query, so those would force us to use GROUP BY.
433         #
434         # If the query has limit or distinct, or uses set operations, then
435         # those operations must be done in a subquery so that the query
436         # aggregates on the limit and/or distinct results instead of applying
437         # the distinct and limit after the aggregation.
438         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or
439                 self.distinct or self.combinator):
440             from django.db.models.sql.subqueries import AggregateQuery
441             outer_query = AggregateQuery(self.model)
442             inner_query = self.clone()
443             inner_query.select_for_update = False
444             inner_query.select_related = False
445             inner_query.set_annotation_mask(self.annotation_select)
446             if not self.is_sliced and not self.distinct_fields:
447                 # Queries with distinct_fields need ordering and when a limit
448                 # is applied we must take the slice from the ordered query.
449                 # Otherwise no need for ordering.
450                 inner_query.clear_ordering(True)
451             if not inner_query.distinct:
452                 # If the inner query uses default select and it has some
453                 # aggregate annotations, then we must make sure the inner
454                 # query is grouped by the main model's primary key. However,
455                 # clearing the select clause can alter results if distinct is
456                 # used.
457                 has_existing_aggregate_annotations = any(
458                     annotation for annotation in existing_annotations
459                     if getattr(annotation, 'contains_aggregate', True)
460                 )
461                 if inner_query.default_cols and has_existing_aggregate_annotations:
462                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
463                 inner_query.default_cols = False
464 
465             relabels = {t: 'subquery' for t in inner_query.alias_map}
466             relabels[None] = 'subquery'
467             # Remove any aggregates marked for reduction from the subquery
468             # and move them to the outer AggregateQuery.
469             col_cnt = 0
470             for alias, expression in list(inner_query.annotation_select.items()):
471                 annotation_select_mask = inner_query.annotation_select_mask
472                 if expression.is_summary:
473                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
474                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
475                     del inner_query.annotations[alias]
476                     annotation_select_mask.remove(alias)
477                 # Make sure the annotation_select wont use cached results.
478                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)
479             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
480                 # In case of Model.objects[0:3].count(), there would be no
481                 # field selected in the inner query, yet we must use a subquery.
482                 # So, make sure at least one field is selected.
483                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
484             try:
485                 outer_query.add_subquery(inner_query, using)
486             except EmptyResultSet:
487                 return {
488                     alias: None
489                     for alias in outer_query.annotation_select
490                 }
491         else:
492             outer_query = self
493             self.select = ()
494             self.default_cols = False
495             self.extra = {}
496 
497         outer_query.clear_ordering(True)
498         outer_query.clear_limits()
499         outer_query.select_for_update = False
500         outer_query.select_related = False
501         compiler = outer_query.get_compiler(using)
502         result = compiler.execute_sql(SINGLE)
503         if result is None:
504             result = [None] * len(outer_query.annotation_select)
505 
506         converters = compiler.get_converters(outer_query.annotation_select.values())
507         result = next(compiler.apply_converters((result,), converters))
508 
509         return dict(zip(outer_query.annotation_select, result))
510 
511     def get_count(self, using):
512         """
513         Perform a COUNT() query using the current filter constraints.
514         """
515         obj = self.clone()
516         obj.add_annotation(Count('*'), alias='__count', is_summary=True)
517         number = obj.get_aggregation(using, ['__count'])['__count']
518         if number is None:
519             number = 0
520         return number
521 
522     def has_filters(self):
523         return self.where
524 
525     def exists(self):
526         q = self.clone()
527         if not q.distinct:
528             if q.group_by is True:
529                 q.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
530                 # Disable GROUP BY aliases to avoid orphaning references to the
531                 # SELECT clause which is about to be cleared.
532                 q.set_group_by(allow_aliases=False)
533             q.clear_select_clause()
534         q.clear_ordering(True)
535         q.set_limits(high=1)
536         q.add_extra({'a': 1}, None, None, None, None, None)
537         q.set_extra_mask(['a'])
538         return q
539 
540     def has_results(self, using):
541         q = self.exists()
542         compiler = q.get_compiler(using=using)
543         return compiler.has_results()
544 
545     def explain(self, using, format=None, **options):
546         q = self.clone()
547         q.explain_query = True
548         q.explain_format = format
549         q.explain_options = options
550         compiler = q.get_compiler(using=using)
551         return '\n'.join(compiler.explain_query())
552 
553     def combine(self, rhs, connector):
554         """
555         Merge the 'rhs' query into the current one (with any 'rhs' effects
556         being applied *after* (that is, "to the right of") anything in the
557         current query. 'rhs' is not modified during a call to this function.
558 
559         The 'connector' parameter describes how to connect filters from the
560         'rhs' query.
561         """
562         assert self.model == rhs.model, \
563             "Cannot combine queries on two different base models."
564         assert not self.is_sliced, \
565             "Cannot combine queries once a slice has been taken."
566         assert self.distinct == rhs.distinct, \
567             "Cannot combine a unique query with a non-unique query."
568         assert self.distinct_fields == rhs.distinct_fields, \
569             "Cannot combine queries with different distinct fields."
570 
571         # Work out how to relabel the rhs aliases, if necessary.
572         change_map = {}
573         conjunction = (connector == AND)
574 
575         # Determine which existing joins can be reused. When combining the
576         # query with AND we must recreate all joins for m2m filters. When
577         # combining with OR we can reuse joins. The reason is that in AND
578         # case a single row can't fulfill a condition like:
579         #     revrel__col=1 & revrel__col=2
580         # But, there might be two different related rows matching this
581         # condition. In OR case a single True is enough, so single row is
582         # enough, too.
583         #
584         # Note that we will be creating duplicate joins for non-m2m joins in
585         # the AND case. The results will be correct but this creates too many
586         # joins. This is something that could be fixed later on.
587         reuse = set() if conjunction else set(self.alias_map)
588         # Base table must be present in the query - this is the same
589         # table on both sides.
590         self.get_initial_alias()
591         joinpromoter = JoinPromoter(connector, 2, False)
592         joinpromoter.add_votes(
593             j for j in self.alias_map if self.alias_map[j].join_type == INNER)
594         rhs_votes = set()
595         # Now, add the joins from rhs query into the new query (skipping base
596         # table).
597         rhs_tables = list(rhs.alias_map)[1:]
598         for alias in rhs_tables:
599             join = rhs.alias_map[alias]
600             # If the left side of the join was already relabeled, use the
601             # updated alias.
602             join = join.relabeled_clone(change_map)
603             new_alias = self.join(join, reuse=reuse)
604             if join.join_type == INNER:
605                 rhs_votes.add(new_alias)
606             # We can't reuse the same join again in the query. If we have two
607             # distinct joins for the same connection in rhs query, then the
608             # combined query must have two joins, too.
609             reuse.discard(new_alias)
610             if alias != new_alias:
611                 change_map[alias] = new_alias
612             if not rhs.alias_refcount[alias]:
613                 # The alias was unused in the rhs query. Unref it so that it
614                 # will be unused in the new query, too. We have to add and
615                 # unref the alias so that join promotion has information of
616                 # the join type for the unused alias.
617                 self.unref_alias(new_alias)
618         joinpromoter.add_votes(rhs_votes)
619         joinpromoter.update_join_types(self)
620 
621         # Now relabel a copy of the rhs where-clause and add it to the current
622         # one.
623         w = rhs.where.clone()
624         w.relabel_aliases(change_map)
625         self.where.add(w, connector)
626 
627         # Selection columns and extra extensions are those provided by 'rhs'.
628         if rhs.select:
629             self.set_select([col.relabeled_clone(change_map) for col in rhs.select])
630         else:
631             self.select = ()
632 
633         if connector == OR:
634             # It would be nice to be able to handle this, but the queries don't
635             # really make sense (or return consistent value sets). Not worth
636             # the extra complexity when you can write a real query instead.
637             if self.extra and rhs.extra:
638                 raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")
639         self.extra.update(rhs.extra)
640         extra_select_mask = set()
641         if self.extra_select_mask is not None:
642             extra_select_mask.update(self.extra_select_mask)
643         if rhs.extra_select_mask is not None:
644             extra_select_mask.update(rhs.extra_select_mask)
645         if extra_select_mask:
646             self.set_extra_mask(extra_select_mask)
647         self.extra_tables += rhs.extra_tables
648 
649         # Ordering uses the 'rhs' ordering, unless it has none, in which case
650         # the current ordering is used.
651         self.order_by = rhs.order_by or self.order_by
652         self.extra_order_by = rhs.extra_order_by or self.extra_order_by
653 
654     def deferred_to_data(self, target, callback):
655         """
656         Convert the self.deferred_loading data structure to an alternate data
657         structure, describing the field that *will* be loaded. This is used to
658         compute the columns to select from the database and also by the
659         QuerySet class to work out which fields are being initialized on each
660         model. Models that have all their fields included aren't mentioned in
661         the result, only those that have field restrictions in place.
662 
663         The "target" parameter is the instance that is populated (in place).
664         The "callback" is a function that is called whenever a (model, field)
665         pair need to be added to "target". It accepts three parameters:
666         "target", and the model and list of fields being added for that model.
667         """
668         field_names, defer = self.deferred_loading
669         if not field_names:
670             return
671         orig_opts = self.get_meta()
672         seen = {}
673         must_include = {orig_opts.concrete_model: {orig_opts.pk}}
674         for field_name in field_names:
675             parts = field_name.split(LOOKUP_SEP)
676             cur_model = self.model._meta.concrete_model
677             opts = orig_opts
678             for name in parts[:-1]:
679                 old_model = cur_model
680                 if name in self._filtered_relations:
681                     name = self._filtered_relations[name].relation_name
682                 source = opts.get_field(name)
683                 if is_reverse_o2o(source):
684                     cur_model = source.related_model
685                 else:
686                     cur_model = source.remote_field.model
687                 opts = cur_model._meta
688                 # Even if we're "just passing through" this model, we must add
689                 # both the current model's pk and the related reference field
690                 # (if it's not a reverse relation) to the things we select.
691                 if not is_reverse_o2o(source):
692                     must_include[old_model].add(source)
693                 add_to_dict(must_include, cur_model, opts.pk)
694             field = opts.get_field(parts[-1])
695             is_reverse_object = field.auto_created and not field.concrete
696             model = field.related_model if is_reverse_object else field.model
697             model = model._meta.concrete_model
698             if model == opts.model:
699                 model = cur_model
700             if not is_reverse_o2o(field):
701                 add_to_dict(seen, model, field)
702 
703         if defer:
704             # We need to load all fields for each model, except those that
705             # appear in "seen" (for all models that appear in "seen"). The only
706             # slight complexity here is handling fields that exist on parent
707             # models.
708             workset = {}
709             for model, values in seen.items():
710                 for field in model._meta.local_fields:
711                     if field not in values:
712                         m = field.model._meta.concrete_model
713                         add_to_dict(workset, m, field)
714             for model, values in must_include.items():
715                 # If we haven't included a model in workset, we don't add the
716                 # corresponding must_include fields for that model, since an
717                 # empty set means "include all fields". That's why there's no
718                 # "else" branch here.
719                 if model in workset:
720                     workset[model].update(values)
721             for model, values in workset.items():
722                 callback(target, model, values)
723         else:
724             for model, values in must_include.items():
725                 if model in seen:
726                     seen[model].update(values)
727                 else:
728                     # As we've passed through this model, but not explicitly
729                     # included any fields, we have to make sure it's mentioned
730                     # so that only the "must include" fields are pulled in.
731                     seen[model] = values
732             # Now ensure that every model in the inheritance chain is mentioned
733             # in the parent list. Again, it must be mentioned to ensure that
734             # only "must include" fields are pulled in.
735             for model in orig_opts.get_parent_list():
736                 seen.setdefault(model, set())
737             for model, values in seen.items():
738                 callback(target, model, values)
739 
740     def table_alias(self, table_name, create=False, filtered_relation=None):
741         """
742         Return a table alias for the given table_name and whether this is a
743         new alias or not.
744 
745         If 'create' is true, a new alias is always created. Otherwise, the
746         most recently created alias for the table (if one exists) is reused.
747         """
748         alias_list = self.table_map.get(table_name)
749         if not create and alias_list:
750             alias = alias_list[0]
751             self.alias_refcount[alias] += 1
752             return alias, False
753 
754         # Create a new alias for this table.
755         if alias_list:
756             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
757             alias_list.append(alias)
758         else:
759             # The first occurrence of a table uses the table name directly.
760             alias = filtered_relation.alias if filtered_relation is not None else table_name
761             self.table_map[table_name] = [alias]
762         self.alias_refcount[alias] = 1
763         return alias, True
764 
765     def ref_alias(self, alias):
766         """Increases the reference count for this alias."""
767         self.alias_refcount[alias] += 1
768 
769     def unref_alias(self, alias, amount=1):
770         """Decreases the reference count for this alias."""
771         self.alias_refcount[alias] -= amount
772 
773     def promote_joins(self, aliases):
774         """
775         Promote recursively the join type of given aliases and its children to
776         an outer join. If 'unconditional' is False, only promote the join if
777         it is nullable or the parent join is an outer join.
778 
779         The children promotion is done to avoid join chains that contain a LOUTER
780         b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,
781         then we must also promote b->c automatically, or otherwise the promotion
782         of a->b doesn't actually change anything in the query results.
783         """
784         aliases = list(aliases)
785         while aliases:
786             alias = aliases.pop(0)
787             if self.alias_map[alias].join_type is None:
788                 # This is the base table (first FROM entry) - this table
789                 # isn't really joined at all in the query, so we should not
790                 # alter its join type.
791                 continue
792             # Only the first alias (skipped above) should have None join_type
793             assert self.alias_map[alias].join_type is not None
794             parent_alias = self.alias_map[alias].parent_alias
795             parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER
796             already_louter = self.alias_map[alias].join_type == LOUTER
797             if ((self.alias_map[alias].nullable or parent_louter) and
798                     not already_louter):
799                 self.alias_map[alias] = self.alias_map[alias].promote()
800                 # Join type of 'alias' changed, so re-examine all aliases that
801                 # refer to this one.
802                 aliases.extend(
803                     join for join in self.alias_map
804                     if self.alias_map[join].parent_alias == alias and join not in aliases
805                 )
806 
807     def demote_joins(self, aliases):
808         """
809         Change join type from LOUTER to INNER for all joins in aliases.
810 
811         Similarly to promote_joins(), this method must ensure no join chains
812         containing first an outer, then an inner join are generated. If we
813         are demoting b->c join in chain a LOUTER b LOUTER c then we must
814         demote a->b automatically, or otherwise the demotion of b->c doesn't
815         actually change anything in the query results. .
816         """
817         aliases = list(aliases)
818         while aliases:
819             alias = aliases.pop(0)
820             if self.alias_map[alias].join_type == LOUTER:
821                 self.alias_map[alias] = self.alias_map[alias].demote()
822                 parent_alias = self.alias_map[alias].parent_alias
823                 if self.alias_map[parent_alias].join_type == INNER:
824                     aliases.append(parent_alias)
825 
826     def reset_refcounts(self, to_counts):
827         """
828         Reset reference counts for aliases so that they match the value passed
829         in `to_counts`.
830         """
831         for alias, cur_refcount in self.alias_refcount.copy().items():
832             unref_amount = cur_refcount - to_counts.get(alias, 0)
833             self.unref_alias(alias, unref_amount)
834 
835     def change_aliases(self, change_map):
836         """
837         Change the aliases in change_map (which maps old-alias -> new-alias),
838         relabelling any references to them in select columns and the where
839         clause.
840         """
841         assert set(change_map).isdisjoint(change_map.values())
842 
843         # 1. Update references in "select" (normal columns plus aliases),
844         # "group by" and "where".
845         self.where.relabel_aliases(change_map)
846         if isinstance(self.group_by, tuple):
847             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])
848         self.select = tuple([col.relabeled_clone(change_map) for col in self.select])
849         self.annotations = self.annotations and {
850             key: col.relabeled_clone(change_map) for key, col in self.annotations.items()
851         }
852 
853         # 2. Rename the alias in the internal table/alias datastructures.
854         for old_alias, new_alias in change_map.items():
855             if old_alias not in self.alias_map:
856                 continue
857             alias_data = self.alias_map[old_alias].relabeled_clone(change_map)
858             self.alias_map[new_alias] = alias_data
859             self.alias_refcount[new_alias] = self.alias_refcount[old_alias]
860             del self.alias_refcount[old_alias]
861             del self.alias_map[old_alias]
862 
863             table_aliases = self.table_map[alias_data.table_name]
864             for pos, alias in enumerate(table_aliases):
865                 if alias == old_alias:
866                     table_aliases[pos] = new_alias
867                     break
868         self.external_aliases = {
869             # Table is aliased or it's being changed and thus is aliased.
870             change_map.get(alias, alias): (aliased or alias in change_map)
871             for alias, aliased in self.external_aliases.items()
872         }
873 
874     def bump_prefix(self, outer_query):
875         """
876         Change the alias prefix to the next letter in the alphabet in a way
877         that the outer query's aliases and this query's aliases will not
878         conflict. Even tables that previously had no alias will get an alias
879         after this call.
880         """
881         def prefix_gen():
882             """
883             Generate a sequence of characters in alphabetical order:
884                 -> 'A', 'B', 'C', ...
885 
886             When the alphabet is finished, the sequence will continue with the
887             Cartesian product:
888                 -> 'AA', 'AB', 'AC', ...
889             """
890             alphabet = ascii_uppercase
891             prefix = chr(ord(self.alias_prefix) + 1)
892             yield prefix
893             for n in count(1):
894                 seq = alphabet[alphabet.index(prefix):] if prefix else alphabet
895                 for s in product(seq, repeat=n):
896                     yield ''.join(s)
897                 prefix = None
898 
899         if self.alias_prefix != outer_query.alias_prefix:
900             # No clashes between self and outer query should be possible.
901             return
902 
903         # Explicitly avoid infinite loop. The constant divider is based on how
904         # much depth recursive subquery references add to the stack. This value
905         # might need to be adjusted when adding or removing function calls from
906         # the code path in charge of performing these operations.
907         local_recursion_limit = sys.getrecursionlimit() // 16
908         for pos, prefix in enumerate(prefix_gen()):
909             if prefix not in self.subq_aliases:
910                 self.alias_prefix = prefix
911                 break
912             if pos > local_recursion_limit:
913                 raise RecursionError(
914                     'Maximum recursion depth exceeded: too many subqueries.'
915                 )
916         self.subq_aliases = self.subq_aliases.union([self.alias_prefix])
917         outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)
918         self.change_aliases({
919             alias: '%s%d' % (self.alias_prefix, pos)
920             for pos, alias in enumerate(self.alias_map)
921         })
922 
923     def get_initial_alias(self):
924         """
925         Return the first alias for this query, after increasing its reference
926         count.
927         """
928         if self.alias_map:
929             alias = self.base_table
930             self.ref_alias(alias)
931         else:
932             alias = self.join(BaseTable(self.get_meta().db_table, None))
933         return alias
934 
935     def count_active_tables(self):
936         """
937         Return the number of tables in this query with a non-zero reference
938         count. After execution, the reference counts are zeroed, so tables
939         added in compiler will not be seen by this method.
940         """
941         return len([1 for count in self.alias_refcount.values() if count])
942 
943     def join(self, join, reuse=None, reuse_with_filtered_relation=False):
944         """
945         Return an alias for the 'join', either reusing an existing alias for
946         that join or creating a new one. 'join' is either a
947         sql.datastructures.BaseTable or Join.
948 
949         The 'reuse' parameter can be either None which means all joins are
950         reusable, or it can be a set containing the aliases that can be reused.
951 
952         The 'reuse_with_filtered_relation' parameter is used when computing
953         FilteredRelation instances.
954 
955         A join is always created as LOUTER if the lhs alias is LOUTER to make
956         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new
957         joins are created as LOUTER if the join is nullable.
958         """
959         if reuse_with_filtered_relation and reuse:
960             reuse_aliases = [
961                 a for a, j in self.alias_map.items()
962                 if a in reuse and j.equals(join, with_filtered_relation=False)
963             ]
964         else:
965             reuse_aliases = [
966                 a for a, j in self.alias_map.items()
967                 if (reuse is None or a in reuse) and j == join
968             ]
969         if reuse_aliases:
970             if join.table_alias in reuse_aliases:
971                 reuse_alias = join.table_alias
972             else:
973                 # Reuse the most recent alias of the joined table
974                 # (a many-to-many relation may be joined multiple times).
975                 reuse_alias = reuse_aliases[-1]
976             self.ref_alias(reuse_alias)
977             return reuse_alias
978 
979         # No reuse is possible, so we need a new alias.
980         alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)
981         if join.join_type:
982             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:
983                 join_type = LOUTER
984             else:
985                 join_type = INNER
986             join.join_type = join_type
987         join.table_alias = alias
988         self.alias_map[alias] = join
989         return alias
990 
991     def join_parent_model(self, opts, model, alias, seen):
992         """
993         Make sure the given 'model' is joined in the query. If 'model' isn't
994         a parent of 'opts' or if it is None this method is a no-op.
995 
996         The 'alias' is the root alias for starting the join, 'seen' is a dict
997         of model -> alias of existing joins. It must also contain a mapping
998         of None -> some alias. This will be returned in the no-op case.
999         """
1000         if model in seen:
1001             return seen[model]
1002         chain = opts.get_base_chain(model)
1003         if not chain:
1004             return alias
1005         curr_opts = opts
1006         for int_model in chain:
1007             if int_model in seen:
1008                 curr_opts = int_model._meta
1009                 alias = seen[int_model]
1010                 continue
1011             # Proxy model have elements in base chain
1012             # with no parents, assign the new options
1013             # object and skip to the next base in that
1014             # case
1015             if not curr_opts.parents[int_model]:
1016                 curr_opts = int_model._meta
1017                 continue
1018             link_field = curr_opts.get_ancestor_link(int_model)
1019             join_info = self.setup_joins([link_field.name], curr_opts, alias)
1020             curr_opts = int_model._meta
1021             alias = seen[int_model] = join_info.joins[-1]
1022         return alias or seen[None]
1023 
1024     def add_annotation(self, annotation, alias, is_summary=False, select=True):
1025         """Add a single annotation expression to the Query."""
1026         annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
1027                                                    summarize=is_summary)
1028         if select:
1029             self.append_annotation_mask([alias])
1030         else:
1031             self.set_annotation_mask(set(self.annotation_select).difference({alias}))
1032         self.annotations[alias] = annotation
1033 
1034     def resolve_expression(self, query, *args, **kwargs):
1035         clone = self.clone()
1036         # Subqueries need to use a different set of aliases than the outer query.
1037         clone.bump_prefix(query)
1038         clone.subquery = True
1039         # It's safe to drop ordering if the queryset isn't using slicing,
1040         # distinct(*fields) or select_for_update().
1041         if (self.low_mark == 0 and self.high_mark is None and
1042                 not self.distinct_fields and
1043                 not self.select_for_update):
1044             clone.clear_ordering(True)
1045         clone.where.resolve_expression(query, *args, **kwargs)
1046         for key, value in clone.annotations.items():
1047             resolved = value.resolve_expression(query, *args, **kwargs)
1048             if hasattr(resolved, 'external_aliases'):
1049                 resolved.external_aliases.update(clone.external_aliases)
1050             clone.annotations[key] = resolved
1051         # Outer query's aliases are considered external.
1052         for alias, table in query.alias_map.items():
1053             clone.external_aliases[alias] = (
1054                 (isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias) or
1055                 (isinstance(table, BaseTable) and table.table_name != table.table_alias)
1056             )
1057         return clone
1058 
1059     def get_external_cols(self):
1060         exprs = chain(self.annotations.values(), self.where.children)
1061         return [
1062             col for col in self._gen_cols(exprs)
1063             if col.alias in self.external_aliases
1064         ]
1065 
1066     def as_sql(self, compiler, connection):
1067         sql, params = self.get_compiler(connection=connection).as_sql()
1068         if self.subquery:
1069             sql = '(%s)' % sql
1070         return sql, params
1071 
1072     def resolve_lookup_value(self, value, can_reuse, allow_joins):
1073         if hasattr(value, 'resolve_expression'):
1074             value = value.resolve_expression(
1075                 self, reuse=can_reuse, allow_joins=allow_joins,
1076             )
1077         elif isinstance(value, (list, tuple)):
1078             # The items of the iterable may be expressions and therefore need
1079             # to be resolved independently.
1080             values = (
1081                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
1082                 for sub_value in value
1083             )
1084             type_ = type(value)
1085             if hasattr(type_, '_make'):  # namedtuple
1086                 return type_(*values)
1087             return type_(values)
1088         return value
1089 
1090     def solve_lookup_type(self, lookup):
1091         """
1092         Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').
1093         """
1094         lookup_splitted = lookup.split(LOOKUP_SEP)
1095         if self.annotations:
1096             expression, expression_lookups = refs_expression(lookup_splitted, self.annotations)
1097             if expression:
1098                 return expression_lookups, (), expression
1099         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
1100         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
1101         if len(lookup_parts) > 1 and not field_parts:
1102             raise FieldError(
1103                 'Invalid lookup "%s" for model %s".' %
1104                 (lookup, self.get_meta().model.__name__)
1105             )
1106         return lookup_parts, field_parts, False
1107 
1108     def check_query_object_type(self, value, opts, field):
1109         """
1110         Check whether the object passed while querying is of the correct type.
1111         If not, raise a ValueError specifying the wrong object.
1112         """
1113         if hasattr(value, '_meta'):
1114             if not check_rel_lookup_compatibility(value._meta.model, opts, field):
1115                 raise ValueError(
1116                     'Cannot query "%s": Must be "%s" instance.' %
1117                     (value, opts.object_name))
1118 
1119     def check_related_objects(self, field, value, opts):
1120         """Check the type of object passed to query relations."""
1121         if field.is_relation:
1122             # Check that the field and the queryset use the same model in a
1123             # query like .filter(author=Author.objects.all()). For example, the
1124             # opts would be Author's (from the author field) and value.model
1125             # would be Author.objects.all() queryset's .model (Author also).
1126             # The field is the related field on the lhs side.
1127             if (isinstance(value, Query) and not value.has_select_fields and
1128                     not check_rel_lookup_compatibility(value.model, opts, field)):
1129                 raise ValueError(
1130                     'Cannot use QuerySet for "%s": Use a QuerySet for "%s".' %
1131                     (value.model._meta.object_name, opts.object_name)
1132                 )
1133             elif hasattr(value, '_meta'):
1134                 self.check_query_object_type(value, opts, field)
1135             elif hasattr(value, '__iter__'):
1136                 for v in value:
1137                     self.check_query_object_type(v, opts, field)
1138 
1139     def check_filterable(self, expression):
1140         """Raise an error if expression cannot be used in a WHERE clause."""
1141         if (
1142             hasattr(expression, 'resolve_expression') and
1143             not getattr(expression, 'filterable', True)
1144         ):
1145             raise NotSupportedError(
1146                 expression.__class__.__name__ + ' is disallowed in the filter '
1147                 'clause.'
1148             )
1149         if hasattr(expression, 'get_source_expressions'):
1150             for expr in expression.get_source_expressions():
1151                 self.check_filterable(expr)
1152 
1153     def build_lookup(self, lookups, lhs, rhs):
1154         """
1155         Try to extract transforms and lookup from given lhs.
1156 
1157         The lhs value is something that works like SQLExpression.
1158         The rhs value is what the lookup is going to compare against.
1159         The lookups is a list of names to extract using get_lookup()
1160         and get_transform().
1161         """
1162         # __exact is the default lookup if one isn't given.
1163         *transforms, lookup_name = lookups or ['exact']
1164         for name in transforms:
1165             lhs = self.try_transform(lhs, name)
1166         # First try get_lookup() so that the lookup takes precedence if the lhs
1167         # supports both transform and lookup for the name.
1168         lookup_class = lhs.get_lookup(lookup_name)
1169         if not lookup_class:
1170             if lhs.field.is_relation:
1171                 raise FieldError('Related Field got invalid lookup: {}'.format(lookup_name))
1172             # A lookup wasn't found. Try to interpret the name as a transform
1173             # and do an Exact lookup against it.
1174             lhs = self.try_transform(lhs, lookup_name)
1175             lookup_name = 'exact'
1176             lookup_class = lhs.get_lookup(lookup_name)
1177             if not lookup_class:
1178                 return
1179 
1180         lookup = lookup_class(lhs, rhs)
1181         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all
1182         # uses of None as a query value unless the lookup supports it.
1183         if lookup.rhs is None and not lookup.can_use_none_as_rhs:
1184             if lookup_name not in ('exact', 'iexact'):
1185                 raise ValueError("Cannot use None as a query value")
1186             return lhs.get_lookup('isnull')(lhs, True)
1187 
1188         # For Oracle '' is equivalent to null. The check must be done at this
1189         # stage because join promotion can't be done in the compiler. Using
1190         # DEFAULT_DB_ALIAS isn't nice but it's the best that can be done here.
1191         # A similar thing is done in is_nullable(), too.
1192         if (connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
1193                 lookup_name == 'exact' and lookup.rhs == ''):
1194             return lhs.get_lookup('isnull')(lhs, True)
1195 
1196         return lookup
1197 
1198     def try_transform(self, lhs, name):
1199         """
1200         Helper method for build_lookup(). Try to fetch and initialize
1201         a transform for name parameter from lhs.
1202         """
1203         transform_class = lhs.get_transform(name)
1204         if transform_class:
1205             return transform_class(lhs)
1206         else:
1207             output_field = lhs.output_field.__class__
1208             suggested_lookups = difflib.get_close_matches(name, output_field.get_lookups())
1209             if suggested_lookups:
1210                 suggestion = ', perhaps you meant %s?' % ' or '.join(suggested_lookups)
1211             else:
1212                 suggestion = '.'
1213             raise FieldError(
1214                 "Unsupported lookup '%s' for %s or join on the field not "
1215                 "permitted%s" % (name, output_field.__name__, suggestion)
1216             )
1217 
1218     def build_filter(self, filter_expr, branch_negated=False, current_negated=False,
1219                      can_reuse=None, allow_joins=True, split_subq=True,
1220                      reuse_with_filtered_relation=False, check_filterable=True):
1221         """
1222         Build a WhereNode for a single filter clause but don't add it
1223         to this Query. Query.add_q() will then add this filter to the where
1224         Node.
1225 
1226         The 'branch_negated' tells us if the current branch contains any
1227         negations. This will be used to determine if subqueries are needed.
1228 
1229         The 'current_negated' is used to determine if the current filter is
1230         negated or not and this will be used to determine if IS NULL filtering
1231         is needed.
1232 
1233         The difference between current_negated and branch_negated is that
1234         branch_negated is set on first negation, but current_negated is
1235         flipped for each negation.
1236 
1237         Note that add_filter will not do any negating itself, that is done
1238         upper in the code by add_q().
1239 
1240         The 'can_reuse' is a set of reusable joins for multijoins.
1241 
1242         If 'reuse_with_filtered_relation' is True, then only joins in can_reuse
1243         will be reused.
1244 
1245         The method will create a filter clause that can be added to the current
1246         query. However, if the filter isn't added to the query then the caller
1247         is responsible for unreffing the joins used.
1248         """
1249         if isinstance(filter_expr, dict):
1250             raise FieldError("Cannot parse keyword query as dict")
1251         if isinstance(filter_expr, Q):
1252             return self._add_q(
1253                 filter_expr,
1254                 branch_negated=branch_negated,
1255                 current_negated=current_negated,
1256                 used_aliases=can_reuse,
1257                 allow_joins=allow_joins,
1258                 split_subq=split_subq,
1259                 check_filterable=check_filterable,
1260             )
1261         if hasattr(filter_expr, 'resolve_expression'):
1262             if not getattr(filter_expr, 'conditional', False):
1263                 raise TypeError('Cannot filter against a non-conditional expression.')
1264             condition = self.build_lookup(
1265                 ['exact'], filter_expr.resolve_expression(self, allow_joins=allow_joins), True
1266             )
1267             clause = self.where_class()
1268             clause.add(condition, AND)
1269             return clause, []
1270         arg, value = filter_expr
1271         if not arg:
1272             raise FieldError("Cannot parse keyword query %r" % arg)
1273         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
1274 
1275         if check_filterable:
1276             self.check_filterable(reffed_expression)
1277 
1278         if not allow_joins and len(parts) > 1:
1279             raise FieldError("Joined field references are not permitted in this query")
1280 
1281         pre_joins = self.alias_refcount.copy()
1282         value = self.resolve_lookup_value(value, can_reuse, allow_joins)
1283         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}
1284 
1285         if check_filterable:
1286             self.check_filterable(value)
1287 
1288         clause = self.where_class()
1289         if reffed_expression:
1290             condition = self.build_lookup(lookups, reffed_expression, value)
1291             clause.add(condition, AND)
1292             return clause, []
1293 
1294         opts = self.get_meta()
1295         alias = self.get_initial_alias()
1296         allow_many = not branch_negated or not split_subq
1297 
1298         try:
1299             join_info = self.setup_joins(
1300                 parts, opts, alias, can_reuse=can_reuse, allow_many=allow_many,
1301                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1302             )
1303 
1304             # Prevent iterator from being consumed by check_related_objects()
1305             if isinstance(value, Iterator):
1306                 value = list(value)
1307             self.check_related_objects(join_info.final_field, value, join_info.opts)
1308 
1309             # split_exclude() needs to know which joins were generated for the
1310             # lookup parts
1311             self._lookup_joins = join_info.joins
1312         except MultiJoin as e:
1313             return self.split_exclude(filter_expr, can_reuse, e.names_with_path)
1314 
1315         # Update used_joins before trimming since they are reused to determine
1316         # which joins could be later promoted to INNER.
1317         used_joins.update(join_info.joins)
1318         targets, alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1319         if can_reuse is not None:
1320             can_reuse.update(join_list)
1321 
1322         if join_info.final_field.is_relation:
1323             # No support for transforms for relational fields
1324             num_lookups = len(lookups)
1325             if num_lookups > 1:
1326                 raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))
1327             if len(targets) == 1:
1328                 col = self._get_col(targets[0], join_info.final_field, alias)
1329             else:
1330                 col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)
1331         else:
1332             col = self._get_col(targets[0], join_info.final_field, alias)
1333 
1334         condition = self.build_lookup(lookups, col, value)
1335         lookup_type = condition.lookup_name
1336         clause.add(condition, AND)
1337 
1338         require_outer = lookup_type == 'isnull' and condition.rhs is True and not current_negated
1339         if current_negated and (lookup_type != 'isnull' or condition.rhs is False) and condition.rhs is not None:
1340             require_outer = True
1341             if lookup_type != 'isnull':
1342                 # The condition added here will be SQL like this:
1343                 # NOT (col IS NOT NULL), where the first NOT is added in
1344                 # upper layers of code. The reason for addition is that if col
1345                 # is null, then col != someval will result in SQL "unknown"
1346                 # which isn't the same as in Python. The Python None handling
1347                 # is wanted, and it can be gotten by
1348                 # (col IS NULL OR col != someval)
1349                 #   <=>
1350                 # NOT (col IS NOT NULL AND col = someval).
1351                 if (
1352                     self.is_nullable(targets[0]) or
1353                     self.alias_map[join_list[-1]].join_type == LOUTER
1354                 ):
1355                     lookup_class = targets[0].get_lookup('isnull')
1356                     col = self._get_col(targets[0], join_info.targets[0], alias)
1357                     clause.add(lookup_class(col, False), AND)
1358                 # If someval is a nullable column, someval IS NOT NULL is
1359                 # added.
1360                 if isinstance(value, Col) and self.is_nullable(value.target):
1361                     lookup_class = value.target.get_lookup('isnull')
1362                     clause.add(lookup_class(value, False), AND)
1363         return clause, used_joins if not require_outer else ()
1364 
1365     def add_filter(self, filter_clause):
1366         self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))
1367 
1368     def add_q(self, q_object):
1369         """
1370         A preprocessor for the internal _add_q(). Responsible for doing final
1371         join promotion.
1372         """
1373         # For join promotion this case is doing an AND for the added q_object
1374         # and existing conditions. So, any existing inner join forces the join
1375         # type to remain inner. Existing outer joins can however be demoted.
1376         # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if
1377         # rel_a doesn't produce any rows, then the whole condition must fail.
1378         # So, demotion is OK.
1379         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}
1380         clause, _ = self._add_q(q_object, self.used_aliases)
1381         if clause:
1382             self.where.add(clause, AND)
1383         self.demote_joins(existing_inner)
1384 
1385     def build_where(self, filter_expr):
1386         return self.build_filter(filter_expr, allow_joins=False)[0]
1387 
1388     def _add_q(self, q_object, used_aliases, branch_negated=False,
1389                current_negated=False, allow_joins=True, split_subq=True,
1390                check_filterable=True):
1391         """Add a Q-object to the current filter."""
1392         connector = q_object.connector
1393         current_negated = current_negated ^ q_object.negated
1394         branch_negated = branch_negated or q_object.negated
1395         target_clause = self.where_class(connector=connector,
1396                                          negated=q_object.negated)
1397         joinpromoter = JoinPromoter(q_object.connector, len(q_object.children), current_negated)
1398         for child in q_object.children:
1399             child_clause, needed_inner = self.build_filter(
1400                 child, can_reuse=used_aliases, branch_negated=branch_negated,
1401                 current_negated=current_negated, allow_joins=allow_joins,
1402                 split_subq=split_subq, check_filterable=check_filterable,
1403             )
1404             joinpromoter.add_votes(needed_inner)
1405             if child_clause:
1406                 target_clause.add(child_clause, connector)
1407         needed_inner = joinpromoter.update_join_types(self)
1408         return target_clause, needed_inner
1409 
1410     def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
1411         """Add a FilteredRelation object to the current filter."""
1412         connector = q_object.connector
1413         current_negated ^= q_object.negated
1414         branch_negated = branch_negated or q_object.negated
1415         target_clause = self.where_class(connector=connector, negated=q_object.negated)
1416         for child in q_object.children:
1417             if isinstance(child, Node):
1418                 child_clause = self.build_filtered_relation_q(
1419                     child, reuse=reuse, branch_negated=branch_negated,
1420                     current_negated=current_negated,
1421                 )
1422             else:
1423                 child_clause, _ = self.build_filter(
1424                     child, can_reuse=reuse, branch_negated=branch_negated,
1425                     current_negated=current_negated,
1426                     allow_joins=True, split_subq=False,
1427                     reuse_with_filtered_relation=True,
1428                 )
1429             target_clause.add(child_clause, connector)
1430         return target_clause
1431 
1432     def add_filtered_relation(self, filtered_relation, alias):
1433         filtered_relation.alias = alias
1434         lookups = dict(get_children_from_q(filtered_relation.condition))
1435         relation_lookup_parts, relation_field_parts, _ = self.solve_lookup_type(filtered_relation.relation_name)
1436         if relation_lookup_parts:
1437             raise ValueError(
1438                 "FilteredRelation's relation_name cannot contain lookups "
1439                 "(got %r)." % filtered_relation.relation_name
1440             )
1441         for lookup in chain(lookups):
1442             lookup_parts, lookup_field_parts, _ = self.solve_lookup_type(lookup)
1443             shift = 2 if not lookup_parts else 1
1444             lookup_field_path = lookup_field_parts[:-shift]
1445             for idx, lookup_field_part in enumerate(lookup_field_path):
1446                 if len(relation_field_parts) > idx:
1447                     if relation_field_parts[idx] != lookup_field_part:
1448                         raise ValueError(
1449                             "FilteredRelation's condition doesn't support "
1450                             "relations outside the %r (got %r)."
1451                             % (filtered_relation.relation_name, lookup)
1452                         )
1453                 else:
1454                     raise ValueError(
1455                         "FilteredRelation's condition doesn't support nested "
1456                         "relations deeper than the relation_name (got %r for "
1457                         "%r)." % (lookup, filtered_relation.relation_name)
1458                     )
1459         self._filtered_relations[filtered_relation.alias] = filtered_relation
1460 
1461     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
1462         """
1463         Walk the list of names and turns them into PathInfo tuples. A single
1464         name in 'names' can generate multiple PathInfos (m2m, for example).
1465 
1466         'names' is the path of names to travel, 'opts' is the model Options we
1467         start the name resolving from, 'allow_many' is as for setup_joins().
1468         If fail_on_missing is set to True, then a name that can't be resolved
1469         will generate a FieldError.
1470 
1471         Return a list of PathInfo tuples. In addition return the final field
1472         (the last used join field) and target (which is a field guaranteed to
1473         contain the same value as the final field). Finally, return those names
1474         that weren't found (which are likely transforms and the final lookup).
1475         """
1476         path, names_with_path = [], []
1477         for pos, name in enumerate(names):
1478             cur_names_with_path = (name, [])
1479             if name == 'pk':
1480                 name = opts.pk.name
1481 
1482             field = None
1483             filtered_relation = None
1484             try:
1485                 field = opts.get_field(name)
1486             except FieldDoesNotExist:
1487                 if name in self.annotation_select:
1488                     field = self.annotation_select[name].output_field
1489                 elif name in self._filtered_relations and pos == 0:
1490                     filtered_relation = self._filtered_relations[name]
1491                     if LOOKUP_SEP in filtered_relation.relation_name:
1492                         parts = filtered_relation.relation_name.split(LOOKUP_SEP)
1493                         filtered_relation_path, field, _, _ = self.names_to_path(
1494                             parts, opts, allow_many, fail_on_missing,
1495                         )
1496                         path.extend(filtered_relation_path[:-1])
1497                     else:
1498                         field = opts.get_field(filtered_relation.relation_name)
1499             if field is not None:
1500                 # Fields that contain one-to-many relations with a generic
1501                 # model (like a GenericForeignKey) cannot generate reverse
1502                 # relations and therefore cannot be used for reverse querying.
1503                 if field.is_relation and not field.related_model:
1504                     raise FieldError(
1505                         "Field %r does not generate an automatic reverse "
1506                         "relation and therefore cannot be used for reverse "
1507                         "querying. If it is a GenericForeignKey, consider "
1508                         "adding a GenericRelation." % name
1509                     )
1510                 try:
1511                     model = field.model._meta.concrete_model
1512                 except AttributeError:
1513                     # QuerySet.annotate() may introduce fields that aren't
1514                     # attached to a model.
1515                     model = None
1516             else:
1517                 # We didn't find the current field, so move position back
1518                 # one step.
1519                 pos -= 1
1520                 if pos == -1 or fail_on_missing:
1521                     available = sorted([
1522                         *get_field_names_from_opts(opts),
1523                         *self.annotation_select,
1524                         *self._filtered_relations,
1525                     ])
1526                     raise FieldError("Cannot resolve keyword '%s' into field. "
1527                                      "Choices are: %s" % (name, ", ".join(available)))
1528                 break
1529             # Check if we need any joins for concrete inheritance cases (the
1530             # field lives in parent, but we are currently in one of its
1531             # children)
1532             if model is not opts.model:
1533                 path_to_parent = opts.get_path_to_parent(model)
1534                 if path_to_parent:
1535                     path.extend(path_to_parent)
1536                     cur_names_with_path[1].extend(path_to_parent)
1537                     opts = path_to_parent[-1].to_opts
1538             if hasattr(field, 'get_path_info'):
1539                 pathinfos = field.get_path_info(filtered_relation)
1540                 if not allow_many:
1541                     for inner_pos, p in enumerate(pathinfos):
1542                         if p.m2m:
1543                             cur_names_with_path[1].extend(pathinfos[0:inner_pos + 1])
1544                             names_with_path.append(cur_names_with_path)
1545                             raise MultiJoin(pos + 1, names_with_path)
1546                 last = pathinfos[-1]
1547                 path.extend(pathinfos)
1548                 final_field = last.join_field
1549                 opts = last.to_opts
1550                 targets = last.target_fields
1551                 cur_names_with_path[1].extend(pathinfos)
1552                 names_with_path.append(cur_names_with_path)
1553             else:
1554                 # Local non-relational field.
1555                 final_field = field
1556                 targets = (field,)
1557                 if fail_on_missing and pos + 1 != len(names):
1558                     raise FieldError(
1559                         "Cannot resolve keyword %r into field. Join on '%s'"
1560                         " not permitted." % (names[pos + 1], name))
1561                 break
1562         return path, final_field, targets, names[pos + 1:]
1563 
1564     def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True,
1565                     reuse_with_filtered_relation=False):
1566         """
1567         Compute the necessary table joins for the passage through the fields
1568         given in 'names'. 'opts' is the Options class for the current model
1569         (which gives the table we are starting from), 'alias' is the alias for
1570         the table to start the joining from.
1571 
1572         The 'can_reuse' defines the reverse foreign key joins we can reuse. It
1573         can be None in which case all joins are reusable or a set of aliases
1574         that can be reused. Note that non-reverse foreign keys are always
1575         reusable when using setup_joins().
1576 
1577         The 'reuse_with_filtered_relation' can be used to force 'can_reuse'
1578         parameter and force the relation on the given connections.
1579 
1580         If 'allow_many' is False, then any reverse foreign key seen will
1581         generate a MultiJoin exception.
1582 
1583         Return the final field involved in the joins, the target field (used
1584         for any 'where' constraint), the final 'opts' value, the joins, the
1585         field path traveled to generate the joins, and a transform function
1586         that takes a field and alias and is equivalent to `field.get_col(alias)`
1587         in the simple case but wraps field transforms if they were included in
1588         names.
1589 
1590         The target field is the field containing the concrete value. Final
1591         field can be something different, for example foreign key pointing to
1592         that value. Final field is needed for example in some value
1593         conversions (convert 'obj' in fk__id=obj to pk val using the foreign
1594         key field for example).
1595         """
1596         joins = [alias]
1597         # The transform can't be applied yet, as joins must be trimmed later.
1598         # To avoid making every caller of this method look up transforms
1599         # directly, compute transforms here and create a partial that converts
1600         # fields to the appropriate wrapped version.
1601 
1602         def final_transformer(field, alias):
1603             return field.get_col(alias)
1604 
1605         # Try resolving all the names as fields first. If there's an error,
1606         # treat trailing names as lookups until a field can be resolved.
1607         last_field_exception = None
1608         for pivot in range(len(names), 0, -1):
1609             try:
1610                 path, final_field, targets, rest = self.names_to_path(
1611                     names[:pivot], opts, allow_many, fail_on_missing=True,
1612                 )
1613             except FieldError as exc:
1614                 if pivot == 1:
1615                     # The first item cannot be a lookup, so it's safe
1616                     # to raise the field error here.
1617                     raise
1618                 else:
1619                     last_field_exception = exc
1620             else:
1621                 # The transforms are the remaining items that couldn't be
1622                 # resolved into fields.
1623                 transforms = names[pivot:]
1624                 break
1625         for name in transforms:
1626             def transform(field, alias, *, name, previous):
1627                 try:
1628                     wrapped = previous(field, alias)
1629                     return self.try_transform(wrapped, name)
1630                 except FieldError:
1631                     # FieldError is raised if the transform doesn't exist.
1632                     if isinstance(final_field, Field) and last_field_exception:
1633                         raise last_field_exception
1634                     else:
1635                         raise
1636             final_transformer = functools.partial(transform, name=name, previous=final_transformer)
1637         # Then, add the path to the query's joins. Note that we can't trim
1638         # joins at this stage - we will need the information about join type
1639         # of the trimmed joins.
1640         for join in path:
1641             if join.filtered_relation:
1642                 filtered_relation = join.filtered_relation.clone()
1643                 table_alias = filtered_relation.alias
1644             else:
1645                 filtered_relation = None
1646                 table_alias = None
1647             opts = join.to_opts
1648             if join.direct:
1649                 nullable = self.is_nullable(join.join_field)
1650             else:
1651                 nullable = True
1652             connection = Join(
1653                 opts.db_table, alias, table_alias, INNER, join.join_field,
1654                 nullable, filtered_relation=filtered_relation,
1655             )
1656             reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None
1657             alias = self.join(
1658                 connection, reuse=reuse,
1659                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1660             )
1661             joins.append(alias)
1662             if filtered_relation:
1663                 filtered_relation.path = joins[:]
1664         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)
1665 
1666     def trim_joins(self, targets, joins, path):
1667         """
1668         The 'target' parameter is the final field being joined to, 'joins'
1669         is the full list of join aliases. The 'path' contain the PathInfos
1670         used to create the joins.
1671 
1672         Return the final target field and table alias and the new active
1673         joins.
1674 
1675         Always trim any direct join if the target column is already in the
1676         previous table. Can't trim reverse joins as it's unknown if there's
1677         anything on the other side of the join.
1678         """
1679         joins = joins[:]
1680         for pos, info in enumerate(reversed(path)):
1681             if len(joins) == 1 or not info.direct:
1682                 break
1683             if info.filtered_relation:
1684                 break
1685             join_targets = {t.column for t in info.join_field.foreign_related_fields}
1686             cur_targets = {t.column for t in targets}
1687             if not cur_targets.issubset(join_targets):
1688                 break
1689             targets_dict = {r[1].column: r[0] for r in info.join_field.related_fields if r[1].column in cur_targets}
1690             targets = tuple(targets_dict[t.column] for t in targets)
1691             self.unref_alias(joins.pop())
1692         return targets, joins[-1], joins
1693 
1694     @classmethod
1695     def _gen_cols(cls, exprs):
1696         for expr in exprs:
1697             if isinstance(expr, Col):
1698                 yield expr
1699             else:
1700                 yield from cls._gen_cols(expr.get_source_expressions())
1701 
1702     @classmethod
1703     def _gen_col_aliases(cls, exprs):
1704         yield from (expr.alias for expr in cls._gen_cols(exprs))
1705 
1706     def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False):
1707         if not allow_joins and LOOKUP_SEP in name:
1708             raise FieldError("Joined field references are not permitted in this query")
1709         annotation = self.annotations.get(name)
1710         if annotation is not None:
1711             if not allow_joins:
1712                 for alias in self._gen_col_aliases([annotation]):
1713                     if isinstance(self.alias_map[alias], Join):
1714                         raise FieldError(
1715                             'Joined field references are not permitted in '
1716                             'this query'
1717                         )
1718             if summarize:
1719                 # Summarize currently means we are doing an aggregate() query
1720                 # which is executed as a wrapped subquery if any of the
1721                 # aggregate() elements reference an existing annotation. In
1722                 # that case we need to return a Ref to the subquery's annotation.
1723                 if name not in self.annotation_select:
1724                     raise FieldError(
1725                         "Cannot aggregate over the '%s' alias. Use annotate() "
1726                         "to promote it." % name
1727                     )
1728                 return Ref(name, self.annotation_select[name])
1729             else:
1730                 return annotation
1731         else:
1732             field_list = name.split(LOOKUP_SEP)
1733             join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)
1734             targets, final_alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1735             if not allow_joins and len(join_list) > 1:
1736                 raise FieldError('Joined field references are not permitted in this query')
1737             if len(targets) > 1:
1738                 raise FieldError("Referencing multicolumn fields with F() objects "
1739                                  "isn't supported")
1740             # Verify that the last lookup in name is a field or a transform:
1741             # transform_function() raises FieldError if not.
1742             join_info.transform_function(targets[0], final_alias)
1743             if reuse is not None:
1744                 reuse.update(join_list)
1745             return self._get_col(targets[0], join_info.targets[0], join_list[-1])
1746 
1747     def split_exclude(self, filter_expr, can_reuse, names_with_path):
1748         """
1749         When doing an exclude against any kind of N-to-many relation, we need
1750         to use a subquery. This method constructs the nested query, given the
1751         original exclude filter (filter_expr) and the portion up to the first
1752         N-to-many relation field.
1753 
1754         For example, if the origin filter is ~Q(child__name='foo'), filter_expr
1755         is ('child__name', 'foo') and can_reuse is a set of joins usable for
1756         filters in the original query.
1757 
1758         We will turn this into equivalent of:
1759             WHERE NOT (pk IN (SELECT parent_id FROM thetable
1760                               WHERE name = 'foo' AND parent_id IS NOT NULL))
1761 
1762         It might be worth it to consider using WHERE NOT EXISTS as that has
1763         saner null handling, and is easier for the backend's optimizer to
1764         handle.
1765         """
1766         filter_lhs, filter_rhs = filter_expr
1767         if isinstance(filter_rhs, OuterRef):
1768             filter_expr = (filter_lhs, OuterRef(filter_rhs))
1769         elif isinstance(filter_rhs, F):
1770             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
1771         # Generate the inner query.
1772         query = Query(self.model)
1773         query._filtered_relations = self._filtered_relations
1774         query.add_filter(filter_expr)
1775         query.clear_ordering(True)
1776         # Try to have as simple as possible subquery -> trim leading joins from
1777         # the subquery.
1778         trimmed_prefix, contains_louter = query.trim_start(names_with_path)
1779 
1780         # Add extra check to make sure the selected field will not be null
1781         # since we are adding an IN <subquery> clause. This prevents the
1782         # database from tripping over IN (...,NULL,...) selects and returning
1783         # nothing
1784         col = query.select[0]
1785         select_field = col.target
1786         alias = col.alias
1787         if self.is_nullable(select_field):
1788             lookup_class = select_field.get_lookup('isnull')
1789             lookup = lookup_class(select_field.get_col(alias), False)
1790             query.where.add(lookup, AND)
1791         if alias in can_reuse:
1792             pk = select_field.model._meta.pk
1793             # Need to add a restriction so that outer query's filters are in effect for
1794             # the subquery, too.
1795             query.bump_prefix(self)
1796             lookup_class = select_field.get_lookup('exact')
1797             # Note that the query.select[0].alias is different from alias
1798             # due to bump_prefix above.
1799             lookup = lookup_class(pk.get_col(query.select[0].alias),
1800                                   pk.get_col(alias))
1801             query.where.add(lookup, AND)
1802             query.external_aliases[alias] = True
1803 
1804         condition, needed_inner = self.build_filter(
1805             ('%s__in' % trimmed_prefix, query),
1806             current_negated=True, branch_negated=True, can_reuse=can_reuse)
1807         if contains_louter:
1808             or_null_condition, _ = self.build_filter(
1809                 ('%s__isnull' % trimmed_prefix, True),
1810                 current_negated=True, branch_negated=True, can_reuse=can_reuse)
1811             condition.add(or_null_condition, OR)
1812             # Note that the end result will be:
1813             # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.
1814             # This might look crazy but due to how IN works, this seems to be
1815             # correct. If the IS NOT NULL check is removed then outercol NOT
1816             # IN will return UNKNOWN. If the IS NULL check is removed, then if
1817             # outercol IS NULL we will not match the row.
1818         return condition, needed_inner
1819 
1820     def set_empty(self):
1821         self.where.add(NothingNode(), AND)
1822         for query in self.combined_queries:
1823             query.set_empty()
1824 
1825     def is_empty(self):
1826         return any(isinstance(c, NothingNode) for c in self.where.children)
1827 
1828     def set_limits(self, low=None, high=None):
1829         """
1830         Adjust the limits on the rows retrieved. Use low/high to set these,
1831         as it makes it more Pythonic to read and write. When the SQL query is
1832         created, convert them to the appropriate offset and limit values.
1833 
1834         Apply any limits passed in here to the existing constraints. Add low
1835         to the current low value and clamp both to any existing high value.
1836         """
1837         if high is not None:
1838             if self.high_mark is not None:
1839                 self.high_mark = min(self.high_mark, self.low_mark + high)
1840             else:
1841                 self.high_mark = self.low_mark + high
1842         if low is not None:
1843             if self.high_mark is not None:
1844                 self.low_mark = min(self.high_mark, self.low_mark + low)
1845             else:
1846                 self.low_mark = self.low_mark + low
1847 
1848         if self.low_mark == self.high_mark:
1849             self.set_empty()
1850 
1851     def clear_limits(self):
1852         """Clear any existing limits."""
1853         self.low_mark, self.high_mark = 0, None
1854 
1855     @property
1856     def is_sliced(self):
1857         return self.low_mark != 0 or self.high_mark is not None
1858 
1859     def has_limit_one(self):
1860         return self.high_mark is not None and (self.high_mark - self.low_mark) == 1
1861 
1862     def can_filter(self):
1863         """
1864         Return True if adding filters to this instance is still possible.
1865 
1866         Typically, this means no limits or offsets have been put on the results.
1867         """
1868         return not self.is_sliced
1869 
1870     def clear_select_clause(self):
1871         """Remove all fields from SELECT clause."""
1872         self.select = ()
1873         self.default_cols = False
1874         self.select_related = False
1875         self.set_extra_mask(())
1876         self.set_annotation_mask(())
1877 
1878     def clear_select_fields(self):
1879         """
1880         Clear the list of fields to select (but not extra_select columns).
1881         Some queryset types completely replace any existing list of select
1882         columns.
1883         """
1884         self.select = ()
1885         self.values_select = ()
1886 
1887     def add_select_col(self, col):
1888         self.select += col,
1889         self.values_select += col.output_field.name,
1890 
1891     def set_select(self, cols):
1892         self.default_cols = False
1893         self.select = tuple(cols)
1894 
1895     def add_distinct_fields(self, *field_names):
1896         """
1897         Add and resolve the given fields to the query's "distinct on" clause.
1898         """
1899         self.distinct_fields = field_names
1900         self.distinct = True
1901 
1902     def add_fields(self, field_names, allow_m2m=True):
1903         """
1904         Add the given (model) fields to the select set. Add the field names in
1905         the order specified.
1906         """
1907         alias = self.get_initial_alias()
1908         opts = self.get_meta()
1909 
1910         try:
1911             cols = []
1912             for name in field_names:
1913                 # Join promotion note - we must not remove any rows here, so
1914                 # if there is no existing joins, use outer join.
1915                 join_info = self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m)
1916                 targets, final_alias, joins = self.trim_joins(
1917                     join_info.targets,
1918                     join_info.joins,
1919                     join_info.path,
1920                 )
1921                 for target in targets:
1922                     cols.append(join_info.transform_function(target, final_alias))
1923             if cols:
1924                 self.set_select(cols)
1925         except MultiJoin:
1926             raise FieldError("Invalid field name: '%s'" % name)
1927         except FieldError:
1928             if LOOKUP_SEP in name:
1929                 # For lookups spanning over relationships, show the error
1930                 # from the model on which the lookup failed.
1931                 raise
1932             elif name in self.annotations:
1933                 raise FieldError(
1934                     "Cannot select the '%s' alias. Use annotate() to promote "
1935                     "it." % name
1936                 )
1937             else:
1938                 names = sorted([
1939                     *get_field_names_from_opts(opts), *self.extra,
1940                     *self.annotation_select, *self._filtered_relations
1941                 ])
1942                 raise FieldError("Cannot resolve keyword %r into field. "
1943                                  "Choices are: %s" % (name, ", ".join(names)))
1944 
1945     def add_ordering(self, *ordering):
1946         """
1947         Add items from the 'ordering' sequence to the query's "order by"
1948         clause. These items are either field names (not column names) --
1949         possibly with a direction prefix ('-' or '?') -- or OrderBy
1950         expressions.
1951 
1952         If 'ordering' is empty, clear all ordering from the query.
1953         """
1954         errors = []
1955         for item in ordering:
1956             if isinstance(item, str):
1957                 if '.' in item:
1958                     warnings.warn(
1959                         'Passing column raw column aliases to order_by() is '
1960                         'deprecated. Wrap %r in a RawSQL expression before '
1961                         'passing it to order_by().' % item,
1962                         category=RemovedInDjango40Warning,
1963                         stacklevel=3,
1964                     )
1965                     continue
1966                 if item == '?':
1967                     continue
1968                 if item.startswith('-'):
1969                     item = item[1:]
1970                 if item in self.annotations:
1971                     continue
1972                 if self.extra and item in self.extra:
1973                     continue
1974                 # names_to_path() validates the lookup. A descriptive
1975                 # FieldError will be raise if it's not.
1976                 self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)
1977             elif not hasattr(item, 'resolve_expression'):
1978                 errors.append(item)
1979             if getattr(item, 'contains_aggregate', False):
1980                 raise FieldError(
1981                     'Using an aggregate in order_by() without also including '
1982                     'it in annotate() is not allowed: %s' % item
1983                 )
1984         if errors:
1985             raise FieldError('Invalid order_by arguments: %s' % errors)
1986         if ordering:
1987             self.order_by += ordering
1988         else:
1989             self.default_ordering = False
1990 
1991     def clear_ordering(self, force_empty):
1992         """
1993         Remove any ordering settings. If 'force_empty' is True, there will be
1994         no ordering in the resulting query (not even the model's default).
1995         """
1996         self.order_by = ()
1997         self.extra_order_by = ()
1998         if force_empty:
1999             self.default_ordering = False
2000 
2001     def set_group_by(self, allow_aliases=True):
2002         """
2003         Expand the GROUP BY clause required by the query.
2004 
2005         This will usually be the set of all non-aggregate fields in the
2006         return data. If the database backend supports grouping by the
2007         primary key, and the query would be equivalent, the optimization
2008         will be made automatically.
2009         """
2010         # Column names from JOINs to check collisions with aliases.
2011         if allow_aliases:
2012             column_names = set()
2013             seen_models = set()
2014             for join in list(self.alias_map.values())[1:]:  # Skip base table.
2015                 model = join.join_field.related_model
2016                 if model not in seen_models:
2017                     column_names.update({
2018                         field.column
2019                         for field in model._meta.local_concrete_fields
2020                     })
2021                     seen_models.add(model)
2022 
2023         group_by = list(self.select)
2024         if self.annotation_select:
2025             for alias, annotation in self.annotation_select.items():
2026                 signature = inspect.signature(annotation.get_group_by_cols)
2027                 if 'alias' not in signature.parameters:
2028                     annotation_class = annotation.__class__
2029                     msg = (
2030                         '`alias=None` must be added to the signature of '
2031                         '%s.%s.get_group_by_cols().'
2032                     ) % (annotation_class.__module__, annotation_class.__qualname__)
2033                     warnings.warn(msg, category=RemovedInDjango40Warning)
2034                     group_by_cols = annotation.get_group_by_cols()
2035                 else:
2036                     if not allow_aliases or alias in column_names:
2037                         alias = None
2038                     group_by_cols = annotation.get_group_by_cols(alias=alias)
2039                 group_by.extend(group_by_cols)
2040         self.group_by = tuple(group_by)
2041 
2042     def add_select_related(self, fields):
2043         """
2044         Set up the select_related data structure so that we only select
2045         certain related models (as opposed to all models, when
2046         self.select_related=True).
2047         """
2048         if isinstance(self.select_related, bool):
2049             field_dict = {}
2050         else:
2051             field_dict = self.select_related
2052         for field in fields:
2053             d = field_dict
2054             for part in field.split(LOOKUP_SEP):
2055                 d = d.setdefault(part, {})
2056         self.select_related = field_dict
2057 
2058     def add_extra(self, select, select_params, where, params, tables, order_by):
2059         """
2060         Add data to the various extra_* attributes for user-created additions
2061         to the query.
2062         """
2063         if select:
2064             # We need to pair any placeholder markers in the 'select'
2065             # dictionary with their parameters in 'select_params' so that
2066             # subsequent updates to the select dictionary also adjust the
2067             # parameters appropriately.
2068             select_pairs = {}
2069             if select_params:
2070                 param_iter = iter(select_params)
2071             else:
2072                 param_iter = iter([])
2073             for name, entry in select.items():
2074                 entry = str(entry)
2075                 entry_params = []
2076                 pos = entry.find("%s")
2077                 while pos != -1:
2078                     if pos == 0 or entry[pos - 1] != '%':
2079                         entry_params.append(next(param_iter))
2080                     pos = entry.find("%s", pos + 2)
2081                 select_pairs[name] = (entry, entry_params)
2082             self.extra.update(select_pairs)
2083         if where or params:
2084             self.where.add(ExtraWhere(where, params), AND)
2085         if tables:
2086             self.extra_tables += tuple(tables)
2087         if order_by:
2088             self.extra_order_by = order_by
2089 
2090     def clear_deferred_loading(self):
2091         """Remove any fields from the deferred loading set."""
2092         self.deferred_loading = (frozenset(), True)
2093 
2094     def add_deferred_loading(self, field_names):
2095         """
2096         Add the given list of model field names to the set of fields to
2097         exclude from loading from the database when automatic column selection
2098         is done. Add the new field names to any existing field names that
2099         are deferred (or removed from any existing field names that are marked
2100         as the only ones for immediate loading).
2101         """
2102         # Fields on related models are stored in the literal double-underscore
2103         # format, so that we can use a set datastructure. We do the foo__bar
2104         # splitting and handling when computing the SQL column names (as part of
2105         # get_columns()).
2106         existing, defer = self.deferred_loading
2107         if defer:
2108             # Add to existing deferred names.
2109             self.deferred_loading = existing.union(field_names), True
2110         else:
2111             # Remove names from the set of any existing "immediate load" names.
2112             self.deferred_loading = existing.difference(field_names), False
2113 
2114     def add_immediate_loading(self, field_names):
2115         """
2116         Add the given list of model field names to the set of fields to
2117         retrieve when the SQL is executed ("immediate loading" fields). The
2118         field names replace any existing immediate loading field names. If
2119         there are field names already specified for deferred loading, remove
2120         those names from the new field_names before storing the new names
2121         for immediate loading. (That is, immediate loading overrides any
2122         existing immediate values, but respects existing deferrals.)
2123         """
2124         existing, defer = self.deferred_loading
2125         field_names = set(field_names)
2126         if 'pk' in field_names:
2127             field_names.remove('pk')
2128             field_names.add(self.get_meta().pk.name)
2129 
2130         if defer:
2131             # Remove any existing deferred names from the current set before
2132             # setting the new names.
2133             self.deferred_loading = field_names.difference(existing), False
2134         else:
2135             # Replace any existing "immediate load" field names.
2136             self.deferred_loading = frozenset(field_names), False
2137 
2138     def get_loaded_field_names(self):
2139         """
2140         If any fields are marked to be deferred, return a dictionary mapping
2141         models to a set of names in those fields that will be loaded. If a
2142         model is not in the returned dictionary, none of its fields are
2143         deferred.
2144 
2145         If no fields are marked for deferral, return an empty dictionary.
2146         """
2147         # We cache this because we call this function multiple times
2148         # (compiler.fill_related_selections, query.iterator)
2149         try:
2150             return self._loaded_field_names_cache
2151         except AttributeError:
2152             collection = {}
2153             self.deferred_to_data(collection, self.get_loaded_field_names_cb)
2154             self._loaded_field_names_cache = collection
2155             return collection
2156 
2157     def get_loaded_field_names_cb(self, target, model, fields):
2158         """Callback used by get_deferred_field_names()."""
2159         target[model] = {f.attname for f in fields}
2160 
2161     def set_annotation_mask(self, names):
2162         """Set the mask of annotations that will be returned by the SELECT."""
2163         if names is None:
2164             self.annotation_select_mask = None
2165         else:
2166             self.annotation_select_mask = set(names)
2167         self._annotation_select_cache = None
2168 
2169     def append_annotation_mask(self, names):
2170         if self.annotation_select_mask is not None:
2171             self.set_annotation_mask(self.annotation_select_mask.union(names))
2172 
2173     def set_extra_mask(self, names):
2174         """
2175         Set the mask of extra select items that will be returned by SELECT.
2176         Don't remove them from the Query since they might be used later.
2177         """
2178         if names is None:
2179             self.extra_select_mask = None
2180         else:
2181             self.extra_select_mask = set(names)
2182         self._extra_select_cache = None
2183 
2184     def set_values(self, fields):
2185         self.select_related = False
2186         self.clear_deferred_loading()
2187         self.clear_select_fields()
2188 
2189         if fields:
2190             field_names = []
2191             extra_names = []
2192             annotation_names = []
2193             if not self.extra and not self.annotations:
2194                 # Shortcut - if there are no extra or annotations, then
2195                 # the values() clause must be just field names.
2196                 field_names = list(fields)
2197             else:
2198                 self.default_cols = False
2199                 for f in fields:
2200                     if f in self.extra_select:
2201                         extra_names.append(f)
2202                     elif f in self.annotation_select:
2203                         annotation_names.append(f)
2204                     else:
2205                         field_names.append(f)
2206             self.set_extra_mask(extra_names)
2207             self.set_annotation_mask(annotation_names)
2208         else:
2209             field_names = [f.attname for f in self.model._meta.concrete_fields]
2210         # Selected annotations must be known before setting the GROUP BY
2211         # clause.
2212         if self.group_by is True:
2213             self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
2214             # Disable GROUP BY aliases to avoid orphaning references to the
2215             # SELECT clause which is about to be cleared.
2216             self.set_group_by(allow_aliases=False)
2217             self.clear_select_fields()
2218         elif self.group_by:
2219             # Resolve GROUP BY annotation references if they are not part of
2220             # the selected fields anymore.
2221             group_by = []
2222             for expr in self.group_by:
2223                 if isinstance(expr, Ref) and expr.refs not in field_names:
2224                     expr = self.annotations[expr.refs]
2225                 group_by.append(expr)
2226             self.group_by = tuple(group_by)
2227 
2228         self.values_select = tuple(field_names)
2229         self.add_fields(field_names, True)
2230 
2231     @property
2232     def annotation_select(self):
2233         """
2234         Return the dictionary of aggregate columns that are not masked and
2235         should be used in the SELECT clause. Cache this result for performance.
2236         """
2237         if self._annotation_select_cache is not None:
2238             return self._annotation_select_cache
2239         elif not self.annotations:
2240             return {}
2241         elif self.annotation_select_mask is not None:
2242             self._annotation_select_cache = {
2243                 k: v for k, v in self.annotations.items()
2244                 if k in self.annotation_select_mask
2245             }
2246             return self._annotation_select_cache
2247         else:
2248             return self.annotations
2249 
2250     @property
2251     def extra_select(self):
2252         if self._extra_select_cache is not None:
2253             return self._extra_select_cache
2254         if not self.extra:
2255             return {}
2256         elif self.extra_select_mask is not None:
2257             self._extra_select_cache = {
2258                 k: v for k, v in self.extra.items()
2259                 if k in self.extra_select_mask
2260             }
2261             return self._extra_select_cache
2262         else:
2263             return self.extra
2264 
2265     def trim_start(self, names_with_path):
2266         """
2267         Trim joins from the start of the join path. The candidates for trim
2268         are the PathInfos in names_with_path structure that are m2m joins.
2269 
2270         Also set the select column so the start matches the join.
2271 
2272         This method is meant to be used for generating the subquery joins &
2273         cols in split_exclude().
2274 
2275         Return a lookup usable for doing outerq.filter(lookup=self) and a
2276         boolean indicating if the joins in the prefix contain a LEFT OUTER join.
2277         _"""
2278         all_paths = []
2279         for _, paths in names_with_path:
2280             all_paths.extend(paths)
2281         contains_louter = False
2282         # Trim and operate only on tables that were generated for
2283         # the lookup part of the query. That is, avoid trimming
2284         # joins generated for F() expressions.
2285         lookup_tables = [
2286             t for t in self.alias_map
2287             if t in self._lookup_joins or t == self.base_table
2288         ]
2289         for trimmed_paths, path in enumerate(all_paths):
2290             if path.m2m:
2291                 break
2292             if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type == LOUTER:
2293                 contains_louter = True
2294             alias = lookup_tables[trimmed_paths]
2295             self.unref_alias(alias)
2296         # The path.join_field is a Rel, lets get the other side's field
2297         join_field = path.join_field.field
2298         # Build the filter prefix.
2299         paths_in_prefix = trimmed_paths
2300         trimmed_prefix = []
2301         for name, path in names_with_path:
2302             if paths_in_prefix - len(path) < 0:
2303                 break
2304             trimmed_prefix.append(name)
2305             paths_in_prefix -= len(path)
2306         trimmed_prefix.append(
2307             join_field.foreign_related_fields[0].name)
2308         trimmed_prefix = LOOKUP_SEP.join(trimmed_prefix)
2309         # Lets still see if we can trim the first join from the inner query
2310         # (that is, self). We can't do this for:
2311         # - LEFT JOINs because we would miss those rows that have nothing on
2312         #   the outer side,
2313         # - INNER JOINs from filtered relations because we would miss their
2314         #   filters.
2315         first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]
2316         if first_join.join_type != LOUTER and not first_join.filtered_relation:
2317             select_fields = [r[0] for r in join_field.related_fields]
2318             select_alias = lookup_tables[trimmed_paths + 1]
2319             self.unref_alias(lookup_tables[trimmed_paths])
2320             extra_restriction = join_field.get_extra_restriction(
2321                 self.where_class, None, lookup_tables[trimmed_paths + 1])
2322             if extra_restriction:
2323                 self.where.add(extra_restriction, AND)
2324         else:
2325             # TODO: It might be possible to trim more joins from the start of the
2326             # inner query if it happens to have a longer join chain containing the
2327             # values in select_fields. Lets punt this one for now.
2328             select_fields = [r[1] for r in join_field.related_fields]
2329             select_alias = lookup_tables[trimmed_paths]
2330         # The found starting point is likely a Join instead of a BaseTable reference.
2331         # But the first entry in the query's FROM clause must not be a JOIN.
2332         for table in self.alias_map:
2333             if self.alias_refcount[table] > 0:
2334                 self.alias_map[table] = BaseTable(self.alias_map[table].table_name, table)
2335                 break
2336         self.set_select([f.get_col(select_alias) for f in select_fields])
2337         return trimmed_prefix, contains_louter
2338 
2339     def is_nullable(self, field):
2340         """
2341         Check if the given field should be treated as nullable.
2342 
2343         Some backends treat '' as null and Django treats such fields as
2344         nullable for those backends. In such situations field.null can be
2345         False even if we should treat the field as nullable.
2346         """
2347         # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have
2348         # (nor should it have) knowledge of which connection is going to be
2349         # used. The proper fix would be to defer all decisions where
2350         # is_nullable() is needed to the compiler stage, but that is not easy
2351         # to do currently.
2352         return (
2353             connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
2354             field.empty_strings_allowed
2355         ) or field.null

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>]
2025-10-18 12:21:33.469 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-18 12:21:33.470 | INFO     | Search-only: skipping patch selection
2025-10-18 12:21:33.620 | INFO     | Task django__django-13606 completed successfully.
2025-10-18 12:21:33.621 | INFO     | No patch generated. You can try running ACR again.
