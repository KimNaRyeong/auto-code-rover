[
    {
        "rel_file_path": "sphinx/builders/html/transforms.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sphinx-doc__sphinx/setup_sphinx-doc__sphinx__3.5/sphinx/builders/html/transforms.py",
        "start": 42,
        "end": 59,
        "class_name": "KeyboardTransform",
        "method_name": "run",
        "code": "42     def run(self, **kwargs: Any) -> None:\n43         matcher = NodeMatcher(nodes.literal, classes=[\"kbd\"])\n44         for node in self.document.traverse(matcher):  # type: nodes.literal\n45             parts = self.pattern.split(node[-1].astext())\n46             if len(parts) == 1:\n47                 continue\n48 \n49             node.pop()\n50             while parts:\n51                 key = parts.pop(0)\n52                 node += nodes.literal('', key, classes=[\"kbd\"])\n53 \n54                 try:\n55                     # key separator (ex. -, +, ^)\n56                     sep = parts.pop(0)\n57                     node += nodes.Text(sep)\n58                 except IndexError:\n59                     pass\n",
        "intended_behavior": "The `run` method of the `KeyboardTransform` class should be modified to recognize and differently handle compound keystrokes (e.g., \"Control+X\"). When it detects a compound keystroke (i.e., one that is split into parts by `-`, `+`, `^`, or space), it should wrap these parts in an additional `<literal>` (or equivalent) element with a new class (suggested `compound-kbd`). This container will allow for differentiated styling from single keystrokes. Preservation: Single keystrokes remain unaffected and continue to be represented as is, with the class `kbd`. Extension: Compound keystrokes should now be distinguishable in the HTML output, as they would be wrapped in a container with a class that identifies them as compound. This container should only wrap the entire compound keystroke, and not each individual key, allowing for CSS targeting of compound keystrokes as a whole versus their individual parts."
    },
    {
        "rel_file_path": "sphinx/builders/html/transforms.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sphinx-doc__sphinx/setup_sphinx-doc__sphinx__3.5/sphinx/builders/html/transforms.py",
        "start": 21,
        "end": 59,
        "class_name": "KeyboardTransform",
        "method_name": null,
        "code": "21 class KeyboardTransform(SphinxPostTransform):\n22     \"\"\"Transform :kbd: role to more detailed form.\n23 \n24     Before::\n25 \n26         <literal class=\"kbd\">\n27             Control-x\n28 \n29     After::\n30 \n31         <literal class=\"kbd\">\n32             <literal class=\"kbd\">\n33                 Control\n34             -\n35             <literal class=\"kbd\">\n36                 x\n37     \"\"\"\n38     default_priority = 400\n39     builders = ('html',)\n40     pattern = re.compile(r'(-|\\+|\\^|\\s+)')\n41 \n42     def run(self, **kwargs: Any) -> None:\n43         matcher = NodeMatcher(nodes.literal, classes=[\"kbd\"])\n44         for node in self.document.traverse(matcher):  # type: nodes.literal\n45             parts = self.pattern.split(node[-1].astext())\n46             if len(parts) == 1:\n47                 continue\n48 \n49             node.pop()\n50             while parts:\n51                 key = parts.pop(0)\n52                 node += nodes.literal('', key, classes=[\"kbd\"])\n53 \n54                 try:\n55                     # key separator (ex. -, +, ^)\n56                     sep = parts.pop(0)\n57                     node += nodes.Text(sep)\n58                 except IndexError:\n59                     pass\n",
        "intended_behavior": "This class provides additional context to the issue."
    }
]