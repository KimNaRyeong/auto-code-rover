[
    {
        "rel_file_path": "django/utils/dateparse.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/utils/dateparse.py",
        "start": 125,
        "end": 147,
        "class_name": null,
        "method_name": "parse_duration",
        "code": "125 def parse_duration(value):\n126     \"\"\"Parse a duration string and return a datetime.timedelta.\n127 \n128     The preferred format for durations in Django is '%d %H:%M:%S.%f'.\n129 \n130     Also supports ISO 8601 representation and PostgreSQL's day-time interval\n131     format.\n132     \"\"\"\n133     match = (\n134         standard_duration_re.match(value) or\n135         iso8601_duration_re.match(value) or\n136         postgres_interval_re.match(value)\n137     )\n138     if match:\n139         kw = match.groupdict()\n140         sign = -1 if kw.pop('sign', '+') == '-' else 1\n141         if kw.get('microseconds'):\n142             kw['microseconds'] = kw['microseconds'].ljust(6, '0')\n143         if kw.get('seconds') and kw.get('microseconds') and kw['seconds'].startswith('-'):\n144             kw['microseconds'] = '-' + kw['microseconds']\n145         kw = {k: float(v.replace(',', '.')) for k, v in kw.items() if v is not None}\n146         days = datetime.timedelta(kw.pop('days', .0) or .0)\n147         return days + sign * datetime.timedelta(**kw)\n",
        "intended_behavior": "The `parse_duration` function needs to properly account for negative durations when the timedelta only has days. Specifically, when parsing an ISO 8601 duration string that signifies a negative duration consisting solely of days (e.g., `-P1D`), the resultant `datetime.timedelta` object should correctly reflect a negative number of days (i.e., `datetime.timedelta(days=-1)`). To resolve the issue, a modification is required whereby the application of the sign to the `days` part ensures that negative durations are faithfully represented, even when other time components (hours, minutes, seconds, microseconds) are not specified in the duration string. This adjustment must preserve the existing functionality for parsing other forms of duration strings (positive durations, durations including time components other than days, etc.) while fixing the incorrect handling of negative durations as described in the issue."
    }
]