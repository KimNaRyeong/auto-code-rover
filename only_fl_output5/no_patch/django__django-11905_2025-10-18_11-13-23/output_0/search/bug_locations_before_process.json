[
    {
        "file": "django/db/models/query.py",
        "class": "QuerySet",
        "method": "filter, _filter_or_exclude",
        "intended_behavior": "Inside the `filter` and `_filter_or_exclude` methods, whenever a `__isnull` lookup is encountered, introduce a validation check to assert that the value associated with `__isnull` is a boolean (`True` or `False`). If a non-boolean value is detected, the method should raise a `ValueError` with a clear message indicating that `__isnull` only accepts boolean values. This preserves the existing functionality of allowing to filter querysets based on whether a field is `NULL` or not, but enforces correct usage and prevents the misuse of the lookup with unintended value types."
    },
    {
        "file": "django/db/models/sql/query.py",
        "class": "SQLCompiler",
        "method": "",
        "intended_behavior": "While not directly modifying this class for the boolean validation, ensuring that the `SQLCompiler` has access to the validation logic or error raised in `QuerySet`'s methods might help with broader error handling and messaging. The actual change would be in the queryset filtering logic, but attention should be given here to ensure that errors are gracefully handled and correctly propagate up to developers when incorrect `__isnull` usage is attempted. The intended behavior is not so much an alteration of `SQLCompiler` but an acknowledgment that changes in `QuerySet` logic may affect how SQL compilation errors are caught and reported."
    }
]