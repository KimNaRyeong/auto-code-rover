[
    {
        "role": "system",
        "content": "You are a software developer maintaining a large project.\nYou are working on an issue submitted to your project.\nThe issue contains a description marked between <issue> and </issue>.\nYour task is to invoke a few search API calls to gather sufficient code context for resolving the issue.\nThe collected context will later be sent to your colleage for writing a patch.\nDo not worry about test files or writing test; you are only interested in crafting a patch.\n"
    },
    {
        "role": "user",
        "content": "<issue>301 redirect broken with latest pyopenssl/SNI\nWith the latest pyopenssl on Windows 64bit:\n```\ncryptography==0.2.dev1\nndg-httpsclient==0.3.2\npyOpenSSL==0.13\npyasn1==0.1.7\n```\nI get an exception raised when `GET`ing a `301` response to a HTTPS request. I see that after the redirect is received the returned URL is [decoded to a Unicode string](https://github.com/kennethreitz/requests/blob/master/requests/adapters.py#L181). Then requests passes the response to `resolve_redirects` which uses the url to make a new request. This leads to a Unicode string being passed to urllib3 and eventually pyopenssl. And because in pyopenssl they now check that the data is of type bytes, an exception is thrown.\nI Wrote this test:\n```\ndef test_pyopenssl_redirect(self):\nrequests.get('https://httpbin.org/status/301')\n```\nand this is the result of py.test:\n```\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nself = <OpenSSL.SSL.Connection object at 0x000000000345CC50>\nbuf = u'GET /redirect/1 HTTP/1.1\\r\\nHost: httpbin.org\\r\\nAccept-Encoding: gzip, defl...cept: */*\\r\\nUser-Agent: python-r\nequests/2.2.1 CPython/2.7.6 Windows/8\\r\\n\\r\\n'\nflags = 0\ndef sendall(self, buf, flags=0):\n\"\"\"\nSend \"all\" data on the connection. This calls send() repeatedly until\nall data is sent. If an error occurs, it's impossible to tell how much\ndata has been sent.\n:param buf: The string to send\n:param flags: (optional) Included for compatibility with the socket\nAPI, the value is ignored\n:return: The number of bytes written\n\"\"\"\nif isinstance(buf, _memoryview):\nbuf = buf.tobytes()\nif not isinstance(buf, bytes):\n>           raise TypeError(\"buf must be a byte string\")\nE           TypeError: buf must be a byte string\n..\\testreq\\lib\\site-packages\\OpenSSL\\SSL.py:968: TypeError\n=================================== 117 tests deselected by '-kpyopenssl_redirect' ====================================\n====================================== 1 failed, 117 deselected in 4.47 seconds =======================================\n```\n</issue>"
    },
    {
        "role": "user",
        "content": "Based on the files, classes, methods, and code statements from the issue related to the bug, you can use the following search APIs to get more context of the project.\n- search_class(class_name: str): Search for a class in the codebase.\n- search_class_in_file(self, class_name, file_name: str): Search for a class in a given file.\n- search_method_in_file(method_name: str, file_path: str): Search for a method in a given file..\n- search_method_in_class(method_name: str, class_name: str): Search for a method in a given class.\n- search_method(method_name: str): Search for a method in the entire codebase.\n- search_code(code_str: str): Search for a code snippet in the entire codebase.\n- search_code_in_file(code_str: str, file_path: str): Search for a code snippet in a given file file.\n- get_code_around_line(file_path: str, line_number: int, window_size: int): Get the code around a given line number in a file. window_size is the number of lines before and after the line number.\n\nYou must give correct number of arguments when invoking API calls.\n\nNote that you can use multiple search APIs in one round.\n\nNow analyze the issue and select necessary APIs to get more context of the project. Each API call must have concrete arguments as inputs."
    },
    {
        "role": "assistant",
        "content": "To address and gather sufficient context for resolving the issue described, the following API calls would be essential:\n\n1. Locate the part of the code where the URL is decoded to a Unicode string in the `requests` library. As mentioned, this happens after a `301` redirection response is handled. Since the exception stack trace points to an interaction with `pyOpenSSL`, it implies the issue might lie in how `requests` processes redirects and how it interfaces with `urllib3`, which in turn interfaces with `pyOpenSSL`. The issue description points to a specific line in `requests/adapters.py`. Although I cannot directly use the line number to find the relevant code without knowing the exact version of the Requests library, I can look for the method that could be handling the redirect flow. The method name isn't explicitly mentioned, but from the context, it likely involves redirect resolution logic.\n\n2. Since `resolve_redirects` seems to be a crucial part of the flow where the bug occurs, an investigation into its implementation should provide insights into how URLs are re-requested after a redirect. This method likely belongs to the Requests library or closely associated with its handling of responses.\n\nBased on this, I will issue the following API calls:\n\n- `search_method(\"resolve_redirects\")`: To identify the `resolve_redirects` method's definition in the codebase. This could help in understanding how the URLs are handled and passed through the system.\n\n- `search_code(\"if not isinstance(buf, bytes):\"): To find instances where there is a type check for `buf` against bytes, potentially leading to the exception mentioned in the issue.\n\nThese searches aim to locate the parts of the codebase where the redirect is handled and where the type check that is causing the exception occurs. This should provide a more comprehensive context for the problem at hand."
    }
]