[
    {
        "rel_file_path": "django/contrib/gis/forms/widgets.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/contrib/gis/forms/widgets.py",
        "start": 1,
        "end": 117,
        "class_name": null,
        "method_name": null,
        "code": "1 import logging\n2 \n3 from django.conf import settings\n4 from django.contrib.gis import gdal\n5 from django.contrib.gis.geometry import json_regex\n6 from django.contrib.gis.geos import GEOSException, GEOSGeometry\n7 from django.forms.widgets import Widget\n8 from django.utils import translation\n9 \n10 logger = logging.getLogger('django.contrib.gis')\n11 \n12 \n13 class BaseGeometryWidget(Widget):\n14     \"\"\"\n15     The base class for rich geometry widgets.\n16     Render a map using the WKT of the geometry.\n17     \"\"\"\n18     geom_type = 'GEOMETRY'\n19     map_srid = 4326\n20     map_width = 600\n21     map_height = 400\n22     display_raw = False\n23 \n24     supports_3d = False\n25     template_name = ''  # set on subclasses\n26 \n27     def __init__(self, attrs=None):\n28         self.attrs = {}\n29         for key in ('geom_type', 'map_srid', 'map_width', 'map_height', 'display_raw'):\n30             self.attrs[key] = getattr(self, key)\n31         if attrs:\n32             self.attrs.update(attrs)\n33 \n34     def serialize(self, value):\n35         return value.wkt if value else ''\n36 \n37     def deserialize(self, value):\n38         try:\n39             return GEOSGeometry(value)\n40         except (GEOSException, ValueError, TypeError) as err:\n41             logger.error(\"Error creating geometry from value '%s' (%s)\", value, err)\n42         return None\n43 \n44     def get_context(self, name, value, attrs):\n45         context = super().get_context(name, value, attrs)\n46         # If a string reaches here (via a validation error on another\n47         # field) then just reconstruct the Geometry.\n48         if value and isinstance(value, str):\n49             value = self.deserialize(value)\n50 \n51         if value:\n52             # Check that srid of value and map match\n53             if value.srid and value.srid != self.map_srid:\n54                 try:\n55                     ogr = value.ogr\n56                     ogr.transform(self.map_srid)\n57                     value = ogr\n58                 except gdal.GDALException as err:\n59                     logger.error(\n60                         \"Error transforming geometry from srid '%s' to srid '%s' (%s)\",\n61                         value.srid, self.map_srid, err\n62                     )\n63 \n64         context.update(self.build_attrs(self.attrs, {\n65             'name': name,\n66             'module': 'geodjango_%s' % name.replace('-', '_'),  # JS-safe\n67             'serialized': self.serialize(value),\n68             'geom_type': gdal.OGRGeomType(self.attrs['geom_type']),\n69             'STATIC_URL': settings.STATIC_URL,\n70             'LANGUAGE_BIDI': translation.get_language_bidi(),\n71             **(attrs or {}),\n72         }))\n73         return context\n74 \n75 \n76 class OpenLayersWidget(BaseGeometryWidget):\n77     template_name = 'gis/openlayers.html'\n78     map_srid = 3857\n79 \n80     class Media:\n81         css = {\n82             'all': (\n83                 'https://cdnjs.cloudflare.com/ajax/libs/ol3/4.6.5/ol.css',\n84                 'gis/css/ol3.css',\n85             )\n86         }\n87         js = (\n88             'https://cdnjs.cloudflare.com/ajax/libs/ol3/4.6.5/ol.js',\n89             'gis/js/OLMapWidget.js',\n90         )\n91 \n92     def serialize(self, value):\n93         return value.json if value else ''\n94 \n95     def deserialize(self, value):\n96         geom = super().deserialize(value)\n97         # GeoJSON assumes WGS84 (4326). Use the map's SRID instead.\n98         if geom and json_regex.match(value) and self.map_srid != 4326:\n99             geom.srid = self.map_srid\n100         return geom\n101 \n102 \n103 class OSMWidget(OpenLayersWidget):\n104     \"\"\"\n105     An OpenLayers/OpenStreetMap-based widget.\n106     \"\"\"\n107     template_name = 'gis/openlayers-osm.html'\n108     default_lon = 5\n109     default_lat = 47\n110     default_zoom = 12\n111 \n112     def __init__(self, attrs=None):\n113         super().__init__()\n114         for key in ('default_lon', 'default_lat', 'default_zoom'):\n115             self.attrs[key] = getattr(self, key)\n116         if attrs:\n117             self.attrs.update(attrs)\n",
        "intended_behavior": "Ensure that all floating-point numbers related to OpenLayers map configurations or data are formatted with a dot as the decimal separator. This could involve overriding the default string representation of these numbers or explicitly formatting them when converting to a string."
    },
    {
        "rel_file_path": "django/contrib/gis/admin/options.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/contrib/gis/admin/options.py",
        "start": 1,
        "end": 134,
        "class_name": null,
        "method_name": null,
        "code": "1 from django.contrib.admin import ModelAdmin\n2 from django.contrib.gis.admin.widgets import OpenLayersWidget\n3 from django.contrib.gis.db import models\n4 from django.contrib.gis.gdal import OGRGeomType\n5 from django.forms import Media\n6 \n7 spherical_mercator_srid = 3857\n8 \n9 \n10 class GeoModelAdmin(ModelAdmin):\n11     \"\"\"\n12     The administration options class for Geographic models. Map settings\n13     may be overloaded from their defaults to create custom maps.\n14     \"\"\"\n15     # The default map settings that may be overloaded -- still subject\n16     # to API changes.\n17     default_lon = 0\n18     default_lat = 0\n19     default_zoom = 4\n20     display_wkt = False\n21     display_srid = False\n22     extra_js = []\n23     num_zoom = 18\n24     max_zoom = False\n25     min_zoom = False\n26     units = False\n27     max_resolution = False\n28     max_extent = False\n29     modifiable = True\n30     mouse_position = True\n31     scale_text = True\n32     layerswitcher = True\n33     scrollable = True\n34     map_width = 600\n35     map_height = 400\n36     map_srid = 4326\n37     map_template = 'gis/admin/openlayers.html'\n38     openlayers_url = 'https://cdnjs.cloudflare.com/ajax/libs/openlayers/2.13.1/OpenLayers.js'\n39     point_zoom = num_zoom - 6\n40     wms_url = 'http://vmap0.tiles.osgeo.org/wms/vmap0'\n41     wms_layer = 'basic'\n42     wms_name = 'OpenLayers WMS'\n43     wms_options = {'format': 'image/jpeg'}\n44     debug = False\n45     widget = OpenLayersWidget\n46 \n47     @property\n48     def media(self):\n49         \"Injects OpenLayers JavaScript into the admin.\"\n50         return super().media + Media(js=[self.openlayers_url] + self.extra_js)\n51 \n52     def formfield_for_dbfield(self, db_field, request, **kwargs):\n53         \"\"\"\n54         Overloaded from ModelAdmin so that an OpenLayersWidget is used\n55         for viewing/editing 2D GeometryFields (OpenLayers 2 does not support\n56         3D editing).\n57         \"\"\"\n58         if isinstance(db_field, models.GeometryField) and db_field.dim < 3:\n59             # Setting the widget with the newly defined widget.\n60             kwargs['widget'] = self.get_map_widget(db_field)\n61             return db_field.formfield(**kwargs)\n62         else:\n63             return super().formfield_for_dbfield(db_field, request, **kwargs)\n64 \n65     def get_map_widget(self, db_field):\n66         \"\"\"\n67         Return a subclass of the OpenLayersWidget (or whatever was specified\n68         in the `widget` attribute) using the settings from the attributes set\n69         in this class.\n70         \"\"\"\n71         is_collection = db_field.geom_type in ('MULTIPOINT', 'MULTILINESTRING', 'MULTIPOLYGON', 'GEOMETRYCOLLECTION')\n72         if is_collection:\n73             if db_field.geom_type == 'GEOMETRYCOLLECTION':\n74                 collection_type = 'Any'\n75             else:\n76                 collection_type = OGRGeomType(db_field.geom_type.replace('MULTI', ''))\n77         else:\n78             collection_type = 'None'\n79 \n80         class OLMap(self.widget):\n81             template_name = self.map_template\n82             geom_type = db_field.geom_type\n83 \n84             wms_options = ''\n85             if self.wms_options:\n86                 wms_options = [\"%s: '%s'\" % pair for pair in self.wms_options.items()]\n87                 wms_options = ', %s' % ', '.join(wms_options)\n88 \n89             params = {\n90                 'default_lon': self.default_lon,\n91                 'default_lat': self.default_lat,\n92                 'default_zoom': self.default_zoom,\n93                 'display_wkt': self.debug or self.display_wkt,\n94                 'geom_type': OGRGeomType(db_field.geom_type),\n95                 'field_name': db_field.name,\n96                 'is_collection': is_collection,\n97                 'scrollable': self.scrollable,\n98                 'layerswitcher': self.layerswitcher,\n99                 'collection_type': collection_type,\n100                 'is_generic': db_field.geom_type == 'GEOMETRY',\n101                 'is_linestring': db_field.geom_type in ('LINESTRING', 'MULTILINESTRING'),\n102                 'is_polygon': db_field.geom_type in ('POLYGON', 'MULTIPOLYGON'),\n103                 'is_point': db_field.geom_type in ('POINT', 'MULTIPOINT'),\n104                 'num_zoom': self.num_zoom,\n105                 'max_zoom': self.max_zoom,\n106                 'min_zoom': self.min_zoom,\n107                 'units': self.units,  # likely should get from object\n108                 'max_resolution': self.max_resolution,\n109                 'max_extent': self.max_extent,\n110                 'modifiable': self.modifiable,\n111                 'mouse_position': self.mouse_position,\n112                 'scale_text': self.scale_text,\n113                 'map_width': self.map_width,\n114                 'map_height': self.map_height,\n115                 'point_zoom': self.point_zoom,\n116                 'srid': self.map_srid,\n117                 'display_srid': self.display_srid,\n118                 'wms_url': self.wms_url,\n119                 'wms_layer': self.wms_layer,\n120                 'wms_name': self.wms_name,\n121                 'wms_options': wms_options,\n122                 'debug': self.debug,\n123             }\n124         return OLMap\n125 \n126 \n127 class OSMGeoAdmin(GeoModelAdmin):\n128     map_template = 'gis/admin/osm.html'\n129     num_zoom = 20\n130     map_srid = spherical_mercator_srid\n131     max_extent = '-20037508,-20037508,20037508,20037508'\n132     max_resolution = '156543.0339'\n133     point_zoom = num_zoom - 6\n134     units = 'm'\n",
        "intended_behavior": "Apply a similar approach as described for `widgets.py` to ensure any floating-point values are explicitly formatted to use a dot as the decimal separator before being included in JavaScript code for OpenLayers within the Django admin interface."
    }
]