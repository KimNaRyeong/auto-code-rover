[
    {
        "rel_file_path": "lib/matplotlib/cbook/__init__.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.5/lib/matplotlib/cbook/__init__.py",
        "start": 2153,
        "end": 2171,
        "class_name": null,
        "method_name": "_g_sig_digits",
        "code": "2153 def _g_sig_digits(value, delta):\n2154     \"\"\"\n2155     Return the number of significant digits to %g-format *value*, assuming that\n2156     it is known with an error of *delta*.\n2157     \"\"\"\n2158     if delta == 0:\n2159         # delta = 0 may occur when trying to format values over a tiny range;\n2160         # in that case, replace it by the distance to the closest float.\n2161         delta = np.spacing(value)\n2162     # If e.g. value = 45.67 and delta = 0.02, then we want to round to 2 digits\n2163     # after the decimal point (floor(log10(0.02)) = -2); 45.67 contributes 2\n2164     # digits before the decimal point (floor(log10(45.67)) + 1 = 2): the total\n2165     # is 4 significant digits.  A value of 0 contributes 1 \"digit\" before the\n2166     # decimal point.\n2167     # For inf or nan, the precision doesn't matter.\n2168     return max(\n2169         0,\n2170         (math.floor(math.log10(abs(value))) + 1 if value else 1)\n2171         - math.floor(math.log10(delta))) if math.isfinite(value) else 0\n",
        "intended_behavior": "This function attempts to compute significant digits for a given `value` and `delta`. The `math domain error` arises when trying to take the logarithm of a non-positive number, which occurs when `delta` <= 0. To resolve this issue, the function should check if `delta` is positive before attempting the logarithm operation. If `delta` is non-positive (<= 0), the function should gracefully handle this case to avoid a math domain error.\n\nA potential fix could include adjusting the logic to ensure `delta` is a positive number before the log calculation. For example, we might add a conditional check to set `delta` to a minimal positive value (such as `1e-10`) when it's non-positive. This would preserve the existing functionality by still allowing the calculation of significant digits but avoid the scenario leading to the domain error. The correction should maintain the logic's integrity for all other values of `delta` and `value` that do not cause an issue."
    }
]