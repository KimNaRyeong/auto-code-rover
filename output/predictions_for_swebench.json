[
    {
        "instance_id": "django__django-11133",
        "model_name_or_path": "gpt-4-0125-preview",
        "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..a663d1c817 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -120,7 +120,7 @@ class HttpResponseBase:\n             if isinstance(value, str):\n                 # Ensure string is valid in given charset\n                 value.encode(charset)\n-            else:\n+            elif not isinstance(value, memoryview):\n                 # Convert bytestring using given charset\n                 value = value.decode(charset)\n         except UnicodeError as e:\n@@ -309,6 +309,8 @@ class HttpResponse(HttpResponseBase):\n     @content.setter\n     def content(self, value):\n         # Consume iterators upon assignment to allow repeated iteration.\n+        if isinstance(value, memoryview):\n+            value = bytes(value)\n         if hasattr(value, '__iter__') and not isinstance(value, (bytes, str)):\n             content = b''.join(self.make_bytes(chunk) for chunk in value)\n             if hasattr(value, 'close'):\n"
    },
    {
        "instance_id": "django__django-11133",
        "model_name_or_path": "gpt-4-0125-preview",
        "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..3aa6071359 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -317,6 +317,8 @@ class HttpResponse(HttpResponseBase):\n                 except Exception:\n                     pass\n         else:\n+            if isinstance(value, memoryview):\n+                value = value.tobytes()\n             content = self.make_bytes(value)\n         # Create a list of properly encoded bytestrings to support write().\n         self._container = [content]\n"
    },
    {
        "instance_id": "django__django-11133",
        "model_name_or_path": "gpt-4-0125-preview",
        "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..ffbf12a00d 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -309,7 +309,7 @@ class HttpResponse(HttpResponseBase):\n     @content.setter\n     def content(self, value):\n         # Consume iterators upon assignment to allow repeated iteration.\n-        if hasattr(value, '__iter__') and not isinstance(value, (bytes, str)):\n+        if hasattr(value, '__iter__') and not isinstance(value, (bytes, str, memoryview)):\n             content = b''.join(self.make_bytes(chunk) for chunk in value)\n             if hasattr(value, 'close'):\n                 try:\n@@ -317,6 +317,8 @@ class HttpResponse(HttpResponseBase):\n                 except Exception:\n                     pass\n         else:\n+            if isinstance(value, memoryview):\n+                value = value.tobytes()\n             content = self.make_bytes(value)\n         # Create a list of properly encoded bytestrings to support write().\n         self._container = [content]\n"
    },
    {
        "instance_id": "django__django-11133",
        "model_name_or_path": "gpt-4-0125-preview",
        "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..307566f1a7 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -287,6 +287,8 @@ class HttpResponse(HttpResponseBase):\n     def __init__(self, content=b'', *args, **kwargs):\n         super().__init__(*args, **kwargs)\n         # Content is a bytestring. See the `content` property methods.\n+        if isinstance(content, memoryview):\n+            content = bytes(content)\n         self.content = content\n \n     def __repr__(self):\n@@ -309,6 +311,9 @@ class HttpResponse(HttpResponseBase):\n     @content.setter\n     def content(self, value):\n         # Consume iterators upon assignment to allow repeated iteration.\n+        if isinstance(value, memoryview):\n+            value = bytes(value)\n+        \n         if hasattr(value, '__iter__') and not isinstance(value, (bytes, str)):\n             content = b''.join(self.make_bytes(chunk) for chunk in value)\n             if hasattr(value, 'close'):\n"
    }
]