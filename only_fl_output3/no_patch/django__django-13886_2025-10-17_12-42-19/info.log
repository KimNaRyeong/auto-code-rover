2025-10-17 12:42:19.395 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-17 12:42:22.786 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=168, output_tokens=13, cost=0.002070
2025-10-17 12:42:22.787 | INFO     | Test agent decides that the issue statement does not contain reproduction steps; skipping reproducer tracing
2025-10-17 12:42:22.791 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-17 12:42:30.773 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=472, output_tokens=327, cost=0.014530
2025-10-17 12:42:30.777 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-17 12:42:33.410 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=681, output_tokens=53, cost=0.008400
2025-10-17 12:42:33.412 | DEBUG    | Extracted a valid json.
2025-10-17 12:42:33.412 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_method(\"check\")",
        "search_method(\"resolve_expression\")",
        "search_method(\"_gen_cols\")",
        "search_code(\"Meta.indexes\")"
    ],
    "bug_locations": []
}
2025-10-17 12:42:33.480 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-17 12:42:33.480 | DEBUG    | <Agent search> Analyzing search results.
2025-10-17 12:42:49.722 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1909, output_tokens=767, cost=0.042100
2025-10-17 12:42:49.738 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-17 12:43:03.964 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2892, output_tokens=559, cost=0.045690
2025-10-17 12:43:03.976 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-17 12:43:14.300 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=913, output_tokens=478, cost=0.023470
2025-10-17 12:43:14.301 | DEBUG    | Extracted a valid json.
2025-10-17 12:43:14.301 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations":[
        {
            "file": "django/db/models/sql/query.py",
            "class": "Query",
            "method": "_gen_cols",
            "intended_behavior": "While this method in itself is not buggy, it provides an insight into how expressions are iterated over and columns are extracted. No modification is needed here, but this insight informs the implementation strategy for the checks. The intended behavior around _gen_cols remains the same, but understanding it helps in developing a new system check to validate model field names in functional indexes without directly modifying this method."
        },
        {
            "file": "django/db/backends/base/schema.py",
            "class": "BaseDatabaseSchemaEditor",
            "method": "_model_indexes_sql",
            "intended_behavior": "This method generates SQL for model indexes including functional indexes. To resolve the issue, the intended behavior here should include a preliminary step where functional indexes are validated for the existence of model fields referenced in their expressions. This validation step would involve implementing a new system check mechanism prior to this point to ensure that only valid field names are included in functional indexes. The existing functionality for generating SQL remains the same, but it will be preceded by an additional validation layer to catch invalid field references early in the process."
        },
        {
            "file": "Not specified but potentially in a file related to system checks, e.g., django/core/checks/model_checks.py or a new file dedicated to index checks.",
            "class": "Not specified, potentially a new class for handling index-related checks or extending an existing one.",
            "intended_behavior": "Implement a new method or class method that leverages expression resolving logic (similar to `resolve_expression`) and column extraction logic (insight from `_gen_cols`) to verify the validity of field references within expressions used in functional indexes. This check should be designed to run as part of Django's system check framework, ideally before models are loaded or migration commands are run. It would iterate over each model's Meta.indexes, identify functional indexes, and validate that each expression within these indexes correctly references existing model fields. This method should handle expressions intelligently to ensure that complex expressions (e.g., those using database functions) are also validated correctly, without producing false positives or negatives."
        }
    ]
}
2025-10-17 12:43:14.326 | DEBUG    | Bug location extracted successfully: [<file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>_gen_cols</method>
<code>
1713     def _gen_cols(cls, exprs):
1714         for expr in exprs:
1715             if isinstance(expr, Col):
1716                 yield expr
1717             else:
1718                 yield from cls._gen_cols(expr.get_source_expressions())

</code><intended_behavior>While this method in itself is not buggy, it provides an insight into how expressions are iterated over and columns are extracted. No modification is needed here, but this insight informs the implementation strategy for the checks. The intended behavior around _gen_cols remains the same, but understanding it helps in developing a new system check to validate model field names in functional indexes without directly modifying this method.</intended_behavior>, <file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>None</method>
<code>
143 class Query(BaseExpression):
144     """A single SQL query."""
145 
146     alias_prefix = 'T'
147     subq_aliases = frozenset([alias_prefix])
148 
149     compiler = 'SQLCompiler'
150 
151     def __init__(self, model, where=WhereNode, alias_cols=True):
152         self.model = model
153         self.alias_refcount = {}
154         # alias_map is the most important data structure regarding joins.
155         # It's used for recording which joins exist in the query and what
156         # types they are. The key is the alias of the joined table (possibly
157         # the table name) and the value is a Join-like object (see
158         # sql.datastructures.Join for more information).
159         self.alias_map = {}
160         # Whether to provide alias to columns during reference resolving.
161         self.alias_cols = alias_cols
162         # Sometimes the query contains references to aliases in outer queries (as
163         # a result of split_exclude). Correct alias quoting needs to know these
164         # aliases too.
165         # Map external tables to whether they are aliased.
166         self.external_aliases = {}
167         self.table_map = {}     # Maps table names to list of aliases.
168         self.default_cols = True
169         self.default_ordering = True
170         self.standard_ordering = True
171         self.used_aliases = set()
172         self.filter_is_sticky = False
173         self.subquery = False
174 
175         # SQL-related attributes
176         # Select and related select clauses are expressions to use in the
177         # SELECT clause of the query.
178         # The select is used for cases where we want to set up the select
179         # clause to contain other than default fields (values(), subqueries...)
180         # Note that annotations go to annotations dictionary.
181         self.select = ()
182         self.where = where()
183         self.where_class = where
184         # The group_by attribute can have one of the following forms:
185         #  - None: no group by at all in the query
186         #  - A tuple of expressions: group by (at least) those expressions.
187         #    String refs are also allowed for now.
188         #  - True: group by all select fields of the model
189         # See compiler.get_group_by() for details.
190         self.group_by = None
191         self.order_by = ()
192         self.low_mark, self.high_mark = 0, None  # Used for offset/limit
193         self.distinct = False
194         self.distinct_fields = ()
195         self.select_for_update = False
196         self.select_for_update_nowait = False
197         self.select_for_update_skip_locked = False
198         self.select_for_update_of = ()
199         self.select_for_no_key_update = False
200 
201         self.select_related = False
202         # Arbitrary limit for select_related to prevents infinite recursion.
203         self.max_depth = 5
204 
205         # Holds the selects defined by a call to values() or values_list()
206         # excluding annotation_select and extra_select.
207         self.values_select = ()
208 
209         # SQL annotation-related attributes
210         self.annotations = {}  # Maps alias -> Annotation Expression
211         self.annotation_select_mask = None
212         self._annotation_select_cache = None
213 
214         # Set combination attributes
215         self.combinator = None
216         self.combinator_all = False
217         self.combined_queries = ()
218 
219         # These are for extensions. The contents are more or less appended
220         # verbatim to the appropriate clause.
221         self.extra = {}  # Maps col_alias -> (col_sql, params).
222         self.extra_select_mask = None
223         self._extra_select_cache = None
224 
225         self.extra_tables = ()
226         self.extra_order_by = ()
227 
228         # A tuple that is a set of model field names and either True, if these
229         # are the fields to defer, or False if these are the only fields to
230         # load.
231         self.deferred_loading = (frozenset(), True)
232 
233         self._filtered_relations = {}
234 
235         self.explain_query = False
236         self.explain_format = None
237         self.explain_options = {}
238 
239     @property
240     def output_field(self):
241         if len(self.select) == 1:
242             select = self.select[0]
243             return getattr(select, 'target', None) or select.field
244         elif len(self.annotation_select) == 1:
245             return next(iter(self.annotation_select.values())).output_field
246 
247     @property
248     def has_select_fields(self):
249         return bool(self.select or self.annotation_select_mask or self.extra_select_mask)
250 
251     @cached_property
252     def base_table(self):
253         for alias in self.alias_map:
254             return alias
255 
256     @property
257     def identity(self):
258         identity = (
259             (arg, make_hashable(value))
260             for arg, value in self.__dict__.items()
261         )
262         return (self.__class__, *identity)
263 
264     def __str__(self):
265         """
266         Return the query as a string of SQL with the parameter values
267         substituted in (use sql_with_params() to see the unsubstituted string).
268 
269         Parameter values won't necessarily be quoted correctly, since that is
270         done by the database interface at execution time.
271         """
272         sql, params = self.sql_with_params()
273         return sql % params
274 
275     def sql_with_params(self):
276         """
277         Return the query as an SQL string and the parameters that will be
278         substituted into the query.
279         """
280         return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()
281 
282     def __deepcopy__(self, memo):
283         """Limit the amount of work when a Query is deepcopied."""
284         result = self.clone()
285         memo[id(self)] = result
286         return result
287 
288     def get_compiler(self, using=None, connection=None):
289         if using is None and connection is None:
290             raise ValueError("Need either using or connection")
291         if using:
292             connection = connections[using]
293         return connection.ops.compiler(self.compiler)(self, connection, using)
294 
295     def get_meta(self):
296         """
297         Return the Options instance (the model._meta) from which to start
298         processing. Normally, this is self.model._meta, but it can be changed
299         by subclasses.
300         """
301         return self.model._meta
302 
303     def clone(self):
304         """
305         Return a copy of the current Query. A lightweight alternative to
306         to deepcopy().
307         """
308         obj = Empty()
309         obj.__class__ = self.__class__
310         # Copy references to everything.
311         obj.__dict__ = self.__dict__.copy()
312         # Clone attributes that can't use shallow copy.
313         obj.alias_refcount = self.alias_refcount.copy()
314         obj.alias_map = self.alias_map.copy()
315         obj.external_aliases = self.external_aliases.copy()
316         obj.table_map = self.table_map.copy()
317         obj.where = self.where.clone()
318         obj.annotations = self.annotations.copy()
319         if self.annotation_select_mask is None:
320             obj.annotation_select_mask = None
321         else:
322             obj.annotation_select_mask = self.annotation_select_mask.copy()
323         obj.combined_queries = tuple(query.clone() for query in self.combined_queries)
324         # _annotation_select_cache cannot be copied, as doing so breaks the
325         # (necessary) state in which both annotations and
326         # _annotation_select_cache point to the same underlying objects.
327         # It will get re-populated in the cloned queryset the next time it's
328         # used.
329         obj._annotation_select_cache = None
330         obj.extra = self.extra.copy()
331         if self.extra_select_mask is None:
332             obj.extra_select_mask = None
333         else:
334             obj.extra_select_mask = self.extra_select_mask.copy()
335         if self._extra_select_cache is None:
336             obj._extra_select_cache = None
337         else:
338             obj._extra_select_cache = self._extra_select_cache.copy()
339         if self.select_related is not False:
340             # Use deepcopy because select_related stores fields in nested
341             # dicts.
342             obj.select_related = copy.deepcopy(obj.select_related)
343         if 'subq_aliases' in self.__dict__:
344             obj.subq_aliases = self.subq_aliases.copy()
345         obj.used_aliases = self.used_aliases.copy()
346         obj._filtered_relations = self._filtered_relations.copy()
347         # Clear the cached_property
348         try:
349             del obj.base_table
350         except AttributeError:
351             pass
352         return obj
353 
354     def chain(self, klass=None):
355         """
356         Return a copy of the current Query that's ready for another operation.
357         The klass argument changes the type of the Query, e.g. UpdateQuery.
358         """
359         obj = self.clone()
360         if klass and obj.__class__ != klass:
361             obj.__class__ = klass
362         if not obj.filter_is_sticky:
363             obj.used_aliases = set()
364         obj.filter_is_sticky = False
365         if hasattr(obj, '_setup_query'):
366             obj._setup_query()
367         return obj
368 
369     def relabeled_clone(self, change_map):
370         clone = self.clone()
371         clone.change_aliases(change_map)
372         return clone
373 
374     def _get_col(self, target, field, alias):
375         if not self.alias_cols:
376             alias = None
377         return target.get_col(alias, field)
378 
379     def rewrite_cols(self, annotation, col_cnt):
380         # We must make sure the inner query has the referred columns in it.
381         # If we are aggregating over an annotation, then Django uses Ref()
382         # instances to note this. However, if we are annotating over a column
383         # of a related model, then it might be that column isn't part of the
384         # SELECT clause of the inner query, and we must manually make sure
385         # the column is selected. An example case is:
386         #    .aggregate(Sum('author__awards'))
387         # Resolving this expression results in a join to author, but there
388         # is no guarantee the awards column of author is in the select clause
389         # of the query. Thus we must manually add the column to the inner
390         # query.
391         orig_exprs = annotation.get_source_expressions()
392         new_exprs = []
393         for expr in orig_exprs:
394             # FIXME: These conditions are fairly arbitrary. Identify a better
395             # method of having expressions decide which code path they should
396             # take.
397             if isinstance(expr, Ref):
398                 # Its already a Ref to subquery (see resolve_ref() for
399                 # details)
400                 new_exprs.append(expr)
401             elif isinstance(expr, (WhereNode, Lookup)):
402                 # Decompose the subexpressions further. The code here is
403                 # copied from the else clause, but this condition must appear
404                 # before the contains_aggregate/is_summary condition below.
405                 new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
406                 new_exprs.append(new_expr)
407             else:
408                 # Reuse aliases of expressions already selected in subquery.
409                 for col_alias, selected_annotation in self.annotation_select.items():
410                     if selected_annotation is expr:
411                         new_expr = Ref(col_alias, expr)
412                         break
413                 else:
414                     # An expression that is not selected the subquery.
415                     if isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):
416                         # Reference column or another aggregate. Select it
417                         # under a non-conflicting alias.
418                         col_cnt += 1
419                         col_alias = '__col%d' % col_cnt
420                         self.annotations[col_alias] = expr
421                         self.append_annotation_mask([col_alias])
422                         new_expr = Ref(col_alias, expr)
423                     else:
424                         # Some other expression not referencing database values
425                         # directly. Its subexpression might contain Cols.
426                         new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
427                 new_exprs.append(new_expr)
428         annotation.set_source_expressions(new_exprs)
429         return annotation, col_cnt
430 
431     def get_aggregation(self, using, added_aggregate_names):
432         """
433         Return the dictionary with the values of the existing aggregations.
434         """
435         if not self.annotation_select:
436             return {}
437         existing_annotations = [
438             annotation for alias, annotation
439             in self.annotations.items()
440             if alias not in added_aggregate_names
441         ]
442         # Decide if we need to use a subquery.
443         #
444         # Existing annotations would cause incorrect results as get_aggregation()
445         # must produce just one result and thus must not use GROUP BY. But we
446         # aren't smart enough to remove the existing annotations from the
447         # query, so those would force us to use GROUP BY.
448         #
449         # If the query has limit or distinct, or uses set operations, then
450         # those operations must be done in a subquery so that the query
451         # aggregates on the limit and/or distinct results instead of applying
452         # the distinct and limit after the aggregation.
453         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or
454                 self.distinct or self.combinator):
455             from django.db.models.sql.subqueries import AggregateQuery
456             inner_query = self.clone()
457             inner_query.subquery = True
458             outer_query = AggregateQuery(self.model, inner_query)
459             inner_query.select_for_update = False
460             inner_query.select_related = False
461             inner_query.set_annotation_mask(self.annotation_select)
462             if not self.is_sliced and not self.distinct_fields:
463                 # Queries with distinct_fields need ordering and when a limit
464                 # is applied we must take the slice from the ordered query.
465                 # Otherwise no need for ordering.
466                 inner_query.clear_ordering(True)
467             if not inner_query.distinct:
468                 # If the inner query uses default select and it has some
469                 # aggregate annotations, then we must make sure the inner
470                 # query is grouped by the main model's primary key. However,
471                 # clearing the select clause can alter results if distinct is
472                 # used.
473                 has_existing_aggregate_annotations = any(
474                     annotation for annotation in existing_annotations
475                     if getattr(annotation, 'contains_aggregate', True)
476                 )
477                 if inner_query.default_cols and has_existing_aggregate_annotations:
478                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
479                 inner_query.default_cols = False
480 
481             relabels = {t: 'subquery' for t in inner_query.alias_map}
482             relabels[None] = 'subquery'
483             # Remove any aggregates marked for reduction from the subquery
484             # and move them to the outer AggregateQuery.
485             col_cnt = 0
486             for alias, expression in list(inner_query.annotation_select.items()):
487                 annotation_select_mask = inner_query.annotation_select_mask
488                 if expression.is_summary:
489                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
490                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
491                     del inner_query.annotations[alias]
492                     annotation_select_mask.remove(alias)
493                 # Make sure the annotation_select wont use cached results.
494                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)
495             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
496                 # In case of Model.objects[0:3].count(), there would be no
497                 # field selected in the inner query, yet we must use a subquery.
498                 # So, make sure at least one field is selected.
499                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
500         else:
501             outer_query = self
502             self.select = ()
503             self.default_cols = False
504             self.extra = {}
505 
506         outer_query.clear_ordering(True)
507         outer_query.clear_limits()
508         outer_query.select_for_update = False
509         outer_query.select_related = False
510         compiler = outer_query.get_compiler(using)
511         result = compiler.execute_sql(SINGLE)
512         if result is None:
513             result = [None] * len(outer_query.annotation_select)
514 
515         converters = compiler.get_converters(outer_query.annotation_select.values())
516         result = next(compiler.apply_converters((result,), converters))
517 
518         return dict(zip(outer_query.annotation_select, result))
519 
520     def get_count(self, using):
521         """
522         Perform a COUNT() query using the current filter constraints.
523         """
524         obj = self.clone()
525         obj.add_annotation(Count('*'), alias='__count', is_summary=True)
526         number = obj.get_aggregation(using, ['__count'])['__count']
527         if number is None:
528             number = 0
529         return number
530 
531     def has_filters(self):
532         return self.where
533 
534     def exists(self, using, limit=True):
535         q = self.clone()
536         if not q.distinct:
537             if q.group_by is True:
538                 q.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
539                 # Disable GROUP BY aliases to avoid orphaning references to the
540                 # SELECT clause which is about to be cleared.
541                 q.set_group_by(allow_aliases=False)
542             q.clear_select_clause()
543         if q.combined_queries and q.combinator == 'union':
544             limit_combined = connections[using].features.supports_slicing_ordering_in_compound
545             q.combined_queries = tuple(
546                 combined_query.exists(using, limit=limit_combined)
547                 for combined_query in q.combined_queries
548             )
549         q.clear_ordering(True)
550         if limit:
551             q.set_limits(high=1)
552         q.add_extra({'a': 1}, None, None, None, None, None)
553         q.set_extra_mask(['a'])
554         return q
555 
556     def has_results(self, using):
557         q = self.exists(using)
558         compiler = q.get_compiler(using=using)
559         return compiler.has_results()
560 
561     def explain(self, using, format=None, **options):
562         q = self.clone()
563         q.explain_query = True
564         q.explain_format = format
565         q.explain_options = options
566         compiler = q.get_compiler(using=using)
567         return '\n'.join(compiler.explain_query())
568 
569     def combine(self, rhs, connector):
570         """
571         Merge the 'rhs' query into the current one (with any 'rhs' effects
572         being applied *after* (that is, "to the right of") anything in the
573         current query. 'rhs' is not modified during a call to this function.
574 
575         The 'connector' parameter describes how to connect filters from the
576         'rhs' query.
577         """
578         assert self.model == rhs.model, \
579             "Cannot combine queries on two different base models."
580         assert not self.is_sliced, \
581             "Cannot combine queries once a slice has been taken."
582         assert self.distinct == rhs.distinct, \
583             "Cannot combine a unique query with a non-unique query."
584         assert self.distinct_fields == rhs.distinct_fields, \
585             "Cannot combine queries with different distinct fields."
586 
587         # Work out how to relabel the rhs aliases, if necessary.
588         change_map = {}
589         conjunction = (connector == AND)
590 
591         # Determine which existing joins can be reused. When combining the
592         # query with AND we must recreate all joins for m2m filters. When
593         # combining with OR we can reuse joins. The reason is that in AND
594         # case a single row can't fulfill a condition like:
595         #     revrel__col=1 & revrel__col=2
596         # But, there might be two different related rows matching this
597         # condition. In OR case a single True is enough, so single row is
598         # enough, too.
599         #
600         # Note that we will be creating duplicate joins for non-m2m joins in
601         # the AND case. The results will be correct but this creates too many
602         # joins. This is something that could be fixed later on.
603         reuse = set() if conjunction else set(self.alias_map)
604         # Base table must be present in the query - this is the same
605         # table on both sides.
606         self.get_initial_alias()
607         joinpromoter = JoinPromoter(connector, 2, False)
608         joinpromoter.add_votes(
609             j for j in self.alias_map if self.alias_map[j].join_type == INNER)
610         rhs_votes = set()
611         # Now, add the joins from rhs query into the new query (skipping base
612         # table).
613         rhs_tables = list(rhs.alias_map)[1:]
614         for alias in rhs_tables:
615             join = rhs.alias_map[alias]
616             # If the left side of the join was already relabeled, use the
617             # updated alias.
618             join = join.relabeled_clone(change_map)
619             new_alias = self.join(join, reuse=reuse)
620             if join.join_type == INNER:
621                 rhs_votes.add(new_alias)
622             # We can't reuse the same join again in the query. If we have two
623             # distinct joins for the same connection in rhs query, then the
624             # combined query must have two joins, too.
625             reuse.discard(new_alias)
626             if alias != new_alias:
627                 change_map[alias] = new_alias
628             if not rhs.alias_refcount[alias]:
629                 # The alias was unused in the rhs query. Unref it so that it
630                 # will be unused in the new query, too. We have to add and
631                 # unref the alias so that join promotion has information of
632                 # the join type for the unused alias.
633                 self.unref_alias(new_alias)
634         joinpromoter.add_votes(rhs_votes)
635         joinpromoter.update_join_types(self)
636 
637         # Now relabel a copy of the rhs where-clause and add it to the current
638         # one.
639         w = rhs.where.clone()
640         w.relabel_aliases(change_map)
641         self.where.add(w, connector)
642 
643         # Selection columns and extra extensions are those provided by 'rhs'.
644         if rhs.select:
645             self.set_select([col.relabeled_clone(change_map) for col in rhs.select])
646         else:
647             self.select = ()
648 
649         if connector == OR:
650             # It would be nice to be able to handle this, but the queries don't
651             # really make sense (or return consistent value sets). Not worth
652             # the extra complexity when you can write a real query instead.
653             if self.extra and rhs.extra:
654                 raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")
655         self.extra.update(rhs.extra)
656         extra_select_mask = set()
657         if self.extra_select_mask is not None:
658             extra_select_mask.update(self.extra_select_mask)
659         if rhs.extra_select_mask is not None:
660             extra_select_mask.update(rhs.extra_select_mask)
661         if extra_select_mask:
662             self.set_extra_mask(extra_select_mask)
663         self.extra_tables += rhs.extra_tables
664 
665         # Ordering uses the 'rhs' ordering, unless it has none, in which case
666         # the current ordering is used.
667         self.order_by = rhs.order_by or self.order_by
668         self.extra_order_by = rhs.extra_order_by or self.extra_order_by
669 
670     def deferred_to_data(self, target, callback):
671         """
672         Convert the self.deferred_loading data structure to an alternate data
673         structure, describing the field that *will* be loaded. This is used to
674         compute the columns to select from the database and also by the
675         QuerySet class to work out which fields are being initialized on each
676         model. Models that have all their fields included aren't mentioned in
677         the result, only those that have field restrictions in place.
678 
679         The "target" parameter is the instance that is populated (in place).
680         The "callback" is a function that is called whenever a (model, field)
681         pair need to be added to "target". It accepts three parameters:
682         "target", and the model and list of fields being added for that model.
683         """
684         field_names, defer = self.deferred_loading
685         if not field_names:
686             return
687         orig_opts = self.get_meta()
688         seen = {}
689         must_include = {orig_opts.concrete_model: {orig_opts.pk}}
690         for field_name in field_names:
691             parts = field_name.split(LOOKUP_SEP)
692             cur_model = self.model._meta.concrete_model
693             opts = orig_opts
694             for name in parts[:-1]:
695                 old_model = cur_model
696                 if name in self._filtered_relations:
697                     name = self._filtered_relations[name].relation_name
698                 source = opts.get_field(name)
699                 if is_reverse_o2o(source):
700                     cur_model = source.related_model
701                 else:
702                     cur_model = source.remote_field.model
703                 opts = cur_model._meta
704                 # Even if we're "just passing through" this model, we must add
705                 # both the current model's pk and the related reference field
706                 # (if it's not a reverse relation) to the things we select.
707                 if not is_reverse_o2o(source):
708                     must_include[old_model].add(source)
709                 add_to_dict(must_include, cur_model, opts.pk)
710             field = opts.get_field(parts[-1])
711             is_reverse_object = field.auto_created and not field.concrete
712             model = field.related_model if is_reverse_object else field.model
713             model = model._meta.concrete_model
714             if model == opts.model:
715                 model = cur_model
716             if not is_reverse_o2o(field):
717                 add_to_dict(seen, model, field)
718 
719         if defer:
720             # We need to load all fields for each model, except those that
721             # appear in "seen" (for all models that appear in "seen"). The only
722             # slight complexity here is handling fields that exist on parent
723             # models.
724             workset = {}
725             for model, values in seen.items():
726                 for field in model._meta.local_fields:
727                     if field not in values:
728                         m = field.model._meta.concrete_model
729                         add_to_dict(workset, m, field)
730             for model, values in must_include.items():
731                 # If we haven't included a model in workset, we don't add the
732                 # corresponding must_include fields for that model, since an
733                 # empty set means "include all fields". That's why there's no
734                 # "else" branch here.
735                 if model in workset:
736                     workset[model].update(values)
737             for model, values in workset.items():
738                 callback(target, model, values)
739         else:
740             for model, values in must_include.items():
741                 if model in seen:
742                     seen[model].update(values)
743                 else:
744                     # As we've passed through this model, but not explicitly
745                     # included any fields, we have to make sure it's mentioned
746                     # so that only the "must include" fields are pulled in.
747                     seen[model] = values
748             # Now ensure that every model in the inheritance chain is mentioned
749             # in the parent list. Again, it must be mentioned to ensure that
750             # only "must include" fields are pulled in.
751             for model in orig_opts.get_parent_list():
752                 seen.setdefault(model, set())
753             for model, values in seen.items():
754                 callback(target, model, values)
755 
756     def table_alias(self, table_name, create=False, filtered_relation=None):
757         """
758         Return a table alias for the given table_name and whether this is a
759         new alias or not.
760 
761         If 'create' is true, a new alias is always created. Otherwise, the
762         most recently created alias for the table (if one exists) is reused.
763         """
764         alias_list = self.table_map.get(table_name)
765         if not create and alias_list:
766             alias = alias_list[0]
767             self.alias_refcount[alias] += 1
768             return alias, False
769 
770         # Create a new alias for this table.
771         if alias_list:
772             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
773             alias_list.append(alias)
774         else:
775             # The first occurrence of a table uses the table name directly.
776             alias = filtered_relation.alias if filtered_relation is not None else table_name
777             self.table_map[table_name] = [alias]
778         self.alias_refcount[alias] = 1
779         return alias, True
780 
781     def ref_alias(self, alias):
782         """Increases the reference count for this alias."""
783         self.alias_refcount[alias] += 1
784 
785     def unref_alias(self, alias, amount=1):
786         """Decreases the reference count for this alias."""
787         self.alias_refcount[alias] -= amount
788 
789     def promote_joins(self, aliases):
790         """
791         Promote recursively the join type of given aliases and its children to
792         an outer join. If 'unconditional' is False, only promote the join if
793         it is nullable or the parent join is an outer join.
794 
795         The children promotion is done to avoid join chains that contain a LOUTER
796         b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,
797         then we must also promote b->c automatically, or otherwise the promotion
798         of a->b doesn't actually change anything in the query results.
799         """
800         aliases = list(aliases)
801         while aliases:
802             alias = aliases.pop(0)
803             if self.alias_map[alias].join_type is None:
804                 # This is the base table (first FROM entry) - this table
805                 # isn't really joined at all in the query, so we should not
806                 # alter its join type.
807                 continue
808             # Only the first alias (skipped above) should have None join_type
809             assert self.alias_map[alias].join_type is not None
810             parent_alias = self.alias_map[alias].parent_alias
811             parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER
812             already_louter = self.alias_map[alias].join_type == LOUTER
813             if ((self.alias_map[alias].nullable or parent_louter) and
814                     not already_louter):
815                 self.alias_map[alias] = self.alias_map[alias].promote()
816                 # Join type of 'alias' changed, so re-examine all aliases that
817                 # refer to this one.
818                 aliases.extend(
819                     join for join in self.alias_map
820                     if self.alias_map[join].parent_alias == alias and join not in aliases
821                 )
822 
823     def demote_joins(self, aliases):
824         """
825         Change join type from LOUTER to INNER for all joins in aliases.
826 
827         Similarly to promote_joins(), this method must ensure no join chains
828         containing first an outer, then an inner join are generated. If we
829         are demoting b->c join in chain a LOUTER b LOUTER c then we must
830         demote a->b automatically, or otherwise the demotion of b->c doesn't
831         actually change anything in the query results. .
832         """
833         aliases = list(aliases)
834         while aliases:
835             alias = aliases.pop(0)
836             if self.alias_map[alias].join_type == LOUTER:
837                 self.alias_map[alias] = self.alias_map[alias].demote()
838                 parent_alias = self.alias_map[alias].parent_alias
839                 if self.alias_map[parent_alias].join_type == INNER:
840                     aliases.append(parent_alias)
841 
842     def reset_refcounts(self, to_counts):
843         """
844         Reset reference counts for aliases so that they match the value passed
845         in `to_counts`.
846         """
847         for alias, cur_refcount in self.alias_refcount.copy().items():
848             unref_amount = cur_refcount - to_counts.get(alias, 0)
849             self.unref_alias(alias, unref_amount)
850 
851     def change_aliases(self, change_map):
852         """
853         Change the aliases in change_map (which maps old-alias -> new-alias),
854         relabelling any references to them in select columns and the where
855         clause.
856         """
857         assert set(change_map).isdisjoint(change_map.values())
858 
859         # 1. Update references in "select" (normal columns plus aliases),
860         # "group by" and "where".
861         self.where.relabel_aliases(change_map)
862         if isinstance(self.group_by, tuple):
863             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])
864         self.select = tuple([col.relabeled_clone(change_map) for col in self.select])
865         self.annotations = self.annotations and {
866             key: col.relabeled_clone(change_map) for key, col in self.annotations.items()
867         }
868 
869         # 2. Rename the alias in the internal table/alias datastructures.
870         for old_alias, new_alias in change_map.items():
871             if old_alias not in self.alias_map:
872                 continue
873             alias_data = self.alias_map[old_alias].relabeled_clone(change_map)
874             self.alias_map[new_alias] = alias_data
875             self.alias_refcount[new_alias] = self.alias_refcount[old_alias]
876             del self.alias_refcount[old_alias]
877             del self.alias_map[old_alias]
878 
879             table_aliases = self.table_map[alias_data.table_name]
880             for pos, alias in enumerate(table_aliases):
881                 if alias == old_alias:
882                     table_aliases[pos] = new_alias
883                     break
884         self.external_aliases = {
885             # Table is aliased or it's being changed and thus is aliased.
886             change_map.get(alias, alias): (aliased or alias in change_map)
887             for alias, aliased in self.external_aliases.items()
888         }
889 
890     def bump_prefix(self, outer_query):
891         """
892         Change the alias prefix to the next letter in the alphabet in a way
893         that the outer query's aliases and this query's aliases will not
894         conflict. Even tables that previously had no alias will get an alias
895         after this call.
896         """
897         def prefix_gen():
898             """
899             Generate a sequence of characters in alphabetical order:
900                 -> 'A', 'B', 'C', ...
901 
902             When the alphabet is finished, the sequence will continue with the
903             Cartesian product:
904                 -> 'AA', 'AB', 'AC', ...
905             """
906             alphabet = ascii_uppercase
907             prefix = chr(ord(self.alias_prefix) + 1)
908             yield prefix
909             for n in count(1):
910                 seq = alphabet[alphabet.index(prefix):] if prefix else alphabet
911                 for s in product(seq, repeat=n):
912                     yield ''.join(s)
913                 prefix = None
914 
915         if self.alias_prefix != outer_query.alias_prefix:
916             # No clashes between self and outer query should be possible.
917             return
918 
919         # Explicitly avoid infinite loop. The constant divider is based on how
920         # much depth recursive subquery references add to the stack. This value
921         # might need to be adjusted when adding or removing function calls from
922         # the code path in charge of performing these operations.
923         local_recursion_limit = sys.getrecursionlimit() // 16
924         for pos, prefix in enumerate(prefix_gen()):
925             if prefix not in self.subq_aliases:
926                 self.alias_prefix = prefix
927                 break
928             if pos > local_recursion_limit:
929                 raise RecursionError(
930                     'Maximum recursion depth exceeded: too many subqueries.'
931                 )
932         self.subq_aliases = self.subq_aliases.union([self.alias_prefix])
933         outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)
934         self.change_aliases({
935             alias: '%s%d' % (self.alias_prefix, pos)
936             for pos, alias in enumerate(self.alias_map)
937         })
938 
939     def get_initial_alias(self):
940         """
941         Return the first alias for this query, after increasing its reference
942         count.
943         """
944         if self.alias_map:
945             alias = self.base_table
946             self.ref_alias(alias)
947         else:
948             alias = self.join(BaseTable(self.get_meta().db_table, None))
949         return alias
950 
951     def count_active_tables(self):
952         """
953         Return the number of tables in this query with a non-zero reference
954         count. After execution, the reference counts are zeroed, so tables
955         added in compiler will not be seen by this method.
956         """
957         return len([1 for count in self.alias_refcount.values() if count])
958 
959     def join(self, join, reuse=None, reuse_with_filtered_relation=False):
960         """
961         Return an alias for the 'join', either reusing an existing alias for
962         that join or creating a new one. 'join' is either a
963         sql.datastructures.BaseTable or Join.
964 
965         The 'reuse' parameter can be either None which means all joins are
966         reusable, or it can be a set containing the aliases that can be reused.
967 
968         The 'reuse_with_filtered_relation' parameter is used when computing
969         FilteredRelation instances.
970 
971         A join is always created as LOUTER if the lhs alias is LOUTER to make
972         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new
973         joins are created as LOUTER if the join is nullable.
974         """
975         if reuse_with_filtered_relation and reuse:
976             reuse_aliases = [
977                 a for a, j in self.alias_map.items()
978                 if a in reuse and j.equals(join, with_filtered_relation=False)
979             ]
980         else:
981             reuse_aliases = [
982                 a for a, j in self.alias_map.items()
983                 if (reuse is None or a in reuse) and j == join
984             ]
985         if reuse_aliases:
986             if join.table_alias in reuse_aliases:
987                 reuse_alias = join.table_alias
988             else:
989                 # Reuse the most recent alias of the joined table
990                 # (a many-to-many relation may be joined multiple times).
991                 reuse_alias = reuse_aliases[-1]
992             self.ref_alias(reuse_alias)
993             return reuse_alias
994 
995         # No reuse is possible, so we need a new alias.
996         alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)
997         if join.join_type:
998             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:
999                 join_type = LOUTER
1000             else:
1001                 join_type = INNER
1002             join.join_type = join_type
1003         join.table_alias = alias
1004         self.alias_map[alias] = join
1005         return alias
1006 
1007     def join_parent_model(self, opts, model, alias, seen):
1008         """
1009         Make sure the given 'model' is joined in the query. If 'model' isn't
1010         a parent of 'opts' or if it is None this method is a no-op.
1011 
1012         The 'alias' is the root alias for starting the join, 'seen' is a dict
1013         of model -> alias of existing joins. It must also contain a mapping
1014         of None -> some alias. This will be returned in the no-op case.
1015         """
1016         if model in seen:
1017             return seen[model]
1018         chain = opts.get_base_chain(model)
1019         if not chain:
1020             return alias
1021         curr_opts = opts
1022         for int_model in chain:
1023             if int_model in seen:
1024                 curr_opts = int_model._meta
1025                 alias = seen[int_model]
1026                 continue
1027             # Proxy model have elements in base chain
1028             # with no parents, assign the new options
1029             # object and skip to the next base in that
1030             # case
1031             if not curr_opts.parents[int_model]:
1032                 curr_opts = int_model._meta
1033                 continue
1034             link_field = curr_opts.get_ancestor_link(int_model)
1035             join_info = self.setup_joins([link_field.name], curr_opts, alias)
1036             curr_opts = int_model._meta
1037             alias = seen[int_model] = join_info.joins[-1]
1038         return alias or seen[None]
1039 
1040     def add_annotation(self, annotation, alias, is_summary=False, select=True):
1041         """Add a single annotation expression to the Query."""
1042         annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
1043                                                    summarize=is_summary)
1044         if select:
1045             self.append_annotation_mask([alias])
1046         else:
1047             self.set_annotation_mask(set(self.annotation_select).difference({alias}))
1048         self.annotations[alias] = annotation
1049 
1050     def resolve_expression(self, query, *args, **kwargs):
1051         clone = self.clone()
1052         # Subqueries need to use a different set of aliases than the outer query.
1053         clone.bump_prefix(query)
1054         clone.subquery = True
1055         # It's safe to drop ordering if the queryset isn't using slicing,
1056         # distinct(*fields) or select_for_update().
1057         if (self.low_mark == 0 and self.high_mark is None and
1058                 not self.distinct_fields and
1059                 not self.select_for_update):
1060             clone.clear_ordering(True)
1061         clone.where.resolve_expression(query, *args, **kwargs)
1062         for key, value in clone.annotations.items():
1063             resolved = value.resolve_expression(query, *args, **kwargs)
1064             if hasattr(resolved, 'external_aliases'):
1065                 resolved.external_aliases.update(clone.external_aliases)
1066             clone.annotations[key] = resolved
1067         # Outer query's aliases are considered external.
1068         for alias, table in query.alias_map.items():
1069             clone.external_aliases[alias] = (
1070                 (isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias) or
1071                 (isinstance(table, BaseTable) and table.table_name != table.table_alias)
1072             )
1073         return clone
1074 
1075     def get_external_cols(self):
1076         exprs = chain(self.annotations.values(), self.where.children)
1077         return [
1078             col for col in self._gen_cols(exprs)
1079             if col.alias in self.external_aliases
1080         ]
1081 
1082     def as_sql(self, compiler, connection):
1083         sql, params = self.get_compiler(connection=connection).as_sql()
1084         if self.subquery:
1085             sql = '(%s)' % sql
1086         return sql, params
1087 
1088     def resolve_lookup_value(self, value, can_reuse, allow_joins):
1089         if hasattr(value, 'resolve_expression'):
1090             value = value.resolve_expression(
1091                 self, reuse=can_reuse, allow_joins=allow_joins,
1092             )
1093         elif isinstance(value, (list, tuple)):
1094             # The items of the iterable may be expressions and therefore need
1095             # to be resolved independently.
1096             values = (
1097                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
1098                 for sub_value in value
1099             )
1100             type_ = type(value)
1101             if hasattr(type_, '_make'):  # namedtuple
1102                 return type_(*values)
1103             return type_(values)
1104         return value
1105 
1106     def solve_lookup_type(self, lookup):
1107         """
1108         Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').
1109         """
1110         lookup_splitted = lookup.split(LOOKUP_SEP)
1111         if self.annotations:
1112             expression, expression_lookups = refs_expression(lookup_splitted, self.annotations)
1113             if expression:
1114                 return expression_lookups, (), expression
1115         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
1116         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
1117         if len(lookup_parts) > 1 and not field_parts:
1118             raise FieldError(
1119                 'Invalid lookup "%s" for model %s".' %
1120                 (lookup, self.get_meta().model.__name__)
1121             )
1122         return lookup_parts, field_parts, False
1123 
1124     def check_query_object_type(self, value, opts, field):
1125         """
1126         Check whether the object passed while querying is of the correct type.
1127         If not, raise a ValueError specifying the wrong object.
1128         """
1129         if hasattr(value, '_meta'):
1130             if not check_rel_lookup_compatibility(value._meta.model, opts, field):
1131                 raise ValueError(
1132                     'Cannot query "%s": Must be "%s" instance.' %
1133                     (value, opts.object_name))
1134 
1135     def check_related_objects(self, field, value, opts):
1136         """Check the type of object passed to query relations."""
1137         if field.is_relation:
1138             # Check that the field and the queryset use the same model in a
1139             # query like .filter(author=Author.objects.all()). For example, the
1140             # opts would be Author's (from the author field) and value.model
1141             # would be Author.objects.all() queryset's .model (Author also).
1142             # The field is the related field on the lhs side.
1143             if (isinstance(value, Query) and not value.has_select_fields and
1144                     not check_rel_lookup_compatibility(value.model, opts, field)):
1145                 raise ValueError(
1146                     'Cannot use QuerySet for "%s": Use a QuerySet for "%s".' %
1147                     (value.model._meta.object_name, opts.object_name)
1148                 )
1149             elif hasattr(value, '_meta'):
1150                 self.check_query_object_type(value, opts, field)
1151             elif hasattr(value, '__iter__'):
1152                 for v in value:
1153                     self.check_query_object_type(v, opts, field)
1154 
1155     def check_filterable(self, expression):
1156         """Raise an error if expression cannot be used in a WHERE clause."""
1157         if (
1158             hasattr(expression, 'resolve_expression') and
1159             not getattr(expression, 'filterable', True)
1160         ):
1161             raise NotSupportedError(
1162                 expression.__class__.__name__ + ' is disallowed in the filter '
1163                 'clause.'
1164             )
1165         if hasattr(expression, 'get_source_expressions'):
1166             for expr in expression.get_source_expressions():
1167                 self.check_filterable(expr)
1168 
1169     def build_lookup(self, lookups, lhs, rhs):
1170         """
1171         Try to extract transforms and lookup from given lhs.
1172 
1173         The lhs value is something that works like SQLExpression.
1174         The rhs value is what the lookup is going to compare against.
1175         The lookups is a list of names to extract using get_lookup()
1176         and get_transform().
1177         """
1178         # __exact is the default lookup if one isn't given.
1179         *transforms, lookup_name = lookups or ['exact']
1180         for name in transforms:
1181             lhs = self.try_transform(lhs, name)
1182         # First try get_lookup() so that the lookup takes precedence if the lhs
1183         # supports both transform and lookup for the name.
1184         lookup_class = lhs.get_lookup(lookup_name)
1185         if not lookup_class:
1186             if lhs.field.is_relation:
1187                 raise FieldError('Related Field got invalid lookup: {}'.format(lookup_name))
1188             # A lookup wasn't found. Try to interpret the name as a transform
1189             # and do an Exact lookup against it.
1190             lhs = self.try_transform(lhs, lookup_name)
1191             lookup_name = 'exact'
1192             lookup_class = lhs.get_lookup(lookup_name)
1193             if not lookup_class:
1194                 return
1195 
1196         lookup = lookup_class(lhs, rhs)
1197         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all
1198         # uses of None as a query value unless the lookup supports it.
1199         if lookup.rhs is None and not lookup.can_use_none_as_rhs:
1200             if lookup_name not in ('exact', 'iexact'):
1201                 raise ValueError("Cannot use None as a query value")
1202             return lhs.get_lookup('isnull')(lhs, True)
1203 
1204         # For Oracle '' is equivalent to null. The check must be done at this
1205         # stage because join promotion can't be done in the compiler. Using
1206         # DEFAULT_DB_ALIAS isn't nice but it's the best that can be done here.
1207         # A similar thing is done in is_nullable(), too.
1208         if (connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
1209                 lookup_name == 'exact' and lookup.rhs == ''):
1210             return lhs.get_lookup('isnull')(lhs, True)
1211 
1212         return lookup
1213 
1214     def try_transform(self, lhs, name):
1215         """
1216         Helper method for build_lookup(). Try to fetch and initialize
1217         a transform for name parameter from lhs.
1218         """
1219         transform_class = lhs.get_transform(name)
1220         if transform_class:
1221             return transform_class(lhs)
1222         else:
1223             output_field = lhs.output_field.__class__
1224             suggested_lookups = difflib.get_close_matches(name, output_field.get_lookups())
1225             if suggested_lookups:
1226                 suggestion = ', perhaps you meant %s?' % ' or '.join(suggested_lookups)
1227             else:
1228                 suggestion = '.'
1229             raise FieldError(
1230                 "Unsupported lookup '%s' for %s or join on the field not "
1231                 "permitted%s" % (name, output_field.__name__, suggestion)
1232             )
1233 
1234     def build_filter(self, filter_expr, branch_negated=False, current_negated=False,
1235                      can_reuse=None, allow_joins=True, split_subq=True,
1236                      reuse_with_filtered_relation=False, check_filterable=True):
1237         """
1238         Build a WhereNode for a single filter clause but don't add it
1239         to this Query. Query.add_q() will then add this filter to the where
1240         Node.
1241 
1242         The 'branch_negated' tells us if the current branch contains any
1243         negations. This will be used to determine if subqueries are needed.
1244 
1245         The 'current_negated' is used to determine if the current filter is
1246         negated or not and this will be used to determine if IS NULL filtering
1247         is needed.
1248 
1249         The difference between current_negated and branch_negated is that
1250         branch_negated is set on first negation, but current_negated is
1251         flipped for each negation.
1252 
1253         Note that add_filter will not do any negating itself, that is done
1254         upper in the code by add_q().
1255 
1256         The 'can_reuse' is a set of reusable joins for multijoins.
1257 
1258         If 'reuse_with_filtered_relation' is True, then only joins in can_reuse
1259         will be reused.
1260 
1261         The method will create a filter clause that can be added to the current
1262         query. However, if the filter isn't added to the query then the caller
1263         is responsible for unreffing the joins used.
1264         """
1265         if isinstance(filter_expr, dict):
1266             raise FieldError("Cannot parse keyword query as dict")
1267         if isinstance(filter_expr, Q):
1268             return self._add_q(
1269                 filter_expr,
1270                 branch_negated=branch_negated,
1271                 current_negated=current_negated,
1272                 used_aliases=can_reuse,
1273                 allow_joins=allow_joins,
1274                 split_subq=split_subq,
1275                 check_filterable=check_filterable,
1276             )
1277         if hasattr(filter_expr, 'resolve_expression'):
1278             if not getattr(filter_expr, 'conditional', False):
1279                 raise TypeError('Cannot filter against a non-conditional expression.')
1280             condition = self.build_lookup(
1281                 ['exact'], filter_expr.resolve_expression(self, allow_joins=allow_joins), True
1282             )
1283             clause = self.where_class()
1284             clause.add(condition, AND)
1285             return clause, []
1286         arg, value = filter_expr
1287         if not arg:
1288             raise FieldError("Cannot parse keyword query %r" % arg)
1289         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
1290 
1291         if check_filterable:
1292             self.check_filterable(reffed_expression)
1293 
1294         if not allow_joins and len(parts) > 1:
1295             raise FieldError("Joined field references are not permitted in this query")
1296 
1297         pre_joins = self.alias_refcount.copy()
1298         value = self.resolve_lookup_value(value, can_reuse, allow_joins)
1299         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}
1300 
1301         if check_filterable:
1302             self.check_filterable(value)
1303 
1304         clause = self.where_class()
1305         if reffed_expression:
1306             condition = self.build_lookup(lookups, reffed_expression, value)
1307             clause.add(condition, AND)
1308             return clause, []
1309 
1310         opts = self.get_meta()
1311         alias = self.get_initial_alias()
1312         allow_many = not branch_negated or not split_subq
1313 
1314         try:
1315             join_info = self.setup_joins(
1316                 parts, opts, alias, can_reuse=can_reuse, allow_many=allow_many,
1317                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1318             )
1319 
1320             # Prevent iterator from being consumed by check_related_objects()
1321             if isinstance(value, Iterator):
1322                 value = list(value)
1323             self.check_related_objects(join_info.final_field, value, join_info.opts)
1324 
1325             # split_exclude() needs to know which joins were generated for the
1326             # lookup parts
1327             self._lookup_joins = join_info.joins
1328         except MultiJoin as e:
1329             return self.split_exclude(filter_expr, can_reuse, e.names_with_path)
1330 
1331         # Update used_joins before trimming since they are reused to determine
1332         # which joins could be later promoted to INNER.
1333         used_joins.update(join_info.joins)
1334         targets, alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1335         if can_reuse is not None:
1336             can_reuse.update(join_list)
1337 
1338         if join_info.final_field.is_relation:
1339             # No support for transforms for relational fields
1340             num_lookups = len(lookups)
1341             if num_lookups > 1:
1342                 raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))
1343             if len(targets) == 1:
1344                 col = self._get_col(targets[0], join_info.final_field, alias)
1345             else:
1346                 col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)
1347         else:
1348             col = self._get_col(targets[0], join_info.final_field, alias)
1349 
1350         condition = self.build_lookup(lookups, col, value)
1351         lookup_type = condition.lookup_name
1352         clause.add(condition, AND)
1353 
1354         require_outer = lookup_type == 'isnull' and condition.rhs is True and not current_negated
1355         if current_negated and (lookup_type != 'isnull' or condition.rhs is False) and condition.rhs is not None:
1356             require_outer = True
1357             if lookup_type != 'isnull':
1358                 # The condition added here will be SQL like this:
1359                 # NOT (col IS NOT NULL), where the first NOT is added in
1360                 # upper layers of code. The reason for addition is that if col
1361                 # is null, then col != someval will result in SQL "unknown"
1362                 # which isn't the same as in Python. The Python None handling
1363                 # is wanted, and it can be gotten by
1364                 # (col IS NULL OR col != someval)
1365                 #   <=>
1366                 # NOT (col IS NOT NULL AND col = someval).
1367                 if (
1368                     self.is_nullable(targets[0]) or
1369                     self.alias_map[join_list[-1]].join_type == LOUTER
1370                 ):
1371                     lookup_class = targets[0].get_lookup('isnull')
1372                     col = self._get_col(targets[0], join_info.targets[0], alias)
1373                     clause.add(lookup_class(col, False), AND)
1374                 # If someval is a nullable column, someval IS NOT NULL is
1375                 # added.
1376                 if isinstance(value, Col) and self.is_nullable(value.target):
1377                     lookup_class = value.target.get_lookup('isnull')
1378                     clause.add(lookup_class(value, False), AND)
1379         return clause, used_joins if not require_outer else ()
1380 
1381     def add_filter(self, filter_clause):
1382         self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))
1383 
1384     def add_q(self, q_object):
1385         """
1386         A preprocessor for the internal _add_q(). Responsible for doing final
1387         join promotion.
1388         """
1389         # For join promotion this case is doing an AND for the added q_object
1390         # and existing conditions. So, any existing inner join forces the join
1391         # type to remain inner. Existing outer joins can however be demoted.
1392         # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if
1393         # rel_a doesn't produce any rows, then the whole condition must fail.
1394         # So, demotion is OK.
1395         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}
1396         clause, _ = self._add_q(q_object, self.used_aliases)
1397         if clause:
1398             self.where.add(clause, AND)
1399         self.demote_joins(existing_inner)
1400 
1401     def build_where(self, filter_expr):
1402         return self.build_filter(filter_expr, allow_joins=False)[0]
1403 
1404     def _add_q(self, q_object, used_aliases, branch_negated=False,
1405                current_negated=False, allow_joins=True, split_subq=True,
1406                check_filterable=True):
1407         """Add a Q-object to the current filter."""
1408         connector = q_object.connector
1409         current_negated = current_negated ^ q_object.negated
1410         branch_negated = branch_negated or q_object.negated
1411         target_clause = self.where_class(connector=connector,
1412                                          negated=q_object.negated)
1413         joinpromoter = JoinPromoter(q_object.connector, len(q_object.children), current_negated)
1414         for child in q_object.children:
1415             child_clause, needed_inner = self.build_filter(
1416                 child, can_reuse=used_aliases, branch_negated=branch_negated,
1417                 current_negated=current_negated, allow_joins=allow_joins,
1418                 split_subq=split_subq, check_filterable=check_filterable,
1419             )
1420             joinpromoter.add_votes(needed_inner)
1421             if child_clause:
1422                 target_clause.add(child_clause, connector)
1423         needed_inner = joinpromoter.update_join_types(self)
1424         return target_clause, needed_inner
1425 
1426     def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
1427         """Add a FilteredRelation object to the current filter."""
1428         connector = q_object.connector
1429         current_negated ^= q_object.negated
1430         branch_negated = branch_negated or q_object.negated
1431         target_clause = self.where_class(connector=connector, negated=q_object.negated)
1432         for child in q_object.children:
1433             if isinstance(child, Node):
1434                 child_clause = self.build_filtered_relation_q(
1435                     child, reuse=reuse, branch_negated=branch_negated,
1436                     current_negated=current_negated,
1437                 )
1438             else:
1439                 child_clause, _ = self.build_filter(
1440                     child, can_reuse=reuse, branch_negated=branch_negated,
1441                     current_negated=current_negated,
1442                     allow_joins=True, split_subq=False,
1443                     reuse_with_filtered_relation=True,
1444                 )
1445             target_clause.add(child_clause, connector)
1446         return target_clause
1447 
1448     def add_filtered_relation(self, filtered_relation, alias):
1449         filtered_relation.alias = alias
1450         lookups = dict(get_children_from_q(filtered_relation.condition))
1451         relation_lookup_parts, relation_field_parts, _ = self.solve_lookup_type(filtered_relation.relation_name)
1452         if relation_lookup_parts:
1453             raise ValueError(
1454                 "FilteredRelation's relation_name cannot contain lookups "
1455                 "(got %r)." % filtered_relation.relation_name
1456             )
1457         for lookup in chain(lookups):
1458             lookup_parts, lookup_field_parts, _ = self.solve_lookup_type(lookup)
1459             shift = 2 if not lookup_parts else 1
1460             lookup_field_path = lookup_field_parts[:-shift]
1461             for idx, lookup_field_part in enumerate(lookup_field_path):
1462                 if len(relation_field_parts) > idx:
1463                     if relation_field_parts[idx] != lookup_field_part:
1464                         raise ValueError(
1465                             "FilteredRelation's condition doesn't support "
1466                             "relations outside the %r (got %r)."
1467                             % (filtered_relation.relation_name, lookup)
1468                         )
1469                 else:
1470                     raise ValueError(
1471                         "FilteredRelation's condition doesn't support nested "
1472                         "relations deeper than the relation_name (got %r for "
1473                         "%r)." % (lookup, filtered_relation.relation_name)
1474                     )
1475         self._filtered_relations[filtered_relation.alias] = filtered_relation
1476 
1477     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
1478         """
1479         Walk the list of names and turns them into PathInfo tuples. A single
1480         name in 'names' can generate multiple PathInfos (m2m, for example).
1481 
1482         'names' is the path of names to travel, 'opts' is the model Options we
1483         start the name resolving from, 'allow_many' is as for setup_joins().
1484         If fail_on_missing is set to True, then a name that can't be resolved
1485         will generate a FieldError.
1486 
1487         Return a list of PathInfo tuples. In addition return the final field
1488         (the last used join field) and target (which is a field guaranteed to
1489         contain the same value as the final field). Finally, return those names
1490         that weren't found (which are likely transforms and the final lookup).
1491         """
1492         path, names_with_path = [], []
1493         for pos, name in enumerate(names):
1494             cur_names_with_path = (name, [])
1495             if name == 'pk':
1496                 name = opts.pk.name
1497 
1498             field = None
1499             filtered_relation = None
1500             try:
1501                 field = opts.get_field(name)
1502             except FieldDoesNotExist:
1503                 if name in self.annotation_select:
1504                     field = self.annotation_select[name].output_field
1505                 elif name in self._filtered_relations and pos == 0:
1506                     filtered_relation = self._filtered_relations[name]
1507                     if LOOKUP_SEP in filtered_relation.relation_name:
1508                         parts = filtered_relation.relation_name.split(LOOKUP_SEP)
1509                         filtered_relation_path, field, _, _ = self.names_to_path(
1510                             parts, opts, allow_many, fail_on_missing,
1511                         )
1512                         path.extend(filtered_relation_path[:-1])
1513                     else:
1514                         field = opts.get_field(filtered_relation.relation_name)
1515             if field is not None:
1516                 # Fields that contain one-to-many relations with a generic
1517                 # model (like a GenericForeignKey) cannot generate reverse
1518                 # relations and therefore cannot be used for reverse querying.
1519                 if field.is_relation and not field.related_model:
1520                     raise FieldError(
1521                         "Field %r does not generate an automatic reverse "
1522                         "relation and therefore cannot be used for reverse "
1523                         "querying. If it is a GenericForeignKey, consider "
1524                         "adding a GenericRelation." % name
1525                     )
1526                 try:
1527                     model = field.model._meta.concrete_model
1528                 except AttributeError:
1529                     # QuerySet.annotate() may introduce fields that aren't
1530                     # attached to a model.
1531                     model = None
1532             else:
1533                 # We didn't find the current field, so move position back
1534                 # one step.
1535                 pos -= 1
1536                 if pos == -1 or fail_on_missing:
1537                     available = sorted([
1538                         *get_field_names_from_opts(opts),
1539                         *self.annotation_select,
1540                         *self._filtered_relations,
1541                     ])
1542                     raise FieldError("Cannot resolve keyword '%s' into field. "
1543                                      "Choices are: %s" % (name, ", ".join(available)))
1544                 break
1545             # Check if we need any joins for concrete inheritance cases (the
1546             # field lives in parent, but we are currently in one of its
1547             # children)
1548             if model is not opts.model:
1549                 path_to_parent = opts.get_path_to_parent(model)
1550                 if path_to_parent:
1551                     path.extend(path_to_parent)
1552                     cur_names_with_path[1].extend(path_to_parent)
1553                     opts = path_to_parent[-1].to_opts
1554             if hasattr(field, 'get_path_info'):
1555                 pathinfos = field.get_path_info(filtered_relation)
1556                 if not allow_many:
1557                     for inner_pos, p in enumerate(pathinfos):
1558                         if p.m2m:
1559                             cur_names_with_path[1].extend(pathinfos[0:inner_pos + 1])
1560                             names_with_path.append(cur_names_with_path)
1561                             raise MultiJoin(pos + 1, names_with_path)
1562                 last = pathinfos[-1]
1563                 path.extend(pathinfos)
1564                 final_field = last.join_field
1565                 opts = last.to_opts
1566                 targets = last.target_fields
1567                 cur_names_with_path[1].extend(pathinfos)
1568                 names_with_path.append(cur_names_with_path)
1569             else:
1570                 # Local non-relational field.
1571                 final_field = field
1572                 targets = (field,)
1573                 if fail_on_missing and pos + 1 != len(names):
1574                     raise FieldError(
1575                         "Cannot resolve keyword %r into field. Join on '%s'"
1576                         " not permitted." % (names[pos + 1], name))
1577                 break
1578         return path, final_field, targets, names[pos + 1:]
1579 
1580     def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True,
1581                     reuse_with_filtered_relation=False):
1582         """
1583         Compute the necessary table joins for the passage through the fields
1584         given in 'names'. 'opts' is the Options class for the current model
1585         (which gives the table we are starting from), 'alias' is the alias for
1586         the table to start the joining from.
1587 
1588         The 'can_reuse' defines the reverse foreign key joins we can reuse. It
1589         can be None in which case all joins are reusable or a set of aliases
1590         that can be reused. Note that non-reverse foreign keys are always
1591         reusable when using setup_joins().
1592 
1593         The 'reuse_with_filtered_relation' can be used to force 'can_reuse'
1594         parameter and force the relation on the given connections.
1595 
1596         If 'allow_many' is False, then any reverse foreign key seen will
1597         generate a MultiJoin exception.
1598 
1599         Return the final field involved in the joins, the target field (used
1600         for any 'where' constraint), the final 'opts' value, the joins, the
1601         field path traveled to generate the joins, and a transform function
1602         that takes a field and alias and is equivalent to `field.get_col(alias)`
1603         in the simple case but wraps field transforms if they were included in
1604         names.
1605 
1606         The target field is the field containing the concrete value. Final
1607         field can be something different, for example foreign key pointing to
1608         that value. Final field is needed for example in some value
1609         conversions (convert 'obj' in fk__id=obj to pk val using the foreign
1610         key field for example).
1611         """
1612         joins = [alias]
1613         # The transform can't be applied yet, as joins must be trimmed later.
1614         # To avoid making every caller of this method look up transforms
1615         # directly, compute transforms here and create a partial that converts
1616         # fields to the appropriate wrapped version.
1617 
1618         def final_transformer(field, alias):
1619             if not self.alias_cols:
1620                 alias = None
1621             return field.get_col(alias)
1622 
1623         # Try resolving all the names as fields first. If there's an error,
1624         # treat trailing names as lookups until a field can be resolved.
1625         last_field_exception = None
1626         for pivot in range(len(names), 0, -1):
1627             try:
1628                 path, final_field, targets, rest = self.names_to_path(
1629                     names[:pivot], opts, allow_many, fail_on_missing=True,
1630                 )
1631             except FieldError as exc:
1632                 if pivot == 1:
1633                     # The first item cannot be a lookup, so it's safe
1634                     # to raise the field error here.
1635                     raise
1636                 else:
1637                     last_field_exception = exc
1638             else:
1639                 # The transforms are the remaining items that couldn't be
1640                 # resolved into fields.
1641                 transforms = names[pivot:]
1642                 break
1643         for name in transforms:
1644             def transform(field, alias, *, name, previous):
1645                 try:
1646                     wrapped = previous(field, alias)
1647                     return self.try_transform(wrapped, name)
1648                 except FieldError:
1649                     # FieldError is raised if the transform doesn't exist.
1650                     if isinstance(final_field, Field) and last_field_exception:
1651                         raise last_field_exception
1652                     else:
1653                         raise
1654             final_transformer = functools.partial(transform, name=name, previous=final_transformer)
1655         # Then, add the path to the query's joins. Note that we can't trim
1656         # joins at this stage - we will need the information about join type
1657         # of the trimmed joins.
1658         for join in path:
1659             if join.filtered_relation:
1660                 filtered_relation = join.filtered_relation.clone()
1661                 table_alias = filtered_relation.alias
1662             else:
1663                 filtered_relation = None
1664                 table_alias = None
1665             opts = join.to_opts
1666             if join.direct:
1667                 nullable = self.is_nullable(join.join_field)
1668             else:
1669                 nullable = True
1670             connection = Join(
1671                 opts.db_table, alias, table_alias, INNER, join.join_field,
1672                 nullable, filtered_relation=filtered_relation,
1673             )
1674             reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None
1675             alias = self.join(
1676                 connection, reuse=reuse,
1677                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1678             )
1679             joins.append(alias)
1680             if filtered_relation:
1681                 filtered_relation.path = joins[:]
1682         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)
1683 
1684     def trim_joins(self, targets, joins, path):
1685         """
1686         The 'target' parameter is the final field being joined to, 'joins'
1687         is the full list of join aliases. The 'path' contain the PathInfos
1688         used to create the joins.
1689 
1690         Return the final target field and table alias and the new active
1691         joins.
1692 
1693         Always trim any direct join if the target column is already in the
1694         previous table. Can't trim reverse joins as it's unknown if there's
1695         anything on the other side of the join.
1696         """
1697         joins = joins[:]
1698         for pos, info in enumerate(reversed(path)):
1699             if len(joins) == 1 or not info.direct:
1700                 break
1701             if info.filtered_relation:
1702                 break
1703             join_targets = {t.column for t in info.join_field.foreign_related_fields}
1704             cur_targets = {t.column for t in targets}
1705             if not cur_targets.issubset(join_targets):
1706                 break
1707             targets_dict = {r[1].column: r[0] for r in info.join_field.related_fields if r[1].column in cur_targets}
1708             targets = tuple(targets_dict[t.column] for t in targets)
1709             self.unref_alias(joins.pop())
1710         return targets, joins[-1], joins
1711 
1712     @classmethod
1713     def _gen_cols(cls, exprs):
1714         for expr in exprs:
1715             if isinstance(expr, Col):
1716                 yield expr
1717             else:
1718                 yield from cls._gen_cols(expr.get_source_expressions())
1719 
1720     @classmethod
1721     def _gen_col_aliases(cls, exprs):
1722         yield from (expr.alias for expr in cls._gen_cols(exprs))
1723 
1724     def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False):
1725         annotation = self.annotations.get(name)
1726         if annotation is not None:
1727             if not allow_joins:
1728                 for alias in self._gen_col_aliases([annotation]):
1729                     if isinstance(self.alias_map[alias], Join):
1730                         raise FieldError(
1731                             'Joined field references are not permitted in '
1732                             'this query'
1733                         )
1734             if summarize:
1735                 # Summarize currently means we are doing an aggregate() query
1736                 # which is executed as a wrapped subquery if any of the
1737                 # aggregate() elements reference an existing annotation. In
1738                 # that case we need to return a Ref to the subquery's annotation.
1739                 if name not in self.annotation_select:
1740                     raise FieldError(
1741                         "Cannot aggregate over the '%s' alias. Use annotate() "
1742                         "to promote it." % name
1743                     )
1744                 return Ref(name, self.annotation_select[name])
1745             else:
1746                 return annotation
1747         else:
1748             field_list = name.split(LOOKUP_SEP)
1749             annotation = self.annotations.get(field_list[0])
1750             if annotation is not None:
1751                 for transform in field_list[1:]:
1752                     annotation = self.try_transform(annotation, transform)
1753                 return annotation
1754             join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)
1755             targets, final_alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1756             if not allow_joins and len(join_list) > 1:
1757                 raise FieldError('Joined field references are not permitted in this query')
1758             if len(targets) > 1:
1759                 raise FieldError("Referencing multicolumn fields with F() objects "
1760                                  "isn't supported")
1761             # Verify that the last lookup in name is a field or a transform:
1762             # transform_function() raises FieldError if not.
1763             transform = join_info.transform_function(targets[0], final_alias)
1764             if reuse is not None:
1765                 reuse.update(join_list)
1766             return transform
1767 
1768     def split_exclude(self, filter_expr, can_reuse, names_with_path):
1769         """
1770         When doing an exclude against any kind of N-to-many relation, we need
1771         to use a subquery. This method constructs the nested query, given the
1772         original exclude filter (filter_expr) and the portion up to the first
1773         N-to-many relation field.
1774 
1775         For example, if the origin filter is ~Q(child__name='foo'), filter_expr
1776         is ('child__name', 'foo') and can_reuse is a set of joins usable for
1777         filters in the original query.
1778 
1779         We will turn this into equivalent of:
1780             WHERE NOT EXISTS(
1781                 SELECT 1
1782                 FROM child
1783                 WHERE name = 'foo' AND child.parent_id = parent.id
1784                 LIMIT 1
1785             )
1786         """
1787         filter_lhs, filter_rhs = filter_expr
1788         if isinstance(filter_rhs, OuterRef):
1789             filter_expr = (filter_lhs, OuterRef(filter_rhs))
1790         elif isinstance(filter_rhs, F):
1791             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
1792         # Generate the inner query.
1793         query = Query(self.model)
1794         query._filtered_relations = self._filtered_relations
1795         query.add_filter(filter_expr)
1796         query.clear_ordering(True)
1797         # Try to have as simple as possible subquery -> trim leading joins from
1798         # the subquery.
1799         trimmed_prefix, contains_louter = query.trim_start(names_with_path)
1800 
1801         col = query.select[0]
1802         select_field = col.target
1803         alias = col.alias
1804         if alias in can_reuse:
1805             pk = select_field.model._meta.pk
1806             # Need to add a restriction so that outer query's filters are in effect for
1807             # the subquery, too.
1808             query.bump_prefix(self)
1809             lookup_class = select_field.get_lookup('exact')
1810             # Note that the query.select[0].alias is different from alias
1811             # due to bump_prefix above.
1812             lookup = lookup_class(pk.get_col(query.select[0].alias),
1813                                   pk.get_col(alias))
1814             query.where.add(lookup, AND)
1815             query.external_aliases[alias] = True
1816 
1817         lookup_class = select_field.get_lookup('exact')
1818         lookup = lookup_class(col, ResolvedOuterRef(trimmed_prefix))
1819         query.where.add(lookup, AND)
1820         condition, needed_inner = self.build_filter(Exists(query))
1821 
1822         if contains_louter:
1823             or_null_condition, _ = self.build_filter(
1824                 ('%s__isnull' % trimmed_prefix, True),
1825                 current_negated=True, branch_negated=True, can_reuse=can_reuse)
1826             condition.add(or_null_condition, OR)
1827             # Note that the end result will be:
1828             # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.
1829             # This might look crazy but due to how IN works, this seems to be
1830             # correct. If the IS NOT NULL check is removed then outercol NOT
1831             # IN will return UNKNOWN. If the IS NULL check is removed, then if
1832             # outercol IS NULL we will not match the row.
1833         return condition, needed_inner
1834 
1835     def set_empty(self):
1836         self.where.add(NothingNode(), AND)
1837         for query in self.combined_queries:
1838             query.set_empty()
1839 
1840     def is_empty(self):
1841         return any(isinstance(c, NothingNode) for c in self.where.children)
1842 
1843     def set_limits(self, low=None, high=None):
1844         """
1845         Adjust the limits on the rows retrieved. Use low/high to set these,
1846         as it makes it more Pythonic to read and write. When the SQL query is
1847         created, convert them to the appropriate offset and limit values.
1848 
1849         Apply any limits passed in here to the existing constraints. Add low
1850         to the current low value and clamp both to any existing high value.
1851         """
1852         if high is not None:
1853             if self.high_mark is not None:
1854                 self.high_mark = min(self.high_mark, self.low_mark + high)
1855             else:
1856                 self.high_mark = self.low_mark + high
1857         if low is not None:
1858             if self.high_mark is not None:
1859                 self.low_mark = min(self.high_mark, self.low_mark + low)
1860             else:
1861                 self.low_mark = self.low_mark + low
1862 
1863         if self.low_mark == self.high_mark:
1864             self.set_empty()
1865 
1866     def clear_limits(self):
1867         """Clear any existing limits."""
1868         self.low_mark, self.high_mark = 0, None
1869 
1870     @property
1871     def is_sliced(self):
1872         return self.low_mark != 0 or self.high_mark is not None
1873 
1874     def has_limit_one(self):
1875         return self.high_mark is not None and (self.high_mark - self.low_mark) == 1
1876 
1877     def can_filter(self):
1878         """
1879         Return True if adding filters to this instance is still possible.
1880 
1881         Typically, this means no limits or offsets have been put on the results.
1882         """
1883         return not self.is_sliced
1884 
1885     def clear_select_clause(self):
1886         """Remove all fields from SELECT clause."""
1887         self.select = ()
1888         self.default_cols = False
1889         self.select_related = False
1890         self.set_extra_mask(())
1891         self.set_annotation_mask(())
1892 
1893     def clear_select_fields(self):
1894         """
1895         Clear the list of fields to select (but not extra_select columns).
1896         Some queryset types completely replace any existing list of select
1897         columns.
1898         """
1899         self.select = ()
1900         self.values_select = ()
1901 
1902     def add_select_col(self, col, name):
1903         self.select += col,
1904         self.values_select += name,
1905 
1906     def set_select(self, cols):
1907         self.default_cols = False
1908         self.select = tuple(cols)
1909 
1910     def add_distinct_fields(self, *field_names):
1911         """
1912         Add and resolve the given fields to the query's "distinct on" clause.
1913         """
1914         self.distinct_fields = field_names
1915         self.distinct = True
1916 
1917     def add_fields(self, field_names, allow_m2m=True):
1918         """
1919         Add the given (model) fields to the select set. Add the field names in
1920         the order specified.
1921         """
1922         alias = self.get_initial_alias()
1923         opts = self.get_meta()
1924 
1925         try:
1926             cols = []
1927             for name in field_names:
1928                 # Join promotion note - we must not remove any rows here, so
1929                 # if there is no existing joins, use outer join.
1930                 join_info = self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m)
1931                 targets, final_alias, joins = self.trim_joins(
1932                     join_info.targets,
1933                     join_info.joins,
1934                     join_info.path,
1935                 )
1936                 for target in targets:
1937                     cols.append(join_info.transform_function(target, final_alias))
1938             if cols:
1939                 self.set_select(cols)
1940         except MultiJoin:
1941             raise FieldError("Invalid field name: '%s'" % name)
1942         except FieldError:
1943             if LOOKUP_SEP in name:
1944                 # For lookups spanning over relationships, show the error
1945                 # from the model on which the lookup failed.
1946                 raise
1947             elif name in self.annotations:
1948                 raise FieldError(
1949                     "Cannot select the '%s' alias. Use annotate() to promote "
1950                     "it." % name
1951                 )
1952             else:
1953                 names = sorted([
1954                     *get_field_names_from_opts(opts), *self.extra,
1955                     *self.annotation_select, *self._filtered_relations
1956                 ])
1957                 raise FieldError("Cannot resolve keyword %r into field. "
1958                                  "Choices are: %s" % (name, ", ".join(names)))
1959 
1960     def add_ordering(self, *ordering):
1961         """
1962         Add items from the 'ordering' sequence to the query's "order by"
1963         clause. These items are either field names (not column names) --
1964         possibly with a direction prefix ('-' or '?') -- or OrderBy
1965         expressions.
1966 
1967         If 'ordering' is empty, clear all ordering from the query.
1968         """
1969         errors = []
1970         for item in ordering:
1971             if isinstance(item, str):
1972                 if '.' in item:
1973                     warnings.warn(
1974                         'Passing column raw column aliases to order_by() is '
1975                         'deprecated. Wrap %r in a RawSQL expression before '
1976                         'passing it to order_by().' % item,
1977                         category=RemovedInDjango40Warning,
1978                         stacklevel=3,
1979                     )
1980                     continue
1981                 if item == '?':
1982                     continue
1983                 if item.startswith('-'):
1984                     item = item[1:]
1985                 if item in self.annotations:
1986                     continue
1987                 if self.extra and item in self.extra:
1988                     continue
1989                 # names_to_path() validates the lookup. A descriptive
1990                 # FieldError will be raise if it's not.
1991                 self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)
1992             elif not hasattr(item, 'resolve_expression'):
1993                 errors.append(item)
1994             if getattr(item, 'contains_aggregate', False):
1995                 raise FieldError(
1996                     'Using an aggregate in order_by() without also including '
1997                     'it in annotate() is not allowed: %s' % item
1998                 )
1999         if errors:
2000             raise FieldError('Invalid order_by arguments: %s' % errors)
2001         if ordering:
2002             self.order_by += ordering
2003         else:
2004             self.default_ordering = False
2005 
2006     def clear_ordering(self, force_empty):
2007         """
2008         Remove any ordering settings. If 'force_empty' is True, there will be
2009         no ordering in the resulting query (not even the model's default).
2010         """
2011         self.order_by = ()
2012         self.extra_order_by = ()
2013         if force_empty:
2014             self.default_ordering = False
2015 
2016     def set_group_by(self, allow_aliases=True):
2017         """
2018         Expand the GROUP BY clause required by the query.
2019 
2020         This will usually be the set of all non-aggregate fields in the
2021         return data. If the database backend supports grouping by the
2022         primary key, and the query would be equivalent, the optimization
2023         will be made automatically.
2024         """
2025         # Column names from JOINs to check collisions with aliases.
2026         if allow_aliases:
2027             column_names = set()
2028             seen_models = set()
2029             for join in list(self.alias_map.values())[1:]:  # Skip base table.
2030                 model = join.join_field.related_model
2031                 if model not in seen_models:
2032                     column_names.update({
2033                         field.column
2034                         for field in model._meta.local_concrete_fields
2035                     })
2036                     seen_models.add(model)
2037 
2038         group_by = list(self.select)
2039         if self.annotation_select:
2040             for alias, annotation in self.annotation_select.items():
2041                 signature = inspect.signature(annotation.get_group_by_cols)
2042                 if 'alias' not in signature.parameters:
2043                     annotation_class = annotation.__class__
2044                     msg = (
2045                         '`alias=None` must be added to the signature of '
2046                         '%s.%s.get_group_by_cols().'
2047                     ) % (annotation_class.__module__, annotation_class.__qualname__)
2048                     warnings.warn(msg, category=RemovedInDjango40Warning)
2049                     group_by_cols = annotation.get_group_by_cols()
2050                 else:
2051                     if not allow_aliases or alias in column_names:
2052                         alias = None
2053                     group_by_cols = annotation.get_group_by_cols(alias=alias)
2054                 group_by.extend(group_by_cols)
2055         self.group_by = tuple(group_by)
2056 
2057     def add_select_related(self, fields):
2058         """
2059         Set up the select_related data structure so that we only select
2060         certain related models (as opposed to all models, when
2061         self.select_related=True).
2062         """
2063         if isinstance(self.select_related, bool):
2064             field_dict = {}
2065         else:
2066             field_dict = self.select_related
2067         for field in fields:
2068             d = field_dict
2069             for part in field.split(LOOKUP_SEP):
2070                 d = d.setdefault(part, {})
2071         self.select_related = field_dict
2072 
2073     def add_extra(self, select, select_params, where, params, tables, order_by):
2074         """
2075         Add data to the various extra_* attributes for user-created additions
2076         to the query.
2077         """
2078         if select:
2079             # We need to pair any placeholder markers in the 'select'
2080             # dictionary with their parameters in 'select_params' so that
2081             # subsequent updates to the select dictionary also adjust the
2082             # parameters appropriately.
2083             select_pairs = {}
2084             if select_params:
2085                 param_iter = iter(select_params)
2086             else:
2087                 param_iter = iter([])
2088             for name, entry in select.items():
2089                 entry = str(entry)
2090                 entry_params = []
2091                 pos = entry.find("%s")
2092                 while pos != -1:
2093                     if pos == 0 or entry[pos - 1] != '%':
2094                         entry_params.append(next(param_iter))
2095                     pos = entry.find("%s", pos + 2)
2096                 select_pairs[name] = (entry, entry_params)
2097             self.extra.update(select_pairs)
2098         if where or params:
2099             self.where.add(ExtraWhere(where, params), AND)
2100         if tables:
2101             self.extra_tables += tuple(tables)
2102         if order_by:
2103             self.extra_order_by = order_by
2104 
2105     def clear_deferred_loading(self):
2106         """Remove any fields from the deferred loading set."""
2107         self.deferred_loading = (frozenset(), True)
2108 
2109     def add_deferred_loading(self, field_names):
2110         """
2111         Add the given list of model field names to the set of fields to
2112         exclude from loading from the database when automatic column selection
2113         is done. Add the new field names to any existing field names that
2114         are deferred (or removed from any existing field names that are marked
2115         as the only ones for immediate loading).
2116         """
2117         # Fields on related models are stored in the literal double-underscore
2118         # format, so that we can use a set datastructure. We do the foo__bar
2119         # splitting and handling when computing the SQL column names (as part of
2120         # get_columns()).
2121         existing, defer = self.deferred_loading
2122         if defer:
2123             # Add to existing deferred names.
2124             self.deferred_loading = existing.union(field_names), True
2125         else:
2126             # Remove names from the set of any existing "immediate load" names.
2127             self.deferred_loading = existing.difference(field_names), False
2128 
2129     def add_immediate_loading(self, field_names):
2130         """
2131         Add the given list of model field names to the set of fields to
2132         retrieve when the SQL is executed ("immediate loading" fields). The
2133         field names replace any existing immediate loading field names. If
2134         there are field names already specified for deferred loading, remove
2135         those names from the new field_names before storing the new names
2136         for immediate loading. (That is, immediate loading overrides any
2137         existing immediate values, but respects existing deferrals.)
2138         """
2139         existing, defer = self.deferred_loading
2140         field_names = set(field_names)
2141         if 'pk' in field_names:
2142             field_names.remove('pk')
2143             field_names.add(self.get_meta().pk.name)
2144 
2145         if defer:
2146             # Remove any existing deferred names from the current set before
2147             # setting the new names.
2148             self.deferred_loading = field_names.difference(existing), False
2149         else:
2150             # Replace any existing "immediate load" field names.
2151             self.deferred_loading = frozenset(field_names), False
2152 
2153     def get_loaded_field_names(self):
2154         """
2155         If any fields are marked to be deferred, return a dictionary mapping
2156         models to a set of names in those fields that will be loaded. If a
2157         model is not in the returned dictionary, none of its fields are
2158         deferred.
2159 
2160         If no fields are marked for deferral, return an empty dictionary.
2161         """
2162         # We cache this because we call this function multiple times
2163         # (compiler.fill_related_selections, query.iterator)
2164         try:
2165             return self._loaded_field_names_cache
2166         except AttributeError:
2167             collection = {}
2168             self.deferred_to_data(collection, self.get_loaded_field_names_cb)
2169             self._loaded_field_names_cache = collection
2170             return collection
2171 
2172     def get_loaded_field_names_cb(self, target, model, fields):
2173         """Callback used by get_deferred_field_names()."""
2174         target[model] = {f.attname for f in fields}
2175 
2176     def set_annotation_mask(self, names):
2177         """Set the mask of annotations that will be returned by the SELECT."""
2178         if names is None:
2179             self.annotation_select_mask = None
2180         else:
2181             self.annotation_select_mask = set(names)
2182         self._annotation_select_cache = None
2183 
2184     def append_annotation_mask(self, names):
2185         if self.annotation_select_mask is not None:
2186             self.set_annotation_mask(self.annotation_select_mask.union(names))
2187 
2188     def set_extra_mask(self, names):
2189         """
2190         Set the mask of extra select items that will be returned by SELECT.
2191         Don't remove them from the Query since they might be used later.
2192         """
2193         if names is None:
2194             self.extra_select_mask = None
2195         else:
2196             self.extra_select_mask = set(names)
2197         self._extra_select_cache = None
2198 
2199     def set_values(self, fields):
2200         self.select_related = False
2201         self.clear_deferred_loading()
2202         self.clear_select_fields()
2203 
2204         if fields:
2205             field_names = []
2206             extra_names = []
2207             annotation_names = []
2208             if not self.extra and not self.annotations:
2209                 # Shortcut - if there are no extra or annotations, then
2210                 # the values() clause must be just field names.
2211                 field_names = list(fields)
2212             else:
2213                 self.default_cols = False
2214                 for f in fields:
2215                     if f in self.extra_select:
2216                         extra_names.append(f)
2217                     elif f in self.annotation_select:
2218                         annotation_names.append(f)
2219                     else:
2220                         field_names.append(f)
2221             self.set_extra_mask(extra_names)
2222             self.set_annotation_mask(annotation_names)
2223             selected = frozenset(field_names + extra_names + annotation_names)
2224         else:
2225             field_names = [f.attname for f in self.model._meta.concrete_fields]
2226             selected = frozenset(field_names)
2227         # Selected annotations must be known before setting the GROUP BY
2228         # clause.
2229         if self.group_by is True:
2230             self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
2231             # Disable GROUP BY aliases to avoid orphaning references to the
2232             # SELECT clause which is about to be cleared.
2233             self.set_group_by(allow_aliases=False)
2234             self.clear_select_fields()
2235         elif self.group_by:
2236             # Resolve GROUP BY annotation references if they are not part of
2237             # the selected fields anymore.
2238             group_by = []
2239             for expr in self.group_by:
2240                 if isinstance(expr, Ref) and expr.refs not in selected:
2241                     expr = self.annotations[expr.refs]
2242                 group_by.append(expr)
2243             self.group_by = tuple(group_by)
2244 
2245         self.values_select = tuple(field_names)
2246         self.add_fields(field_names, True)
2247 
2248     @property
2249     def annotation_select(self):
2250         """
2251         Return the dictionary of aggregate columns that are not masked and
2252         should be used in the SELECT clause. Cache this result for performance.
2253         """
2254         if self._annotation_select_cache is not None:
2255             return self._annotation_select_cache
2256         elif not self.annotations:
2257             return {}
2258         elif self.annotation_select_mask is not None:
2259             self._annotation_select_cache = {
2260                 k: v for k, v in self.annotations.items()
2261                 if k in self.annotation_select_mask
2262             }
2263             return self._annotation_select_cache
2264         else:
2265             return self.annotations
2266 
2267     @property
2268     def extra_select(self):
2269         if self._extra_select_cache is not None:
2270             return self._extra_select_cache
2271         if not self.extra:
2272             return {}
2273         elif self.extra_select_mask is not None:
2274             self._extra_select_cache = {
2275                 k: v for k, v in self.extra.items()
2276                 if k in self.extra_select_mask
2277             }
2278             return self._extra_select_cache
2279         else:
2280             return self.extra
2281 
2282     def trim_start(self, names_with_path):
2283         """
2284         Trim joins from the start of the join path. The candidates for trim
2285         are the PathInfos in names_with_path structure that are m2m joins.
2286 
2287         Also set the select column so the start matches the join.
2288 
2289         This method is meant to be used for generating the subquery joins &
2290         cols in split_exclude().
2291 
2292         Return a lookup usable for doing outerq.filter(lookup=self) and a
2293         boolean indicating if the joins in the prefix contain a LEFT OUTER join.
2294         _"""
2295         all_paths = []
2296         for _, paths in names_with_path:
2297             all_paths.extend(paths)
2298         contains_louter = False
2299         # Trim and operate only on tables that were generated for
2300         # the lookup part of the query. That is, avoid trimming
2301         # joins generated for F() expressions.
2302         lookup_tables = [
2303             t for t in self.alias_map
2304             if t in self._lookup_joins or t == self.base_table
2305         ]
2306         for trimmed_paths, path in enumerate(all_paths):
2307             if path.m2m:
2308                 break
2309             if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type == LOUTER:
2310                 contains_louter = True
2311             alias = lookup_tables[trimmed_paths]
2312             self.unref_alias(alias)
2313         # The path.join_field is a Rel, lets get the other side's field
2314         join_field = path.join_field.field
2315         # Build the filter prefix.
2316         paths_in_prefix = trimmed_paths
2317         trimmed_prefix = []
2318         for name, path in names_with_path:
2319             if paths_in_prefix - len(path) < 0:
2320                 break
2321             trimmed_prefix.append(name)
2322             paths_in_prefix -= len(path)
2323         trimmed_prefix.append(
2324             join_field.foreign_related_fields[0].name)
2325         trimmed_prefix = LOOKUP_SEP.join(trimmed_prefix)
2326         # Lets still see if we can trim the first join from the inner query
2327         # (that is, self). We can't do this for:
2328         # - LEFT JOINs because we would miss those rows that have nothing on
2329         #   the outer side,
2330         # - INNER JOINs from filtered relations because we would miss their
2331         #   filters.
2332         first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]
2333         if first_join.join_type != LOUTER and not first_join.filtered_relation:
2334             select_fields = [r[0] for r in join_field.related_fields]
2335             select_alias = lookup_tables[trimmed_paths + 1]
2336             self.unref_alias(lookup_tables[trimmed_paths])
2337             extra_restriction = join_field.get_extra_restriction(
2338                 self.where_class, None, lookup_tables[trimmed_paths + 1])
2339             if extra_restriction:
2340                 self.where.add(extra_restriction, AND)
2341         else:
2342             # TODO: It might be possible to trim more joins from the start of the
2343             # inner query if it happens to have a longer join chain containing the
2344             # values in select_fields. Lets punt this one for now.
2345             select_fields = [r[1] for r in join_field.related_fields]
2346             select_alias = lookup_tables[trimmed_paths]
2347         # The found starting point is likely a Join instead of a BaseTable reference.
2348         # But the first entry in the query's FROM clause must not be a JOIN.
2349         for table in self.alias_map:
2350             if self.alias_refcount[table] > 0:
2351                 self.alias_map[table] = BaseTable(self.alias_map[table].table_name, table)
2352                 break
2353         self.set_select([f.get_col(select_alias) for f in select_fields])
2354         return trimmed_prefix, contains_louter
2355 
2356     def is_nullable(self, field):
2357         """
2358         Check if the given field should be treated as nullable.
2359 
2360         Some backends treat '' as null and Django treats such fields as
2361         nullable for those backends. In such situations field.null can be
2362         False even if we should treat the field as nullable.
2363         """
2364         # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have
2365         # (nor should it have) knowledge of which connection is going to be
2366         # used. The proper fix would be to defer all decisions where
2367         # is_nullable() is needed to the compiler stage, but that is not easy
2368         # to do currently.
2369         return (
2370             connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
2371             field.empty_strings_allowed
2372         ) or field.null

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>django/db/backends/base/schema.py</file>
<class>BaseDatabaseSchemaEditor</class>
<method>_model_indexes_sql</method>
<code>
1053     def _model_indexes_sql(self, model):
1054         """
1055         Return a list of all index SQL statements (field indexes,
1056         index_together, Meta.indexes) for the specified model.
1057         """
1058         if not model._meta.managed or model._meta.proxy or model._meta.swapped:
1059             return []
1060         output = []
1061         for field in model._meta.local_fields:
1062             output.extend(self._field_indexes_sql(model, field))
1063 
1064         for field_names in model._meta.index_together:
1065             fields = [model._meta.get_field(field) for field in field_names]
1066             output.append(self._create_index_sql(model, fields=fields, suffix='_idx'))
1067 
1068         for index in model._meta.indexes:
1069             if (
1070                 not index.contains_expressions or
1071                 self.connection.features.supports_expression_indexes
1072             ):
1073                 output.append(index.create_sql(model, self))
1074         return output

</code><intended_behavior>This method generates SQL for model indexes including functional indexes. To resolve the issue, the intended behavior here should include a preliminary step where functional indexes are validated for the existence of model fields referenced in their expressions. This validation step would involve implementing a new system check mechanism prior to this point to ensure that only valid field names are included in functional indexes. The existing functionality for generating SQL remains the same, but it will be preceded by an additional validation layer to catch invalid field references early in the process.</intended_behavior>, <file>django/db/backends/base/schema.py</file>
<class>BaseDatabaseSchemaEditor</class>
<method>None</method>
<code>
45 class BaseDatabaseSchemaEditor:
46     """
47     This class and its subclasses are responsible for emitting schema-changing
48     statements to the databases - model creation/removal/alteration, field
49     renaming, index fiddling, and so on.
50     """
51 
52     # Overrideable SQL templates
53     sql_create_table = "CREATE TABLE %(table)s (%(definition)s)"
54     sql_rename_table = "ALTER TABLE %(old_table)s RENAME TO %(new_table)s"
55     sql_retablespace_table = "ALTER TABLE %(table)s SET TABLESPACE %(new_tablespace)s"
56     sql_delete_table = "DROP TABLE %(table)s CASCADE"
57 
58     sql_create_column = "ALTER TABLE %(table)s ADD COLUMN %(column)s %(definition)s"
59     sql_alter_column = "ALTER TABLE %(table)s %(changes)s"
60     sql_alter_column_type = "ALTER COLUMN %(column)s TYPE %(type)s"
61     sql_alter_column_null = "ALTER COLUMN %(column)s DROP NOT NULL"
62     sql_alter_column_not_null = "ALTER COLUMN %(column)s SET NOT NULL"
63     sql_alter_column_default = "ALTER COLUMN %(column)s SET DEFAULT %(default)s"
64     sql_alter_column_no_default = "ALTER COLUMN %(column)s DROP DEFAULT"
65     sql_alter_column_collate = "ALTER COLUMN %(column)s TYPE %(type)s%(collation)s"
66     sql_delete_column = "ALTER TABLE %(table)s DROP COLUMN %(column)s CASCADE"
67     sql_rename_column = "ALTER TABLE %(table)s RENAME COLUMN %(old_column)s TO %(new_column)s"
68     sql_update_with_default = "UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL"
69 
70     sql_unique_constraint = "UNIQUE (%(columns)s)%(deferrable)s"
71     sql_check_constraint = "CHECK (%(check)s)"
72     sql_delete_constraint = "ALTER TABLE %(table)s DROP CONSTRAINT %(name)s"
73     sql_constraint = "CONSTRAINT %(name)s %(constraint)s"
74 
75     sql_create_check = "ALTER TABLE %(table)s ADD CONSTRAINT %(name)s CHECK (%(check)s)"
76     sql_delete_check = sql_delete_constraint
77 
78     sql_create_unique = "ALTER TABLE %(table)s ADD CONSTRAINT %(name)s UNIQUE (%(columns)s)%(deferrable)s"
79     sql_delete_unique = sql_delete_constraint
80 
81     sql_create_fk = (
82         "ALTER TABLE %(table)s ADD CONSTRAINT %(name)s FOREIGN KEY (%(column)s) "
83         "REFERENCES %(to_table)s (%(to_column)s)%(deferrable)s"
84     )
85     sql_create_inline_fk = None
86     sql_create_column_inline_fk = None
87     sql_delete_fk = sql_delete_constraint
88 
89     sql_create_index = "CREATE INDEX %(name)s ON %(table)s (%(columns)s)%(include)s%(extra)s%(condition)s"
90     sql_create_unique_index = "CREATE UNIQUE INDEX %(name)s ON %(table)s (%(columns)s)%(include)s%(condition)s"
91     sql_delete_index = "DROP INDEX %(name)s"
92 
93     sql_create_pk = "ALTER TABLE %(table)s ADD CONSTRAINT %(name)s PRIMARY KEY (%(columns)s)"
94     sql_delete_pk = sql_delete_constraint
95 
96     sql_delete_procedure = 'DROP PROCEDURE %(procedure)s'
97 
98     def __init__(self, connection, collect_sql=False, atomic=True):
99         self.connection = connection
100         self.collect_sql = collect_sql
101         if self.collect_sql:
102             self.collected_sql = []
103         self.atomic_migration = self.connection.features.can_rollback_ddl and atomic
104 
105     # State-managing methods
106 
107     def __enter__(self):
108         self.deferred_sql = []
109         if self.atomic_migration:
110             self.atomic = atomic(self.connection.alias)
111             self.atomic.__enter__()
112         return self
113 
114     def __exit__(self, exc_type, exc_value, traceback):
115         if exc_type is None:
116             for sql in self.deferred_sql:
117                 self.execute(sql)
118         if self.atomic_migration:
119             self.atomic.__exit__(exc_type, exc_value, traceback)
120 
121     # Core utility functions
122 
123     def execute(self, sql, params=()):
124         """Execute the given SQL statement, with optional parameters."""
125         # Don't perform the transactional DDL check if SQL is being collected
126         # as it's not going to be executed anyway.
127         if not self.collect_sql and self.connection.in_atomic_block and not self.connection.features.can_rollback_ddl:
128             raise TransactionManagementError(
129                 "Executing DDL statements while in a transaction on databases "
130                 "that can't perform a rollback is prohibited."
131             )
132         # Account for non-string statement objects.
133         sql = str(sql)
134         # Log the command we're running, then run it
135         logger.debug("%s; (params %r)", sql, params, extra={'params': params, 'sql': sql})
136         if self.collect_sql:
137             ending = "" if sql.endswith(";") else ";"
138             if params is not None:
139                 self.collected_sql.append((sql % tuple(map(self.quote_value, params))) + ending)
140             else:
141                 self.collected_sql.append(sql + ending)
142         else:
143             with self.connection.cursor() as cursor:
144                 cursor.execute(sql, params)
145 
146     def quote_name(self, name):
147         return self.connection.ops.quote_name(name)
148 
149     def table_sql(self, model):
150         """Take a model and return its table definition."""
151         # Add any unique_togethers (always deferred, as some fields might be
152         # created afterwards, like geometry fields with some backends).
153         for fields in model._meta.unique_together:
154             columns = [model._meta.get_field(field).column for field in fields]
155             self.deferred_sql.append(self._create_unique_sql(model, columns))
156         # Create column SQL, add FK deferreds if needed.
157         column_sqls = []
158         params = []
159         for field in model._meta.local_fields:
160             # SQL.
161             definition, extra_params = self.column_sql(model, field)
162             if definition is None:
163                 continue
164             # Check constraints can go on the column SQL here.
165             db_params = field.db_parameters(connection=self.connection)
166             if db_params['check']:
167                 definition += ' ' + self.sql_check_constraint % db_params
168             # Autoincrement SQL (for backends with inline variant).
169             col_type_suffix = field.db_type_suffix(connection=self.connection)
170             if col_type_suffix:
171                 definition += ' %s' % col_type_suffix
172             params.extend(extra_params)
173             # FK.
174             if field.remote_field and field.db_constraint:
175                 to_table = field.remote_field.model._meta.db_table
176                 to_column = field.remote_field.model._meta.get_field(field.remote_field.field_name).column
177                 if self.sql_create_inline_fk:
178                     definition += ' ' + self.sql_create_inline_fk % {
179                         'to_table': self.quote_name(to_table),
180                         'to_column': self.quote_name(to_column),
181                     }
182                 elif self.connection.features.supports_foreign_keys:
183                     self.deferred_sql.append(self._create_fk_sql(model, field, '_fk_%(to_table)s_%(to_column)s'))
184             # Add the SQL to our big list.
185             column_sqls.append('%s %s' % (
186                 self.quote_name(field.column),
187                 definition,
188             ))
189             # Autoincrement SQL (for backends with post table definition
190             # variant).
191             if field.get_internal_type() in ('AutoField', 'BigAutoField', 'SmallAutoField'):
192                 autoinc_sql = self.connection.ops.autoinc_sql(model._meta.db_table, field.column)
193                 if autoinc_sql:
194                     self.deferred_sql.extend(autoinc_sql)
195         constraints = [constraint.constraint_sql(model, self) for constraint in model._meta.constraints]
196         sql = self.sql_create_table % {
197             'table': self.quote_name(model._meta.db_table),
198             'definition': ', '.join(constraint for constraint in (*column_sqls, *constraints) if constraint),
199         }
200         if model._meta.db_tablespace:
201             tablespace_sql = self.connection.ops.tablespace_sql(model._meta.db_tablespace)
202             if tablespace_sql:
203                 sql += ' ' + tablespace_sql
204         return sql, params
205 
206     # Field <-> database mapping functions
207 
208     def column_sql(self, model, field, include_default=False):
209         """
210         Take a field and return its column definition.
211         The field must already have had set_attributes_from_name() called.
212         """
213         # Get the column's type and use that as the basis of the SQL
214         db_params = field.db_parameters(connection=self.connection)
215         sql = db_params['type']
216         params = []
217         # Check for fields that aren't actually columns (e.g. M2M)
218         if sql is None:
219             return None, None
220         # Collation.
221         collation = getattr(field, 'db_collation', None)
222         if collation:
223             sql += self._collate_sql(collation)
224         # Work out nullability
225         null = field.null
226         # If we were told to include a default value, do so
227         include_default = include_default and not self.skip_default(field)
228         if include_default:
229             default_value = self.effective_default(field)
230             column_default = ' DEFAULT ' + self._column_default_sql(field)
231             if default_value is not None:
232                 if self.connection.features.requires_literal_defaults:
233                     # Some databases can't take defaults as a parameter (oracle)
234                     # If this is the case, the individual schema backend should
235                     # implement prepare_default
236                     sql += column_default % self.prepare_default(default_value)
237                 else:
238                     sql += column_default
239                     params += [default_value]
240         # Oracle treats the empty string ('') as null, so coerce the null
241         # option whenever '' is a possible value.
242         if (field.empty_strings_allowed and not field.primary_key and
243                 self.connection.features.interprets_empty_strings_as_nulls):
244             null = True
245         if null and not self.connection.features.implied_column_null:
246             sql += " NULL"
247         elif not null:
248             sql += " NOT NULL"
249         # Primary key/unique outputs
250         if field.primary_key:
251             sql += " PRIMARY KEY"
252         elif field.unique:
253             sql += " UNIQUE"
254         # Optionally add the tablespace if it's an implicitly indexed column
255         tablespace = field.db_tablespace or model._meta.db_tablespace
256         if tablespace and self.connection.features.supports_tablespaces and field.unique:
257             sql += " %s" % self.connection.ops.tablespace_sql(tablespace, inline=True)
258         # Return the sql
259         return sql, params
260 
261     def skip_default(self, field):
262         """
263         Some backends don't accept default values for certain columns types
264         (i.e. MySQL longtext and longblob).
265         """
266         return False
267 
268     def prepare_default(self, value):
269         """
270         Only used for backends which have requires_literal_defaults feature
271         """
272         raise NotImplementedError(
273             'subclasses of BaseDatabaseSchemaEditor for backends which have '
274             'requires_literal_defaults must provide a prepare_default() method'
275         )
276 
277     def _column_default_sql(self, field):
278         """
279         Return the SQL to use in a DEFAULT clause. The resulting string should
280         contain a '%s' placeholder for a default value.
281         """
282         return '%s'
283 
284     @staticmethod
285     def _effective_default(field):
286         # This method allows testing its logic without a connection.
287         if field.has_default():
288             default = field.get_default()
289         elif not field.null and field.blank and field.empty_strings_allowed:
290             if field.get_internal_type() == "BinaryField":
291                 default = b''
292             else:
293                 default = ''
294         elif getattr(field, 'auto_now', False) or getattr(field, 'auto_now_add', False):
295             default = datetime.now()
296             internal_type = field.get_internal_type()
297             if internal_type == 'DateField':
298                 default = default.date()
299             elif internal_type == 'TimeField':
300                 default = default.time()
301             elif internal_type == 'DateTimeField':
302                 default = timezone.now()
303         else:
304             default = None
305         return default
306 
307     def effective_default(self, field):
308         """Return a field's effective database default value."""
309         return field.get_db_prep_save(self._effective_default(field), self.connection)
310 
311     def quote_value(self, value):
312         """
313         Return a quoted version of the value so it's safe to use in an SQL
314         string. This is not safe against injection from user code; it is
315         intended only for use in making SQL scripts or preparing default values
316         for particularly tricky backends (defaults are not user-defined, though,
317         so this is safe).
318         """
319         raise NotImplementedError()
320 
321     # Actions
322 
323     def create_model(self, model):
324         """
325         Create a table and any accompanying indexes or unique constraints for
326         the given `model`.
327         """
328         sql, params = self.table_sql(model)
329         # Prevent using [] as params, in the case a literal '%' is used in the definition
330         self.execute(sql, params or None)
331 
332         # Add any field index and index_together's (deferred as SQLite _remake_table needs it)
333         self.deferred_sql.extend(self._model_indexes_sql(model))
334 
335         # Make M2M tables
336         for field in model._meta.local_many_to_many:
337             if field.remote_field.through._meta.auto_created:
338                 self.create_model(field.remote_field.through)
339 
340     def delete_model(self, model):
341         """Delete a model from the database."""
342         # Handle auto-created intermediary models
343         for field in model._meta.local_many_to_many:
344             if field.remote_field.through._meta.auto_created:
345                 self.delete_model(field.remote_field.through)
346 
347         # Delete the table
348         self.execute(self.sql_delete_table % {
349             "table": self.quote_name(model._meta.db_table),
350         })
351         # Remove all deferred statements referencing the deleted table.
352         for sql in list(self.deferred_sql):
353             if isinstance(sql, Statement) and sql.references_table(model._meta.db_table):
354                 self.deferred_sql.remove(sql)
355 
356     def add_index(self, model, index):
357         """Add an index on a model."""
358         if (
359             index.contains_expressions and
360             not self.connection.features.supports_expression_indexes
361         ):
362             return None
363         self.execute(index.create_sql(model, self), params=None)
364 
365     def remove_index(self, model, index):
366         """Remove an index from a model."""
367         if (
368             index.contains_expressions and
369             not self.connection.features.supports_expression_indexes
370         ):
371             return None
372         self.execute(index.remove_sql(model, self))
373 
374     def add_constraint(self, model, constraint):
375         """Add a constraint to a model."""
376         sql = constraint.create_sql(model, self)
377         if sql:
378             self.execute(sql)
379 
380     def remove_constraint(self, model, constraint):
381         """Remove a constraint from a model."""
382         sql = constraint.remove_sql(model, self)
383         if sql:
384             self.execute(sql)
385 
386     def alter_unique_together(self, model, old_unique_together, new_unique_together):
387         """
388         Deal with a model changing its unique_together. The input
389         unique_togethers must be doubly-nested, not the single-nested
390         ["foo", "bar"] format.
391         """
392         olds = {tuple(fields) for fields in old_unique_together}
393         news = {tuple(fields) for fields in new_unique_together}
394         # Deleted uniques
395         for fields in olds.difference(news):
396             self._delete_composed_index(model, fields, {'unique': True}, self.sql_delete_unique)
397         # Created uniques
398         for fields in news.difference(olds):
399             columns = [model._meta.get_field(field).column for field in fields]
400             self.execute(self._create_unique_sql(model, columns))
401 
402     def alter_index_together(self, model, old_index_together, new_index_together):
403         """
404         Deal with a model changing its index_together. The input
405         index_togethers must be doubly-nested, not the single-nested
406         ["foo", "bar"] format.
407         """
408         olds = {tuple(fields) for fields in old_index_together}
409         news = {tuple(fields) for fields in new_index_together}
410         # Deleted indexes
411         for fields in olds.difference(news):
412             self._delete_composed_index(
413                 model,
414                 fields,
415                 {'index': True, 'unique': False},
416                 self.sql_delete_index,
417             )
418         # Created indexes
419         for field_names in news.difference(olds):
420             fields = [model._meta.get_field(field) for field in field_names]
421             self.execute(self._create_index_sql(model, fields=fields, suffix='_idx'))
422 
423     def _delete_composed_index(self, model, fields, constraint_kwargs, sql):
424         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
425         meta_index_names = {constraint.name for constraint in model._meta.indexes}
426         columns = [model._meta.get_field(field).column for field in fields]
427         constraint_names = self._constraint_names(
428             model, columns, exclude=meta_constraint_names | meta_index_names,
429             **constraint_kwargs
430         )
431         if len(constraint_names) != 1:
432             raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
433                 len(constraint_names),
434                 model._meta.db_table,
435                 ", ".join(columns),
436             ))
437         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
438 
439     def alter_db_table(self, model, old_db_table, new_db_table):
440         """Rename the table a model points to."""
441         if (old_db_table == new_db_table or
442             (self.connection.features.ignores_table_name_case and
443                 old_db_table.lower() == new_db_table.lower())):
444             return
445         self.execute(self.sql_rename_table % {
446             "old_table": self.quote_name(old_db_table),
447             "new_table": self.quote_name(new_db_table),
448         })
449         # Rename all references to the old table name.
450         for sql in self.deferred_sql:
451             if isinstance(sql, Statement):
452                 sql.rename_table_references(old_db_table, new_db_table)
453 
454     def alter_db_tablespace(self, model, old_db_tablespace, new_db_tablespace):
455         """Move a model's table between tablespaces."""
456         self.execute(self.sql_retablespace_table % {
457             "table": self.quote_name(model._meta.db_table),
458             "old_tablespace": self.quote_name(old_db_tablespace),
459             "new_tablespace": self.quote_name(new_db_tablespace),
460         })
461 
462     def add_field(self, model, field):
463         """
464         Create a field on a model. Usually involves adding a column, but may
465         involve adding a table instead (for M2M fields).
466         """
467         # Special-case implicit M2M tables
468         if field.many_to_many and field.remote_field.through._meta.auto_created:
469             return self.create_model(field.remote_field.through)
470         # Get the column's definition
471         definition, params = self.column_sql(model, field, include_default=True)
472         # It might not actually have a column behind it
473         if definition is None:
474             return
475         # Check constraints can go on the column SQL here
476         db_params = field.db_parameters(connection=self.connection)
477         if db_params['check']:
478             definition += " " + self.sql_check_constraint % db_params
479         if field.remote_field and self.connection.features.supports_foreign_keys and field.db_constraint:
480             constraint_suffix = '_fk_%(to_table)s_%(to_column)s'
481             # Add FK constraint inline, if supported.
482             if self.sql_create_column_inline_fk:
483                 to_table = field.remote_field.model._meta.db_table
484                 to_column = field.remote_field.model._meta.get_field(field.remote_field.field_name).column
485                 namespace, _ = split_identifier(model._meta.db_table)
486                 definition += " " + self.sql_create_column_inline_fk % {
487                     'name': self._fk_constraint_name(model, field, constraint_suffix),
488                     'namespace': '%s.' % self.quote_name(namespace) if namespace else '',
489                     'column': self.quote_name(field.column),
490                     'to_table': self.quote_name(to_table),
491                     'to_column': self.quote_name(to_column),
492                     'deferrable': self.connection.ops.deferrable_sql()
493                 }
494             # Otherwise, add FK constraints later.
495             else:
496                 self.deferred_sql.append(self._create_fk_sql(model, field, constraint_suffix))
497         # Build the SQL and run it
498         sql = self.sql_create_column % {
499             "table": self.quote_name(model._meta.db_table),
500             "column": self.quote_name(field.column),
501             "definition": definition,
502         }
503         self.execute(sql, params)
504         # Drop the default if we need to
505         # (Django usually does not use in-database defaults)
506         if not self.skip_default(field) and self.effective_default(field) is not None:
507             changes_sql, params = self._alter_column_default_sql(model, None, field, drop=True)
508             sql = self.sql_alter_column % {
509                 "table": self.quote_name(model._meta.db_table),
510                 "changes": changes_sql,
511             }
512             self.execute(sql, params)
513         # Add an index, if required
514         self.deferred_sql.extend(self._field_indexes_sql(model, field))
515         # Reset connection if required
516         if self.connection.features.connection_persists_old_columns:
517             self.connection.close()
518 
519     def remove_field(self, model, field):
520         """
521         Remove a field from a model. Usually involves deleting a column,
522         but for M2Ms may involve deleting a table.
523         """
524         # Special-case implicit M2M tables
525         if field.many_to_many and field.remote_field.through._meta.auto_created:
526             return self.delete_model(field.remote_field.through)
527         # It might not actually have a column behind it
528         if field.db_parameters(connection=self.connection)['type'] is None:
529             return
530         # Drop any FK constraints, MySQL requires explicit deletion
531         if field.remote_field:
532             fk_names = self._constraint_names(model, [field.column], foreign_key=True)
533             for fk_name in fk_names:
534                 self.execute(self._delete_fk_sql(model, fk_name))
535         # Delete the column
536         sql = self.sql_delete_column % {
537             "table": self.quote_name(model._meta.db_table),
538             "column": self.quote_name(field.column),
539         }
540         self.execute(sql)
541         # Reset connection if required
542         if self.connection.features.connection_persists_old_columns:
543             self.connection.close()
544         # Remove all deferred statements referencing the deleted column.
545         for sql in list(self.deferred_sql):
546             if isinstance(sql, Statement) and sql.references_column(model._meta.db_table, field.column):
547                 self.deferred_sql.remove(sql)
548 
549     def alter_field(self, model, old_field, new_field, strict=False):
550         """
551         Allow a field's type, uniqueness, nullability, default, column,
552         constraints, etc. to be modified.
553         `old_field` is required to compute the necessary changes.
554         If `strict` is True, raise errors if the old column does not match
555         `old_field` precisely.
556         """
557         if not self._field_should_be_altered(old_field, new_field):
558             return
559         # Ensure this field is even column-based
560         old_db_params = old_field.db_parameters(connection=self.connection)
561         old_type = old_db_params['type']
562         new_db_params = new_field.db_parameters(connection=self.connection)
563         new_type = new_db_params['type']
564         if ((old_type is None and old_field.remote_field is None) or
565                 (new_type is None and new_field.remote_field is None)):
566             raise ValueError(
567                 "Cannot alter field %s into %s - they do not properly define "
568                 "db_type (are you using a badly-written custom field?)" %
569                 (old_field, new_field),
570             )
571         elif old_type is None and new_type is None and (
572                 old_field.remote_field.through and new_field.remote_field.through and
573                 old_field.remote_field.through._meta.auto_created and
574                 new_field.remote_field.through._meta.auto_created):
575             return self._alter_many_to_many(model, old_field, new_field, strict)
576         elif old_type is None and new_type is None and (
577                 old_field.remote_field.through and new_field.remote_field.through and
578                 not old_field.remote_field.through._meta.auto_created and
579                 not new_field.remote_field.through._meta.auto_created):
580             # Both sides have through models; this is a no-op.
581             return
582         elif old_type is None or new_type is None:
583             raise ValueError(
584                 "Cannot alter field %s into %s - they are not compatible types "
585                 "(you cannot alter to or from M2M fields, or add or remove "
586                 "through= on M2M fields)" % (old_field, new_field)
587             )
588 
589         self._alter_field(model, old_field, new_field, old_type, new_type,
590                           old_db_params, new_db_params, strict)
591 
592     def _alter_field(self, model, old_field, new_field, old_type, new_type,
593                      old_db_params, new_db_params, strict=False):
594         """Perform a "physical" (non-ManyToMany) field update."""
595         # Drop any FK constraints, we'll remake them later
596         fks_dropped = set()
597         if (
598             self.connection.features.supports_foreign_keys and
599             old_field.remote_field and
600             old_field.db_constraint
601         ):
602             fk_names = self._constraint_names(model, [old_field.column], foreign_key=True)
603             if strict and len(fk_names) != 1:
604                 raise ValueError("Found wrong number (%s) of foreign key constraints for %s.%s" % (
605                     len(fk_names),
606                     model._meta.db_table,
607                     old_field.column,
608                 ))
609             for fk_name in fk_names:
610                 fks_dropped.add((old_field.column,))
611                 self.execute(self._delete_fk_sql(model, fk_name))
612         # Has unique been removed?
613         if old_field.unique and (not new_field.unique or self._field_became_primary_key(old_field, new_field)):
614             # Find the unique constraint for this field
615             meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
616             constraint_names = self._constraint_names(
617                 model, [old_field.column], unique=True, primary_key=False,
618                 exclude=meta_constraint_names,
619             )
620             if strict and len(constraint_names) != 1:
621                 raise ValueError("Found wrong number (%s) of unique constraints for %s.%s" % (
622                     len(constraint_names),
623                     model._meta.db_table,
624                     old_field.column,
625                 ))
626             for constraint_name in constraint_names:
627                 self.execute(self._delete_unique_sql(model, constraint_name))
628         # Drop incoming FK constraints if the field is a primary key or unique,
629         # which might be a to_field target, and things are going to change.
630         drop_foreign_keys = (
631             self.connection.features.supports_foreign_keys and (
632                 (old_field.primary_key and new_field.primary_key) or
633                 (old_field.unique and new_field.unique)
634             ) and old_type != new_type
635         )
636         if drop_foreign_keys:
637             # '_meta.related_field' also contains M2M reverse fields, these
638             # will be filtered out
639             for _old_rel, new_rel in _related_non_m2m_objects(old_field, new_field):
640                 rel_fk_names = self._constraint_names(
641                     new_rel.related_model, [new_rel.field.column], foreign_key=True
642                 )
643                 for fk_name in rel_fk_names:
644                     self.execute(self._delete_fk_sql(new_rel.related_model, fk_name))
645         # Removed an index? (no strict check, as multiple indexes are possible)
646         # Remove indexes if db_index switched to False or a unique constraint
647         # will now be used in lieu of an index. The following lines from the
648         # truth table show all True cases; the rest are False:
649         #
650         # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique
651         # ------------------------------------------------------------------------------
652         # True               | False            | False              | False
653         # True               | False            | False              | True
654         # True               | False            | True               | True
655         if old_field.db_index and not old_field.unique and (not new_field.db_index or new_field.unique):
656             # Find the index for this field
657             meta_index_names = {index.name for index in model._meta.indexes}
658             # Retrieve only BTREE indexes since this is what's created with
659             # db_index=True.
660             index_names = self._constraint_names(
661                 model, [old_field.column], index=True, type_=Index.suffix,
662                 exclude=meta_index_names,
663             )
664             for index_name in index_names:
665                 # The only way to check if an index was created with
666                 # db_index=True or with Index(['field'], name='foo')
667                 # is to look at its name (refs #28053).
668                 self.execute(self._delete_index_sql(model, index_name))
669         # Change check constraints?
670         if old_db_params['check'] != new_db_params['check'] and old_db_params['check']:
671             meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
672             constraint_names = self._constraint_names(
673                 model, [old_field.column], check=True,
674                 exclude=meta_constraint_names,
675             )
676             if strict and len(constraint_names) != 1:
677                 raise ValueError("Found wrong number (%s) of check constraints for %s.%s" % (
678                     len(constraint_names),
679                     model._meta.db_table,
680                     old_field.column,
681                 ))
682             for constraint_name in constraint_names:
683                 self.execute(self._delete_check_sql(model, constraint_name))
684         # Have they renamed the column?
685         if old_field.column != new_field.column:
686             self.execute(self._rename_field_sql(model._meta.db_table, old_field, new_field, new_type))
687             # Rename all references to the renamed column.
688             for sql in self.deferred_sql:
689                 if isinstance(sql, Statement):
690                     sql.rename_column_references(model._meta.db_table, old_field.column, new_field.column)
691         # Next, start accumulating actions to do
692         actions = []
693         null_actions = []
694         post_actions = []
695         # Collation change?
696         old_collation = getattr(old_field, 'db_collation', None)
697         new_collation = getattr(new_field, 'db_collation', None)
698         if old_collation != new_collation:
699             # Collation change handles also a type change.
700             fragment = self._alter_column_collation_sql(model, new_field, new_type, new_collation)
701             actions.append(fragment)
702         # Type change?
703         elif old_type != new_type:
704             fragment, other_actions = self._alter_column_type_sql(model, old_field, new_field, new_type)
705             actions.append(fragment)
706             post_actions.extend(other_actions)
707         # When changing a column NULL constraint to NOT NULL with a given
708         # default value, we need to perform 4 steps:
709         #  1. Add a default for new incoming writes
710         #  2. Update existing NULL rows with new default
711         #  3. Replace NULL constraint with NOT NULL
712         #  4. Drop the default again.
713         # Default change?
714         needs_database_default = False
715         if old_field.null and not new_field.null:
716             old_default = self.effective_default(old_field)
717             new_default = self.effective_default(new_field)
718             if (
719                 not self.skip_default(new_field) and
720                 old_default != new_default and
721                 new_default is not None
722             ):
723                 needs_database_default = True
724                 actions.append(self._alter_column_default_sql(model, old_field, new_field))
725         # Nullability change?
726         if old_field.null != new_field.null:
727             fragment = self._alter_column_null_sql(model, old_field, new_field)
728             if fragment:
729                 null_actions.append(fragment)
730         # Only if we have a default and there is a change from NULL to NOT NULL
731         four_way_default_alteration = (
732             new_field.has_default() and
733             (old_field.null and not new_field.null)
734         )
735         if actions or null_actions:
736             if not four_way_default_alteration:
737                 # If we don't have to do a 4-way default alteration we can
738                 # directly run a (NOT) NULL alteration
739                 actions = actions + null_actions
740             # Combine actions together if we can (e.g. postgres)
741             if self.connection.features.supports_combined_alters and actions:
742                 sql, params = tuple(zip(*actions))
743                 actions = [(", ".join(sql), sum(params, []))]
744             # Apply those actions
745             for sql, params in actions:
746                 self.execute(
747                     self.sql_alter_column % {
748                         "table": self.quote_name(model._meta.db_table),
749                         "changes": sql,
750                     },
751                     params,
752                 )
753             if four_way_default_alteration:
754                 # Update existing rows with default value
755                 self.execute(
756                     self.sql_update_with_default % {
757                         "table": self.quote_name(model._meta.db_table),
758                         "column": self.quote_name(new_field.column),
759                         "default": "%s",
760                     },
761                     [new_default],
762                 )
763                 # Since we didn't run a NOT NULL change before we need to do it
764                 # now
765                 for sql, params in null_actions:
766                     self.execute(
767                         self.sql_alter_column % {
768                             "table": self.quote_name(model._meta.db_table),
769                             "changes": sql,
770                         },
771                         params,
772                     )
773         if post_actions:
774             for sql, params in post_actions:
775                 self.execute(sql, params)
776         # If primary_key changed to False, delete the primary key constraint.
777         if old_field.primary_key and not new_field.primary_key:
778             self._delete_primary_key(model, strict)
779         # Added a unique?
780         if self._unique_should_be_added(old_field, new_field):
781             self.execute(self._create_unique_sql(model, [new_field.column]))
782         # Added an index? Add an index if db_index switched to True or a unique
783         # constraint will no longer be used in lieu of an index. The following
784         # lines from the truth table show all True cases; the rest are False:
785         #
786         # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique
787         # ------------------------------------------------------------------------------
788         # False              | False            | True               | False
789         # False              | True             | True               | False
790         # True               | True             | True               | False
791         if (not old_field.db_index or old_field.unique) and new_field.db_index and not new_field.unique:
792             self.execute(self._create_index_sql(model, fields=[new_field]))
793         # Type alteration on primary key? Then we need to alter the column
794         # referring to us.
795         rels_to_update = []
796         if drop_foreign_keys:
797             rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))
798         # Changed to become primary key?
799         if self._field_became_primary_key(old_field, new_field):
800             # Make the new one
801             self.execute(self._create_primary_key_sql(model, new_field))
802             # Update all referencing columns
803             rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))
804         # Handle our type alters on the other end of rels from the PK stuff above
805         for old_rel, new_rel in rels_to_update:
806             rel_db_params = new_rel.field.db_parameters(connection=self.connection)
807             rel_type = rel_db_params['type']
808             fragment, other_actions = self._alter_column_type_sql(
809                 new_rel.related_model, old_rel.field, new_rel.field, rel_type
810             )
811             self.execute(
812                 self.sql_alter_column % {
813                     "table": self.quote_name(new_rel.related_model._meta.db_table),
814                     "changes": fragment[0],
815                 },
816                 fragment[1],
817             )
818             for sql, params in other_actions:
819                 self.execute(sql, params)
820         # Does it have a foreign key?
821         if (self.connection.features.supports_foreign_keys and new_field.remote_field and
822                 (fks_dropped or not old_field.remote_field or not old_field.db_constraint) and
823                 new_field.db_constraint):
824             self.execute(self._create_fk_sql(model, new_field, "_fk_%(to_table)s_%(to_column)s"))
825         # Rebuild FKs that pointed to us if we previously had to drop them
826         if drop_foreign_keys:
827             for rel in new_field.model._meta.related_objects:
828                 if _is_relevant_relation(rel, new_field) and rel.field.db_constraint:
829                     self.execute(self._create_fk_sql(rel.related_model, rel.field, "_fk"))
830         # Does it have check constraints we need to add?
831         if old_db_params['check'] != new_db_params['check'] and new_db_params['check']:
832             constraint_name = self._create_index_name(model._meta.db_table, [new_field.column], suffix='_check')
833             self.execute(self._create_check_sql(model, constraint_name, new_db_params['check']))
834         # Drop the default if we need to
835         # (Django usually does not use in-database defaults)
836         if needs_database_default:
837             changes_sql, params = self._alter_column_default_sql(model, old_field, new_field, drop=True)
838             sql = self.sql_alter_column % {
839                 "table": self.quote_name(model._meta.db_table),
840                 "changes": changes_sql,
841             }
842             self.execute(sql, params)
843         # Reset connection if required
844         if self.connection.features.connection_persists_old_columns:
845             self.connection.close()
846 
847     def _alter_column_null_sql(self, model, old_field, new_field):
848         """
849         Hook to specialize column null alteration.
850 
851         Return a (sql, params) fragment to set a column to null or non-null
852         as required by new_field, or None if no changes are required.
853         """
854         if (self.connection.features.interprets_empty_strings_as_nulls and
855                 new_field.get_internal_type() in ("CharField", "TextField")):
856             # The field is nullable in the database anyway, leave it alone.
857             return
858         else:
859             new_db_params = new_field.db_parameters(connection=self.connection)
860             sql = self.sql_alter_column_null if new_field.null else self.sql_alter_column_not_null
861             return (
862                 sql % {
863                     'column': self.quote_name(new_field.column),
864                     'type': new_db_params['type'],
865                 },
866                 [],
867             )
868 
869     def _alter_column_default_sql(self, model, old_field, new_field, drop=False):
870         """
871         Hook to specialize column default alteration.
872 
873         Return a (sql, params) fragment to add or drop (depending on the drop
874         argument) a default to new_field's column.
875         """
876         new_default = self.effective_default(new_field)
877         default = self._column_default_sql(new_field)
878         params = [new_default]
879 
880         if drop:
881             params = []
882         elif self.connection.features.requires_literal_defaults:
883             # Some databases (Oracle) can't take defaults as a parameter
884             # If this is the case, the SchemaEditor for that database should
885             # implement prepare_default().
886             default = self.prepare_default(new_default)
887             params = []
888 
889         new_db_params = new_field.db_parameters(connection=self.connection)
890         sql = self.sql_alter_column_no_default if drop else self.sql_alter_column_default
891         return (
892             sql % {
893                 'column': self.quote_name(new_field.column),
894                 'type': new_db_params['type'],
895                 'default': default,
896             },
897             params,
898         )
899 
900     def _alter_column_type_sql(self, model, old_field, new_field, new_type):
901         """
902         Hook to specialize column type alteration for different backends,
903         for cases when a creation type is different to an alteration type
904         (e.g. SERIAL in PostgreSQL, PostGIS fields).
905 
906         Return a two-tuple of: an SQL fragment of (sql, params) to insert into
907         an ALTER TABLE statement and a list of extra (sql, params) tuples to
908         run once the field is altered.
909         """
910         return (
911             (
912                 self.sql_alter_column_type % {
913                     "column": self.quote_name(new_field.column),
914                     "type": new_type,
915                 },
916                 [],
917             ),
918             [],
919         )
920 
921     def _alter_column_collation_sql(self, model, new_field, new_type, new_collation):
922         return (
923             self.sql_alter_column_collate % {
924                 'column': self.quote_name(new_field.column),
925                 'type': new_type,
926                 'collation': self._collate_sql(new_collation) if new_collation else '',
927             },
928             [],
929         )
930 
931     def _alter_many_to_many(self, model, old_field, new_field, strict):
932         """Alter M2Ms to repoint their to= endpoints."""
933         # Rename the through table
934         if old_field.remote_field.through._meta.db_table != new_field.remote_field.through._meta.db_table:
935             self.alter_db_table(old_field.remote_field.through, old_field.remote_field.through._meta.db_table,
936                                 new_field.remote_field.through._meta.db_table)
937         # Repoint the FK to the other side
938         self.alter_field(
939             new_field.remote_field.through,
940             # We need the field that points to the target model, so we can tell alter_field to change it -
941             # this is m2m_reverse_field_name() (as opposed to m2m_field_name, which points to our model)
942             old_field.remote_field.through._meta.get_field(old_field.m2m_reverse_field_name()),
943             new_field.remote_field.through._meta.get_field(new_field.m2m_reverse_field_name()),
944         )
945         self.alter_field(
946             new_field.remote_field.through,
947             # for self-referential models we need to alter field from the other end too
948             old_field.remote_field.through._meta.get_field(old_field.m2m_field_name()),
949             new_field.remote_field.through._meta.get_field(new_field.m2m_field_name()),
950         )
951 
952     def _create_index_name(self, table_name, column_names, suffix=""):
953         """
954         Generate a unique name for an index/unique constraint.
955 
956         The name is divided into 3 parts: the table name, the column names,
957         and a unique digest and suffix.
958         """
959         _, table_name = split_identifier(table_name)
960         hash_suffix_part = '%s%s' % (names_digest(table_name, *column_names, length=8), suffix)
961         max_length = self.connection.ops.max_name_length() or 200
962         # If everything fits into max_length, use that name.
963         index_name = '%s_%s_%s' % (table_name, '_'.join(column_names), hash_suffix_part)
964         if len(index_name) <= max_length:
965             return index_name
966         # Shorten a long suffix.
967         if len(hash_suffix_part) > max_length / 3:
968             hash_suffix_part = hash_suffix_part[:max_length // 3]
969         other_length = (max_length - len(hash_suffix_part)) // 2 - 1
970         index_name = '%s_%s_%s' % (
971             table_name[:other_length],
972             '_'.join(column_names)[:other_length],
973             hash_suffix_part,
974         )
975         # Prepend D if needed to prevent the name from starting with an
976         # underscore or a number (not permitted on Oracle).
977         if index_name[0] == "_" or index_name[0].isdigit():
978             index_name = "D%s" % index_name[:-1]
979         return index_name
980 
981     def _get_index_tablespace_sql(self, model, fields, db_tablespace=None):
982         if db_tablespace is None:
983             if len(fields) == 1 and fields[0].db_tablespace:
984                 db_tablespace = fields[0].db_tablespace
985             elif model._meta.db_tablespace:
986                 db_tablespace = model._meta.db_tablespace
987         if db_tablespace is not None:
988             return ' ' + self.connection.ops.tablespace_sql(db_tablespace)
989         return ''
990 
991     def _index_condition_sql(self, condition):
992         if condition:
993             return ' WHERE ' + condition
994         return ''
995 
996     def _index_include_sql(self, model, columns):
997         if not columns or not self.connection.features.supports_covering_indexes:
998             return ''
999         return Statement(
1000             ' INCLUDE (%(columns)s)',
1001             columns=Columns(model._meta.db_table, columns, self.quote_name),
1002         )
1003 
1004     def _create_index_sql(self, model, *, fields=None, name=None, suffix='', using='',
1005                           db_tablespace=None, col_suffixes=(), sql=None, opclasses=(),
1006                           condition=None, include=None, expressions=None):
1007         """
1008         Return the SQL statement to create the index for one or several fields
1009         or expressions. `sql` can be specified if the syntax differs from the
1010         standard (GIS indexes, ...).
1011         """
1012         fields = fields or []
1013         expressions = expressions or []
1014         compiler = Query(model, alias_cols=False).get_compiler(
1015             connection=self.connection,
1016         )
1017         tablespace_sql = self._get_index_tablespace_sql(model, fields, db_tablespace=db_tablespace)
1018         columns = [field.column for field in fields]
1019         sql_create_index = sql or self.sql_create_index
1020         table = model._meta.db_table
1021 
1022         def create_index_name(*args, **kwargs):
1023             nonlocal name
1024             if name is None:
1025                 name = self._create_index_name(*args, **kwargs)
1026             return self.quote_name(name)
1027 
1028         return Statement(
1029             sql_create_index,
1030             table=Table(table, self.quote_name),
1031             name=IndexName(table, columns, suffix, create_index_name),
1032             using=using,
1033             columns=(
1034                 self._index_columns(table, columns, col_suffixes, opclasses)
1035                 if columns
1036                 else Expressions(table, expressions, compiler, self.quote_value)
1037             ),
1038             extra=tablespace_sql,
1039             condition=self._index_condition_sql(condition),
1040             include=self._index_include_sql(model, include),
1041         )
1042 
1043     def _delete_index_sql(self, model, name, sql=None):
1044         return Statement(
1045             sql or self.sql_delete_index,
1046             table=Table(model._meta.db_table, self.quote_name),
1047             name=self.quote_name(name),
1048         )
1049 
1050     def _index_columns(self, table, columns, col_suffixes, opclasses):
1051         return Columns(table, columns, self.quote_name, col_suffixes=col_suffixes)
1052 
1053     def _model_indexes_sql(self, model):
1054         """
1055         Return a list of all index SQL statements (field indexes,
1056         index_together, Meta.indexes) for the specified model.
1057         """
1058         if not model._meta.managed or model._meta.proxy or model._meta.swapped:
1059             return []
1060         output = []
1061         for field in model._meta.local_fields:
1062             output.extend(self._field_indexes_sql(model, field))
1063 
1064         for field_names in model._meta.index_together:
1065             fields = [model._meta.get_field(field) for field in field_names]
1066             output.append(self._create_index_sql(model, fields=fields, suffix='_idx'))
1067 
1068         for index in model._meta.indexes:
1069             if (
1070                 not index.contains_expressions or
1071                 self.connection.features.supports_expression_indexes
1072             ):
1073                 output.append(index.create_sql(model, self))
1074         return output
1075 
1076     def _field_indexes_sql(self, model, field):
1077         """
1078         Return a list of all index SQL statements for the specified field.
1079         """
1080         output = []
1081         if self._field_should_be_indexed(model, field):
1082             output.append(self._create_index_sql(model, fields=[field]))
1083         return output
1084 
1085     def _field_should_be_altered(self, old_field, new_field):
1086         _, old_path, old_args, old_kwargs = old_field.deconstruct()
1087         _, new_path, new_args, new_kwargs = new_field.deconstruct()
1088         # Don't alter when:
1089         # - changing only a field name
1090         # - changing an attribute that doesn't affect the schema
1091         # - adding only a db_column and the column name is not changed
1092         non_database_attrs = [
1093             'blank',
1094             'db_column',
1095             'editable',
1096             'error_messages',
1097             'help_text',
1098             'limit_choices_to',
1099             # Database-level options are not supported, see #21961.
1100             'on_delete',
1101             'related_name',
1102             'related_query_name',
1103             'validators',
1104             'verbose_name',
1105         ]
1106         for attr in non_database_attrs:
1107             old_kwargs.pop(attr, None)
1108             new_kwargs.pop(attr, None)
1109         return (
1110             self.quote_name(old_field.column) != self.quote_name(new_field.column) or
1111             (old_path, old_args, old_kwargs) != (new_path, new_args, new_kwargs)
1112         )
1113 
1114     def _field_should_be_indexed(self, model, field):
1115         return field.db_index and not field.unique
1116 
1117     def _field_became_primary_key(self, old_field, new_field):
1118         return not old_field.primary_key and new_field.primary_key
1119 
1120     def _unique_should_be_added(self, old_field, new_field):
1121         return (not old_field.unique and new_field.unique) or (
1122             old_field.primary_key and not new_field.primary_key and new_field.unique
1123         )
1124 
1125     def _rename_field_sql(self, table, old_field, new_field, new_type):
1126         return self.sql_rename_column % {
1127             "table": self.quote_name(table),
1128             "old_column": self.quote_name(old_field.column),
1129             "new_column": self.quote_name(new_field.column),
1130             "type": new_type,
1131         }
1132 
1133     def _create_fk_sql(self, model, field, suffix):
1134         table = Table(model._meta.db_table, self.quote_name)
1135         name = self._fk_constraint_name(model, field, suffix)
1136         column = Columns(model._meta.db_table, [field.column], self.quote_name)
1137         to_table = Table(field.target_field.model._meta.db_table, self.quote_name)
1138         to_column = Columns(field.target_field.model._meta.db_table, [field.target_field.column], self.quote_name)
1139         deferrable = self.connection.ops.deferrable_sql()
1140         return Statement(
1141             self.sql_create_fk,
1142             table=table,
1143             name=name,
1144             column=column,
1145             to_table=to_table,
1146             to_column=to_column,
1147             deferrable=deferrable,
1148         )
1149 
1150     def _fk_constraint_name(self, model, field, suffix):
1151         def create_fk_name(*args, **kwargs):
1152             return self.quote_name(self._create_index_name(*args, **kwargs))
1153 
1154         return ForeignKeyName(
1155             model._meta.db_table,
1156             [field.column],
1157             split_identifier(field.target_field.model._meta.db_table)[1],
1158             [field.target_field.column],
1159             suffix,
1160             create_fk_name,
1161         )
1162 
1163     def _delete_fk_sql(self, model, name):
1164         return self._delete_constraint_sql(self.sql_delete_fk, model, name)
1165 
1166     def _deferrable_constraint_sql(self, deferrable):
1167         if deferrable is None:
1168             return ''
1169         if deferrable == Deferrable.DEFERRED:
1170             return ' DEFERRABLE INITIALLY DEFERRED'
1171         if deferrable == Deferrable.IMMEDIATE:
1172             return ' DEFERRABLE INITIALLY IMMEDIATE'
1173 
1174     def _unique_sql(
1175         self, model, fields, name, condition=None, deferrable=None,
1176         include=None, opclasses=None,
1177     ):
1178         if (
1179             deferrable and
1180             not self.connection.features.supports_deferrable_unique_constraints
1181         ):
1182             return None
1183         if condition or include or opclasses:
1184             # Databases support conditional and covering unique constraints via
1185             # a unique index.
1186             sql = self._create_unique_sql(
1187                 model,
1188                 fields,
1189                 name=name,
1190                 condition=condition,
1191                 include=include,
1192                 opclasses=opclasses,
1193             )
1194             if sql:
1195                 self.deferred_sql.append(sql)
1196             return None
1197         constraint = self.sql_unique_constraint % {
1198             'columns': ', '.join(map(self.quote_name, fields)),
1199             'deferrable': self._deferrable_constraint_sql(deferrable),
1200         }
1201         return self.sql_constraint % {
1202             'name': self.quote_name(name),
1203             'constraint': constraint,
1204         }
1205 
1206     def _create_unique_sql(
1207         self, model, columns, name=None, condition=None, deferrable=None,
1208         include=None, opclasses=None,
1209     ):
1210         if (
1211             (
1212                 deferrable and
1213                 not self.connection.features.supports_deferrable_unique_constraints
1214             ) or
1215             (condition and not self.connection.features.supports_partial_indexes) or
1216             (include and not self.connection.features.supports_covering_indexes)
1217         ):
1218             return None
1219 
1220         def create_unique_name(*args, **kwargs):
1221             return self.quote_name(self._create_index_name(*args, **kwargs))
1222 
1223         table = Table(model._meta.db_table, self.quote_name)
1224         if name is None:
1225             name = IndexName(model._meta.db_table, columns, '_uniq', create_unique_name)
1226         else:
1227             name = self.quote_name(name)
1228         columns = self._index_columns(table, columns, col_suffixes=(), opclasses=opclasses)
1229         if condition or include or opclasses:
1230             sql = self.sql_create_unique_index
1231         else:
1232             sql = self.sql_create_unique
1233         return Statement(
1234             sql,
1235             table=table,
1236             name=name,
1237             columns=columns,
1238             condition=self._index_condition_sql(condition),
1239             deferrable=self._deferrable_constraint_sql(deferrable),
1240             include=self._index_include_sql(model, include),
1241         )
1242 
1243     def _delete_unique_sql(
1244         self, model, name, condition=None, deferrable=None, include=None,
1245         opclasses=None,
1246     ):
1247         if (
1248             (
1249                 deferrable and
1250                 not self.connection.features.supports_deferrable_unique_constraints
1251             ) or
1252             (condition and not self.connection.features.supports_partial_indexes) or
1253             (include and not self.connection.features.supports_covering_indexes)
1254         ):
1255             return None
1256         if condition or include or opclasses:
1257             sql = self.sql_delete_index
1258         else:
1259             sql = self.sql_delete_unique
1260         return self._delete_constraint_sql(sql, model, name)
1261 
1262     def _check_sql(self, name, check):
1263         return self.sql_constraint % {
1264             'name': self.quote_name(name),
1265             'constraint': self.sql_check_constraint % {'check': check},
1266         }
1267 
1268     def _create_check_sql(self, model, name, check):
1269         return Statement(
1270             self.sql_create_check,
1271             table=Table(model._meta.db_table, self.quote_name),
1272             name=self.quote_name(name),
1273             check=check,
1274         )
1275 
1276     def _delete_check_sql(self, model, name):
1277         return self._delete_constraint_sql(self.sql_delete_check, model, name)
1278 
1279     def _delete_constraint_sql(self, template, model, name):
1280         return Statement(
1281             template,
1282             table=Table(model._meta.db_table, self.quote_name),
1283             name=self.quote_name(name),
1284         )
1285 
1286     def _constraint_names(self, model, column_names=None, unique=None,
1287                           primary_key=None, index=None, foreign_key=None,
1288                           check=None, type_=None, exclude=None):
1289         """Return all constraint names matching the columns and conditions."""
1290         if column_names is not None:
1291             column_names = [
1292                 self.connection.introspection.identifier_converter(name)
1293                 for name in column_names
1294             ]
1295         with self.connection.cursor() as cursor:
1296             constraints = self.connection.introspection.get_constraints(cursor, model._meta.db_table)
1297         result = []
1298         for name, infodict in constraints.items():
1299             if column_names is None or column_names == infodict['columns']:
1300                 if unique is not None and infodict['unique'] != unique:
1301                     continue
1302                 if primary_key is not None and infodict['primary_key'] != primary_key:
1303                     continue
1304                 if index is not None and infodict['index'] != index:
1305                     continue
1306                 if check is not None and infodict['check'] != check:
1307                     continue
1308                 if foreign_key is not None and not infodict['foreign_key']:
1309                     continue
1310                 if type_ is not None and infodict['type'] != type_:
1311                     continue
1312                 if not exclude or name not in exclude:
1313                     result.append(name)
1314         return result
1315 
1316     def _delete_primary_key(self, model, strict=False):
1317         constraint_names = self._constraint_names(model, primary_key=True)
1318         if strict and len(constraint_names) != 1:
1319             raise ValueError('Found wrong number (%s) of PK constraints for %s' % (
1320                 len(constraint_names),
1321                 model._meta.db_table,
1322             ))
1323         for constraint_name in constraint_names:
1324             self.execute(self._delete_primary_key_sql(model, constraint_name))
1325 
1326     def _create_primary_key_sql(self, model, field):
1327         return Statement(
1328             self.sql_create_pk,
1329             table=Table(model._meta.db_table, self.quote_name),
1330             name=self.quote_name(
1331                 self._create_index_name(model._meta.db_table, [field.column], suffix="_pk")
1332             ),
1333             columns=Columns(model._meta.db_table, [field.column], self.quote_name),
1334         )
1335 
1336     def _delete_primary_key_sql(self, model, name):
1337         return self._delete_constraint_sql(self.sql_delete_pk, model, name)
1338 
1339     def _collate_sql(self, collation):
1340         return ' COLLATE ' + self.quote_name(collation)
1341 
1342     def remove_procedure(self, procedure_name, param_types=()):
1343         sql = self.sql_delete_procedure % {
1344             'procedure': self.quote_name(procedure_name),
1345             'param_types': ','.join(param_types),
1346         }
1347         self.execute(sql)

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>]
2025-10-17 12:43:14.326 | INFO     | Search completed. Bug locations: [<file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>_gen_cols</method>
<code>
1713     def _gen_cols(cls, exprs):
1714         for expr in exprs:
1715             if isinstance(expr, Col):
1716                 yield expr
1717             else:
1718                 yield from cls._gen_cols(expr.get_source_expressions())

</code><intended_behavior>While this method in itself is not buggy, it provides an insight into how expressions are iterated over and columns are extracted. No modification is needed here, but this insight informs the implementation strategy for the checks. The intended behavior around _gen_cols remains the same, but understanding it helps in developing a new system check to validate model field names in functional indexes without directly modifying this method.</intended_behavior>, <file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>None</method>
<code>
143 class Query(BaseExpression):
144     """A single SQL query."""
145 
146     alias_prefix = 'T'
147     subq_aliases = frozenset([alias_prefix])
148 
149     compiler = 'SQLCompiler'
150 
151     def __init__(self, model, where=WhereNode, alias_cols=True):
152         self.model = model
153         self.alias_refcount = {}
154         # alias_map is the most important data structure regarding joins.
155         # It's used for recording which joins exist in the query and what
156         # types they are. The key is the alias of the joined table (possibly
157         # the table name) and the value is a Join-like object (see
158         # sql.datastructures.Join for more information).
159         self.alias_map = {}
160         # Whether to provide alias to columns during reference resolving.
161         self.alias_cols = alias_cols
162         # Sometimes the query contains references to aliases in outer queries (as
163         # a result of split_exclude). Correct alias quoting needs to know these
164         # aliases too.
165         # Map external tables to whether they are aliased.
166         self.external_aliases = {}
167         self.table_map = {}     # Maps table names to list of aliases.
168         self.default_cols = True
169         self.default_ordering = True
170         self.standard_ordering = True
171         self.used_aliases = set()
172         self.filter_is_sticky = False
173         self.subquery = False
174 
175         # SQL-related attributes
176         # Select and related select clauses are expressions to use in the
177         # SELECT clause of the query.
178         # The select is used for cases where we want to set up the select
179         # clause to contain other than default fields (values(), subqueries...)
180         # Note that annotations go to annotations dictionary.
181         self.select = ()
182         self.where = where()
183         self.where_class = where
184         # The group_by attribute can have one of the following forms:
185         #  - None: no group by at all in the query
186         #  - A tuple of expressions: group by (at least) those expressions.
187         #    String refs are also allowed for now.
188         #  - True: group by all select fields of the model
189         # See compiler.get_group_by() for details.
190         self.group_by = None
191         self.order_by = ()
192         self.low_mark, self.high_mark = 0, None  # Used for offset/limit
193         self.distinct = False
194         self.distinct_fields = ()
195         self.select_for_update = False
196         self.select_for_update_nowait = False
197         self.select_for_update_skip_locked = False
198         self.select_for_update_of = ()
199         self.select_for_no_key_update = False
200 
201         self.select_related = False
202         # Arbitrary limit for select_related to prevents infinite recursion.
203         self.max_depth = 5
204 
205         # Holds the selects defined by a call to values() or values_list()
206         # excluding annotation_select and extra_select.
207         self.values_select = ()
208 
209         # SQL annotation-related attributes
210         self.annotations = {}  # Maps alias -> Annotation Expression
211         self.annotation_select_mask = None
212         self._annotation_select_cache = None
213 
214         # Set combination attributes
215         self.combinator = None
216         self.combinator_all = False
217         self.combined_queries = ()
218 
219         # These are for extensions. The contents are more or less appended
220         # verbatim to the appropriate clause.
221         self.extra = {}  # Maps col_alias -> (col_sql, params).
222         self.extra_select_mask = None
223         self._extra_select_cache = None
224 
225         self.extra_tables = ()
226         self.extra_order_by = ()
227 
228         # A tuple that is a set of model field names and either True, if these
229         # are the fields to defer, or False if these are the only fields to
230         # load.
231         self.deferred_loading = (frozenset(), True)
232 
233         self._filtered_relations = {}
234 
235         self.explain_query = False
236         self.explain_format = None
237         self.explain_options = {}
238 
239     @property
240     def output_field(self):
241         if len(self.select) == 1:
242             select = self.select[0]
243             return getattr(select, 'target', None) or select.field
244         elif len(self.annotation_select) == 1:
245             return next(iter(self.annotation_select.values())).output_field
246 
247     @property
248     def has_select_fields(self):
249         return bool(self.select or self.annotation_select_mask or self.extra_select_mask)
250 
251     @cached_property
252     def base_table(self):
253         for alias in self.alias_map:
254             return alias
255 
256     @property
257     def identity(self):
258         identity = (
259             (arg, make_hashable(value))
260             for arg, value in self.__dict__.items()
261         )
262         return (self.__class__, *identity)
263 
264     def __str__(self):
265         """
266         Return the query as a string of SQL with the parameter values
267         substituted in (use sql_with_params() to see the unsubstituted string).
268 
269         Parameter values won't necessarily be quoted correctly, since that is
270         done by the database interface at execution time.
271         """
272         sql, params = self.sql_with_params()
273         return sql % params
274 
275     def sql_with_params(self):
276         """
277         Return the query as an SQL string and the parameters that will be
278         substituted into the query.
279         """
280         return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()
281 
282     def __deepcopy__(self, memo):
283         """Limit the amount of work when a Query is deepcopied."""
284         result = self.clone()
285         memo[id(self)] = result
286         return result
287 
288     def get_compiler(self, using=None, connection=None):
289         if using is None and connection is None:
290             raise ValueError("Need either using or connection")
291         if using:
292             connection = connections[using]
293         return connection.ops.compiler(self.compiler)(self, connection, using)
294 
295     def get_meta(self):
296         """
297         Return the Options instance (the model._meta) from which to start
298         processing. Normally, this is self.model._meta, but it can be changed
299         by subclasses.
300         """
301         return self.model._meta
302 
303     def clone(self):
304         """
305         Return a copy of the current Query. A lightweight alternative to
306         to deepcopy().
307         """
308         obj = Empty()
309         obj.__class__ = self.__class__
310         # Copy references to everything.
311         obj.__dict__ = self.__dict__.copy()
312         # Clone attributes that can't use shallow copy.
313         obj.alias_refcount = self.alias_refcount.copy()
314         obj.alias_map = self.alias_map.copy()
315         obj.external_aliases = self.external_aliases.copy()
316         obj.table_map = self.table_map.copy()
317         obj.where = self.where.clone()
318         obj.annotations = self.annotations.copy()
319         if self.annotation_select_mask is None:
320             obj.annotation_select_mask = None
321         else:
322             obj.annotation_select_mask = self.annotation_select_mask.copy()
323         obj.combined_queries = tuple(query.clone() for query in self.combined_queries)
324         # _annotation_select_cache cannot be copied, as doing so breaks the
325         # (necessary) state in which both annotations and
326         # _annotation_select_cache point to the same underlying objects.
327         # It will get re-populated in the cloned queryset the next time it's
328         # used.
329         obj._annotation_select_cache = None
330         obj.extra = self.extra.copy()
331         if self.extra_select_mask is None:
332             obj.extra_select_mask = None
333         else:
334             obj.extra_select_mask = self.extra_select_mask.copy()
335         if self._extra_select_cache is None:
336             obj._extra_select_cache = None
337         else:
338             obj._extra_select_cache = self._extra_select_cache.copy()
339         if self.select_related is not False:
340             # Use deepcopy because select_related stores fields in nested
341             # dicts.
342             obj.select_related = copy.deepcopy(obj.select_related)
343         if 'subq_aliases' in self.__dict__:
344             obj.subq_aliases = self.subq_aliases.copy()
345         obj.used_aliases = self.used_aliases.copy()
346         obj._filtered_relations = self._filtered_relations.copy()
347         # Clear the cached_property
348         try:
349             del obj.base_table
350         except AttributeError:
351             pass
352         return obj
353 
354     def chain(self, klass=None):
355         """
356         Return a copy of the current Query that's ready for another operation.
357         The klass argument changes the type of the Query, e.g. UpdateQuery.
358         """
359         obj = self.clone()
360         if klass and obj.__class__ != klass:
361             obj.__class__ = klass
362         if not obj.filter_is_sticky:
363             obj.used_aliases = set()
364         obj.filter_is_sticky = False
365         if hasattr(obj, '_setup_query'):
366             obj._setup_query()
367         return obj
368 
369     def relabeled_clone(self, change_map):
370         clone = self.clone()
371         clone.change_aliases(change_map)
372         return clone
373 
374     def _get_col(self, target, field, alias):
375         if not self.alias_cols:
376             alias = None
377         return target.get_col(alias, field)
378 
379     def rewrite_cols(self, annotation, col_cnt):
380         # We must make sure the inner query has the referred columns in it.
381         # If we are aggregating over an annotation, then Django uses Ref()
382         # instances to note this. However, if we are annotating over a column
383         # of a related model, then it might be that column isn't part of the
384         # SELECT clause of the inner query, and we must manually make sure
385         # the column is selected. An example case is:
386         #    .aggregate(Sum('author__awards'))
387         # Resolving this expression results in a join to author, but there
388         # is no guarantee the awards column of author is in the select clause
389         # of the query. Thus we must manually add the column to the inner
390         # query.
391         orig_exprs = annotation.get_source_expressions()
392         new_exprs = []
393         for expr in orig_exprs:
394             # FIXME: These conditions are fairly arbitrary. Identify a better
395             # method of having expressions decide which code path they should
396             # take.
397             if isinstance(expr, Ref):
398                 # Its already a Ref to subquery (see resolve_ref() for
399                 # details)
400                 new_exprs.append(expr)
401             elif isinstance(expr, (WhereNode, Lookup)):
402                 # Decompose the subexpressions further. The code here is
403                 # copied from the else clause, but this condition must appear
404                 # before the contains_aggregate/is_summary condition below.
405                 new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
406                 new_exprs.append(new_expr)
407             else:
408                 # Reuse aliases of expressions already selected in subquery.
409                 for col_alias, selected_annotation in self.annotation_select.items():
410                     if selected_annotation is expr:
411                         new_expr = Ref(col_alias, expr)
412                         break
413                 else:
414                     # An expression that is not selected the subquery.
415                     if isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):
416                         # Reference column or another aggregate. Select it
417                         # under a non-conflicting alias.
418                         col_cnt += 1
419                         col_alias = '__col%d' % col_cnt
420                         self.annotations[col_alias] = expr
421                         self.append_annotation_mask([col_alias])
422                         new_expr = Ref(col_alias, expr)
423                     else:
424                         # Some other expression not referencing database values
425                         # directly. Its subexpression might contain Cols.
426                         new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
427                 new_exprs.append(new_expr)
428         annotation.set_source_expressions(new_exprs)
429         return annotation, col_cnt
430 
431     def get_aggregation(self, using, added_aggregate_names):
432         """
433         Return the dictionary with the values of the existing aggregations.
434         """
435         if not self.annotation_select:
436             return {}
437         existing_annotations = [
438             annotation for alias, annotation
439             in self.annotations.items()
440             if alias not in added_aggregate_names
441         ]
442         # Decide if we need to use a subquery.
443         #
444         # Existing annotations would cause incorrect results as get_aggregation()
445         # must produce just one result and thus must not use GROUP BY. But we
446         # aren't smart enough to remove the existing annotations from the
447         # query, so those would force us to use GROUP BY.
448         #
449         # If the query has limit or distinct, or uses set operations, then
450         # those operations must be done in a subquery so that the query
451         # aggregates on the limit and/or distinct results instead of applying
452         # the distinct and limit after the aggregation.
453         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or
454                 self.distinct or self.combinator):
455             from django.db.models.sql.subqueries import AggregateQuery
456             inner_query = self.clone()
457             inner_query.subquery = True
458             outer_query = AggregateQuery(self.model, inner_query)
459             inner_query.select_for_update = False
460             inner_query.select_related = False
461             inner_query.set_annotation_mask(self.annotation_select)
462             if not self.is_sliced and not self.distinct_fields:
463                 # Queries with distinct_fields need ordering and when a limit
464                 # is applied we must take the slice from the ordered query.
465                 # Otherwise no need for ordering.
466                 inner_query.clear_ordering(True)
467             if not inner_query.distinct:
468                 # If the inner query uses default select and it has some
469                 # aggregate annotations, then we must make sure the inner
470                 # query is grouped by the main model's primary key. However,
471                 # clearing the select clause can alter results if distinct is
472                 # used.
473                 has_existing_aggregate_annotations = any(
474                     annotation for annotation in existing_annotations
475                     if getattr(annotation, 'contains_aggregate', True)
476                 )
477                 if inner_query.default_cols and has_existing_aggregate_annotations:
478                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
479                 inner_query.default_cols = False
480 
481             relabels = {t: 'subquery' for t in inner_query.alias_map}
482             relabels[None] = 'subquery'
483             # Remove any aggregates marked for reduction from the subquery
484             # and move them to the outer AggregateQuery.
485             col_cnt = 0
486             for alias, expression in list(inner_query.annotation_select.items()):
487                 annotation_select_mask = inner_query.annotation_select_mask
488                 if expression.is_summary:
489                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
490                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
491                     del inner_query.annotations[alias]
492                     annotation_select_mask.remove(alias)
493                 # Make sure the annotation_select wont use cached results.
494                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)
495             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
496                 # In case of Model.objects[0:3].count(), there would be no
497                 # field selected in the inner query, yet we must use a subquery.
498                 # So, make sure at least one field is selected.
499                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
500         else:
501             outer_query = self
502             self.select = ()
503             self.default_cols = False
504             self.extra = {}
505 
506         outer_query.clear_ordering(True)
507         outer_query.clear_limits()
508         outer_query.select_for_update = False
509         outer_query.select_related = False
510         compiler = outer_query.get_compiler(using)
511         result = compiler.execute_sql(SINGLE)
512         if result is None:
513             result = [None] * len(outer_query.annotation_select)
514 
515         converters = compiler.get_converters(outer_query.annotation_select.values())
516         result = next(compiler.apply_converters((result,), converters))
517 
518         return dict(zip(outer_query.annotation_select, result))
519 
520     def get_count(self, using):
521         """
522         Perform a COUNT() query using the current filter constraints.
523         """
524         obj = self.clone()
525         obj.add_annotation(Count('*'), alias='__count', is_summary=True)
526         number = obj.get_aggregation(using, ['__count'])['__count']
527         if number is None:
528             number = 0
529         return number
530 
531     def has_filters(self):
532         return self.where
533 
534     def exists(self, using, limit=True):
535         q = self.clone()
536         if not q.distinct:
537             if q.group_by is True:
538                 q.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
539                 # Disable GROUP BY aliases to avoid orphaning references to the
540                 # SELECT clause which is about to be cleared.
541                 q.set_group_by(allow_aliases=False)
542             q.clear_select_clause()
543         if q.combined_queries and q.combinator == 'union':
544             limit_combined = connections[using].features.supports_slicing_ordering_in_compound
545             q.combined_queries = tuple(
546                 combined_query.exists(using, limit=limit_combined)
547                 for combined_query in q.combined_queries
548             )
549         q.clear_ordering(True)
550         if limit:
551             q.set_limits(high=1)
552         q.add_extra({'a': 1}, None, None, None, None, None)
553         q.set_extra_mask(['a'])
554         return q
555 
556     def has_results(self, using):
557         q = self.exists(using)
558         compiler = q.get_compiler(using=using)
559         return compiler.has_results()
560 
561     def explain(self, using, format=None, **options):
562         q = self.clone()
563         q.explain_query = True
564         q.explain_format = format
565         q.explain_options = options
566         compiler = q.get_compiler(using=using)
567         return '\n'.join(compiler.explain_query())
568 
569     def combine(self, rhs, connector):
570         """
571         Merge the 'rhs' query into the current one (with any 'rhs' effects
572         being applied *after* (that is, "to the right of") anything in the
573         current query. 'rhs' is not modified during a call to this function.
574 
575         The 'connector' parameter describes how to connect filters from the
576         'rhs' query.
577         """
578         assert self.model == rhs.model, \
579             "Cannot combine queries on two different base models."
580         assert not self.is_sliced, \
581             "Cannot combine queries once a slice has been taken."
582         assert self.distinct == rhs.distinct, \
583             "Cannot combine a unique query with a non-unique query."
584         assert self.distinct_fields == rhs.distinct_fields, \
585             "Cannot combine queries with different distinct fields."
586 
587         # Work out how to relabel the rhs aliases, if necessary.
588         change_map = {}
589         conjunction = (connector == AND)
590 
591         # Determine which existing joins can be reused. When combining the
592         # query with AND we must recreate all joins for m2m filters. When
593         # combining with OR we can reuse joins. The reason is that in AND
594         # case a single row can't fulfill a condition like:
595         #     revrel__col=1 & revrel__col=2
596         # But, there might be two different related rows matching this
597         # condition. In OR case a single True is enough, so single row is
598         # enough, too.
599         #
600         # Note that we will be creating duplicate joins for non-m2m joins in
601         # the AND case. The results will be correct but this creates too many
602         # joins. This is something that could be fixed later on.
603         reuse = set() if conjunction else set(self.alias_map)
604         # Base table must be present in the query - this is the same
605         # table on both sides.
606         self.get_initial_alias()
607         joinpromoter = JoinPromoter(connector, 2, False)
608         joinpromoter.add_votes(
609             j for j in self.alias_map if self.alias_map[j].join_type == INNER)
610         rhs_votes = set()
611         # Now, add the joins from rhs query into the new query (skipping base
612         # table).
613         rhs_tables = list(rhs.alias_map)[1:]
614         for alias in rhs_tables:
615             join = rhs.alias_map[alias]
616             # If the left side of the join was already relabeled, use the
617             # updated alias.
618             join = join.relabeled_clone(change_map)
619             new_alias = self.join(join, reuse=reuse)
620             if join.join_type == INNER:
621                 rhs_votes.add(new_alias)
622             # We can't reuse the same join again in the query. If we have two
623             # distinct joins for the same connection in rhs query, then the
624             # combined query must have two joins, too.
625             reuse.discard(new_alias)
626             if alias != new_alias:
627                 change_map[alias] = new_alias
628             if not rhs.alias_refcount[alias]:
629                 # The alias was unused in the rhs query. Unref it so that it
630                 # will be unused in the new query, too. We have to add and
631                 # unref the alias so that join promotion has information of
632                 # the join type for the unused alias.
633                 self.unref_alias(new_alias)
634         joinpromoter.add_votes(rhs_votes)
635         joinpromoter.update_join_types(self)
636 
637         # Now relabel a copy of the rhs where-clause and add it to the current
638         # one.
639         w = rhs.where.clone()
640         w.relabel_aliases(change_map)
641         self.where.add(w, connector)
642 
643         # Selection columns and extra extensions are those provided by 'rhs'.
644         if rhs.select:
645             self.set_select([col.relabeled_clone(change_map) for col in rhs.select])
646         else:
647             self.select = ()
648 
649         if connector == OR:
650             # It would be nice to be able to handle this, but the queries don't
651             # really make sense (or return consistent value sets). Not worth
652             # the extra complexity when you can write a real query instead.
653             if self.extra and rhs.extra:
654                 raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")
655         self.extra.update(rhs.extra)
656         extra_select_mask = set()
657         if self.extra_select_mask is not None:
658             extra_select_mask.update(self.extra_select_mask)
659         if rhs.extra_select_mask is not None:
660             extra_select_mask.update(rhs.extra_select_mask)
661         if extra_select_mask:
662             self.set_extra_mask(extra_select_mask)
663         self.extra_tables += rhs.extra_tables
664 
665         # Ordering uses the 'rhs' ordering, unless it has none, in which case
666         # the current ordering is used.
667         self.order_by = rhs.order_by or self.order_by
668         self.extra_order_by = rhs.extra_order_by or self.extra_order_by
669 
670     def deferred_to_data(self, target, callback):
671         """
672         Convert the self.deferred_loading data structure to an alternate data
673         structure, describing the field that *will* be loaded. This is used to
674         compute the columns to select from the database and also by the
675         QuerySet class to work out which fields are being initialized on each
676         model. Models that have all their fields included aren't mentioned in
677         the result, only those that have field restrictions in place.
678 
679         The "target" parameter is the instance that is populated (in place).
680         The "callback" is a function that is called whenever a (model, field)
681         pair need to be added to "target". It accepts three parameters:
682         "target", and the model and list of fields being added for that model.
683         """
684         field_names, defer = self.deferred_loading
685         if not field_names:
686             return
687         orig_opts = self.get_meta()
688         seen = {}
689         must_include = {orig_opts.concrete_model: {orig_opts.pk}}
690         for field_name in field_names:
691             parts = field_name.split(LOOKUP_SEP)
692             cur_model = self.model._meta.concrete_model
693             opts = orig_opts
694             for name in parts[:-1]:
695                 old_model = cur_model
696                 if name in self._filtered_relations:
697                     name = self._filtered_relations[name].relation_name
698                 source = opts.get_field(name)
699                 if is_reverse_o2o(source):
700                     cur_model = source.related_model
701                 else:
702                     cur_model = source.remote_field.model
703                 opts = cur_model._meta
704                 # Even if we're "just passing through" this model, we must add
705                 # both the current model's pk and the related reference field
706                 # (if it's not a reverse relation) to the things we select.
707                 if not is_reverse_o2o(source):
708                     must_include[old_model].add(source)
709                 add_to_dict(must_include, cur_model, opts.pk)
710             field = opts.get_field(parts[-1])
711             is_reverse_object = field.auto_created and not field.concrete
712             model = field.related_model if is_reverse_object else field.model
713             model = model._meta.concrete_model
714             if model == opts.model:
715                 model = cur_model
716             if not is_reverse_o2o(field):
717                 add_to_dict(seen, model, field)
718 
719         if defer:
720             # We need to load all fields for each model, except those that
721             # appear in "seen" (for all models that appear in "seen"). The only
722             # slight complexity here is handling fields that exist on parent
723             # models.
724             workset = {}
725             for model, values in seen.items():
726                 for field in model._meta.local_fields:
727                     if field not in values:
728                         m = field.model._meta.concrete_model
729                         add_to_dict(workset, m, field)
730             for model, values in must_include.items():
731                 # If we haven't included a model in workset, we don't add the
732                 # corresponding must_include fields for that model, since an
733                 # empty set means "include all fields". That's why there's no
734                 # "else" branch here.
735                 if model in workset:
736                     workset[model].update(values)
737             for model, values in workset.items():
738                 callback(target, model, values)
739         else:
740             for model, values in must_include.items():
741                 if model in seen:
742                     seen[model].update(values)
743                 else:
744                     # As we've passed through this model, but not explicitly
745                     # included any fields, we have to make sure it's mentioned
746                     # so that only the "must include" fields are pulled in.
747                     seen[model] = values
748             # Now ensure that every model in the inheritance chain is mentioned
749             # in the parent list. Again, it must be mentioned to ensure that
750             # only "must include" fields are pulled in.
751             for model in orig_opts.get_parent_list():
752                 seen.setdefault(model, set())
753             for model, values in seen.items():
754                 callback(target, model, values)
755 
756     def table_alias(self, table_name, create=False, filtered_relation=None):
757         """
758         Return a table alias for the given table_name and whether this is a
759         new alias or not.
760 
761         If 'create' is true, a new alias is always created. Otherwise, the
762         most recently created alias for the table (if one exists) is reused.
763         """
764         alias_list = self.table_map.get(table_name)
765         if not create and alias_list:
766             alias = alias_list[0]
767             self.alias_refcount[alias] += 1
768             return alias, False
769 
770         # Create a new alias for this table.
771         if alias_list:
772             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
773             alias_list.append(alias)
774         else:
775             # The first occurrence of a table uses the table name directly.
776             alias = filtered_relation.alias if filtered_relation is not None else table_name
777             self.table_map[table_name] = [alias]
778         self.alias_refcount[alias] = 1
779         return alias, True
780 
781     def ref_alias(self, alias):
782         """Increases the reference count for this alias."""
783         self.alias_refcount[alias] += 1
784 
785     def unref_alias(self, alias, amount=1):
786         """Decreases the reference count for this alias."""
787         self.alias_refcount[alias] -= amount
788 
789     def promote_joins(self, aliases):
790         """
791         Promote recursively the join type of given aliases and its children to
792         an outer join. If 'unconditional' is False, only promote the join if
793         it is nullable or the parent join is an outer join.
794 
795         The children promotion is done to avoid join chains that contain a LOUTER
796         b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,
797         then we must also promote b->c automatically, or otherwise the promotion
798         of a->b doesn't actually change anything in the query results.
799         """
800         aliases = list(aliases)
801         while aliases:
802             alias = aliases.pop(0)
803             if self.alias_map[alias].join_type is None:
804                 # This is the base table (first FROM entry) - this table
805                 # isn't really joined at all in the query, so we should not
806                 # alter its join type.
807                 continue
808             # Only the first alias (skipped above) should have None join_type
809             assert self.alias_map[alias].join_type is not None
810             parent_alias = self.alias_map[alias].parent_alias
811             parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER
812             already_louter = self.alias_map[alias].join_type == LOUTER
813             if ((self.alias_map[alias].nullable or parent_louter) and
814                     not already_louter):
815                 self.alias_map[alias] = self.alias_map[alias].promote()
816                 # Join type of 'alias' changed, so re-examine all aliases that
817                 # refer to this one.
818                 aliases.extend(
819                     join for join in self.alias_map
820                     if self.alias_map[join].parent_alias == alias and join not in aliases
821                 )
822 
823     def demote_joins(self, aliases):
824         """
825         Change join type from LOUTER to INNER for all joins in aliases.
826 
827         Similarly to promote_joins(), this method must ensure no join chains
828         containing first an outer, then an inner join are generated. If we
829         are demoting b->c join in chain a LOUTER b LOUTER c then we must
830         demote a->b automatically, or otherwise the demotion of b->c doesn't
831         actually change anything in the query results. .
832         """
833         aliases = list(aliases)
834         while aliases:
835             alias = aliases.pop(0)
836             if self.alias_map[alias].join_type == LOUTER:
837                 self.alias_map[alias] = self.alias_map[alias].demote()
838                 parent_alias = self.alias_map[alias].parent_alias
839                 if self.alias_map[parent_alias].join_type == INNER:
840                     aliases.append(parent_alias)
841 
842     def reset_refcounts(self, to_counts):
843         """
844         Reset reference counts for aliases so that they match the value passed
845         in `to_counts`.
846         """
847         for alias, cur_refcount in self.alias_refcount.copy().items():
848             unref_amount = cur_refcount - to_counts.get(alias, 0)
849             self.unref_alias(alias, unref_amount)
850 
851     def change_aliases(self, change_map):
852         """
853         Change the aliases in change_map (which maps old-alias -> new-alias),
854         relabelling any references to them in select columns and the where
855         clause.
856         """
857         assert set(change_map).isdisjoint(change_map.values())
858 
859         # 1. Update references in "select" (normal columns plus aliases),
860         # "group by" and "where".
861         self.where.relabel_aliases(change_map)
862         if isinstance(self.group_by, tuple):
863             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])
864         self.select = tuple([col.relabeled_clone(change_map) for col in self.select])
865         self.annotations = self.annotations and {
866             key: col.relabeled_clone(change_map) for key, col in self.annotations.items()
867         }
868 
869         # 2. Rename the alias in the internal table/alias datastructures.
870         for old_alias, new_alias in change_map.items():
871             if old_alias not in self.alias_map:
872                 continue
873             alias_data = self.alias_map[old_alias].relabeled_clone(change_map)
874             self.alias_map[new_alias] = alias_data
875             self.alias_refcount[new_alias] = self.alias_refcount[old_alias]
876             del self.alias_refcount[old_alias]
877             del self.alias_map[old_alias]
878 
879             table_aliases = self.table_map[alias_data.table_name]
880             for pos, alias in enumerate(table_aliases):
881                 if alias == old_alias:
882                     table_aliases[pos] = new_alias
883                     break
884         self.external_aliases = {
885             # Table is aliased or it's being changed and thus is aliased.
886             change_map.get(alias, alias): (aliased or alias in change_map)
887             for alias, aliased in self.external_aliases.items()
888         }
889 
890     def bump_prefix(self, outer_query):
891         """
892         Change the alias prefix to the next letter in the alphabet in a way
893         that the outer query's aliases and this query's aliases will not
894         conflict. Even tables that previously had no alias will get an alias
895         after this call.
896         """
897         def prefix_gen():
898             """
899             Generate a sequence of characters in alphabetical order:
900                 -> 'A', 'B', 'C', ...
901 
902             When the alphabet is finished, the sequence will continue with the
903             Cartesian product:
904                 -> 'AA', 'AB', 'AC', ...
905             """
906             alphabet = ascii_uppercase
907             prefix = chr(ord(self.alias_prefix) + 1)
908             yield prefix
909             for n in count(1):
910                 seq = alphabet[alphabet.index(prefix):] if prefix else alphabet
911                 for s in product(seq, repeat=n):
912                     yield ''.join(s)
913                 prefix = None
914 
915         if self.alias_prefix != outer_query.alias_prefix:
916             # No clashes between self and outer query should be possible.
917             return
918 
919         # Explicitly avoid infinite loop. The constant divider is based on how
920         # much depth recursive subquery references add to the stack. This value
921         # might need to be adjusted when adding or removing function calls from
922         # the code path in charge of performing these operations.
923         local_recursion_limit = sys.getrecursionlimit() // 16
924         for pos, prefix in enumerate(prefix_gen()):
925             if prefix not in self.subq_aliases:
926                 self.alias_prefix = prefix
927                 break
928             if pos > local_recursion_limit:
929                 raise RecursionError(
930                     'Maximum recursion depth exceeded: too many subqueries.'
931                 )
932         self.subq_aliases = self.subq_aliases.union([self.alias_prefix])
933         outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)
934         self.change_aliases({
935             alias: '%s%d' % (self.alias_prefix, pos)
936             for pos, alias in enumerate(self.alias_map)
937         })
938 
939     def get_initial_alias(self):
940         """
941         Return the first alias for this query, after increasing its reference
942         count.
943         """
944         if self.alias_map:
945             alias = self.base_table
946             self.ref_alias(alias)
947         else:
948             alias = self.join(BaseTable(self.get_meta().db_table, None))
949         return alias
950 
951     def count_active_tables(self):
952         """
953         Return the number of tables in this query with a non-zero reference
954         count. After execution, the reference counts are zeroed, so tables
955         added in compiler will not be seen by this method.
956         """
957         return len([1 for count in self.alias_refcount.values() if count])
958 
959     def join(self, join, reuse=None, reuse_with_filtered_relation=False):
960         """
961         Return an alias for the 'join', either reusing an existing alias for
962         that join or creating a new one. 'join' is either a
963         sql.datastructures.BaseTable or Join.
964 
965         The 'reuse' parameter can be either None which means all joins are
966         reusable, or it can be a set containing the aliases that can be reused.
967 
968         The 'reuse_with_filtered_relation' parameter is used when computing
969         FilteredRelation instances.
970 
971         A join is always created as LOUTER if the lhs alias is LOUTER to make
972         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new
973         joins are created as LOUTER if the join is nullable.
974         """
975         if reuse_with_filtered_relation and reuse:
976             reuse_aliases = [
977                 a for a, j in self.alias_map.items()
978                 if a in reuse and j.equals(join, with_filtered_relation=False)
979             ]
980         else:
981             reuse_aliases = [
982                 a for a, j in self.alias_map.items()
983                 if (reuse is None or a in reuse) and j == join
984             ]
985         if reuse_aliases:
986             if join.table_alias in reuse_aliases:
987                 reuse_alias = join.table_alias
988             else:
989                 # Reuse the most recent alias of the joined table
990                 # (a many-to-many relation may be joined multiple times).
991                 reuse_alias = reuse_aliases[-1]
992             self.ref_alias(reuse_alias)
993             return reuse_alias
994 
995         # No reuse is possible, so we need a new alias.
996         alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)
997         if join.join_type:
998             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:
999                 join_type = LOUTER
1000             else:
1001                 join_type = INNER
1002             join.join_type = join_type
1003         join.table_alias = alias
1004         self.alias_map[alias] = join
1005         return alias
1006 
1007     def join_parent_model(self, opts, model, alias, seen):
1008         """
1009         Make sure the given 'model' is joined in the query. If 'model' isn't
1010         a parent of 'opts' or if it is None this method is a no-op.
1011 
1012         The 'alias' is the root alias for starting the join, 'seen' is a dict
1013         of model -> alias of existing joins. It must also contain a mapping
1014         of None -> some alias. This will be returned in the no-op case.
1015         """
1016         if model in seen:
1017             return seen[model]
1018         chain = opts.get_base_chain(model)
1019         if not chain:
1020             return alias
1021         curr_opts = opts
1022         for int_model in chain:
1023             if int_model in seen:
1024                 curr_opts = int_model._meta
1025                 alias = seen[int_model]
1026                 continue
1027             # Proxy model have elements in base chain
1028             # with no parents, assign the new options
1029             # object and skip to the next base in that
1030             # case
1031             if not curr_opts.parents[int_model]:
1032                 curr_opts = int_model._meta
1033                 continue
1034             link_field = curr_opts.get_ancestor_link(int_model)
1035             join_info = self.setup_joins([link_field.name], curr_opts, alias)
1036             curr_opts = int_model._meta
1037             alias = seen[int_model] = join_info.joins[-1]
1038         return alias or seen[None]
1039 
1040     def add_annotation(self, annotation, alias, is_summary=False, select=True):
1041         """Add a single annotation expression to the Query."""
1042         annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
1043                                                    summarize=is_summary)
1044         if select:
1045             self.append_annotation_mask([alias])
1046         else:
1047             self.set_annotation_mask(set(self.annotation_select).difference({alias}))
1048         self.annotations[alias] = annotation
1049 
1050     def resolve_expression(self, query, *args, **kwargs):
1051         clone = self.clone()
1052         # Subqueries need to use a different set of aliases than the outer query.
1053         clone.bump_prefix(query)
1054         clone.subquery = True
1055         # It's safe to drop ordering if the queryset isn't using slicing,
1056         # distinct(*fields) or select_for_update().
1057         if (self.low_mark == 0 and self.high_mark is None and
1058                 not self.distinct_fields and
1059                 not self.select_for_update):
1060             clone.clear_ordering(True)
1061         clone.where.resolve_expression(query, *args, **kwargs)
1062         for key, value in clone.annotations.items():
1063             resolved = value.resolve_expression(query, *args, **kwargs)
1064             if hasattr(resolved, 'external_aliases'):
1065                 resolved.external_aliases.update(clone.external_aliases)
1066             clone.annotations[key] = resolved
1067         # Outer query's aliases are considered external.
1068         for alias, table in query.alias_map.items():
1069             clone.external_aliases[alias] = (
1070                 (isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias) or
1071                 (isinstance(table, BaseTable) and table.table_name != table.table_alias)
1072             )
1073         return clone
1074 
1075     def get_external_cols(self):
1076         exprs = chain(self.annotations.values(), self.where.children)
1077         return [
1078             col for col in self._gen_cols(exprs)
1079             if col.alias in self.external_aliases
1080         ]
1081 
1082     def as_sql(self, compiler, connection):
1083         sql, params = self.get_compiler(connection=connection).as_sql()
1084         if self.subquery:
1085             sql = '(%s)' % sql
1086         return sql, params
1087 
1088     def resolve_lookup_value(self, value, can_reuse, allow_joins):
1089         if hasattr(value, 'resolve_expression'):
1090             value = value.resolve_expression(
1091                 self, reuse=can_reuse, allow_joins=allow_joins,
1092             )
1093         elif isinstance(value, (list, tuple)):
1094             # The items of the iterable may be expressions and therefore need
1095             # to be resolved independently.
1096             values = (
1097                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
1098                 for sub_value in value
1099             )
1100             type_ = type(value)
1101             if hasattr(type_, '_make'):  # namedtuple
1102                 return type_(*values)
1103             return type_(values)
1104         return value
1105 
1106     def solve_lookup_type(self, lookup):
1107         """
1108         Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').
1109         """
1110         lookup_splitted = lookup.split(LOOKUP_SEP)
1111         if self.annotations:
1112             expression, expression_lookups = refs_expression(lookup_splitted, self.annotations)
1113             if expression:
1114                 return expression_lookups, (), expression
1115         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
1116         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
1117         if len(lookup_parts) > 1 and not field_parts:
1118             raise FieldError(
1119                 'Invalid lookup "%s" for model %s".' %
1120                 (lookup, self.get_meta().model.__name__)
1121             )
1122         return lookup_parts, field_parts, False
1123 
1124     def check_query_object_type(self, value, opts, field):
1125         """
1126         Check whether the object passed while querying is of the correct type.
1127         If not, raise a ValueError specifying the wrong object.
1128         """
1129         if hasattr(value, '_meta'):
1130             if not check_rel_lookup_compatibility(value._meta.model, opts, field):
1131                 raise ValueError(
1132                     'Cannot query "%s": Must be "%s" instance.' %
1133                     (value, opts.object_name))
1134 
1135     def check_related_objects(self, field, value, opts):
1136         """Check the type of object passed to query relations."""
1137         if field.is_relation:
1138             # Check that the field and the queryset use the same model in a
1139             # query like .filter(author=Author.objects.all()). For example, the
1140             # opts would be Author's (from the author field) and value.model
1141             # would be Author.objects.all() queryset's .model (Author also).
1142             # The field is the related field on the lhs side.
1143             if (isinstance(value, Query) and not value.has_select_fields and
1144                     not check_rel_lookup_compatibility(value.model, opts, field)):
1145                 raise ValueError(
1146                     'Cannot use QuerySet for "%s": Use a QuerySet for "%s".' %
1147                     (value.model._meta.object_name, opts.object_name)
1148                 )
1149             elif hasattr(value, '_meta'):
1150                 self.check_query_object_type(value, opts, field)
1151             elif hasattr(value, '__iter__'):
1152                 for v in value:
1153                     self.check_query_object_type(v, opts, field)
1154 
1155     def check_filterable(self, expression):
1156         """Raise an error if expression cannot be used in a WHERE clause."""
1157         if (
1158             hasattr(expression, 'resolve_expression') and
1159             not getattr(expression, 'filterable', True)
1160         ):
1161             raise NotSupportedError(
1162                 expression.__class__.__name__ + ' is disallowed in the filter '
1163                 'clause.'
1164             )
1165         if hasattr(expression, 'get_source_expressions'):
1166             for expr in expression.get_source_expressions():
1167                 self.check_filterable(expr)
1168 
1169     def build_lookup(self, lookups, lhs, rhs):
1170         """
1171         Try to extract transforms and lookup from given lhs.
1172 
1173         The lhs value is something that works like SQLExpression.
1174         The rhs value is what the lookup is going to compare against.
1175         The lookups is a list of names to extract using get_lookup()
1176         and get_transform().
1177         """
1178         # __exact is the default lookup if one isn't given.
1179         *transforms, lookup_name = lookups or ['exact']
1180         for name in transforms:
1181             lhs = self.try_transform(lhs, name)
1182         # First try get_lookup() so that the lookup takes precedence if the lhs
1183         # supports both transform and lookup for the name.
1184         lookup_class = lhs.get_lookup(lookup_name)
1185         if not lookup_class:
1186             if lhs.field.is_relation:
1187                 raise FieldError('Related Field got invalid lookup: {}'.format(lookup_name))
1188             # A lookup wasn't found. Try to interpret the name as a transform
1189             # and do an Exact lookup against it.
1190             lhs = self.try_transform(lhs, lookup_name)
1191             lookup_name = 'exact'
1192             lookup_class = lhs.get_lookup(lookup_name)
1193             if not lookup_class:
1194                 return
1195 
1196         lookup = lookup_class(lhs, rhs)
1197         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all
1198         # uses of None as a query value unless the lookup supports it.
1199         if lookup.rhs is None and not lookup.can_use_none_as_rhs:
1200             if lookup_name not in ('exact', 'iexact'):
1201                 raise ValueError("Cannot use None as a query value")
1202             return lhs.get_lookup('isnull')(lhs, True)
1203 
1204         # For Oracle '' is equivalent to null. The check must be done at this
1205         # stage because join promotion can't be done in the compiler. Using
1206         # DEFAULT_DB_ALIAS isn't nice but it's the best that can be done here.
1207         # A similar thing is done in is_nullable(), too.
1208         if (connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
1209                 lookup_name == 'exact' and lookup.rhs == ''):
1210             return lhs.get_lookup('isnull')(lhs, True)
1211 
1212         return lookup
1213 
1214     def try_transform(self, lhs, name):
1215         """
1216         Helper method for build_lookup(). Try to fetch and initialize
1217         a transform for name parameter from lhs.
1218         """
1219         transform_class = lhs.get_transform(name)
1220         if transform_class:
1221             return transform_class(lhs)
1222         else:
1223             output_field = lhs.output_field.__class__
1224             suggested_lookups = difflib.get_close_matches(name, output_field.get_lookups())
1225             if suggested_lookups:
1226                 suggestion = ', perhaps you meant %s?' % ' or '.join(suggested_lookups)
1227             else:
1228                 suggestion = '.'
1229             raise FieldError(
1230                 "Unsupported lookup '%s' for %s or join on the field not "
1231                 "permitted%s" % (name, output_field.__name__, suggestion)
1232             )
1233 
1234     def build_filter(self, filter_expr, branch_negated=False, current_negated=False,
1235                      can_reuse=None, allow_joins=True, split_subq=True,
1236                      reuse_with_filtered_relation=False, check_filterable=True):
1237         """
1238         Build a WhereNode for a single filter clause but don't add it
1239         to this Query. Query.add_q() will then add this filter to the where
1240         Node.
1241 
1242         The 'branch_negated' tells us if the current branch contains any
1243         negations. This will be used to determine if subqueries are needed.
1244 
1245         The 'current_negated' is used to determine if the current filter is
1246         negated or not and this will be used to determine if IS NULL filtering
1247         is needed.
1248 
1249         The difference between current_negated and branch_negated is that
1250         branch_negated is set on first negation, but current_negated is
1251         flipped for each negation.
1252 
1253         Note that add_filter will not do any negating itself, that is done
1254         upper in the code by add_q().
1255 
1256         The 'can_reuse' is a set of reusable joins for multijoins.
1257 
1258         If 'reuse_with_filtered_relation' is True, then only joins in can_reuse
1259         will be reused.
1260 
1261         The method will create a filter clause that can be added to the current
1262         query. However, if the filter isn't added to the query then the caller
1263         is responsible for unreffing the joins used.
1264         """
1265         if isinstance(filter_expr, dict):
1266             raise FieldError("Cannot parse keyword query as dict")
1267         if isinstance(filter_expr, Q):
1268             return self._add_q(
1269                 filter_expr,
1270                 branch_negated=branch_negated,
1271                 current_negated=current_negated,
1272                 used_aliases=can_reuse,
1273                 allow_joins=allow_joins,
1274                 split_subq=split_subq,
1275                 check_filterable=check_filterable,
1276             )
1277         if hasattr(filter_expr, 'resolve_expression'):
1278             if not getattr(filter_expr, 'conditional', False):
1279                 raise TypeError('Cannot filter against a non-conditional expression.')
1280             condition = self.build_lookup(
1281                 ['exact'], filter_expr.resolve_expression(self, allow_joins=allow_joins), True
1282             )
1283             clause = self.where_class()
1284             clause.add(condition, AND)
1285             return clause, []
1286         arg, value = filter_expr
1287         if not arg:
1288             raise FieldError("Cannot parse keyword query %r" % arg)
1289         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
1290 
1291         if check_filterable:
1292             self.check_filterable(reffed_expression)
1293 
1294         if not allow_joins and len(parts) > 1:
1295             raise FieldError("Joined field references are not permitted in this query")
1296 
1297         pre_joins = self.alias_refcount.copy()
1298         value = self.resolve_lookup_value(value, can_reuse, allow_joins)
1299         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}
1300 
1301         if check_filterable:
1302             self.check_filterable(value)
1303 
1304         clause = self.where_class()
1305         if reffed_expression:
1306             condition = self.build_lookup(lookups, reffed_expression, value)
1307             clause.add(condition, AND)
1308             return clause, []
1309 
1310         opts = self.get_meta()
1311         alias = self.get_initial_alias()
1312         allow_many = not branch_negated or not split_subq
1313 
1314         try:
1315             join_info = self.setup_joins(
1316                 parts, opts, alias, can_reuse=can_reuse, allow_many=allow_many,
1317                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1318             )
1319 
1320             # Prevent iterator from being consumed by check_related_objects()
1321             if isinstance(value, Iterator):
1322                 value = list(value)
1323             self.check_related_objects(join_info.final_field, value, join_info.opts)
1324 
1325             # split_exclude() needs to know which joins were generated for the
1326             # lookup parts
1327             self._lookup_joins = join_info.joins
1328         except MultiJoin as e:
1329             return self.split_exclude(filter_expr, can_reuse, e.names_with_path)
1330 
1331         # Update used_joins before trimming since they are reused to determine
1332         # which joins could be later promoted to INNER.
1333         used_joins.update(join_info.joins)
1334         targets, alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1335         if can_reuse is not None:
1336             can_reuse.update(join_list)
1337 
1338         if join_info.final_field.is_relation:
1339             # No support for transforms for relational fields
1340             num_lookups = len(lookups)
1341             if num_lookups > 1:
1342                 raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))
1343             if len(targets) == 1:
1344                 col = self._get_col(targets[0], join_info.final_field, alias)
1345             else:
1346                 col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)
1347         else:
1348             col = self._get_col(targets[0], join_info.final_field, alias)
1349 
1350         condition = self.build_lookup(lookups, col, value)
1351         lookup_type = condition.lookup_name
1352         clause.add(condition, AND)
1353 
1354         require_outer = lookup_type == 'isnull' and condition.rhs is True and not current_negated
1355         if current_negated and (lookup_type != 'isnull' or condition.rhs is False) and condition.rhs is not None:
1356             require_outer = True
1357             if lookup_type != 'isnull':
1358                 # The condition added here will be SQL like this:
1359                 # NOT (col IS NOT NULL), where the first NOT is added in
1360                 # upper layers of code. The reason for addition is that if col
1361                 # is null, then col != someval will result in SQL "unknown"
1362                 # which isn't the same as in Python. The Python None handling
1363                 # is wanted, and it can be gotten by
1364                 # (col IS NULL OR col != someval)
1365                 #   <=>
1366                 # NOT (col IS NOT NULL AND col = someval).
1367                 if (
1368                     self.is_nullable(targets[0]) or
1369                     self.alias_map[join_list[-1]].join_type == LOUTER
1370                 ):
1371                     lookup_class = targets[0].get_lookup('isnull')
1372                     col = self._get_col(targets[0], join_info.targets[0], alias)
1373                     clause.add(lookup_class(col, False), AND)
1374                 # If someval is a nullable column, someval IS NOT NULL is
1375                 # added.
1376                 if isinstance(value, Col) and self.is_nullable(value.target):
1377                     lookup_class = value.target.get_lookup('isnull')
1378                     clause.add(lookup_class(value, False), AND)
1379         return clause, used_joins if not require_outer else ()
1380 
1381     def add_filter(self, filter_clause):
1382         self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))
1383 
1384     def add_q(self, q_object):
1385         """
1386         A preprocessor for the internal _add_q(). Responsible for doing final
1387         join promotion.
1388         """
1389         # For join promotion this case is doing an AND for the added q_object
1390         # and existing conditions. So, any existing inner join forces the join
1391         # type to remain inner. Existing outer joins can however be demoted.
1392         # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if
1393         # rel_a doesn't produce any rows, then the whole condition must fail.
1394         # So, demotion is OK.
1395         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}
1396         clause, _ = self._add_q(q_object, self.used_aliases)
1397         if clause:
1398             self.where.add(clause, AND)
1399         self.demote_joins(existing_inner)
1400 
1401     def build_where(self, filter_expr):
1402         return self.build_filter(filter_expr, allow_joins=False)[0]
1403 
1404     def _add_q(self, q_object, used_aliases, branch_negated=False,
1405                current_negated=False, allow_joins=True, split_subq=True,
1406                check_filterable=True):
1407         """Add a Q-object to the current filter."""
1408         connector = q_object.connector
1409         current_negated = current_negated ^ q_object.negated
1410         branch_negated = branch_negated or q_object.negated
1411         target_clause = self.where_class(connector=connector,
1412                                          negated=q_object.negated)
1413         joinpromoter = JoinPromoter(q_object.connector, len(q_object.children), current_negated)
1414         for child in q_object.children:
1415             child_clause, needed_inner = self.build_filter(
1416                 child, can_reuse=used_aliases, branch_negated=branch_negated,
1417                 current_negated=current_negated, allow_joins=allow_joins,
1418                 split_subq=split_subq, check_filterable=check_filterable,
1419             )
1420             joinpromoter.add_votes(needed_inner)
1421             if child_clause:
1422                 target_clause.add(child_clause, connector)
1423         needed_inner = joinpromoter.update_join_types(self)
1424         return target_clause, needed_inner
1425 
1426     def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
1427         """Add a FilteredRelation object to the current filter."""
1428         connector = q_object.connector
1429         current_negated ^= q_object.negated
1430         branch_negated = branch_negated or q_object.negated
1431         target_clause = self.where_class(connector=connector, negated=q_object.negated)
1432         for child in q_object.children:
1433             if isinstance(child, Node):
1434                 child_clause = self.build_filtered_relation_q(
1435                     child, reuse=reuse, branch_negated=branch_negated,
1436                     current_negated=current_negated,
1437                 )
1438             else:
1439                 child_clause, _ = self.build_filter(
1440                     child, can_reuse=reuse, branch_negated=branch_negated,
1441                     current_negated=current_negated,
1442                     allow_joins=True, split_subq=False,
1443                     reuse_with_filtered_relation=True,
1444                 )
1445             target_clause.add(child_clause, connector)
1446         return target_clause
1447 
1448     def add_filtered_relation(self, filtered_relation, alias):
1449         filtered_relation.alias = alias
1450         lookups = dict(get_children_from_q(filtered_relation.condition))
1451         relation_lookup_parts, relation_field_parts, _ = self.solve_lookup_type(filtered_relation.relation_name)
1452         if relation_lookup_parts:
1453             raise ValueError(
1454                 "FilteredRelation's relation_name cannot contain lookups "
1455                 "(got %r)." % filtered_relation.relation_name
1456             )
1457         for lookup in chain(lookups):
1458             lookup_parts, lookup_field_parts, _ = self.solve_lookup_type(lookup)
1459             shift = 2 if not lookup_parts else 1
1460             lookup_field_path = lookup_field_parts[:-shift]
1461             for idx, lookup_field_part in enumerate(lookup_field_path):
1462                 if len(relation_field_parts) > idx:
1463                     if relation_field_parts[idx] != lookup_field_part:
1464                         raise ValueError(
1465                             "FilteredRelation's condition doesn't support "
1466                             "relations outside the %r (got %r)."
1467                             % (filtered_relation.relation_name, lookup)
1468                         )
1469                 else:
1470                     raise ValueError(
1471                         "FilteredRelation's condition doesn't support nested "
1472                         "relations deeper than the relation_name (got %r for "
1473                         "%r)." % (lookup, filtered_relation.relation_name)
1474                     )
1475         self._filtered_relations[filtered_relation.alias] = filtered_relation
1476 
1477     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
1478         """
1479         Walk the list of names and turns them into PathInfo tuples. A single
1480         name in 'names' can generate multiple PathInfos (m2m, for example).
1481 
1482         'names' is the path of names to travel, 'opts' is the model Options we
1483         start the name resolving from, 'allow_many' is as for setup_joins().
1484         If fail_on_missing is set to True, then a name that can't be resolved
1485         will generate a FieldError.
1486 
1487         Return a list of PathInfo tuples. In addition return the final field
1488         (the last used join field) and target (which is a field guaranteed to
1489         contain the same value as the final field). Finally, return those names
1490         that weren't found (which are likely transforms and the final lookup).
1491         """
1492         path, names_with_path = [], []
1493         for pos, name in enumerate(names):
1494             cur_names_with_path = (name, [])
1495             if name == 'pk':
1496                 name = opts.pk.name
1497 
1498             field = None
1499             filtered_relation = None
1500             try:
1501                 field = opts.get_field(name)
1502             except FieldDoesNotExist:
1503                 if name in self.annotation_select:
1504                     field = self.annotation_select[name].output_field
1505                 elif name in self._filtered_relations and pos == 0:
1506                     filtered_relation = self._filtered_relations[name]
1507                     if LOOKUP_SEP in filtered_relation.relation_name:
1508                         parts = filtered_relation.relation_name.split(LOOKUP_SEP)
1509                         filtered_relation_path, field, _, _ = self.names_to_path(
1510                             parts, opts, allow_many, fail_on_missing,
1511                         )
1512                         path.extend(filtered_relation_path[:-1])
1513                     else:
1514                         field = opts.get_field(filtered_relation.relation_name)
1515             if field is not None:
1516                 # Fields that contain one-to-many relations with a generic
1517                 # model (like a GenericForeignKey) cannot generate reverse
1518                 # relations and therefore cannot be used for reverse querying.
1519                 if field.is_relation and not field.related_model:
1520                     raise FieldError(
1521                         "Field %r does not generate an automatic reverse "
1522                         "relation and therefore cannot be used for reverse "
1523                         "querying. If it is a GenericForeignKey, consider "
1524                         "adding a GenericRelation." % name
1525                     )
1526                 try:
1527                     model = field.model._meta.concrete_model
1528                 except AttributeError:
1529                     # QuerySet.annotate() may introduce fields that aren't
1530                     # attached to a model.
1531                     model = None
1532             else:
1533                 # We didn't find the current field, so move position back
1534                 # one step.
1535                 pos -= 1
1536                 if pos == -1 or fail_on_missing:
1537                     available = sorted([
1538                         *get_field_names_from_opts(opts),
1539                         *self.annotation_select,
1540                         *self._filtered_relations,
1541                     ])
1542                     raise FieldError("Cannot resolve keyword '%s' into field. "
1543                                      "Choices are: %s" % (name, ", ".join(available)))
1544                 break
1545             # Check if we need any joins for concrete inheritance cases (the
1546             # field lives in parent, but we are currently in one of its
1547             # children)
1548             if model is not opts.model:
1549                 path_to_parent = opts.get_path_to_parent(model)
1550                 if path_to_parent:
1551                     path.extend(path_to_parent)
1552                     cur_names_with_path[1].extend(path_to_parent)
1553                     opts = path_to_parent[-1].to_opts
1554             if hasattr(field, 'get_path_info'):
1555                 pathinfos = field.get_path_info(filtered_relation)
1556                 if not allow_many:
1557                     for inner_pos, p in enumerate(pathinfos):
1558                         if p.m2m:
1559                             cur_names_with_path[1].extend(pathinfos[0:inner_pos + 1])
1560                             names_with_path.append(cur_names_with_path)
1561                             raise MultiJoin(pos + 1, names_with_path)
1562                 last = pathinfos[-1]
1563                 path.extend(pathinfos)
1564                 final_field = last.join_field
1565                 opts = last.to_opts
1566                 targets = last.target_fields
1567                 cur_names_with_path[1].extend(pathinfos)
1568                 names_with_path.append(cur_names_with_path)
1569             else:
1570                 # Local non-relational field.
1571                 final_field = field
1572                 targets = (field,)
1573                 if fail_on_missing and pos + 1 != len(names):
1574                     raise FieldError(
1575                         "Cannot resolve keyword %r into field. Join on '%s'"
1576                         " not permitted." % (names[pos + 1], name))
1577                 break
1578         return path, final_field, targets, names[pos + 1:]
1579 
1580     def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True,
1581                     reuse_with_filtered_relation=False):
1582         """
1583         Compute the necessary table joins for the passage through the fields
1584         given in 'names'. 'opts' is the Options class for the current model
1585         (which gives the table we are starting from), 'alias' is the alias for
1586         the table to start the joining from.
1587 
1588         The 'can_reuse' defines the reverse foreign key joins we can reuse. It
1589         can be None in which case all joins are reusable or a set of aliases
1590         that can be reused. Note that non-reverse foreign keys are always
1591         reusable when using setup_joins().
1592 
1593         The 'reuse_with_filtered_relation' can be used to force 'can_reuse'
1594         parameter and force the relation on the given connections.
1595 
1596         If 'allow_many' is False, then any reverse foreign key seen will
1597         generate a MultiJoin exception.
1598 
1599         Return the final field involved in the joins, the target field (used
1600         for any 'where' constraint), the final 'opts' value, the joins, the
1601         field path traveled to generate the joins, and a transform function
1602         that takes a field and alias and is equivalent to `field.get_col(alias)`
1603         in the simple case but wraps field transforms if they were included in
1604         names.
1605 
1606         The target field is the field containing the concrete value. Final
1607         field can be something different, for example foreign key pointing to
1608         that value. Final field is needed for example in some value
1609         conversions (convert 'obj' in fk__id=obj to pk val using the foreign
1610         key field for example).
1611         """
1612         joins = [alias]
1613         # The transform can't be applied yet, as joins must be trimmed later.
1614         # To avoid making every caller of this method look up transforms
1615         # directly, compute transforms here and create a partial that converts
1616         # fields to the appropriate wrapped version.
1617 
1618         def final_transformer(field, alias):
1619             if not self.alias_cols:
1620                 alias = None
1621             return field.get_col(alias)
1622 
1623         # Try resolving all the names as fields first. If there's an error,
1624         # treat trailing names as lookups until a field can be resolved.
1625         last_field_exception = None
1626         for pivot in range(len(names), 0, -1):
1627             try:
1628                 path, final_field, targets, rest = self.names_to_path(
1629                     names[:pivot], opts, allow_many, fail_on_missing=True,
1630                 )
1631             except FieldError as exc:
1632                 if pivot == 1:
1633                     # The first item cannot be a lookup, so it's safe
1634                     # to raise the field error here.
1635                     raise
1636                 else:
1637                     last_field_exception = exc
1638             else:
1639                 # The transforms are the remaining items that couldn't be
1640                 # resolved into fields.
1641                 transforms = names[pivot:]
1642                 break
1643         for name in transforms:
1644             def transform(field, alias, *, name, previous):
1645                 try:
1646                     wrapped = previous(field, alias)
1647                     return self.try_transform(wrapped, name)
1648                 except FieldError:
1649                     # FieldError is raised if the transform doesn't exist.
1650                     if isinstance(final_field, Field) and last_field_exception:
1651                         raise last_field_exception
1652                     else:
1653                         raise
1654             final_transformer = functools.partial(transform, name=name, previous=final_transformer)
1655         # Then, add the path to the query's joins. Note that we can't trim
1656         # joins at this stage - we will need the information about join type
1657         # of the trimmed joins.
1658         for join in path:
1659             if join.filtered_relation:
1660                 filtered_relation = join.filtered_relation.clone()
1661                 table_alias = filtered_relation.alias
1662             else:
1663                 filtered_relation = None
1664                 table_alias = None
1665             opts = join.to_opts
1666             if join.direct:
1667                 nullable = self.is_nullable(join.join_field)
1668             else:
1669                 nullable = True
1670             connection = Join(
1671                 opts.db_table, alias, table_alias, INNER, join.join_field,
1672                 nullable, filtered_relation=filtered_relation,
1673             )
1674             reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None
1675             alias = self.join(
1676                 connection, reuse=reuse,
1677                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1678             )
1679             joins.append(alias)
1680             if filtered_relation:
1681                 filtered_relation.path = joins[:]
1682         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)
1683 
1684     def trim_joins(self, targets, joins, path):
1685         """
1686         The 'target' parameter is the final field being joined to, 'joins'
1687         is the full list of join aliases. The 'path' contain the PathInfos
1688         used to create the joins.
1689 
1690         Return the final target field and table alias and the new active
1691         joins.
1692 
1693         Always trim any direct join if the target column is already in the
1694         previous table. Can't trim reverse joins as it's unknown if there's
1695         anything on the other side of the join.
1696         """
1697         joins = joins[:]
1698         for pos, info in enumerate(reversed(path)):
1699             if len(joins) == 1 or not info.direct:
1700                 break
1701             if info.filtered_relation:
1702                 break
1703             join_targets = {t.column for t in info.join_field.foreign_related_fields}
1704             cur_targets = {t.column for t in targets}
1705             if not cur_targets.issubset(join_targets):
1706                 break
1707             targets_dict = {r[1].column: r[0] for r in info.join_field.related_fields if r[1].column in cur_targets}
1708             targets = tuple(targets_dict[t.column] for t in targets)
1709             self.unref_alias(joins.pop())
1710         return targets, joins[-1], joins
1711 
1712     @classmethod
1713     def _gen_cols(cls, exprs):
1714         for expr in exprs:
1715             if isinstance(expr, Col):
1716                 yield expr
1717             else:
1718                 yield from cls._gen_cols(expr.get_source_expressions())
1719 
1720     @classmethod
1721     def _gen_col_aliases(cls, exprs):
1722         yield from (expr.alias for expr in cls._gen_cols(exprs))
1723 
1724     def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False):
1725         annotation = self.annotations.get(name)
1726         if annotation is not None:
1727             if not allow_joins:
1728                 for alias in self._gen_col_aliases([annotation]):
1729                     if isinstance(self.alias_map[alias], Join):
1730                         raise FieldError(
1731                             'Joined field references are not permitted in '
1732                             'this query'
1733                         )
1734             if summarize:
1735                 # Summarize currently means we are doing an aggregate() query
1736                 # which is executed as a wrapped subquery if any of the
1737                 # aggregate() elements reference an existing annotation. In
1738                 # that case we need to return a Ref to the subquery's annotation.
1739                 if name not in self.annotation_select:
1740                     raise FieldError(
1741                         "Cannot aggregate over the '%s' alias. Use annotate() "
1742                         "to promote it." % name
1743                     )
1744                 return Ref(name, self.annotation_select[name])
1745             else:
1746                 return annotation
1747         else:
1748             field_list = name.split(LOOKUP_SEP)
1749             annotation = self.annotations.get(field_list[0])
1750             if annotation is not None:
1751                 for transform in field_list[1:]:
1752                     annotation = self.try_transform(annotation, transform)
1753                 return annotation
1754             join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)
1755             targets, final_alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1756             if not allow_joins and len(join_list) > 1:
1757                 raise FieldError('Joined field references are not permitted in this query')
1758             if len(targets) > 1:
1759                 raise FieldError("Referencing multicolumn fields with F() objects "
1760                                  "isn't supported")
1761             # Verify that the last lookup in name is a field or a transform:
1762             # transform_function() raises FieldError if not.
1763             transform = join_info.transform_function(targets[0], final_alias)
1764             if reuse is not None:
1765                 reuse.update(join_list)
1766             return transform
1767 
1768     def split_exclude(self, filter_expr, can_reuse, names_with_path):
1769         """
1770         When doing an exclude against any kind of N-to-many relation, we need
1771         to use a subquery. This method constructs the nested query, given the
1772         original exclude filter (filter_expr) and the portion up to the first
1773         N-to-many relation field.
1774 
1775         For example, if the origin filter is ~Q(child__name='foo'), filter_expr
1776         is ('child__name', 'foo') and can_reuse is a set of joins usable for
1777         filters in the original query.
1778 
1779         We will turn this into equivalent of:
1780             WHERE NOT EXISTS(
1781                 SELECT 1
1782                 FROM child
1783                 WHERE name = 'foo' AND child.parent_id = parent.id
1784                 LIMIT 1
1785             )
1786         """
1787         filter_lhs, filter_rhs = filter_expr
1788         if isinstance(filter_rhs, OuterRef):
1789             filter_expr = (filter_lhs, OuterRef(filter_rhs))
1790         elif isinstance(filter_rhs, F):
1791             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
1792         # Generate the inner query.
1793         query = Query(self.model)
1794         query._filtered_relations = self._filtered_relations
1795         query.add_filter(filter_expr)
1796         query.clear_ordering(True)
1797         # Try to have as simple as possible subquery -> trim leading joins from
1798         # the subquery.
1799         trimmed_prefix, contains_louter = query.trim_start(names_with_path)
1800 
1801         col = query.select[0]
1802         select_field = col.target
1803         alias = col.alias
1804         if alias in can_reuse:
1805             pk = select_field.model._meta.pk
1806             # Need to add a restriction so that outer query's filters are in effect for
1807             # the subquery, too.
1808             query.bump_prefix(self)
1809             lookup_class = select_field.get_lookup('exact')
1810             # Note that the query.select[0].alias is different from alias
1811             # due to bump_prefix above.
1812             lookup = lookup_class(pk.get_col(query.select[0].alias),
1813                                   pk.get_col(alias))
1814             query.where.add(lookup, AND)
1815             query.external_aliases[alias] = True
1816 
1817         lookup_class = select_field.get_lookup('exact')
1818         lookup = lookup_class(col, ResolvedOuterRef(trimmed_prefix))
1819         query.where.add(lookup, AND)
1820         condition, needed_inner = self.build_filter(Exists(query))
1821 
1822         if contains_louter:
1823             or_null_condition, _ = self.build_filter(
1824                 ('%s__isnull' % trimmed_prefix, True),
1825                 current_negated=True, branch_negated=True, can_reuse=can_reuse)
1826             condition.add(or_null_condition, OR)
1827             # Note that the end result will be:
1828             # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.
1829             # This might look crazy but due to how IN works, this seems to be
1830             # correct. If the IS NOT NULL check is removed then outercol NOT
1831             # IN will return UNKNOWN. If the IS NULL check is removed, then if
1832             # outercol IS NULL we will not match the row.
1833         return condition, needed_inner
1834 
1835     def set_empty(self):
1836         self.where.add(NothingNode(), AND)
1837         for query in self.combined_queries:
1838             query.set_empty()
1839 
1840     def is_empty(self):
1841         return any(isinstance(c, NothingNode) for c in self.where.children)
1842 
1843     def set_limits(self, low=None, high=None):
1844         """
1845         Adjust the limits on the rows retrieved. Use low/high to set these,
1846         as it makes it more Pythonic to read and write. When the SQL query is
1847         created, convert them to the appropriate offset and limit values.
1848 
1849         Apply any limits passed in here to the existing constraints. Add low
1850         to the current low value and clamp both to any existing high value.
1851         """
1852         if high is not None:
1853             if self.high_mark is not None:
1854                 self.high_mark = min(self.high_mark, self.low_mark + high)
1855             else:
1856                 self.high_mark = self.low_mark + high
1857         if low is not None:
1858             if self.high_mark is not None:
1859                 self.low_mark = min(self.high_mark, self.low_mark + low)
1860             else:
1861                 self.low_mark = self.low_mark + low
1862 
1863         if self.low_mark == self.high_mark:
1864             self.set_empty()
1865 
1866     def clear_limits(self):
1867         """Clear any existing limits."""
1868         self.low_mark, self.high_mark = 0, None
1869 
1870     @property
1871     def is_sliced(self):
1872         return self.low_mark != 0 or self.high_mark is not None
1873 
1874     def has_limit_one(self):
1875         return self.high_mark is not None and (self.high_mark - self.low_mark) == 1
1876 
1877     def can_filter(self):
1878         """
1879         Return True if adding filters to this instance is still possible.
1880 
1881         Typically, this means no limits or offsets have been put on the results.
1882         """
1883         return not self.is_sliced
1884 
1885     def clear_select_clause(self):
1886         """Remove all fields from SELECT clause."""
1887         self.select = ()
1888         self.default_cols = False
1889         self.select_related = False
1890         self.set_extra_mask(())
1891         self.set_annotation_mask(())
1892 
1893     def clear_select_fields(self):
1894         """
1895         Clear the list of fields to select (but not extra_select columns).
1896         Some queryset types completely replace any existing list of select
1897         columns.
1898         """
1899         self.select = ()
1900         self.values_select = ()
1901 
1902     def add_select_col(self, col, name):
1903         self.select += col,
1904         self.values_select += name,
1905 
1906     def set_select(self, cols):
1907         self.default_cols = False
1908         self.select = tuple(cols)
1909 
1910     def add_distinct_fields(self, *field_names):
1911         """
1912         Add and resolve the given fields to the query's "distinct on" clause.
1913         """
1914         self.distinct_fields = field_names
1915         self.distinct = True
1916 
1917     def add_fields(self, field_names, allow_m2m=True):
1918         """
1919         Add the given (model) fields to the select set. Add the field names in
1920         the order specified.
1921         """
1922         alias = self.get_initial_alias()
1923         opts = self.get_meta()
1924 
1925         try:
1926             cols = []
1927             for name in field_names:
1928                 # Join promotion note - we must not remove any rows here, so
1929                 # if there is no existing joins, use outer join.
1930                 join_info = self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m)
1931                 targets, final_alias, joins = self.trim_joins(
1932                     join_info.targets,
1933                     join_info.joins,
1934                     join_info.path,
1935                 )
1936                 for target in targets:
1937                     cols.append(join_info.transform_function(target, final_alias))
1938             if cols:
1939                 self.set_select(cols)
1940         except MultiJoin:
1941             raise FieldError("Invalid field name: '%s'" % name)
1942         except FieldError:
1943             if LOOKUP_SEP in name:
1944                 # For lookups spanning over relationships, show the error
1945                 # from the model on which the lookup failed.
1946                 raise
1947             elif name in self.annotations:
1948                 raise FieldError(
1949                     "Cannot select the '%s' alias. Use annotate() to promote "
1950                     "it." % name
1951                 )
1952             else:
1953                 names = sorted([
1954                     *get_field_names_from_opts(opts), *self.extra,
1955                     *self.annotation_select, *self._filtered_relations
1956                 ])
1957                 raise FieldError("Cannot resolve keyword %r into field. "
1958                                  "Choices are: %s" % (name, ", ".join(names)))
1959 
1960     def add_ordering(self, *ordering):
1961         """
1962         Add items from the 'ordering' sequence to the query's "order by"
1963         clause. These items are either field names (not column names) --
1964         possibly with a direction prefix ('-' or '?') -- or OrderBy
1965         expressions.
1966 
1967         If 'ordering' is empty, clear all ordering from the query.
1968         """
1969         errors = []
1970         for item in ordering:
1971             if isinstance(item, str):
1972                 if '.' in item:
1973                     warnings.warn(
1974                         'Passing column raw column aliases to order_by() is '
1975                         'deprecated. Wrap %r in a RawSQL expression before '
1976                         'passing it to order_by().' % item,
1977                         category=RemovedInDjango40Warning,
1978                         stacklevel=3,
1979                     )
1980                     continue
1981                 if item == '?':
1982                     continue
1983                 if item.startswith('-'):
1984                     item = item[1:]
1985                 if item in self.annotations:
1986                     continue
1987                 if self.extra and item in self.extra:
1988                     continue
1989                 # names_to_path() validates the lookup. A descriptive
1990                 # FieldError will be raise if it's not.
1991                 self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)
1992             elif not hasattr(item, 'resolve_expression'):
1993                 errors.append(item)
1994             if getattr(item, 'contains_aggregate', False):
1995                 raise FieldError(
1996                     'Using an aggregate in order_by() without also including '
1997                     'it in annotate() is not allowed: %s' % item
1998                 )
1999         if errors:
2000             raise FieldError('Invalid order_by arguments: %s' % errors)
2001         if ordering:
2002             self.order_by += ordering
2003         else:
2004             self.default_ordering = False
2005 
2006     def clear_ordering(self, force_empty):
2007         """
2008         Remove any ordering settings. If 'force_empty' is True, there will be
2009         no ordering in the resulting query (not even the model's default).
2010         """
2011         self.order_by = ()
2012         self.extra_order_by = ()
2013         if force_empty:
2014             self.default_ordering = False
2015 
2016     def set_group_by(self, allow_aliases=True):
2017         """
2018         Expand the GROUP BY clause required by the query.
2019 
2020         This will usually be the set of all non-aggregate fields in the
2021         return data. If the database backend supports grouping by the
2022         primary key, and the query would be equivalent, the optimization
2023         will be made automatically.
2024         """
2025         # Column names from JOINs to check collisions with aliases.
2026         if allow_aliases:
2027             column_names = set()
2028             seen_models = set()
2029             for join in list(self.alias_map.values())[1:]:  # Skip base table.
2030                 model = join.join_field.related_model
2031                 if model not in seen_models:
2032                     column_names.update({
2033                         field.column
2034                         for field in model._meta.local_concrete_fields
2035                     })
2036                     seen_models.add(model)
2037 
2038         group_by = list(self.select)
2039         if self.annotation_select:
2040             for alias, annotation in self.annotation_select.items():
2041                 signature = inspect.signature(annotation.get_group_by_cols)
2042                 if 'alias' not in signature.parameters:
2043                     annotation_class = annotation.__class__
2044                     msg = (
2045                         '`alias=None` must be added to the signature of '
2046                         '%s.%s.get_group_by_cols().'
2047                     ) % (annotation_class.__module__, annotation_class.__qualname__)
2048                     warnings.warn(msg, category=RemovedInDjango40Warning)
2049                     group_by_cols = annotation.get_group_by_cols()
2050                 else:
2051                     if not allow_aliases or alias in column_names:
2052                         alias = None
2053                     group_by_cols = annotation.get_group_by_cols(alias=alias)
2054                 group_by.extend(group_by_cols)
2055         self.group_by = tuple(group_by)
2056 
2057     def add_select_related(self, fields):
2058         """
2059         Set up the select_related data structure so that we only select
2060         certain related models (as opposed to all models, when
2061         self.select_related=True).
2062         """
2063         if isinstance(self.select_related, bool):
2064             field_dict = {}
2065         else:
2066             field_dict = self.select_related
2067         for field in fields:
2068             d = field_dict
2069             for part in field.split(LOOKUP_SEP):
2070                 d = d.setdefault(part, {})
2071         self.select_related = field_dict
2072 
2073     def add_extra(self, select, select_params, where, params, tables, order_by):
2074         """
2075         Add data to the various extra_* attributes for user-created additions
2076         to the query.
2077         """
2078         if select:
2079             # We need to pair any placeholder markers in the 'select'
2080             # dictionary with their parameters in 'select_params' so that
2081             # subsequent updates to the select dictionary also adjust the
2082             # parameters appropriately.
2083             select_pairs = {}
2084             if select_params:
2085                 param_iter = iter(select_params)
2086             else:
2087                 param_iter = iter([])
2088             for name, entry in select.items():
2089                 entry = str(entry)
2090                 entry_params = []
2091                 pos = entry.find("%s")
2092                 while pos != -1:
2093                     if pos == 0 or entry[pos - 1] != '%':
2094                         entry_params.append(next(param_iter))
2095                     pos = entry.find("%s", pos + 2)
2096                 select_pairs[name] = (entry, entry_params)
2097             self.extra.update(select_pairs)
2098         if where or params:
2099             self.where.add(ExtraWhere(where, params), AND)
2100         if tables:
2101             self.extra_tables += tuple(tables)
2102         if order_by:
2103             self.extra_order_by = order_by
2104 
2105     def clear_deferred_loading(self):
2106         """Remove any fields from the deferred loading set."""
2107         self.deferred_loading = (frozenset(), True)
2108 
2109     def add_deferred_loading(self, field_names):
2110         """
2111         Add the given list of model field names to the set of fields to
2112         exclude from loading from the database when automatic column selection
2113         is done. Add the new field names to any existing field names that
2114         are deferred (or removed from any existing field names that are marked
2115         as the only ones for immediate loading).
2116         """
2117         # Fields on related models are stored in the literal double-underscore
2118         # format, so that we can use a set datastructure. We do the foo__bar
2119         # splitting and handling when computing the SQL column names (as part of
2120         # get_columns()).
2121         existing, defer = self.deferred_loading
2122         if defer:
2123             # Add to existing deferred names.
2124             self.deferred_loading = existing.union(field_names), True
2125         else:
2126             # Remove names from the set of any existing "immediate load" names.
2127             self.deferred_loading = existing.difference(field_names), False
2128 
2129     def add_immediate_loading(self, field_names):
2130         """
2131         Add the given list of model field names to the set of fields to
2132         retrieve when the SQL is executed ("immediate loading" fields). The
2133         field names replace any existing immediate loading field names. If
2134         there are field names already specified for deferred loading, remove
2135         those names from the new field_names before storing the new names
2136         for immediate loading. (That is, immediate loading overrides any
2137         existing immediate values, but respects existing deferrals.)
2138         """
2139         existing, defer = self.deferred_loading
2140         field_names = set(field_names)
2141         if 'pk' in field_names:
2142             field_names.remove('pk')
2143             field_names.add(self.get_meta().pk.name)
2144 
2145         if defer:
2146             # Remove any existing deferred names from the current set before
2147             # setting the new names.
2148             self.deferred_loading = field_names.difference(existing), False
2149         else:
2150             # Replace any existing "immediate load" field names.
2151             self.deferred_loading = frozenset(field_names), False
2152 
2153     def get_loaded_field_names(self):
2154         """
2155         If any fields are marked to be deferred, return a dictionary mapping
2156         models to a set of names in those fields that will be loaded. If a
2157         model is not in the returned dictionary, none of its fields are
2158         deferred.
2159 
2160         If no fields are marked for deferral, return an empty dictionary.
2161         """
2162         # We cache this because we call this function multiple times
2163         # (compiler.fill_related_selections, query.iterator)
2164         try:
2165             return self._loaded_field_names_cache
2166         except AttributeError:
2167             collection = {}
2168             self.deferred_to_data(collection, self.get_loaded_field_names_cb)
2169             self._loaded_field_names_cache = collection
2170             return collection
2171 
2172     def get_loaded_field_names_cb(self, target, model, fields):
2173         """Callback used by get_deferred_field_names()."""
2174         target[model] = {f.attname for f in fields}
2175 
2176     def set_annotation_mask(self, names):
2177         """Set the mask of annotations that will be returned by the SELECT."""
2178         if names is None:
2179             self.annotation_select_mask = None
2180         else:
2181             self.annotation_select_mask = set(names)
2182         self._annotation_select_cache = None
2183 
2184     def append_annotation_mask(self, names):
2185         if self.annotation_select_mask is not None:
2186             self.set_annotation_mask(self.annotation_select_mask.union(names))
2187 
2188     def set_extra_mask(self, names):
2189         """
2190         Set the mask of extra select items that will be returned by SELECT.
2191         Don't remove them from the Query since they might be used later.
2192         """
2193         if names is None:
2194             self.extra_select_mask = None
2195         else:
2196             self.extra_select_mask = set(names)
2197         self._extra_select_cache = None
2198 
2199     def set_values(self, fields):
2200         self.select_related = False
2201         self.clear_deferred_loading()
2202         self.clear_select_fields()
2203 
2204         if fields:
2205             field_names = []
2206             extra_names = []
2207             annotation_names = []
2208             if not self.extra and not self.annotations:
2209                 # Shortcut - if there are no extra or annotations, then
2210                 # the values() clause must be just field names.
2211                 field_names = list(fields)
2212             else:
2213                 self.default_cols = False
2214                 for f in fields:
2215                     if f in self.extra_select:
2216                         extra_names.append(f)
2217                     elif f in self.annotation_select:
2218                         annotation_names.append(f)
2219                     else:
2220                         field_names.append(f)
2221             self.set_extra_mask(extra_names)
2222             self.set_annotation_mask(annotation_names)
2223             selected = frozenset(field_names + extra_names + annotation_names)
2224         else:
2225             field_names = [f.attname for f in self.model._meta.concrete_fields]
2226             selected = frozenset(field_names)
2227         # Selected annotations must be known before setting the GROUP BY
2228         # clause.
2229         if self.group_by is True:
2230             self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
2231             # Disable GROUP BY aliases to avoid orphaning references to the
2232             # SELECT clause which is about to be cleared.
2233             self.set_group_by(allow_aliases=False)
2234             self.clear_select_fields()
2235         elif self.group_by:
2236             # Resolve GROUP BY annotation references if they are not part of
2237             # the selected fields anymore.
2238             group_by = []
2239             for expr in self.group_by:
2240                 if isinstance(expr, Ref) and expr.refs not in selected:
2241                     expr = self.annotations[expr.refs]
2242                 group_by.append(expr)
2243             self.group_by = tuple(group_by)
2244 
2245         self.values_select = tuple(field_names)
2246         self.add_fields(field_names, True)
2247 
2248     @property
2249     def annotation_select(self):
2250         """
2251         Return the dictionary of aggregate columns that are not masked and
2252         should be used in the SELECT clause. Cache this result for performance.
2253         """
2254         if self._annotation_select_cache is not None:
2255             return self._annotation_select_cache
2256         elif not self.annotations:
2257             return {}
2258         elif self.annotation_select_mask is not None:
2259             self._annotation_select_cache = {
2260                 k: v for k, v in self.annotations.items()
2261                 if k in self.annotation_select_mask
2262             }
2263             return self._annotation_select_cache
2264         else:
2265             return self.annotations
2266 
2267     @property
2268     def extra_select(self):
2269         if self._extra_select_cache is not None:
2270             return self._extra_select_cache
2271         if not self.extra:
2272             return {}
2273         elif self.extra_select_mask is not None:
2274             self._extra_select_cache = {
2275                 k: v for k, v in self.extra.items()
2276                 if k in self.extra_select_mask
2277             }
2278             return self._extra_select_cache
2279         else:
2280             return self.extra
2281 
2282     def trim_start(self, names_with_path):
2283         """
2284         Trim joins from the start of the join path. The candidates for trim
2285         are the PathInfos in names_with_path structure that are m2m joins.
2286 
2287         Also set the select column so the start matches the join.
2288 
2289         This method is meant to be used for generating the subquery joins &
2290         cols in split_exclude().
2291 
2292         Return a lookup usable for doing outerq.filter(lookup=self) and a
2293         boolean indicating if the joins in the prefix contain a LEFT OUTER join.
2294         _"""
2295         all_paths = []
2296         for _, paths in names_with_path:
2297             all_paths.extend(paths)
2298         contains_louter = False
2299         # Trim and operate only on tables that were generated for
2300         # the lookup part of the query. That is, avoid trimming
2301         # joins generated for F() expressions.
2302         lookup_tables = [
2303             t for t in self.alias_map
2304             if t in self._lookup_joins or t == self.base_table
2305         ]
2306         for trimmed_paths, path in enumerate(all_paths):
2307             if path.m2m:
2308                 break
2309             if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type == LOUTER:
2310                 contains_louter = True
2311             alias = lookup_tables[trimmed_paths]
2312             self.unref_alias(alias)
2313         # The path.join_field is a Rel, lets get the other side's field
2314         join_field = path.join_field.field
2315         # Build the filter prefix.
2316         paths_in_prefix = trimmed_paths
2317         trimmed_prefix = []
2318         for name, path in names_with_path:
2319             if paths_in_prefix - len(path) < 0:
2320                 break
2321             trimmed_prefix.append(name)
2322             paths_in_prefix -= len(path)
2323         trimmed_prefix.append(
2324             join_field.foreign_related_fields[0].name)
2325         trimmed_prefix = LOOKUP_SEP.join(trimmed_prefix)
2326         # Lets still see if we can trim the first join from the inner query
2327         # (that is, self). We can't do this for:
2328         # - LEFT JOINs because we would miss those rows that have nothing on
2329         #   the outer side,
2330         # - INNER JOINs from filtered relations because we would miss their
2331         #   filters.
2332         first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]
2333         if first_join.join_type != LOUTER and not first_join.filtered_relation:
2334             select_fields = [r[0] for r in join_field.related_fields]
2335             select_alias = lookup_tables[trimmed_paths + 1]
2336             self.unref_alias(lookup_tables[trimmed_paths])
2337             extra_restriction = join_field.get_extra_restriction(
2338                 self.where_class, None, lookup_tables[trimmed_paths + 1])
2339             if extra_restriction:
2340                 self.where.add(extra_restriction, AND)
2341         else:
2342             # TODO: It might be possible to trim more joins from the start of the
2343             # inner query if it happens to have a longer join chain containing the
2344             # values in select_fields. Lets punt this one for now.
2345             select_fields = [r[1] for r in join_field.related_fields]
2346             select_alias = lookup_tables[trimmed_paths]
2347         # The found starting point is likely a Join instead of a BaseTable reference.
2348         # But the first entry in the query's FROM clause must not be a JOIN.
2349         for table in self.alias_map:
2350             if self.alias_refcount[table] > 0:
2351                 self.alias_map[table] = BaseTable(self.alias_map[table].table_name, table)
2352                 break
2353         self.set_select([f.get_col(select_alias) for f in select_fields])
2354         return trimmed_prefix, contains_louter
2355 
2356     def is_nullable(self, field):
2357         """
2358         Check if the given field should be treated as nullable.
2359 
2360         Some backends treat '' as null and Django treats such fields as
2361         nullable for those backends. In such situations field.null can be
2362         False even if we should treat the field as nullable.
2363         """
2364         # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have
2365         # (nor should it have) knowledge of which connection is going to be
2366         # used. The proper fix would be to defer all decisions where
2367         # is_nullable() is needed to the compiler stage, but that is not easy
2368         # to do currently.
2369         return (
2370             connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
2371             field.empty_strings_allowed
2372         ) or field.null

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>django/db/backends/base/schema.py</file>
<class>BaseDatabaseSchemaEditor</class>
<method>_model_indexes_sql</method>
<code>
1053     def _model_indexes_sql(self, model):
1054         """
1055         Return a list of all index SQL statements (field indexes,
1056         index_together, Meta.indexes) for the specified model.
1057         """
1058         if not model._meta.managed or model._meta.proxy or model._meta.swapped:
1059             return []
1060         output = []
1061         for field in model._meta.local_fields:
1062             output.extend(self._field_indexes_sql(model, field))
1063 
1064         for field_names in model._meta.index_together:
1065             fields = [model._meta.get_field(field) for field in field_names]
1066             output.append(self._create_index_sql(model, fields=fields, suffix='_idx'))
1067 
1068         for index in model._meta.indexes:
1069             if (
1070                 not index.contains_expressions or
1071                 self.connection.features.supports_expression_indexes
1072             ):
1073                 output.append(index.create_sql(model, self))
1074         return output

</code><intended_behavior>This method generates SQL for model indexes including functional indexes. To resolve the issue, the intended behavior here should include a preliminary step where functional indexes are validated for the existence of model fields referenced in their expressions. This validation step would involve implementing a new system check mechanism prior to this point to ensure that only valid field names are included in functional indexes. The existing functionality for generating SQL remains the same, but it will be preceded by an additional validation layer to catch invalid field references early in the process.</intended_behavior>, <file>django/db/backends/base/schema.py</file>
<class>BaseDatabaseSchemaEditor</class>
<method>None</method>
<code>
45 class BaseDatabaseSchemaEditor:
46     """
47     This class and its subclasses are responsible for emitting schema-changing
48     statements to the databases - model creation/removal/alteration, field
49     renaming, index fiddling, and so on.
50     """
51 
52     # Overrideable SQL templates
53     sql_create_table = "CREATE TABLE %(table)s (%(definition)s)"
54     sql_rename_table = "ALTER TABLE %(old_table)s RENAME TO %(new_table)s"
55     sql_retablespace_table = "ALTER TABLE %(table)s SET TABLESPACE %(new_tablespace)s"
56     sql_delete_table = "DROP TABLE %(table)s CASCADE"
57 
58     sql_create_column = "ALTER TABLE %(table)s ADD COLUMN %(column)s %(definition)s"
59     sql_alter_column = "ALTER TABLE %(table)s %(changes)s"
60     sql_alter_column_type = "ALTER COLUMN %(column)s TYPE %(type)s"
61     sql_alter_column_null = "ALTER COLUMN %(column)s DROP NOT NULL"
62     sql_alter_column_not_null = "ALTER COLUMN %(column)s SET NOT NULL"
63     sql_alter_column_default = "ALTER COLUMN %(column)s SET DEFAULT %(default)s"
64     sql_alter_column_no_default = "ALTER COLUMN %(column)s DROP DEFAULT"
65     sql_alter_column_collate = "ALTER COLUMN %(column)s TYPE %(type)s%(collation)s"
66     sql_delete_column = "ALTER TABLE %(table)s DROP COLUMN %(column)s CASCADE"
67     sql_rename_column = "ALTER TABLE %(table)s RENAME COLUMN %(old_column)s TO %(new_column)s"
68     sql_update_with_default = "UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL"
69 
70     sql_unique_constraint = "UNIQUE (%(columns)s)%(deferrable)s"
71     sql_check_constraint = "CHECK (%(check)s)"
72     sql_delete_constraint = "ALTER TABLE %(table)s DROP CONSTRAINT %(name)s"
73     sql_constraint = "CONSTRAINT %(name)s %(constraint)s"
74 
75     sql_create_check = "ALTER TABLE %(table)s ADD CONSTRAINT %(name)s CHECK (%(check)s)"
76     sql_delete_check = sql_delete_constraint
77 
78     sql_create_unique = "ALTER TABLE %(table)s ADD CONSTRAINT %(name)s UNIQUE (%(columns)s)%(deferrable)s"
79     sql_delete_unique = sql_delete_constraint
80 
81     sql_create_fk = (
82         "ALTER TABLE %(table)s ADD CONSTRAINT %(name)s FOREIGN KEY (%(column)s) "
83         "REFERENCES %(to_table)s (%(to_column)s)%(deferrable)s"
84     )
85     sql_create_inline_fk = None
86     sql_create_column_inline_fk = None
87     sql_delete_fk = sql_delete_constraint
88 
89     sql_create_index = "CREATE INDEX %(name)s ON %(table)s (%(columns)s)%(include)s%(extra)s%(condition)s"
90     sql_create_unique_index = "CREATE UNIQUE INDEX %(name)s ON %(table)s (%(columns)s)%(include)s%(condition)s"
91     sql_delete_index = "DROP INDEX %(name)s"
92 
93     sql_create_pk = "ALTER TABLE %(table)s ADD CONSTRAINT %(name)s PRIMARY KEY (%(columns)s)"
94     sql_delete_pk = sql_delete_constraint
95 
96     sql_delete_procedure = 'DROP PROCEDURE %(procedure)s'
97 
98     def __init__(self, connection, collect_sql=False, atomic=True):
99         self.connection = connection
100         self.collect_sql = collect_sql
101         if self.collect_sql:
102             self.collected_sql = []
103         self.atomic_migration = self.connection.features.can_rollback_ddl and atomic
104 
105     # State-managing methods
106 
107     def __enter__(self):
108         self.deferred_sql = []
109         if self.atomic_migration:
110             self.atomic = atomic(self.connection.alias)
111             self.atomic.__enter__()
112         return self
113 
114     def __exit__(self, exc_type, exc_value, traceback):
115         if exc_type is None:
116             for sql in self.deferred_sql:
117                 self.execute(sql)
118         if self.atomic_migration:
119             self.atomic.__exit__(exc_type, exc_value, traceback)
120 
121     # Core utility functions
122 
123     def execute(self, sql, params=()):
124         """Execute the given SQL statement, with optional parameters."""
125         # Don't perform the transactional DDL check if SQL is being collected
126         # as it's not going to be executed anyway.
127         if not self.collect_sql and self.connection.in_atomic_block and not self.connection.features.can_rollback_ddl:
128             raise TransactionManagementError(
129                 "Executing DDL statements while in a transaction on databases "
130                 "that can't perform a rollback is prohibited."
131             )
132         # Account for non-string statement objects.
133         sql = str(sql)
134         # Log the command we're running, then run it
135         logger.debug("%s; (params %r)", sql, params, extra={'params': params, 'sql': sql})
136         if self.collect_sql:
137             ending = "" if sql.endswith(";") else ";"
138             if params is not None:
139                 self.collected_sql.append((sql % tuple(map(self.quote_value, params))) + ending)
140             else:
141                 self.collected_sql.append(sql + ending)
142         else:
143             with self.connection.cursor() as cursor:
144                 cursor.execute(sql, params)
145 
146     def quote_name(self, name):
147         return self.connection.ops.quote_name(name)
148 
149     def table_sql(self, model):
150         """Take a model and return its table definition."""
151         # Add any unique_togethers (always deferred, as some fields might be
152         # created afterwards, like geometry fields with some backends).
153         for fields in model._meta.unique_together:
154             columns = [model._meta.get_field(field).column for field in fields]
155             self.deferred_sql.append(self._create_unique_sql(model, columns))
156         # Create column SQL, add FK deferreds if needed.
157         column_sqls = []
158         params = []
159         for field in model._meta.local_fields:
160             # SQL.
161             definition, extra_params = self.column_sql(model, field)
162             if definition is None:
163                 continue
164             # Check constraints can go on the column SQL here.
165             db_params = field.db_parameters(connection=self.connection)
166             if db_params['check']:
167                 definition += ' ' + self.sql_check_constraint % db_params
168             # Autoincrement SQL (for backends with inline variant).
169             col_type_suffix = field.db_type_suffix(connection=self.connection)
170             if col_type_suffix:
171                 definition += ' %s' % col_type_suffix
172             params.extend(extra_params)
173             # FK.
174             if field.remote_field and field.db_constraint:
175                 to_table = field.remote_field.model._meta.db_table
176                 to_column = field.remote_field.model._meta.get_field(field.remote_field.field_name).column
177                 if self.sql_create_inline_fk:
178                     definition += ' ' + self.sql_create_inline_fk % {
179                         'to_table': self.quote_name(to_table),
180                         'to_column': self.quote_name(to_column),
181                     }
182                 elif self.connection.features.supports_foreign_keys:
183                     self.deferred_sql.append(self._create_fk_sql(model, field, '_fk_%(to_table)s_%(to_column)s'))
184             # Add the SQL to our big list.
185             column_sqls.append('%s %s' % (
186                 self.quote_name(field.column),
187                 definition,
188             ))
189             # Autoincrement SQL (for backends with post table definition
190             # variant).
191             if field.get_internal_type() in ('AutoField', 'BigAutoField', 'SmallAutoField'):
192                 autoinc_sql = self.connection.ops.autoinc_sql(model._meta.db_table, field.column)
193                 if autoinc_sql:
194                     self.deferred_sql.extend(autoinc_sql)
195         constraints = [constraint.constraint_sql(model, self) for constraint in model._meta.constraints]
196         sql = self.sql_create_table % {
197             'table': self.quote_name(model._meta.db_table),
198             'definition': ', '.join(constraint for constraint in (*column_sqls, *constraints) if constraint),
199         }
200         if model._meta.db_tablespace:
201             tablespace_sql = self.connection.ops.tablespace_sql(model._meta.db_tablespace)
202             if tablespace_sql:
203                 sql += ' ' + tablespace_sql
204         return sql, params
205 
206     # Field <-> database mapping functions
207 
208     def column_sql(self, model, field, include_default=False):
209         """
210         Take a field and return its column definition.
211         The field must already have had set_attributes_from_name() called.
212         """
213         # Get the column's type and use that as the basis of the SQL
214         db_params = field.db_parameters(connection=self.connection)
215         sql = db_params['type']
216         params = []
217         # Check for fields that aren't actually columns (e.g. M2M)
218         if sql is None:
219             return None, None
220         # Collation.
221         collation = getattr(field, 'db_collation', None)
222         if collation:
223             sql += self._collate_sql(collation)
224         # Work out nullability
225         null = field.null
226         # If we were told to include a default value, do so
227         include_default = include_default and not self.skip_default(field)
228         if include_default:
229             default_value = self.effective_default(field)
230             column_default = ' DEFAULT ' + self._column_default_sql(field)
231             if default_value is not None:
232                 if self.connection.features.requires_literal_defaults:
233                     # Some databases can't take defaults as a parameter (oracle)
234                     # If this is the case, the individual schema backend should
235                     # implement prepare_default
236                     sql += column_default % self.prepare_default(default_value)
237                 else:
238                     sql += column_default
239                     params += [default_value]
240         # Oracle treats the empty string ('') as null, so coerce the null
241         # option whenever '' is a possible value.
242         if (field.empty_strings_allowed and not field.primary_key and
243                 self.connection.features.interprets_empty_strings_as_nulls):
244             null = True
245         if null and not self.connection.features.implied_column_null:
246             sql += " NULL"
247         elif not null:
248             sql += " NOT NULL"
249         # Primary key/unique outputs
250         if field.primary_key:
251             sql += " PRIMARY KEY"
252         elif field.unique:
253             sql += " UNIQUE"
254         # Optionally add the tablespace if it's an implicitly indexed column
255         tablespace = field.db_tablespace or model._meta.db_tablespace
256         if tablespace and self.connection.features.supports_tablespaces and field.unique:
257             sql += " %s" % self.connection.ops.tablespace_sql(tablespace, inline=True)
258         # Return the sql
259         return sql, params
260 
261     def skip_default(self, field):
262         """
263         Some backends don't accept default values for certain columns types
264         (i.e. MySQL longtext and longblob).
265         """
266         return False
267 
268     def prepare_default(self, value):
269         """
270         Only used for backends which have requires_literal_defaults feature
271         """
272         raise NotImplementedError(
273             'subclasses of BaseDatabaseSchemaEditor for backends which have '
274             'requires_literal_defaults must provide a prepare_default() method'
275         )
276 
277     def _column_default_sql(self, field):
278         """
279         Return the SQL to use in a DEFAULT clause. The resulting string should
280         contain a '%s' placeholder for a default value.
281         """
282         return '%s'
283 
284     @staticmethod
285     def _effective_default(field):
286         # This method allows testing its logic without a connection.
287         if field.has_default():
288             default = field.get_default()
289         elif not field.null and field.blank and field.empty_strings_allowed:
290             if field.get_internal_type() == "BinaryField":
291                 default = b''
292             else:
293                 default = ''
294         elif getattr(field, 'auto_now', False) or getattr(field, 'auto_now_add', False):
295             default = datetime.now()
296             internal_type = field.get_internal_type()
297             if internal_type == 'DateField':
298                 default = default.date()
299             elif internal_type == 'TimeField':
300                 default = default.time()
301             elif internal_type == 'DateTimeField':
302                 default = timezone.now()
303         else:
304             default = None
305         return default
306 
307     def effective_default(self, field):
308         """Return a field's effective database default value."""
309         return field.get_db_prep_save(self._effective_default(field), self.connection)
310 
311     def quote_value(self, value):
312         """
313         Return a quoted version of the value so it's safe to use in an SQL
314         string. This is not safe against injection from user code; it is
315         intended only for use in making SQL scripts or preparing default values
316         for particularly tricky backends (defaults are not user-defined, though,
317         so this is safe).
318         """
319         raise NotImplementedError()
320 
321     # Actions
322 
323     def create_model(self, model):
324         """
325         Create a table and any accompanying indexes or unique constraints for
326         the given `model`.
327         """
328         sql, params = self.table_sql(model)
329         # Prevent using [] as params, in the case a literal '%' is used in the definition
330         self.execute(sql, params or None)
331 
332         # Add any field index and index_together's (deferred as SQLite _remake_table needs it)
333         self.deferred_sql.extend(self._model_indexes_sql(model))
334 
335         # Make M2M tables
336         for field in model._meta.local_many_to_many:
337             if field.remote_field.through._meta.auto_created:
338                 self.create_model(field.remote_field.through)
339 
340     def delete_model(self, model):
341         """Delete a model from the database."""
342         # Handle auto-created intermediary models
343         for field in model._meta.local_many_to_many:
344             if field.remote_field.through._meta.auto_created:
345                 self.delete_model(field.remote_field.through)
346 
347         # Delete the table
348         self.execute(self.sql_delete_table % {
349             "table": self.quote_name(model._meta.db_table),
350         })
351         # Remove all deferred statements referencing the deleted table.
352         for sql in list(self.deferred_sql):
353             if isinstance(sql, Statement) and sql.references_table(model._meta.db_table):
354                 self.deferred_sql.remove(sql)
355 
356     def add_index(self, model, index):
357         """Add an index on a model."""
358         if (
359             index.contains_expressions and
360             not self.connection.features.supports_expression_indexes
361         ):
362             return None
363         self.execute(index.create_sql(model, self), params=None)
364 
365     def remove_index(self, model, index):
366         """Remove an index from a model."""
367         if (
368             index.contains_expressions and
369             not self.connection.features.supports_expression_indexes
370         ):
371             return None
372         self.execute(index.remove_sql(model, self))
373 
374     def add_constraint(self, model, constraint):
375         """Add a constraint to a model."""
376         sql = constraint.create_sql(model, self)
377         if sql:
378             self.execute(sql)
379 
380     def remove_constraint(self, model, constraint):
381         """Remove a constraint from a model."""
382         sql = constraint.remove_sql(model, self)
383         if sql:
384             self.execute(sql)
385 
386     def alter_unique_together(self, model, old_unique_together, new_unique_together):
387         """
388         Deal with a model changing its unique_together. The input
389         unique_togethers must be doubly-nested, not the single-nested
390         ["foo", "bar"] format.
391         """
392         olds = {tuple(fields) for fields in old_unique_together}
393         news = {tuple(fields) for fields in new_unique_together}
394         # Deleted uniques
395         for fields in olds.difference(news):
396             self._delete_composed_index(model, fields, {'unique': True}, self.sql_delete_unique)
397         # Created uniques
398         for fields in news.difference(olds):
399             columns = [model._meta.get_field(field).column for field in fields]
400             self.execute(self._create_unique_sql(model, columns))
401 
402     def alter_index_together(self, model, old_index_together, new_index_together):
403         """
404         Deal with a model changing its index_together. The input
405         index_togethers must be doubly-nested, not the single-nested
406         ["foo", "bar"] format.
407         """
408         olds = {tuple(fields) for fields in old_index_together}
409         news = {tuple(fields) for fields in new_index_together}
410         # Deleted indexes
411         for fields in olds.difference(news):
412             self._delete_composed_index(
413                 model,
414                 fields,
415                 {'index': True, 'unique': False},
416                 self.sql_delete_index,
417             )
418         # Created indexes
419         for field_names in news.difference(olds):
420             fields = [model._meta.get_field(field) for field in field_names]
421             self.execute(self._create_index_sql(model, fields=fields, suffix='_idx'))
422 
423     def _delete_composed_index(self, model, fields, constraint_kwargs, sql):
424         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
425         meta_index_names = {constraint.name for constraint in model._meta.indexes}
426         columns = [model._meta.get_field(field).column for field in fields]
427         constraint_names = self._constraint_names(
428             model, columns, exclude=meta_constraint_names | meta_index_names,
429             **constraint_kwargs
430         )
431         if len(constraint_names) != 1:
432             raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
433                 len(constraint_names),
434                 model._meta.db_table,
435                 ", ".join(columns),
436             ))
437         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
438 
439     def alter_db_table(self, model, old_db_table, new_db_table):
440         """Rename the table a model points to."""
441         if (old_db_table == new_db_table or
442             (self.connection.features.ignores_table_name_case and
443                 old_db_table.lower() == new_db_table.lower())):
444             return
445         self.execute(self.sql_rename_table % {
446             "old_table": self.quote_name(old_db_table),
447             "new_table": self.quote_name(new_db_table),
448         })
449         # Rename all references to the old table name.
450         for sql in self.deferred_sql:
451             if isinstance(sql, Statement):
452                 sql.rename_table_references(old_db_table, new_db_table)
453 
454     def alter_db_tablespace(self, model, old_db_tablespace, new_db_tablespace):
455         """Move a model's table between tablespaces."""
456         self.execute(self.sql_retablespace_table % {
457             "table": self.quote_name(model._meta.db_table),
458             "old_tablespace": self.quote_name(old_db_tablespace),
459             "new_tablespace": self.quote_name(new_db_tablespace),
460         })
461 
462     def add_field(self, model, field):
463         """
464         Create a field on a model. Usually involves adding a column, but may
465         involve adding a table instead (for M2M fields).
466         """
467         # Special-case implicit M2M tables
468         if field.many_to_many and field.remote_field.through._meta.auto_created:
469             return self.create_model(field.remote_field.through)
470         # Get the column's definition
471         definition, params = self.column_sql(model, field, include_default=True)
472         # It might not actually have a column behind it
473         if definition is None:
474             return
475         # Check constraints can go on the column SQL here
476         db_params = field.db_parameters(connection=self.connection)
477         if db_params['check']:
478             definition += " " + self.sql_check_constraint % db_params
479         if field.remote_field and self.connection.features.supports_foreign_keys and field.db_constraint:
480             constraint_suffix = '_fk_%(to_table)s_%(to_column)s'
481             # Add FK constraint inline, if supported.
482             if self.sql_create_column_inline_fk:
483                 to_table = field.remote_field.model._meta.db_table
484                 to_column = field.remote_field.model._meta.get_field(field.remote_field.field_name).column
485                 namespace, _ = split_identifier(model._meta.db_table)
486                 definition += " " + self.sql_create_column_inline_fk % {
487                     'name': self._fk_constraint_name(model, field, constraint_suffix),
488                     'namespace': '%s.' % self.quote_name(namespace) if namespace else '',
489                     'column': self.quote_name(field.column),
490                     'to_table': self.quote_name(to_table),
491                     'to_column': self.quote_name(to_column),
492                     'deferrable': self.connection.ops.deferrable_sql()
493                 }
494             # Otherwise, add FK constraints later.
495             else:
496                 self.deferred_sql.append(self._create_fk_sql(model, field, constraint_suffix))
497         # Build the SQL and run it
498         sql = self.sql_create_column % {
499             "table": self.quote_name(model._meta.db_table),
500             "column": self.quote_name(field.column),
501             "definition": definition,
502         }
503         self.execute(sql, params)
504         # Drop the default if we need to
505         # (Django usually does not use in-database defaults)
506         if not self.skip_default(field) and self.effective_default(field) is not None:
507             changes_sql, params = self._alter_column_default_sql(model, None, field, drop=True)
508             sql = self.sql_alter_column % {
509                 "table": self.quote_name(model._meta.db_table),
510                 "changes": changes_sql,
511             }
512             self.execute(sql, params)
513         # Add an index, if required
514         self.deferred_sql.extend(self._field_indexes_sql(model, field))
515         # Reset connection if required
516         if self.connection.features.connection_persists_old_columns:
517             self.connection.close()
518 
519     def remove_field(self, model, field):
520         """
521         Remove a field from a model. Usually involves deleting a column,
522         but for M2Ms may involve deleting a table.
523         """
524         # Special-case implicit M2M tables
525         if field.many_to_many and field.remote_field.through._meta.auto_created:
526             return self.delete_model(field.remote_field.through)
527         # It might not actually have a column behind it
528         if field.db_parameters(connection=self.connection)['type'] is None:
529             return
530         # Drop any FK constraints, MySQL requires explicit deletion
531         if field.remote_field:
532             fk_names = self._constraint_names(model, [field.column], foreign_key=True)
533             for fk_name in fk_names:
534                 self.execute(self._delete_fk_sql(model, fk_name))
535         # Delete the column
536         sql = self.sql_delete_column % {
537             "table": self.quote_name(model._meta.db_table),
538             "column": self.quote_name(field.column),
539         }
540         self.execute(sql)
541         # Reset connection if required
542         if self.connection.features.connection_persists_old_columns:
543             self.connection.close()
544         # Remove all deferred statements referencing the deleted column.
545         for sql in list(self.deferred_sql):
546             if isinstance(sql, Statement) and sql.references_column(model._meta.db_table, field.column):
547                 self.deferred_sql.remove(sql)
548 
549     def alter_field(self, model, old_field, new_field, strict=False):
550         """
551         Allow a field's type, uniqueness, nullability, default, column,
552         constraints, etc. to be modified.
553         `old_field` is required to compute the necessary changes.
554         If `strict` is True, raise errors if the old column does not match
555         `old_field` precisely.
556         """
557         if not self._field_should_be_altered(old_field, new_field):
558             return
559         # Ensure this field is even column-based
560         old_db_params = old_field.db_parameters(connection=self.connection)
561         old_type = old_db_params['type']
562         new_db_params = new_field.db_parameters(connection=self.connection)
563         new_type = new_db_params['type']
564         if ((old_type is None and old_field.remote_field is None) or
565                 (new_type is None and new_field.remote_field is None)):
566             raise ValueError(
567                 "Cannot alter field %s into %s - they do not properly define "
568                 "db_type (are you using a badly-written custom field?)" %
569                 (old_field, new_field),
570             )
571         elif old_type is None and new_type is None and (
572                 old_field.remote_field.through and new_field.remote_field.through and
573                 old_field.remote_field.through._meta.auto_created and
574                 new_field.remote_field.through._meta.auto_created):
575             return self._alter_many_to_many(model, old_field, new_field, strict)
576         elif old_type is None and new_type is None and (
577                 old_field.remote_field.through and new_field.remote_field.through and
578                 not old_field.remote_field.through._meta.auto_created and
579                 not new_field.remote_field.through._meta.auto_created):
580             # Both sides have through models; this is a no-op.
581             return
582         elif old_type is None or new_type is None:
583             raise ValueError(
584                 "Cannot alter field %s into %s - they are not compatible types "
585                 "(you cannot alter to or from M2M fields, or add or remove "
586                 "through= on M2M fields)" % (old_field, new_field)
587             )
588 
589         self._alter_field(model, old_field, new_field, old_type, new_type,
590                           old_db_params, new_db_params, strict)
591 
592     def _alter_field(self, model, old_field, new_field, old_type, new_type,
593                      old_db_params, new_db_params, strict=False):
594         """Perform a "physical" (non-ManyToMany) field update."""
595         # Drop any FK constraints, we'll remake them later
596         fks_dropped = set()
597         if (
598             self.connection.features.supports_foreign_keys and
599             old_field.remote_field and
600             old_field.db_constraint
601         ):
602             fk_names = self._constraint_names(model, [old_field.column], foreign_key=True)
603             if strict and len(fk_names) != 1:
604                 raise ValueError("Found wrong number (%s) of foreign key constraints for %s.%s" % (
605                     len(fk_names),
606                     model._meta.db_table,
607                     old_field.column,
608                 ))
609             for fk_name in fk_names:
610                 fks_dropped.add((old_field.column,))
611                 self.execute(self._delete_fk_sql(model, fk_name))
612         # Has unique been removed?
613         if old_field.unique and (not new_field.unique or self._field_became_primary_key(old_field, new_field)):
614             # Find the unique constraint for this field
615             meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
616             constraint_names = self._constraint_names(
617                 model, [old_field.column], unique=True, primary_key=False,
618                 exclude=meta_constraint_names,
619             )
620             if strict and len(constraint_names) != 1:
621                 raise ValueError("Found wrong number (%s) of unique constraints for %s.%s" % (
622                     len(constraint_names),
623                     model._meta.db_table,
624                     old_field.column,
625                 ))
626             for constraint_name in constraint_names:
627                 self.execute(self._delete_unique_sql(model, constraint_name))
628         # Drop incoming FK constraints if the field is a primary key or unique,
629         # which might be a to_field target, and things are going to change.
630         drop_foreign_keys = (
631             self.connection.features.supports_foreign_keys and (
632                 (old_field.primary_key and new_field.primary_key) or
633                 (old_field.unique and new_field.unique)
634             ) and old_type != new_type
635         )
636         if drop_foreign_keys:
637             # '_meta.related_field' also contains M2M reverse fields, these
638             # will be filtered out
639             for _old_rel, new_rel in _related_non_m2m_objects(old_field, new_field):
640                 rel_fk_names = self._constraint_names(
641                     new_rel.related_model, [new_rel.field.column], foreign_key=True
642                 )
643                 for fk_name in rel_fk_names:
644                     self.execute(self._delete_fk_sql(new_rel.related_model, fk_name))
645         # Removed an index? (no strict check, as multiple indexes are possible)
646         # Remove indexes if db_index switched to False or a unique constraint
647         # will now be used in lieu of an index. The following lines from the
648         # truth table show all True cases; the rest are False:
649         #
650         # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique
651         # ------------------------------------------------------------------------------
652         # True               | False            | False              | False
653         # True               | False            | False              | True
654         # True               | False            | True               | True
655         if old_field.db_index and not old_field.unique and (not new_field.db_index or new_field.unique):
656             # Find the index for this field
657             meta_index_names = {index.name for index in model._meta.indexes}
658             # Retrieve only BTREE indexes since this is what's created with
659             # db_index=True.
660             index_names = self._constraint_names(
661                 model, [old_field.column], index=True, type_=Index.suffix,
662                 exclude=meta_index_names,
663             )
664             for index_name in index_names:
665                 # The only way to check if an index was created with
666                 # db_index=True or with Index(['field'], name='foo')
667                 # is to look at its name (refs #28053).
668                 self.execute(self._delete_index_sql(model, index_name))
669         # Change check constraints?
670         if old_db_params['check'] != new_db_params['check'] and old_db_params['check']:
671             meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
672             constraint_names = self._constraint_names(
673                 model, [old_field.column], check=True,
674                 exclude=meta_constraint_names,
675             )
676             if strict and len(constraint_names) != 1:
677                 raise ValueError("Found wrong number (%s) of check constraints for %s.%s" % (
678                     len(constraint_names),
679                     model._meta.db_table,
680                     old_field.column,
681                 ))
682             for constraint_name in constraint_names:
683                 self.execute(self._delete_check_sql(model, constraint_name))
684         # Have they renamed the column?
685         if old_field.column != new_field.column:
686             self.execute(self._rename_field_sql(model._meta.db_table, old_field, new_field, new_type))
687             # Rename all references to the renamed column.
688             for sql in self.deferred_sql:
689                 if isinstance(sql, Statement):
690                     sql.rename_column_references(model._meta.db_table, old_field.column, new_field.column)
691         # Next, start accumulating actions to do
692         actions = []
693         null_actions = []
694         post_actions = []
695         # Collation change?
696         old_collation = getattr(old_field, 'db_collation', None)
697         new_collation = getattr(new_field, 'db_collation', None)
698         if old_collation != new_collation:
699             # Collation change handles also a type change.
700             fragment = self._alter_column_collation_sql(model, new_field, new_type, new_collation)
701             actions.append(fragment)
702         # Type change?
703         elif old_type != new_type:
704             fragment, other_actions = self._alter_column_type_sql(model, old_field, new_field, new_type)
705             actions.append(fragment)
706             post_actions.extend(other_actions)
707         # When changing a column NULL constraint to NOT NULL with a given
708         # default value, we need to perform 4 steps:
709         #  1. Add a default for new incoming writes
710         #  2. Update existing NULL rows with new default
711         #  3. Replace NULL constraint with NOT NULL
712         #  4. Drop the default again.
713         # Default change?
714         needs_database_default = False
715         if old_field.null and not new_field.null:
716             old_default = self.effective_default(old_field)
717             new_default = self.effective_default(new_field)
718             if (
719                 not self.skip_default(new_field) and
720                 old_default != new_default and
721                 new_default is not None
722             ):
723                 needs_database_default = True
724                 actions.append(self._alter_column_default_sql(model, old_field, new_field))
725         # Nullability change?
726         if old_field.null != new_field.null:
727             fragment = self._alter_column_null_sql(model, old_field, new_field)
728             if fragment:
729                 null_actions.append(fragment)
730         # Only if we have a default and there is a change from NULL to NOT NULL
731         four_way_default_alteration = (
732             new_field.has_default() and
733             (old_field.null and not new_field.null)
734         )
735         if actions or null_actions:
736             if not four_way_default_alteration:
737                 # If we don't have to do a 4-way default alteration we can
738                 # directly run a (NOT) NULL alteration
739                 actions = actions + null_actions
740             # Combine actions together if we can (e.g. postgres)
741             if self.connection.features.supports_combined_alters and actions:
742                 sql, params = tuple(zip(*actions))
743                 actions = [(", ".join(sql), sum(params, []))]
744             # Apply those actions
745             for sql, params in actions:
746                 self.execute(
747                     self.sql_alter_column % {
748                         "table": self.quote_name(model._meta.db_table),
749                         "changes": sql,
750                     },
751                     params,
752                 )
753             if four_way_default_alteration:
754                 # Update existing rows with default value
755                 self.execute(
756                     self.sql_update_with_default % {
757                         "table": self.quote_name(model._meta.db_table),
758                         "column": self.quote_name(new_field.column),
759                         "default": "%s",
760                     },
761                     [new_default],
762                 )
763                 # Since we didn't run a NOT NULL change before we need to do it
764                 # now
765                 for sql, params in null_actions:
766                     self.execute(
767                         self.sql_alter_column % {
768                             "table": self.quote_name(model._meta.db_table),
769                             "changes": sql,
770                         },
771                         params,
772                     )
773         if post_actions:
774             for sql, params in post_actions:
775                 self.execute(sql, params)
776         # If primary_key changed to False, delete the primary key constraint.
777         if old_field.primary_key and not new_field.primary_key:
778             self._delete_primary_key(model, strict)
779         # Added a unique?
780         if self._unique_should_be_added(old_field, new_field):
781             self.execute(self._create_unique_sql(model, [new_field.column]))
782         # Added an index? Add an index if db_index switched to True or a unique
783         # constraint will no longer be used in lieu of an index. The following
784         # lines from the truth table show all True cases; the rest are False:
785         #
786         # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique
787         # ------------------------------------------------------------------------------
788         # False              | False            | True               | False
789         # False              | True             | True               | False
790         # True               | True             | True               | False
791         if (not old_field.db_index or old_field.unique) and new_field.db_index and not new_field.unique:
792             self.execute(self._create_index_sql(model, fields=[new_field]))
793         # Type alteration on primary key? Then we need to alter the column
794         # referring to us.
795         rels_to_update = []
796         if drop_foreign_keys:
797             rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))
798         # Changed to become primary key?
799         if self._field_became_primary_key(old_field, new_field):
800             # Make the new one
801             self.execute(self._create_primary_key_sql(model, new_field))
802             # Update all referencing columns
803             rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))
804         # Handle our type alters on the other end of rels from the PK stuff above
805         for old_rel, new_rel in rels_to_update:
806             rel_db_params = new_rel.field.db_parameters(connection=self.connection)
807             rel_type = rel_db_params['type']
808             fragment, other_actions = self._alter_column_type_sql(
809                 new_rel.related_model, old_rel.field, new_rel.field, rel_type
810             )
811             self.execute(
812                 self.sql_alter_column % {
813                     "table": self.quote_name(new_rel.related_model._meta.db_table),
814                     "changes": fragment[0],
815                 },
816                 fragment[1],
817             )
818             for sql, params in other_actions:
819                 self.execute(sql, params)
820         # Does it have a foreign key?
821         if (self.connection.features.supports_foreign_keys and new_field.remote_field and
822                 (fks_dropped or not old_field.remote_field or not old_field.db_constraint) and
823                 new_field.db_constraint):
824             self.execute(self._create_fk_sql(model, new_field, "_fk_%(to_table)s_%(to_column)s"))
825         # Rebuild FKs that pointed to us if we previously had to drop them
826         if drop_foreign_keys:
827             for rel in new_field.model._meta.related_objects:
828                 if _is_relevant_relation(rel, new_field) and rel.field.db_constraint:
829                     self.execute(self._create_fk_sql(rel.related_model, rel.field, "_fk"))
830         # Does it have check constraints we need to add?
831         if old_db_params['check'] != new_db_params['check'] and new_db_params['check']:
832             constraint_name = self._create_index_name(model._meta.db_table, [new_field.column], suffix='_check')
833             self.execute(self._create_check_sql(model, constraint_name, new_db_params['check']))
834         # Drop the default if we need to
835         # (Django usually does not use in-database defaults)
836         if needs_database_default:
837             changes_sql, params = self._alter_column_default_sql(model, old_field, new_field, drop=True)
838             sql = self.sql_alter_column % {
839                 "table": self.quote_name(model._meta.db_table),
840                 "changes": changes_sql,
841             }
842             self.execute(sql, params)
843         # Reset connection if required
844         if self.connection.features.connection_persists_old_columns:
845             self.connection.close()
846 
847     def _alter_column_null_sql(self, model, old_field, new_field):
848         """
849         Hook to specialize column null alteration.
850 
851         Return a (sql, params) fragment to set a column to null or non-null
852         as required by new_field, or None if no changes are required.
853         """
854         if (self.connection.features.interprets_empty_strings_as_nulls and
855                 new_field.get_internal_type() in ("CharField", "TextField")):
856             # The field is nullable in the database anyway, leave it alone.
857             return
858         else:
859             new_db_params = new_field.db_parameters(connection=self.connection)
860             sql = self.sql_alter_column_null if new_field.null else self.sql_alter_column_not_null
861             return (
862                 sql % {
863                     'column': self.quote_name(new_field.column),
864                     'type': new_db_params['type'],
865                 },
866                 [],
867             )
868 
869     def _alter_column_default_sql(self, model, old_field, new_field, drop=False):
870         """
871         Hook to specialize column default alteration.
872 
873         Return a (sql, params) fragment to add or drop (depending on the drop
874         argument) a default to new_field's column.
875         """
876         new_default = self.effective_default(new_field)
877         default = self._column_default_sql(new_field)
878         params = [new_default]
879 
880         if drop:
881             params = []
882         elif self.connection.features.requires_literal_defaults:
883             # Some databases (Oracle) can't take defaults as a parameter
884             # If this is the case, the SchemaEditor for that database should
885             # implement prepare_default().
886             default = self.prepare_default(new_default)
887             params = []
888 
889         new_db_params = new_field.db_parameters(connection=self.connection)
890         sql = self.sql_alter_column_no_default if drop else self.sql_alter_column_default
891         return (
892             sql % {
893                 'column': self.quote_name(new_field.column),
894                 'type': new_db_params['type'],
895                 'default': default,
896             },
897             params,
898         )
899 
900     def _alter_column_type_sql(self, model, old_field, new_field, new_type):
901         """
902         Hook to specialize column type alteration for different backends,
903         for cases when a creation type is different to an alteration type
904         (e.g. SERIAL in PostgreSQL, PostGIS fields).
905 
906         Return a two-tuple of: an SQL fragment of (sql, params) to insert into
907         an ALTER TABLE statement and a list of extra (sql, params) tuples to
908         run once the field is altered.
909         """
910         return (
911             (
912                 self.sql_alter_column_type % {
913                     "column": self.quote_name(new_field.column),
914                     "type": new_type,
915                 },
916                 [],
917             ),
918             [],
919         )
920 
921     def _alter_column_collation_sql(self, model, new_field, new_type, new_collation):
922         return (
923             self.sql_alter_column_collate % {
924                 'column': self.quote_name(new_field.column),
925                 'type': new_type,
926                 'collation': self._collate_sql(new_collation) if new_collation else '',
927             },
928             [],
929         )
930 
931     def _alter_many_to_many(self, model, old_field, new_field, strict):
932         """Alter M2Ms to repoint their to= endpoints."""
933         # Rename the through table
934         if old_field.remote_field.through._meta.db_table != new_field.remote_field.through._meta.db_table:
935             self.alter_db_table(old_field.remote_field.through, old_field.remote_field.through._meta.db_table,
936                                 new_field.remote_field.through._meta.db_table)
937         # Repoint the FK to the other side
938         self.alter_field(
939             new_field.remote_field.through,
940             # We need the field that points to the target model, so we can tell alter_field to change it -
941             # this is m2m_reverse_field_name() (as opposed to m2m_field_name, which points to our model)
942             old_field.remote_field.through._meta.get_field(old_field.m2m_reverse_field_name()),
943             new_field.remote_field.through._meta.get_field(new_field.m2m_reverse_field_name()),
944         )
945         self.alter_field(
946             new_field.remote_field.through,
947             # for self-referential models we need to alter field from the other end too
948             old_field.remote_field.through._meta.get_field(old_field.m2m_field_name()),
949             new_field.remote_field.through._meta.get_field(new_field.m2m_field_name()),
950         )
951 
952     def _create_index_name(self, table_name, column_names, suffix=""):
953         """
954         Generate a unique name for an index/unique constraint.
955 
956         The name is divided into 3 parts: the table name, the column names,
957         and a unique digest and suffix.
958         """
959         _, table_name = split_identifier(table_name)
960         hash_suffix_part = '%s%s' % (names_digest(table_name, *column_names, length=8), suffix)
961         max_length = self.connection.ops.max_name_length() or 200
962         # If everything fits into max_length, use that name.
963         index_name = '%s_%s_%s' % (table_name, '_'.join(column_names), hash_suffix_part)
964         if len(index_name) <= max_length:
965             return index_name
966         # Shorten a long suffix.
967         if len(hash_suffix_part) > max_length / 3:
968             hash_suffix_part = hash_suffix_part[:max_length // 3]
969         other_length = (max_length - len(hash_suffix_part)) // 2 - 1
970         index_name = '%s_%s_%s' % (
971             table_name[:other_length],
972             '_'.join(column_names)[:other_length],
973             hash_suffix_part,
974         )
975         # Prepend D if needed to prevent the name from starting with an
976         # underscore or a number (not permitted on Oracle).
977         if index_name[0] == "_" or index_name[0].isdigit():
978             index_name = "D%s" % index_name[:-1]
979         return index_name
980 
981     def _get_index_tablespace_sql(self, model, fields, db_tablespace=None):
982         if db_tablespace is None:
983             if len(fields) == 1 and fields[0].db_tablespace:
984                 db_tablespace = fields[0].db_tablespace
985             elif model._meta.db_tablespace:
986                 db_tablespace = model._meta.db_tablespace
987         if db_tablespace is not None:
988             return ' ' + self.connection.ops.tablespace_sql(db_tablespace)
989         return ''
990 
991     def _index_condition_sql(self, condition):
992         if condition:
993             return ' WHERE ' + condition
994         return ''
995 
996     def _index_include_sql(self, model, columns):
997         if not columns or not self.connection.features.supports_covering_indexes:
998             return ''
999         return Statement(
1000             ' INCLUDE (%(columns)s)',
1001             columns=Columns(model._meta.db_table, columns, self.quote_name),
1002         )
1003 
1004     def _create_index_sql(self, model, *, fields=None, name=None, suffix='', using='',
1005                           db_tablespace=None, col_suffixes=(), sql=None, opclasses=(),
1006                           condition=None, include=None, expressions=None):
1007         """
1008         Return the SQL statement to create the index for one or several fields
1009         or expressions. `sql` can be specified if the syntax differs from the
1010         standard (GIS indexes, ...).
1011         """
1012         fields = fields or []
1013         expressions = expressions or []
1014         compiler = Query(model, alias_cols=False).get_compiler(
1015             connection=self.connection,
1016         )
1017         tablespace_sql = self._get_index_tablespace_sql(model, fields, db_tablespace=db_tablespace)
1018         columns = [field.column for field in fields]
1019         sql_create_index = sql or self.sql_create_index
1020         table = model._meta.db_table
1021 
1022         def create_index_name(*args, **kwargs):
1023             nonlocal name
1024             if name is None:
1025                 name = self._create_index_name(*args, **kwargs)
1026             return self.quote_name(name)
1027 
1028         return Statement(
1029             sql_create_index,
1030             table=Table(table, self.quote_name),
1031             name=IndexName(table, columns, suffix, create_index_name),
1032             using=using,
1033             columns=(
1034                 self._index_columns(table, columns, col_suffixes, opclasses)
1035                 if columns
1036                 else Expressions(table, expressions, compiler, self.quote_value)
1037             ),
1038             extra=tablespace_sql,
1039             condition=self._index_condition_sql(condition),
1040             include=self._index_include_sql(model, include),
1041         )
1042 
1043     def _delete_index_sql(self, model, name, sql=None):
1044         return Statement(
1045             sql or self.sql_delete_index,
1046             table=Table(model._meta.db_table, self.quote_name),
1047             name=self.quote_name(name),
1048         )
1049 
1050     def _index_columns(self, table, columns, col_suffixes, opclasses):
1051         return Columns(table, columns, self.quote_name, col_suffixes=col_suffixes)
1052 
1053     def _model_indexes_sql(self, model):
1054         """
1055         Return a list of all index SQL statements (field indexes,
1056         index_together, Meta.indexes) for the specified model.
1057         """
1058         if not model._meta.managed or model._meta.proxy or model._meta.swapped:
1059             return []
1060         output = []
1061         for field in model._meta.local_fields:
1062             output.extend(self._field_indexes_sql(model, field))
1063 
1064         for field_names in model._meta.index_together:
1065             fields = [model._meta.get_field(field) for field in field_names]
1066             output.append(self._create_index_sql(model, fields=fields, suffix='_idx'))
1067 
1068         for index in model._meta.indexes:
1069             if (
1070                 not index.contains_expressions or
1071                 self.connection.features.supports_expression_indexes
1072             ):
1073                 output.append(index.create_sql(model, self))
1074         return output
1075 
1076     def _field_indexes_sql(self, model, field):
1077         """
1078         Return a list of all index SQL statements for the specified field.
1079         """
1080         output = []
1081         if self._field_should_be_indexed(model, field):
1082             output.append(self._create_index_sql(model, fields=[field]))
1083         return output
1084 
1085     def _field_should_be_altered(self, old_field, new_field):
1086         _, old_path, old_args, old_kwargs = old_field.deconstruct()
1087         _, new_path, new_args, new_kwargs = new_field.deconstruct()
1088         # Don't alter when:
1089         # - changing only a field name
1090         # - changing an attribute that doesn't affect the schema
1091         # - adding only a db_column and the column name is not changed
1092         non_database_attrs = [
1093             'blank',
1094             'db_column',
1095             'editable',
1096             'error_messages',
1097             'help_text',
1098             'limit_choices_to',
1099             # Database-level options are not supported, see #21961.
1100             'on_delete',
1101             'related_name',
1102             'related_query_name',
1103             'validators',
1104             'verbose_name',
1105         ]
1106         for attr in non_database_attrs:
1107             old_kwargs.pop(attr, None)
1108             new_kwargs.pop(attr, None)
1109         return (
1110             self.quote_name(old_field.column) != self.quote_name(new_field.column) or
1111             (old_path, old_args, old_kwargs) != (new_path, new_args, new_kwargs)
1112         )
1113 
1114     def _field_should_be_indexed(self, model, field):
1115         return field.db_index and not field.unique
1116 
1117     def _field_became_primary_key(self, old_field, new_field):
1118         return not old_field.primary_key and new_field.primary_key
1119 
1120     def _unique_should_be_added(self, old_field, new_field):
1121         return (not old_field.unique and new_field.unique) or (
1122             old_field.primary_key and not new_field.primary_key and new_field.unique
1123         )
1124 
1125     def _rename_field_sql(self, table, old_field, new_field, new_type):
1126         return self.sql_rename_column % {
1127             "table": self.quote_name(table),
1128             "old_column": self.quote_name(old_field.column),
1129             "new_column": self.quote_name(new_field.column),
1130             "type": new_type,
1131         }
1132 
1133     def _create_fk_sql(self, model, field, suffix):
1134         table = Table(model._meta.db_table, self.quote_name)
1135         name = self._fk_constraint_name(model, field, suffix)
1136         column = Columns(model._meta.db_table, [field.column], self.quote_name)
1137         to_table = Table(field.target_field.model._meta.db_table, self.quote_name)
1138         to_column = Columns(field.target_field.model._meta.db_table, [field.target_field.column], self.quote_name)
1139         deferrable = self.connection.ops.deferrable_sql()
1140         return Statement(
1141             self.sql_create_fk,
1142             table=table,
1143             name=name,
1144             column=column,
1145             to_table=to_table,
1146             to_column=to_column,
1147             deferrable=deferrable,
1148         )
1149 
1150     def _fk_constraint_name(self, model, field, suffix):
1151         def create_fk_name(*args, **kwargs):
1152             return self.quote_name(self._create_index_name(*args, **kwargs))
1153 
1154         return ForeignKeyName(
1155             model._meta.db_table,
1156             [field.column],
1157             split_identifier(field.target_field.model._meta.db_table)[1],
1158             [field.target_field.column],
1159             suffix,
1160             create_fk_name,
1161         )
1162 
1163     def _delete_fk_sql(self, model, name):
1164         return self._delete_constraint_sql(self.sql_delete_fk, model, name)
1165 
1166     def _deferrable_constraint_sql(self, deferrable):
1167         if deferrable is None:
1168             return ''
1169         if deferrable == Deferrable.DEFERRED:
1170             return ' DEFERRABLE INITIALLY DEFERRED'
1171         if deferrable == Deferrable.IMMEDIATE:
1172             return ' DEFERRABLE INITIALLY IMMEDIATE'
1173 
1174     def _unique_sql(
1175         self, model, fields, name, condition=None, deferrable=None,
1176         include=None, opclasses=None,
1177     ):
1178         if (
1179             deferrable and
1180             not self.connection.features.supports_deferrable_unique_constraints
1181         ):
1182             return None
1183         if condition or include or opclasses:
1184             # Databases support conditional and covering unique constraints via
1185             # a unique index.
1186             sql = self._create_unique_sql(
1187                 model,
1188                 fields,
1189                 name=name,
1190                 condition=condition,
1191                 include=include,
1192                 opclasses=opclasses,
1193             )
1194             if sql:
1195                 self.deferred_sql.append(sql)
1196             return None
1197         constraint = self.sql_unique_constraint % {
1198             'columns': ', '.join(map(self.quote_name, fields)),
1199             'deferrable': self._deferrable_constraint_sql(deferrable),
1200         }
1201         return self.sql_constraint % {
1202             'name': self.quote_name(name),
1203             'constraint': constraint,
1204         }
1205 
1206     def _create_unique_sql(
1207         self, model, columns, name=None, condition=None, deferrable=None,
1208         include=None, opclasses=None,
1209     ):
1210         if (
1211             (
1212                 deferrable and
1213                 not self.connection.features.supports_deferrable_unique_constraints
1214             ) or
1215             (condition and not self.connection.features.supports_partial_indexes) or
1216             (include and not self.connection.features.supports_covering_indexes)
1217         ):
1218             return None
1219 
1220         def create_unique_name(*args, **kwargs):
1221             return self.quote_name(self._create_index_name(*args, **kwargs))
1222 
1223         table = Table(model._meta.db_table, self.quote_name)
1224         if name is None:
1225             name = IndexName(model._meta.db_table, columns, '_uniq', create_unique_name)
1226         else:
1227             name = self.quote_name(name)
1228         columns = self._index_columns(table, columns, col_suffixes=(), opclasses=opclasses)
1229         if condition or include or opclasses:
1230             sql = self.sql_create_unique_index
1231         else:
1232             sql = self.sql_create_unique
1233         return Statement(
1234             sql,
1235             table=table,
1236             name=name,
1237             columns=columns,
1238             condition=self._index_condition_sql(condition),
1239             deferrable=self._deferrable_constraint_sql(deferrable),
1240             include=self._index_include_sql(model, include),
1241         )
1242 
1243     def _delete_unique_sql(
1244         self, model, name, condition=None, deferrable=None, include=None,
1245         opclasses=None,
1246     ):
1247         if (
1248             (
1249                 deferrable and
1250                 not self.connection.features.supports_deferrable_unique_constraints
1251             ) or
1252             (condition and not self.connection.features.supports_partial_indexes) or
1253             (include and not self.connection.features.supports_covering_indexes)
1254         ):
1255             return None
1256         if condition or include or opclasses:
1257             sql = self.sql_delete_index
1258         else:
1259             sql = self.sql_delete_unique
1260         return self._delete_constraint_sql(sql, model, name)
1261 
1262     def _check_sql(self, name, check):
1263         return self.sql_constraint % {
1264             'name': self.quote_name(name),
1265             'constraint': self.sql_check_constraint % {'check': check},
1266         }
1267 
1268     def _create_check_sql(self, model, name, check):
1269         return Statement(
1270             self.sql_create_check,
1271             table=Table(model._meta.db_table, self.quote_name),
1272             name=self.quote_name(name),
1273             check=check,
1274         )
1275 
1276     def _delete_check_sql(self, model, name):
1277         return self._delete_constraint_sql(self.sql_delete_check, model, name)
1278 
1279     def _delete_constraint_sql(self, template, model, name):
1280         return Statement(
1281             template,
1282             table=Table(model._meta.db_table, self.quote_name),
1283             name=self.quote_name(name),
1284         )
1285 
1286     def _constraint_names(self, model, column_names=None, unique=None,
1287                           primary_key=None, index=None, foreign_key=None,
1288                           check=None, type_=None, exclude=None):
1289         """Return all constraint names matching the columns and conditions."""
1290         if column_names is not None:
1291             column_names = [
1292                 self.connection.introspection.identifier_converter(name)
1293                 for name in column_names
1294             ]
1295         with self.connection.cursor() as cursor:
1296             constraints = self.connection.introspection.get_constraints(cursor, model._meta.db_table)
1297         result = []
1298         for name, infodict in constraints.items():
1299             if column_names is None or column_names == infodict['columns']:
1300                 if unique is not None and infodict['unique'] != unique:
1301                     continue
1302                 if primary_key is not None and infodict['primary_key'] != primary_key:
1303                     continue
1304                 if index is not None and infodict['index'] != index:
1305                     continue
1306                 if check is not None and infodict['check'] != check:
1307                     continue
1308                 if foreign_key is not None and not infodict['foreign_key']:
1309                     continue
1310                 if type_ is not None and infodict['type'] != type_:
1311                     continue
1312                 if not exclude or name not in exclude:
1313                     result.append(name)
1314         return result
1315 
1316     def _delete_primary_key(self, model, strict=False):
1317         constraint_names = self._constraint_names(model, primary_key=True)
1318         if strict and len(constraint_names) != 1:
1319             raise ValueError('Found wrong number (%s) of PK constraints for %s' % (
1320                 len(constraint_names),
1321                 model._meta.db_table,
1322             ))
1323         for constraint_name in constraint_names:
1324             self.execute(self._delete_primary_key_sql(model, constraint_name))
1325 
1326     def _create_primary_key_sql(self, model, field):
1327         return Statement(
1328             self.sql_create_pk,
1329             table=Table(model._meta.db_table, self.quote_name),
1330             name=self.quote_name(
1331                 self._create_index_name(model._meta.db_table, [field.column], suffix="_pk")
1332             ),
1333             columns=Columns(model._meta.db_table, [field.column], self.quote_name),
1334         )
1335 
1336     def _delete_primary_key_sql(self, model, name):
1337         return self._delete_constraint_sql(self.sql_delete_pk, model, name)
1338 
1339     def _collate_sql(self, collation):
1340         return ' COLLATE ' + self.quote_name(collation)
1341 
1342     def remove_procedure(self, procedure_name, param_types=()):
1343         sql = self.sql_delete_procedure % {
1344             'procedure': self.quote_name(procedure_name),
1345             'param_types': ','.join(param_types),
1346         }
1347         self.execute(sql)

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>]
2025-10-17 12:43:14.327 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-17 12:43:14.327 | INFO     | Search-only: skipping patch selection
2025-10-17 12:43:14.479 | INFO     | Task django__django-13886 completed successfully.
2025-10-17 12:43:14.480 | INFO     | No patch generated. You can try running ACR again.
