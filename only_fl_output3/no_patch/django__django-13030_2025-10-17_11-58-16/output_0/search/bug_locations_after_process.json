[
    {
        "rel_file_path": "django/db/models/query.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/db/models/query.py",
        "start": 1,
        "end": 1979,
        "class_name": null,
        "method_name": null,
        "code": "1 \"\"\"\n2 The main QuerySet implementation. This provides the public API for the ORM.\n3 \"\"\"\n4 \n5 import copy\n6 import operator\n7 import warnings\n8 from collections import namedtuple\n9 from functools import lru_cache\n10 from itertools import chain\n11 \n12 import django\n13 from django.conf import settings\n14 from django.core import exceptions\n15 from django.db import (\n16     DJANGO_VERSION_PICKLE_KEY, IntegrityError, NotSupportedError, connections,\n17     router, transaction,\n18 )\n19 from django.db.models import AutoField, DateField, DateTimeField, sql\n20 from django.db.models.constants import LOOKUP_SEP\n21 from django.db.models.deletion import Collector\n22 from django.db.models.expressions import Case, Expression, F, Value, When\n23 from django.db.models.functions import Cast, Trunc\n24 from django.db.models.query_utils import FilteredRelation, Q\n25 from django.db.models.sql.constants import CURSOR, GET_ITERATOR_CHUNK_SIZE\n26 from django.db.models.utils import resolve_callables\n27 from django.utils import timezone\n28 from django.utils.functional import cached_property, partition\n29 \n30 # The maximum number of results to fetch in a get() query.\n31 MAX_GET_RESULTS = 21\n32 \n33 # The maximum number of items to display in a QuerySet.__repr__\n34 REPR_OUTPUT_SIZE = 20\n35 \n36 \n37 class BaseIterable:\n38     def __init__(self, queryset, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE):\n39         self.queryset = queryset\n40         self.chunked_fetch = chunked_fetch\n41         self.chunk_size = chunk_size\n42 \n43 \n44 class ModelIterable(BaseIterable):\n45     \"\"\"Iterable that yields a model instance for each row.\"\"\"\n46 \n47     def __iter__(self):\n48         queryset = self.queryset\n49         db = queryset.db\n50         compiler = queryset.query.get_compiler(using=db)\n51         # Execute the query. This will also fill compiler.select, klass_info,\n52         # and annotations.\n53         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\n54         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,\n55                                                   compiler.annotation_col_map)\n56         model_cls = klass_info['model']\n57         select_fields = klass_info['select_fields']\n58         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1\n59         init_list = [f[0].target.attname\n60                      for f in select[model_fields_start:model_fields_end]]\n61         related_populators = get_related_populators(klass_info, select, db)\n62         known_related_objects = [\n63             (field, related_objs, operator.attrgetter(*[\n64                 field.attname\n65                 if from_field == 'self' else\n66                 queryset.model._meta.get_field(from_field).attname\n67                 for from_field in field.from_fields\n68             ])) for field, related_objs in queryset._known_related_objects.items()\n69         ]\n70         for row in compiler.results_iter(results):\n71             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])\n72             for rel_populator in related_populators:\n73                 rel_populator.populate(row, obj)\n74             if annotation_col_map:\n75                 for attr_name, col_pos in annotation_col_map.items():\n76                     setattr(obj, attr_name, row[col_pos])\n77 \n78             # Add the known related objects to the model.\n79             for field, rel_objs, rel_getter in known_related_objects:\n80                 # Avoid overwriting objects loaded by, e.g., select_related().\n81                 if field.is_cached(obj):\n82                     continue\n83                 rel_obj_id = rel_getter(obj)\n84                 try:\n85                     rel_obj = rel_objs[rel_obj_id]\n86                 except KeyError:\n87                     pass  # May happen in qs1 | qs2 scenarios.\n88                 else:\n89                     setattr(obj, field.name, rel_obj)\n90 \n91             yield obj\n92 \n93 \n94 class ValuesIterable(BaseIterable):\n95     \"\"\"\n96     Iterable returned by QuerySet.values() that yields a dict for each row.\n97     \"\"\"\n98 \n99     def __iter__(self):\n100         queryset = self.queryset\n101         query = queryset.query\n102         compiler = query.get_compiler(queryset.db)\n103 \n104         # extra(select=...) cols are always at the start of the row.\n105         names = [\n106             *query.extra_select,\n107             *query.values_select,\n108             *query.annotation_select,\n109         ]\n110         indexes = range(len(names))\n111         for row in compiler.results_iter(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size):\n112             yield {names[i]: row[i] for i in indexes}\n113 \n114 \n115 class ValuesListIterable(BaseIterable):\n116     \"\"\"\n117     Iterable returned by QuerySet.values_list(flat=False) that yields a tuple\n118     for each row.\n119     \"\"\"\n120 \n121     def __iter__(self):\n122         queryset = self.queryset\n123         query = queryset.query\n124         compiler = query.get_compiler(queryset.db)\n125 \n126         if queryset._fields:\n127             # extra(select=...) cols are always at the start of the row.\n128             names = [\n129                 *query.extra_select,\n130                 *query.values_select,\n131                 *query.annotation_select,\n132             ]\n133             fields = [*queryset._fields, *(f for f in query.annotation_select if f not in queryset._fields)]\n134             if fields != names:\n135                 # Reorder according to fields.\n136                 index_map = {name: idx for idx, name in enumerate(names)}\n137                 rowfactory = operator.itemgetter(*[index_map[f] for f in fields])\n138                 return map(\n139                     rowfactory,\n140                     compiler.results_iter(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\n141                 )\n142         return compiler.results_iter(tuple_expected=True, chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\n143 \n144 \n145 class NamedValuesListIterable(ValuesListIterable):\n146     \"\"\"\n147     Iterable returned by QuerySet.values_list(named=True) that yields a\n148     namedtuple for each row.\n149     \"\"\"\n150 \n151     @staticmethod\n152     @lru_cache()\n153     def create_namedtuple_class(*names):\n154         # Cache namedtuple() with @lru_cache() since it's too slow to be\n155         # called for every QuerySet evaluation.\n156         return namedtuple('Row', names)\n157 \n158     def __iter__(self):\n159         queryset = self.queryset\n160         if queryset._fields:\n161             names = queryset._fields\n162         else:\n163             query = queryset.query\n164             names = [*query.extra_select, *query.values_select, *query.annotation_select]\n165         tuple_class = self.create_namedtuple_class(*names)\n166         new = tuple.__new__\n167         for row in super().__iter__():\n168             yield new(tuple_class, row)\n169 \n170 \n171 class FlatValuesListIterable(BaseIterable):\n172     \"\"\"\n173     Iterable returned by QuerySet.values_list(flat=True) that yields single\n174     values.\n175     \"\"\"\n176 \n177     def __iter__(self):\n178         queryset = self.queryset\n179         compiler = queryset.query.get_compiler(queryset.db)\n180         for row in compiler.results_iter(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size):\n181             yield row[0]\n182 \n183 \n184 class QuerySet:\n185     \"\"\"Represent a lazy database lookup for a set of objects.\"\"\"\n186 \n187     def __init__(self, model=None, query=None, using=None, hints=None):\n188         self.model = model\n189         self._db = using\n190         self._hints = hints or {}\n191         self._query = query or sql.Query(self.model)\n192         self._result_cache = None\n193         self._sticky_filter = False\n194         self._for_write = False\n195         self._prefetch_related_lookups = ()\n196         self._prefetch_done = False\n197         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}\n198         self._iterable_class = ModelIterable\n199         self._fields = None\n200         self._defer_next_filter = False\n201         self._deferred_filter = None\n202 \n203     @property\n204     def query(self):\n205         if self._deferred_filter:\n206             negate, args, kwargs = self._deferred_filter\n207             self._filter_or_exclude_inplace(negate, *args, **kwargs)\n208             self._deferred_filter = None\n209         return self._query\n210 \n211     @query.setter\n212     def query(self, value):\n213         self._query = value\n214 \n215     def as_manager(cls):\n216         # Address the circular dependency between `Queryset` and `Manager`.\n217         from django.db.models.manager import Manager\n218         manager = Manager.from_queryset(cls)()\n219         manager._built_with_as_manager = True\n220         return manager\n221     as_manager.queryset_only = True\n222     as_manager = classmethod(as_manager)\n223 \n224     ########################\n225     # PYTHON MAGIC METHODS #\n226     ########################\n227 \n228     def __deepcopy__(self, memo):\n229         \"\"\"Don't populate the QuerySet's cache.\"\"\"\n230         obj = self.__class__()\n231         for k, v in self.__dict__.items():\n232             if k == '_result_cache':\n233                 obj.__dict__[k] = None\n234             else:\n235                 obj.__dict__[k] = copy.deepcopy(v, memo)\n236         return obj\n237 \n238     def __getstate__(self):\n239         # Force the cache to be fully populated.\n240         self._fetch_all()\n241         return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n242 \n243     def __setstate__(self, state):\n244         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)\n245         if pickled_version:\n246             if pickled_version != django.__version__:\n247                 warnings.warn(\n248                     \"Pickled queryset instance's Django version %s does not \"\n249                     \"match the current version %s.\"\n250                     % (pickled_version, django.__version__),\n251                     RuntimeWarning,\n252                     stacklevel=2,\n253                 )\n254         else:\n255             warnings.warn(\n256                 \"Pickled queryset instance's Django version is not specified.\",\n257                 RuntimeWarning,\n258                 stacklevel=2,\n259             )\n260         self.__dict__.update(state)\n261 \n262     def __repr__(self):\n263         data = list(self[:REPR_OUTPUT_SIZE + 1])\n264         if len(data) > REPR_OUTPUT_SIZE:\n265             data[-1] = \"...(remaining elements truncated)...\"\n266         return '<%s %r>' % (self.__class__.__name__, data)\n267 \n268     def __len__(self):\n269         self._fetch_all()\n270         return len(self._result_cache)\n271 \n272     def __iter__(self):\n273         \"\"\"\n274         The queryset iterator protocol uses three nested iterators in the\n275         default case:\n276             1. sql.compiler.execute_sql()\n277                - Returns 100 rows at time (constants.GET_ITERATOR_CHUNK_SIZE)\n278                  using cursor.fetchmany(). This part is responsible for\n279                  doing some column masking, and returning the rows in chunks.\n280             2. sql.compiler.results_iter()\n281                - Returns one row at time. At this point the rows are still just\n282                  tuples. In some cases the return values are converted to\n283                  Python values at this location.\n284             3. self.iterator()\n285                - Responsible for turning the rows into model objects.\n286         \"\"\"\n287         self._fetch_all()\n288         return iter(self._result_cache)\n289 \n290     def __bool__(self):\n291         self._fetch_all()\n292         return bool(self._result_cache)\n293 \n294     def __getitem__(self, k):\n295         \"\"\"Retrieve an item or slice from the set of results.\"\"\"\n296         if not isinstance(k, (int, slice)):\n297             raise TypeError(\n298                 'QuerySet indices must be integers or slices, not %s.'\n299                 % type(k).__name__\n300             )\n301         assert ((not isinstance(k, slice) and (k >= 0)) or\n302                 (isinstance(k, slice) and (k.start is None or k.start >= 0) and\n303                  (k.stop is None or k.stop >= 0))), \\\n304             \"Negative indexing is not supported.\"\n305 \n306         if self._result_cache is not None:\n307             return self._result_cache[k]\n308 \n309         if isinstance(k, slice):\n310             qs = self._chain()\n311             if k.start is not None:\n312                 start = int(k.start)\n313             else:\n314                 start = None\n315             if k.stop is not None:\n316                 stop = int(k.stop)\n317             else:\n318                 stop = None\n319             qs.query.set_limits(start, stop)\n320             return list(qs)[::k.step] if k.step else qs\n321 \n322         qs = self._chain()\n323         qs.query.set_limits(k, k + 1)\n324         qs._fetch_all()\n325         return qs._result_cache[0]\n326 \n327     def __class_getitem__(cls, *args, **kwargs):\n328         return cls\n329 \n330     def __and__(self, other):\n331         self._merge_sanity_check(other)\n332         if isinstance(other, EmptyQuerySet):\n333             return other\n334         if isinstance(self, EmptyQuerySet):\n335             return self\n336         combined = self._chain()\n337         combined._merge_known_related_objects(other)\n338         combined.query.combine(other.query, sql.AND)\n339         return combined\n340 \n341     def __or__(self, other):\n342         self._merge_sanity_check(other)\n343         if isinstance(self, EmptyQuerySet):\n344             return other\n345         if isinstance(other, EmptyQuerySet):\n346             return self\n347         query = self if self.query.can_filter() else self.model._base_manager.filter(pk__in=self.values('pk'))\n348         combined = query._chain()\n349         combined._merge_known_related_objects(other)\n350         if not other.query.can_filter():\n351             other = other.model._base_manager.filter(pk__in=other.values('pk'))\n352         combined.query.combine(other.query, sql.OR)\n353         return combined\n354 \n355     ####################################\n356     # METHODS THAT DO DATABASE QUERIES #\n357     ####################################\n358 \n359     def _iterator(self, use_chunked_fetch, chunk_size):\n360         yield from self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size)\n361 \n362     def iterator(self, chunk_size=2000):\n363         \"\"\"\n364         An iterator over the results from applying this QuerySet to the\n365         database.\n366         \"\"\"\n367         if chunk_size <= 0:\n368             raise ValueError('Chunk size must be strictly positive.')\n369         use_chunked_fetch = not connections[self.db].settings_dict.get('DISABLE_SERVER_SIDE_CURSORS')\n370         return self._iterator(use_chunked_fetch, chunk_size)\n371 \n372     def aggregate(self, *args, **kwargs):\n373         \"\"\"\n374         Return a dictionary containing the calculations (aggregation)\n375         over the current queryset.\n376 \n377         If args is present the expression is passed as a kwarg using\n378         the Aggregate object's default alias.\n379         \"\"\"\n380         if self.query.distinct_fields:\n381             raise NotImplementedError(\"aggregate() + distinct(fields) not implemented.\")\n382         self._validate_values_are_expressions((*args, *kwargs.values()), method_name='aggregate')\n383         for arg in args:\n384             # The default_alias property raises TypeError if default_alias\n385             # can't be set automatically or AttributeError if it isn't an\n386             # attribute.\n387             try:\n388                 arg.default_alias\n389             except (AttributeError, TypeError):\n390                 raise TypeError(\"Complex aggregates require an alias\")\n391             kwargs[arg.default_alias] = arg\n392 \n393         query = self.query.chain()\n394         for (alias, aggregate_expr) in kwargs.items():\n395             query.add_annotation(aggregate_expr, alias, is_summary=True)\n396             if not query.annotations[alias].contains_aggregate:\n397                 raise TypeError(\"%s is not an aggregate expression\" % alias)\n398         return query.get_aggregation(self.db, kwargs)\n399 \n400     def count(self):\n401         \"\"\"\n402         Perform a SELECT COUNT() and return the number of records as an\n403         integer.\n404 \n405         If the QuerySet is already fully cached, return the length of the\n406         cached results set to avoid multiple SELECT COUNT(*) calls.\n407         \"\"\"\n408         if self._result_cache is not None:\n409             return len(self._result_cache)\n410 \n411         return self.query.get_count(using=self.db)\n412 \n413     def get(self, *args, **kwargs):\n414         \"\"\"\n415         Perform the query and return a single object matching the given\n416         keyword arguments.\n417         \"\"\"\n418         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)\n419         if self.query.can_filter() and not self.query.distinct_fields:\n420             clone = clone.order_by()\n421         limit = None\n422         if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:\n423             limit = MAX_GET_RESULTS\n424             clone.query.set_limits(high=limit)\n425         num = len(clone)\n426         if num == 1:\n427             return clone._result_cache[0]\n428         if not num:\n429             raise self.model.DoesNotExist(\n430                 \"%s matching query does not exist.\" %\n431                 self.model._meta.object_name\n432             )\n433         raise self.model.MultipleObjectsReturned(\n434             'get() returned more than one %s -- it returned %s!' % (\n435                 self.model._meta.object_name,\n436                 num if not limit or num < limit else 'more than %s' % (limit - 1),\n437             )\n438         )\n439 \n440     def create(self, **kwargs):\n441         \"\"\"\n442         Create a new object with the given kwargs, saving it to the database\n443         and returning the created object.\n444         \"\"\"\n445         obj = self.model(**kwargs)\n446         self._for_write = True\n447         obj.save(force_insert=True, using=self.db)\n448         return obj\n449 \n450     def _populate_pk_values(self, objs):\n451         for obj in objs:\n452             if obj.pk is None:\n453                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)\n454 \n455     def bulk_create(self, objs, batch_size=None, ignore_conflicts=False):\n456         \"\"\"\n457         Insert each of the instances into the database. Do *not* call\n458         save() on each of the instances, do not send any pre/post_save\n459         signals, and do not set the primary key attribute if it is an\n460         autoincrement field (except if features.can_return_rows_from_bulk_insert=True).\n461         Multi-table models are not supported.\n462         \"\"\"\n463         # When you bulk insert you don't get the primary keys back (if it's an\n464         # autoincrement, except if can_return_rows_from_bulk_insert=True), so\n465         # you can't insert into the child tables which references this. There\n466         # are two workarounds:\n467         # 1) This could be implemented if you didn't have an autoincrement pk\n468         # 2) You could do it by doing O(n) normal inserts into the parent\n469         #    tables to get the primary keys back and then doing a single bulk\n470         #    insert into the childmost table.\n471         # We currently set the primary keys on the objects when using\n472         # PostgreSQL via the RETURNING ID clause. It should be possible for\n473         # Oracle as well, but the semantics for extracting the primary keys is\n474         # trickier so it's not done yet.\n475         assert batch_size is None or batch_size > 0\n476         # Check that the parents share the same concrete model with the our\n477         # model to detect the inheritance pattern ConcreteGrandParent ->\n478         # MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy\n479         # would not identify that case as involving multiple tables.\n480         for parent in self.model._meta.get_parent_list():\n481             if parent._meta.concrete_model is not self.model._meta.concrete_model:\n482                 raise ValueError(\"Can't bulk create a multi-table inherited model\")\n483         if not objs:\n484             return objs\n485         self._for_write = True\n486         connection = connections[self.db]\n487         opts = self.model._meta\n488         fields = opts.concrete_fields\n489         objs = list(objs)\n490         self._populate_pk_values(objs)\n491         with transaction.atomic(using=self.db, savepoint=False):\n492             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)\n493             if objs_with_pk:\n494                 returned_columns = self._batched_insert(\n495                     objs_with_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,\n496                 )\n497                 for obj_with_pk, results in zip(objs_with_pk, returned_columns):\n498                     for result, field in zip(results, opts.db_returning_fields):\n499                         if field != opts.pk:\n500                             setattr(obj_with_pk, field.attname, result)\n501                 for obj_with_pk in objs_with_pk:\n502                     obj_with_pk._state.adding = False\n503                     obj_with_pk._state.db = self.db\n504             if objs_without_pk:\n505                 fields = [f for f in fields if not isinstance(f, AutoField)]\n506                 returned_columns = self._batched_insert(\n507                     objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,\n508                 )\n509                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:\n510                     assert len(returned_columns) == len(objs_without_pk)\n511                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n512                     for result, field in zip(results, opts.db_returning_fields):\n513                         setattr(obj_without_pk, field.attname, result)\n514                     obj_without_pk._state.adding = False\n515                     obj_without_pk._state.db = self.db\n516 \n517         return objs\n518 \n519     def bulk_update(self, objs, fields, batch_size=None):\n520         \"\"\"\n521         Update the given fields in each of the given objects in the database.\n522         \"\"\"\n523         if batch_size is not None and batch_size < 0:\n524             raise ValueError('Batch size must be a positive integer.')\n525         if not fields:\n526             raise ValueError('Field names must be given to bulk_update().')\n527         objs = tuple(objs)\n528         if any(obj.pk is None for obj in objs):\n529             raise ValueError('All bulk_update() objects must have a primary key set.')\n530         fields = [self.model._meta.get_field(name) for name in fields]\n531         if any(not f.concrete or f.many_to_many for f in fields):\n532             raise ValueError('bulk_update() can only be used with concrete fields.')\n533         if any(f.primary_key for f in fields):\n534             raise ValueError('bulk_update() cannot be used with primary key fields.')\n535         if not objs:\n536             return\n537         # PK is used twice in the resulting update query, once in the filter\n538         # and once in the WHEN. Each field will also have one CAST.\n539         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)\n540         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size\n541         requires_casting = connections[self.db].features.requires_casted_case_in_updates\n542         batches = (objs[i:i + batch_size] for i in range(0, len(objs), batch_size))\n543         updates = []\n544         for batch_objs in batches:\n545             update_kwargs = {}\n546             for field in fields:\n547                 when_statements = []\n548                 for obj in batch_objs:\n549                     attr = getattr(obj, field.attname)\n550                     if not isinstance(attr, Expression):\n551                         attr = Value(attr, output_field=field)\n552                     when_statements.append(When(pk=obj.pk, then=attr))\n553                 case_statement = Case(*when_statements, output_field=field)\n554                 if requires_casting:\n555                     case_statement = Cast(case_statement, output_field=field)\n556                 update_kwargs[field.attname] = case_statement\n557             updates.append(([obj.pk for obj in batch_objs], update_kwargs))\n558         with transaction.atomic(using=self.db, savepoint=False):\n559             for pks, update_kwargs in updates:\n560                 self.filter(pk__in=pks).update(**update_kwargs)\n561     bulk_update.alters_data = True\n562 \n563     def get_or_create(self, defaults=None, **kwargs):\n564         \"\"\"\n565         Look up an object with the given kwargs, creating one if necessary.\n566         Return a tuple of (object, created), where created is a boolean\n567         specifying whether an object was created.\n568         \"\"\"\n569         # The get() needs to be targeted at the write database in order\n570         # to avoid potential transaction consistency problems.\n571         self._for_write = True\n572         try:\n573             return self.get(**kwargs), False\n574         except self.model.DoesNotExist:\n575             params = self._extract_model_params(defaults, **kwargs)\n576             return self._create_object_from_params(kwargs, params)\n577 \n578     def update_or_create(self, defaults=None, **kwargs):\n579         \"\"\"\n580         Look up an object with the given kwargs, updating one with defaults\n581         if it exists, otherwise create a new one.\n582         Return a tuple (object, created), where created is a boolean\n583         specifying whether an object was created.\n584         \"\"\"\n585         defaults = defaults or {}\n586         self._for_write = True\n587         with transaction.atomic(using=self.db):\n588             try:\n589                 obj = self.select_for_update().get(**kwargs)\n590             except self.model.DoesNotExist:\n591                 params = self._extract_model_params(defaults, **kwargs)\n592                 # Lock the row so that a concurrent update is blocked until\n593                 # after update_or_create() has performed its save.\n594                 obj, created = self._create_object_from_params(kwargs, params, lock=True)\n595                 if created:\n596                     return obj, created\n597             for k, v in resolve_callables(defaults):\n598                 setattr(obj, k, v)\n599             obj.save(using=self.db)\n600         return obj, False\n601 \n602     def _create_object_from_params(self, lookup, params, lock=False):\n603         \"\"\"\n604         Try to create an object using passed params. Used by get_or_create()\n605         and update_or_create().\n606         \"\"\"\n607         try:\n608             with transaction.atomic(using=self.db):\n609                 params = dict(resolve_callables(params))\n610                 obj = self.create(**params)\n611             return obj, True\n612         except IntegrityError:\n613             try:\n614                 qs = self.select_for_update() if lock else self\n615                 return qs.get(**lookup), False\n616             except self.model.DoesNotExist:\n617                 pass\n618             raise\n619 \n620     def _extract_model_params(self, defaults, **kwargs):\n621         \"\"\"\n622         Prepare `params` for creating a model instance based on the given\n623         kwargs; for use by get_or_create() and update_or_create().\n624         \"\"\"\n625         defaults = defaults or {}\n626         params = {k: v for k, v in kwargs.items() if LOOKUP_SEP not in k}\n627         params.update(defaults)\n628         property_names = self.model._meta._property_names\n629         invalid_params = []\n630         for param in params:\n631             try:\n632                 self.model._meta.get_field(param)\n633             except exceptions.FieldDoesNotExist:\n634                 # It's okay to use a model's property if it has a setter.\n635                 if not (param in property_names and getattr(self.model, param).fset):\n636                     invalid_params.append(param)\n637         if invalid_params:\n638             raise exceptions.FieldError(\n639                 \"Invalid field name(s) for model %s: '%s'.\" % (\n640                     self.model._meta.object_name,\n641                     \"', '\".join(sorted(invalid_params)),\n642                 ))\n643         return params\n644 \n645     def _earliest(self, *fields):\n646         \"\"\"\n647         Return the earliest object according to fields (if given) or by the\n648         model's Meta.get_latest_by.\n649         \"\"\"\n650         if fields:\n651             order_by = fields\n652         else:\n653             order_by = getattr(self.model._meta, 'get_latest_by')\n654             if order_by and not isinstance(order_by, (tuple, list)):\n655                 order_by = (order_by,)\n656         if order_by is None:\n657             raise ValueError(\n658                 \"earliest() and latest() require either fields as positional \"\n659                 \"arguments or 'get_latest_by' in the model's Meta.\"\n660             )\n661 \n662         assert not self.query.is_sliced, \\\n663             \"Cannot change a query once a slice has been taken.\"\n664         obj = self._chain()\n665         obj.query.set_limits(high=1)\n666         obj.query.clear_ordering(force_empty=True)\n667         obj.query.add_ordering(*order_by)\n668         return obj.get()\n669 \n670     def earliest(self, *fields):\n671         return self._earliest(*fields)\n672 \n673     def latest(self, *fields):\n674         return self.reverse()._earliest(*fields)\n675 \n676     def first(self):\n677         \"\"\"Return the first object of a query or None if no match is found.\"\"\"\n678         for obj in (self if self.ordered else self.order_by('pk'))[:1]:\n679             return obj\n680 \n681     def last(self):\n682         \"\"\"Return the last object of a query or None if no match is found.\"\"\"\n683         for obj in (self.reverse() if self.ordered else self.order_by('-pk'))[:1]:\n684             return obj\n685 \n686     def in_bulk(self, id_list=None, *, field_name='pk'):\n687         \"\"\"\n688         Return a dictionary mapping each of the given IDs to the object with\n689         that ID. If `id_list` isn't provided, evaluate the entire QuerySet.\n690         \"\"\"\n691         assert not self.query.is_sliced, \\\n692             \"Cannot use 'limit' or 'offset' with in_bulk\"\n693         opts = self.model._meta\n694         unique_fields = [\n695             constraint.fields[0]\n696             for constraint in opts.total_unique_constraints\n697             if len(constraint.fields) == 1\n698         ]\n699         if (\n700             field_name != 'pk' and\n701             not opts.get_field(field_name).unique and\n702             field_name not in unique_fields\n703         ):\n704             raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n705         if id_list is not None:\n706             if not id_list:\n707                 return {}\n708             filter_key = '{}__in'.format(field_name)\n709             batch_size = connections[self.db].features.max_query_params\n710             id_list = tuple(id_list)\n711             # If the database has a limit on the number of query parameters\n712             # (e.g. SQLite), retrieve objects in batches if necessary.\n713             if batch_size and batch_size < len(id_list):\n714                 qs = ()\n715                 for offset in range(0, len(id_list), batch_size):\n716                     batch = id_list[offset:offset + batch_size]\n717                     qs += tuple(self.filter(**{filter_key: batch}).order_by())\n718             else:\n719                 qs = self.filter(**{filter_key: id_list}).order_by()\n720         else:\n721             qs = self._chain()\n722         return {getattr(obj, field_name): obj for obj in qs}\n723 \n724     def delete(self):\n725         \"\"\"Delete the records in the current QuerySet.\"\"\"\n726         self._not_support_combined_queries('delete')\n727         assert not self.query.is_sliced, \\\n728             \"Cannot use 'limit' or 'offset' with delete.\"\n729 \n730         if self._fields is not None:\n731             raise TypeError(\"Cannot call delete() after .values() or .values_list()\")\n732 \n733         del_query = self._chain()\n734 \n735         # The delete is actually 2 queries - one to find related objects,\n736         # and one to delete. Make sure that the discovery of related\n737         # objects is performed on the same database as the deletion.\n738         del_query._for_write = True\n739 \n740         # Disable non-supported fields.\n741         del_query.query.select_for_update = False\n742         del_query.query.select_related = False\n743         del_query.query.clear_ordering(force_empty=True)\n744 \n745         collector = Collector(using=del_query.db)\n746         collector.collect(del_query)\n747         deleted, _rows_count = collector.delete()\n748 \n749         # Clear the result cache, in case this QuerySet gets reused.\n750         self._result_cache = None\n751         return deleted, _rows_count\n752 \n753     delete.alters_data = True\n754     delete.queryset_only = True\n755 \n756     def _raw_delete(self, using):\n757         \"\"\"\n758         Delete objects found from the given queryset in single direct SQL\n759         query. No signals are sent and there is no protection for cascades.\n760         \"\"\"\n761         query = self.query.clone()\n762         query.__class__ = sql.DeleteQuery\n763         cursor = query.get_compiler(using).execute_sql(CURSOR)\n764         if cursor:\n765             with cursor:\n766                 return cursor.rowcount\n767         return 0\n768     _raw_delete.alters_data = True\n769 \n770     def update(self, **kwargs):\n771         \"\"\"\n772         Update all elements in the current QuerySet, setting all the given\n773         fields to the appropriate values.\n774         \"\"\"\n775         self._not_support_combined_queries('update')\n776         assert not self.query.is_sliced, \\\n777             \"Cannot update a query once a slice has been taken.\"\n778         self._for_write = True\n779         query = self.query.chain(sql.UpdateQuery)\n780         query.add_update_values(kwargs)\n781         # Clear any annotations so that they won't be present in subqueries.\n782         query.annotations = {}\n783         with transaction.mark_for_rollback_on_error(using=self.db):\n784             rows = query.get_compiler(self.db).execute_sql(CURSOR)\n785         self._result_cache = None\n786         return rows\n787     update.alters_data = True\n788 \n789     def _update(self, values):\n790         \"\"\"\n791         A version of update() that accepts field objects instead of field names.\n792         Used primarily for model saving and not intended for use by general\n793         code (it requires too much poking around at model internals to be\n794         useful at that level).\n795         \"\"\"\n796         assert not self.query.is_sliced, \\\n797             \"Cannot update a query once a slice has been taken.\"\n798         query = self.query.chain(sql.UpdateQuery)\n799         query.add_update_fields(values)\n800         # Clear any annotations so that they won't be present in subqueries.\n801         query.annotations = {}\n802         self._result_cache = None\n803         return query.get_compiler(self.db).execute_sql(CURSOR)\n804     _update.alters_data = True\n805     _update.queryset_only = False\n806 \n807     def exists(self):\n808         if self._result_cache is None:\n809             return self.query.has_results(using=self.db)\n810         return bool(self._result_cache)\n811 \n812     def _prefetch_related_objects(self):\n813         # This method can only be called once the result cache has been filled.\n814         prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups)\n815         self._prefetch_done = True\n816 \n817     def explain(self, *, format=None, **options):\n818         return self.query.explain(using=self.db, format=format, **options)\n819 \n820     ##################################################\n821     # PUBLIC METHODS THAT RETURN A QUERYSET SUBCLASS #\n822     ##################################################\n823 \n824     def raw(self, raw_query, params=None, translations=None, using=None):\n825         if using is None:\n826             using = self.db\n827         qs = RawQuerySet(raw_query, model=self.model, params=params, translations=translations, using=using)\n828         qs._prefetch_related_lookups = self._prefetch_related_lookups[:]\n829         return qs\n830 \n831     def _values(self, *fields, **expressions):\n832         clone = self._chain()\n833         if expressions:\n834             clone = clone.annotate(**expressions)\n835         clone._fields = fields\n836         clone.query.set_values(fields)\n837         return clone\n838 \n839     def values(self, *fields, **expressions):\n840         fields += tuple(expressions)\n841         clone = self._values(*fields, **expressions)\n842         clone._iterable_class = ValuesIterable\n843         return clone\n844 \n845     def values_list(self, *fields, flat=False, named=False):\n846         if flat and named:\n847             raise TypeError(\"'flat' and 'named' can't be used together.\")\n848         if flat and len(fields) > 1:\n849             raise TypeError(\"'flat' is not valid when values_list is called with more than one field.\")\n850 \n851         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}\n852         _fields = []\n853         expressions = {}\n854         counter = 1\n855         for field in fields:\n856             if hasattr(field, 'resolve_expression'):\n857                 field_id_prefix = getattr(field, 'default_alias', field.__class__.__name__.lower())\n858                 while True:\n859                     field_id = field_id_prefix + str(counter)\n860                     counter += 1\n861                     if field_id not in field_names:\n862                         break\n863                 expressions[field_id] = field\n864                 _fields.append(field_id)\n865             else:\n866                 _fields.append(field)\n867 \n868         clone = self._values(*_fields, **expressions)\n869         clone._iterable_class = (\n870             NamedValuesListIterable if named\n871             else FlatValuesListIterable if flat\n872             else ValuesListIterable\n873         )\n874         return clone\n875 \n876     def dates(self, field_name, kind, order='ASC'):\n877         \"\"\"\n878         Return a list of date objects representing all available dates for\n879         the given field_name, scoped to 'kind'.\n880         \"\"\"\n881         assert kind in ('year', 'month', 'week', 'day'), \\\n882             \"'kind' must be one of 'year', 'month', 'week', or 'day'.\"\n883         assert order in ('ASC', 'DESC'), \\\n884             \"'order' must be either 'ASC' or 'DESC'.\"\n885         return self.annotate(\n886             datefield=Trunc(field_name, kind, output_field=DateField()),\n887             plain_field=F(field_name)\n888         ).values_list(\n889             'datefield', flat=True\n890         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datefield')\n891 \n892     def datetimes(self, field_name, kind, order='ASC', tzinfo=None, is_dst=None):\n893         \"\"\"\n894         Return a list of datetime objects representing all available\n895         datetimes for the given field_name, scoped to 'kind'.\n896         \"\"\"\n897         assert kind in ('year', 'month', 'week', 'day', 'hour', 'minute', 'second'), \\\n898             \"'kind' must be one of 'year', 'month', 'week', 'day', 'hour', 'minute', or 'second'.\"\n899         assert order in ('ASC', 'DESC'), \\\n900             \"'order' must be either 'ASC' or 'DESC'.\"\n901         if settings.USE_TZ:\n902             if tzinfo is None:\n903                 tzinfo = timezone.get_current_timezone()\n904         else:\n905             tzinfo = None\n906         return self.annotate(\n907             datetimefield=Trunc(\n908                 field_name,\n909                 kind,\n910                 output_field=DateTimeField(),\n911                 tzinfo=tzinfo,\n912                 is_dst=is_dst,\n913             ),\n914             plain_field=F(field_name)\n915         ).values_list(\n916             'datetimefield', flat=True\n917         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datetimefield')\n918 \n919     def none(self):\n920         \"\"\"Return an empty QuerySet.\"\"\"\n921         clone = self._chain()\n922         clone.query.set_empty()\n923         return clone\n924 \n925     ##################################################################\n926     # PUBLIC METHODS THAT ALTER ATTRIBUTES AND RETURN A NEW QUERYSET #\n927     ##################################################################\n928 \n929     def all(self):\n930         \"\"\"\n931         Return a new QuerySet that is a copy of the current one. This allows a\n932         QuerySet to proxy for a model manager in some cases.\n933         \"\"\"\n934         return self._chain()\n935 \n936     def filter(self, *args, **kwargs):\n937         \"\"\"\n938         Return a new QuerySet instance with the args ANDed to the existing\n939         set.\n940         \"\"\"\n941         self._not_support_combined_queries('filter')\n942         return self._filter_or_exclude(False, *args, **kwargs)\n943 \n944     def exclude(self, *args, **kwargs):\n945         \"\"\"\n946         Return a new QuerySet instance with NOT (args) ANDed to the existing\n947         set.\n948         \"\"\"\n949         self._not_support_combined_queries('exclude')\n950         return self._filter_or_exclude(True, *args, **kwargs)\n951 \n952     def _filter_or_exclude(self, negate, *args, **kwargs):\n953         if args or kwargs:\n954             assert not self.query.is_sliced, \\\n955                 \"Cannot filter a query once a slice has been taken.\"\n956 \n957         clone = self._chain()\n958         if self._defer_next_filter:\n959             self._defer_next_filter = False\n960             clone._deferred_filter = negate, args, kwargs\n961         else:\n962             clone._filter_or_exclude_inplace(negate, *args, **kwargs)\n963         return clone\n964 \n965     def _filter_or_exclude_inplace(self, negate, *args, **kwargs):\n966         if negate:\n967             self._query.add_q(~Q(*args, **kwargs))\n968         else:\n969             self._query.add_q(Q(*args, **kwargs))\n970 \n971     def complex_filter(self, filter_obj):\n972         \"\"\"\n973         Return a new QuerySet instance with filter_obj added to the filters.\n974 \n975         filter_obj can be a Q object or a dictionary of keyword lookup\n976         arguments.\n977 \n978         This exists to support framework features such as 'limit_choices_to',\n979         and usually it will be more natural to use other methods.\n980         \"\"\"\n981         if isinstance(filter_obj, Q):\n982             clone = self._chain()\n983             clone.query.add_q(filter_obj)\n984             return clone\n985         else:\n986             return self._filter_or_exclude(False, **filter_obj)\n987 \n988     def _combinator_query(self, combinator, *other_qs, all=False):\n989         # Clone the query to inherit the select list and everything\n990         clone = self._chain()\n991         # Clear limits and ordering so they can be reapplied\n992         clone.query.clear_ordering(True)\n993         clone.query.clear_limits()\n994         clone.query.combined_queries = (self.query,) + tuple(qs.query for qs in other_qs)\n995         clone.query.combinator = combinator\n996         clone.query.combinator_all = all\n997         return clone\n998 \n999     def union(self, *other_qs, all=False):\n1000         # If the query is an EmptyQuerySet, combine all nonempty querysets.\n1001         if isinstance(self, EmptyQuerySet):\n1002             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n1003             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n1004         return self._combinator_query('union', *other_qs, all=all)\n1005 \n1006     def intersection(self, *other_qs):\n1007         # If any query is an EmptyQuerySet, return it.\n1008         if isinstance(self, EmptyQuerySet):\n1009             return self\n1010         for other in other_qs:\n1011             if isinstance(other, EmptyQuerySet):\n1012                 return other\n1013         return self._combinator_query('intersection', *other_qs)\n1014 \n1015     def difference(self, *other_qs):\n1016         # If the query is an EmptyQuerySet, return it.\n1017         if isinstance(self, EmptyQuerySet):\n1018             return self\n1019         return self._combinator_query('difference', *other_qs)\n1020 \n1021     def select_for_update(self, nowait=False, skip_locked=False, of=(), no_key=False):\n1022         \"\"\"\n1023         Return a new QuerySet instance that will select objects with a\n1024         FOR UPDATE lock.\n1025         \"\"\"\n1026         if nowait and skip_locked:\n1027             raise ValueError('The nowait option cannot be used with skip_locked.')\n1028         obj = self._chain()\n1029         obj._for_write = True\n1030         obj.query.select_for_update = True\n1031         obj.query.select_for_update_nowait = nowait\n1032         obj.query.select_for_update_skip_locked = skip_locked\n1033         obj.query.select_for_update_of = of\n1034         obj.query.select_for_no_key_update = no_key\n1035         return obj\n1036 \n1037     def select_related(self, *fields):\n1038         \"\"\"\n1039         Return a new QuerySet instance that will select related objects.\n1040 \n1041         If fields are specified, they must be ForeignKey fields and only those\n1042         related objects are included in the selection.\n1043 \n1044         If select_related(None) is called, clear the list.\n1045         \"\"\"\n1046         self._not_support_combined_queries('select_related')\n1047         if self._fields is not None:\n1048             raise TypeError(\"Cannot call select_related() after .values() or .values_list()\")\n1049 \n1050         obj = self._chain()\n1051         if fields == (None,):\n1052             obj.query.select_related = False\n1053         elif fields:\n1054             obj.query.add_select_related(fields)\n1055         else:\n1056             obj.query.select_related = True\n1057         return obj\n1058 \n1059     def prefetch_related(self, *lookups):\n1060         \"\"\"\n1061         Return a new QuerySet instance that will prefetch the specified\n1062         Many-To-One and Many-To-Many related objects when the QuerySet is\n1063         evaluated.\n1064 \n1065         When prefetch_related() is called more than once, append to the list of\n1066         prefetch lookups. If prefetch_related(None) is called, clear the list.\n1067         \"\"\"\n1068         self._not_support_combined_queries('prefetch_related')\n1069         clone = self._chain()\n1070         if lookups == (None,):\n1071             clone._prefetch_related_lookups = ()\n1072         else:\n1073             for lookup in lookups:\n1074                 if isinstance(lookup, Prefetch):\n1075                     lookup = lookup.prefetch_to\n1076                 lookup = lookup.split(LOOKUP_SEP, 1)[0]\n1077                 if lookup in self.query._filtered_relations:\n1078                     raise ValueError('prefetch_related() is not supported with FilteredRelation.')\n1079             clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups\n1080         return clone\n1081 \n1082     def annotate(self, *args, **kwargs):\n1083         \"\"\"\n1084         Return a query set in which the returned objects have been annotated\n1085         with extra data or aggregations.\n1086         \"\"\"\n1087         self._not_support_combined_queries('annotate')\n1088         self._validate_values_are_expressions(args + tuple(kwargs.values()), method_name='annotate')\n1089         annotations = {}\n1090         for arg in args:\n1091             # The default_alias property may raise a TypeError.\n1092             try:\n1093                 if arg.default_alias in kwargs:\n1094                     raise ValueError(\"The named annotation '%s' conflicts with the \"\n1095                                      \"default name for another annotation.\"\n1096                                      % arg.default_alias)\n1097             except TypeError:\n1098                 raise TypeError(\"Complex annotations require an alias\")\n1099             annotations[arg.default_alias] = arg\n1100         annotations.update(kwargs)\n1101 \n1102         clone = self._chain()\n1103         names = self._fields\n1104         if names is None:\n1105             names = set(chain.from_iterable(\n1106                 (field.name, field.attname) if hasattr(field, 'attname') else (field.name,)\n1107                 for field in self.model._meta.get_fields()\n1108             ))\n1109 \n1110         for alias, annotation in annotations.items():\n1111             if alias in names:\n1112                 raise ValueError(\"The annotation '%s' conflicts with a field on \"\n1113                                  \"the model.\" % alias)\n1114             if isinstance(annotation, FilteredRelation):\n1115                 clone.query.add_filtered_relation(annotation, alias)\n1116             else:\n1117                 clone.query.add_annotation(annotation, alias, is_summary=False)\n1118 \n1119         for alias, annotation in clone.query.annotations.items():\n1120             if alias in annotations and annotation.contains_aggregate:\n1121                 if clone._fields is None:\n1122                     clone.query.group_by = True\n1123                 else:\n1124                     clone.query.set_group_by()\n1125                 break\n1126 \n1127         return clone\n1128 \n1129     def order_by(self, *field_names):\n1130         \"\"\"Return a new QuerySet instance with the ordering changed.\"\"\"\n1131         assert not self.query.is_sliced, \\\n1132             \"Cannot reorder a query once a slice has been taken.\"\n1133         obj = self._chain()\n1134         obj.query.clear_ordering(force_empty=False)\n1135         obj.query.add_ordering(*field_names)\n1136         return obj\n1137 \n1138     def distinct(self, *field_names):\n1139         \"\"\"\n1140         Return a new QuerySet instance that will select only distinct results.\n1141         \"\"\"\n1142         self._not_support_combined_queries('distinct')\n1143         assert not self.query.is_sliced, \\\n1144             \"Cannot create distinct fields once a slice has been taken.\"\n1145         obj = self._chain()\n1146         obj.query.add_distinct_fields(*field_names)\n1147         return obj\n1148 \n1149     def extra(self, select=None, where=None, params=None, tables=None,\n1150               order_by=None, select_params=None):\n1151         \"\"\"Add extra SQL fragments to the query.\"\"\"\n1152         self._not_support_combined_queries('extra')\n1153         assert not self.query.is_sliced, \\\n1154             \"Cannot change a query once a slice has been taken\"\n1155         clone = self._chain()\n1156         clone.query.add_extra(select, select_params, where, params, tables, order_by)\n1157         return clone\n1158 \n1159     def reverse(self):\n1160         \"\"\"Reverse the ordering of the QuerySet.\"\"\"\n1161         if self.query.is_sliced:\n1162             raise TypeError('Cannot reverse a query once a slice has been taken.')\n1163         clone = self._chain()\n1164         clone.query.standard_ordering = not clone.query.standard_ordering\n1165         return clone\n1166 \n1167     def defer(self, *fields):\n1168         \"\"\"\n1169         Defer the loading of data for certain fields until they are accessed.\n1170         Add the set of deferred fields to any existing set of deferred fields.\n1171         The only exception to this is if None is passed in as the only\n1172         parameter, in which case removal all deferrals.\n1173         \"\"\"\n1174         self._not_support_combined_queries('defer')\n1175         if self._fields is not None:\n1176             raise TypeError(\"Cannot call defer() after .values() or .values_list()\")\n1177         clone = self._chain()\n1178         if fields == (None,):\n1179             clone.query.clear_deferred_loading()\n1180         else:\n1181             clone.query.add_deferred_loading(fields)\n1182         return clone\n1183 \n1184     def only(self, *fields):\n1185         \"\"\"\n1186         Essentially, the opposite of defer(). Only the fields passed into this\n1187         method and that are not already specified as deferred are loaded\n1188         immediately when the queryset is evaluated.\n1189         \"\"\"\n1190         self._not_support_combined_queries('only')\n1191         if self._fields is not None:\n1192             raise TypeError(\"Cannot call only() after .values() or .values_list()\")\n1193         if fields == (None,):\n1194             # Can only pass None to defer(), not only(), as the rest option.\n1195             # That won't stop people trying to do this, so let's be explicit.\n1196             raise TypeError(\"Cannot pass None as an argument to only().\")\n1197         for field in fields:\n1198             field = field.split(LOOKUP_SEP, 1)[0]\n1199             if field in self.query._filtered_relations:\n1200                 raise ValueError('only() is not supported with FilteredRelation.')\n1201         clone = self._chain()\n1202         clone.query.add_immediate_loading(fields)\n1203         return clone\n1204 \n1205     def using(self, alias):\n1206         \"\"\"Select which database this QuerySet should execute against.\"\"\"\n1207         clone = self._chain()\n1208         clone._db = alias\n1209         return clone\n1210 \n1211     ###################################\n1212     # PUBLIC INTROSPECTION ATTRIBUTES #\n1213     ###################################\n1214 \n1215     @property\n1216     def ordered(self):\n1217         \"\"\"\n1218         Return True if the QuerySet is ordered -- i.e. has an order_by()\n1219         clause or a default ordering on the model (or is empty).\n1220         \"\"\"\n1221         if isinstance(self, EmptyQuerySet):\n1222             return True\n1223         if self.query.extra_order_by or self.query.order_by:\n1224             return True\n1225         elif self.query.default_ordering and self.query.get_meta().ordering:\n1226             return True\n1227         else:\n1228             return False\n1229 \n1230     @property\n1231     def db(self):\n1232         \"\"\"Return the database used if this query is executed now.\"\"\"\n1233         if self._for_write:\n1234             return self._db or router.db_for_write(self.model, **self._hints)\n1235         return self._db or router.db_for_read(self.model, **self._hints)\n1236 \n1237     ###################\n1238     # PRIVATE METHODS #\n1239     ###################\n1240 \n1241     def _insert(self, objs, fields, returning_fields=None, raw=False, using=None, ignore_conflicts=False):\n1242         \"\"\"\n1243         Insert a new record for the given model. This provides an interface to\n1244         the InsertQuery class and is how Model.save() is implemented.\n1245         \"\"\"\n1246         self._for_write = True\n1247         if using is None:\n1248             using = self.db\n1249         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)\n1250         query.insert_values(fields, objs, raw=raw)\n1251         return query.get_compiler(using=using).execute_sql(returning_fields)\n1252     _insert.alters_data = True\n1253     _insert.queryset_only = False\n1254 \n1255     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):\n1256         \"\"\"\n1257         Helper method for bulk_create() to insert objs one batch at a time.\n1258         \"\"\"\n1259         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:\n1260             raise NotSupportedError('This database backend does not support ignoring conflicts.')\n1261         ops = connections[self.db].ops\n1262         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)\n1263         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size\n1264         inserted_rows = []\n1265         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert\n1266         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:\n1267             if bulk_return and not ignore_conflicts:\n1268                 inserted_rows.extend(self._insert(\n1269                     item, fields=fields, using=self.db,\n1270                     returning_fields=self.model._meta.db_returning_fields,\n1271                     ignore_conflicts=ignore_conflicts,\n1272                 ))\n1273             else:\n1274                 self._insert(item, fields=fields, using=self.db, ignore_conflicts=ignore_conflicts)\n1275         return inserted_rows\n1276 \n1277     def _chain(self, **kwargs):\n1278         \"\"\"\n1279         Return a copy of the current QuerySet that's ready for another\n1280         operation.\n1281         \"\"\"\n1282         obj = self._clone()\n1283         if obj._sticky_filter:\n1284             obj.query.filter_is_sticky = True\n1285             obj._sticky_filter = False\n1286         obj.__dict__.update(kwargs)\n1287         return obj\n1288 \n1289     def _clone(self):\n1290         \"\"\"\n1291         Return a copy of the current QuerySet. A lightweight alternative\n1292         to deepcopy().\n1293         \"\"\"\n1294         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)\n1295         c._sticky_filter = self._sticky_filter\n1296         c._for_write = self._for_write\n1297         c._prefetch_related_lookups = self._prefetch_related_lookups[:]\n1298         c._known_related_objects = self._known_related_objects\n1299         c._iterable_class = self._iterable_class\n1300         c._fields = self._fields\n1301         return c\n1302 \n1303     def _fetch_all(self):\n1304         if self._result_cache is None:\n1305             self._result_cache = list(self._iterable_class(self))\n1306         if self._prefetch_related_lookups and not self._prefetch_done:\n1307             self._prefetch_related_objects()\n1308 \n1309     def _next_is_sticky(self):\n1310         \"\"\"\n1311         Indicate that the next filter call and the one following that should\n1312         be treated as a single filter. This is only important when it comes to\n1313         determining when to reuse tables for many-to-many filters. Required so\n1314         that we can filter naturally on the results of related managers.\n1315 \n1316         This doesn't return a clone of the current QuerySet (it returns\n1317         \"self\"). The method is only used internally and should be immediately\n1318         followed by a filter() that does create a clone.\n1319         \"\"\"\n1320         self._sticky_filter = True\n1321         return self\n1322 \n1323     def _merge_sanity_check(self, other):\n1324         \"\"\"Check that two QuerySet classes may be merged.\"\"\"\n1325         if self._fields is not None and (\n1326                 set(self.query.values_select) != set(other.query.values_select) or\n1327                 set(self.query.extra_select) != set(other.query.extra_select) or\n1328                 set(self.query.annotation_select) != set(other.query.annotation_select)):\n1329             raise TypeError(\n1330                 \"Merging '%s' classes must involve the same values in each case.\"\n1331                 % self.__class__.__name__\n1332             )\n1333 \n1334     def _merge_known_related_objects(self, other):\n1335         \"\"\"\n1336         Keep track of all known related objects from either QuerySet instance.\n1337         \"\"\"\n1338         for field, objects in other._known_related_objects.items():\n1339             self._known_related_objects.setdefault(field, {}).update(objects)\n1340 \n1341     def resolve_expression(self, *args, **kwargs):\n1342         if self._fields and len(self._fields) > 1:\n1343             # values() queryset can only be used as nested queries\n1344             # if they are set up to select only a single field.\n1345             raise TypeError('Cannot use multi-field values as a filter value.')\n1346         query = self.query.resolve_expression(*args, **kwargs)\n1347         query._db = self._db\n1348         return query\n1349     resolve_expression.queryset_only = True\n1350 \n1351     def _add_hints(self, **hints):\n1352         \"\"\"\n1353         Update hinting information for use by routers. Add new key/values or\n1354         overwrite existing key/values.\n1355         \"\"\"\n1356         self._hints.update(hints)\n1357 \n1358     def _has_filters(self):\n1359         \"\"\"\n1360         Check if this QuerySet has any filtering going on. This isn't\n1361         equivalent with checking if all objects are present in results, for\n1362         example, qs[1:]._has_filters() -> False.\n1363         \"\"\"\n1364         return self.query.has_filters()\n1365 \n1366     @staticmethod\n1367     def _validate_values_are_expressions(values, method_name):\n1368         invalid_args = sorted(str(arg) for arg in values if not hasattr(arg, 'resolve_expression'))\n1369         if invalid_args:\n1370             raise TypeError(\n1371                 'QuerySet.%s() received non-expression(s): %s.' % (\n1372                     method_name,\n1373                     ', '.join(invalid_args),\n1374                 )\n1375             )\n1376 \n1377     def _not_support_combined_queries(self, operation_name):\n1378         if self.query.combinator:\n1379             raise NotSupportedError(\n1380                 'Calling QuerySet.%s() after %s() is not supported.'\n1381                 % (operation_name, self.query.combinator)\n1382             )\n1383 \n1384 \n1385 class InstanceCheckMeta(type):\n1386     def __instancecheck__(self, instance):\n1387         return isinstance(instance, QuerySet) and instance.query.is_empty()\n1388 \n1389 \n1390 class EmptyQuerySet(metaclass=InstanceCheckMeta):\n1391     \"\"\"\n1392     Marker class to checking if a queryset is empty by .none():\n1393         isinstance(qs.none(), EmptyQuerySet) -> True\n1394     \"\"\"\n1395 \n1396     def __init__(self, *args, **kwargs):\n1397         raise TypeError(\"EmptyQuerySet can't be instantiated\")\n1398 \n1399 \n1400 class RawQuerySet:\n1401     \"\"\"\n1402     Provide an iterator which converts the results of raw SQL queries into\n1403     annotated model instances.\n1404     \"\"\"\n1405     def __init__(self, raw_query, model=None, query=None, params=None,\n1406                  translations=None, using=None, hints=None):\n1407         self.raw_query = raw_query\n1408         self.model = model\n1409         self._db = using\n1410         self._hints = hints or {}\n1411         self.query = query or sql.RawQuery(sql=raw_query, using=self.db, params=params)\n1412         self.params = params or ()\n1413         self.translations = translations or {}\n1414         self._result_cache = None\n1415         self._prefetch_related_lookups = ()\n1416         self._prefetch_done = False\n1417 \n1418     def resolve_model_init_order(self):\n1419         \"\"\"Resolve the init field names and value positions.\"\"\"\n1420         converter = connections[self.db].introspection.identifier_converter\n1421         model_init_fields = [f for f in self.model._meta.fields if converter(f.column) in self.columns]\n1422         annotation_fields = [(column, pos) for pos, column in enumerate(self.columns)\n1423                              if column not in self.model_fields]\n1424         model_init_order = [self.columns.index(converter(f.column)) for f in model_init_fields]\n1425         model_init_names = [f.attname for f in model_init_fields]\n1426         return model_init_names, model_init_order, annotation_fields\n1427 \n1428     def prefetch_related(self, *lookups):\n1429         \"\"\"Same as QuerySet.prefetch_related()\"\"\"\n1430         clone = self._clone()\n1431         if lookups == (None,):\n1432             clone._prefetch_related_lookups = ()\n1433         else:\n1434             clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups\n1435         return clone\n1436 \n1437     def _prefetch_related_objects(self):\n1438         prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups)\n1439         self._prefetch_done = True\n1440 \n1441     def _clone(self):\n1442         \"\"\"Same as QuerySet._clone()\"\"\"\n1443         c = self.__class__(\n1444             self.raw_query, model=self.model, query=self.query, params=self.params,\n1445             translations=self.translations, using=self._db, hints=self._hints\n1446         )\n1447         c._prefetch_related_lookups = self._prefetch_related_lookups[:]\n1448         return c\n1449 \n1450     def _fetch_all(self):\n1451         if self._result_cache is None:\n1452             self._result_cache = list(self.iterator())\n1453         if self._prefetch_related_lookups and not self._prefetch_done:\n1454             self._prefetch_related_objects()\n1455 \n1456     def __len__(self):\n1457         self._fetch_all()\n1458         return len(self._result_cache)\n1459 \n1460     def __bool__(self):\n1461         self._fetch_all()\n1462         return bool(self._result_cache)\n1463 \n1464     def __iter__(self):\n1465         self._fetch_all()\n1466         return iter(self._result_cache)\n1467 \n1468     def iterator(self):\n1469         # Cache some things for performance reasons outside the loop.\n1470         db = self.db\n1471         compiler = connections[db].ops.compiler('SQLCompiler')(\n1472             self.query, connections[db], db\n1473         )\n1474 \n1475         query = iter(self.query)\n1476 \n1477         try:\n1478             model_init_names, model_init_pos, annotation_fields = self.resolve_model_init_order()\n1479             if self.model._meta.pk.attname not in model_init_names:\n1480                 raise exceptions.FieldDoesNotExist(\n1481                     'Raw query must include the primary key'\n1482                 )\n1483             model_cls = self.model\n1484             fields = [self.model_fields.get(c) for c in self.columns]\n1485             converters = compiler.get_converters([\n1486                 f.get_col(f.model._meta.db_table) if f else None for f in fields\n1487             ])\n1488             if converters:\n1489                 query = compiler.apply_converters(query, converters)\n1490             for values in query:\n1491                 # Associate fields to values\n1492                 model_init_values = [values[pos] for pos in model_init_pos]\n1493                 instance = model_cls.from_db(db, model_init_names, model_init_values)\n1494                 if annotation_fields:\n1495                     for column, pos in annotation_fields:\n1496                         setattr(instance, column, values[pos])\n1497                 yield instance\n1498         finally:\n1499             # Done iterating the Query. If it has its own cursor, close it.\n1500             if hasattr(self.query, 'cursor') and self.query.cursor:\n1501                 self.query.cursor.close()\n1502 \n1503     def __repr__(self):\n1504         return \"<%s: %s>\" % (self.__class__.__name__, self.query)\n1505 \n1506     def __getitem__(self, k):\n1507         return list(self)[k]\n1508 \n1509     @property\n1510     def db(self):\n1511         \"\"\"Return the database used if this query is executed now.\"\"\"\n1512         return self._db or router.db_for_read(self.model, **self._hints)\n1513 \n1514     def using(self, alias):\n1515         \"\"\"Select the database this RawQuerySet should execute against.\"\"\"\n1516         return RawQuerySet(\n1517             self.raw_query, model=self.model,\n1518             query=self.query.chain(using=alias),\n1519             params=self.params, translations=self.translations,\n1520             using=alias,\n1521         )\n1522 \n1523     @cached_property\n1524     def columns(self):\n1525         \"\"\"\n1526         A list of model field names in the order they'll appear in the\n1527         query results.\n1528         \"\"\"\n1529         columns = self.query.get_columns()\n1530         # Adjust any column names which don't match field names\n1531         for (query_name, model_name) in self.translations.items():\n1532             # Ignore translations for nonexistent column names\n1533             try:\n1534                 index = columns.index(query_name)\n1535             except ValueError:\n1536                 pass\n1537             else:\n1538                 columns[index] = model_name\n1539         return columns\n1540 \n1541     @cached_property\n1542     def model_fields(self):\n1543         \"\"\"A dict mapping column names to model field names.\"\"\"\n1544         converter = connections[self.db].introspection.identifier_converter\n1545         model_fields = {}\n1546         for field in self.model._meta.fields:\n1547             name, column = field.get_attname_column()\n1548             model_fields[converter(column)] = field\n1549         return model_fields\n1550 \n1551 \n1552 class Prefetch:\n1553     def __init__(self, lookup, queryset=None, to_attr=None):\n1554         # `prefetch_through` is the path we traverse to perform the prefetch.\n1555         self.prefetch_through = lookup\n1556         # `prefetch_to` is the path to the attribute that stores the result.\n1557         self.prefetch_to = lookup\n1558         if queryset is not None and (\n1559             isinstance(queryset, RawQuerySet) or (\n1560                 hasattr(queryset, '_iterable_class') and\n1561                 not issubclass(queryset._iterable_class, ModelIterable)\n1562             )\n1563         ):\n1564             raise ValueError(\n1565                 'Prefetch querysets cannot use raw(), values(), and '\n1566                 'values_list().'\n1567             )\n1568         if to_attr:\n1569             self.prefetch_to = LOOKUP_SEP.join(lookup.split(LOOKUP_SEP)[:-1] + [to_attr])\n1570 \n1571         self.queryset = queryset\n1572         self.to_attr = to_attr\n1573 \n1574     def __getstate__(self):\n1575         obj_dict = self.__dict__.copy()\n1576         if self.queryset is not None:\n1577             # Prevent the QuerySet from being evaluated\n1578             obj_dict['queryset'] = self.queryset._chain(\n1579                 _result_cache=[],\n1580                 _prefetch_done=True,\n1581             )\n1582         return obj_dict\n1583 \n1584     def add_prefix(self, prefix):\n1585         self.prefetch_through = prefix + LOOKUP_SEP + self.prefetch_through\n1586         self.prefetch_to = prefix + LOOKUP_SEP + self.prefetch_to\n1587 \n1588     def get_current_prefetch_to(self, level):\n1589         return LOOKUP_SEP.join(self.prefetch_to.split(LOOKUP_SEP)[:level + 1])\n1590 \n1591     def get_current_to_attr(self, level):\n1592         parts = self.prefetch_to.split(LOOKUP_SEP)\n1593         to_attr = parts[level]\n1594         as_attr = self.to_attr and level == len(parts) - 1\n1595         return to_attr, as_attr\n1596 \n1597     def get_current_queryset(self, level):\n1598         if self.get_current_prefetch_to(level) == self.prefetch_to:\n1599             return self.queryset\n1600         return None\n1601 \n1602     def __eq__(self, other):\n1603         if not isinstance(other, Prefetch):\n1604             return NotImplemented\n1605         return self.prefetch_to == other.prefetch_to\n1606 \n1607     def __hash__(self):\n1608         return hash((self.__class__, self.prefetch_to))\n1609 \n1610 \n1611 def normalize_prefetch_lookups(lookups, prefix=None):\n1612     \"\"\"Normalize lookups into Prefetch objects.\"\"\"\n1613     ret = []\n1614     for lookup in lookups:\n1615         if not isinstance(lookup, Prefetch):\n1616             lookup = Prefetch(lookup)\n1617         if prefix:\n1618             lookup.add_prefix(prefix)\n1619         ret.append(lookup)\n1620     return ret\n1621 \n1622 \n1623 def prefetch_related_objects(model_instances, *related_lookups):\n1624     \"\"\"\n1625     Populate prefetched object caches for a list of model instances based on\n1626     the lookups/Prefetch instances given.\n1627     \"\"\"\n1628     if not model_instances:\n1629         return  # nothing to do\n1630 \n1631     # We need to be able to dynamically add to the list of prefetch_related\n1632     # lookups that we look up (see below).  So we need some book keeping to\n1633     # ensure we don't do duplicate work.\n1634     done_queries = {}    # dictionary of things like 'foo__bar': [results]\n1635 \n1636     auto_lookups = set()  # we add to this as we go through.\n1637     followed_descriptors = set()  # recursion protection\n1638 \n1639     all_lookups = normalize_prefetch_lookups(reversed(related_lookups))\n1640     while all_lookups:\n1641         lookup = all_lookups.pop()\n1642         if lookup.prefetch_to in done_queries:\n1643             if lookup.queryset is not None:\n1644                 raise ValueError(\"'%s' lookup was already seen with a different queryset. \"\n1645                                  \"You may need to adjust the ordering of your lookups.\" % lookup.prefetch_to)\n1646 \n1647             continue\n1648 \n1649         # Top level, the list of objects to decorate is the result cache\n1650         # from the primary QuerySet. It won't be for deeper levels.\n1651         obj_list = model_instances\n1652 \n1653         through_attrs = lookup.prefetch_through.split(LOOKUP_SEP)\n1654         for level, through_attr in enumerate(through_attrs):\n1655             # Prepare main instances\n1656             if not obj_list:\n1657                 break\n1658 \n1659             prefetch_to = lookup.get_current_prefetch_to(level)\n1660             if prefetch_to in done_queries:\n1661                 # Skip any prefetching, and any object preparation\n1662                 obj_list = done_queries[prefetch_to]\n1663                 continue\n1664 \n1665             # Prepare objects:\n1666             good_objects = True\n1667             for obj in obj_list:\n1668                 # Since prefetching can re-use instances, it is possible to have\n1669                 # the same instance multiple times in obj_list, so obj might\n1670                 # already be prepared.\n1671                 if not hasattr(obj, '_prefetched_objects_cache'):\n1672                     try:\n1673                         obj._prefetched_objects_cache = {}\n1674                     except (AttributeError, TypeError):\n1675                         # Must be an immutable object from\n1676                         # values_list(flat=True), for example (TypeError) or\n1677                         # a QuerySet subclass that isn't returning Model\n1678                         # instances (AttributeError), either in Django or a 3rd\n1679                         # party. prefetch_related() doesn't make sense, so quit.\n1680                         good_objects = False\n1681                         break\n1682             if not good_objects:\n1683                 break\n1684 \n1685             # Descend down tree\n1686 \n1687             # We assume that objects retrieved are homogeneous (which is the premise\n1688             # of prefetch_related), so what applies to first object applies to all.\n1689             first_obj = obj_list[0]\n1690             to_attr = lookup.get_current_to_attr(level)[0]\n1691             prefetcher, descriptor, attr_found, is_fetched = get_prefetcher(first_obj, through_attr, to_attr)\n1692 \n1693             if not attr_found:\n1694                 raise AttributeError(\"Cannot find '%s' on %s object, '%s' is an invalid \"\n1695                                      \"parameter to prefetch_related()\" %\n1696                                      (through_attr, first_obj.__class__.__name__, lookup.prefetch_through))\n1697 \n1698             if level == len(through_attrs) - 1 and prefetcher is None:\n1699                 # Last one, this *must* resolve to something that supports\n1700                 # prefetching, otherwise there is no point adding it and the\n1701                 # developer asking for it has made a mistake.\n1702                 raise ValueError(\"'%s' does not resolve to an item that supports \"\n1703                                  \"prefetching - this is an invalid parameter to \"\n1704                                  \"prefetch_related().\" % lookup.prefetch_through)\n1705 \n1706             if prefetcher is not None and not is_fetched:\n1707                 obj_list, additional_lookups = prefetch_one_level(obj_list, prefetcher, lookup, level)\n1708                 # We need to ensure we don't keep adding lookups from the\n1709                 # same relationships to stop infinite recursion. So, if we\n1710                 # are already on an automatically added lookup, don't add\n1711                 # the new lookups from relationships we've seen already.\n1712                 if not (prefetch_to in done_queries and lookup in auto_lookups and descriptor in followed_descriptors):\n1713                     done_queries[prefetch_to] = obj_list\n1714                     new_lookups = normalize_prefetch_lookups(reversed(additional_lookups), prefetch_to)\n1715                     auto_lookups.update(new_lookups)\n1716                     all_lookups.extend(new_lookups)\n1717                 followed_descriptors.add(descriptor)\n1718             else:\n1719                 # Either a singly related object that has already been fetched\n1720                 # (e.g. via select_related), or hopefully some other property\n1721                 # that doesn't support prefetching but needs to be traversed.\n1722 \n1723                 # We replace the current list of parent objects with the list\n1724                 # of related objects, filtering out empty or missing values so\n1725                 # that we can continue with nullable or reverse relations.\n1726                 new_obj_list = []\n1727                 for obj in obj_list:\n1728                     if through_attr in getattr(obj, '_prefetched_objects_cache', ()):\n1729                         # If related objects have been prefetched, use the\n1730                         # cache rather than the object's through_attr.\n1731                         new_obj = list(obj._prefetched_objects_cache.get(through_attr))\n1732                     else:\n1733                         try:\n1734                             new_obj = getattr(obj, through_attr)\n1735                         except exceptions.ObjectDoesNotExist:\n1736                             continue\n1737                     if new_obj is None:\n1738                         continue\n1739                     # We special-case `list` rather than something more generic\n1740                     # like `Iterable` because we don't want to accidentally match\n1741                     # user models that define __iter__.\n1742                     if isinstance(new_obj, list):\n1743                         new_obj_list.extend(new_obj)\n1744                     else:\n1745                         new_obj_list.append(new_obj)\n1746                 obj_list = new_obj_list\n1747 \n1748 \n1749 def get_prefetcher(instance, through_attr, to_attr):\n1750     \"\"\"\n1751     For the attribute 'through_attr' on the given instance, find\n1752     an object that has a get_prefetch_queryset().\n1753     Return a 4 tuple containing:\n1754     (the object with get_prefetch_queryset (or None),\n1755      the descriptor object representing this relationship (or None),\n1756      a boolean that is False if the attribute was not found at all,\n1757      a boolean that is True if the attribute has already been fetched)\n1758     \"\"\"\n1759     prefetcher = None\n1760     is_fetched = False\n1761 \n1762     # For singly related objects, we have to avoid getting the attribute\n1763     # from the object, as this will trigger the query. So we first try\n1764     # on the class, in order to get the descriptor object.\n1765     rel_obj_descriptor = getattr(instance.__class__, through_attr, None)\n1766     if rel_obj_descriptor is None:\n1767         attr_found = hasattr(instance, through_attr)\n1768     else:\n1769         attr_found = True\n1770         if rel_obj_descriptor:\n1771             # singly related object, descriptor object has the\n1772             # get_prefetch_queryset() method.\n1773             if hasattr(rel_obj_descriptor, 'get_prefetch_queryset'):\n1774                 prefetcher = rel_obj_descriptor\n1775                 if rel_obj_descriptor.is_cached(instance):\n1776                     is_fetched = True\n1777             else:\n1778                 # descriptor doesn't support prefetching, so we go ahead and get\n1779                 # the attribute on the instance rather than the class to\n1780                 # support many related managers\n1781                 rel_obj = getattr(instance, through_attr)\n1782                 if hasattr(rel_obj, 'get_prefetch_queryset'):\n1783                     prefetcher = rel_obj\n1784                 if through_attr != to_attr:\n1785                     # Special case cached_property instances because hasattr\n1786                     # triggers attribute computation and assignment.\n1787                     if isinstance(getattr(instance.__class__, to_attr, None), cached_property):\n1788                         is_fetched = to_attr in instance.__dict__\n1789                     else:\n1790                         is_fetched = hasattr(instance, to_attr)\n1791                 else:\n1792                     is_fetched = through_attr in instance._prefetched_objects_cache\n1793     return prefetcher, rel_obj_descriptor, attr_found, is_fetched\n1794 \n1795 \n1796 def prefetch_one_level(instances, prefetcher, lookup, level):\n1797     \"\"\"\n1798     Helper function for prefetch_related_objects().\n1799 \n1800     Run prefetches on all instances using the prefetcher object,\n1801     assigning results to relevant caches in instance.\n1802 \n1803     Return the prefetched objects along with any additional prefetches that\n1804     must be done due to prefetch_related lookups found from default managers.\n1805     \"\"\"\n1806     # prefetcher must have a method get_prefetch_queryset() which takes a list\n1807     # of instances, and returns a tuple:\n1808 \n1809     # (queryset of instances of self.model that are related to passed in instances,\n1810     #  callable that gets value to be matched for returned instances,\n1811     #  callable that gets value to be matched for passed in instances,\n1812     #  boolean that is True for singly related objects,\n1813     #  cache or field name to assign to,\n1814     #  boolean that is True when the previous argument is a cache name vs a field name).\n1815 \n1816     # The 'values to be matched' must be hashable as they will be used\n1817     # in a dictionary.\n1818 \n1819     rel_qs, rel_obj_attr, instance_attr, single, cache_name, is_descriptor = (\n1820         prefetcher.get_prefetch_queryset(instances, lookup.get_current_queryset(level)))\n1821     # We have to handle the possibility that the QuerySet we just got back\n1822     # contains some prefetch_related lookups. We don't want to trigger the\n1823     # prefetch_related functionality by evaluating the query. Rather, we need\n1824     # to merge in the prefetch_related lookups.\n1825     # Copy the lookups in case it is a Prefetch object which could be reused\n1826     # later (happens in nested prefetch_related).\n1827     additional_lookups = [\n1828         copy.copy(additional_lookup) for additional_lookup\n1829         in getattr(rel_qs, '_prefetch_related_lookups', ())\n1830     ]\n1831     if additional_lookups:\n1832         # Don't need to clone because the manager should have given us a fresh\n1833         # instance, so we access an internal instead of using public interface\n1834         # for performance reasons.\n1835         rel_qs._prefetch_related_lookups = ()\n1836 \n1837     all_related_objects = list(rel_qs)\n1838 \n1839     rel_obj_cache = {}\n1840     for rel_obj in all_related_objects:\n1841         rel_attr_val = rel_obj_attr(rel_obj)\n1842         rel_obj_cache.setdefault(rel_attr_val, []).append(rel_obj)\n1843 \n1844     to_attr, as_attr = lookup.get_current_to_attr(level)\n1845     # Make sure `to_attr` does not conflict with a field.\n1846     if as_attr and instances:\n1847         # We assume that objects retrieved are homogeneous (which is the premise\n1848         # of prefetch_related), so what applies to first object applies to all.\n1849         model = instances[0].__class__\n1850         try:\n1851             model._meta.get_field(to_attr)\n1852         except exceptions.FieldDoesNotExist:\n1853             pass\n1854         else:\n1855             msg = 'to_attr={} conflicts with a field on the {} model.'\n1856             raise ValueError(msg.format(to_attr, model.__name__))\n1857 \n1858     # Whether or not we're prefetching the last part of the lookup.\n1859     leaf = len(lookup.prefetch_through.split(LOOKUP_SEP)) - 1 == level\n1860 \n1861     for obj in instances:\n1862         instance_attr_val = instance_attr(obj)\n1863         vals = rel_obj_cache.get(instance_attr_val, [])\n1864 \n1865         if single:\n1866             val = vals[0] if vals else None\n1867             if as_attr:\n1868                 # A to_attr has been given for the prefetch.\n1869                 setattr(obj, to_attr, val)\n1870             elif is_descriptor:\n1871                 # cache_name points to a field name in obj.\n1872                 # This field is a descriptor for a related object.\n1873                 setattr(obj, cache_name, val)\n1874             else:\n1875                 # No to_attr has been given for this prefetch operation and the\n1876                 # cache_name does not point to a descriptor. Store the value of\n1877                 # the field in the object's field cache.\n1878                 obj._state.fields_cache[cache_name] = val\n1879         else:\n1880             if as_attr:\n1881                 setattr(obj, to_attr, vals)\n1882             else:\n1883                 manager = getattr(obj, to_attr)\n1884                 if leaf and lookup.queryset is not None:\n1885                     qs = manager._apply_rel_filters(lookup.queryset)\n1886                 else:\n1887                     qs = manager.get_queryset()\n1888                 qs._result_cache = vals\n1889                 # We don't want the individual qs doing prefetch_related now,\n1890                 # since we have merged this into the current work.\n1891                 qs._prefetch_done = True\n1892                 obj._prefetched_objects_cache[cache_name] = qs\n1893     return all_related_objects, additional_lookups\n1894 \n1895 \n1896 class RelatedPopulator:\n1897     \"\"\"\n1898     RelatedPopulator is used for select_related() object instantiation.\n1899 \n1900     The idea is that each select_related() model will be populated by a\n1901     different RelatedPopulator instance. The RelatedPopulator instances get\n1902     klass_info and select (computed in SQLCompiler) plus the used db as\n1903     input for initialization. That data is used to compute which columns\n1904     to use, how to instantiate the model, and how to populate the links\n1905     between the objects.\n1906 \n1907     The actual creation of the objects is done in populate() method. This\n1908     method gets row and from_obj as input and populates the select_related()\n1909     model instance.\n1910     \"\"\"\n1911     def __init__(self, klass_info, select, db):\n1912         self.db = db\n1913         # Pre-compute needed attributes. The attributes are:\n1914         #  - model_cls: the possibly deferred model class to instantiate\n1915         #  - either:\n1916         #    - cols_start, cols_end: usually the columns in the row are\n1917         #      in the same order model_cls.__init__ expects them, so we\n1918         #      can instantiate by model_cls(*row[cols_start:cols_end])\n1919         #    - reorder_for_init: When select_related descends to a child\n1920         #      class, then we want to reuse the already selected parent\n1921         #      data. However, in this case the parent data isn't necessarily\n1922         #      in the same order that Model.__init__ expects it to be, so\n1923         #      we have to reorder the parent data. The reorder_for_init\n1924         #      attribute contains a function used to reorder the field data\n1925         #      in the order __init__ expects it.\n1926         #  - pk_idx: the index of the primary key field in the reordered\n1927         #    model data. Used to check if a related object exists at all.\n1928         #  - init_list: the field attnames fetched from the database. For\n1929         #    deferred models this isn't the same as all attnames of the\n1930         #    model's fields.\n1931         #  - related_populators: a list of RelatedPopulator instances if\n1932         #    select_related() descends to related models from this model.\n1933         #  - local_setter, remote_setter: Methods to set cached values on\n1934         #    the object being populated and on the remote object. Usually\n1935         #    these are Field.set_cached_value() methods.\n1936         select_fields = klass_info['select_fields']\n1937         from_parent = klass_info['from_parent']\n1938         if not from_parent:\n1939             self.cols_start = select_fields[0]\n1940             self.cols_end = select_fields[-1] + 1\n1941             self.init_list = [\n1942                 f[0].target.attname for f in select[self.cols_start:self.cols_end]\n1943             ]\n1944             self.reorder_for_init = None\n1945         else:\n1946             attname_indexes = {select[idx][0].target.attname: idx for idx in select_fields}\n1947             model_init_attnames = (f.attname for f in klass_info['model']._meta.concrete_fields)\n1948             self.init_list = [attname for attname in model_init_attnames if attname in attname_indexes]\n1949             self.reorder_for_init = operator.itemgetter(*[attname_indexes[attname] for attname in self.init_list])\n1950 \n1951         self.model_cls = klass_info['model']\n1952         self.pk_idx = self.init_list.index(self.model_cls._meta.pk.attname)\n1953         self.related_populators = get_related_populators(klass_info, select, self.db)\n1954         self.local_setter = klass_info['local_setter']\n1955         self.remote_setter = klass_info['remote_setter']\n1956 \n1957     def populate(self, row, from_obj):\n1958         if self.reorder_for_init:\n1959             obj_data = self.reorder_for_init(row)\n1960         else:\n1961             obj_data = row[self.cols_start:self.cols_end]\n1962         if obj_data[self.pk_idx] is None:\n1963             obj = None\n1964         else:\n1965             obj = self.model_cls.from_db(self.db, self.init_list, obj_data)\n1966             for rel_iter in self.related_populators:\n1967                 rel_iter.populate(row, obj)\n1968         self.local_setter(from_obj, obj)\n1969         if obj is not None:\n1970             self.remote_setter(obj, from_obj)\n1971 \n1972 \n1973 def get_related_populators(klass_info, select, db):\n1974     iterators = []\n1975     related_klass_infos = klass_info.get('related_klass_infos', [])\n1976     for rel_klass_info in related_klass_infos:\n1977         rel_cls = RelatedPopulator(rel_klass_info, select, db)\n1978         iterators.append(rel_cls)\n1979     return iterators\n",
        "intended_behavior": "The method constructing the IN query for prefetch_related should exclude NULL values from the list of IDs it uses to prefetch related objects. This change aims to optimize query performance and integrity by ensuring that NULL values, which won't match any related objects (since FK constraints prevent such matches), are not used in an IN clause. This behavior should be implemented in a way that does not affect other functionalities of prefetch_related, such as handling other valid lookup values or the ability to prefetch multiple related objects efficiently."
    }
]