[
    {
        "rel_file_path": "django/core/exceptions.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/core/exceptions.py",
        "start": 99,
        "end": 183,
        "class_name": "ValidationError",
        "method_name": null,
        "code": "99 class ValidationError(Exception):\n100     \"\"\"An error while validating data.\"\"\"\n101     def __init__(self, message, code=None, params=None):\n102         \"\"\"\n103         The `message` argument can be a single error, a list of errors, or a\n104         dictionary that maps field names to lists of errors. What we define as\n105         an \"error\" can be either a simple string or an instance of\n106         ValidationError with its message attribute set, and what we define as\n107         list or dictionary can be an actual `list` or `dict` or an instance\n108         of ValidationError with its `error_list` or `error_dict` attribute set.\n109         \"\"\"\n110         super().__init__(message, code, params)\n111 \n112         if isinstance(message, ValidationError):\n113             if hasattr(message, 'error_dict'):\n114                 message = message.error_dict\n115             elif not hasattr(message, 'message'):\n116                 message = message.error_list\n117             else:\n118                 message, code, params = message.message, message.code, message.params\n119 \n120         if isinstance(message, dict):\n121             self.error_dict = {}\n122             for field, messages in message.items():\n123                 if not isinstance(messages, ValidationError):\n124                     messages = ValidationError(messages)\n125                 self.error_dict[field] = messages.error_list\n126 \n127         elif isinstance(message, list):\n128             self.error_list = []\n129             for message in message:\n130                 # Normalize plain strings to instances of ValidationError.\n131                 if not isinstance(message, ValidationError):\n132                     message = ValidationError(message)\n133                 if hasattr(message, 'error_dict'):\n134                     self.error_list.extend(sum(message.error_dict.values(), []))\n135                 else:\n136                     self.error_list.extend(message.error_list)\n137 \n138         else:\n139             self.message = message\n140             self.code = code\n141             self.params = params\n142             self.error_list = [self]\n143 \n144     @property\n145     def message_dict(self):\n146         # Trigger an AttributeError if this ValidationError\n147         # doesn't have an error_dict.\n148         getattr(self, 'error_dict')\n149 \n150         return dict(self)\n151 \n152     @property\n153     def messages(self):\n154         if hasattr(self, 'error_dict'):\n155             return sum(dict(self).values(), [])\n156         return list(self)\n157 \n158     def update_error_dict(self, error_dict):\n159         if hasattr(self, 'error_dict'):\n160             for field, error_list in self.error_dict.items():\n161                 error_dict.setdefault(field, []).extend(error_list)\n162         else:\n163             error_dict.setdefault(NON_FIELD_ERRORS, []).extend(self.error_list)\n164         return error_dict\n165 \n166     def __iter__(self):\n167         if hasattr(self, 'error_dict'):\n168             for field, errors in self.error_dict.items():\n169                 yield field, list(ValidationError(errors))\n170         else:\n171             for error in self.error_list:\n172                 message = error.message\n173                 if error.params:\n174                     message %= error.params\n175                 yield str(message)\n176 \n177     def __str__(self):\n178         if hasattr(self, 'error_dict'):\n179             return repr(dict(self))\n180         return repr(list(self))\n181 \n182     def __repr__(self):\n183         return 'ValidationError(%s)' % self\n",
        "intended_behavior": "Enhance the `__init__` method or add a new method to support including the provided value within the error message directly. This enhancement would allow dynamically inserting the provided value into the error message template, possibly utilizing the `params` dictionary already passed to `ValidationError`. The implementation must ensure that existing functionality, such as message formatting and error dict handling, remains intact and backward compatible. Additionally, consider extending the class documentation to include examples of using the new capability."
    },
    {
        "rel_file_path": "django/core/validators.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/core/validators.py",
        "start": 338,
        "end": 343,
        "class_name": "BaseValidator",
        "method_name": "__call__",
        "code": "338     def __call__(self, value):\n339         cleaned = self.clean(value)\n340         limit_value = self.limit_value() if callable(self.limit_value) else self.limit_value\n341         params = {'limit_value': limit_value, 'show_value': cleaned, 'value': value}\n342         if self.compare(cleaned, limit_value):\n343             raise ValidationError(self.message, code=self.code, params=params)\n",
        "intended_behavior": "Modify the `__call__` method to ensure that when raising `ValidationError`, the provided value is included in the error message in a standardized manner. This may involve adjusting how `message` and `code` are passed to `ValidationError`. The modification should preserve the validator's current logic for comparing values and determining validity, only extending the functionality to enhance error messaging. Incorporating the provided value directly in the error message template (e.g., using `%(value)s` placeholder as suggested in the issue) would require ensuring that all validators properly pass the provided value when constructing error messages."
    },
    {
        "rel_file_path": "django/core/validators.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/core/validators.py",
        "start": 329,
        "end": 358,
        "class_name": "BaseValidator",
        "method_name": null,
        "code": "329 class BaseValidator:\n330     message = _('Ensure this value is %(limit_value)s (it is %(show_value)s).')\n331     code = 'limit_value'\n332 \n333     def __init__(self, limit_value, message=None):\n334         self.limit_value = limit_value\n335         if message:\n336             self.message = message\n337 \n338     def __call__(self, value):\n339         cleaned = self.clean(value)\n340         limit_value = self.limit_value() if callable(self.limit_value) else self.limit_value\n341         params = {'limit_value': limit_value, 'show_value': cleaned, 'value': value}\n342         if self.compare(cleaned, limit_value):\n343             raise ValidationError(self.message, code=self.code, params=params)\n344 \n345     def __eq__(self, other):\n346         if not isinstance(other, self.__class__):\n347             return NotImplemented\n348         return (\n349             self.limit_value == other.limit_value and\n350             self.message == other.message and\n351             self.code == other.code\n352         )\n353 \n354     def compare(self, a, b):\n355         return a is not b\n356 \n357     def clean(self, x):\n358         return x\n",
        "intended_behavior": "This class provides additional context to the issue."
    }
]