[
    {
        "rel_file_path": "sympy/parsing/latex/_antlr/latexparser.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.1/sympy/parsing/latex/_antlr/latexparser.py",
        "start": 1,
        "end": 2954,
        "class_name": null,
        "method_name": null,
        "code": "1 \n2 # *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***\n3 #\n4 # Generated from ../LaTeX.g4, derived from latex2sympy\n5 #     latex2sympy is licensed under the MIT license\n6 #     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt\n7 #\n8 # Generated with antlr4\n9 #    antlr4 is licensed under the BSD-3-Clause License\n10 #    https://github.com/antlr/antlr4/blob/master/LICENSE.txt\n11 from __future__ import print_function\n12 from antlr4 import *\n13 from io import StringIO\n14 import sys\n15 \n16 def serializedATN():\n17     with StringIO() as buf:\n18         buf.write(u\"\\3\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\\u5964\\3\")\n19         buf.write(u\";\\u01a2\\4\\2\\t\\2\\4\\3\\t\\3\\4\\4\\t\\4\\4\\5\\t\\5\\4\\6\\t\\6\\4\\7\\t\")\n20         buf.write(u\"\\7\\4\\b\\t\\b\\4\\t\\t\\t\\4\\n\\t\\n\\4\\13\\t\\13\\4\\f\\t\\f\\4\\r\\t\\r\")\n21         buf.write(u\"\\4\\16\\t\\16\\4\\17\\t\\17\\4\\20\\t\\20\\4\\21\\t\\21\\4\\22\\t\\22\\4\")\n22         buf.write(u\"\\23\\t\\23\\4\\24\\t\\24\\4\\25\\t\\25\\4\\26\\t\\26\\4\\27\\t\\27\\4\\30\")\n23         buf.write(u\"\\t\\30\\4\\31\\t\\31\\4\\32\\t\\32\\4\\33\\t\\33\\4\\34\\t\\34\\4\\35\\t\")\n24         buf.write(u\"\\35\\4\\36\\t\\36\\4\\37\\t\\37\\4 \\t \\4!\\t!\\4\\\"\\t\\\"\\4#\\t#\\4$\")\n25         buf.write(u\"\\t$\\3\\2\\3\\2\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\7\\3Q\\n\\3\\f\\3\\16\\3\")\n26         buf.write(u\"T\\13\\3\\3\\4\\3\\4\\3\\4\\3\\4\\3\\5\\3\\5\\3\\6\\3\\6\\3\\6\\3\\6\\3\\6\\3\")\n27         buf.write(u\"\\6\\7\\6b\\n\\6\\f\\6\\16\\6e\\13\\6\\3\\7\\3\\7\\3\\7\\3\\7\\3\\7\\3\\7\\7\")\n28         buf.write(u\"\\7m\\n\\7\\f\\7\\16\\7p\\13\\7\\3\\b\\3\\b\\3\\b\\3\\b\\3\\b\\3\\b\\7\\bx\\n\")\n29         buf.write(u\"\\b\\f\\b\\16\\b{\\13\\b\\3\\t\\3\\t\\3\\t\\6\\t\\u0080\\n\\t\\r\\t\\16\\t\")\n30         buf.write(u\"\\u0081\\5\\t\\u0084\\n\\t\\3\\n\\3\\n\\3\\n\\3\\n\\7\\n\\u008a\\n\\n\\f\")\n31         buf.write(u\"\\n\\16\\n\\u008d\\13\\n\\5\\n\\u008f\\n\\n\\3\\13\\3\\13\\7\\13\\u0093\")\n32         buf.write(u\"\\n\\13\\f\\13\\16\\13\\u0096\\13\\13\\3\\f\\3\\f\\7\\f\\u009a\\n\\f\\f\")\n33         buf.write(u\"\\f\\16\\f\\u009d\\13\\f\\3\\r\\3\\r\\5\\r\\u00a1\\n\\r\\3\\16\\3\\16\\3\")\n34         buf.write(u\"\\16\\3\\16\\3\\16\\3\\16\\5\\16\\u00a9\\n\\16\\3\\17\\3\\17\\3\\17\\3\\17\")\n35         buf.write(u\"\\5\\17\\u00af\\n\\17\\3\\17\\3\\17\\3\\20\\3\\20\\3\\20\\3\\20\\5\\20\\u00b7\")\n36         buf.write(u\"\\n\\20\\3\\20\\3\\20\\3\\21\\3\\21\\3\\21\\3\\21\\3\\21\\3\\21\\3\\21\\3\")\n37         buf.write(u\"\\21\\3\\21\\3\\21\\5\\21\\u00c5\\n\\21\\3\\21\\5\\21\\u00c8\\n\\21\\7\")\n38         buf.write(u\"\\21\\u00ca\\n\\21\\f\\21\\16\\21\\u00cd\\13\\21\\3\\22\\3\\22\\3\\22\")\n39         buf.write(u\"\\3\\22\\3\\22\\3\\22\\3\\22\\3\\22\\3\\22\\3\\22\\5\\22\\u00d9\\n\\22\\3\")\n40         buf.write(u\"\\22\\5\\22\\u00dc\\n\\22\\7\\22\\u00de\\n\\22\\f\\22\\16\\22\\u00e1\")\n41         buf.write(u\"\\13\\22\\3\\23\\3\\23\\3\\23\\3\\23\\3\\23\\5\\23\\u00e8\\n\\23\\3\\24\")\n42         buf.write(u\"\\3\\24\\3\\24\\3\\24\\5\\24\\u00ee\\n\\24\\3\\25\\3\\25\\3\\25\\3\\25\\3\")\n43         buf.write(u\"\\25\\3\\25\\3\\25\\3\\25\\3\\25\\3\\25\\3\\25\\3\\25\\5\\25\\u00fc\\n\\25\")\n44         buf.write(u\"\\3\\26\\3\\26\\3\\26\\3\\26\\3\\27\\3\\27\\5\\27\\u0104\\n\\27\\3\\27\\3\")\n45         buf.write(u\"\\27\\3\\27\\5\\27\\u0109\\n\\27\\3\\30\\3\\30\\3\\30\\3\\30\\3\\30\\3\\31\")\n46         buf.write(u\"\\7\\31\\u0111\\n\\31\\f\\31\\16\\31\\u0114\\13\\31\\3\\32\\3\\32\\3\\32\")\n47         buf.write(u\"\\3\\32\\3\\32\\3\\32\\3\\32\\3\\32\\3\\33\\3\\33\\3\\34\\3\\34\\5\\34\\u0122\")\n48         buf.write(u\"\\n\\34\\3\\34\\5\\34\\u0125\\n\\34\\3\\34\\5\\34\\u0128\\n\\34\\3\\34\")\n49         buf.write(u\"\\5\\34\\u012b\\n\\34\\5\\34\\u012d\\n\\34\\3\\34\\3\\34\\3\\34\\3\\34\")\n50         buf.write(u\"\\3\\34\\5\\34\\u0134\\n\\34\\3\\34\\3\\34\\5\\34\\u0138\\n\\34\\3\\34\")\n51         buf.write(u\"\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\5\")\n52         buf.write(u\"\\34\\u0145\\n\\34\\3\\34\\5\\34\\u0148\\n\\34\\3\\34\\3\\34\\3\\34\\5\")\n53         buf.write(u\"\\34\\u014d\\n\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\5\\34\\u0154\\n\")\n54         buf.write(u\"\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\")\n55         buf.write(u\"\\3\\34\\5\\34\\u0161\\n\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\5\")\n56         buf.write(u\"\\34\\u0169\\n\\34\\3\\35\\3\\35\\3\\35\\3\\35\\3\\35\\5\\35\\u0170\\n\")\n57         buf.write(u\"\\35\\3\\36\\3\\36\\3\\36\\3\\36\\3\\36\\3\\36\\3\\36\\3\\36\\3\\36\\5\\36\")\n58         buf.write(u\"\\u017b\\n\\36\\3\\36\\3\\36\\3\\37\\3\\37\\3\\37\\3\\37\\3\\37\\5\\37\\u0184\")\n59         buf.write(u\"\\n\\37\\3 \\3 \\3!\\3!\\3!\\3!\\3!\\3!\\5!\\u018e\\n!\\3\\\"\\3\\\"\\3\\\"\")\n60         buf.write(u\"\\3\\\"\\3\\\"\\3\\\"\\5\\\"\\u0196\\n\\\"\\3#\\3#\\3#\\3#\\3#\\3$\\3$\\3$\\3\")\n61         buf.write(u\"$\\3$\\3$\\2\\b\\4\\n\\f\\16 \\\"%\\2\\4\\6\\b\\n\\f\\16\\20\\22\\24\\26\\30\")\n62         buf.write(u\"\\32\\34\\36 \\\"$&(*,.\\60\\62\\64\\668:<>@BDF\\2\\b\\3\\2\\659\\3\")\n63         buf.write(u\"\\2\\5\\6\\5\\2\\7\\b*,\\61\\61\\4\\2\\63\\63;;\\3\\2\\25(\\3\\2\\23\\24\")\n64         buf.write(u\"\\2\\u01b9\\2H\\3\\2\\2\\2\\4J\\3\\2\\2\\2\\6U\\3\\2\\2\\2\\bY\\3\\2\\2\\2\")\n65         buf.write(u\"\\n[\\3\\2\\2\\2\\ff\\3\\2\\2\\2\\16q\\3\\2\\2\\2\\20\\u0083\\3\\2\\2\\2\\22\")\n66         buf.write(u\"\\u008e\\3\\2\\2\\2\\24\\u0090\\3\\2\\2\\2\\26\\u0097\\3\\2\\2\\2\\30\\u00a0\")\n67         buf.write(u\"\\3\\2\\2\\2\\32\\u00a2\\3\\2\\2\\2\\34\\u00aa\\3\\2\\2\\2\\36\\u00b2\\3\")\n68         buf.write(u\"\\2\\2\\2 \\u00ba\\3\\2\\2\\2\\\"\\u00ce\\3\\2\\2\\2$\\u00e7\\3\\2\\2\\2\")\n69         buf.write(u\"&\\u00ed\\3\\2\\2\\2(\\u00fb\\3\\2\\2\\2*\\u00fd\\3\\2\\2\\2,\\u0108\")\n70         buf.write(u\"\\3\\2\\2\\2.\\u010a\\3\\2\\2\\2\\60\\u0112\\3\\2\\2\\2\\62\\u0115\\3\\2\")\n71         buf.write(u\"\\2\\2\\64\\u011d\\3\\2\\2\\2\\66\\u0168\\3\\2\\2\\28\\u016f\\3\\2\\2\\2\")\n72         buf.write(u\":\\u0171\\3\\2\\2\\2<\\u0183\\3\\2\\2\\2>\\u0185\\3\\2\\2\\2@\\u0187\")\n73         buf.write(u\"\\3\\2\\2\\2B\\u018f\\3\\2\\2\\2D\\u0197\\3\\2\\2\\2F\\u019c\\3\\2\\2\\2\")\n74         buf.write(u\"HI\\5\\4\\3\\2I\\3\\3\\2\\2\\2JK\\b\\3\\1\\2KL\\5\\b\\5\\2LR\\3\\2\\2\\2M\")\n75         buf.write(u\"N\\f\\4\\2\\2NO\\t\\2\\2\\2OQ\\5\\4\\3\\5PM\\3\\2\\2\\2QT\\3\\2\\2\\2RP\\3\")\n76         buf.write(u\"\\2\\2\\2RS\\3\\2\\2\\2S\\5\\3\\2\\2\\2TR\\3\\2\\2\\2UV\\5\\b\\5\\2VW\\7\\65\")\n77         buf.write(u\"\\2\\2WX\\5\\b\\5\\2X\\7\\3\\2\\2\\2YZ\\5\\n\\6\\2Z\\t\\3\\2\\2\\2[\\\\\\b\\6\")\n78         buf.write(u\"\\1\\2\\\\]\\5\\f\\7\\2]c\\3\\2\\2\\2^_\\f\\4\\2\\2_`\\t\\3\\2\\2`b\\5\\n\\6\")\n79         buf.write(u\"\\5a^\\3\\2\\2\\2be\\3\\2\\2\\2ca\\3\\2\\2\\2cd\\3\\2\\2\\2d\\13\\3\\2\\2\")\n80         buf.write(u\"\\2ec\\3\\2\\2\\2fg\\b\\7\\1\\2gh\\5\\20\\t\\2hn\\3\\2\\2\\2ij\\f\\4\\2\\2\")\n81         buf.write(u\"jk\\t\\4\\2\\2km\\5\\f\\7\\5li\\3\\2\\2\\2mp\\3\\2\\2\\2nl\\3\\2\\2\\2no\")\n82         buf.write(u\"\\3\\2\\2\\2o\\r\\3\\2\\2\\2pn\\3\\2\\2\\2qr\\b\\b\\1\\2rs\\5\\22\\n\\2sy\")\n83         buf.write(u\"\\3\\2\\2\\2tu\\f\\4\\2\\2uv\\t\\4\\2\\2vx\\5\\16\\b\\5wt\\3\\2\\2\\2x{\\3\")\n84         buf.write(u\"\\2\\2\\2yw\\3\\2\\2\\2yz\\3\\2\\2\\2z\\17\\3\\2\\2\\2{y\\3\\2\\2\\2|}\\t\")\n85         buf.write(u\"\\3\\2\\2}\\u0084\\5\\20\\t\\2~\\u0080\\5\\24\\13\\2\\177~\\3\\2\\2\\2\")\n86         buf.write(u\"\\u0080\\u0081\\3\\2\\2\\2\\u0081\\177\\3\\2\\2\\2\\u0081\\u0082\\3\")\n87         buf.write(u\"\\2\\2\\2\\u0082\\u0084\\3\\2\\2\\2\\u0083|\\3\\2\\2\\2\\u0083\\177\\3\")\n88         buf.write(u\"\\2\\2\\2\\u0084\\21\\3\\2\\2\\2\\u0085\\u0086\\t\\3\\2\\2\\u0086\\u008f\")\n89         buf.write(u\"\\5\\22\\n\\2\\u0087\\u008b\\5\\24\\13\\2\\u0088\\u008a\\5\\26\\f\\2\")\n90         buf.write(u\"\\u0089\\u0088\\3\\2\\2\\2\\u008a\\u008d\\3\\2\\2\\2\\u008b\\u0089\")\n91         buf.write(u\"\\3\\2\\2\\2\\u008b\\u008c\\3\\2\\2\\2\\u008c\\u008f\\3\\2\\2\\2\\u008d\")\n92         buf.write(u\"\\u008b\\3\\2\\2\\2\\u008e\\u0085\\3\\2\\2\\2\\u008e\\u0087\\3\\2\\2\")\n93         buf.write(u\"\\2\\u008f\\23\\3\\2\\2\\2\\u0090\\u0094\\5 \\21\\2\\u0091\\u0093\\5\")\n94         buf.write(u\"\\30\\r\\2\\u0092\\u0091\\3\\2\\2\\2\\u0093\\u0096\\3\\2\\2\\2\\u0094\")\n95         buf.write(u\"\\u0092\\3\\2\\2\\2\\u0094\\u0095\\3\\2\\2\\2\\u0095\\25\\3\\2\\2\\2\\u0096\")\n96         buf.write(u\"\\u0094\\3\\2\\2\\2\\u0097\\u009b\\5\\\"\\22\\2\\u0098\\u009a\\5\\30\")\n97         buf.write(u\"\\r\\2\\u0099\\u0098\\3\\2\\2\\2\\u009a\\u009d\\3\\2\\2\\2\\u009b\\u0099\")\n98         buf.write(u\"\\3\\2\\2\\2\\u009b\\u009c\\3\\2\\2\\2\\u009c\\27\\3\\2\\2\\2\\u009d\\u009b\")\n99         buf.write(u\"\\3\\2\\2\\2\\u009e\\u00a1\\7:\\2\\2\\u009f\\u00a1\\5\\32\\16\\2\\u00a0\")\n100         buf.write(u\"\\u009e\\3\\2\\2\\2\\u00a0\\u009f\\3\\2\\2\\2\\u00a1\\31\\3\\2\\2\\2\\u00a2\")\n101         buf.write(u\"\\u00a8\\7\\17\\2\\2\\u00a3\\u00a9\\5\\36\\20\\2\\u00a4\\u00a9\\5\\34\")\n102         buf.write(u\"\\17\\2\\u00a5\\u00a6\\5\\36\\20\\2\\u00a6\\u00a7\\5\\34\\17\\2\\u00a7\")\n103         buf.write(u\"\\u00a9\\3\\2\\2\\2\\u00a8\\u00a3\\3\\2\\2\\2\\u00a8\\u00a4\\3\\2\\2\")\n104         buf.write(u\"\\2\\u00a8\\u00a5\\3\\2\\2\\2\\u00a9\\33\\3\\2\\2\\2\\u00aa\\u00ab\\7\")\n105         buf.write(u\"/\\2\\2\\u00ab\\u00ae\\7\\13\\2\\2\\u00ac\\u00af\\5\\b\\5\\2\\u00ad\")\n106         buf.write(u\"\\u00af\\5\\6\\4\\2\\u00ae\\u00ac\\3\\2\\2\\2\\u00ae\\u00ad\\3\\2\\2\")\n107         buf.write(u\"\\2\\u00af\\u00b0\\3\\2\\2\\2\\u00b0\\u00b1\\7\\f\\2\\2\\u00b1\\35\\3\")\n108         buf.write(u\"\\2\\2\\2\\u00b2\\u00b3\\7\\60\\2\\2\\u00b3\\u00b6\\7\\13\\2\\2\\u00b4\")\n109         buf.write(u\"\\u00b7\\5\\b\\5\\2\\u00b5\\u00b7\\5\\6\\4\\2\\u00b6\\u00b4\\3\\2\\2\")\n110         buf.write(u\"\\2\\u00b6\\u00b5\\3\\2\\2\\2\\u00b7\\u00b8\\3\\2\\2\\2\\u00b8\\u00b9\")\n111         buf.write(u\"\\7\\f\\2\\2\\u00b9\\37\\3\\2\\2\\2\\u00ba\\u00bb\\b\\21\\1\\2\\u00bb\")\n112         buf.write(u\"\\u00bc\\5$\\23\\2\\u00bc\\u00cb\\3\\2\\2\\2\\u00bd\\u00be\\f\\4\\2\")\n113         buf.write(u\"\\2\\u00be\\u00c4\\7\\60\\2\\2\\u00bf\\u00c5\\5,\\27\\2\\u00c0\\u00c1\")\n114         buf.write(u\"\\7\\13\\2\\2\\u00c1\\u00c2\\5\\b\\5\\2\\u00c2\\u00c3\\7\\f\\2\\2\\u00c3\")\n115         buf.write(u\"\\u00c5\\3\\2\\2\\2\\u00c4\\u00bf\\3\\2\\2\\2\\u00c4\\u00c0\\3\\2\\2\")\n116         buf.write(u\"\\2\\u00c5\\u00c7\\3\\2\\2\\2\\u00c6\\u00c8\\5@!\\2\\u00c7\\u00c6\")\n117         buf.write(u\"\\3\\2\\2\\2\\u00c7\\u00c8\\3\\2\\2\\2\\u00c8\\u00ca\\3\\2\\2\\2\\u00c9\")\n118         buf.write(u\"\\u00bd\\3\\2\\2\\2\\u00ca\\u00cd\\3\\2\\2\\2\\u00cb\\u00c9\\3\\2\\2\")\n119         buf.write(u\"\\2\\u00cb\\u00cc\\3\\2\\2\\2\\u00cc!\\3\\2\\2\\2\\u00cd\\u00cb\\3\\2\")\n120         buf.write(u\"\\2\\2\\u00ce\\u00cf\\b\\22\\1\\2\\u00cf\\u00d0\\5&\\24\\2\\u00d0\\u00df\")\n121         buf.write(u\"\\3\\2\\2\\2\\u00d1\\u00d2\\f\\4\\2\\2\\u00d2\\u00d8\\7\\60\\2\\2\\u00d3\")\n122         buf.write(u\"\\u00d9\\5,\\27\\2\\u00d4\\u00d5\\7\\13\\2\\2\\u00d5\\u00d6\\5\\b\\5\")\n123         buf.write(u\"\\2\\u00d6\\u00d7\\7\\f\\2\\2\\u00d7\\u00d9\\3\\2\\2\\2\\u00d8\\u00d3\")\n124         buf.write(u\"\\3\\2\\2\\2\\u00d8\\u00d4\\3\\2\\2\\2\\u00d9\\u00db\\3\\2\\2\\2\\u00da\")\n125         buf.write(u\"\\u00dc\\5@!\\2\\u00db\\u00da\\3\\2\\2\\2\\u00db\\u00dc\\3\\2\\2\\2\")\n126         buf.write(u\"\\u00dc\\u00de\\3\\2\\2\\2\\u00dd\\u00d1\\3\\2\\2\\2\\u00de\\u00e1\")\n127         buf.write(u\"\\3\\2\\2\\2\\u00df\\u00dd\\3\\2\\2\\2\\u00df\\u00e0\\3\\2\\2\\2\\u00e0\")\n128         buf.write(u\"#\\3\\2\\2\\2\\u00e1\\u00df\\3\\2\\2\\2\\u00e2\\u00e8\\5(\\25\\2\\u00e3\")\n129         buf.write(u\"\\u00e8\\5*\\26\\2\\u00e4\\u00e8\\5\\66\\34\\2\\u00e5\\u00e8\\5,\\27\")\n130         buf.write(u\"\\2\\u00e6\\u00e8\\5\\62\\32\\2\\u00e7\\u00e2\\3\\2\\2\\2\\u00e7\\u00e3\")\n131         buf.write(u\"\\3\\2\\2\\2\\u00e7\\u00e4\\3\\2\\2\\2\\u00e7\\u00e5\\3\\2\\2\\2\\u00e7\")\n132         buf.write(u\"\\u00e6\\3\\2\\2\\2\\u00e8%\\3\\2\\2\\2\\u00e9\\u00ee\\5(\\25\\2\\u00ea\")\n133         buf.write(u\"\\u00ee\\5*\\26\\2\\u00eb\\u00ee\\5,\\27\\2\\u00ec\\u00ee\\5\\62\\32\")\n134         buf.write(u\"\\2\\u00ed\\u00e9\\3\\2\\2\\2\\u00ed\\u00ea\\3\\2\\2\\2\\u00ed\\u00eb\")\n135         buf.write(u\"\\3\\2\\2\\2\\u00ed\\u00ec\\3\\2\\2\\2\\u00ee\\'\\3\\2\\2\\2\\u00ef\\u00f0\")\n136         buf.write(u\"\\7\\t\\2\\2\\u00f0\\u00f1\\5\\b\\5\\2\\u00f1\\u00f2\\7\\n\\2\\2\\u00f2\")\n137         buf.write(u\"\\u00fc\\3\\2\\2\\2\\u00f3\\u00f4\\7\\r\\2\\2\\u00f4\\u00f5\\5\\b\\5\")\n138         buf.write(u\"\\2\\u00f5\\u00f6\\7\\16\\2\\2\\u00f6\\u00fc\\3\\2\\2\\2\\u00f7\\u00f8\")\n139         buf.write(u\"\\7\\13\\2\\2\\u00f8\\u00f9\\5\\b\\5\\2\\u00f9\\u00fa\\7\\f\\2\\2\\u00fa\")\n140         buf.write(u\"\\u00fc\\3\\2\\2\\2\\u00fb\\u00ef\\3\\2\\2\\2\\u00fb\\u00f3\\3\\2\\2\")\n141         buf.write(u\"\\2\\u00fb\\u00f7\\3\\2\\2\\2\\u00fc)\\3\\2\\2\\2\\u00fd\\u00fe\\7\\17\")\n142         buf.write(u\"\\2\\2\\u00fe\\u00ff\\5\\b\\5\\2\\u00ff\\u0100\\7\\17\\2\\2\\u0100+\")\n143         buf.write(u\"\\3\\2\\2\\2\\u0101\\u0103\\t\\5\\2\\2\\u0102\\u0104\\5@!\\2\\u0103\")\n144         buf.write(u\"\\u0102\\3\\2\\2\\2\\u0103\\u0104\\3\\2\\2\\2\\u0104\\u0109\\3\\2\\2\")\n145         buf.write(u\"\\2\\u0105\\u0109\\7\\64\\2\\2\\u0106\\u0109\\7\\62\\2\\2\\u0107\\u0109\")\n146         buf.write(u\"\\5.\\30\\2\\u0108\\u0101\\3\\2\\2\\2\\u0108\\u0105\\3\\2\\2\\2\\u0108\")\n147         buf.write(u\"\\u0106\\3\\2\\2\\2\\u0108\\u0107\\3\\2\\2\\2\\u0109-\\3\\2\\2\\2\\u010a\")\n148         buf.write(u\"\\u010b\\7.\\2\\2\\u010b\\u010c\\7\\13\\2\\2\\u010c\\u010d\\5\\60\\31\")\n149         buf.write(u\"\\2\\u010d\\u010e\\7\\f\\2\\2\\u010e/\\3\\2\\2\\2\\u010f\\u0111\\7\\63\")\n150         buf.write(u\"\\2\\2\\u0110\\u010f\\3\\2\\2\\2\\u0111\\u0114\\3\\2\\2\\2\\u0112\\u0110\")\n151         buf.write(u\"\\3\\2\\2\\2\\u0112\\u0113\\3\\2\\2\\2\\u0113\\61\\3\\2\\2\\2\\u0114\\u0112\")\n152         buf.write(u\"\\3\\2\\2\\2\\u0115\\u0116\\7-\\2\\2\\u0116\\u0117\\7\\13\\2\\2\\u0117\")\n153         buf.write(u\"\\u0118\\5\\b\\5\\2\\u0118\\u0119\\7\\f\\2\\2\\u0119\\u011a\\7\\13\\2\")\n154         buf.write(u\"\\2\\u011a\\u011b\\5\\b\\5\\2\\u011b\\u011c\\7\\f\\2\\2\\u011c\\63\\3\")\n155         buf.write(u\"\\2\\2\\2\\u011d\\u011e\\t\\6\\2\\2\\u011e\\65\\3\\2\\2\\2\\u011f\\u012c\")\n156         buf.write(u\"\\5\\64\\33\\2\\u0120\\u0122\\5@!\\2\\u0121\\u0120\\3\\2\\2\\2\\u0121\")\n157         buf.write(u\"\\u0122\\3\\2\\2\\2\\u0122\\u0124\\3\\2\\2\\2\\u0123\\u0125\\5B\\\"\\2\")\n158         buf.write(u\"\\u0124\\u0123\\3\\2\\2\\2\\u0124\\u0125\\3\\2\\2\\2\\u0125\\u012d\")\n159         buf.write(u\"\\3\\2\\2\\2\\u0126\\u0128\\5B\\\"\\2\\u0127\\u0126\\3\\2\\2\\2\\u0127\")\n160         buf.write(u\"\\u0128\\3\\2\\2\\2\\u0128\\u012a\\3\\2\\2\\2\\u0129\\u012b\\5@!\\2\")\n161         buf.write(u\"\\u012a\\u0129\\3\\2\\2\\2\\u012a\\u012b\\3\\2\\2\\2\\u012b\\u012d\")\n162         buf.write(u\"\\3\\2\\2\\2\\u012c\\u0121\\3\\2\\2\\2\\u012c\\u0127\\3\\2\\2\\2\\u012d\")\n163         buf.write(u\"\\u0133\\3\\2\\2\\2\\u012e\\u012f\\7\\t\\2\\2\\u012f\\u0130\\5<\\37\")\n164         buf.write(u\"\\2\\u0130\\u0131\\7\\n\\2\\2\\u0131\\u0134\\3\\2\\2\\2\\u0132\\u0134\")\n165         buf.write(u\"\\5> \\2\\u0133\\u012e\\3\\2\\2\\2\\u0133\\u0132\\3\\2\\2\\2\\u0134\")\n166         buf.write(u\"\\u0169\\3\\2\\2\\2\\u0135\\u0137\\t\\5\\2\\2\\u0136\\u0138\\5@!\\2\")\n167         buf.write(u\"\\u0137\\u0136\\3\\2\\2\\2\\u0137\\u0138\\3\\2\\2\\2\\u0138\\u0139\")\n168         buf.write(u\"\\3\\2\\2\\2\\u0139\\u013a\\7\\t\\2\\2\\u013a\\u013b\\58\\35\\2\\u013b\")\n169         buf.write(u\"\\u013c\\7\\n\\2\\2\\u013c\\u0169\\3\\2\\2\\2\\u013d\\u0144\\7\\22\\2\")\n170         buf.write(u\"\\2\\u013e\\u013f\\5@!\\2\\u013f\\u0140\\5B\\\"\\2\\u0140\\u0145\\3\")\n171         buf.write(u\"\\2\\2\\2\\u0141\\u0142\\5B\\\"\\2\\u0142\\u0143\\5@!\\2\\u0143\\u0145\")\n172         buf.write(u\"\\3\\2\\2\\2\\u0144\\u013e\\3\\2\\2\\2\\u0144\\u0141\\3\\2\\2\\2\\u0144\")\n173         buf.write(u\"\\u0145\\3\\2\\2\\2\\u0145\\u014c\\3\\2\\2\\2\\u0146\\u0148\\5\\n\\6\")\n174         buf.write(u\"\\2\\u0147\\u0146\\3\\2\\2\\2\\u0147\\u0148\\3\\2\\2\\2\\u0148\\u0149\")\n175         buf.write(u\"\\3\\2\\2\\2\\u0149\\u014d\\7\\62\\2\\2\\u014a\\u014d\\5\\62\\32\\2\\u014b\")\n176         buf.write(u\"\\u014d\\5\\n\\6\\2\\u014c\\u0147\\3\\2\\2\\2\\u014c\\u014a\\3\\2\\2\")\n177         buf.write(u\"\\2\\u014c\\u014b\\3\\2\\2\\2\\u014d\\u0169\\3\\2\\2\\2\\u014e\\u0153\")\n178         buf.write(u\"\\7)\\2\\2\\u014f\\u0150\\7\\r\\2\\2\\u0150\\u0151\\5\\b\\5\\2\\u0151\")\n179         buf.write(u\"\\u0152\\7\\16\\2\\2\\u0152\\u0154\\3\\2\\2\\2\\u0153\\u014f\\3\\2\\2\")\n180         buf.write(u\"\\2\\u0153\\u0154\\3\\2\\2\\2\\u0154\\u0155\\3\\2\\2\\2\\u0155\\u0156\")\n181         buf.write(u\"\\7\\13\\2\\2\\u0156\\u0157\\5\\b\\5\\2\\u0157\\u0158\\7\\f\\2\\2\\u0158\")\n182         buf.write(u\"\\u0169\\3\\2\\2\\2\\u0159\\u0160\\t\\7\\2\\2\\u015a\\u015b\\5D#\\2\")\n183         buf.write(u\"\\u015b\\u015c\\5B\\\"\\2\\u015c\\u0161\\3\\2\\2\\2\\u015d\\u015e\\5\")\n184         buf.write(u\"B\\\"\\2\\u015e\\u015f\\5D#\\2\\u015f\\u0161\\3\\2\\2\\2\\u0160\\u015a\")\n185         buf.write(u\"\\3\\2\\2\\2\\u0160\\u015d\\3\\2\\2\\2\\u0161\\u0162\\3\\2\\2\\2\\u0162\")\n186         buf.write(u\"\\u0163\\5\\f\\7\\2\\u0163\\u0169\\3\\2\\2\\2\\u0164\\u0165\\7\\20\\2\")\n187         buf.write(u\"\\2\\u0165\\u0166\\5:\\36\\2\\u0166\\u0167\\5\\f\\7\\2\\u0167\\u0169\")\n188         buf.write(u\"\\3\\2\\2\\2\\u0168\\u011f\\3\\2\\2\\2\\u0168\\u0135\\3\\2\\2\\2\\u0168\")\n189         buf.write(u\"\\u013d\\3\\2\\2\\2\\u0168\\u014e\\3\\2\\2\\2\\u0168\\u0159\\3\\2\\2\")\n190         buf.write(u\"\\2\\u0168\\u0164\\3\\2\\2\\2\\u0169\\67\\3\\2\\2\\2\\u016a\\u016b\\5\")\n191         buf.write(u\"\\b\\5\\2\\u016b\\u016c\\7\\3\\2\\2\\u016c\\u016d\\58\\35\\2\\u016d\")\n192         buf.write(u\"\\u0170\\3\\2\\2\\2\\u016e\\u0170\\5\\b\\5\\2\\u016f\\u016a\\3\\2\\2\")\n193         buf.write(u\"\\2\\u016f\\u016e\\3\\2\\2\\2\\u01709\\3\\2\\2\\2\\u0171\\u0172\\7/\")\n194         buf.write(u\"\\2\\2\\u0172\\u0173\\7\\13\\2\\2\\u0173\\u0174\\t\\5\\2\\2\\u0174\\u0175\")\n195         buf.write(u\"\\7\\21\\2\\2\\u0175\\u017a\\5\\b\\5\\2\\u0176\\u0177\\7\\60\\2\\2\\u0177\")\n196         buf.write(u\"\\u0178\\7\\13\\2\\2\\u0178\\u0179\\t\\3\\2\\2\\u0179\\u017b\\7\\f\\2\")\n197         buf.write(u\"\\2\\u017a\\u0176\\3\\2\\2\\2\\u017a\\u017b\\3\\2\\2\\2\\u017b\\u017c\")\n198         buf.write(u\"\\3\\2\\2\\2\\u017c\\u017d\\7\\f\\2\\2\\u017d;\\3\\2\\2\\2\\u017e\\u0184\")\n199         buf.write(u\"\\5\\b\\5\\2\\u017f\\u0180\\5\\b\\5\\2\\u0180\\u0181\\7\\3\\2\\2\\u0181\")\n200         buf.write(u\"\\u0182\\5<\\37\\2\\u0182\\u0184\\3\\2\\2\\2\\u0183\\u017e\\3\\2\\2\")\n201         buf.write(u\"\\2\\u0183\\u017f\\3\\2\\2\\2\\u0184=\\3\\2\\2\\2\\u0185\\u0186\\5\\16\")\n202         buf.write(u\"\\b\\2\\u0186?\\3\\2\\2\\2\\u0187\\u018d\\7/\\2\\2\\u0188\\u018e\\5\")\n203         buf.write(u\",\\27\\2\\u0189\\u018a\\7\\13\\2\\2\\u018a\\u018b\\5\\b\\5\\2\\u018b\")\n204         buf.write(u\"\\u018c\\7\\f\\2\\2\\u018c\\u018e\\3\\2\\2\\2\\u018d\\u0188\\3\\2\\2\")\n205         buf.write(u\"\\2\\u018d\\u0189\\3\\2\\2\\2\\u018eA\\3\\2\\2\\2\\u018f\\u0195\\7\\60\")\n206         buf.write(u\"\\2\\2\\u0190\\u0196\\5,\\27\\2\\u0191\\u0192\\7\\13\\2\\2\\u0192\\u0193\")\n207         buf.write(u\"\\5\\b\\5\\2\\u0193\\u0194\\7\\f\\2\\2\\u0194\\u0196\\3\\2\\2\\2\\u0195\")\n208         buf.write(u\"\\u0190\\3\\2\\2\\2\\u0195\\u0191\\3\\2\\2\\2\\u0196C\\3\\2\\2\\2\\u0197\")\n209         buf.write(u\"\\u0198\\7/\\2\\2\\u0198\\u0199\\7\\13\\2\\2\\u0199\\u019a\\5\\6\\4\")\n210         buf.write(u\"\\2\\u019a\\u019b\\7\\f\\2\\2\\u019bE\\3\\2\\2\\2\\u019c\\u019d\\7/\")\n211         buf.write(u\"\\2\\2\\u019d\\u019e\\7\\13\\2\\2\\u019e\\u019f\\5\\6\\4\\2\\u019f\\u01a0\")\n212         buf.write(u\"\\7\\f\\2\\2\\u01a0G\\3\\2\\2\\2.Rcny\\u0081\\u0083\\u008b\\u008e\")\n213         buf.write(u\"\\u0094\\u009b\\u00a0\\u00a8\\u00ae\\u00b6\\u00c4\\u00c7\\u00cb\")\n214         buf.write(u\"\\u00d8\\u00db\\u00df\\u00e7\\u00ed\\u00fb\\u0103\\u0108\\u0112\")\n215         buf.write(u\"\\u0121\\u0124\\u0127\\u012a\\u012c\\u0133\\u0137\\u0144\\u0147\")\n216         buf.write(u\"\\u014c\\u0153\\u0160\\u0168\\u016f\\u017a\\u0183\\u018d\\u0195\")\n217         return buf.getvalue()\n218 \n219 \n220 class LaTeXParser ( Parser ):\n221 \n222     grammarFileName = \"LaTeX.g4\"\n223 \n224     atn = ATNDeserializer().deserialize(serializedATN())\n225 \n226     decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]\n227 \n228     sharedContextCache = PredictionContextCache()\n229 \n230     literalNames = [ u\"<INVALID>\", u\"','\", u\"<INVALID>\", u\"'+'\", u\"'-'\",\n231                      u\"'*'\", u\"'/'\", u\"'('\", u\"')'\", u\"'{'\", u\"'}'\", u\"'['\",\n232                      u\"']'\", u\"'|'\", u\"'\\\\lim'\", u\"<INVALID>\", u\"'\\\\int'\",\n233                      u\"'\\\\sum'\", u\"'\\\\prod'\", u\"'\\\\log'\", u\"'\\\\ln'\", u\"'\\\\sin'\",\n234                      u\"'\\\\cos'\", u\"'\\\\tan'\", u\"'\\\\csc'\", u\"'\\\\sec'\", u\"'\\\\cot'\",\n235                      u\"'\\\\arcsin'\", u\"'\\\\arccos'\", u\"'\\\\arctan'\", u\"'\\\\arccsc'\",\n236                      u\"'\\\\arcsec'\", u\"'\\\\arccot'\", u\"'\\\\sinh'\", u\"'\\\\cosh'\",\n237                      u\"'\\\\tanh'\", u\"'\\\\arsinh'\", u\"'\\\\arcosh'\", u\"'\\\\artanh'\",\n238                      u\"'\\\\sqrt'\", u\"'\\\\times'\", u\"'\\\\cdot'\", u\"'\\\\div'\",\n239                      u\"'\\\\frac'\", u\"'\\\\mathit'\", u\"'_'\", u\"'^'\", u\"':'\",\n240                      u\"<INVALID>\", u\"<INVALID>\", u\"<INVALID>\", u\"'='\", u\"'<'\",\n241                      u\"'\\\\leq'\", u\"'>'\", u\"'\\\\geq'\", u\"'!'\" ]\n242 \n243     symbolicNames = [ u\"<INVALID>\", u\"<INVALID>\", u\"WS\", u\"ADD\", u\"SUB\",\n244                       u\"MUL\", u\"DIV\", u\"L_PAREN\", u\"R_PAREN\", u\"L_BRACE\",\n245                       u\"R_BRACE\", u\"L_BRACKET\", u\"R_BRACKET\", u\"BAR\", u\"FUNC_LIM\",\n246                       u\"LIM_APPROACH_SYM\", u\"FUNC_INT\", u\"FUNC_SUM\", u\"FUNC_PROD\",\n247                       u\"FUNC_LOG\", u\"FUNC_LN\", u\"FUNC_SIN\", u\"FUNC_COS\",\n248                       u\"FUNC_TAN\", u\"FUNC_CSC\", u\"FUNC_SEC\", u\"FUNC_COT\",\n249                       u\"FUNC_ARCSIN\", u\"FUNC_ARCCOS\", u\"FUNC_ARCTAN\", u\"FUNC_ARCCSC\",\n250                       u\"FUNC_ARCSEC\", u\"FUNC_ARCCOT\", u\"FUNC_SINH\", u\"FUNC_COSH\",\n251                       u\"FUNC_TANH\", u\"FUNC_ARSINH\", u\"FUNC_ARCOSH\", u\"FUNC_ARTANH\",\n252                       u\"FUNC_SQRT\", u\"CMD_TIMES\", u\"CMD_CDOT\", u\"CMD_DIV\",\n253                       u\"CMD_FRAC\", u\"CMD_MATHIT\", u\"UNDERSCORE\", u\"CARET\",\n254                       u\"COLON\", u\"DIFFERENTIAL\", u\"LETTER\", u\"NUMBER\", u\"EQUAL\",\n255                       u\"LT\", u\"LTE\", u\"GT\", u\"GTE\", u\"BANG\", u\"SYMBOL\" ]\n256 \n257     RULE_math = 0\n258     RULE_relation = 1\n259     RULE_equality = 2\n260     RULE_expr = 3\n261     RULE_additive = 4\n262     RULE_mp = 5\n263     RULE_mp_nofunc = 6\n264     RULE_unary = 7\n265     RULE_unary_nofunc = 8\n266     RULE_postfix = 9\n267     RULE_postfix_nofunc = 10\n268     RULE_postfix_op = 11\n269     RULE_eval_at = 12\n270     RULE_eval_at_sub = 13\n271     RULE_eval_at_sup = 14\n272     RULE_exp = 15\n273     RULE_exp_nofunc = 16\n274     RULE_comp = 17\n275     RULE_comp_nofunc = 18\n276     RULE_group = 19\n277     RULE_abs_group = 20\n278     RULE_atom = 21\n279     RULE_mathit = 22\n280     RULE_mathit_text = 23\n281     RULE_frac = 24\n282     RULE_func_normal = 25\n283     RULE_func = 26\n284     RULE_args = 27\n285     RULE_limit_sub = 28\n286     RULE_func_arg = 29\n287     RULE_func_arg_noparens = 30\n288     RULE_subexpr = 31\n289     RULE_supexpr = 32\n290     RULE_subeq = 33\n291     RULE_supeq = 34\n292 \n293     ruleNames =  [ u\"math\", u\"relation\", u\"equality\", u\"expr\", u\"additive\",\n294                    u\"mp\", u\"mp_nofunc\", u\"unary\", u\"unary_nofunc\", u\"postfix\",\n295                    u\"postfix_nofunc\", u\"postfix_op\", u\"eval_at\", u\"eval_at_sub\",\n296                    u\"eval_at_sup\", u\"exp\", u\"exp_nofunc\", u\"comp\", u\"comp_nofunc\",\n297                    u\"group\", u\"abs_group\", u\"atom\", u\"mathit\", u\"mathit_text\",\n298                    u\"frac\", u\"func_normal\", u\"func\", u\"args\", u\"limit_sub\",\n299                    u\"func_arg\", u\"func_arg_noparens\", u\"subexpr\", u\"supexpr\",\n300                    u\"subeq\", u\"supeq\" ]\n301 \n302     EOF = Token.EOF\n303     T__0=1\n304     WS=2\n305     ADD=3\n306     SUB=4\n307     MUL=5\n308     DIV=6\n309     L_PAREN=7\n310     R_PAREN=8\n311     L_BRACE=9\n312     R_BRACE=10\n313     L_BRACKET=11\n314     R_BRACKET=12\n315     BAR=13\n316     FUNC_LIM=14\n317     LIM_APPROACH_SYM=15\n318     FUNC_INT=16\n319     FUNC_SUM=17\n320     FUNC_PROD=18\n321     FUNC_LOG=19\n322     FUNC_LN=20\n323     FUNC_SIN=21\n324     FUNC_COS=22\n325     FUNC_TAN=23\n326     FUNC_CSC=24\n327     FUNC_SEC=25\n328     FUNC_COT=26\n329     FUNC_ARCSIN=27\n330     FUNC_ARCCOS=28\n331     FUNC_ARCTAN=29\n332     FUNC_ARCCSC=30\n333     FUNC_ARCSEC=31\n334     FUNC_ARCCOT=32\n335     FUNC_SINH=33\n336     FUNC_COSH=34\n337     FUNC_TANH=35\n338     FUNC_ARSINH=36\n339     FUNC_ARCOSH=37\n340     FUNC_ARTANH=38\n341     FUNC_SQRT=39\n342     CMD_TIMES=40\n343     CMD_CDOT=41\n344     CMD_DIV=42\n345     CMD_FRAC=43\n346     CMD_MATHIT=44\n347     UNDERSCORE=45\n348     CARET=46\n349     COLON=47\n350     DIFFERENTIAL=48\n351     LETTER=49\n352     NUMBER=50\n353     EQUAL=51\n354     LT=52\n355     LTE=53\n356     GT=54\n357     GTE=55\n358     BANG=56\n359     SYMBOL=57\n360 \n361     def __init__(self, input, output=sys.stdout):\n362         super(LaTeXParser, self).__init__(input, output=output)\n363         self.checkVersion(\"4.7.1\")\n364         self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)\n365         self._predicates = None\n366 \n367 \n368 \n369     class MathContext(ParserRuleContext):\n370 \n371         def __init__(self, parser, parent=None, invokingState=-1):\n372             super(LaTeXParser.MathContext, self).__init__(parent, invokingState)\n373             self.parser = parser\n374 \n375         def relation(self):\n376             return self.getTypedRuleContext(LaTeXParser.RelationContext,0)\n377 \n378 \n379         def getRuleIndex(self):\n380             return LaTeXParser.RULE_math\n381 \n382 \n383 \n384 \n385     def math(self):\n386 \n387         localctx = LaTeXParser.MathContext(self, self._ctx, self.state)\n388         self.enterRule(localctx, 0, self.RULE_math)\n389         try:\n390             self.enterOuterAlt(localctx, 1)\n391             self.state = 70\n392             self.relation(0)\n393         except RecognitionException as re:\n394             localctx.exception = re\n395             self._errHandler.reportError(self, re)\n396             self._errHandler.recover(self, re)\n397         finally:\n398             self.exitRule()\n399         return localctx\n400 \n401     class RelationContext(ParserRuleContext):\n402 \n403         def __init__(self, parser, parent=None, invokingState=-1):\n404             super(LaTeXParser.RelationContext, self).__init__(parent, invokingState)\n405             self.parser = parser\n406 \n407         def expr(self):\n408             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)\n409 \n410 \n411         def relation(self, i=None):\n412             if i is None:\n413                 return self.getTypedRuleContexts(LaTeXParser.RelationContext)\n414             else:\n415                 return self.getTypedRuleContext(LaTeXParser.RelationContext,i)\n416 \n417 \n418         def EQUAL(self):\n419             return self.getToken(LaTeXParser.EQUAL, 0)\n420 \n421         def LT(self):\n422             return self.getToken(LaTeXParser.LT, 0)\n423 \n424         def LTE(self):\n425             return self.getToken(LaTeXParser.LTE, 0)\n426 \n427         def GT(self):\n428             return self.getToken(LaTeXParser.GT, 0)\n429 \n430         def GTE(self):\n431             return self.getToken(LaTeXParser.GTE, 0)\n432 \n433         def getRuleIndex(self):\n434             return LaTeXParser.RULE_relation\n435 \n436 \n437 \n438     def relation(self, _p=0):\n439         _parentctx = self._ctx\n440         _parentState = self.state\n441         localctx = LaTeXParser.RelationContext(self, self._ctx, _parentState)\n442         _prevctx = localctx\n443         _startState = 2\n444         self.enterRecursionRule(localctx, 2, self.RULE_relation, _p)\n445         self._la = 0 # Token type\n446         try:\n447             self.enterOuterAlt(localctx, 1)\n448             self.state = 73\n449             self.expr()\n450             self._ctx.stop = self._input.LT(-1)\n451             self.state = 80\n452             self._errHandler.sync(self)\n453             _alt = self._interp.adaptivePredict(self._input,0,self._ctx)\n454             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:\n455                 if _alt==1:\n456                     if self._parseListeners is not None:\n457                         self.triggerExitRuleEvent()\n458                     _prevctx = localctx\n459                     localctx = LaTeXParser.RelationContext(self, _parentctx, _parentState)\n460                     self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)\n461                     self.state = 75\n462                     if not self.precpred(self._ctx, 2):\n463                         from antlr4.error.Errors import FailedPredicateException\n464                         raise FailedPredicateException(self, \"self.precpred(self._ctx, 2)\")\n465                     self.state = 76\n466                     _la = self._input.LA(1)\n467                     if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.EQUAL) | (1 << LaTeXParser.LT) | (1 << LaTeXParser.LTE) | (1 << LaTeXParser.GT) | (1 << LaTeXParser.GTE))) != 0)):\n468                         self._errHandler.recoverInline(self)\n469                     else:\n470                         self._errHandler.reportMatch(self)\n471                         self.consume()\n472                     self.state = 77\n473                     self.relation(3)\n474                 self.state = 82\n475                 self._errHandler.sync(self)\n476                 _alt = self._interp.adaptivePredict(self._input,0,self._ctx)\n477 \n478         except RecognitionException as re:\n479             localctx.exception = re\n480             self._errHandler.reportError(self, re)\n481             self._errHandler.recover(self, re)\n482         finally:\n483             self.unrollRecursionContexts(_parentctx)\n484         return localctx\n485 \n486     class EqualityContext(ParserRuleContext):\n487 \n488         def __init__(self, parser, parent=None, invokingState=-1):\n489             super(LaTeXParser.EqualityContext, self).__init__(parent, invokingState)\n490             self.parser = parser\n491 \n492         def expr(self, i=None):\n493             if i is None:\n494                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)\n495             else:\n496                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)\n497 \n498 \n499         def EQUAL(self):\n500             return self.getToken(LaTeXParser.EQUAL, 0)\n501 \n502         def getRuleIndex(self):\n503             return LaTeXParser.RULE_equality\n504 \n505 \n506 \n507 \n508     def equality(self):\n509 \n510         localctx = LaTeXParser.EqualityContext(self, self._ctx, self.state)\n511         self.enterRule(localctx, 4, self.RULE_equality)\n512         try:\n513             self.enterOuterAlt(localctx, 1)\n514             self.state = 83\n515             self.expr()\n516             self.state = 84\n517             self.match(LaTeXParser.EQUAL)\n518             self.state = 85\n519             self.expr()\n520         except RecognitionException as re:\n521             localctx.exception = re\n522             self._errHandler.reportError(self, re)\n523             self._errHandler.recover(self, re)\n524         finally:\n525             self.exitRule()\n526         return localctx\n527 \n528     class ExprContext(ParserRuleContext):\n529 \n530         def __init__(self, parser, parent=None, invokingState=-1):\n531             super(LaTeXParser.ExprContext, self).__init__(parent, invokingState)\n532             self.parser = parser\n533 \n534         def additive(self):\n535             return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)\n536 \n537 \n538         def getRuleIndex(self):\n539             return LaTeXParser.RULE_expr\n540 \n541 \n542 \n543 \n544     def expr(self):\n545 \n546         localctx = LaTeXParser.ExprContext(self, self._ctx, self.state)\n547         self.enterRule(localctx, 6, self.RULE_expr)\n548         try:\n549             self.enterOuterAlt(localctx, 1)\n550             self.state = 87\n551             self.additive(0)\n552         except RecognitionException as re:\n553             localctx.exception = re\n554             self._errHandler.reportError(self, re)\n555             self._errHandler.recover(self, re)\n556         finally:\n557             self.exitRule()\n558         return localctx\n559 \n560     class AdditiveContext(ParserRuleContext):\n561 \n562         def __init__(self, parser, parent=None, invokingState=-1):\n563             super(LaTeXParser.AdditiveContext, self).__init__(parent, invokingState)\n564             self.parser = parser\n565 \n566         def mp(self):\n567             return self.getTypedRuleContext(LaTeXParser.MpContext,0)\n568 \n569 \n570         def additive(self, i=None):\n571             if i is None:\n572                 return self.getTypedRuleContexts(LaTeXParser.AdditiveContext)\n573             else:\n574                 return self.getTypedRuleContext(LaTeXParser.AdditiveContext,i)\n575 \n576 \n577         def ADD(self):\n578             return self.getToken(LaTeXParser.ADD, 0)\n579 \n580         def SUB(self):\n581             return self.getToken(LaTeXParser.SUB, 0)\n582 \n583         def getRuleIndex(self):\n584             return LaTeXParser.RULE_additive\n585 \n586 \n587 \n588     def additive(self, _p=0):\n589         _parentctx = self._ctx\n590         _parentState = self.state\n591         localctx = LaTeXParser.AdditiveContext(self, self._ctx, _parentState)\n592         _prevctx = localctx\n593         _startState = 8\n594         self.enterRecursionRule(localctx, 8, self.RULE_additive, _p)\n595         self._la = 0 # Token type\n596         try:\n597             self.enterOuterAlt(localctx, 1)\n598             self.state = 90\n599             self.mp(0)\n600             self._ctx.stop = self._input.LT(-1)\n601             self.state = 97\n602             self._errHandler.sync(self)\n603             _alt = self._interp.adaptivePredict(self._input,1,self._ctx)\n604             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:\n605                 if _alt==1:\n606                     if self._parseListeners is not None:\n607                         self.triggerExitRuleEvent()\n608                     _prevctx = localctx\n609                     localctx = LaTeXParser.AdditiveContext(self, _parentctx, _parentState)\n610                     self.pushNewRecursionContext(localctx, _startState, self.RULE_additive)\n611                     self.state = 92\n612                     if not self.precpred(self._ctx, 2):\n613                         from antlr4.error.Errors import FailedPredicateException\n614                         raise FailedPredicateException(self, \"self.precpred(self._ctx, 2)\")\n615                     self.state = 93\n616                     _la = self._input.LA(1)\n617                     if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):\n618                         self._errHandler.recoverInline(self)\n619                     else:\n620                         self._errHandler.reportMatch(self)\n621                         self.consume()\n622                     self.state = 94\n623                     self.additive(3)\n624                 self.state = 99\n625                 self._errHandler.sync(self)\n626                 _alt = self._interp.adaptivePredict(self._input,1,self._ctx)\n627 \n628         except RecognitionException as re:\n629             localctx.exception = re\n630             self._errHandler.reportError(self, re)\n631             self._errHandler.recover(self, re)\n632         finally:\n633             self.unrollRecursionContexts(_parentctx)\n634         return localctx\n635 \n636     class MpContext(ParserRuleContext):\n637 \n638         def __init__(self, parser, parent=None, invokingState=-1):\n639             super(LaTeXParser.MpContext, self).__init__(parent, invokingState)\n640             self.parser = parser\n641 \n642         def unary(self):\n643             return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)\n644 \n645 \n646         def mp(self, i=None):\n647             if i is None:\n648                 return self.getTypedRuleContexts(LaTeXParser.MpContext)\n649             else:\n650                 return self.getTypedRuleContext(LaTeXParser.MpContext,i)\n651 \n652 \n653         def MUL(self):\n654             return self.getToken(LaTeXParser.MUL, 0)\n655 \n656         def CMD_TIMES(self):\n657             return self.getToken(LaTeXParser.CMD_TIMES, 0)\n658 \n659         def CMD_CDOT(self):\n660             return self.getToken(LaTeXParser.CMD_CDOT, 0)\n661 \n662         def DIV(self):\n663             return self.getToken(LaTeXParser.DIV, 0)\n664 \n665         def CMD_DIV(self):\n666             return self.getToken(LaTeXParser.CMD_DIV, 0)\n667 \n668         def COLON(self):\n669             return self.getToken(LaTeXParser.COLON, 0)\n670 \n671         def getRuleIndex(self):\n672             return LaTeXParser.RULE_mp\n673 \n674 \n675 \n676     def mp(self, _p=0):\n677         _parentctx = self._ctx\n678         _parentState = self.state\n679         localctx = LaTeXParser.MpContext(self, self._ctx, _parentState)\n680         _prevctx = localctx\n681         _startState = 10\n682         self.enterRecursionRule(localctx, 10, self.RULE_mp, _p)\n683         self._la = 0 # Token type\n684         try:\n685             self.enterOuterAlt(localctx, 1)\n686             self.state = 101\n687             self.unary()\n688             self._ctx.stop = self._input.LT(-1)\n689             self.state = 108\n690             self._errHandler.sync(self)\n691             _alt = self._interp.adaptivePredict(self._input,2,self._ctx)\n692             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:\n693                 if _alt==1:\n694                     if self._parseListeners is not None:\n695                         self.triggerExitRuleEvent()\n696                     _prevctx = localctx\n697                     localctx = LaTeXParser.MpContext(self, _parentctx, _parentState)\n698                     self.pushNewRecursionContext(localctx, _startState, self.RULE_mp)\n699                     self.state = 103\n700                     if not self.precpred(self._ctx, 2):\n701                         from antlr4.error.Errors import FailedPredicateException\n702                         raise FailedPredicateException(self, \"self.precpred(self._ctx, 2)\")\n703                     self.state = 104\n704                     _la = self._input.LA(1)\n705                     if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.MUL) | (1 << LaTeXParser.DIV) | (1 << LaTeXParser.CMD_TIMES) | (1 << LaTeXParser.CMD_CDOT) | (1 << LaTeXParser.CMD_DIV) | (1 << LaTeXParser.COLON))) != 0)):\n706                         self._errHandler.recoverInline(self)\n707                     else:\n708                         self._errHandler.reportMatch(self)\n709                         self.consume()\n710                     self.state = 105\n711                     self.mp(3)\n712                 self.state = 110\n713                 self._errHandler.sync(self)\n714                 _alt = self._interp.adaptivePredict(self._input,2,self._ctx)\n715 \n716         except RecognitionException as re:\n717             localctx.exception = re\n718             self._errHandler.reportError(self, re)\n719             self._errHandler.recover(self, re)\n720         finally:\n721             self.unrollRecursionContexts(_parentctx)\n722         return localctx\n723 \n724     class Mp_nofuncContext(ParserRuleContext):\n725 \n726         def __init__(self, parser, parent=None, invokingState=-1):\n727             super(LaTeXParser.Mp_nofuncContext, self).__init__(parent, invokingState)\n728             self.parser = parser\n729 \n730         def unary_nofunc(self):\n731             return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)\n732 \n733 \n734         def mp_nofunc(self, i=None):\n735             if i is None:\n736                 return self.getTypedRuleContexts(LaTeXParser.Mp_nofuncContext)\n737             else:\n738                 return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,i)\n739 \n740 \n741         def MUL(self):\n742             return self.getToken(LaTeXParser.MUL, 0)\n743 \n744         def CMD_TIMES(self):\n745             return self.getToken(LaTeXParser.CMD_TIMES, 0)\n746 \n747         def CMD_CDOT(self):\n748             return self.getToken(LaTeXParser.CMD_CDOT, 0)\n749 \n750         def DIV(self):\n751             return self.getToken(LaTeXParser.DIV, 0)\n752 \n753         def CMD_DIV(self):\n754             return self.getToken(LaTeXParser.CMD_DIV, 0)\n755 \n756         def COLON(self):\n757             return self.getToken(LaTeXParser.COLON, 0)\n758 \n759         def getRuleIndex(self):\n760             return LaTeXParser.RULE_mp_nofunc\n761 \n762 \n763 \n764     def mp_nofunc(self, _p=0):\n765         _parentctx = self._ctx\n766         _parentState = self.state\n767         localctx = LaTeXParser.Mp_nofuncContext(self, self._ctx, _parentState)\n768         _prevctx = localctx\n769         _startState = 12\n770         self.enterRecursionRule(localctx, 12, self.RULE_mp_nofunc, _p)\n771         self._la = 0 # Token type\n772         try:\n773             self.enterOuterAlt(localctx, 1)\n774             self.state = 112\n775             self.unary_nofunc()\n776             self._ctx.stop = self._input.LT(-1)\n777             self.state = 119\n778             self._errHandler.sync(self)\n779             _alt = self._interp.adaptivePredict(self._input,3,self._ctx)\n780             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:\n781                 if _alt==1:\n782                     if self._parseListeners is not None:\n783                         self.triggerExitRuleEvent()\n784                     _prevctx = localctx\n785                     localctx = LaTeXParser.Mp_nofuncContext(self, _parentctx, _parentState)\n786                     self.pushNewRecursionContext(localctx, _startState, self.RULE_mp_nofunc)\n787                     self.state = 114\n788                     if not self.precpred(self._ctx, 2):\n789                         from antlr4.error.Errors import FailedPredicateException\n790                         raise FailedPredicateException(self, \"self.precpred(self._ctx, 2)\")\n791                     self.state = 115\n792                     _la = self._input.LA(1)\n793                     if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.MUL) | (1 << LaTeXParser.DIV) | (1 << LaTeXParser.CMD_TIMES) | (1 << LaTeXParser.CMD_CDOT) | (1 << LaTeXParser.CMD_DIV) | (1 << LaTeXParser.COLON))) != 0)):\n794                         self._errHandler.recoverInline(self)\n795                     else:\n796                         self._errHandler.reportMatch(self)\n797                         self.consume()\n798                     self.state = 116\n799                     self.mp_nofunc(3)\n800                 self.state = 121\n801                 self._errHandler.sync(self)\n802                 _alt = self._interp.adaptivePredict(self._input,3,self._ctx)\n803 \n804         except RecognitionException as re:\n805             localctx.exception = re\n806             self._errHandler.reportError(self, re)\n807             self._errHandler.recover(self, re)\n808         finally:\n809             self.unrollRecursionContexts(_parentctx)\n810         return localctx\n811 \n812     class UnaryContext(ParserRuleContext):\n813 \n814         def __init__(self, parser, parent=None, invokingState=-1):\n815             super(LaTeXParser.UnaryContext, self).__init__(parent, invokingState)\n816             self.parser = parser\n817 \n818         def unary(self):\n819             return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)\n820 \n821 \n822         def ADD(self):\n823             return self.getToken(LaTeXParser.ADD, 0)\n824 \n825         def SUB(self):\n826             return self.getToken(LaTeXParser.SUB, 0)\n827 \n828         def postfix(self, i=None):\n829             if i is None:\n830                 return self.getTypedRuleContexts(LaTeXParser.PostfixContext)\n831             else:\n832                 return self.getTypedRuleContext(LaTeXParser.PostfixContext,i)\n833 \n834 \n835         def getRuleIndex(self):\n836             return LaTeXParser.RULE_unary\n837 \n838 \n839 \n840 \n841     def unary(self):\n842 \n843         localctx = LaTeXParser.UnaryContext(self, self._ctx, self.state)\n844         self.enterRule(localctx, 14, self.RULE_unary)\n845         self._la = 0 # Token type\n846         try:\n847             self.state = 129\n848             self._errHandler.sync(self)\n849             token = self._input.LA(1)\n850             if token in [LaTeXParser.ADD, LaTeXParser.SUB]:\n851                 self.enterOuterAlt(localctx, 1)\n852                 self.state = 122\n853                 _la = self._input.LA(1)\n854                 if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):\n855                     self._errHandler.recoverInline(self)\n856                 else:\n857                     self._errHandler.reportMatch(self)\n858                     self.consume()\n859                 self.state = 123\n860                 self.unary()\n861                 pass\n862             elif token in [LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.FUNC_SQRT, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:\n863                 self.enterOuterAlt(localctx, 2)\n864                 self.state = 125\n865                 self._errHandler.sync(self)\n866                 _alt = 1\n867                 while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:\n868                     if _alt == 1:\n869                         self.state = 124\n870                         self.postfix()\n871 \n872                     else:\n873                         raise NoViableAltException(self)\n874                     self.state = 127\n875                     self._errHandler.sync(self)\n876                     _alt = self._interp.adaptivePredict(self._input,4,self._ctx)\n877 \n878                 pass\n879             else:\n880                 raise NoViableAltException(self)\n881 \n882         except RecognitionException as re:\n883             localctx.exception = re\n884             self._errHandler.reportError(self, re)\n885             self._errHandler.recover(self, re)\n886         finally:\n887             self.exitRule()\n888         return localctx\n889 \n890     class Unary_nofuncContext(ParserRuleContext):\n891 \n892         def __init__(self, parser, parent=None, invokingState=-1):\n893             super(LaTeXParser.Unary_nofuncContext, self).__init__(parent, invokingState)\n894             self.parser = parser\n895 \n896         def unary_nofunc(self):\n897             return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)\n898 \n899 \n900         def ADD(self):\n901             return self.getToken(LaTeXParser.ADD, 0)\n902 \n903         def SUB(self):\n904             return self.getToken(LaTeXParser.SUB, 0)\n905 \n906         def postfix(self):\n907             return self.getTypedRuleContext(LaTeXParser.PostfixContext,0)\n908 \n909 \n910         def postfix_nofunc(self, i=None):\n911             if i is None:\n912                 return self.getTypedRuleContexts(LaTeXParser.Postfix_nofuncContext)\n913             else:\n914                 return self.getTypedRuleContext(LaTeXParser.Postfix_nofuncContext,i)\n915 \n916 \n917         def getRuleIndex(self):\n918             return LaTeXParser.RULE_unary_nofunc\n919 \n920 \n921 \n922 \n923     def unary_nofunc(self):\n924 \n925         localctx = LaTeXParser.Unary_nofuncContext(self, self._ctx, self.state)\n926         self.enterRule(localctx, 16, self.RULE_unary_nofunc)\n927         self._la = 0 # Token type\n928         try:\n929             self.state = 140\n930             self._errHandler.sync(self)\n931             token = self._input.LA(1)\n932             if token in [LaTeXParser.ADD, LaTeXParser.SUB]:\n933                 self.enterOuterAlt(localctx, 1)\n934                 self.state = 131\n935                 _la = self._input.LA(1)\n936                 if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):\n937                     self._errHandler.recoverInline(self)\n938                 else:\n939                     self._errHandler.reportMatch(self)\n940                     self.consume()\n941                 self.state = 132\n942                 self.unary_nofunc()\n943                 pass\n944             elif token in [LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.FUNC_SQRT, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:\n945                 self.enterOuterAlt(localctx, 2)\n946                 self.state = 133\n947                 self.postfix()\n948                 self.state = 137\n949                 self._errHandler.sync(self)\n950                 _alt = self._interp.adaptivePredict(self._input,6,self._ctx)\n951                 while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:\n952                     if _alt==1:\n953                         self.state = 134\n954                         self.postfix_nofunc()\n955                     self.state = 139\n956                     self._errHandler.sync(self)\n957                     _alt = self._interp.adaptivePredict(self._input,6,self._ctx)\n958 \n959                 pass\n960             else:\n961                 raise NoViableAltException(self)\n962 \n963         except RecognitionException as re:\n964             localctx.exception = re\n965             self._errHandler.reportError(self, re)\n966             self._errHandler.recover(self, re)\n967         finally:\n968             self.exitRule()\n969         return localctx\n970 \n971     class PostfixContext(ParserRuleContext):\n972 \n973         def __init__(self, parser, parent=None, invokingState=-1):\n974             super(LaTeXParser.PostfixContext, self).__init__(parent, invokingState)\n975             self.parser = parser\n976 \n977         def exp(self):\n978             return self.getTypedRuleContext(LaTeXParser.ExpContext,0)\n979 \n980 \n981         def postfix_op(self, i=None):\n982             if i is None:\n983                 return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)\n984             else:\n985                 return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)\n986 \n987 \n988         def getRuleIndex(self):\n989             return LaTeXParser.RULE_postfix\n990 \n991 \n992 \n993 \n994     def postfix(self):\n995 \n996         localctx = LaTeXParser.PostfixContext(self, self._ctx, self.state)\n997         self.enterRule(localctx, 18, self.RULE_postfix)\n998         try:\n999             self.enterOuterAlt(localctx, 1)\n1000             self.state = 142\n1001             self.exp(0)\n1002             self.state = 146\n1003             self._errHandler.sync(self)\n1004             _alt = self._interp.adaptivePredict(self._input,8,self._ctx)\n1005             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:\n1006                 if _alt==1:\n1007                     self.state = 143\n1008                     self.postfix_op()\n1009                 self.state = 148\n1010                 self._errHandler.sync(self)\n1011                 _alt = self._interp.adaptivePredict(self._input,8,self._ctx)\n1012 \n1013         except RecognitionException as re:\n1014             localctx.exception = re\n1015             self._errHandler.reportError(self, re)\n1016             self._errHandler.recover(self, re)\n1017         finally:\n1018             self.exitRule()\n1019         return localctx\n1020 \n1021     class Postfix_nofuncContext(ParserRuleContext):\n1022 \n1023         def __init__(self, parser, parent=None, invokingState=-1):\n1024             super(LaTeXParser.Postfix_nofuncContext, self).__init__(parent, invokingState)\n1025             self.parser = parser\n1026 \n1027         def exp_nofunc(self):\n1028             return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)\n1029 \n1030 \n1031         def postfix_op(self, i=None):\n1032             if i is None:\n1033                 return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)\n1034             else:\n1035                 return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)\n1036 \n1037 \n1038         def getRuleIndex(self):\n1039             return LaTeXParser.RULE_postfix_nofunc\n1040 \n1041 \n1042 \n1043 \n1044     def postfix_nofunc(self):\n1045 \n1046         localctx = LaTeXParser.Postfix_nofuncContext(self, self._ctx, self.state)\n1047         self.enterRule(localctx, 20, self.RULE_postfix_nofunc)\n1048         try:\n1049             self.enterOuterAlt(localctx, 1)\n1050             self.state = 149\n1051             self.exp_nofunc(0)\n1052             self.state = 153\n1053             self._errHandler.sync(self)\n1054             _alt = self._interp.adaptivePredict(self._input,9,self._ctx)\n1055             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:\n1056                 if _alt==1:\n1057                     self.state = 150\n1058                     self.postfix_op()\n1059                 self.state = 155\n1060                 self._errHandler.sync(self)\n1061                 _alt = self._interp.adaptivePredict(self._input,9,self._ctx)\n1062 \n1063         except RecognitionException as re:\n1064             localctx.exception = re\n1065             self._errHandler.reportError(self, re)\n1066             self._errHandler.recover(self, re)\n1067         finally:\n1068             self.exitRule()\n1069         return localctx\n1070 \n1071     class Postfix_opContext(ParserRuleContext):\n1072 \n1073         def __init__(self, parser, parent=None, invokingState=-1):\n1074             super(LaTeXParser.Postfix_opContext, self).__init__(parent, invokingState)\n1075             self.parser = parser\n1076 \n1077         def BANG(self):\n1078             return self.getToken(LaTeXParser.BANG, 0)\n1079 \n1080         def eval_at(self):\n1081             return self.getTypedRuleContext(LaTeXParser.Eval_atContext,0)\n1082 \n1083 \n1084         def getRuleIndex(self):\n1085             return LaTeXParser.RULE_postfix_op\n1086 \n1087 \n1088 \n1089 \n1090     def postfix_op(self):\n1091 \n1092         localctx = LaTeXParser.Postfix_opContext(self, self._ctx, self.state)\n1093         self.enterRule(localctx, 22, self.RULE_postfix_op)\n1094         try:\n1095             self.state = 158\n1096             self._errHandler.sync(self)\n1097             token = self._input.LA(1)\n1098             if token in [LaTeXParser.BANG]:\n1099                 self.enterOuterAlt(localctx, 1)\n1100                 self.state = 156\n1101                 self.match(LaTeXParser.BANG)\n1102                 pass\n1103             elif token in [LaTeXParser.BAR]:\n1104                 self.enterOuterAlt(localctx, 2)\n1105                 self.state = 157\n1106                 self.eval_at()\n1107                 pass\n1108             else:\n1109                 raise NoViableAltException(self)\n1110 \n1111         except RecognitionException as re:\n1112             localctx.exception = re\n1113             self._errHandler.reportError(self, re)\n1114             self._errHandler.recover(self, re)\n1115         finally:\n1116             self.exitRule()\n1117         return localctx\n1118 \n1119     class Eval_atContext(ParserRuleContext):\n1120 \n1121         def __init__(self, parser, parent=None, invokingState=-1):\n1122             super(LaTeXParser.Eval_atContext, self).__init__(parent, invokingState)\n1123             self.parser = parser\n1124 \n1125         def BAR(self):\n1126             return self.getToken(LaTeXParser.BAR, 0)\n1127 \n1128         def eval_at_sup(self):\n1129             return self.getTypedRuleContext(LaTeXParser.Eval_at_supContext,0)\n1130 \n1131 \n1132         def eval_at_sub(self):\n1133             return self.getTypedRuleContext(LaTeXParser.Eval_at_subContext,0)\n1134 \n1135 \n1136         def getRuleIndex(self):\n1137             return LaTeXParser.RULE_eval_at\n1138 \n1139 \n1140 \n1141 \n1142     def eval_at(self):\n1143 \n1144         localctx = LaTeXParser.Eval_atContext(self, self._ctx, self.state)\n1145         self.enterRule(localctx, 24, self.RULE_eval_at)\n1146         try:\n1147             self.enterOuterAlt(localctx, 1)\n1148             self.state = 160\n1149             self.match(LaTeXParser.BAR)\n1150             self.state = 166\n1151             self._errHandler.sync(self)\n1152             la_ = self._interp.adaptivePredict(self._input,11,self._ctx)\n1153             if la_ == 1:\n1154                 self.state = 161\n1155                 self.eval_at_sup()\n1156                 pass\n1157 \n1158             elif la_ == 2:\n1159                 self.state = 162\n1160                 self.eval_at_sub()\n1161                 pass\n1162 \n1163             elif la_ == 3:\n1164                 self.state = 163\n1165                 self.eval_at_sup()\n1166                 self.state = 164\n1167                 self.eval_at_sub()\n1168                 pass\n1169 \n1170 \n1171         except RecognitionException as re:\n1172             localctx.exception = re\n1173             self._errHandler.reportError(self, re)\n1174             self._errHandler.recover(self, re)\n1175         finally:\n1176             self.exitRule()\n1177         return localctx\n1178 \n1179     class Eval_at_subContext(ParserRuleContext):\n1180 \n1181         def __init__(self, parser, parent=None, invokingState=-1):\n1182             super(LaTeXParser.Eval_at_subContext, self).__init__(parent, invokingState)\n1183             self.parser = parser\n1184 \n1185         def UNDERSCORE(self):\n1186             return self.getToken(LaTeXParser.UNDERSCORE, 0)\n1187 \n1188         def L_BRACE(self):\n1189             return self.getToken(LaTeXParser.L_BRACE, 0)\n1190 \n1191         def R_BRACE(self):\n1192             return self.getToken(LaTeXParser.R_BRACE, 0)\n1193 \n1194         def expr(self):\n1195             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)\n1196 \n1197 \n1198         def equality(self):\n1199             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)\n1200 \n1201 \n1202         def getRuleIndex(self):\n1203             return LaTeXParser.RULE_eval_at_sub\n1204 \n1205 \n1206 \n1207 \n1208     def eval_at_sub(self):\n1209 \n1210         localctx = LaTeXParser.Eval_at_subContext(self, self._ctx, self.state)\n1211         self.enterRule(localctx, 26, self.RULE_eval_at_sub)\n1212         try:\n1213             self.enterOuterAlt(localctx, 1)\n1214             self.state = 168\n1215             self.match(LaTeXParser.UNDERSCORE)\n1216             self.state = 169\n1217             self.match(LaTeXParser.L_BRACE)\n1218             self.state = 172\n1219             self._errHandler.sync(self)\n1220             la_ = self._interp.adaptivePredict(self._input,12,self._ctx)\n1221             if la_ == 1:\n1222                 self.state = 170\n1223                 self.expr()\n1224                 pass\n1225 \n1226             elif la_ == 2:\n1227                 self.state = 171\n1228                 self.equality()\n1229                 pass\n1230 \n1231 \n1232             self.state = 174\n1233             self.match(LaTeXParser.R_BRACE)\n1234         except RecognitionException as re:\n1235             localctx.exception = re\n1236             self._errHandler.reportError(self, re)\n1237             self._errHandler.recover(self, re)\n1238         finally:\n1239             self.exitRule()\n1240         return localctx\n1241 \n1242     class Eval_at_supContext(ParserRuleContext):\n1243 \n1244         def __init__(self, parser, parent=None, invokingState=-1):\n1245             super(LaTeXParser.Eval_at_supContext, self).__init__(parent, invokingState)\n1246             self.parser = parser\n1247 \n1248         def CARET(self):\n1249             return self.getToken(LaTeXParser.CARET, 0)\n1250 \n1251         def L_BRACE(self):\n1252             return self.getToken(LaTeXParser.L_BRACE, 0)\n1253 \n1254         def R_BRACE(self):\n1255             return self.getToken(LaTeXParser.R_BRACE, 0)\n1256 \n1257         def expr(self):\n1258             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)\n1259 \n1260 \n1261         def equality(self):\n1262             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)\n1263 \n1264 \n1265         def getRuleIndex(self):\n1266             return LaTeXParser.RULE_eval_at_sup\n1267 \n1268 \n1269 \n1270 \n1271     def eval_at_sup(self):\n1272 \n1273         localctx = LaTeXParser.Eval_at_supContext(self, self._ctx, self.state)\n1274         self.enterRule(localctx, 28, self.RULE_eval_at_sup)\n1275         try:\n1276             self.enterOuterAlt(localctx, 1)\n1277             self.state = 176\n1278             self.match(LaTeXParser.CARET)\n1279             self.state = 177\n1280             self.match(LaTeXParser.L_BRACE)\n1281             self.state = 180\n1282             self._errHandler.sync(self)\n1283             la_ = self._interp.adaptivePredict(self._input,13,self._ctx)\n1284             if la_ == 1:\n1285                 self.state = 178\n1286                 self.expr()\n1287                 pass\n1288 \n1289             elif la_ == 2:\n1290                 self.state = 179\n1291                 self.equality()\n1292                 pass\n1293 \n1294 \n1295             self.state = 182\n1296             self.match(LaTeXParser.R_BRACE)\n1297         except RecognitionException as re:\n1298             localctx.exception = re\n1299             self._errHandler.reportError(self, re)\n1300             self._errHandler.recover(self, re)\n1301         finally:\n1302             self.exitRule()\n1303         return localctx\n1304 \n1305     class ExpContext(ParserRuleContext):\n1306 \n1307         def __init__(self, parser, parent=None, invokingState=-1):\n1308             super(LaTeXParser.ExpContext, self).__init__(parent, invokingState)\n1309             self.parser = parser\n1310 \n1311         def comp(self):\n1312             return self.getTypedRuleContext(LaTeXParser.CompContext,0)\n1313 \n1314 \n1315         def exp(self):\n1316             return self.getTypedRuleContext(LaTeXParser.ExpContext,0)\n1317 \n1318 \n1319         def CARET(self):\n1320             return self.getToken(LaTeXParser.CARET, 0)\n1321 \n1322         def atom(self):\n1323             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)\n1324 \n1325 \n1326         def L_BRACE(self):\n1327             return self.getToken(LaTeXParser.L_BRACE, 0)\n1328 \n1329         def expr(self):\n1330             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)\n1331 \n1332 \n1333         def R_BRACE(self):\n1334             return self.getToken(LaTeXParser.R_BRACE, 0)\n1335 \n1336         def subexpr(self):\n1337             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)\n1338 \n1339 \n1340         def getRuleIndex(self):\n1341             return LaTeXParser.RULE_exp\n1342 \n1343 \n1344 \n1345     def exp(self, _p=0):\n1346         _parentctx = self._ctx\n1347         _parentState = self.state\n1348         localctx = LaTeXParser.ExpContext(self, self._ctx, _parentState)\n1349         _prevctx = localctx\n1350         _startState = 30\n1351         self.enterRecursionRule(localctx, 30, self.RULE_exp, _p)\n1352         try:\n1353             self.enterOuterAlt(localctx, 1)\n1354             self.state = 185\n1355             self.comp()\n1356             self._ctx.stop = self._input.LT(-1)\n1357             self.state = 201\n1358             self._errHandler.sync(self)\n1359             _alt = self._interp.adaptivePredict(self._input,16,self._ctx)\n1360             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:\n1361                 if _alt==1:\n1362                     if self._parseListeners is not None:\n1363                         self.triggerExitRuleEvent()\n1364                     _prevctx = localctx\n1365                     localctx = LaTeXParser.ExpContext(self, _parentctx, _parentState)\n1366                     self.pushNewRecursionContext(localctx, _startState, self.RULE_exp)\n1367                     self.state = 187\n1368                     if not self.precpred(self._ctx, 2):\n1369                         from antlr4.error.Errors import FailedPredicateException\n1370                         raise FailedPredicateException(self, \"self.precpred(self._ctx, 2)\")\n1371                     self.state = 188\n1372                     self.match(LaTeXParser.CARET)\n1373                     self.state = 194\n1374                     self._errHandler.sync(self)\n1375                     token = self._input.LA(1)\n1376                     if token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:\n1377                         self.state = 189\n1378                         self.atom()\n1379                         pass\n1380                     elif token in [LaTeXParser.L_BRACE]:\n1381                         self.state = 190\n1382                         self.match(LaTeXParser.L_BRACE)\n1383                         self.state = 191\n1384                         self.expr()\n1385                         self.state = 192\n1386                         self.match(LaTeXParser.R_BRACE)\n1387                         pass\n1388                     else:\n1389                         raise NoViableAltException(self)\n1390 \n1391                     self.state = 197\n1392                     self._errHandler.sync(self)\n1393                     la_ = self._interp.adaptivePredict(self._input,15,self._ctx)\n1394                     if la_ == 1:\n1395                         self.state = 196\n1396                         self.subexpr()\n1397 \n1398 \n1399                 self.state = 203\n1400                 self._errHandler.sync(self)\n1401                 _alt = self._interp.adaptivePredict(self._input,16,self._ctx)\n1402 \n1403         except RecognitionException as re:\n1404             localctx.exception = re\n1405             self._errHandler.reportError(self, re)\n1406             self._errHandler.recover(self, re)\n1407         finally:\n1408             self.unrollRecursionContexts(_parentctx)\n1409         return localctx\n1410 \n1411     class Exp_nofuncContext(ParserRuleContext):\n1412 \n1413         def __init__(self, parser, parent=None, invokingState=-1):\n1414             super(LaTeXParser.Exp_nofuncContext, self).__init__(parent, invokingState)\n1415             self.parser = parser\n1416 \n1417         def comp_nofunc(self):\n1418             return self.getTypedRuleContext(LaTeXParser.Comp_nofuncContext,0)\n1419 \n1420 \n1421         def exp_nofunc(self):\n1422             return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)\n1423 \n1424 \n1425         def CARET(self):\n1426             return self.getToken(LaTeXParser.CARET, 0)\n1427 \n1428         def atom(self):\n1429             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)\n1430 \n1431 \n1432         def L_BRACE(self):\n1433             return self.getToken(LaTeXParser.L_BRACE, 0)\n1434 \n1435         def expr(self):\n1436             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)\n1437 \n1438 \n1439         def R_BRACE(self):\n1440             return self.getToken(LaTeXParser.R_BRACE, 0)\n1441 \n1442         def subexpr(self):\n1443             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)\n1444 \n1445 \n1446         def getRuleIndex(self):\n1447             return LaTeXParser.RULE_exp_nofunc\n1448 \n1449 \n1450 \n1451     def exp_nofunc(self, _p=0):\n1452         _parentctx = self._ctx\n1453         _parentState = self.state\n1454         localctx = LaTeXParser.Exp_nofuncContext(self, self._ctx, _parentState)\n1455         _prevctx = localctx\n1456         _startState = 32\n1457         self.enterRecursionRule(localctx, 32, self.RULE_exp_nofunc, _p)\n1458         try:\n1459             self.enterOuterAlt(localctx, 1)\n1460             self.state = 205\n1461             self.comp_nofunc()\n1462             self._ctx.stop = self._input.LT(-1)\n1463             self.state = 221\n1464             self._errHandler.sync(self)\n1465             _alt = self._interp.adaptivePredict(self._input,19,self._ctx)\n1466             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:\n1467                 if _alt==1:\n1468                     if self._parseListeners is not None:\n1469                         self.triggerExitRuleEvent()\n1470                     _prevctx = localctx\n1471                     localctx = LaTeXParser.Exp_nofuncContext(self, _parentctx, _parentState)\n1472                     self.pushNewRecursionContext(localctx, _startState, self.RULE_exp_nofunc)\n1473                     self.state = 207\n1474                     if not self.precpred(self._ctx, 2):\n1475                         from antlr4.error.Errors import FailedPredicateException\n1476                         raise FailedPredicateException(self, \"self.precpred(self._ctx, 2)\")\n1477                     self.state = 208\n1478                     self.match(LaTeXParser.CARET)\n1479                     self.state = 214\n1480                     self._errHandler.sync(self)\n1481                     token = self._input.LA(1)\n1482                     if token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:\n1483                         self.state = 209\n1484                         self.atom()\n1485                         pass\n1486                     elif token in [LaTeXParser.L_BRACE]:\n1487                         self.state = 210\n1488                         self.match(LaTeXParser.L_BRACE)\n1489                         self.state = 211\n1490                         self.expr()\n1491                         self.state = 212\n1492                         self.match(LaTeXParser.R_BRACE)\n1493                         pass\n1494                     else:\n1495                         raise NoViableAltException(self)\n1496 \n1497                     self.state = 217\n1498                     self._errHandler.sync(self)\n1499                     la_ = self._interp.adaptivePredict(self._input,18,self._ctx)\n1500                     if la_ == 1:\n1501                         self.state = 216\n1502                         self.subexpr()\n1503 \n1504 \n1505                 self.state = 223\n1506                 self._errHandler.sync(self)\n1507                 _alt = self._interp.adaptivePredict(self._input,19,self._ctx)\n1508 \n1509         except RecognitionException as re:\n1510             localctx.exception = re\n1511             self._errHandler.reportError(self, re)\n1512             self._errHandler.recover(self, re)\n1513         finally:\n1514             self.unrollRecursionContexts(_parentctx)\n1515         return localctx\n1516 \n1517     class CompContext(ParserRuleContext):\n1518 \n1519         def __init__(self, parser, parent=None, invokingState=-1):\n1520             super(LaTeXParser.CompContext, self).__init__(parent, invokingState)\n1521             self.parser = parser\n1522 \n1523         def group(self):\n1524             return self.getTypedRuleContext(LaTeXParser.GroupContext,0)\n1525 \n1526 \n1527         def abs_group(self):\n1528             return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)\n1529 \n1530 \n1531         def func(self):\n1532             return self.getTypedRuleContext(LaTeXParser.FuncContext,0)\n1533 \n1534 \n1535         def atom(self):\n1536             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)\n1537 \n1538 \n1539         def frac(self):\n1540             return self.getTypedRuleContext(LaTeXParser.FracContext,0)\n1541 \n1542 \n1543         def getRuleIndex(self):\n1544             return LaTeXParser.RULE_comp\n1545 \n1546 \n1547 \n1548 \n1549     def comp(self):\n1550 \n1551         localctx = LaTeXParser.CompContext(self, self._ctx, self.state)\n1552         self.enterRule(localctx, 34, self.RULE_comp)\n1553         try:\n1554             self.state = 229\n1555             self._errHandler.sync(self)\n1556             la_ = self._interp.adaptivePredict(self._input,20,self._ctx)\n1557             if la_ == 1:\n1558                 self.enterOuterAlt(localctx, 1)\n1559                 self.state = 224\n1560                 self.group()\n1561                 pass\n1562 \n1563             elif la_ == 2:\n1564                 self.enterOuterAlt(localctx, 2)\n1565                 self.state = 225\n1566                 self.abs_group()\n1567                 pass\n1568 \n1569             elif la_ == 3:\n1570                 self.enterOuterAlt(localctx, 3)\n1571                 self.state = 226\n1572                 self.func()\n1573                 pass\n1574 \n1575             elif la_ == 4:\n1576                 self.enterOuterAlt(localctx, 4)\n1577                 self.state = 227\n1578                 self.atom()\n1579                 pass\n1580 \n1581             elif la_ == 5:\n1582                 self.enterOuterAlt(localctx, 5)\n1583                 self.state = 228\n1584                 self.frac()\n1585                 pass\n1586 \n1587 \n1588         except RecognitionException as re:\n1589             localctx.exception = re\n1590             self._errHandler.reportError(self, re)\n1591             self._errHandler.recover(self, re)\n1592         finally:\n1593             self.exitRule()\n1594         return localctx\n1595 \n1596     class Comp_nofuncContext(ParserRuleContext):\n1597 \n1598         def __init__(self, parser, parent=None, invokingState=-1):\n1599             super(LaTeXParser.Comp_nofuncContext, self).__init__(parent, invokingState)\n1600             self.parser = parser\n1601 \n1602         def group(self):\n1603             return self.getTypedRuleContext(LaTeXParser.GroupContext,0)\n1604 \n1605 \n1606         def abs_group(self):\n1607             return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)\n1608 \n1609 \n1610         def atom(self):\n1611             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)\n1612 \n1613 \n1614         def frac(self):\n1615             return self.getTypedRuleContext(LaTeXParser.FracContext,0)\n1616 \n1617 \n1618         def getRuleIndex(self):\n1619             return LaTeXParser.RULE_comp_nofunc\n1620 \n1621 \n1622 \n1623 \n1624     def comp_nofunc(self):\n1625 \n1626         localctx = LaTeXParser.Comp_nofuncContext(self, self._ctx, self.state)\n1627         self.enterRule(localctx, 36, self.RULE_comp_nofunc)\n1628         try:\n1629             self.state = 235\n1630             self._errHandler.sync(self)\n1631             token = self._input.LA(1)\n1632             if token in [LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACKET]:\n1633                 self.enterOuterAlt(localctx, 1)\n1634                 self.state = 231\n1635                 self.group()\n1636                 pass\n1637             elif token in [LaTeXParser.BAR]:\n1638                 self.enterOuterAlt(localctx, 2)\n1639                 self.state = 232\n1640                 self.abs_group()\n1641                 pass\n1642             elif token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:\n1643                 self.enterOuterAlt(localctx, 3)\n1644                 self.state = 233\n1645                 self.atom()\n1646                 pass\n1647             elif token in [LaTeXParser.CMD_FRAC]:\n1648                 self.enterOuterAlt(localctx, 4)\n1649                 self.state = 234\n1650                 self.frac()\n1651                 pass\n1652             else:\n1653                 raise NoViableAltException(self)\n1654 \n1655         except RecognitionException as re:\n1656             localctx.exception = re\n1657             self._errHandler.reportError(self, re)\n1658             self._errHandler.recover(self, re)\n1659         finally:\n1660             self.exitRule()\n1661         return localctx\n1662 \n1663     class GroupContext(ParserRuleContext):\n1664 \n1665         def __init__(self, parser, parent=None, invokingState=-1):\n1666             super(LaTeXParser.GroupContext, self).__init__(parent, invokingState)\n1667             self.parser = parser\n1668 \n1669         def L_PAREN(self):\n1670             return self.getToken(LaTeXParser.L_PAREN, 0)\n1671 \n1672         def expr(self):\n1673             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)\n1674 \n1675 \n1676         def R_PAREN(self):\n1677             return self.getToken(LaTeXParser.R_PAREN, 0)\n1678 \n1679         def L_BRACKET(self):\n1680             return self.getToken(LaTeXParser.L_BRACKET, 0)\n1681 \n1682         def R_BRACKET(self):\n1683             return self.getToken(LaTeXParser.R_BRACKET, 0)\n1684 \n1685         def L_BRACE(self):\n1686             return self.getToken(LaTeXParser.L_BRACE, 0)\n1687 \n1688         def R_BRACE(self):\n1689             return self.getToken(LaTeXParser.R_BRACE, 0)\n1690 \n1691         def getRuleIndex(self):\n1692             return LaTeXParser.RULE_group\n1693 \n1694 \n1695 \n1696 \n1697     def group(self):\n1698 \n1699         localctx = LaTeXParser.GroupContext(self, self._ctx, self.state)\n1700         self.enterRule(localctx, 38, self.RULE_group)\n1701         try:\n1702             self.state = 249\n1703             self._errHandler.sync(self)\n1704             token = self._input.LA(1)\n1705             if token in [LaTeXParser.L_PAREN]:\n1706                 self.enterOuterAlt(localctx, 1)\n1707                 self.state = 237\n1708                 self.match(LaTeXParser.L_PAREN)\n1709                 self.state = 238\n1710                 self.expr()\n1711                 self.state = 239\n1712                 self.match(LaTeXParser.R_PAREN)\n1713                 pass\n1714             elif token in [LaTeXParser.L_BRACKET]:\n1715                 self.enterOuterAlt(localctx, 2)\n1716                 self.state = 241\n1717                 self.match(LaTeXParser.L_BRACKET)\n1718                 self.state = 242\n1719                 self.expr()\n1720                 self.state = 243\n1721                 self.match(LaTeXParser.R_BRACKET)\n1722                 pass\n1723             elif token in [LaTeXParser.L_BRACE]:\n1724                 self.enterOuterAlt(localctx, 3)\n1725                 self.state = 245\n1726                 self.match(LaTeXParser.L_BRACE)\n1727                 self.state = 246\n1728                 self.expr()\n1729                 self.state = 247\n1730                 self.match(LaTeXParser.R_BRACE)\n1731                 pass\n1732             else:\n1733                 raise NoViableAltException(self)\n1734 \n1735         except RecognitionException as re:\n1736             localctx.exception = re\n1737             self._errHandler.reportError(self, re)\n1738             self._errHandler.recover(self, re)\n1739         finally:\n1740             self.exitRule()\n1741         return localctx\n1742 \n1743     class Abs_groupContext(ParserRuleContext):\n1744 \n1745         def __init__(self, parser, parent=None, invokingState=-1):\n1746             super(LaTeXParser.Abs_groupContext, self).__init__(parent, invokingState)\n1747             self.parser = parser\n1748 \n1749         def BAR(self, i=None):\n1750             if i is None:\n1751                 return self.getTokens(LaTeXParser.BAR)\n1752             else:\n1753                 return self.getToken(LaTeXParser.BAR, i)\n1754 \n1755         def expr(self):\n1756             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)\n1757 \n1758 \n1759         def getRuleIndex(self):\n1760             return LaTeXParser.RULE_abs_group\n1761 \n1762 \n1763 \n1764 \n1765     def abs_group(self):\n1766 \n1767         localctx = LaTeXParser.Abs_groupContext(self, self._ctx, self.state)\n1768         self.enterRule(localctx, 40, self.RULE_abs_group)\n1769         try:\n1770             self.enterOuterAlt(localctx, 1)\n1771             self.state = 251\n1772             self.match(LaTeXParser.BAR)\n1773             self.state = 252\n1774             self.expr()\n1775             self.state = 253\n1776             self.match(LaTeXParser.BAR)\n1777         except RecognitionException as re:\n1778             localctx.exception = re\n1779             self._errHandler.reportError(self, re)\n1780             self._errHandler.recover(self, re)\n1781         finally:\n1782             self.exitRule()\n1783         return localctx\n1784 \n1785     class AtomContext(ParserRuleContext):\n1786 \n1787         def __init__(self, parser, parent=None, invokingState=-1):\n1788             super(LaTeXParser.AtomContext, self).__init__(parent, invokingState)\n1789             self.parser = parser\n1790 \n1791         def LETTER(self):\n1792             return self.getToken(LaTeXParser.LETTER, 0)\n1793 \n1794         def SYMBOL(self):\n1795             return self.getToken(LaTeXParser.SYMBOL, 0)\n1796 \n1797         def subexpr(self):\n1798             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)\n1799 \n1800 \n1801         def NUMBER(self):\n1802             return self.getToken(LaTeXParser.NUMBER, 0)\n1803 \n1804         def DIFFERENTIAL(self):\n1805             return self.getToken(LaTeXParser.DIFFERENTIAL, 0)\n1806 \n1807         def mathit(self):\n1808             return self.getTypedRuleContext(LaTeXParser.MathitContext,0)\n1809 \n1810 \n1811         def getRuleIndex(self):\n1812             return LaTeXParser.RULE_atom\n1813 \n1814 \n1815 \n1816 \n1817     def atom(self):\n1818 \n1819         localctx = LaTeXParser.AtomContext(self, self._ctx, self.state)\n1820         self.enterRule(localctx, 42, self.RULE_atom)\n1821         self._la = 0 # Token type\n1822         try:\n1823             self.state = 262\n1824             self._errHandler.sync(self)\n1825             token = self._input.LA(1)\n1826             if token in [LaTeXParser.LETTER, LaTeXParser.SYMBOL]:\n1827                 self.enterOuterAlt(localctx, 1)\n1828                 self.state = 255\n1829                 _la = self._input.LA(1)\n1830                 if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):\n1831                     self._errHandler.recoverInline(self)\n1832                 else:\n1833                     self._errHandler.reportMatch(self)\n1834                     self.consume()\n1835                 self.state = 257\n1836                 self._errHandler.sync(self)\n1837                 la_ = self._interp.adaptivePredict(self._input,23,self._ctx)\n1838                 if la_ == 1:\n1839                     self.state = 256\n1840                     self.subexpr()\n1841 \n1842 \n1843                 pass\n1844             elif token in [LaTeXParser.NUMBER]:\n1845                 self.enterOuterAlt(localctx, 2)\n1846                 self.state = 259\n1847                 self.match(LaTeXParser.NUMBER)\n1848                 pass\n1849             elif token in [LaTeXParser.DIFFERENTIAL]:\n1850                 self.enterOuterAlt(localctx, 3)\n1851                 self.state = 260\n1852                 self.match(LaTeXParser.DIFFERENTIAL)\n1853                 pass\n1854             elif token in [LaTeXParser.CMD_MATHIT]:\n1855                 self.enterOuterAlt(localctx, 4)\n1856                 self.state = 261\n1857                 self.mathit()\n1858                 pass\n1859             else:\n1860                 raise NoViableAltException(self)\n1861 \n1862         except RecognitionException as re:\n1863             localctx.exception = re\n1864             self._errHandler.reportError(self, re)\n1865             self._errHandler.recover(self, re)\n1866         finally:\n1867             self.exitRule()\n1868         return localctx\n1869 \n1870     class MathitContext(ParserRuleContext):\n1871 \n1872         def __init__(self, parser, parent=None, invokingState=-1):\n1873             super(LaTeXParser.MathitContext, self).__init__(parent, invokingState)\n1874             self.parser = parser\n1875 \n1876         def CMD_MATHIT(self):\n1877             return self.getToken(LaTeXParser.CMD_MATHIT, 0)\n1878 \n1879         def L_BRACE(self):\n1880             return self.getToken(LaTeXParser.L_BRACE, 0)\n1881 \n1882         def mathit_text(self):\n1883             return self.getTypedRuleContext(LaTeXParser.Mathit_textContext,0)\n1884 \n1885 \n1886         def R_BRACE(self):\n1887             return self.getToken(LaTeXParser.R_BRACE, 0)\n1888 \n1889         def getRuleIndex(self):\n1890             return LaTeXParser.RULE_mathit\n1891 \n1892 \n1893 \n1894 \n1895     def mathit(self):\n1896 \n1897         localctx = LaTeXParser.MathitContext(self, self._ctx, self.state)\n1898         self.enterRule(localctx, 44, self.RULE_mathit)\n1899         try:\n1900             self.enterOuterAlt(localctx, 1)\n1901             self.state = 264\n1902             self.match(LaTeXParser.CMD_MATHIT)\n1903             self.state = 265\n1904             self.match(LaTeXParser.L_BRACE)\n1905             self.state = 266\n1906             self.mathit_text()\n1907             self.state = 267\n1908             self.match(LaTeXParser.R_BRACE)\n1909         except RecognitionException as re:\n1910             localctx.exception = re\n1911             self._errHandler.reportError(self, re)\n1912             self._errHandler.recover(self, re)\n1913         finally:\n1914             self.exitRule()\n1915         return localctx\n1916 \n1917     class Mathit_textContext(ParserRuleContext):\n1918 \n1919         def __init__(self, parser, parent=None, invokingState=-1):\n1920             super(LaTeXParser.Mathit_textContext, self).__init__(parent, invokingState)\n1921             self.parser = parser\n1922 \n1923         def LETTER(self, i=None):\n1924             if i is None:\n1925                 return self.getTokens(LaTeXParser.LETTER)\n1926             else:\n1927                 return self.getToken(LaTeXParser.LETTER, i)\n1928 \n1929         def getRuleIndex(self):\n1930             return LaTeXParser.RULE_mathit_text\n1931 \n1932 \n1933 \n1934 \n1935     def mathit_text(self):\n1936 \n1937         localctx = LaTeXParser.Mathit_textContext(self, self._ctx, self.state)\n1938         self.enterRule(localctx, 46, self.RULE_mathit_text)\n1939         self._la = 0 # Token type\n1940         try:\n1941             self.enterOuterAlt(localctx, 1)\n1942             self.state = 272\n1943             self._errHandler.sync(self)\n1944             _la = self._input.LA(1)\n1945             while _la==LaTeXParser.LETTER:\n1946                 self.state = 269\n1947                 self.match(LaTeXParser.LETTER)\n1948                 self.state = 274\n1949                 self._errHandler.sync(self)\n1950                 _la = self._input.LA(1)\n1951 \n1952         except RecognitionException as re:\n1953             localctx.exception = re\n1954             self._errHandler.reportError(self, re)\n1955             self._errHandler.recover(self, re)\n1956         finally:\n1957             self.exitRule()\n1958         return localctx\n1959 \n1960     class FracContext(ParserRuleContext):\n1961 \n1962         def __init__(self, parser, parent=None, invokingState=-1):\n1963             super(LaTeXParser.FracContext, self).__init__(parent, invokingState)\n1964             self.parser = parser\n1965             self.upper = None # ExprContext\n1966             self.lower = None # ExprContext\n1967 \n1968         def CMD_FRAC(self):\n1969             return self.getToken(LaTeXParser.CMD_FRAC, 0)\n1970 \n1971         def L_BRACE(self, i=None):\n1972             if i is None:\n1973                 return self.getTokens(LaTeXParser.L_BRACE)\n1974             else:\n1975                 return self.getToken(LaTeXParser.L_BRACE, i)\n1976 \n1977         def R_BRACE(self, i=None):\n1978             if i is None:\n1979                 return self.getTokens(LaTeXParser.R_BRACE)\n1980             else:\n1981                 return self.getToken(LaTeXParser.R_BRACE, i)\n1982 \n1983         def expr(self, i=None):\n1984             if i is None:\n1985                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)\n1986             else:\n1987                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)\n1988 \n1989 \n1990         def getRuleIndex(self):\n1991             return LaTeXParser.RULE_frac\n1992 \n1993 \n1994 \n1995 \n1996     def frac(self):\n1997 \n1998         localctx = LaTeXParser.FracContext(self, self._ctx, self.state)\n1999         self.enterRule(localctx, 48, self.RULE_frac)\n2000         try:\n2001             self.enterOuterAlt(localctx, 1)\n2002             self.state = 275\n2003             self.match(LaTeXParser.CMD_FRAC)\n2004             self.state = 276\n2005             self.match(LaTeXParser.L_BRACE)\n2006             self.state = 277\n2007             localctx.upper = self.expr()\n2008             self.state = 278\n2009             self.match(LaTeXParser.R_BRACE)\n2010             self.state = 279\n2011             self.match(LaTeXParser.L_BRACE)\n2012             self.state = 280\n2013             localctx.lower = self.expr()\n2014             self.state = 281\n2015             self.match(LaTeXParser.R_BRACE)\n2016         except RecognitionException as re:\n2017             localctx.exception = re\n2018             self._errHandler.reportError(self, re)\n2019             self._errHandler.recover(self, re)\n2020         finally:\n2021             self.exitRule()\n2022         return localctx\n2023 \n2024     class Func_normalContext(ParserRuleContext):\n2025 \n2026         def __init__(self, parser, parent=None, invokingState=-1):\n2027             super(LaTeXParser.Func_normalContext, self).__init__(parent, invokingState)\n2028             self.parser = parser\n2029 \n2030         def FUNC_LOG(self):\n2031             return self.getToken(LaTeXParser.FUNC_LOG, 0)\n2032 \n2033         def FUNC_LN(self):\n2034             return self.getToken(LaTeXParser.FUNC_LN, 0)\n2035 \n2036         def FUNC_SIN(self):\n2037             return self.getToken(LaTeXParser.FUNC_SIN, 0)\n2038 \n2039         def FUNC_COS(self):\n2040             return self.getToken(LaTeXParser.FUNC_COS, 0)\n2041 \n2042         def FUNC_TAN(self):\n2043             return self.getToken(LaTeXParser.FUNC_TAN, 0)\n2044 \n2045         def FUNC_CSC(self):\n2046             return self.getToken(LaTeXParser.FUNC_CSC, 0)\n2047 \n2048         def FUNC_SEC(self):\n2049             return self.getToken(LaTeXParser.FUNC_SEC, 0)\n2050 \n2051         def FUNC_COT(self):\n2052             return self.getToken(LaTeXParser.FUNC_COT, 0)\n2053 \n2054         def FUNC_ARCSIN(self):\n2055             return self.getToken(LaTeXParser.FUNC_ARCSIN, 0)\n2056 \n2057         def FUNC_ARCCOS(self):\n2058             return self.getToken(LaTeXParser.FUNC_ARCCOS, 0)\n2059 \n2060         def FUNC_ARCTAN(self):\n2061             return self.getToken(LaTeXParser.FUNC_ARCTAN, 0)\n2062 \n2063         def FUNC_ARCCSC(self):\n2064             return self.getToken(LaTeXParser.FUNC_ARCCSC, 0)\n2065 \n2066         def FUNC_ARCSEC(self):\n2067             return self.getToken(LaTeXParser.FUNC_ARCSEC, 0)\n2068 \n2069         def FUNC_ARCCOT(self):\n2070             return self.getToken(LaTeXParser.FUNC_ARCCOT, 0)\n2071 \n2072         def FUNC_SINH(self):\n2073             return self.getToken(LaTeXParser.FUNC_SINH, 0)\n2074 \n2075         def FUNC_COSH(self):\n2076             return self.getToken(LaTeXParser.FUNC_COSH, 0)\n2077 \n2078         def FUNC_TANH(self):\n2079             return self.getToken(LaTeXParser.FUNC_TANH, 0)\n2080 \n2081         def FUNC_ARSINH(self):\n2082             return self.getToken(LaTeXParser.FUNC_ARSINH, 0)\n2083 \n2084         def FUNC_ARCOSH(self):\n2085             return self.getToken(LaTeXParser.FUNC_ARCOSH, 0)\n2086 \n2087         def FUNC_ARTANH(self):\n2088             return self.getToken(LaTeXParser.FUNC_ARTANH, 0)\n2089 \n2090         def getRuleIndex(self):\n2091             return LaTeXParser.RULE_func_normal\n2092 \n2093 \n2094 \n2095 \n2096     def func_normal(self):\n2097 \n2098         localctx = LaTeXParser.Func_normalContext(self, self._ctx, self.state)\n2099         self.enterRule(localctx, 50, self.RULE_func_normal)\n2100         self._la = 0 # Token type\n2101         try:\n2102             self.enterOuterAlt(localctx, 1)\n2103             self.state = 283\n2104             _la = self._input.LA(1)\n2105             if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.FUNC_LOG) | (1 << LaTeXParser.FUNC_LN) | (1 << LaTeXParser.FUNC_SIN) | (1 << LaTeXParser.FUNC_COS) | (1 << LaTeXParser.FUNC_TAN) | (1 << LaTeXParser.FUNC_CSC) | (1 << LaTeXParser.FUNC_SEC) | (1 << LaTeXParser.FUNC_COT) | (1 << LaTeXParser.FUNC_ARCSIN) | (1 << LaTeXParser.FUNC_ARCCOS) | (1 << LaTeXParser.FUNC_ARCTAN) | (1 << LaTeXParser.FUNC_ARCCSC) | (1 << LaTeXParser.FUNC_ARCSEC) | (1 << LaTeXParser.FUNC_ARCCOT) | (1 << LaTeXParser.FUNC_SINH) | (1 << LaTeXParser.FUNC_COSH) | (1 << LaTeXParser.FUNC_TANH) | (1 << LaTeXParser.FUNC_ARSINH) | (1 << LaTeXParser.FUNC_ARCOSH) | (1 << LaTeXParser.FUNC_ARTANH))) != 0)):\n2106                 self._errHandler.recoverInline(self)\n2107             else:\n2108                 self._errHandler.reportMatch(self)\n2109                 self.consume()\n2110         except RecognitionException as re:\n2111             localctx.exception = re\n2112             self._errHandler.reportError(self, re)\n2113             self._errHandler.recover(self, re)\n2114         finally:\n2115             self.exitRule()\n2116         return localctx\n2117 \n2118     class FuncContext(ParserRuleContext):\n2119 \n2120         def __init__(self, parser, parent=None, invokingState=-1):\n2121             super(LaTeXParser.FuncContext, self).__init__(parent, invokingState)\n2122             self.parser = parser\n2123             self.root = None # ExprContext\n2124             self.base = None # ExprContext\n2125 \n2126         def func_normal(self):\n2127             return self.getTypedRuleContext(LaTeXParser.Func_normalContext,0)\n2128 \n2129 \n2130         def L_PAREN(self):\n2131             return self.getToken(LaTeXParser.L_PAREN, 0)\n2132 \n2133         def func_arg(self):\n2134             return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)\n2135 \n2136 \n2137         def R_PAREN(self):\n2138             return self.getToken(LaTeXParser.R_PAREN, 0)\n2139 \n2140         def func_arg_noparens(self):\n2141             return self.getTypedRuleContext(LaTeXParser.Func_arg_noparensContext,0)\n2142 \n2143 \n2144         def subexpr(self):\n2145             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)\n2146 \n2147 \n2148         def supexpr(self):\n2149             return self.getTypedRuleContext(LaTeXParser.SupexprContext,0)\n2150 \n2151 \n2152         def args(self):\n2153             return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)\n2154 \n2155 \n2156         def LETTER(self):\n2157             return self.getToken(LaTeXParser.LETTER, 0)\n2158 \n2159         def SYMBOL(self):\n2160             return self.getToken(LaTeXParser.SYMBOL, 0)\n2161 \n2162         def FUNC_INT(self):\n2163             return self.getToken(LaTeXParser.FUNC_INT, 0)\n2164 \n2165         def DIFFERENTIAL(self):\n2166             return self.getToken(LaTeXParser.DIFFERENTIAL, 0)\n2167 \n2168         def frac(self):\n2169             return self.getTypedRuleContext(LaTeXParser.FracContext,0)\n2170 \n2171 \n2172         def additive(self):\n2173             return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)\n2174 \n2175 \n2176         def FUNC_SQRT(self):\n2177             return self.getToken(LaTeXParser.FUNC_SQRT, 0)\n2178 \n2179         def L_BRACE(self):\n2180             return self.getToken(LaTeXParser.L_BRACE, 0)\n2181 \n2182         def R_BRACE(self):\n2183             return self.getToken(LaTeXParser.R_BRACE, 0)\n2184 \n2185         def expr(self, i=None):\n2186             if i is None:\n2187                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)\n2188             else:\n2189                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)\n2190 \n2191 \n2192         def L_BRACKET(self):\n2193             return self.getToken(LaTeXParser.L_BRACKET, 0)\n2194 \n2195         def R_BRACKET(self):\n2196             return self.getToken(LaTeXParser.R_BRACKET, 0)\n2197 \n2198         def mp(self):\n2199             return self.getTypedRuleContext(LaTeXParser.MpContext,0)\n2200 \n2201 \n2202         def FUNC_SUM(self):\n2203             return self.getToken(LaTeXParser.FUNC_SUM, 0)\n2204 \n2205         def FUNC_PROD(self):\n2206             return self.getToken(LaTeXParser.FUNC_PROD, 0)\n2207 \n2208         def subeq(self):\n2209             return self.getTypedRuleContext(LaTeXParser.SubeqContext,0)\n2210 \n2211 \n2212         def FUNC_LIM(self):\n2213             return self.getToken(LaTeXParser.FUNC_LIM, 0)\n2214 \n2215         def limit_sub(self):\n2216             return self.getTypedRuleContext(LaTeXParser.Limit_subContext,0)\n2217 \n2218 \n2219         def getRuleIndex(self):\n2220             return LaTeXParser.RULE_func\n2221 \n2222 \n2223 \n2224 \n2225     def func(self):\n2226 \n2227         localctx = LaTeXParser.FuncContext(self, self._ctx, self.state)\n2228         self.enterRule(localctx, 52, self.RULE_func)\n2229         self._la = 0 # Token type\n2230         try:\n2231             self.state = 358\n2232             self._errHandler.sync(self)\n2233             token = self._input.LA(1)\n2234             if token in [LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH]:\n2235                 self.enterOuterAlt(localctx, 1)\n2236                 self.state = 285\n2237                 self.func_normal()\n2238                 self.state = 298\n2239                 self._errHandler.sync(self)\n2240                 la_ = self._interp.adaptivePredict(self._input,30,self._ctx)\n2241                 if la_ == 1:\n2242                     self.state = 287\n2243                     self._errHandler.sync(self)\n2244                     _la = self._input.LA(1)\n2245                     if _la==LaTeXParser.UNDERSCORE:\n2246                         self.state = 286\n2247                         self.subexpr()\n2248 \n2249 \n2250                     self.state = 290\n2251                     self._errHandler.sync(self)\n2252                     _la = self._input.LA(1)\n2253                     if _la==LaTeXParser.CARET:\n2254                         self.state = 289\n2255                         self.supexpr()\n2256 \n2257 \n2258                     pass\n2259 \n2260                 elif la_ == 2:\n2261                     self.state = 293\n2262                     self._errHandler.sync(self)\n2263                     _la = self._input.LA(1)\n2264                     if _la==LaTeXParser.CARET:\n2265                         self.state = 292\n2266                         self.supexpr()\n2267 \n2268 \n2269                     self.state = 296\n2270                     self._errHandler.sync(self)\n2271                     _la = self._input.LA(1)\n2272                     if _la==LaTeXParser.UNDERSCORE:\n2273                         self.state = 295\n2274                         self.subexpr()\n2275 \n2276 \n2277                     pass\n2278 \n2279 \n2280                 self.state = 305\n2281                 self._errHandler.sync(self)\n2282                 la_ = self._interp.adaptivePredict(self._input,31,self._ctx)\n2283                 if la_ == 1:\n2284                     self.state = 300\n2285                     self.match(LaTeXParser.L_PAREN)\n2286                     self.state = 301\n2287                     self.func_arg()\n2288                     self.state = 302\n2289                     self.match(LaTeXParser.R_PAREN)\n2290                     pass\n2291 \n2292                 elif la_ == 2:\n2293                     self.state = 304\n2294                     self.func_arg_noparens()\n2295                     pass\n2296 \n2297 \n2298                 pass\n2299             elif token in [LaTeXParser.LETTER, LaTeXParser.SYMBOL]:\n2300                 self.enterOuterAlt(localctx, 2)\n2301                 self.state = 307\n2302                 _la = self._input.LA(1)\n2303                 if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):\n2304                     self._errHandler.recoverInline(self)\n2305                 else:\n2306                     self._errHandler.reportMatch(self)\n2307                     self.consume()\n2308                 self.state = 309\n2309                 self._errHandler.sync(self)\n2310                 _la = self._input.LA(1)\n2311                 if _la==LaTeXParser.UNDERSCORE:\n2312                     self.state = 308\n2313                     self.subexpr()\n2314 \n2315 \n2316                 self.state = 311\n2317                 self.match(LaTeXParser.L_PAREN)\n2318                 self.state = 312\n2319                 self.args()\n2320                 self.state = 313\n2321                 self.match(LaTeXParser.R_PAREN)\n2322                 pass\n2323             elif token in [LaTeXParser.FUNC_INT]:\n2324                 self.enterOuterAlt(localctx, 3)\n2325                 self.state = 315\n2326                 self.match(LaTeXParser.FUNC_INT)\n2327                 self.state = 322\n2328                 self._errHandler.sync(self)\n2329                 token = self._input.LA(1)\n2330                 if token in [LaTeXParser.UNDERSCORE]:\n2331                     self.state = 316\n2332                     self.subexpr()\n2333                     self.state = 317\n2334                     self.supexpr()\n2335                     pass\n2336                 elif token in [LaTeXParser.CARET]:\n2337                     self.state = 319\n2338                     self.supexpr()\n2339                     self.state = 320\n2340                     self.subexpr()\n2341                     pass\n2342                 elif token in [LaTeXParser.ADD, LaTeXParser.SUB, LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.FUNC_SQRT, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:\n2343                     pass\n2344                 else:\n2345                     pass\n2346                 self.state = 330\n2347                 self._errHandler.sync(self)\n2348                 la_ = self._interp.adaptivePredict(self._input,35,self._ctx)\n2349                 if la_ == 1:\n2350                     self.state = 325\n2351                     self._errHandler.sync(self)\n2352                     la_ = self._interp.adaptivePredict(self._input,34,self._ctx)\n2353                     if la_ == 1:\n2354                         self.state = 324\n2355                         self.additive(0)\n2356 \n2357 \n2358                     self.state = 327\n2359                     self.match(LaTeXParser.DIFFERENTIAL)\n2360                     pass\n2361 \n2362                 elif la_ == 2:\n2363                     self.state = 328\n2364                     self.frac()\n2365                     pass\n2366 \n2367                 elif la_ == 3:\n2368                     self.state = 329\n2369                     self.additive(0)\n2370                     pass\n2371 \n2372 \n2373                 pass\n2374             elif token in [LaTeXParser.FUNC_SQRT]:\n2375                 self.enterOuterAlt(localctx, 4)\n2376                 self.state = 332\n2377                 self.match(LaTeXParser.FUNC_SQRT)\n2378                 self.state = 337\n2379                 self._errHandler.sync(self)\n2380                 _la = self._input.LA(1)\n2381                 if _la==LaTeXParser.L_BRACKET:\n2382                     self.state = 333\n2383                     self.match(LaTeXParser.L_BRACKET)\n2384                     self.state = 334\n2385                     localctx.root = self.expr()\n2386                     self.state = 335\n2387                     self.match(LaTeXParser.R_BRACKET)\n2388 \n2389 \n2390                 self.state = 339\n2391                 self.match(LaTeXParser.L_BRACE)\n2392                 self.state = 340\n2393                 localctx.base = self.expr()\n2394                 self.state = 341\n2395                 self.match(LaTeXParser.R_BRACE)\n2396                 pass\n2397             elif token in [LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD]:\n2398                 self.enterOuterAlt(localctx, 5)\n2399                 self.state = 343\n2400                 _la = self._input.LA(1)\n2401                 if not(_la==LaTeXParser.FUNC_SUM or _la==LaTeXParser.FUNC_PROD):\n2402                     self._errHandler.recoverInline(self)\n2403                 else:\n2404                     self._errHandler.reportMatch(self)\n2405                     self.consume()\n2406                 self.state = 350\n2407                 self._errHandler.sync(self)\n2408                 token = self._input.LA(1)\n2409                 if token in [LaTeXParser.UNDERSCORE]:\n2410                     self.state = 344\n2411                     self.subeq()\n2412                     self.state = 345\n2413                     self.supexpr()\n2414                     pass\n2415                 elif token in [LaTeXParser.CARET]:\n2416                     self.state = 347\n2417                     self.supexpr()\n2418                     self.state = 348\n2419                     self.subeq()\n2420                     pass\n2421                 else:\n2422                     raise NoViableAltException(self)\n2423 \n2424                 self.state = 352\n2425                 self.mp(0)\n2426                 pass\n2427             elif token in [LaTeXParser.FUNC_LIM]:\n2428                 self.enterOuterAlt(localctx, 6)\n2429                 self.state = 354\n2430                 self.match(LaTeXParser.FUNC_LIM)\n2431                 self.state = 355\n2432                 self.limit_sub()\n2433                 self.state = 356\n2434                 self.mp(0)\n2435                 pass\n2436             else:\n2437                 raise NoViableAltException(self)\n2438 \n2439         except RecognitionException as re:\n2440             localctx.exception = re\n2441             self._errHandler.reportError(self, re)\n2442             self._errHandler.recover(self, re)\n2443         finally:\n2444             self.exitRule()\n2445         return localctx\n2446 \n2447     class ArgsContext(ParserRuleContext):\n2448 \n2449         def __init__(self, parser, parent=None, invokingState=-1):\n2450             super(LaTeXParser.ArgsContext, self).__init__(parent, invokingState)\n2451             self.parser = parser\n2452 \n2453         def expr(self):\n2454             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)\n2455 \n2456 \n2457         def args(self):\n2458             return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)\n2459 \n2460 \n2461         def getRuleIndex(self):\n2462             return LaTeXParser.RULE_args\n2463 \n2464 \n2465 \n2466 \n2467     def args(self):\n2468 \n2469         localctx = LaTeXParser.ArgsContext(self, self._ctx, self.state)\n2470         self.enterRule(localctx, 54, self.RULE_args)\n2471         try:\n2472             self.state = 365\n2473             self._errHandler.sync(self)\n2474             la_ = self._interp.adaptivePredict(self._input,39,self._ctx)\n2475             if la_ == 1:\n2476                 self.enterOuterAlt(localctx, 1)\n2477                 self.state = 360\n2478                 self.expr()\n2479                 self.state = 361\n2480                 self.match(LaTeXParser.T__0)\n2481                 self.state = 362\n2482                 self.args()\n2483                 pass\n2484 \n2485             elif la_ == 2:\n2486                 self.enterOuterAlt(localctx, 2)\n2487                 self.state = 364\n2488                 self.expr()\n2489                 pass\n2490 \n2491 \n2492         except RecognitionException as re:\n2493             localctx.exception = re\n2494             self._errHandler.reportError(self, re)\n2495             self._errHandler.recover(self, re)\n2496         finally:\n2497             self.exitRule()\n2498         return localctx\n2499 \n2500     class Limit_subContext(ParserRuleContext):\n2501 \n2502         def __init__(self, parser, parent=None, invokingState=-1):\n2503             super(LaTeXParser.Limit_subContext, self).__init__(parent, invokingState)\n2504             self.parser = parser\n2505 \n2506         def UNDERSCORE(self):\n2507             return self.getToken(LaTeXParser.UNDERSCORE, 0)\n2508 \n2509         def L_BRACE(self, i=None):\n2510             if i is None:\n2511                 return self.getTokens(LaTeXParser.L_BRACE)\n2512             else:\n2513                 return self.getToken(LaTeXParser.L_BRACE, i)\n2514 \n2515         def LIM_APPROACH_SYM(self):\n2516             return self.getToken(LaTeXParser.LIM_APPROACH_SYM, 0)\n2517 \n2518         def expr(self):\n2519             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)\n2520 \n2521 \n2522         def R_BRACE(self, i=None):\n2523             if i is None:\n2524                 return self.getTokens(LaTeXParser.R_BRACE)\n2525             else:\n2526                 return self.getToken(LaTeXParser.R_BRACE, i)\n2527 \n2528         def LETTER(self):\n2529             return self.getToken(LaTeXParser.LETTER, 0)\n2530 \n2531         def SYMBOL(self):\n2532             return self.getToken(LaTeXParser.SYMBOL, 0)\n2533 \n2534         def CARET(self):\n2535             return self.getToken(LaTeXParser.CARET, 0)\n2536 \n2537         def ADD(self):\n2538             return self.getToken(LaTeXParser.ADD, 0)\n2539 \n2540         def SUB(self):\n2541             return self.getToken(LaTeXParser.SUB, 0)\n2542 \n2543         def getRuleIndex(self):\n2544             return LaTeXParser.RULE_limit_sub\n2545 \n2546 \n2547 \n2548 \n2549     def limit_sub(self):\n2550 \n2551         localctx = LaTeXParser.Limit_subContext(self, self._ctx, self.state)\n2552         self.enterRule(localctx, 56, self.RULE_limit_sub)\n2553         self._la = 0 # Token type\n2554         try:\n2555             self.enterOuterAlt(localctx, 1)\n2556             self.state = 367\n2557             self.match(LaTeXParser.UNDERSCORE)\n2558             self.state = 368\n2559             self.match(LaTeXParser.L_BRACE)\n2560             self.state = 369\n2561             _la = self._input.LA(1)\n2562             if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):\n2563                 self._errHandler.recoverInline(self)\n2564             else:\n2565                 self._errHandler.reportMatch(self)\n2566                 self.consume()\n2567             self.state = 370\n2568             self.match(LaTeXParser.LIM_APPROACH_SYM)\n2569             self.state = 371\n2570             self.expr()\n2571             self.state = 376\n2572             self._errHandler.sync(self)\n2573             _la = self._input.LA(1)\n2574             if _la==LaTeXParser.CARET:\n2575                 self.state = 372\n2576                 self.match(LaTeXParser.CARET)\n2577                 self.state = 373\n2578                 self.match(LaTeXParser.L_BRACE)\n2579                 self.state = 374\n2580                 _la = self._input.LA(1)\n2581                 if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):\n2582                     self._errHandler.recoverInline(self)\n2583                 else:\n2584                     self._errHandler.reportMatch(self)\n2585                     self.consume()\n2586                 self.state = 375\n2587                 self.match(LaTeXParser.R_BRACE)\n2588 \n2589 \n2590             self.state = 378\n2591             self.match(LaTeXParser.R_BRACE)\n2592         except RecognitionException as re:\n2593             localctx.exception = re\n2594             self._errHandler.reportError(self, re)\n2595             self._errHandler.recover(self, re)\n2596         finally:\n2597             self.exitRule()\n2598         return localctx\n2599 \n2600     class Func_argContext(ParserRuleContext):\n2601 \n2602         def __init__(self, parser, parent=None, invokingState=-1):\n2603             super(LaTeXParser.Func_argContext, self).__init__(parent, invokingState)\n2604             self.parser = parser\n2605 \n2606         def expr(self):\n2607             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)\n2608 \n2609 \n2610         def func_arg(self):\n2611             return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)\n2612 \n2613 \n2614         def getRuleIndex(self):\n2615             return LaTeXParser.RULE_func_arg\n2616 \n2617 \n2618 \n2619 \n2620     def func_arg(self):\n2621 \n2622         localctx = LaTeXParser.Func_argContext(self, self._ctx, self.state)\n2623         self.enterRule(localctx, 58, self.RULE_func_arg)\n2624         try:\n2625             self.state = 385\n2626             self._errHandler.sync(self)\n2627             la_ = self._interp.adaptivePredict(self._input,41,self._ctx)\n2628             if la_ == 1:\n2629                 self.enterOuterAlt(localctx, 1)\n2630                 self.state = 380\n2631                 self.expr()\n2632                 pass\n2633 \n2634             elif la_ == 2:\n2635                 self.enterOuterAlt(localctx, 2)\n2636                 self.state = 381\n2637                 self.expr()\n2638                 self.state = 382\n2639                 self.match(LaTeXParser.T__0)\n2640                 self.state = 383\n2641                 self.func_arg()\n2642                 pass\n2643 \n2644 \n2645         except RecognitionException as re:\n2646             localctx.exception = re\n2647             self._errHandler.reportError(self, re)\n2648             self._errHandler.recover(self, re)\n2649         finally:\n2650             self.exitRule()\n2651         return localctx\n2652 \n2653     class Func_arg_noparensContext(ParserRuleContext):\n2654 \n2655         def __init__(self, parser, parent=None, invokingState=-1):\n2656             super(LaTeXParser.Func_arg_noparensContext, self).__init__(parent, invokingState)\n2657             self.parser = parser\n2658 \n2659         def mp_nofunc(self):\n2660             return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,0)\n2661 \n2662 \n2663         def getRuleIndex(self):\n2664             return LaTeXParser.RULE_func_arg_noparens\n2665 \n2666 \n2667 \n2668 \n2669     def func_arg_noparens(self):\n2670 \n2671         localctx = LaTeXParser.Func_arg_noparensContext(self, self._ctx, self.state)\n2672         self.enterRule(localctx, 60, self.RULE_func_arg_noparens)\n2673         try:\n2674             self.enterOuterAlt(localctx, 1)\n2675             self.state = 387\n2676             self.mp_nofunc(0)\n2677         except RecognitionException as re:\n2678             localctx.exception = re\n2679             self._errHandler.reportError(self, re)\n2680             self._errHandler.recover(self, re)\n2681         finally:\n2682             self.exitRule()\n2683         return localctx\n2684 \n2685     class SubexprContext(ParserRuleContext):\n2686 \n2687         def __init__(self, parser, parent=None, invokingState=-1):\n2688             super(LaTeXParser.SubexprContext, self).__init__(parent, invokingState)\n2689             self.parser = parser\n2690 \n2691         def UNDERSCORE(self):\n2692             return self.getToken(LaTeXParser.UNDERSCORE, 0)\n2693 \n2694         def atom(self):\n2695             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)\n2696 \n2697 \n2698         def L_BRACE(self):\n2699             return self.getToken(LaTeXParser.L_BRACE, 0)\n2700 \n2701         def expr(self):\n2702             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)\n2703 \n2704 \n2705         def R_BRACE(self):\n2706             return self.getToken(LaTeXParser.R_BRACE, 0)\n2707 \n2708         def getRuleIndex(self):\n2709             return LaTeXParser.RULE_subexpr\n2710 \n2711 \n2712 \n2713 \n2714     def subexpr(self):\n2715 \n2716         localctx = LaTeXParser.SubexprContext(self, self._ctx, self.state)\n2717         self.enterRule(localctx, 62, self.RULE_subexpr)\n2718         try:\n2719             self.enterOuterAlt(localctx, 1)\n2720             self.state = 389\n2721             self.match(LaTeXParser.UNDERSCORE)\n2722             self.state = 395\n2723             self._errHandler.sync(self)\n2724             token = self._input.LA(1)\n2725             if token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:\n2726                 self.state = 390\n2727                 self.atom()\n2728                 pass\n2729             elif token in [LaTeXParser.L_BRACE]:\n2730                 self.state = 391\n2731                 self.match(LaTeXParser.L_BRACE)\n2732                 self.state = 392\n2733                 self.expr()\n2734                 self.state = 393\n2735                 self.match(LaTeXParser.R_BRACE)\n2736                 pass\n2737             else:\n2738                 raise NoViableAltException(self)\n2739 \n2740         except RecognitionException as re:\n2741             localctx.exception = re\n2742             self._errHandler.reportError(self, re)\n2743             self._errHandler.recover(self, re)\n2744         finally:\n2745             self.exitRule()\n2746         return localctx\n2747 \n2748     class SupexprContext(ParserRuleContext):\n2749 \n2750         def __init__(self, parser, parent=None, invokingState=-1):\n2751             super(LaTeXParser.SupexprContext, self).__init__(parent, invokingState)\n2752             self.parser = parser\n2753 \n2754         def CARET(self):\n2755             return self.getToken(LaTeXParser.CARET, 0)\n2756 \n2757         def atom(self):\n2758             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)\n2759 \n2760 \n2761         def L_BRACE(self):\n2762             return self.getToken(LaTeXParser.L_BRACE, 0)\n2763 \n2764         def expr(self):\n2765             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)\n2766 \n2767 \n2768         def R_BRACE(self):\n2769             return self.getToken(LaTeXParser.R_BRACE, 0)\n2770 \n2771         def getRuleIndex(self):\n2772             return LaTeXParser.RULE_supexpr\n2773 \n2774 \n2775 \n2776 \n2777     def supexpr(self):\n2778 \n2779         localctx = LaTeXParser.SupexprContext(self, self._ctx, self.state)\n2780         self.enterRule(localctx, 64, self.RULE_supexpr)\n2781         try:\n2782             self.enterOuterAlt(localctx, 1)\n2783             self.state = 397\n2784             self.match(LaTeXParser.CARET)\n2785             self.state = 403\n2786             self._errHandler.sync(self)\n2787             token = self._input.LA(1)\n2788             if token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:\n2789                 self.state = 398\n2790                 self.atom()\n2791                 pass\n2792             elif token in [LaTeXParser.L_BRACE]:\n2793                 self.state = 399\n2794                 self.match(LaTeXParser.L_BRACE)\n2795                 self.state = 400\n2796                 self.expr()\n2797                 self.state = 401\n2798                 self.match(LaTeXParser.R_BRACE)\n2799                 pass\n2800             else:\n2801                 raise NoViableAltException(self)\n2802 \n2803         except RecognitionException as re:\n2804             localctx.exception = re\n2805             self._errHandler.reportError(self, re)\n2806             self._errHandler.recover(self, re)\n2807         finally:\n2808             self.exitRule()\n2809         return localctx\n2810 \n2811     class SubeqContext(ParserRuleContext):\n2812 \n2813         def __init__(self, parser, parent=None, invokingState=-1):\n2814             super(LaTeXParser.SubeqContext, self).__init__(parent, invokingState)\n2815             self.parser = parser\n2816 \n2817         def UNDERSCORE(self):\n2818             return self.getToken(LaTeXParser.UNDERSCORE, 0)\n2819 \n2820         def L_BRACE(self):\n2821             return self.getToken(LaTeXParser.L_BRACE, 0)\n2822 \n2823         def equality(self):\n2824             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)\n2825 \n2826 \n2827         def R_BRACE(self):\n2828             return self.getToken(LaTeXParser.R_BRACE, 0)\n2829 \n2830         def getRuleIndex(self):\n2831             return LaTeXParser.RULE_subeq\n2832 \n2833 \n2834 \n2835 \n2836     def subeq(self):\n2837 \n2838         localctx = LaTeXParser.SubeqContext(self, self._ctx, self.state)\n2839         self.enterRule(localctx, 66, self.RULE_subeq)\n2840         try:\n2841             self.enterOuterAlt(localctx, 1)\n2842             self.state = 405\n2843             self.match(LaTeXParser.UNDERSCORE)\n2844             self.state = 406\n2845             self.match(LaTeXParser.L_BRACE)\n2846             self.state = 407\n2847             self.equality()\n2848             self.state = 408\n2849             self.match(LaTeXParser.R_BRACE)\n2850         except RecognitionException as re:\n2851             localctx.exception = re\n2852             self._errHandler.reportError(self, re)\n2853             self._errHandler.recover(self, re)\n2854         finally:\n2855             self.exitRule()\n2856         return localctx\n2857 \n2858     class SupeqContext(ParserRuleContext):\n2859 \n2860         def __init__(self, parser, parent=None, invokingState=-1):\n2861             super(LaTeXParser.SupeqContext, self).__init__(parent, invokingState)\n2862             self.parser = parser\n2863 \n2864         def UNDERSCORE(self):\n2865             return self.getToken(LaTeXParser.UNDERSCORE, 0)\n2866 \n2867         def L_BRACE(self):\n2868             return self.getToken(LaTeXParser.L_BRACE, 0)\n2869 \n2870         def equality(self):\n2871             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)\n2872 \n2873 \n2874         def R_BRACE(self):\n2875             return self.getToken(LaTeXParser.R_BRACE, 0)\n2876 \n2877         def getRuleIndex(self):\n2878             return LaTeXParser.RULE_supeq\n2879 \n2880 \n2881 \n2882 \n2883     def supeq(self):\n2884 \n2885         localctx = LaTeXParser.SupeqContext(self, self._ctx, self.state)\n2886         self.enterRule(localctx, 68, self.RULE_supeq)\n2887         try:\n2888             self.enterOuterAlt(localctx, 1)\n2889             self.state = 410\n2890             self.match(LaTeXParser.UNDERSCORE)\n2891             self.state = 411\n2892             self.match(LaTeXParser.L_BRACE)\n2893             self.state = 412\n2894             self.equality()\n2895             self.state = 413\n2896             self.match(LaTeXParser.R_BRACE)\n2897         except RecognitionException as re:\n2898             localctx.exception = re\n2899             self._errHandler.reportError(self, re)\n2900             self._errHandler.recover(self, re)\n2901         finally:\n2902             self.exitRule()\n2903         return localctx\n2904 \n2905 \n2906 \n2907     def sempred(self, localctx, ruleIndex, predIndex):\n2908         if self._predicates == None:\n2909             self._predicates = dict()\n2910         self._predicates[1] = self.relation_sempred\n2911         self._predicates[4] = self.additive_sempred\n2912         self._predicates[5] = self.mp_sempred\n2913         self._predicates[6] = self.mp_nofunc_sempred\n2914         self._predicates[15] = self.exp_sempred\n2915         self._predicates[16] = self.exp_nofunc_sempred\n2916         pred = self._predicates.get(ruleIndex, None)\n2917         if pred is None:\n2918             raise Exception(\"No predicate with index:\" + str(ruleIndex))\n2919         else:\n2920             return pred(localctx, predIndex)\n2921 \n2922     def relation_sempred(self, localctx, predIndex):\n2923             if predIndex == 0:\n2924                 return self.precpred(self._ctx, 2)\n2925 \n2926 \n2927     def additive_sempred(self, localctx, predIndex):\n2928             if predIndex == 1:\n2929                 return self.precpred(self._ctx, 2)\n2930 \n2931 \n2932     def mp_sempred(self, localctx, predIndex):\n2933             if predIndex == 2:\n2934                 return self.precpred(self._ctx, 2)\n2935 \n2936 \n2937     def mp_nofunc_sempred(self, localctx, predIndex):\n2938             if predIndex == 3:\n2939                 return self.precpred(self._ctx, 2)\n2940 \n2941 \n2942     def exp_sempred(self, localctx, predIndex):\n2943             if predIndex == 4:\n2944                 return self.precpred(self._ctx, 2)\n2945 \n2946 \n2947     def exp_nofunc_sempred(self, localctx, predIndex):\n2948             if predIndex == 5:\n2949                 return self.precpred(self._ctx, 2)\n2950 \n2951 \n2952 \n2953 \n2954 \n",
        "intended_behavior": "The handling of `\\ln` and `\\log` within this parsing logic needs to ensure the correct interpretation of natural logarithm expressions."
    },
    {
        "rel_file_path": "sympy/parsing/latex/_antlr/latexlexer.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.1/sympy/parsing/latex/_antlr/latexlexer.py",
        "start": 1,
        "end": 345,
        "class_name": null,
        "method_name": null,
        "code": "1 \n2 # *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***\n3 #\n4 # Generated from ../LaTeX.g4, derived from latex2sympy\n5 #     latex2sympy is licensed under the MIT license\n6 #     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt\n7 #\n8 # Generated with antlr4\n9 #    antlr4 is licensed under the BSD-3-Clause License\n10 #    https://github.com/antlr/antlr4/blob/master/LICENSE.txt\n11 from __future__ import print_function\n12 from antlr4 import *\n13 from io import StringIO\n14 import sys\n15 \n16 \n17 def serializedATN():\n18     with StringIO() as buf:\n19         buf.write(u\"\\3\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\\u5964\\2\")\n20         buf.write(u\";\\u01e8\\b\\1\\4\\2\\t\\2\\4\\3\\t\\3\\4\\4\\t\\4\\4\\5\\t\\5\\4\\6\\t\\6\\4\")\n21         buf.write(u\"\\7\\t\\7\\4\\b\\t\\b\\4\\t\\t\\t\\4\\n\\t\\n\\4\\13\\t\\13\\4\\f\\t\\f\\4\\r\")\n22         buf.write(u\"\\t\\r\\4\\16\\t\\16\\4\\17\\t\\17\\4\\20\\t\\20\\4\\21\\t\\21\\4\\22\\t\\22\")\n23         buf.write(u\"\\4\\23\\t\\23\\4\\24\\t\\24\\4\\25\\t\\25\\4\\26\\t\\26\\4\\27\\t\\27\\4\")\n24         buf.write(u\"\\30\\t\\30\\4\\31\\t\\31\\4\\32\\t\\32\\4\\33\\t\\33\\4\\34\\t\\34\\4\\35\")\n25         buf.write(u\"\\t\\35\\4\\36\\t\\36\\4\\37\\t\\37\\4 \\t \\4!\\t!\\4\\\"\\t\\\"\\4#\\t#\\4\")\n26         buf.write(u\"$\\t$\\4%\\t%\\4&\\t&\\4\\'\\t\\'\\4(\\t(\\4)\\t)\\4*\\t*\\4+\\t+\\4,\\t\")\n27         buf.write(u\",\\4-\\t-\\4.\\t.\\4/\\t/\\4\\60\\t\\60\\4\\61\\t\\61\\4\\62\\t\\62\\4\\63\")\n28         buf.write(u\"\\t\\63\\4\\64\\t\\64\\4\\65\\t\\65\\4\\66\\t\\66\\4\\67\\t\\67\\48\\t8\\4\")\n29         buf.write(u\"9\\t9\\4:\\t:\\4;\\t;\\4<\\t<\\3\\2\\3\\2\\3\\3\\6\\3}\\n\\3\\r\\3\\16\\3\")\n30         buf.write(u\"~\\3\\3\\3\\3\\3\\4\\3\\4\\3\\5\\3\\5\\3\\6\\3\\6\\3\\7\\3\\7\\3\\b\\3\\b\\3\\t\")\n31         buf.write(u\"\\3\\t\\3\\n\\3\\n\\3\\13\\3\\13\\3\\f\\3\\f\\3\\r\\3\\r\\3\\16\\3\\16\\3\\17\")\n32         buf.write(u\"\\3\\17\\3\\17\\3\\17\\3\\17\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\")\n33         buf.write(u\"\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\")\n34         buf.write(u\"\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\")\n35         buf.write(u\"\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\")\n36         buf.write(u\"\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\")\n37         buf.write(u\"\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\5\\20\\u00d5\\n\\20\\3\\21\")\n38         buf.write(u\"\\3\\21\\3\\21\\3\\21\\3\\21\\3\\22\\3\\22\\3\\22\\3\\22\\3\\22\\3\\23\\3\")\n39         buf.write(u\"\\23\\3\\23\\3\\23\\3\\23\\3\\23\\3\\24\\3\\24\\3\\24\\3\\24\\3\\24\\3\\25\")\n40         buf.write(u\"\\3\\25\\3\\25\\3\\25\\3\\26\\3\\26\\3\\26\\3\\26\\3\\26\\3\\27\\3\\27\\3\")\n41         buf.write(u\"\\27\\3\\27\\3\\27\\3\\30\\3\\30\\3\\30\\3\\30\\3\\30\\3\\31\\3\\31\\3\\31\")\n42         buf.write(u\"\\3\\31\\3\\31\\3\\32\\3\\32\\3\\32\\3\\32\\3\\32\\3\\33\\3\\33\\3\\33\\3\")\n43         buf.write(u\"\\33\\3\\33\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\35\")\n44         buf.write(u\"\\3\\35\\3\\35\\3\\35\\3\\35\\3\\35\\3\\35\\3\\35\\3\\36\\3\\36\\3\\36\\3\")\n45         buf.write(u\"\\36\\3\\36\\3\\36\\3\\36\\3\\36\\3\\37\\3\\37\\3\\37\\3\\37\\3\\37\\3\\37\")\n46         buf.write(u\"\\3\\37\\3\\37\\3 \\3 \\3 \\3 \\3 \\3 \\3 \\3 \\3!\\3!\\3!\\3!\\3!\\3!\")\n47         buf.write(u\"\\3!\\3!\\3\\\"\\3\\\"\\3\\\"\\3\\\"\\3\\\"\\3\\\"\\3#\\3#\\3#\\3#\\3#\\3#\\3$\\3\")\n48         buf.write(u\"$\\3$\\3$\\3$\\3$\\3%\\3%\\3%\\3%\\3%\\3%\\3%\\3%\\3&\\3&\\3&\\3&\\3&\")\n49         buf.write(u\"\\3&\\3&\\3&\\3\\'\\3\\'\\3\\'\\3\\'\\3\\'\\3\\'\\3\\'\\3\\'\\3(\\3(\\3(\\3\")\n50         buf.write(u\"(\\3(\\3(\\3)\\3)\\3)\\3)\\3)\\3)\\3)\\3*\\3*\\3*\\3*\\3*\\3*\\3+\\3+\")\n51         buf.write(u\"\\3+\\3+\\3+\\3,\\3,\\3,\\3,\\3,\\3,\\3-\\3-\\3-\\3-\\3-\\3-\\3-\\3-\\3\")\n52         buf.write(u\".\\3.\\3/\\3/\\3\\60\\3\\60\\3\\61\\3\\61\\3\\62\\3\\62\\7\\62\\u0198\\n\")\n53         buf.write(u\"\\62\\f\\62\\16\\62\\u019b\\13\\62\\3\\62\\3\\62\\3\\62\\6\\62\\u01a0\")\n54         buf.write(u\"\\n\\62\\r\\62\\16\\62\\u01a1\\5\\62\\u01a4\\n\\62\\3\\63\\3\\63\\3\\64\")\n55         buf.write(u\"\\3\\64\\3\\65\\6\\65\\u01ab\\n\\65\\r\\65\\16\\65\\u01ac\\3\\65\\3\\65\")\n56         buf.write(u\"\\3\\65\\3\\65\\3\\65\\7\\65\\u01b4\\n\\65\\f\\65\\16\\65\\u01b7\\13\\65\")\n57         buf.write(u\"\\3\\65\\7\\65\\u01ba\\n\\65\\f\\65\\16\\65\\u01bd\\13\\65\\3\\65\\3\\65\")\n58         buf.write(u\"\\3\\65\\3\\65\\3\\65\\7\\65\\u01c4\\n\\65\\f\\65\\16\\65\\u01c7\\13\\65\")\n59         buf.write(u\"\\3\\65\\3\\65\\6\\65\\u01cb\\n\\65\\r\\65\\16\\65\\u01cc\\5\\65\\u01cf\")\n60         buf.write(u\"\\n\\65\\3\\66\\3\\66\\3\\67\\3\\67\\38\\38\\38\\38\\38\\39\\39\\3:\\3:\")\n61         buf.write(u\"\\3:\\3:\\3:\\3;\\3;\\3<\\3<\\6<\\u01e5\\n<\\r<\\16<\\u01e6\\3\\u0199\")\n62         buf.write(u\"\\2=\\3\\3\\5\\4\\7\\5\\t\\6\\13\\7\\r\\b\\17\\t\\21\\n\\23\\13\\25\\f\\27\")\n63         buf.write(u\"\\r\\31\\16\\33\\17\\35\\20\\37\\21!\\22#\\23%\\24\\'\\25)\\26+\\27-\")\n64         buf.write(u\"\\30/\\31\\61\\32\\63\\33\\65\\34\\67\\359\\36;\\37= ?!A\\\"C#E$G%\")\n65         buf.write(u\"I&K\\'M(O)Q*S+U,W-Y.[/]\\60_\\61a\\2c\\62e\\63g\\2i\\64k\\65m\")\n66         buf.write(u\"\\66o\\67q8s9u:w;\\3\\2\\5\\5\\2\\13\\f\\17\\17\\\"\\\"\\4\\2C\\\\c|\\3\\2\")\n67         buf.write(u\"\\62;\\2\\u01f4\\2\\3\\3\\2\\2\\2\\2\\5\\3\\2\\2\\2\\2\\7\\3\\2\\2\\2\\2\\t\")\n68         buf.write(u\"\\3\\2\\2\\2\\2\\13\\3\\2\\2\\2\\2\\r\\3\\2\\2\\2\\2\\17\\3\\2\\2\\2\\2\\21\\3\")\n69         buf.write(u\"\\2\\2\\2\\2\\23\\3\\2\\2\\2\\2\\25\\3\\2\\2\\2\\2\\27\\3\\2\\2\\2\\2\\31\\3\")\n70         buf.write(u\"\\2\\2\\2\\2\\33\\3\\2\\2\\2\\2\\35\\3\\2\\2\\2\\2\\37\\3\\2\\2\\2\\2!\\3\\2\")\n71         buf.write(u\"\\2\\2\\2#\\3\\2\\2\\2\\2%\\3\\2\\2\\2\\2\\'\\3\\2\\2\\2\\2)\\3\\2\\2\\2\\2+\")\n72         buf.write(u\"\\3\\2\\2\\2\\2-\\3\\2\\2\\2\\2/\\3\\2\\2\\2\\2\\61\\3\\2\\2\\2\\2\\63\\3\\2\")\n73         buf.write(u\"\\2\\2\\2\\65\\3\\2\\2\\2\\2\\67\\3\\2\\2\\2\\29\\3\\2\\2\\2\\2;\\3\\2\\2\\2\")\n74         buf.write(u\"\\2=\\3\\2\\2\\2\\2?\\3\\2\\2\\2\\2A\\3\\2\\2\\2\\2C\\3\\2\\2\\2\\2E\\3\\2\\2\")\n75         buf.write(u\"\\2\\2G\\3\\2\\2\\2\\2I\\3\\2\\2\\2\\2K\\3\\2\\2\\2\\2M\\3\\2\\2\\2\\2O\\3\\2\")\n76         buf.write(u\"\\2\\2\\2Q\\3\\2\\2\\2\\2S\\3\\2\\2\\2\\2U\\3\\2\\2\\2\\2W\\3\\2\\2\\2\\2Y\\3\")\n77         buf.write(u\"\\2\\2\\2\\2[\\3\\2\\2\\2\\2]\\3\\2\\2\\2\\2_\\3\\2\\2\\2\\2c\\3\\2\\2\\2\\2\")\n78         buf.write(u\"e\\3\\2\\2\\2\\2i\\3\\2\\2\\2\\2k\\3\\2\\2\\2\\2m\\3\\2\\2\\2\\2o\\3\\2\\2\\2\")\n79         buf.write(u\"\\2q\\3\\2\\2\\2\\2s\\3\\2\\2\\2\\2u\\3\\2\\2\\2\\2w\\3\\2\\2\\2\\3y\\3\\2\\2\")\n80         buf.write(u\"\\2\\5|\\3\\2\\2\\2\\7\\u0082\\3\\2\\2\\2\\t\\u0084\\3\\2\\2\\2\\13\\u0086\")\n81         buf.write(u\"\\3\\2\\2\\2\\r\\u0088\\3\\2\\2\\2\\17\\u008a\\3\\2\\2\\2\\21\\u008c\\3\")\n82         buf.write(u\"\\2\\2\\2\\23\\u008e\\3\\2\\2\\2\\25\\u0090\\3\\2\\2\\2\\27\\u0092\\3\\2\")\n83         buf.write(u\"\\2\\2\\31\\u0094\\3\\2\\2\\2\\33\\u0096\\3\\2\\2\\2\\35\\u0098\\3\\2\\2\")\n84         buf.write(u\"\\2\\37\\u00d4\\3\\2\\2\\2!\\u00d6\\3\\2\\2\\2#\\u00db\\3\\2\\2\\2%\\u00e0\")\n85         buf.write(u\"\\3\\2\\2\\2\\'\\u00e6\\3\\2\\2\\2)\\u00eb\\3\\2\\2\\2+\\u00ef\\3\\2\\2\")\n86         buf.write(u\"\\2-\\u00f4\\3\\2\\2\\2/\\u00f9\\3\\2\\2\\2\\61\\u00fe\\3\\2\\2\\2\\63\")\n87         buf.write(u\"\\u0103\\3\\2\\2\\2\\65\\u0108\\3\\2\\2\\2\\67\\u010d\\3\\2\\2\\29\\u0115\")\n88         buf.write(u\"\\3\\2\\2\\2;\\u011d\\3\\2\\2\\2=\\u0125\\3\\2\\2\\2?\\u012d\\3\\2\\2\\2\")\n89         buf.write(u\"A\\u0135\\3\\2\\2\\2C\\u013d\\3\\2\\2\\2E\\u0143\\3\\2\\2\\2G\\u0149\")\n90         buf.write(u\"\\3\\2\\2\\2I\\u014f\\3\\2\\2\\2K\\u0157\\3\\2\\2\\2M\\u015f\\3\\2\\2\\2\")\n91         buf.write(u\"O\\u0167\\3\\2\\2\\2Q\\u016d\\3\\2\\2\\2S\\u0174\\3\\2\\2\\2U\\u017a\")\n92         buf.write(u\"\\3\\2\\2\\2W\\u017f\\3\\2\\2\\2Y\\u0185\\3\\2\\2\\2[\\u018d\\3\\2\\2\\2\")\n93         buf.write(u\"]\\u018f\\3\\2\\2\\2_\\u0191\\3\\2\\2\\2a\\u0193\\3\\2\\2\\2c\\u0195\")\n94         buf.write(u\"\\3\\2\\2\\2e\\u01a5\\3\\2\\2\\2g\\u01a7\\3\\2\\2\\2i\\u01ce\\3\\2\\2\\2\")\n95         buf.write(u\"k\\u01d0\\3\\2\\2\\2m\\u01d2\\3\\2\\2\\2o\\u01d4\\3\\2\\2\\2q\\u01d9\")\n96         buf.write(u\"\\3\\2\\2\\2s\\u01db\\3\\2\\2\\2u\\u01e0\\3\\2\\2\\2w\\u01e2\\3\\2\\2\\2\")\n97         buf.write(u\"yz\\7.\\2\\2z\\4\\3\\2\\2\\2{}\\t\\2\\2\\2|{\\3\\2\\2\\2}~\\3\\2\\2\\2~|\")\n98         buf.write(u\"\\3\\2\\2\\2~\\177\\3\\2\\2\\2\\177\\u0080\\3\\2\\2\\2\\u0080\\u0081\\b\")\n99         buf.write(u\"\\3\\2\\2\\u0081\\6\\3\\2\\2\\2\\u0082\\u0083\\7-\\2\\2\\u0083\\b\\3\\2\")\n100         buf.write(u\"\\2\\2\\u0084\\u0085\\7/\\2\\2\\u0085\\n\\3\\2\\2\\2\\u0086\\u0087\\7\")\n101         buf.write(u\",\\2\\2\\u0087\\f\\3\\2\\2\\2\\u0088\\u0089\\7\\61\\2\\2\\u0089\\16\\3\")\n102         buf.write(u\"\\2\\2\\2\\u008a\\u008b\\7*\\2\\2\\u008b\\20\\3\\2\\2\\2\\u008c\\u008d\")\n103         buf.write(u\"\\7+\\2\\2\\u008d\\22\\3\\2\\2\\2\\u008e\\u008f\\7}\\2\\2\\u008f\\24\")\n104         buf.write(u\"\\3\\2\\2\\2\\u0090\\u0091\\7\\177\\2\\2\\u0091\\26\\3\\2\\2\\2\\u0092\")\n105         buf.write(u\"\\u0093\\7]\\2\\2\\u0093\\30\\3\\2\\2\\2\\u0094\\u0095\\7_\\2\\2\\u0095\")\n106         buf.write(u\"\\32\\3\\2\\2\\2\\u0096\\u0097\\7~\\2\\2\\u0097\\34\\3\\2\\2\\2\\u0098\")\n107         buf.write(u\"\\u0099\\7^\\2\\2\\u0099\\u009a\\7n\\2\\2\\u009a\\u009b\\7k\\2\\2\\u009b\")\n108         buf.write(u\"\\u009c\\7o\\2\\2\\u009c\\36\\3\\2\\2\\2\\u009d\\u009e\\7^\\2\\2\\u009e\")\n109         buf.write(u\"\\u009f\\7v\\2\\2\\u009f\\u00d5\\7q\\2\\2\\u00a0\\u00a1\\7^\\2\\2\\u00a1\")\n110         buf.write(u\"\\u00a2\\7t\\2\\2\\u00a2\\u00a3\\7k\\2\\2\\u00a3\\u00a4\\7i\\2\\2\\u00a4\")\n111         buf.write(u\"\\u00a5\\7j\\2\\2\\u00a5\\u00a6\\7v\\2\\2\\u00a6\\u00a7\\7c\\2\\2\\u00a7\")\n112         buf.write(u\"\\u00a8\\7t\\2\\2\\u00a8\\u00a9\\7t\\2\\2\\u00a9\\u00aa\\7q\\2\\2\\u00aa\")\n113         buf.write(u\"\\u00d5\\7y\\2\\2\\u00ab\\u00ac\\7^\\2\\2\\u00ac\\u00ad\\7T\\2\\2\\u00ad\")\n114         buf.write(u\"\\u00ae\\7k\\2\\2\\u00ae\\u00af\\7i\\2\\2\\u00af\\u00b0\\7j\\2\\2\\u00b0\")\n115         buf.write(u\"\\u00b1\\7v\\2\\2\\u00b1\\u00b2\\7c\\2\\2\\u00b2\\u00b3\\7t\\2\\2\\u00b3\")\n116         buf.write(u\"\\u00b4\\7t\\2\\2\\u00b4\\u00b5\\7q\\2\\2\\u00b5\\u00d5\\7y\\2\\2\\u00b6\")\n117         buf.write(u\"\\u00b7\\7^\\2\\2\\u00b7\\u00b8\\7n\\2\\2\\u00b8\\u00b9\\7q\\2\\2\\u00b9\")\n118         buf.write(u\"\\u00ba\\7p\\2\\2\\u00ba\\u00bb\\7i\\2\\2\\u00bb\\u00bc\\7t\\2\\2\\u00bc\")\n119         buf.write(u\"\\u00bd\\7k\\2\\2\\u00bd\\u00be\\7i\\2\\2\\u00be\\u00bf\\7j\\2\\2\\u00bf\")\n120         buf.write(u\"\\u00c0\\7v\\2\\2\\u00c0\\u00c1\\7c\\2\\2\\u00c1\\u00c2\\7t\\2\\2\\u00c2\")\n121         buf.write(u\"\\u00c3\\7t\\2\\2\\u00c3\\u00c4\\7q\\2\\2\\u00c4\\u00d5\\7y\\2\\2\\u00c5\")\n122         buf.write(u\"\\u00c6\\7^\\2\\2\\u00c6\\u00c7\\7N\\2\\2\\u00c7\\u00c8\\7q\\2\\2\\u00c8\")\n123         buf.write(u\"\\u00c9\\7p\\2\\2\\u00c9\\u00ca\\7i\\2\\2\\u00ca\\u00cb\\7t\\2\\2\\u00cb\")\n124         buf.write(u\"\\u00cc\\7k\\2\\2\\u00cc\\u00cd\\7i\\2\\2\\u00cd\\u00ce\\7j\\2\\2\\u00ce\")\n125         buf.write(u\"\\u00cf\\7v\\2\\2\\u00cf\\u00d0\\7c\\2\\2\\u00d0\\u00d1\\7t\\2\\2\\u00d1\")\n126         buf.write(u\"\\u00d2\\7t\\2\\2\\u00d2\\u00d3\\7q\\2\\2\\u00d3\\u00d5\\7y\\2\\2\\u00d4\")\n127         buf.write(u\"\\u009d\\3\\2\\2\\2\\u00d4\\u00a0\\3\\2\\2\\2\\u00d4\\u00ab\\3\\2\\2\")\n128         buf.write(u\"\\2\\u00d4\\u00b6\\3\\2\\2\\2\\u00d4\\u00c5\\3\\2\\2\\2\\u00d5 \\3\\2\")\n129         buf.write(u\"\\2\\2\\u00d6\\u00d7\\7^\\2\\2\\u00d7\\u00d8\\7k\\2\\2\\u00d8\\u00d9\")\n130         buf.write(u\"\\7p\\2\\2\\u00d9\\u00da\\7v\\2\\2\\u00da\\\"\\3\\2\\2\\2\\u00db\\u00dc\")\n131         buf.write(u\"\\7^\\2\\2\\u00dc\\u00dd\\7u\\2\\2\\u00dd\\u00de\\7w\\2\\2\\u00de\\u00df\")\n132         buf.write(u\"\\7o\\2\\2\\u00df$\\3\\2\\2\\2\\u00e0\\u00e1\\7^\\2\\2\\u00e1\\u00e2\")\n133         buf.write(u\"\\7r\\2\\2\\u00e2\\u00e3\\7t\\2\\2\\u00e3\\u00e4\\7q\\2\\2\\u00e4\\u00e5\")\n134         buf.write(u\"\\7f\\2\\2\\u00e5&\\3\\2\\2\\2\\u00e6\\u00e7\\7^\\2\\2\\u00e7\\u00e8\")\n135         buf.write(u\"\\7n\\2\\2\\u00e8\\u00e9\\7q\\2\\2\\u00e9\\u00ea\\7i\\2\\2\\u00ea(\")\n136         buf.write(u\"\\3\\2\\2\\2\\u00eb\\u00ec\\7^\\2\\2\\u00ec\\u00ed\\7n\\2\\2\\u00ed\")\n137         buf.write(u\"\\u00ee\\7p\\2\\2\\u00ee*\\3\\2\\2\\2\\u00ef\\u00f0\\7^\\2\\2\\u00f0\")\n138         buf.write(u\"\\u00f1\\7u\\2\\2\\u00f1\\u00f2\\7k\\2\\2\\u00f2\\u00f3\\7p\\2\\2\\u00f3\")\n139         buf.write(u\",\\3\\2\\2\\2\\u00f4\\u00f5\\7^\\2\\2\\u00f5\\u00f6\\7e\\2\\2\\u00f6\")\n140         buf.write(u\"\\u00f7\\7q\\2\\2\\u00f7\\u00f8\\7u\\2\\2\\u00f8.\\3\\2\\2\\2\\u00f9\")\n141         buf.write(u\"\\u00fa\\7^\\2\\2\\u00fa\\u00fb\\7v\\2\\2\\u00fb\\u00fc\\7c\\2\\2\\u00fc\")\n142         buf.write(u\"\\u00fd\\7p\\2\\2\\u00fd\\60\\3\\2\\2\\2\\u00fe\\u00ff\\7^\\2\\2\\u00ff\")\n143         buf.write(u\"\\u0100\\7e\\2\\2\\u0100\\u0101\\7u\\2\\2\\u0101\\u0102\\7e\\2\\2\\u0102\")\n144         buf.write(u\"\\62\\3\\2\\2\\2\\u0103\\u0104\\7^\\2\\2\\u0104\\u0105\\7u\\2\\2\\u0105\")\n145         buf.write(u\"\\u0106\\7g\\2\\2\\u0106\\u0107\\7e\\2\\2\\u0107\\64\\3\\2\\2\\2\\u0108\")\n146         buf.write(u\"\\u0109\\7^\\2\\2\\u0109\\u010a\\7e\\2\\2\\u010a\\u010b\\7q\\2\\2\\u010b\")\n147         buf.write(u\"\\u010c\\7v\\2\\2\\u010c\\66\\3\\2\\2\\2\\u010d\\u010e\\7^\\2\\2\\u010e\")\n148         buf.write(u\"\\u010f\\7c\\2\\2\\u010f\\u0110\\7t\\2\\2\\u0110\\u0111\\7e\\2\\2\\u0111\")\n149         buf.write(u\"\\u0112\\7u\\2\\2\\u0112\\u0113\\7k\\2\\2\\u0113\\u0114\\7p\\2\\2\\u0114\")\n150         buf.write(u\"8\\3\\2\\2\\2\\u0115\\u0116\\7^\\2\\2\\u0116\\u0117\\7c\\2\\2\\u0117\")\n151         buf.write(u\"\\u0118\\7t\\2\\2\\u0118\\u0119\\7e\\2\\2\\u0119\\u011a\\7e\\2\\2\\u011a\")\n152         buf.write(u\"\\u011b\\7q\\2\\2\\u011b\\u011c\\7u\\2\\2\\u011c:\\3\\2\\2\\2\\u011d\")\n153         buf.write(u\"\\u011e\\7^\\2\\2\\u011e\\u011f\\7c\\2\\2\\u011f\\u0120\\7t\\2\\2\\u0120\")\n154         buf.write(u\"\\u0121\\7e\\2\\2\\u0121\\u0122\\7v\\2\\2\\u0122\\u0123\\7c\\2\\2\\u0123\")\n155         buf.write(u\"\\u0124\\7p\\2\\2\\u0124<\\3\\2\\2\\2\\u0125\\u0126\\7^\\2\\2\\u0126\")\n156         buf.write(u\"\\u0127\\7c\\2\\2\\u0127\\u0128\\7t\\2\\2\\u0128\\u0129\\7e\\2\\2\\u0129\")\n157         buf.write(u\"\\u012a\\7e\\2\\2\\u012a\\u012b\\7u\\2\\2\\u012b\\u012c\\7e\\2\\2\\u012c\")\n158         buf.write(u\">\\3\\2\\2\\2\\u012d\\u012e\\7^\\2\\2\\u012e\\u012f\\7c\\2\\2\\u012f\")\n159         buf.write(u\"\\u0130\\7t\\2\\2\\u0130\\u0131\\7e\\2\\2\\u0131\\u0132\\7u\\2\\2\\u0132\")\n160         buf.write(u\"\\u0133\\7g\\2\\2\\u0133\\u0134\\7e\\2\\2\\u0134@\\3\\2\\2\\2\\u0135\")\n161         buf.write(u\"\\u0136\\7^\\2\\2\\u0136\\u0137\\7c\\2\\2\\u0137\\u0138\\7t\\2\\2\\u0138\")\n162         buf.write(u\"\\u0139\\7e\\2\\2\\u0139\\u013a\\7e\\2\\2\\u013a\\u013b\\7q\\2\\2\\u013b\")\n163         buf.write(u\"\\u013c\\7v\\2\\2\\u013cB\\3\\2\\2\\2\\u013d\\u013e\\7^\\2\\2\\u013e\")\n164         buf.write(u\"\\u013f\\7u\\2\\2\\u013f\\u0140\\7k\\2\\2\\u0140\\u0141\\7p\\2\\2\\u0141\")\n165         buf.write(u\"\\u0142\\7j\\2\\2\\u0142D\\3\\2\\2\\2\\u0143\\u0144\\7^\\2\\2\\u0144\")\n166         buf.write(u\"\\u0145\\7e\\2\\2\\u0145\\u0146\\7q\\2\\2\\u0146\\u0147\\7u\\2\\2\\u0147\")\n167         buf.write(u\"\\u0148\\7j\\2\\2\\u0148F\\3\\2\\2\\2\\u0149\\u014a\\7^\\2\\2\\u014a\")\n168         buf.write(u\"\\u014b\\7v\\2\\2\\u014b\\u014c\\7c\\2\\2\\u014c\\u014d\\7p\\2\\2\\u014d\")\n169         buf.write(u\"\\u014e\\7j\\2\\2\\u014eH\\3\\2\\2\\2\\u014f\\u0150\\7^\\2\\2\\u0150\")\n170         buf.write(u\"\\u0151\\7c\\2\\2\\u0151\\u0152\\7t\\2\\2\\u0152\\u0153\\7u\\2\\2\\u0153\")\n171         buf.write(u\"\\u0154\\7k\\2\\2\\u0154\\u0155\\7p\\2\\2\\u0155\\u0156\\7j\\2\\2\\u0156\")\n172         buf.write(u\"J\\3\\2\\2\\2\\u0157\\u0158\\7^\\2\\2\\u0158\\u0159\\7c\\2\\2\\u0159\")\n173         buf.write(u\"\\u015a\\7t\\2\\2\\u015a\\u015b\\7e\\2\\2\\u015b\\u015c\\7q\\2\\2\\u015c\")\n174         buf.write(u\"\\u015d\\7u\\2\\2\\u015d\\u015e\\7j\\2\\2\\u015eL\\3\\2\\2\\2\\u015f\")\n175         buf.write(u\"\\u0160\\7^\\2\\2\\u0160\\u0161\\7c\\2\\2\\u0161\\u0162\\7t\\2\\2\\u0162\")\n176         buf.write(u\"\\u0163\\7v\\2\\2\\u0163\\u0164\\7c\\2\\2\\u0164\\u0165\\7p\\2\\2\\u0165\")\n177         buf.write(u\"\\u0166\\7j\\2\\2\\u0166N\\3\\2\\2\\2\\u0167\\u0168\\7^\\2\\2\\u0168\")\n178         buf.write(u\"\\u0169\\7u\\2\\2\\u0169\\u016a\\7s\\2\\2\\u016a\\u016b\\7t\\2\\2\\u016b\")\n179         buf.write(u\"\\u016c\\7v\\2\\2\\u016cP\\3\\2\\2\\2\\u016d\\u016e\\7^\\2\\2\\u016e\")\n180         buf.write(u\"\\u016f\\7v\\2\\2\\u016f\\u0170\\7k\\2\\2\\u0170\\u0171\\7o\\2\\2\\u0171\")\n181         buf.write(u\"\\u0172\\7g\\2\\2\\u0172\\u0173\\7u\\2\\2\\u0173R\\3\\2\\2\\2\\u0174\")\n182         buf.write(u\"\\u0175\\7^\\2\\2\\u0175\\u0176\\7e\\2\\2\\u0176\\u0177\\7f\\2\\2\\u0177\")\n183         buf.write(u\"\\u0178\\7q\\2\\2\\u0178\\u0179\\7v\\2\\2\\u0179T\\3\\2\\2\\2\\u017a\")\n184         buf.write(u\"\\u017b\\7^\\2\\2\\u017b\\u017c\\7f\\2\\2\\u017c\\u017d\\7k\\2\\2\\u017d\")\n185         buf.write(u\"\\u017e\\7x\\2\\2\\u017eV\\3\\2\\2\\2\\u017f\\u0180\\7^\\2\\2\\u0180\")\n186         buf.write(u\"\\u0181\\7h\\2\\2\\u0181\\u0182\\7t\\2\\2\\u0182\\u0183\\7c\\2\\2\\u0183\")\n187         buf.write(u\"\\u0184\\7e\\2\\2\\u0184X\\3\\2\\2\\2\\u0185\\u0186\\7^\\2\\2\\u0186\")\n188         buf.write(u\"\\u0187\\7o\\2\\2\\u0187\\u0188\\7c\\2\\2\\u0188\\u0189\\7v\\2\\2\\u0189\")\n189         buf.write(u\"\\u018a\\7j\\2\\2\\u018a\\u018b\\7k\\2\\2\\u018b\\u018c\\7v\\2\\2\\u018c\")\n190         buf.write(u\"Z\\3\\2\\2\\2\\u018d\\u018e\\7a\\2\\2\\u018e\\\\\\3\\2\\2\\2\\u018f\\u0190\")\n191         buf.write(u\"\\7`\\2\\2\\u0190^\\3\\2\\2\\2\\u0191\\u0192\\7<\\2\\2\\u0192`\\3\\2\")\n192         buf.write(u\"\\2\\2\\u0193\\u0194\\t\\2\\2\\2\\u0194b\\3\\2\\2\\2\\u0195\\u0199\\7\")\n193         buf.write(u\"f\\2\\2\\u0196\\u0198\\5a\\61\\2\\u0197\\u0196\\3\\2\\2\\2\\u0198\\u019b\")\n194         buf.write(u\"\\3\\2\\2\\2\\u0199\\u019a\\3\\2\\2\\2\\u0199\\u0197\\3\\2\\2\\2\\u019a\")\n195         buf.write(u\"\\u01a3\\3\\2\\2\\2\\u019b\\u0199\\3\\2\\2\\2\\u019c\\u01a4\\t\\3\\2\")\n196         buf.write(u\"\\2\\u019d\\u019f\\7^\\2\\2\\u019e\\u01a0\\t\\3\\2\\2\\u019f\\u019e\")\n197         buf.write(u\"\\3\\2\\2\\2\\u01a0\\u01a1\\3\\2\\2\\2\\u01a1\\u019f\\3\\2\\2\\2\\u01a1\")\n198         buf.write(u\"\\u01a2\\3\\2\\2\\2\\u01a2\\u01a4\\3\\2\\2\\2\\u01a3\\u019c\\3\\2\\2\")\n199         buf.write(u\"\\2\\u01a3\\u019d\\3\\2\\2\\2\\u01a4d\\3\\2\\2\\2\\u01a5\\u01a6\\t\\3\")\n200         buf.write(u\"\\2\\2\\u01a6f\\3\\2\\2\\2\\u01a7\\u01a8\\t\\4\\2\\2\\u01a8h\\3\\2\\2\")\n201         buf.write(u\"\\2\\u01a9\\u01ab\\5g\\64\\2\\u01aa\\u01a9\\3\\2\\2\\2\\u01ab\\u01ac\")\n202         buf.write(u\"\\3\\2\\2\\2\\u01ac\\u01aa\\3\\2\\2\\2\\u01ac\\u01ad\\3\\2\\2\\2\\u01ad\")\n203         buf.write(u\"\\u01b5\\3\\2\\2\\2\\u01ae\\u01af\\7.\\2\\2\\u01af\\u01b0\\5g\\64\\2\")\n204         buf.write(u\"\\u01b0\\u01b1\\5g\\64\\2\\u01b1\\u01b2\\5g\\64\\2\\u01b2\\u01b4\")\n205         buf.write(u\"\\3\\2\\2\\2\\u01b3\\u01ae\\3\\2\\2\\2\\u01b4\\u01b7\\3\\2\\2\\2\\u01b5\")\n206         buf.write(u\"\\u01b3\\3\\2\\2\\2\\u01b5\\u01b6\\3\\2\\2\\2\\u01b6\\u01cf\\3\\2\\2\")\n207         buf.write(u\"\\2\\u01b7\\u01b5\\3\\2\\2\\2\\u01b8\\u01ba\\5g\\64\\2\\u01b9\\u01b8\")\n208         buf.write(u\"\\3\\2\\2\\2\\u01ba\\u01bd\\3\\2\\2\\2\\u01bb\\u01b9\\3\\2\\2\\2\\u01bb\")\n209         buf.write(u\"\\u01bc\\3\\2\\2\\2\\u01bc\\u01c5\\3\\2\\2\\2\\u01bd\\u01bb\\3\\2\\2\")\n210         buf.write(u\"\\2\\u01be\\u01bf\\7.\\2\\2\\u01bf\\u01c0\\5g\\64\\2\\u01c0\\u01c1\")\n211         buf.write(u\"\\5g\\64\\2\\u01c1\\u01c2\\5g\\64\\2\\u01c2\\u01c4\\3\\2\\2\\2\\u01c3\")\n212         buf.write(u\"\\u01be\\3\\2\\2\\2\\u01c4\\u01c7\\3\\2\\2\\2\\u01c5\\u01c3\\3\\2\\2\")\n213         buf.write(u\"\\2\\u01c5\\u01c6\\3\\2\\2\\2\\u01c6\\u01c8\\3\\2\\2\\2\\u01c7\\u01c5\")\n214         buf.write(u\"\\3\\2\\2\\2\\u01c8\\u01ca\\7\\60\\2\\2\\u01c9\\u01cb\\5g\\64\\2\\u01ca\")\n215         buf.write(u\"\\u01c9\\3\\2\\2\\2\\u01cb\\u01cc\\3\\2\\2\\2\\u01cc\\u01ca\\3\\2\\2\")\n216         buf.write(u\"\\2\\u01cc\\u01cd\\3\\2\\2\\2\\u01cd\\u01cf\\3\\2\\2\\2\\u01ce\\u01aa\")\n217         buf.write(u\"\\3\\2\\2\\2\\u01ce\\u01bb\\3\\2\\2\\2\\u01cfj\\3\\2\\2\\2\\u01d0\\u01d1\")\n218         buf.write(u\"\\7?\\2\\2\\u01d1l\\3\\2\\2\\2\\u01d2\\u01d3\\7>\\2\\2\\u01d3n\\3\\2\")\n219         buf.write(u\"\\2\\2\\u01d4\\u01d5\\7^\\2\\2\\u01d5\\u01d6\\7n\\2\\2\\u01d6\\u01d7\")\n220         buf.write(u\"\\7g\\2\\2\\u01d7\\u01d8\\7s\\2\\2\\u01d8p\\3\\2\\2\\2\\u01d9\\u01da\")\n221         buf.write(u\"\\7@\\2\\2\\u01dar\\3\\2\\2\\2\\u01db\\u01dc\\7^\\2\\2\\u01dc\\u01dd\")\n222         buf.write(u\"\\7i\\2\\2\\u01dd\\u01de\\7g\\2\\2\\u01de\\u01df\\7s\\2\\2\\u01dft\")\n223         buf.write(u\"\\3\\2\\2\\2\\u01e0\\u01e1\\7#\\2\\2\\u01e1v\\3\\2\\2\\2\\u01e2\\u01e4\")\n224         buf.write(u\"\\7^\\2\\2\\u01e3\\u01e5\\t\\3\\2\\2\\u01e4\\u01e3\\3\\2\\2\\2\\u01e5\")\n225         buf.write(u\"\\u01e6\\3\\2\\2\\2\\u01e6\\u01e4\\3\\2\\2\\2\\u01e6\\u01e7\\3\\2\\2\")\n226         buf.write(u\"\\2\\u01e7x\\3\\2\\2\\2\\17\\2~\\u00d4\\u0199\\u01a1\\u01a3\\u01ac\")\n227         buf.write(u\"\\u01b5\\u01bb\\u01c5\\u01cc\\u01ce\\u01e6\\3\\b\\2\\2\")\n228         return buf.getvalue()\n229 \n230 \n231 class LaTeXLexer(Lexer):\n232 \n233     atn = ATNDeserializer().deserialize(serializedATN())\n234 \n235     decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]\n236 \n237     T__0 = 1\n238     WS = 2\n239     ADD = 3\n240     SUB = 4\n241     MUL = 5\n242     DIV = 6\n243     L_PAREN = 7\n244     R_PAREN = 8\n245     L_BRACE = 9\n246     R_BRACE = 10\n247     L_BRACKET = 11\n248     R_BRACKET = 12\n249     BAR = 13\n250     FUNC_LIM = 14\n251     LIM_APPROACH_SYM = 15\n252     FUNC_INT = 16\n253     FUNC_SUM = 17\n254     FUNC_PROD = 18\n255     FUNC_LOG = 19\n256     FUNC_LN = 20\n257     FUNC_SIN = 21\n258     FUNC_COS = 22\n259     FUNC_TAN = 23\n260     FUNC_CSC = 24\n261     FUNC_SEC = 25\n262     FUNC_COT = 26\n263     FUNC_ARCSIN = 27\n264     FUNC_ARCCOS = 28\n265     FUNC_ARCTAN = 29\n266     FUNC_ARCCSC = 30\n267     FUNC_ARCSEC = 31\n268     FUNC_ARCCOT = 32\n269     FUNC_SINH = 33\n270     FUNC_COSH = 34\n271     FUNC_TANH = 35\n272     FUNC_ARSINH = 36\n273     FUNC_ARCOSH = 37\n274     FUNC_ARTANH = 38\n275     FUNC_SQRT = 39\n276     CMD_TIMES = 40\n277     CMD_CDOT = 41\n278     CMD_DIV = 42\n279     CMD_FRAC = 43\n280     CMD_MATHIT = 44\n281     UNDERSCORE = 45\n282     CARET = 46\n283     COLON = 47\n284     DIFFERENTIAL = 48\n285     LETTER = 49\n286     NUMBER = 50\n287     EQUAL = 51\n288     LT = 52\n289     LTE = 53\n290     GT = 54\n291     GTE = 55\n292     BANG = 56\n293     SYMBOL = 57\n294 \n295     channelNames = [ u\"DEFAULT_TOKEN_CHANNEL\", u\"HIDDEN\" ]\n296 \n297     modeNames = [ u\"DEFAULT_MODE\" ]\n298 \n299     literalNames = [ u\"<INVALID>\",\n300             u\"','\", u\"'+'\", u\"'-'\", u\"'*'\", u\"'/'\", u\"'('\", u\"')'\", u\"'{'\",\n301             u\"'}'\", u\"'['\", u\"']'\", u\"'|'\", u\"'\\\\lim'\", u\"'\\\\int'\", u\"'\\\\sum'\",\n302             u\"'\\\\prod'\", u\"'\\\\log'\", u\"'\\\\ln'\", u\"'\\\\sin'\", u\"'\\\\cos'\",\n303             u\"'\\\\tan'\", u\"'\\\\csc'\", u\"'\\\\sec'\", u\"'\\\\cot'\", u\"'\\\\arcsin'\",\n304             u\"'\\\\arccos'\", u\"'\\\\arctan'\", u\"'\\\\arccsc'\", u\"'\\\\arcsec'\",\n305             u\"'\\\\arccot'\", u\"'\\\\sinh'\", u\"'\\\\cosh'\", u\"'\\\\tanh'\", u\"'\\\\arsinh'\",\n306             u\"'\\\\arcosh'\", u\"'\\\\artanh'\", u\"'\\\\sqrt'\", u\"'\\\\times'\", u\"'\\\\cdot'\",\n307             u\"'\\\\div'\", u\"'\\\\frac'\", u\"'\\\\mathit'\", u\"'_'\", u\"'^'\", u\"':'\",\n308             u\"'='\", u\"'<'\", u\"'\\\\leq'\", u\"'>'\", u\"'\\\\geq'\", u\"'!'\" ]\n309 \n310     symbolicNames = [ u\"<INVALID>\",\n311             u\"WS\", u\"ADD\", u\"SUB\", u\"MUL\", u\"DIV\", u\"L_PAREN\", u\"R_PAREN\",\n312             u\"L_BRACE\", u\"R_BRACE\", u\"L_BRACKET\", u\"R_BRACKET\", u\"BAR\",\n313             u\"FUNC_LIM\", u\"LIM_APPROACH_SYM\", u\"FUNC_INT\", u\"FUNC_SUM\",\n314             u\"FUNC_PROD\", u\"FUNC_LOG\", u\"FUNC_LN\", u\"FUNC_SIN\", u\"FUNC_COS\",\n315             u\"FUNC_TAN\", u\"FUNC_CSC\", u\"FUNC_SEC\", u\"FUNC_COT\", u\"FUNC_ARCSIN\",\n316             u\"FUNC_ARCCOS\", u\"FUNC_ARCTAN\", u\"FUNC_ARCCSC\", u\"FUNC_ARCSEC\",\n317             u\"FUNC_ARCCOT\", u\"FUNC_SINH\", u\"FUNC_COSH\", u\"FUNC_TANH\", u\"FUNC_ARSINH\",\n318             u\"FUNC_ARCOSH\", u\"FUNC_ARTANH\", u\"FUNC_SQRT\", u\"CMD_TIMES\",\n319             u\"CMD_CDOT\", u\"CMD_DIV\", u\"CMD_FRAC\", u\"CMD_MATHIT\", u\"UNDERSCORE\",\n320             u\"CARET\", u\"COLON\", u\"DIFFERENTIAL\", u\"LETTER\", u\"NUMBER\", u\"EQUAL\",\n321             u\"LT\", u\"LTE\", u\"GT\", u\"GTE\", u\"BANG\", u\"SYMBOL\" ]\n322 \n323     ruleNames = [ u\"T__0\", u\"WS\", u\"ADD\", u\"SUB\", u\"MUL\", u\"DIV\", u\"L_PAREN\",\n324                   u\"R_PAREN\", u\"L_BRACE\", u\"R_BRACE\", u\"L_BRACKET\", u\"R_BRACKET\",\n325                   u\"BAR\", u\"FUNC_LIM\", u\"LIM_APPROACH_SYM\", u\"FUNC_INT\",\n326                   u\"FUNC_SUM\", u\"FUNC_PROD\", u\"FUNC_LOG\", u\"FUNC_LN\", u\"FUNC_SIN\",\n327                   u\"FUNC_COS\", u\"FUNC_TAN\", u\"FUNC_CSC\", u\"FUNC_SEC\", u\"FUNC_COT\",\n328                   u\"FUNC_ARCSIN\", u\"FUNC_ARCCOS\", u\"FUNC_ARCTAN\", u\"FUNC_ARCCSC\",\n329                   u\"FUNC_ARCSEC\", u\"FUNC_ARCCOT\", u\"FUNC_SINH\", u\"FUNC_COSH\",\n330                   u\"FUNC_TANH\", u\"FUNC_ARSINH\", u\"FUNC_ARCOSH\", u\"FUNC_ARTANH\",\n331                   u\"FUNC_SQRT\", u\"CMD_TIMES\", u\"CMD_CDOT\", u\"CMD_DIV\", u\"CMD_FRAC\",\n332                   u\"CMD_MATHIT\", u\"UNDERSCORE\", u\"CARET\", u\"COLON\", u\"WS_CHAR\",\n333                   u\"DIFFERENTIAL\", u\"LETTER\", u\"DIGIT\", u\"NUMBER\", u\"EQUAL\",\n334                   u\"LT\", u\"LTE\", u\"GT\", u\"GTE\", u\"BANG\", u\"SYMBOL\" ]\n335 \n336     grammarFileName = u\"LaTeX.g4\"\n337 \n338     def __init__(self, input=None, output=sys.stdout):\n339         super(LaTeXLexer, self).__init__(input, output=output)\n340         self.checkVersion(\"4.7.1\")\n341         self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())\n342         self._actions = None\n343         self._predicates = None\n344 \n345 \n",
        "intended_behavior": "Ensure that the lexer correctly differentiates and tokenizes `\\ln` and `\\log` as separate entities without ambiguity."
    }
]