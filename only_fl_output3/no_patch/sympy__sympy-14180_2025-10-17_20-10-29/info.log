2025-10-17 20:10:29.785 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-17 20:10:40.564 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=159, output_tokens=12, cost=0.001950
2025-10-17 20:10:40.566 | INFO     | Test agent decides that the issue statement does not contain reproduction steps; skipping reproducer tracing
2025-10-17 20:10:40.571 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-17 20:10:48.238 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=468, output_tokens=275, cost=0.012930
2025-10-17 20:10:48.245 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-17 20:10:50.409 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=629, output_tokens=53, cost=0.007880
2025-10-17 20:10:50.410 | INFO     | Refactored invocation argument parsing gives different result on 'search_code("log{\\left(10\\right)}")': old result is ['log{\\\\left(10\\right)}'], new result  is ['log{\\left(10\right)}']
2025-10-17 20:10:50.411 | DEBUG    | Extracted a valid json.
2025-10-17 20:10:50.412 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_method(\"toLatex\")",
        "search_code(\"log{\\left(10\\right)}\")",
        "search_code(\"ln(10)\")"
    ],
    "bug_locations": []
}
2025-10-17 20:10:50.415 | INFO     | Refactored invocation argument parsing gives different result on 'search_code("log{\\left(10\\right)}")': old result is ['log{\\\\left(10\\right)}'], new result  is ['log{\\left(10\right)}']
2025-10-17 20:10:50.481 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-17 20:10:50.482 | DEBUG    | <Agent search> Analyzing search results.
2025-10-17 20:11:01.023 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=932, output_tokens=424, cost=0.022040
2025-10-17 20:11:01.032 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-17 20:11:10.765 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1572, output_tokens=380, cost=0.027120
2025-10-17 20:11:10.773 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-17 20:11:19.389 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=734, output_tokens=251, cost=0.014870
2025-10-17 20:11:19.390 | DEBUG    | Extracted a valid json.
2025-10-17 20:11:19.390 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations": [
        {
            "file": "MathExpressionRenderer.py",
            "class": "MathToLatexConverter",
            "method": "convertExpressionToLatex",
            "intended_behavior": "The `convertExpressionToLatex` method is responsible for converting mathematical expressions into LaTeX format. The intended behavior should include a case or condition specifically for handling the natural logarithm function `ln`. When the method encounters an expression that includes `ln(x)`, it should convert this expression to `\\ln(x)` in LaTeX format, instead of converting it to the generic logarithm notation `log{\\left(x\\right)}`. This would ensure that the output accurately reflects the standard notation for natural logarithms in LaTeX, which is distinct from the logarithm function with an unspecified base. To address the issue, the method could include a check for instances of `ln` before processing general logarithms or during the parsing of the expression. If `ln` is found, it should specifically output `\\ln` followed by the argument in LaTeX format. This preserves the existing functionality for converting other mathematical expressions while correcting the specific case for natural logarithms."
        }
    ]
}
2025-10-17 20:11:19.396 | DEBUG    | Failed to retrieve code from all bug locations. Asking search agent to re-generate response.
2025-10-17 20:11:19.396 | DEBUG    | <Agent search> Downstream could not consume our last response. Will retry.
2025-10-17 20:11:19.397 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-17 20:11:25.573 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1986, output_tokens=189, cost=0.025530
2025-10-17 20:11:25.579 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-17 20:11:29.573 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=543, output_tokens=78, cost=0.007770
2025-10-17 20:11:29.575 | INFO     | Refactored invocation argument parsing gives different result on 'search_code("\\\\log")': old result is ['\\\\log'], new result  is ['\\log']
2025-10-17 20:11:29.575 | DEBUG    | Extracted a valid json.
2025-10-17 20:11:29.576 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_method(\"convertToLatex\")",
        "search_method(\"expressionToLatex\")",
        "search_class(\"LatexConverter\")",
        "search_class(\"MathToLatex\")",
        "search_code(\"toLatex\")",
        "search_code(\"\\\\log\")"
    ],
    "bug_locations": []
}
2025-10-17 20:11:29.622 | INFO     | Refactored invocation argument parsing gives different result on 'search_code("\\\\log")': old result is ['\\\\log'], new result  is ['\\log']
2025-10-17 20:11:29.657 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-17 20:11:29.658 | DEBUG    | <Agent search> Analyzing search results.
2025-10-17 20:11:42.675 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2884, output_tokens=573, cost=0.046030
2025-10-17 20:11:42.680 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-17 20:11:50.531 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3673, output_tokens=347, cost=0.047140
2025-10-17 20:11:50.539 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-17 20:11:55.425 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=701, output_tokens=155, cost=0.011660
2025-10-17 20:11:55.426 | DEBUG    | Extracted a valid json.
2025-10-17 20:11:55.426 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations":[
        {
            "file": "sympy/parsing/latex/_antlr/latexparser.py", 
            "class": "", 
            "method": "", 
            "intended_behavior": "The handling of `\\ln` and `\\log` within this parsing logic needs to ensure the correct interpretation of natural logarithm expressions."
        },
        {
            "file": "sympy/parsing/latex/_antlr/latexlexer.py", 
            "class": "", 
            "method": "", 
            "intended_behavior": "Ensure that the lexer correctly differentiates and tokenizes `\\ln` and `\\log` as separate entities without ambiguity."
        }
    ]
}
2025-10-17 20:11:55.435 | DEBUG    | Bug location extracted successfully: [<file>sympy/parsing/latex/_antlr/latexparser.py</file>
<class>None</class>
<method>None</method>
<code>
1 
2 # *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***
3 #
4 # Generated from ../LaTeX.g4, derived from latex2sympy
5 #     latex2sympy is licensed under the MIT license
6 #     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt
7 #
8 # Generated with antlr4
9 #    antlr4 is licensed under the BSD-3-Clause License
10 #    https://github.com/antlr/antlr4/blob/master/LICENSE.txt
11 from __future__ import print_function
12 from antlr4 import *
13 from io import StringIO
14 import sys
15 
16 def serializedATN():
17     with StringIO() as buf:
18         buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
19         buf.write(u";\u01a2\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t")
20         buf.write(u"\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
21         buf.write(u"\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4")
22         buf.write(u"\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30")
23         buf.write(u"\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t")
24         buf.write(u"\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$")
25         buf.write(u"\t$\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\7\3Q\n\3\f\3\16\3")
26         buf.write(u"T\13\3\3\4\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3")
27         buf.write(u"\6\7\6b\n\6\f\6\16\6e\13\6\3\7\3\7\3\7\3\7\3\7\3\7\7")
28         buf.write(u"\7m\n\7\f\7\16\7p\13\7\3\b\3\b\3\b\3\b\3\b\3\b\7\bx\n")
29         buf.write(u"\b\f\b\16\b{\13\b\3\t\3\t\3\t\6\t\u0080\n\t\r\t\16\t")
30         buf.write(u"\u0081\5\t\u0084\n\t\3\n\3\n\3\n\3\n\7\n\u008a\n\n\f")
31         buf.write(u"\n\16\n\u008d\13\n\5\n\u008f\n\n\3\13\3\13\7\13\u0093")
32         buf.write(u"\n\13\f\13\16\13\u0096\13\13\3\f\3\f\7\f\u009a\n\f\f")
33         buf.write(u"\f\16\f\u009d\13\f\3\r\3\r\5\r\u00a1\n\r\3\16\3\16\3")
34         buf.write(u"\16\3\16\3\16\3\16\5\16\u00a9\n\16\3\17\3\17\3\17\3\17")
35         buf.write(u"\5\17\u00af\n\17\3\17\3\17\3\20\3\20\3\20\3\20\5\20\u00b7")
36         buf.write(u"\n\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3")
37         buf.write(u"\21\3\21\3\21\5\21\u00c5\n\21\3\21\5\21\u00c8\n\21\7")
38         buf.write(u"\21\u00ca\n\21\f\21\16\21\u00cd\13\21\3\22\3\22\3\22")
39         buf.write(u"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u00d9\n\22\3")
40         buf.write(u"\22\5\22\u00dc\n\22\7\22\u00de\n\22\f\22\16\22\u00e1")
41         buf.write(u"\13\22\3\23\3\23\3\23\3\23\3\23\5\23\u00e8\n\23\3\24")
42         buf.write(u"\3\24\3\24\3\24\5\24\u00ee\n\24\3\25\3\25\3\25\3\25\3")
43         buf.write(u"\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u00fc\n\25")
44         buf.write(u"\3\26\3\26\3\26\3\26\3\27\3\27\5\27\u0104\n\27\3\27\3")
45         buf.write(u"\27\3\27\5\27\u0109\n\27\3\30\3\30\3\30\3\30\3\30\3\31")
46         buf.write(u"\7\31\u0111\n\31\f\31\16\31\u0114\13\31\3\32\3\32\3\32")
47         buf.write(u"\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\34\3\34\5\34\u0122")
48         buf.write(u"\n\34\3\34\5\34\u0125\n\34\3\34\5\34\u0128\n\34\3\34")
49         buf.write(u"\5\34\u012b\n\34\5\34\u012d\n\34\3\34\3\34\3\34\3\34")
50         buf.write(u"\3\34\5\34\u0134\n\34\3\34\3\34\5\34\u0138\n\34\3\34")
51         buf.write(u"\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5")
52         buf.write(u"\34\u0145\n\34\3\34\5\34\u0148\n\34\3\34\3\34\3\34\5")
53         buf.write(u"\34\u014d\n\34\3\34\3\34\3\34\3\34\3\34\5\34\u0154\n")
54         buf.write(u"\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
55         buf.write(u"\3\34\5\34\u0161\n\34\3\34\3\34\3\34\3\34\3\34\3\34\5")
56         buf.write(u"\34\u0169\n\34\3\35\3\35\3\35\3\35\3\35\5\35\u0170\n")
57         buf.write(u"\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36")
58         buf.write(u"\u017b\n\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\5\37\u0184")
59         buf.write(u"\n\37\3 \3 \3!\3!\3!\3!\3!\3!\5!\u018e\n!\3\"\3\"\3\"")
60         buf.write(u"\3\"\3\"\3\"\5\"\u0196\n\"\3#\3#\3#\3#\3#\3$\3$\3$\3")
61         buf.write(u"$\3$\3$\2\b\4\n\f\16 \"%\2\4\6\b\n\f\16\20\22\24\26\30")
62         buf.write(u"\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF\2\b\3\2\659\3")
63         buf.write(u"\2\5\6\5\2\7\b*,\61\61\4\2\63\63;;\3\2\25(\3\2\23\24")
64         buf.write(u"\2\u01b9\2H\3\2\2\2\4J\3\2\2\2\6U\3\2\2\2\bY\3\2\2\2")
65         buf.write(u"\n[\3\2\2\2\ff\3\2\2\2\16q\3\2\2\2\20\u0083\3\2\2\2\22")
66         buf.write(u"\u008e\3\2\2\2\24\u0090\3\2\2\2\26\u0097\3\2\2\2\30\u00a0")
67         buf.write(u"\3\2\2\2\32\u00a2\3\2\2\2\34\u00aa\3\2\2\2\36\u00b2\3")
68         buf.write(u"\2\2\2 \u00ba\3\2\2\2\"\u00ce\3\2\2\2$\u00e7\3\2\2\2")
69         buf.write(u"&\u00ed\3\2\2\2(\u00fb\3\2\2\2*\u00fd\3\2\2\2,\u0108")
70         buf.write(u"\3\2\2\2.\u010a\3\2\2\2\60\u0112\3\2\2\2\62\u0115\3\2")
71         buf.write(u"\2\2\64\u011d\3\2\2\2\66\u0168\3\2\2\28\u016f\3\2\2\2")
72         buf.write(u":\u0171\3\2\2\2<\u0183\3\2\2\2>\u0185\3\2\2\2@\u0187")
73         buf.write(u"\3\2\2\2B\u018f\3\2\2\2D\u0197\3\2\2\2F\u019c\3\2\2\2")
74         buf.write(u"HI\5\4\3\2I\3\3\2\2\2JK\b\3\1\2KL\5\b\5\2LR\3\2\2\2M")
75         buf.write(u"N\f\4\2\2NO\t\2\2\2OQ\5\4\3\5PM\3\2\2\2QT\3\2\2\2RP\3")
76         buf.write(u"\2\2\2RS\3\2\2\2S\5\3\2\2\2TR\3\2\2\2UV\5\b\5\2VW\7\65")
77         buf.write(u"\2\2WX\5\b\5\2X\7\3\2\2\2YZ\5\n\6\2Z\t\3\2\2\2[\\\b\6")
78         buf.write(u"\1\2\\]\5\f\7\2]c\3\2\2\2^_\f\4\2\2_`\t\3\2\2`b\5\n\6")
79         buf.write(u"\5a^\3\2\2\2be\3\2\2\2ca\3\2\2\2cd\3\2\2\2d\13\3\2\2")
80         buf.write(u"\2ec\3\2\2\2fg\b\7\1\2gh\5\20\t\2hn\3\2\2\2ij\f\4\2\2")
81         buf.write(u"jk\t\4\2\2km\5\f\7\5li\3\2\2\2mp\3\2\2\2nl\3\2\2\2no")
82         buf.write(u"\3\2\2\2o\r\3\2\2\2pn\3\2\2\2qr\b\b\1\2rs\5\22\n\2sy")
83         buf.write(u"\3\2\2\2tu\f\4\2\2uv\t\4\2\2vx\5\16\b\5wt\3\2\2\2x{\3")
84         buf.write(u"\2\2\2yw\3\2\2\2yz\3\2\2\2z\17\3\2\2\2{y\3\2\2\2|}\t")
85         buf.write(u"\3\2\2}\u0084\5\20\t\2~\u0080\5\24\13\2\177~\3\2\2\2")
86         buf.write(u"\u0080\u0081\3\2\2\2\u0081\177\3\2\2\2\u0081\u0082\3")
87         buf.write(u"\2\2\2\u0082\u0084\3\2\2\2\u0083|\3\2\2\2\u0083\177\3")
88         buf.write(u"\2\2\2\u0084\21\3\2\2\2\u0085\u0086\t\3\2\2\u0086\u008f")
89         buf.write(u"\5\22\n\2\u0087\u008b\5\24\13\2\u0088\u008a\5\26\f\2")
90         buf.write(u"\u0089\u0088\3\2\2\2\u008a\u008d\3\2\2\2\u008b\u0089")
91         buf.write(u"\3\2\2\2\u008b\u008c\3\2\2\2\u008c\u008f\3\2\2\2\u008d")
92         buf.write(u"\u008b\3\2\2\2\u008e\u0085\3\2\2\2\u008e\u0087\3\2\2")
93         buf.write(u"\2\u008f\23\3\2\2\2\u0090\u0094\5 \21\2\u0091\u0093\5")
94         buf.write(u"\30\r\2\u0092\u0091\3\2\2\2\u0093\u0096\3\2\2\2\u0094")
95         buf.write(u"\u0092\3\2\2\2\u0094\u0095\3\2\2\2\u0095\25\3\2\2\2\u0096")
96         buf.write(u"\u0094\3\2\2\2\u0097\u009b\5\"\22\2\u0098\u009a\5\30")
97         buf.write(u"\r\2\u0099\u0098\3\2\2\2\u009a\u009d\3\2\2\2\u009b\u0099")
98         buf.write(u"\3\2\2\2\u009b\u009c\3\2\2\2\u009c\27\3\2\2\2\u009d\u009b")
99         buf.write(u"\3\2\2\2\u009e\u00a1\7:\2\2\u009f\u00a1\5\32\16\2\u00a0")
100         buf.write(u"\u009e\3\2\2\2\u00a0\u009f\3\2\2\2\u00a1\31\3\2\2\2\u00a2")
101         buf.write(u"\u00a8\7\17\2\2\u00a3\u00a9\5\36\20\2\u00a4\u00a9\5\34")
102         buf.write(u"\17\2\u00a5\u00a6\5\36\20\2\u00a6\u00a7\5\34\17\2\u00a7")
103         buf.write(u"\u00a9\3\2\2\2\u00a8\u00a3\3\2\2\2\u00a8\u00a4\3\2\2")
104         buf.write(u"\2\u00a8\u00a5\3\2\2\2\u00a9\33\3\2\2\2\u00aa\u00ab\7")
105         buf.write(u"/\2\2\u00ab\u00ae\7\13\2\2\u00ac\u00af\5\b\5\2\u00ad")
106         buf.write(u"\u00af\5\6\4\2\u00ae\u00ac\3\2\2\2\u00ae\u00ad\3\2\2")
107         buf.write(u"\2\u00af\u00b0\3\2\2\2\u00b0\u00b1\7\f\2\2\u00b1\35\3")
108         buf.write(u"\2\2\2\u00b2\u00b3\7\60\2\2\u00b3\u00b6\7\13\2\2\u00b4")
109         buf.write(u"\u00b7\5\b\5\2\u00b5\u00b7\5\6\4\2\u00b6\u00b4\3\2\2")
110         buf.write(u"\2\u00b6\u00b5\3\2\2\2\u00b7\u00b8\3\2\2\2\u00b8\u00b9")
111         buf.write(u"\7\f\2\2\u00b9\37\3\2\2\2\u00ba\u00bb\b\21\1\2\u00bb")
112         buf.write(u"\u00bc\5$\23\2\u00bc\u00cb\3\2\2\2\u00bd\u00be\f\4\2")
113         buf.write(u"\2\u00be\u00c4\7\60\2\2\u00bf\u00c5\5,\27\2\u00c0\u00c1")
114         buf.write(u"\7\13\2\2\u00c1\u00c2\5\b\5\2\u00c2\u00c3\7\f\2\2\u00c3")
115         buf.write(u"\u00c5\3\2\2\2\u00c4\u00bf\3\2\2\2\u00c4\u00c0\3\2\2")
116         buf.write(u"\2\u00c5\u00c7\3\2\2\2\u00c6\u00c8\5@!\2\u00c7\u00c6")
117         buf.write(u"\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00ca\3\2\2\2\u00c9")
118         buf.write(u"\u00bd\3\2\2\2\u00ca\u00cd\3\2\2\2\u00cb\u00c9\3\2\2")
119         buf.write(u"\2\u00cb\u00cc\3\2\2\2\u00cc!\3\2\2\2\u00cd\u00cb\3\2")
120         buf.write(u"\2\2\u00ce\u00cf\b\22\1\2\u00cf\u00d0\5&\24\2\u00d0\u00df")
121         buf.write(u"\3\2\2\2\u00d1\u00d2\f\4\2\2\u00d2\u00d8\7\60\2\2\u00d3")
122         buf.write(u"\u00d9\5,\27\2\u00d4\u00d5\7\13\2\2\u00d5\u00d6\5\b\5")
123         buf.write(u"\2\u00d6\u00d7\7\f\2\2\u00d7\u00d9\3\2\2\2\u00d8\u00d3")
124         buf.write(u"\3\2\2\2\u00d8\u00d4\3\2\2\2\u00d9\u00db\3\2\2\2\u00da")
125         buf.write(u"\u00dc\5@!\2\u00db\u00da\3\2\2\2\u00db\u00dc\3\2\2\2")
126         buf.write(u"\u00dc\u00de\3\2\2\2\u00dd\u00d1\3\2\2\2\u00de\u00e1")
127         buf.write(u"\3\2\2\2\u00df\u00dd\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0")
128         buf.write(u"#\3\2\2\2\u00e1\u00df\3\2\2\2\u00e2\u00e8\5(\25\2\u00e3")
129         buf.write(u"\u00e8\5*\26\2\u00e4\u00e8\5\66\34\2\u00e5\u00e8\5,\27")
130         buf.write(u"\2\u00e6\u00e8\5\62\32\2\u00e7\u00e2\3\2\2\2\u00e7\u00e3")
131         buf.write(u"\3\2\2\2\u00e7\u00e4\3\2\2\2\u00e7\u00e5\3\2\2\2\u00e7")
132         buf.write(u"\u00e6\3\2\2\2\u00e8%\3\2\2\2\u00e9\u00ee\5(\25\2\u00ea")
133         buf.write(u"\u00ee\5*\26\2\u00eb\u00ee\5,\27\2\u00ec\u00ee\5\62\32")
134         buf.write(u"\2\u00ed\u00e9\3\2\2\2\u00ed\u00ea\3\2\2\2\u00ed\u00eb")
135         buf.write(u"\3\2\2\2\u00ed\u00ec\3\2\2\2\u00ee\'\3\2\2\2\u00ef\u00f0")
136         buf.write(u"\7\t\2\2\u00f0\u00f1\5\b\5\2\u00f1\u00f2\7\n\2\2\u00f2")
137         buf.write(u"\u00fc\3\2\2\2\u00f3\u00f4\7\r\2\2\u00f4\u00f5\5\b\5")
138         buf.write(u"\2\u00f5\u00f6\7\16\2\2\u00f6\u00fc\3\2\2\2\u00f7\u00f8")
139         buf.write(u"\7\13\2\2\u00f8\u00f9\5\b\5\2\u00f9\u00fa\7\f\2\2\u00fa")
140         buf.write(u"\u00fc\3\2\2\2\u00fb\u00ef\3\2\2\2\u00fb\u00f3\3\2\2")
141         buf.write(u"\2\u00fb\u00f7\3\2\2\2\u00fc)\3\2\2\2\u00fd\u00fe\7\17")
142         buf.write(u"\2\2\u00fe\u00ff\5\b\5\2\u00ff\u0100\7\17\2\2\u0100+")
143         buf.write(u"\3\2\2\2\u0101\u0103\t\5\2\2\u0102\u0104\5@!\2\u0103")
144         buf.write(u"\u0102\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u0109\3\2\2")
145         buf.write(u"\2\u0105\u0109\7\64\2\2\u0106\u0109\7\62\2\2\u0107\u0109")
146         buf.write(u"\5.\30\2\u0108\u0101\3\2\2\2\u0108\u0105\3\2\2\2\u0108")
147         buf.write(u"\u0106\3\2\2\2\u0108\u0107\3\2\2\2\u0109-\3\2\2\2\u010a")
148         buf.write(u"\u010b\7.\2\2\u010b\u010c\7\13\2\2\u010c\u010d\5\60\31")
149         buf.write(u"\2\u010d\u010e\7\f\2\2\u010e/\3\2\2\2\u010f\u0111\7\63")
150         buf.write(u"\2\2\u0110\u010f\3\2\2\2\u0111\u0114\3\2\2\2\u0112\u0110")
151         buf.write(u"\3\2\2\2\u0112\u0113\3\2\2\2\u0113\61\3\2\2\2\u0114\u0112")
152         buf.write(u"\3\2\2\2\u0115\u0116\7-\2\2\u0116\u0117\7\13\2\2\u0117")
153         buf.write(u"\u0118\5\b\5\2\u0118\u0119\7\f\2\2\u0119\u011a\7\13\2")
154         buf.write(u"\2\u011a\u011b\5\b\5\2\u011b\u011c\7\f\2\2\u011c\63\3")
155         buf.write(u"\2\2\2\u011d\u011e\t\6\2\2\u011e\65\3\2\2\2\u011f\u012c")
156         buf.write(u"\5\64\33\2\u0120\u0122\5@!\2\u0121\u0120\3\2\2\2\u0121")
157         buf.write(u"\u0122\3\2\2\2\u0122\u0124\3\2\2\2\u0123\u0125\5B\"\2")
158         buf.write(u"\u0124\u0123\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u012d")
159         buf.write(u"\3\2\2\2\u0126\u0128\5B\"\2\u0127\u0126\3\2\2\2\u0127")
160         buf.write(u"\u0128\3\2\2\2\u0128\u012a\3\2\2\2\u0129\u012b\5@!\2")
161         buf.write(u"\u012a\u0129\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u012d")
162         buf.write(u"\3\2\2\2\u012c\u0121\3\2\2\2\u012c\u0127\3\2\2\2\u012d")
163         buf.write(u"\u0133\3\2\2\2\u012e\u012f\7\t\2\2\u012f\u0130\5<\37")
164         buf.write(u"\2\u0130\u0131\7\n\2\2\u0131\u0134\3\2\2\2\u0132\u0134")
165         buf.write(u"\5> \2\u0133\u012e\3\2\2\2\u0133\u0132\3\2\2\2\u0134")
166         buf.write(u"\u0169\3\2\2\2\u0135\u0137\t\5\2\2\u0136\u0138\5@!\2")
167         buf.write(u"\u0137\u0136\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u0139")
168         buf.write(u"\3\2\2\2\u0139\u013a\7\t\2\2\u013a\u013b\58\35\2\u013b")
169         buf.write(u"\u013c\7\n\2\2\u013c\u0169\3\2\2\2\u013d\u0144\7\22\2")
170         buf.write(u"\2\u013e\u013f\5@!\2\u013f\u0140\5B\"\2\u0140\u0145\3")
171         buf.write(u"\2\2\2\u0141\u0142\5B\"\2\u0142\u0143\5@!\2\u0143\u0145")
172         buf.write(u"\3\2\2\2\u0144\u013e\3\2\2\2\u0144\u0141\3\2\2\2\u0144")
173         buf.write(u"\u0145\3\2\2\2\u0145\u014c\3\2\2\2\u0146\u0148\5\n\6")
174         buf.write(u"\2\u0147\u0146\3\2\2\2\u0147\u0148\3\2\2\2\u0148\u0149")
175         buf.write(u"\3\2\2\2\u0149\u014d\7\62\2\2\u014a\u014d\5\62\32\2\u014b")
176         buf.write(u"\u014d\5\n\6\2\u014c\u0147\3\2\2\2\u014c\u014a\3\2\2")
177         buf.write(u"\2\u014c\u014b\3\2\2\2\u014d\u0169\3\2\2\2\u014e\u0153")
178         buf.write(u"\7)\2\2\u014f\u0150\7\r\2\2\u0150\u0151\5\b\5\2\u0151")
179         buf.write(u"\u0152\7\16\2\2\u0152\u0154\3\2\2\2\u0153\u014f\3\2\2")
180         buf.write(u"\2\u0153\u0154\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u0156")
181         buf.write(u"\7\13\2\2\u0156\u0157\5\b\5\2\u0157\u0158\7\f\2\2\u0158")
182         buf.write(u"\u0169\3\2\2\2\u0159\u0160\t\7\2\2\u015a\u015b\5D#\2")
183         buf.write(u"\u015b\u015c\5B\"\2\u015c\u0161\3\2\2\2\u015d\u015e\5")
184         buf.write(u"B\"\2\u015e\u015f\5D#\2\u015f\u0161\3\2\2\2\u0160\u015a")
185         buf.write(u"\3\2\2\2\u0160\u015d\3\2\2\2\u0161\u0162\3\2\2\2\u0162")
186         buf.write(u"\u0163\5\f\7\2\u0163\u0169\3\2\2\2\u0164\u0165\7\20\2")
187         buf.write(u"\2\u0165\u0166\5:\36\2\u0166\u0167\5\f\7\2\u0167\u0169")
188         buf.write(u"\3\2\2\2\u0168\u011f\3\2\2\2\u0168\u0135\3\2\2\2\u0168")
189         buf.write(u"\u013d\3\2\2\2\u0168\u014e\3\2\2\2\u0168\u0159\3\2\2")
190         buf.write(u"\2\u0168\u0164\3\2\2\2\u0169\67\3\2\2\2\u016a\u016b\5")
191         buf.write(u"\b\5\2\u016b\u016c\7\3\2\2\u016c\u016d\58\35\2\u016d")
192         buf.write(u"\u0170\3\2\2\2\u016e\u0170\5\b\5\2\u016f\u016a\3\2\2")
193         buf.write(u"\2\u016f\u016e\3\2\2\2\u01709\3\2\2\2\u0171\u0172\7/")
194         buf.write(u"\2\2\u0172\u0173\7\13\2\2\u0173\u0174\t\5\2\2\u0174\u0175")
195         buf.write(u"\7\21\2\2\u0175\u017a\5\b\5\2\u0176\u0177\7\60\2\2\u0177")
196         buf.write(u"\u0178\7\13\2\2\u0178\u0179\t\3\2\2\u0179\u017b\7\f\2")
197         buf.write(u"\2\u017a\u0176\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017c")
198         buf.write(u"\3\2\2\2\u017c\u017d\7\f\2\2\u017d;\3\2\2\2\u017e\u0184")
199         buf.write(u"\5\b\5\2\u017f\u0180\5\b\5\2\u0180\u0181\7\3\2\2\u0181")
200         buf.write(u"\u0182\5<\37\2\u0182\u0184\3\2\2\2\u0183\u017e\3\2\2")
201         buf.write(u"\2\u0183\u017f\3\2\2\2\u0184=\3\2\2\2\u0185\u0186\5\16")
202         buf.write(u"\b\2\u0186?\3\2\2\2\u0187\u018d\7/\2\2\u0188\u018e\5")
203         buf.write(u",\27\2\u0189\u018a\7\13\2\2\u018a\u018b\5\b\5\2\u018b")
204         buf.write(u"\u018c\7\f\2\2\u018c\u018e\3\2\2\2\u018d\u0188\3\2\2")
205         buf.write(u"\2\u018d\u0189\3\2\2\2\u018eA\3\2\2\2\u018f\u0195\7\60")
206         buf.write(u"\2\2\u0190\u0196\5,\27\2\u0191\u0192\7\13\2\2\u0192\u0193")
207         buf.write(u"\5\b\5\2\u0193\u0194\7\f\2\2\u0194\u0196\3\2\2\2\u0195")
208         buf.write(u"\u0190\3\2\2\2\u0195\u0191\3\2\2\2\u0196C\3\2\2\2\u0197")
209         buf.write(u"\u0198\7/\2\2\u0198\u0199\7\13\2\2\u0199\u019a\5\6\4")
210         buf.write(u"\2\u019a\u019b\7\f\2\2\u019bE\3\2\2\2\u019c\u019d\7/")
211         buf.write(u"\2\2\u019d\u019e\7\13\2\2\u019e\u019f\5\6\4\2\u019f\u01a0")
212         buf.write(u"\7\f\2\2\u01a0G\3\2\2\2.Rcny\u0081\u0083\u008b\u008e")
213         buf.write(u"\u0094\u009b\u00a0\u00a8\u00ae\u00b6\u00c4\u00c7\u00cb")
214         buf.write(u"\u00d8\u00db\u00df\u00e7\u00ed\u00fb\u0103\u0108\u0112")
215         buf.write(u"\u0121\u0124\u0127\u012a\u012c\u0133\u0137\u0144\u0147")
216         buf.write(u"\u014c\u0153\u0160\u0168\u016f\u017a\u0183\u018d\u0195")
217         return buf.getvalue()
218 
219 
220 class LaTeXParser ( Parser ):
221 
222     grammarFileName = "LaTeX.g4"
223 
224     atn = ATNDeserializer().deserialize(serializedATN())
225 
226     decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]
227 
228     sharedContextCache = PredictionContextCache()
229 
230     literalNames = [ u"<INVALID>", u"','", u"<INVALID>", u"'+'", u"'-'",
231                      u"'*'", u"'/'", u"'('", u"')'", u"'{'", u"'}'", u"'['",
232                      u"']'", u"'|'", u"'\\lim'", u"<INVALID>", u"'\\int'",
233                      u"'\\sum'", u"'\\prod'", u"'\\log'", u"'\\ln'", u"'\\sin'",
234                      u"'\\cos'", u"'\\tan'", u"'\\csc'", u"'\\sec'", u"'\\cot'",
235                      u"'\\arcsin'", u"'\\arccos'", u"'\\arctan'", u"'\\arccsc'",
236                      u"'\\arcsec'", u"'\\arccot'", u"'\\sinh'", u"'\\cosh'",
237                      u"'\\tanh'", u"'\\arsinh'", u"'\\arcosh'", u"'\\artanh'",
238                      u"'\\sqrt'", u"'\\times'", u"'\\cdot'", u"'\\div'",
239                      u"'\\frac'", u"'\\mathit'", u"'_'", u"'^'", u"':'",
240                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"'='", u"'<'",
241                      u"'\\leq'", u"'>'", u"'\\geq'", u"'!'" ]
242 
243     symbolicNames = [ u"<INVALID>", u"<INVALID>", u"WS", u"ADD", u"SUB",
244                       u"MUL", u"DIV", u"L_PAREN", u"R_PAREN", u"L_BRACE",
245                       u"R_BRACE", u"L_BRACKET", u"R_BRACKET", u"BAR", u"FUNC_LIM",
246                       u"LIM_APPROACH_SYM", u"FUNC_INT", u"FUNC_SUM", u"FUNC_PROD",
247                       u"FUNC_LOG", u"FUNC_LN", u"FUNC_SIN", u"FUNC_COS",
248                       u"FUNC_TAN", u"FUNC_CSC", u"FUNC_SEC", u"FUNC_COT",
249                       u"FUNC_ARCSIN", u"FUNC_ARCCOS", u"FUNC_ARCTAN", u"FUNC_ARCCSC",
250                       u"FUNC_ARCSEC", u"FUNC_ARCCOT", u"FUNC_SINH", u"FUNC_COSH",
251                       u"FUNC_TANH", u"FUNC_ARSINH", u"FUNC_ARCOSH", u"FUNC_ARTANH",
252                       u"FUNC_SQRT", u"CMD_TIMES", u"CMD_CDOT", u"CMD_DIV",
253                       u"CMD_FRAC", u"CMD_MATHIT", u"UNDERSCORE", u"CARET",
254                       u"COLON", u"DIFFERENTIAL", u"LETTER", u"NUMBER", u"EQUAL",
255                       u"LT", u"LTE", u"GT", u"GTE", u"BANG", u"SYMBOL" ]
256 
257     RULE_math = 0
258     RULE_relation = 1
259     RULE_equality = 2
260     RULE_expr = 3
261     RULE_additive = 4
262     RULE_mp = 5
263     RULE_mp_nofunc = 6
264     RULE_unary = 7
265     RULE_unary_nofunc = 8
266     RULE_postfix = 9
267     RULE_postfix_nofunc = 10
268     RULE_postfix_op = 11
269     RULE_eval_at = 12
270     RULE_eval_at_sub = 13
271     RULE_eval_at_sup = 14
272     RULE_exp = 15
273     RULE_exp_nofunc = 16
274     RULE_comp = 17
275     RULE_comp_nofunc = 18
276     RULE_group = 19
277     RULE_abs_group = 20
278     RULE_atom = 21
279     RULE_mathit = 22
280     RULE_mathit_text = 23
281     RULE_frac = 24
282     RULE_func_normal = 25
283     RULE_func = 26
284     RULE_args = 27
285     RULE_limit_sub = 28
286     RULE_func_arg = 29
287     RULE_func_arg_noparens = 30
288     RULE_subexpr = 31
289     RULE_supexpr = 32
290     RULE_subeq = 33
291     RULE_supeq = 34
292 
293     ruleNames =  [ u"math", u"relation", u"equality", u"expr", u"additive",
294                    u"mp", u"mp_nofunc", u"unary", u"unary_nofunc", u"postfix",
295                    u"postfix_nofunc", u"postfix_op", u"eval_at", u"eval_at_sub",
296                    u"eval_at_sup", u"exp", u"exp_nofunc", u"comp", u"comp_nofunc",
297                    u"group", u"abs_group", u"atom", u"mathit", u"mathit_text",
298                    u"frac", u"func_normal", u"func", u"args", u"limit_sub",
299                    u"func_arg", u"func_arg_noparens", u"subexpr", u"supexpr",
300                    u"subeq", u"supeq" ]
301 
302     EOF = Token.EOF
303     T__0=1
304     WS=2
305     ADD=3
306     SUB=4
307     MUL=5
308     DIV=6
309     L_PAREN=7
310     R_PAREN=8
311     L_BRACE=9
312     R_BRACE=10
313     L_BRACKET=11
314     R_BRACKET=12
315     BAR=13
316     FUNC_LIM=14
317     LIM_APPROACH_SYM=15
318     FUNC_INT=16
319     FUNC_SUM=17
320     FUNC_PROD=18
321     FUNC_LOG=19
322     FUNC_LN=20
323     FUNC_SIN=21
324     FUNC_COS=22
325     FUNC_TAN=23
326     FUNC_CSC=24
327     FUNC_SEC=25
328     FUNC_COT=26
329     FUNC_ARCSIN=27
330     FUNC_ARCCOS=28
331     FUNC_ARCTAN=29
332     FUNC_ARCCSC=30
333     FUNC_ARCSEC=31
334     FUNC_ARCCOT=32
335     FUNC_SINH=33
336     FUNC_COSH=34
337     FUNC_TANH=35
338     FUNC_ARSINH=36
339     FUNC_ARCOSH=37
340     FUNC_ARTANH=38
341     FUNC_SQRT=39
342     CMD_TIMES=40
343     CMD_CDOT=41
344     CMD_DIV=42
345     CMD_FRAC=43
346     CMD_MATHIT=44
347     UNDERSCORE=45
348     CARET=46
349     COLON=47
350     DIFFERENTIAL=48
351     LETTER=49
352     NUMBER=50
353     EQUAL=51
354     LT=52
355     LTE=53
356     GT=54
357     GTE=55
358     BANG=56
359     SYMBOL=57
360 
361     def __init__(self, input, output=sys.stdout):
362         super(LaTeXParser, self).__init__(input, output=output)
363         self.checkVersion("4.7.1")
364         self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
365         self._predicates = None
366 
367 
368 
369     class MathContext(ParserRuleContext):
370 
371         def __init__(self, parser, parent=None, invokingState=-1):
372             super(LaTeXParser.MathContext, self).__init__(parent, invokingState)
373             self.parser = parser
374 
375         def relation(self):
376             return self.getTypedRuleContext(LaTeXParser.RelationContext,0)
377 
378 
379         def getRuleIndex(self):
380             return LaTeXParser.RULE_math
381 
382 
383 
384 
385     def math(self):
386 
387         localctx = LaTeXParser.MathContext(self, self._ctx, self.state)
388         self.enterRule(localctx, 0, self.RULE_math)
389         try:
390             self.enterOuterAlt(localctx, 1)
391             self.state = 70
392             self.relation(0)
393         except RecognitionException as re:
394             localctx.exception = re
395             self._errHandler.reportError(self, re)
396             self._errHandler.recover(self, re)
397         finally:
398             self.exitRule()
399         return localctx
400 
401     class RelationContext(ParserRuleContext):
402 
403         def __init__(self, parser, parent=None, invokingState=-1):
404             super(LaTeXParser.RelationContext, self).__init__(parent, invokingState)
405             self.parser = parser
406 
407         def expr(self):
408             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
409 
410 
411         def relation(self, i=None):
412             if i is None:
413                 return self.getTypedRuleContexts(LaTeXParser.RelationContext)
414             else:
415                 return self.getTypedRuleContext(LaTeXParser.RelationContext,i)
416 
417 
418         def EQUAL(self):
419             return self.getToken(LaTeXParser.EQUAL, 0)
420 
421         def LT(self):
422             return self.getToken(LaTeXParser.LT, 0)
423 
424         def LTE(self):
425             return self.getToken(LaTeXParser.LTE, 0)
426 
427         def GT(self):
428             return self.getToken(LaTeXParser.GT, 0)
429 
430         def GTE(self):
431             return self.getToken(LaTeXParser.GTE, 0)
432 
433         def getRuleIndex(self):
434             return LaTeXParser.RULE_relation
435 
436 
437 
438     def relation(self, _p=0):
439         _parentctx = self._ctx
440         _parentState = self.state
441         localctx = LaTeXParser.RelationContext(self, self._ctx, _parentState)
442         _prevctx = localctx
443         _startState = 2
444         self.enterRecursionRule(localctx, 2, self.RULE_relation, _p)
445         self._la = 0 # Token type
446         try:
447             self.enterOuterAlt(localctx, 1)
448             self.state = 73
449             self.expr()
450             self._ctx.stop = self._input.LT(-1)
451             self.state = 80
452             self._errHandler.sync(self)
453             _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
454             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
455                 if _alt==1:
456                     if self._parseListeners is not None:
457                         self.triggerExitRuleEvent()
458                     _prevctx = localctx
459                     localctx = LaTeXParser.RelationContext(self, _parentctx, _parentState)
460                     self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
461                     self.state = 75
462                     if not self.precpred(self._ctx, 2):
463                         from antlr4.error.Errors import FailedPredicateException
464                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
465                     self.state = 76
466                     _la = self._input.LA(1)
467                     if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.EQUAL) | (1 << LaTeXParser.LT) | (1 << LaTeXParser.LTE) | (1 << LaTeXParser.GT) | (1 << LaTeXParser.GTE))) != 0)):
468                         self._errHandler.recoverInline(self)
469                     else:
470                         self._errHandler.reportMatch(self)
471                         self.consume()
472                     self.state = 77
473                     self.relation(3)
474                 self.state = 82
475                 self._errHandler.sync(self)
476                 _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
477 
478         except RecognitionException as re:
479             localctx.exception = re
480             self._errHandler.reportError(self, re)
481             self._errHandler.recover(self, re)
482         finally:
483             self.unrollRecursionContexts(_parentctx)
484         return localctx
485 
486     class EqualityContext(ParserRuleContext):
487 
488         def __init__(self, parser, parent=None, invokingState=-1):
489             super(LaTeXParser.EqualityContext, self).__init__(parent, invokingState)
490             self.parser = parser
491 
492         def expr(self, i=None):
493             if i is None:
494                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
495             else:
496                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
497 
498 
499         def EQUAL(self):
500             return self.getToken(LaTeXParser.EQUAL, 0)
501 
502         def getRuleIndex(self):
503             return LaTeXParser.RULE_equality
504 
505 
506 
507 
508     def equality(self):
509 
510         localctx = LaTeXParser.EqualityContext(self, self._ctx, self.state)
511         self.enterRule(localctx, 4, self.RULE_equality)
512         try:
513             self.enterOuterAlt(localctx, 1)
514             self.state = 83
515             self.expr()
516             self.state = 84
517             self.match(LaTeXParser.EQUAL)
518             self.state = 85
519             self.expr()
520         except RecognitionException as re:
521             localctx.exception = re
522             self._errHandler.reportError(self, re)
523             self._errHandler.recover(self, re)
524         finally:
525             self.exitRule()
526         return localctx
527 
528     class ExprContext(ParserRuleContext):
529 
530         def __init__(self, parser, parent=None, invokingState=-1):
531             super(LaTeXParser.ExprContext, self).__init__(parent, invokingState)
532             self.parser = parser
533 
534         def additive(self):
535             return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)
536 
537 
538         def getRuleIndex(self):
539             return LaTeXParser.RULE_expr
540 
541 
542 
543 
544     def expr(self):
545 
546         localctx = LaTeXParser.ExprContext(self, self._ctx, self.state)
547         self.enterRule(localctx, 6, self.RULE_expr)
548         try:
549             self.enterOuterAlt(localctx, 1)
550             self.state = 87
551             self.additive(0)
552         except RecognitionException as re:
553             localctx.exception = re
554             self._errHandler.reportError(self, re)
555             self._errHandler.recover(self, re)
556         finally:
557             self.exitRule()
558         return localctx
559 
560     class AdditiveContext(ParserRuleContext):
561 
562         def __init__(self, parser, parent=None, invokingState=-1):
563             super(LaTeXParser.AdditiveContext, self).__init__(parent, invokingState)
564             self.parser = parser
565 
566         def mp(self):
567             return self.getTypedRuleContext(LaTeXParser.MpContext,0)
568 
569 
570         def additive(self, i=None):
571             if i is None:
572                 return self.getTypedRuleContexts(LaTeXParser.AdditiveContext)
573             else:
574                 return self.getTypedRuleContext(LaTeXParser.AdditiveContext,i)
575 
576 
577         def ADD(self):
578             return self.getToken(LaTeXParser.ADD, 0)
579 
580         def SUB(self):
581             return self.getToken(LaTeXParser.SUB, 0)
582 
583         def getRuleIndex(self):
584             return LaTeXParser.RULE_additive
585 
586 
587 
588     def additive(self, _p=0):
589         _parentctx = self._ctx
590         _parentState = self.state
591         localctx = LaTeXParser.AdditiveContext(self, self._ctx, _parentState)
592         _prevctx = localctx
593         _startState = 8
594         self.enterRecursionRule(localctx, 8, self.RULE_additive, _p)
595         self._la = 0 # Token type
596         try:
597             self.enterOuterAlt(localctx, 1)
598             self.state = 90
599             self.mp(0)
600             self._ctx.stop = self._input.LT(-1)
601             self.state = 97
602             self._errHandler.sync(self)
603             _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
604             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
605                 if _alt==1:
606                     if self._parseListeners is not None:
607                         self.triggerExitRuleEvent()
608                     _prevctx = localctx
609                     localctx = LaTeXParser.AdditiveContext(self, _parentctx, _parentState)
610                     self.pushNewRecursionContext(localctx, _startState, self.RULE_additive)
611                     self.state = 92
612                     if not self.precpred(self._ctx, 2):
613                         from antlr4.error.Errors import FailedPredicateException
614                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
615                     self.state = 93
616                     _la = self._input.LA(1)
617                     if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
618                         self._errHandler.recoverInline(self)
619                     else:
620                         self._errHandler.reportMatch(self)
621                         self.consume()
622                     self.state = 94
623                     self.additive(3)
624                 self.state = 99
625                 self._errHandler.sync(self)
626                 _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
627 
628         except RecognitionException as re:
629             localctx.exception = re
630             self._errHandler.reportError(self, re)
631             self._errHandler.recover(self, re)
632         finally:
633             self.unrollRecursionContexts(_parentctx)
634         return localctx
635 
636     class MpContext(ParserRuleContext):
637 
638         def __init__(self, parser, parent=None, invokingState=-1):
639             super(LaTeXParser.MpContext, self).__init__(parent, invokingState)
640             self.parser = parser
641 
642         def unary(self):
643             return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)
644 
645 
646         def mp(self, i=None):
647             if i is None:
648                 return self.getTypedRuleContexts(LaTeXParser.MpContext)
649             else:
650                 return self.getTypedRuleContext(LaTeXParser.MpContext,i)
651 
652 
653         def MUL(self):
654             return self.getToken(LaTeXParser.MUL, 0)
655 
656         def CMD_TIMES(self):
657             return self.getToken(LaTeXParser.CMD_TIMES, 0)
658 
659         def CMD_CDOT(self):
660             return self.getToken(LaTeXParser.CMD_CDOT, 0)
661 
662         def DIV(self):
663             return self.getToken(LaTeXParser.DIV, 0)
664 
665         def CMD_DIV(self):
666             return self.getToken(LaTeXParser.CMD_DIV, 0)
667 
668         def COLON(self):
669             return self.getToken(LaTeXParser.COLON, 0)
670 
671         def getRuleIndex(self):
672             return LaTeXParser.RULE_mp
673 
674 
675 
676     def mp(self, _p=0):
677         _parentctx = self._ctx
678         _parentState = self.state
679         localctx = LaTeXParser.MpContext(self, self._ctx, _parentState)
680         _prevctx = localctx
681         _startState = 10
682         self.enterRecursionRule(localctx, 10, self.RULE_mp, _p)
683         self._la = 0 # Token type
684         try:
685             self.enterOuterAlt(localctx, 1)
686             self.state = 101
687             self.unary()
688             self._ctx.stop = self._input.LT(-1)
689             self.state = 108
690             self._errHandler.sync(self)
691             _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
692             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
693                 if _alt==1:
694                     if self._parseListeners is not None:
695                         self.triggerExitRuleEvent()
696                     _prevctx = localctx
697                     localctx = LaTeXParser.MpContext(self, _parentctx, _parentState)
698                     self.pushNewRecursionContext(localctx, _startState, self.RULE_mp)
699                     self.state = 103
700                     if not self.precpred(self._ctx, 2):
701                         from antlr4.error.Errors import FailedPredicateException
702                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
703                     self.state = 104
704                     _la = self._input.LA(1)
705                     if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.MUL) | (1 << LaTeXParser.DIV) | (1 << LaTeXParser.CMD_TIMES) | (1 << LaTeXParser.CMD_CDOT) | (1 << LaTeXParser.CMD_DIV) | (1 << LaTeXParser.COLON))) != 0)):
706                         self._errHandler.recoverInline(self)
707                     else:
708                         self._errHandler.reportMatch(self)
709                         self.consume()
710                     self.state = 105
711                     self.mp(3)
712                 self.state = 110
713                 self._errHandler.sync(self)
714                 _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
715 
716         except RecognitionException as re:
717             localctx.exception = re
718             self._errHandler.reportError(self, re)
719             self._errHandler.recover(self, re)
720         finally:
721             self.unrollRecursionContexts(_parentctx)
722         return localctx
723 
724     class Mp_nofuncContext(ParserRuleContext):
725 
726         def __init__(self, parser, parent=None, invokingState=-1):
727             super(LaTeXParser.Mp_nofuncContext, self).__init__(parent, invokingState)
728             self.parser = parser
729 
730         def unary_nofunc(self):
731             return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)
732 
733 
734         def mp_nofunc(self, i=None):
735             if i is None:
736                 return self.getTypedRuleContexts(LaTeXParser.Mp_nofuncContext)
737             else:
738                 return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,i)
739 
740 
741         def MUL(self):
742             return self.getToken(LaTeXParser.MUL, 0)
743 
744         def CMD_TIMES(self):
745             return self.getToken(LaTeXParser.CMD_TIMES, 0)
746 
747         def CMD_CDOT(self):
748             return self.getToken(LaTeXParser.CMD_CDOT, 0)
749 
750         def DIV(self):
751             return self.getToken(LaTeXParser.DIV, 0)
752 
753         def CMD_DIV(self):
754             return self.getToken(LaTeXParser.CMD_DIV, 0)
755 
756         def COLON(self):
757             return self.getToken(LaTeXParser.COLON, 0)
758 
759         def getRuleIndex(self):
760             return LaTeXParser.RULE_mp_nofunc
761 
762 
763 
764     def mp_nofunc(self, _p=0):
765         _parentctx = self._ctx
766         _parentState = self.state
767         localctx = LaTeXParser.Mp_nofuncContext(self, self._ctx, _parentState)
768         _prevctx = localctx
769         _startState = 12
770         self.enterRecursionRule(localctx, 12, self.RULE_mp_nofunc, _p)
771         self._la = 0 # Token type
772         try:
773             self.enterOuterAlt(localctx, 1)
774             self.state = 112
775             self.unary_nofunc()
776             self._ctx.stop = self._input.LT(-1)
777             self.state = 119
778             self._errHandler.sync(self)
779             _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
780             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
781                 if _alt==1:
782                     if self._parseListeners is not None:
783                         self.triggerExitRuleEvent()
784                     _prevctx = localctx
785                     localctx = LaTeXParser.Mp_nofuncContext(self, _parentctx, _parentState)
786                     self.pushNewRecursionContext(localctx, _startState, self.RULE_mp_nofunc)
787                     self.state = 114
788                     if not self.precpred(self._ctx, 2):
789                         from antlr4.error.Errors import FailedPredicateException
790                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
791                     self.state = 115
792                     _la = self._input.LA(1)
793                     if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.MUL) | (1 << LaTeXParser.DIV) | (1 << LaTeXParser.CMD_TIMES) | (1 << LaTeXParser.CMD_CDOT) | (1 << LaTeXParser.CMD_DIV) | (1 << LaTeXParser.COLON))) != 0)):
794                         self._errHandler.recoverInline(self)
795                     else:
796                         self._errHandler.reportMatch(self)
797                         self.consume()
798                     self.state = 116
799                     self.mp_nofunc(3)
800                 self.state = 121
801                 self._errHandler.sync(self)
802                 _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
803 
804         except RecognitionException as re:
805             localctx.exception = re
806             self._errHandler.reportError(self, re)
807             self._errHandler.recover(self, re)
808         finally:
809             self.unrollRecursionContexts(_parentctx)
810         return localctx
811 
812     class UnaryContext(ParserRuleContext):
813 
814         def __init__(self, parser, parent=None, invokingState=-1):
815             super(LaTeXParser.UnaryContext, self).__init__(parent, invokingState)
816             self.parser = parser
817 
818         def unary(self):
819             return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)
820 
821 
822         def ADD(self):
823             return self.getToken(LaTeXParser.ADD, 0)
824 
825         def SUB(self):
826             return self.getToken(LaTeXParser.SUB, 0)
827 
828         def postfix(self, i=None):
829             if i is None:
830                 return self.getTypedRuleContexts(LaTeXParser.PostfixContext)
831             else:
832                 return self.getTypedRuleContext(LaTeXParser.PostfixContext,i)
833 
834 
835         def getRuleIndex(self):
836             return LaTeXParser.RULE_unary
837 
838 
839 
840 
841     def unary(self):
842 
843         localctx = LaTeXParser.UnaryContext(self, self._ctx, self.state)
844         self.enterRule(localctx, 14, self.RULE_unary)
845         self._la = 0 # Token type
846         try:
847             self.state = 129
848             self._errHandler.sync(self)
849             token = self._input.LA(1)
850             if token in [LaTeXParser.ADD, LaTeXParser.SUB]:
851                 self.enterOuterAlt(localctx, 1)
852                 self.state = 122
853                 _la = self._input.LA(1)
854                 if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
855                     self._errHandler.recoverInline(self)
856                 else:
857                     self._errHandler.reportMatch(self)
858                     self.consume()
859                 self.state = 123
860                 self.unary()
861                 pass
862             elif token in [LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.FUNC_SQRT, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
863                 self.enterOuterAlt(localctx, 2)
864                 self.state = 125
865                 self._errHandler.sync(self)
866                 _alt = 1
867                 while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
868                     if _alt == 1:
869                         self.state = 124
870                         self.postfix()
871 
872                     else:
873                         raise NoViableAltException(self)
874                     self.state = 127
875                     self._errHandler.sync(self)
876                     _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
877 
878                 pass
879             else:
880                 raise NoViableAltException(self)
881 
882         except RecognitionException as re:
883             localctx.exception = re
884             self._errHandler.reportError(self, re)
885             self._errHandler.recover(self, re)
886         finally:
887             self.exitRule()
888         return localctx
889 
890     class Unary_nofuncContext(ParserRuleContext):
891 
892         def __init__(self, parser, parent=None, invokingState=-1):
893             super(LaTeXParser.Unary_nofuncContext, self).__init__(parent, invokingState)
894             self.parser = parser
895 
896         def unary_nofunc(self):
897             return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)
898 
899 
900         def ADD(self):
901             return self.getToken(LaTeXParser.ADD, 0)
902 
903         def SUB(self):
904             return self.getToken(LaTeXParser.SUB, 0)
905 
906         def postfix(self):
907             return self.getTypedRuleContext(LaTeXParser.PostfixContext,0)
908 
909 
910         def postfix_nofunc(self, i=None):
911             if i is None:
912                 return self.getTypedRuleContexts(LaTeXParser.Postfix_nofuncContext)
913             else:
914                 return self.getTypedRuleContext(LaTeXParser.Postfix_nofuncContext,i)
915 
916 
917         def getRuleIndex(self):
918             return LaTeXParser.RULE_unary_nofunc
919 
920 
921 
922 
923     def unary_nofunc(self):
924 
925         localctx = LaTeXParser.Unary_nofuncContext(self, self._ctx, self.state)
926         self.enterRule(localctx, 16, self.RULE_unary_nofunc)
927         self._la = 0 # Token type
928         try:
929             self.state = 140
930             self._errHandler.sync(self)
931             token = self._input.LA(1)
932             if token in [LaTeXParser.ADD, LaTeXParser.SUB]:
933                 self.enterOuterAlt(localctx, 1)
934                 self.state = 131
935                 _la = self._input.LA(1)
936                 if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
937                     self._errHandler.recoverInline(self)
938                 else:
939                     self._errHandler.reportMatch(self)
940                     self.consume()
941                 self.state = 132
942                 self.unary_nofunc()
943                 pass
944             elif token in [LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.FUNC_SQRT, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
945                 self.enterOuterAlt(localctx, 2)
946                 self.state = 133
947                 self.postfix()
948                 self.state = 137
949                 self._errHandler.sync(self)
950                 _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
951                 while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
952                     if _alt==1:
953                         self.state = 134
954                         self.postfix_nofunc()
955                     self.state = 139
956                     self._errHandler.sync(self)
957                     _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
958 
959                 pass
960             else:
961                 raise NoViableAltException(self)
962 
963         except RecognitionException as re:
964             localctx.exception = re
965             self._errHandler.reportError(self, re)
966             self._errHandler.recover(self, re)
967         finally:
968             self.exitRule()
969         return localctx
970 
971     class PostfixContext(ParserRuleContext):
972 
973         def __init__(self, parser, parent=None, invokingState=-1):
974             super(LaTeXParser.PostfixContext, self).__init__(parent, invokingState)
975             self.parser = parser
976 
977         def exp(self):
978             return self.getTypedRuleContext(LaTeXParser.ExpContext,0)
979 
980 
981         def postfix_op(self, i=None):
982             if i is None:
983                 return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
984             else:
985                 return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)
986 
987 
988         def getRuleIndex(self):
989             return LaTeXParser.RULE_postfix
990 
991 
992 
993 
994     def postfix(self):
995 
996         localctx = LaTeXParser.PostfixContext(self, self._ctx, self.state)
997         self.enterRule(localctx, 18, self.RULE_postfix)
998         try:
999             self.enterOuterAlt(localctx, 1)
1000             self.state = 142
1001             self.exp(0)
1002             self.state = 146
1003             self._errHandler.sync(self)
1004             _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
1005             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1006                 if _alt==1:
1007                     self.state = 143
1008                     self.postfix_op()
1009                 self.state = 148
1010                 self._errHandler.sync(self)
1011                 _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
1012 
1013         except RecognitionException as re:
1014             localctx.exception = re
1015             self._errHandler.reportError(self, re)
1016             self._errHandler.recover(self, re)
1017         finally:
1018             self.exitRule()
1019         return localctx
1020 
1021     class Postfix_nofuncContext(ParserRuleContext):
1022 
1023         def __init__(self, parser, parent=None, invokingState=-1):
1024             super(LaTeXParser.Postfix_nofuncContext, self).__init__(parent, invokingState)
1025             self.parser = parser
1026 
1027         def exp_nofunc(self):
1028             return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)
1029 
1030 
1031         def postfix_op(self, i=None):
1032             if i is None:
1033                 return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
1034             else:
1035                 return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)
1036 
1037 
1038         def getRuleIndex(self):
1039             return LaTeXParser.RULE_postfix_nofunc
1040 
1041 
1042 
1043 
1044     def postfix_nofunc(self):
1045 
1046         localctx = LaTeXParser.Postfix_nofuncContext(self, self._ctx, self.state)
1047         self.enterRule(localctx, 20, self.RULE_postfix_nofunc)
1048         try:
1049             self.enterOuterAlt(localctx, 1)
1050             self.state = 149
1051             self.exp_nofunc(0)
1052             self.state = 153
1053             self._errHandler.sync(self)
1054             _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
1055             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1056                 if _alt==1:
1057                     self.state = 150
1058                     self.postfix_op()
1059                 self.state = 155
1060                 self._errHandler.sync(self)
1061                 _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
1062 
1063         except RecognitionException as re:
1064             localctx.exception = re
1065             self._errHandler.reportError(self, re)
1066             self._errHandler.recover(self, re)
1067         finally:
1068             self.exitRule()
1069         return localctx
1070 
1071     class Postfix_opContext(ParserRuleContext):
1072 
1073         def __init__(self, parser, parent=None, invokingState=-1):
1074             super(LaTeXParser.Postfix_opContext, self).__init__(parent, invokingState)
1075             self.parser = parser
1076 
1077         def BANG(self):
1078             return self.getToken(LaTeXParser.BANG, 0)
1079 
1080         def eval_at(self):
1081             return self.getTypedRuleContext(LaTeXParser.Eval_atContext,0)
1082 
1083 
1084         def getRuleIndex(self):
1085             return LaTeXParser.RULE_postfix_op
1086 
1087 
1088 
1089 
1090     def postfix_op(self):
1091 
1092         localctx = LaTeXParser.Postfix_opContext(self, self._ctx, self.state)
1093         self.enterRule(localctx, 22, self.RULE_postfix_op)
1094         try:
1095             self.state = 158
1096             self._errHandler.sync(self)
1097             token = self._input.LA(1)
1098             if token in [LaTeXParser.BANG]:
1099                 self.enterOuterAlt(localctx, 1)
1100                 self.state = 156
1101                 self.match(LaTeXParser.BANG)
1102                 pass
1103             elif token in [LaTeXParser.BAR]:
1104                 self.enterOuterAlt(localctx, 2)
1105                 self.state = 157
1106                 self.eval_at()
1107                 pass
1108             else:
1109                 raise NoViableAltException(self)
1110 
1111         except RecognitionException as re:
1112             localctx.exception = re
1113             self._errHandler.reportError(self, re)
1114             self._errHandler.recover(self, re)
1115         finally:
1116             self.exitRule()
1117         return localctx
1118 
1119     class Eval_atContext(ParserRuleContext):
1120 
1121         def __init__(self, parser, parent=None, invokingState=-1):
1122             super(LaTeXParser.Eval_atContext, self).__init__(parent, invokingState)
1123             self.parser = parser
1124 
1125         def BAR(self):
1126             return self.getToken(LaTeXParser.BAR, 0)
1127 
1128         def eval_at_sup(self):
1129             return self.getTypedRuleContext(LaTeXParser.Eval_at_supContext,0)
1130 
1131 
1132         def eval_at_sub(self):
1133             return self.getTypedRuleContext(LaTeXParser.Eval_at_subContext,0)
1134 
1135 
1136         def getRuleIndex(self):
1137             return LaTeXParser.RULE_eval_at
1138 
1139 
1140 
1141 
1142     def eval_at(self):
1143 
1144         localctx = LaTeXParser.Eval_atContext(self, self._ctx, self.state)
1145         self.enterRule(localctx, 24, self.RULE_eval_at)
1146         try:
1147             self.enterOuterAlt(localctx, 1)
1148             self.state = 160
1149             self.match(LaTeXParser.BAR)
1150             self.state = 166
1151             self._errHandler.sync(self)
1152             la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
1153             if la_ == 1:
1154                 self.state = 161
1155                 self.eval_at_sup()
1156                 pass
1157 
1158             elif la_ == 2:
1159                 self.state = 162
1160                 self.eval_at_sub()
1161                 pass
1162 
1163             elif la_ == 3:
1164                 self.state = 163
1165                 self.eval_at_sup()
1166                 self.state = 164
1167                 self.eval_at_sub()
1168                 pass
1169 
1170 
1171         except RecognitionException as re:
1172             localctx.exception = re
1173             self._errHandler.reportError(self, re)
1174             self._errHandler.recover(self, re)
1175         finally:
1176             self.exitRule()
1177         return localctx
1178 
1179     class Eval_at_subContext(ParserRuleContext):
1180 
1181         def __init__(self, parser, parent=None, invokingState=-1):
1182             super(LaTeXParser.Eval_at_subContext, self).__init__(parent, invokingState)
1183             self.parser = parser
1184 
1185         def UNDERSCORE(self):
1186             return self.getToken(LaTeXParser.UNDERSCORE, 0)
1187 
1188         def L_BRACE(self):
1189             return self.getToken(LaTeXParser.L_BRACE, 0)
1190 
1191         def R_BRACE(self):
1192             return self.getToken(LaTeXParser.R_BRACE, 0)
1193 
1194         def expr(self):
1195             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1196 
1197 
1198         def equality(self):
1199             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
1200 
1201 
1202         def getRuleIndex(self):
1203             return LaTeXParser.RULE_eval_at_sub
1204 
1205 
1206 
1207 
1208     def eval_at_sub(self):
1209 
1210         localctx = LaTeXParser.Eval_at_subContext(self, self._ctx, self.state)
1211         self.enterRule(localctx, 26, self.RULE_eval_at_sub)
1212         try:
1213             self.enterOuterAlt(localctx, 1)
1214             self.state = 168
1215             self.match(LaTeXParser.UNDERSCORE)
1216             self.state = 169
1217             self.match(LaTeXParser.L_BRACE)
1218             self.state = 172
1219             self._errHandler.sync(self)
1220             la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
1221             if la_ == 1:
1222                 self.state = 170
1223                 self.expr()
1224                 pass
1225 
1226             elif la_ == 2:
1227                 self.state = 171
1228                 self.equality()
1229                 pass
1230 
1231 
1232             self.state = 174
1233             self.match(LaTeXParser.R_BRACE)
1234         except RecognitionException as re:
1235             localctx.exception = re
1236             self._errHandler.reportError(self, re)
1237             self._errHandler.recover(self, re)
1238         finally:
1239             self.exitRule()
1240         return localctx
1241 
1242     class Eval_at_supContext(ParserRuleContext):
1243 
1244         def __init__(self, parser, parent=None, invokingState=-1):
1245             super(LaTeXParser.Eval_at_supContext, self).__init__(parent, invokingState)
1246             self.parser = parser
1247 
1248         def CARET(self):
1249             return self.getToken(LaTeXParser.CARET, 0)
1250 
1251         def L_BRACE(self):
1252             return self.getToken(LaTeXParser.L_BRACE, 0)
1253 
1254         def R_BRACE(self):
1255             return self.getToken(LaTeXParser.R_BRACE, 0)
1256 
1257         def expr(self):
1258             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1259 
1260 
1261         def equality(self):
1262             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
1263 
1264 
1265         def getRuleIndex(self):
1266             return LaTeXParser.RULE_eval_at_sup
1267 
1268 
1269 
1270 
1271     def eval_at_sup(self):
1272 
1273         localctx = LaTeXParser.Eval_at_supContext(self, self._ctx, self.state)
1274         self.enterRule(localctx, 28, self.RULE_eval_at_sup)
1275         try:
1276             self.enterOuterAlt(localctx, 1)
1277             self.state = 176
1278             self.match(LaTeXParser.CARET)
1279             self.state = 177
1280             self.match(LaTeXParser.L_BRACE)
1281             self.state = 180
1282             self._errHandler.sync(self)
1283             la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
1284             if la_ == 1:
1285                 self.state = 178
1286                 self.expr()
1287                 pass
1288 
1289             elif la_ == 2:
1290                 self.state = 179
1291                 self.equality()
1292                 pass
1293 
1294 
1295             self.state = 182
1296             self.match(LaTeXParser.R_BRACE)
1297         except RecognitionException as re:
1298             localctx.exception = re
1299             self._errHandler.reportError(self, re)
1300             self._errHandler.recover(self, re)
1301         finally:
1302             self.exitRule()
1303         return localctx
1304 
1305     class ExpContext(ParserRuleContext):
1306 
1307         def __init__(self, parser, parent=None, invokingState=-1):
1308             super(LaTeXParser.ExpContext, self).__init__(parent, invokingState)
1309             self.parser = parser
1310 
1311         def comp(self):
1312             return self.getTypedRuleContext(LaTeXParser.CompContext,0)
1313 
1314 
1315         def exp(self):
1316             return self.getTypedRuleContext(LaTeXParser.ExpContext,0)
1317 
1318 
1319         def CARET(self):
1320             return self.getToken(LaTeXParser.CARET, 0)
1321 
1322         def atom(self):
1323             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
1324 
1325 
1326         def L_BRACE(self):
1327             return self.getToken(LaTeXParser.L_BRACE, 0)
1328 
1329         def expr(self):
1330             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1331 
1332 
1333         def R_BRACE(self):
1334             return self.getToken(LaTeXParser.R_BRACE, 0)
1335 
1336         def subexpr(self):
1337             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
1338 
1339 
1340         def getRuleIndex(self):
1341             return LaTeXParser.RULE_exp
1342 
1343 
1344 
1345     def exp(self, _p=0):
1346         _parentctx = self._ctx
1347         _parentState = self.state
1348         localctx = LaTeXParser.ExpContext(self, self._ctx, _parentState)
1349         _prevctx = localctx
1350         _startState = 30
1351         self.enterRecursionRule(localctx, 30, self.RULE_exp, _p)
1352         try:
1353             self.enterOuterAlt(localctx, 1)
1354             self.state = 185
1355             self.comp()
1356             self._ctx.stop = self._input.LT(-1)
1357             self.state = 201
1358             self._errHandler.sync(self)
1359             _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
1360             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1361                 if _alt==1:
1362                     if self._parseListeners is not None:
1363                         self.triggerExitRuleEvent()
1364                     _prevctx = localctx
1365                     localctx = LaTeXParser.ExpContext(self, _parentctx, _parentState)
1366                     self.pushNewRecursionContext(localctx, _startState, self.RULE_exp)
1367                     self.state = 187
1368                     if not self.precpred(self._ctx, 2):
1369                         from antlr4.error.Errors import FailedPredicateException
1370                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
1371                     self.state = 188
1372                     self.match(LaTeXParser.CARET)
1373                     self.state = 194
1374                     self._errHandler.sync(self)
1375                     token = self._input.LA(1)
1376                     if token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
1377                         self.state = 189
1378                         self.atom()
1379                         pass
1380                     elif token in [LaTeXParser.L_BRACE]:
1381                         self.state = 190
1382                         self.match(LaTeXParser.L_BRACE)
1383                         self.state = 191
1384                         self.expr()
1385                         self.state = 192
1386                         self.match(LaTeXParser.R_BRACE)
1387                         pass
1388                     else:
1389                         raise NoViableAltException(self)
1390 
1391                     self.state = 197
1392                     self._errHandler.sync(self)
1393                     la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
1394                     if la_ == 1:
1395                         self.state = 196
1396                         self.subexpr()
1397 
1398 
1399                 self.state = 203
1400                 self._errHandler.sync(self)
1401                 _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
1402 
1403         except RecognitionException as re:
1404             localctx.exception = re
1405             self._errHandler.reportError(self, re)
1406             self._errHandler.recover(self, re)
1407         finally:
1408             self.unrollRecursionContexts(_parentctx)
1409         return localctx
1410 
1411     class Exp_nofuncContext(ParserRuleContext):
1412 
1413         def __init__(self, parser, parent=None, invokingState=-1):
1414             super(LaTeXParser.Exp_nofuncContext, self).__init__(parent, invokingState)
1415             self.parser = parser
1416 
1417         def comp_nofunc(self):
1418             return self.getTypedRuleContext(LaTeXParser.Comp_nofuncContext,0)
1419 
1420 
1421         def exp_nofunc(self):
1422             return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)
1423 
1424 
1425         def CARET(self):
1426             return self.getToken(LaTeXParser.CARET, 0)
1427 
1428         def atom(self):
1429             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
1430 
1431 
1432         def L_BRACE(self):
1433             return self.getToken(LaTeXParser.L_BRACE, 0)
1434 
1435         def expr(self):
1436             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1437 
1438 
1439         def R_BRACE(self):
1440             return self.getToken(LaTeXParser.R_BRACE, 0)
1441 
1442         def subexpr(self):
1443             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
1444 
1445 
1446         def getRuleIndex(self):
1447             return LaTeXParser.RULE_exp_nofunc
1448 
1449 
1450 
1451     def exp_nofunc(self, _p=0):
1452         _parentctx = self._ctx
1453         _parentState = self.state
1454         localctx = LaTeXParser.Exp_nofuncContext(self, self._ctx, _parentState)
1455         _prevctx = localctx
1456         _startState = 32
1457         self.enterRecursionRule(localctx, 32, self.RULE_exp_nofunc, _p)
1458         try:
1459             self.enterOuterAlt(localctx, 1)
1460             self.state = 205
1461             self.comp_nofunc()
1462             self._ctx.stop = self._input.LT(-1)
1463             self.state = 221
1464             self._errHandler.sync(self)
1465             _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
1466             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1467                 if _alt==1:
1468                     if self._parseListeners is not None:
1469                         self.triggerExitRuleEvent()
1470                     _prevctx = localctx
1471                     localctx = LaTeXParser.Exp_nofuncContext(self, _parentctx, _parentState)
1472                     self.pushNewRecursionContext(localctx, _startState, self.RULE_exp_nofunc)
1473                     self.state = 207
1474                     if not self.precpred(self._ctx, 2):
1475                         from antlr4.error.Errors import FailedPredicateException
1476                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
1477                     self.state = 208
1478                     self.match(LaTeXParser.CARET)
1479                     self.state = 214
1480                     self._errHandler.sync(self)
1481                     token = self._input.LA(1)
1482                     if token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
1483                         self.state = 209
1484                         self.atom()
1485                         pass
1486                     elif token in [LaTeXParser.L_BRACE]:
1487                         self.state = 210
1488                         self.match(LaTeXParser.L_BRACE)
1489                         self.state = 211
1490                         self.expr()
1491                         self.state = 212
1492                         self.match(LaTeXParser.R_BRACE)
1493                         pass
1494                     else:
1495                         raise NoViableAltException(self)
1496 
1497                     self.state = 217
1498                     self._errHandler.sync(self)
1499                     la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
1500                     if la_ == 1:
1501                         self.state = 216
1502                         self.subexpr()
1503 
1504 
1505                 self.state = 223
1506                 self._errHandler.sync(self)
1507                 _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
1508 
1509         except RecognitionException as re:
1510             localctx.exception = re
1511             self._errHandler.reportError(self, re)
1512             self._errHandler.recover(self, re)
1513         finally:
1514             self.unrollRecursionContexts(_parentctx)
1515         return localctx
1516 
1517     class CompContext(ParserRuleContext):
1518 
1519         def __init__(self, parser, parent=None, invokingState=-1):
1520             super(LaTeXParser.CompContext, self).__init__(parent, invokingState)
1521             self.parser = parser
1522 
1523         def group(self):
1524             return self.getTypedRuleContext(LaTeXParser.GroupContext,0)
1525 
1526 
1527         def abs_group(self):
1528             return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)
1529 
1530 
1531         def func(self):
1532             return self.getTypedRuleContext(LaTeXParser.FuncContext,0)
1533 
1534 
1535         def atom(self):
1536             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
1537 
1538 
1539         def frac(self):
1540             return self.getTypedRuleContext(LaTeXParser.FracContext,0)
1541 
1542 
1543         def getRuleIndex(self):
1544             return LaTeXParser.RULE_comp
1545 
1546 
1547 
1548 
1549     def comp(self):
1550 
1551         localctx = LaTeXParser.CompContext(self, self._ctx, self.state)
1552         self.enterRule(localctx, 34, self.RULE_comp)
1553         try:
1554             self.state = 229
1555             self._errHandler.sync(self)
1556             la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
1557             if la_ == 1:
1558                 self.enterOuterAlt(localctx, 1)
1559                 self.state = 224
1560                 self.group()
1561                 pass
1562 
1563             elif la_ == 2:
1564                 self.enterOuterAlt(localctx, 2)
1565                 self.state = 225
1566                 self.abs_group()
1567                 pass
1568 
1569             elif la_ == 3:
1570                 self.enterOuterAlt(localctx, 3)
1571                 self.state = 226
1572                 self.func()
1573                 pass
1574 
1575             elif la_ == 4:
1576                 self.enterOuterAlt(localctx, 4)
1577                 self.state = 227
1578                 self.atom()
1579                 pass
1580 
1581             elif la_ == 5:
1582                 self.enterOuterAlt(localctx, 5)
1583                 self.state = 228
1584                 self.frac()
1585                 pass
1586 
1587 
1588         except RecognitionException as re:
1589             localctx.exception = re
1590             self._errHandler.reportError(self, re)
1591             self._errHandler.recover(self, re)
1592         finally:
1593             self.exitRule()
1594         return localctx
1595 
1596     class Comp_nofuncContext(ParserRuleContext):
1597 
1598         def __init__(self, parser, parent=None, invokingState=-1):
1599             super(LaTeXParser.Comp_nofuncContext, self).__init__(parent, invokingState)
1600             self.parser = parser
1601 
1602         def group(self):
1603             return self.getTypedRuleContext(LaTeXParser.GroupContext,0)
1604 
1605 
1606         def abs_group(self):
1607             return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)
1608 
1609 
1610         def atom(self):
1611             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
1612 
1613 
1614         def frac(self):
1615             return self.getTypedRuleContext(LaTeXParser.FracContext,0)
1616 
1617 
1618         def getRuleIndex(self):
1619             return LaTeXParser.RULE_comp_nofunc
1620 
1621 
1622 
1623 
1624     def comp_nofunc(self):
1625 
1626         localctx = LaTeXParser.Comp_nofuncContext(self, self._ctx, self.state)
1627         self.enterRule(localctx, 36, self.RULE_comp_nofunc)
1628         try:
1629             self.state = 235
1630             self._errHandler.sync(self)
1631             token = self._input.LA(1)
1632             if token in [LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACKET]:
1633                 self.enterOuterAlt(localctx, 1)
1634                 self.state = 231
1635                 self.group()
1636                 pass
1637             elif token in [LaTeXParser.BAR]:
1638                 self.enterOuterAlt(localctx, 2)
1639                 self.state = 232
1640                 self.abs_group()
1641                 pass
1642             elif token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
1643                 self.enterOuterAlt(localctx, 3)
1644                 self.state = 233
1645                 self.atom()
1646                 pass
1647             elif token in [LaTeXParser.CMD_FRAC]:
1648                 self.enterOuterAlt(localctx, 4)
1649                 self.state = 234
1650                 self.frac()
1651                 pass
1652             else:
1653                 raise NoViableAltException(self)
1654 
1655         except RecognitionException as re:
1656             localctx.exception = re
1657             self._errHandler.reportError(self, re)
1658             self._errHandler.recover(self, re)
1659         finally:
1660             self.exitRule()
1661         return localctx
1662 
1663     class GroupContext(ParserRuleContext):
1664 
1665         def __init__(self, parser, parent=None, invokingState=-1):
1666             super(LaTeXParser.GroupContext, self).__init__(parent, invokingState)
1667             self.parser = parser
1668 
1669         def L_PAREN(self):
1670             return self.getToken(LaTeXParser.L_PAREN, 0)
1671 
1672         def expr(self):
1673             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1674 
1675 
1676         def R_PAREN(self):
1677             return self.getToken(LaTeXParser.R_PAREN, 0)
1678 
1679         def L_BRACKET(self):
1680             return self.getToken(LaTeXParser.L_BRACKET, 0)
1681 
1682         def R_BRACKET(self):
1683             return self.getToken(LaTeXParser.R_BRACKET, 0)
1684 
1685         def L_BRACE(self):
1686             return self.getToken(LaTeXParser.L_BRACE, 0)
1687 
1688         def R_BRACE(self):
1689             return self.getToken(LaTeXParser.R_BRACE, 0)
1690 
1691         def getRuleIndex(self):
1692             return LaTeXParser.RULE_group
1693 
1694 
1695 
1696 
1697     def group(self):
1698 
1699         localctx = LaTeXParser.GroupContext(self, self._ctx, self.state)
1700         self.enterRule(localctx, 38, self.RULE_group)
1701         try:
1702             self.state = 249
1703             self._errHandler.sync(self)
1704             token = self._input.LA(1)
1705             if token in [LaTeXParser.L_PAREN]:
1706                 self.enterOuterAlt(localctx, 1)
1707                 self.state = 237
1708                 self.match(LaTeXParser.L_PAREN)
1709                 self.state = 238
1710                 self.expr()
1711                 self.state = 239
1712                 self.match(LaTeXParser.R_PAREN)
1713                 pass
1714             elif token in [LaTeXParser.L_BRACKET]:
1715                 self.enterOuterAlt(localctx, 2)
1716                 self.state = 241
1717                 self.match(LaTeXParser.L_BRACKET)
1718                 self.state = 242
1719                 self.expr()
1720                 self.state = 243
1721                 self.match(LaTeXParser.R_BRACKET)
1722                 pass
1723             elif token in [LaTeXParser.L_BRACE]:
1724                 self.enterOuterAlt(localctx, 3)
1725                 self.state = 245
1726                 self.match(LaTeXParser.L_BRACE)
1727                 self.state = 246
1728                 self.expr()
1729                 self.state = 247
1730                 self.match(LaTeXParser.R_BRACE)
1731                 pass
1732             else:
1733                 raise NoViableAltException(self)
1734 
1735         except RecognitionException as re:
1736             localctx.exception = re
1737             self._errHandler.reportError(self, re)
1738             self._errHandler.recover(self, re)
1739         finally:
1740             self.exitRule()
1741         return localctx
1742 
1743     class Abs_groupContext(ParserRuleContext):
1744 
1745         def __init__(self, parser, parent=None, invokingState=-1):
1746             super(LaTeXParser.Abs_groupContext, self).__init__(parent, invokingState)
1747             self.parser = parser
1748 
1749         def BAR(self, i=None):
1750             if i is None:
1751                 return self.getTokens(LaTeXParser.BAR)
1752             else:
1753                 return self.getToken(LaTeXParser.BAR, i)
1754 
1755         def expr(self):
1756             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1757 
1758 
1759         def getRuleIndex(self):
1760             return LaTeXParser.RULE_abs_group
1761 
1762 
1763 
1764 
1765     def abs_group(self):
1766 
1767         localctx = LaTeXParser.Abs_groupContext(self, self._ctx, self.state)
1768         self.enterRule(localctx, 40, self.RULE_abs_group)
1769         try:
1770             self.enterOuterAlt(localctx, 1)
1771             self.state = 251
1772             self.match(LaTeXParser.BAR)
1773             self.state = 252
1774             self.expr()
1775             self.state = 253
1776             self.match(LaTeXParser.BAR)
1777         except RecognitionException as re:
1778             localctx.exception = re
1779             self._errHandler.reportError(self, re)
1780             self._errHandler.recover(self, re)
1781         finally:
1782             self.exitRule()
1783         return localctx
1784 
1785     class AtomContext(ParserRuleContext):
1786 
1787         def __init__(self, parser, parent=None, invokingState=-1):
1788             super(LaTeXParser.AtomContext, self).__init__(parent, invokingState)
1789             self.parser = parser
1790 
1791         def LETTER(self):
1792             return self.getToken(LaTeXParser.LETTER, 0)
1793 
1794         def SYMBOL(self):
1795             return self.getToken(LaTeXParser.SYMBOL, 0)
1796 
1797         def subexpr(self):
1798             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
1799 
1800 
1801         def NUMBER(self):
1802             return self.getToken(LaTeXParser.NUMBER, 0)
1803 
1804         def DIFFERENTIAL(self):
1805             return self.getToken(LaTeXParser.DIFFERENTIAL, 0)
1806 
1807         def mathit(self):
1808             return self.getTypedRuleContext(LaTeXParser.MathitContext,0)
1809 
1810 
1811         def getRuleIndex(self):
1812             return LaTeXParser.RULE_atom
1813 
1814 
1815 
1816 
1817     def atom(self):
1818 
1819         localctx = LaTeXParser.AtomContext(self, self._ctx, self.state)
1820         self.enterRule(localctx, 42, self.RULE_atom)
1821         self._la = 0 # Token type
1822         try:
1823             self.state = 262
1824             self._errHandler.sync(self)
1825             token = self._input.LA(1)
1826             if token in [LaTeXParser.LETTER, LaTeXParser.SYMBOL]:
1827                 self.enterOuterAlt(localctx, 1)
1828                 self.state = 255
1829                 _la = self._input.LA(1)
1830                 if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
1831                     self._errHandler.recoverInline(self)
1832                 else:
1833                     self._errHandler.reportMatch(self)
1834                     self.consume()
1835                 self.state = 257
1836                 self._errHandler.sync(self)
1837                 la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
1838                 if la_ == 1:
1839                     self.state = 256
1840                     self.subexpr()
1841 
1842 
1843                 pass
1844             elif token in [LaTeXParser.NUMBER]:
1845                 self.enterOuterAlt(localctx, 2)
1846                 self.state = 259
1847                 self.match(LaTeXParser.NUMBER)
1848                 pass
1849             elif token in [LaTeXParser.DIFFERENTIAL]:
1850                 self.enterOuterAlt(localctx, 3)
1851                 self.state = 260
1852                 self.match(LaTeXParser.DIFFERENTIAL)
1853                 pass
1854             elif token in [LaTeXParser.CMD_MATHIT]:
1855                 self.enterOuterAlt(localctx, 4)
1856                 self.state = 261
1857                 self.mathit()
1858                 pass
1859             else:
1860                 raise NoViableAltException(self)
1861 
1862         except RecognitionException as re:
1863             localctx.exception = re
1864             self._errHandler.reportError(self, re)
1865             self._errHandler.recover(self, re)
1866         finally:
1867             self.exitRule()
1868         return localctx
1869 
1870     class MathitContext(ParserRuleContext):
1871 
1872         def __init__(self, parser, parent=None, invokingState=-1):
1873             super(LaTeXParser.MathitContext, self).__init__(parent, invokingState)
1874             self.parser = parser
1875 
1876         def CMD_MATHIT(self):
1877             return self.getToken(LaTeXParser.CMD_MATHIT, 0)
1878 
1879         def L_BRACE(self):
1880             return self.getToken(LaTeXParser.L_BRACE, 0)
1881 
1882         def mathit_text(self):
1883             return self.getTypedRuleContext(LaTeXParser.Mathit_textContext,0)
1884 
1885 
1886         def R_BRACE(self):
1887             return self.getToken(LaTeXParser.R_BRACE, 0)
1888 
1889         def getRuleIndex(self):
1890             return LaTeXParser.RULE_mathit
1891 
1892 
1893 
1894 
1895     def mathit(self):
1896 
1897         localctx = LaTeXParser.MathitContext(self, self._ctx, self.state)
1898         self.enterRule(localctx, 44, self.RULE_mathit)
1899         try:
1900             self.enterOuterAlt(localctx, 1)
1901             self.state = 264
1902             self.match(LaTeXParser.CMD_MATHIT)
1903             self.state = 265
1904             self.match(LaTeXParser.L_BRACE)
1905             self.state = 266
1906             self.mathit_text()
1907             self.state = 267
1908             self.match(LaTeXParser.R_BRACE)
1909         except RecognitionException as re:
1910             localctx.exception = re
1911             self._errHandler.reportError(self, re)
1912             self._errHandler.recover(self, re)
1913         finally:
1914             self.exitRule()
1915         return localctx
1916 
1917     class Mathit_textContext(ParserRuleContext):
1918 
1919         def __init__(self, parser, parent=None, invokingState=-1):
1920             super(LaTeXParser.Mathit_textContext, self).__init__(parent, invokingState)
1921             self.parser = parser
1922 
1923         def LETTER(self, i=None):
1924             if i is None:
1925                 return self.getTokens(LaTeXParser.LETTER)
1926             else:
1927                 return self.getToken(LaTeXParser.LETTER, i)
1928 
1929         def getRuleIndex(self):
1930             return LaTeXParser.RULE_mathit_text
1931 
1932 
1933 
1934 
1935     def mathit_text(self):
1936 
1937         localctx = LaTeXParser.Mathit_textContext(self, self._ctx, self.state)
1938         self.enterRule(localctx, 46, self.RULE_mathit_text)
1939         self._la = 0 # Token type
1940         try:
1941             self.enterOuterAlt(localctx, 1)
1942             self.state = 272
1943             self._errHandler.sync(self)
1944             _la = self._input.LA(1)
1945             while _la==LaTeXParser.LETTER:
1946                 self.state = 269
1947                 self.match(LaTeXParser.LETTER)
1948                 self.state = 274
1949                 self._errHandler.sync(self)
1950                 _la = self._input.LA(1)
1951 
1952         except RecognitionException as re:
1953             localctx.exception = re
1954             self._errHandler.reportError(self, re)
1955             self._errHandler.recover(self, re)
1956         finally:
1957             self.exitRule()
1958         return localctx
1959 
1960     class FracContext(ParserRuleContext):
1961 
1962         def __init__(self, parser, parent=None, invokingState=-1):
1963             super(LaTeXParser.FracContext, self).__init__(parent, invokingState)
1964             self.parser = parser
1965             self.upper = None # ExprContext
1966             self.lower = None # ExprContext
1967 
1968         def CMD_FRAC(self):
1969             return self.getToken(LaTeXParser.CMD_FRAC, 0)
1970 
1971         def L_BRACE(self, i=None):
1972             if i is None:
1973                 return self.getTokens(LaTeXParser.L_BRACE)
1974             else:
1975                 return self.getToken(LaTeXParser.L_BRACE, i)
1976 
1977         def R_BRACE(self, i=None):
1978             if i is None:
1979                 return self.getTokens(LaTeXParser.R_BRACE)
1980             else:
1981                 return self.getToken(LaTeXParser.R_BRACE, i)
1982 
1983         def expr(self, i=None):
1984             if i is None:
1985                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
1986             else:
1987                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
1988 
1989 
1990         def getRuleIndex(self):
1991             return LaTeXParser.RULE_frac
1992 
1993 
1994 
1995 
1996     def frac(self):
1997 
1998         localctx = LaTeXParser.FracContext(self, self._ctx, self.state)
1999         self.enterRule(localctx, 48, self.RULE_frac)
2000         try:
2001             self.enterOuterAlt(localctx, 1)
2002             self.state = 275
2003             self.match(LaTeXParser.CMD_FRAC)
2004             self.state = 276
2005             self.match(LaTeXParser.L_BRACE)
2006             self.state = 277
2007             localctx.upper = self.expr()
2008             self.state = 278
2009             self.match(LaTeXParser.R_BRACE)
2010             self.state = 279
2011             self.match(LaTeXParser.L_BRACE)
2012             self.state = 280
2013             localctx.lower = self.expr()
2014             self.state = 281
2015             self.match(LaTeXParser.R_BRACE)
2016         except RecognitionException as re:
2017             localctx.exception = re
2018             self._errHandler.reportError(self, re)
2019             self._errHandler.recover(self, re)
2020         finally:
2021             self.exitRule()
2022         return localctx
2023 
2024     class Func_normalContext(ParserRuleContext):
2025 
2026         def __init__(self, parser, parent=None, invokingState=-1):
2027             super(LaTeXParser.Func_normalContext, self).__init__(parent, invokingState)
2028             self.parser = parser
2029 
2030         def FUNC_LOG(self):
2031             return self.getToken(LaTeXParser.FUNC_LOG, 0)
2032 
2033         def FUNC_LN(self):
2034             return self.getToken(LaTeXParser.FUNC_LN, 0)
2035 
2036         def FUNC_SIN(self):
2037             return self.getToken(LaTeXParser.FUNC_SIN, 0)
2038 
2039         def FUNC_COS(self):
2040             return self.getToken(LaTeXParser.FUNC_COS, 0)
2041 
2042         def FUNC_TAN(self):
2043             return self.getToken(LaTeXParser.FUNC_TAN, 0)
2044 
2045         def FUNC_CSC(self):
2046             return self.getToken(LaTeXParser.FUNC_CSC, 0)
2047 
2048         def FUNC_SEC(self):
2049             return self.getToken(LaTeXParser.FUNC_SEC, 0)
2050 
2051         def FUNC_COT(self):
2052             return self.getToken(LaTeXParser.FUNC_COT, 0)
2053 
2054         def FUNC_ARCSIN(self):
2055             return self.getToken(LaTeXParser.FUNC_ARCSIN, 0)
2056 
2057         def FUNC_ARCCOS(self):
2058             return self.getToken(LaTeXParser.FUNC_ARCCOS, 0)
2059 
2060         def FUNC_ARCTAN(self):
2061             return self.getToken(LaTeXParser.FUNC_ARCTAN, 0)
2062 
2063         def FUNC_ARCCSC(self):
2064             return self.getToken(LaTeXParser.FUNC_ARCCSC, 0)
2065 
2066         def FUNC_ARCSEC(self):
2067             return self.getToken(LaTeXParser.FUNC_ARCSEC, 0)
2068 
2069         def FUNC_ARCCOT(self):
2070             return self.getToken(LaTeXParser.FUNC_ARCCOT, 0)
2071 
2072         def FUNC_SINH(self):
2073             return self.getToken(LaTeXParser.FUNC_SINH, 0)
2074 
2075         def FUNC_COSH(self):
2076             return self.getToken(LaTeXParser.FUNC_COSH, 0)
2077 
2078         def FUNC_TANH(self):
2079             return self.getToken(LaTeXParser.FUNC_TANH, 0)
2080 
2081         def FUNC_ARSINH(self):
2082             return self.getToken(LaTeXParser.FUNC_ARSINH, 0)
2083 
2084         def FUNC_ARCOSH(self):
2085             return self.getToken(LaTeXParser.FUNC_ARCOSH, 0)
2086 
2087         def FUNC_ARTANH(self):
2088             return self.getToken(LaTeXParser.FUNC_ARTANH, 0)
2089 
2090         def getRuleIndex(self):
2091             return LaTeXParser.RULE_func_normal
2092 
2093 
2094 
2095 
2096     def func_normal(self):
2097 
2098         localctx = LaTeXParser.Func_normalContext(self, self._ctx, self.state)
2099         self.enterRule(localctx, 50, self.RULE_func_normal)
2100         self._la = 0 # Token type
2101         try:
2102             self.enterOuterAlt(localctx, 1)
2103             self.state = 283
2104             _la = self._input.LA(1)
2105             if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.FUNC_LOG) | (1 << LaTeXParser.FUNC_LN) | (1 << LaTeXParser.FUNC_SIN) | (1 << LaTeXParser.FUNC_COS) | (1 << LaTeXParser.FUNC_TAN) | (1 << LaTeXParser.FUNC_CSC) | (1 << LaTeXParser.FUNC_SEC) | (1 << LaTeXParser.FUNC_COT) | (1 << LaTeXParser.FUNC_ARCSIN) | (1 << LaTeXParser.FUNC_ARCCOS) | (1 << LaTeXParser.FUNC_ARCTAN) | (1 << LaTeXParser.FUNC_ARCCSC) | (1 << LaTeXParser.FUNC_ARCSEC) | (1 << LaTeXParser.FUNC_ARCCOT) | (1 << LaTeXParser.FUNC_SINH) | (1 << LaTeXParser.FUNC_COSH) | (1 << LaTeXParser.FUNC_TANH) | (1 << LaTeXParser.FUNC_ARSINH) | (1 << LaTeXParser.FUNC_ARCOSH) | (1 << LaTeXParser.FUNC_ARTANH))) != 0)):
2106                 self._errHandler.recoverInline(self)
2107             else:
2108                 self._errHandler.reportMatch(self)
2109                 self.consume()
2110         except RecognitionException as re:
2111             localctx.exception = re
2112             self._errHandler.reportError(self, re)
2113             self._errHandler.recover(self, re)
2114         finally:
2115             self.exitRule()
2116         return localctx
2117 
2118     class FuncContext(ParserRuleContext):
2119 
2120         def __init__(self, parser, parent=None, invokingState=-1):
2121             super(LaTeXParser.FuncContext, self).__init__(parent, invokingState)
2122             self.parser = parser
2123             self.root = None # ExprContext
2124             self.base = None # ExprContext
2125 
2126         def func_normal(self):
2127             return self.getTypedRuleContext(LaTeXParser.Func_normalContext,0)
2128 
2129 
2130         def L_PAREN(self):
2131             return self.getToken(LaTeXParser.L_PAREN, 0)
2132 
2133         def func_arg(self):
2134             return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)
2135 
2136 
2137         def R_PAREN(self):
2138             return self.getToken(LaTeXParser.R_PAREN, 0)
2139 
2140         def func_arg_noparens(self):
2141             return self.getTypedRuleContext(LaTeXParser.Func_arg_noparensContext,0)
2142 
2143 
2144         def subexpr(self):
2145             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
2146 
2147 
2148         def supexpr(self):
2149             return self.getTypedRuleContext(LaTeXParser.SupexprContext,0)
2150 
2151 
2152         def args(self):
2153             return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)
2154 
2155 
2156         def LETTER(self):
2157             return self.getToken(LaTeXParser.LETTER, 0)
2158 
2159         def SYMBOL(self):
2160             return self.getToken(LaTeXParser.SYMBOL, 0)
2161 
2162         def FUNC_INT(self):
2163             return self.getToken(LaTeXParser.FUNC_INT, 0)
2164 
2165         def DIFFERENTIAL(self):
2166             return self.getToken(LaTeXParser.DIFFERENTIAL, 0)
2167 
2168         def frac(self):
2169             return self.getTypedRuleContext(LaTeXParser.FracContext,0)
2170 
2171 
2172         def additive(self):
2173             return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)
2174 
2175 
2176         def FUNC_SQRT(self):
2177             return self.getToken(LaTeXParser.FUNC_SQRT, 0)
2178 
2179         def L_BRACE(self):
2180             return self.getToken(LaTeXParser.L_BRACE, 0)
2181 
2182         def R_BRACE(self):
2183             return self.getToken(LaTeXParser.R_BRACE, 0)
2184 
2185         def expr(self, i=None):
2186             if i is None:
2187                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
2188             else:
2189                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
2190 
2191 
2192         def L_BRACKET(self):
2193             return self.getToken(LaTeXParser.L_BRACKET, 0)
2194 
2195         def R_BRACKET(self):
2196             return self.getToken(LaTeXParser.R_BRACKET, 0)
2197 
2198         def mp(self):
2199             return self.getTypedRuleContext(LaTeXParser.MpContext,0)
2200 
2201 
2202         def FUNC_SUM(self):
2203             return self.getToken(LaTeXParser.FUNC_SUM, 0)
2204 
2205         def FUNC_PROD(self):
2206             return self.getToken(LaTeXParser.FUNC_PROD, 0)
2207 
2208         def subeq(self):
2209             return self.getTypedRuleContext(LaTeXParser.SubeqContext,0)
2210 
2211 
2212         def FUNC_LIM(self):
2213             return self.getToken(LaTeXParser.FUNC_LIM, 0)
2214 
2215         def limit_sub(self):
2216             return self.getTypedRuleContext(LaTeXParser.Limit_subContext,0)
2217 
2218 
2219         def getRuleIndex(self):
2220             return LaTeXParser.RULE_func
2221 
2222 
2223 
2224 
2225     def func(self):
2226 
2227         localctx = LaTeXParser.FuncContext(self, self._ctx, self.state)
2228         self.enterRule(localctx, 52, self.RULE_func)
2229         self._la = 0 # Token type
2230         try:
2231             self.state = 358
2232             self._errHandler.sync(self)
2233             token = self._input.LA(1)
2234             if token in [LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH]:
2235                 self.enterOuterAlt(localctx, 1)
2236                 self.state = 285
2237                 self.func_normal()
2238                 self.state = 298
2239                 self._errHandler.sync(self)
2240                 la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
2241                 if la_ == 1:
2242                     self.state = 287
2243                     self._errHandler.sync(self)
2244                     _la = self._input.LA(1)
2245                     if _la==LaTeXParser.UNDERSCORE:
2246                         self.state = 286
2247                         self.subexpr()
2248 
2249 
2250                     self.state = 290
2251                     self._errHandler.sync(self)
2252                     _la = self._input.LA(1)
2253                     if _la==LaTeXParser.CARET:
2254                         self.state = 289
2255                         self.supexpr()
2256 
2257 
2258                     pass
2259 
2260                 elif la_ == 2:
2261                     self.state = 293
2262                     self._errHandler.sync(self)
2263                     _la = self._input.LA(1)
2264                     if _la==LaTeXParser.CARET:
2265                         self.state = 292
2266                         self.supexpr()
2267 
2268 
2269                     self.state = 296
2270                     self._errHandler.sync(self)
2271                     _la = self._input.LA(1)
2272                     if _la==LaTeXParser.UNDERSCORE:
2273                         self.state = 295
2274                         self.subexpr()
2275 
2276 
2277                     pass
2278 
2279 
2280                 self.state = 305
2281                 self._errHandler.sync(self)
2282                 la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
2283                 if la_ == 1:
2284                     self.state = 300
2285                     self.match(LaTeXParser.L_PAREN)
2286                     self.state = 301
2287                     self.func_arg()
2288                     self.state = 302
2289                     self.match(LaTeXParser.R_PAREN)
2290                     pass
2291 
2292                 elif la_ == 2:
2293                     self.state = 304
2294                     self.func_arg_noparens()
2295                     pass
2296 
2297 
2298                 pass
2299             elif token in [LaTeXParser.LETTER, LaTeXParser.SYMBOL]:
2300                 self.enterOuterAlt(localctx, 2)
2301                 self.state = 307
2302                 _la = self._input.LA(1)
2303                 if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
2304                     self._errHandler.recoverInline(self)
2305                 else:
2306                     self._errHandler.reportMatch(self)
2307                     self.consume()
2308                 self.state = 309
2309                 self._errHandler.sync(self)
2310                 _la = self._input.LA(1)
2311                 if _la==LaTeXParser.UNDERSCORE:
2312                     self.state = 308
2313                     self.subexpr()
2314 
2315 
2316                 self.state = 311
2317                 self.match(LaTeXParser.L_PAREN)
2318                 self.state = 312
2319                 self.args()
2320                 self.state = 313
2321                 self.match(LaTeXParser.R_PAREN)
2322                 pass
2323             elif token in [LaTeXParser.FUNC_INT]:
2324                 self.enterOuterAlt(localctx, 3)
2325                 self.state = 315
2326                 self.match(LaTeXParser.FUNC_INT)
2327                 self.state = 322
2328                 self._errHandler.sync(self)
2329                 token = self._input.LA(1)
2330                 if token in [LaTeXParser.UNDERSCORE]:
2331                     self.state = 316
2332                     self.subexpr()
2333                     self.state = 317
2334                     self.supexpr()
2335                     pass
2336                 elif token in [LaTeXParser.CARET]:
2337                     self.state = 319
2338                     self.supexpr()
2339                     self.state = 320
2340                     self.subexpr()
2341                     pass
2342                 elif token in [LaTeXParser.ADD, LaTeXParser.SUB, LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.FUNC_SQRT, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
2343                     pass
2344                 else:
2345                     pass
2346                 self.state = 330
2347                 self._errHandler.sync(self)
2348                 la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
2349                 if la_ == 1:
2350                     self.state = 325
2351                     self._errHandler.sync(self)
2352                     la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
2353                     if la_ == 1:
2354                         self.state = 324
2355                         self.additive(0)
2356 
2357 
2358                     self.state = 327
2359                     self.match(LaTeXParser.DIFFERENTIAL)
2360                     pass
2361 
2362                 elif la_ == 2:
2363                     self.state = 328
2364                     self.frac()
2365                     pass
2366 
2367                 elif la_ == 3:
2368                     self.state = 329
2369                     self.additive(0)
2370                     pass
2371 
2372 
2373                 pass
2374             elif token in [LaTeXParser.FUNC_SQRT]:
2375                 self.enterOuterAlt(localctx, 4)
2376                 self.state = 332
2377                 self.match(LaTeXParser.FUNC_SQRT)
2378                 self.state = 337
2379                 self._errHandler.sync(self)
2380                 _la = self._input.LA(1)
2381                 if _la==LaTeXParser.L_BRACKET:
2382                     self.state = 333
2383                     self.match(LaTeXParser.L_BRACKET)
2384                     self.state = 334
2385                     localctx.root = self.expr()
2386                     self.state = 335
2387                     self.match(LaTeXParser.R_BRACKET)
2388 
2389 
2390                 self.state = 339
2391                 self.match(LaTeXParser.L_BRACE)
2392                 self.state = 340
2393                 localctx.base = self.expr()
2394                 self.state = 341
2395                 self.match(LaTeXParser.R_BRACE)
2396                 pass
2397             elif token in [LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD]:
2398                 self.enterOuterAlt(localctx, 5)
2399                 self.state = 343
2400                 _la = self._input.LA(1)
2401                 if not(_la==LaTeXParser.FUNC_SUM or _la==LaTeXParser.FUNC_PROD):
2402                     self._errHandler.recoverInline(self)
2403                 else:
2404                     self._errHandler.reportMatch(self)
2405                     self.consume()
2406                 self.state = 350
2407                 self._errHandler.sync(self)
2408                 token = self._input.LA(1)
2409                 if token in [LaTeXParser.UNDERSCORE]:
2410                     self.state = 344
2411                     self.subeq()
2412                     self.state = 345
2413                     self.supexpr()
2414                     pass
2415                 elif token in [LaTeXParser.CARET]:
2416                     self.state = 347
2417                     self.supexpr()
2418                     self.state = 348
2419                     self.subeq()
2420                     pass
2421                 else:
2422                     raise NoViableAltException(self)
2423 
2424                 self.state = 352
2425                 self.mp(0)
2426                 pass
2427             elif token in [LaTeXParser.FUNC_LIM]:
2428                 self.enterOuterAlt(localctx, 6)
2429                 self.state = 354
2430                 self.match(LaTeXParser.FUNC_LIM)
2431                 self.state = 355
2432                 self.limit_sub()
2433                 self.state = 356
2434                 self.mp(0)
2435                 pass
2436             else:
2437                 raise NoViableAltException(self)
2438 
2439         except RecognitionException as re:
2440             localctx.exception = re
2441             self._errHandler.reportError(self, re)
2442             self._errHandler.recover(self, re)
2443         finally:
2444             self.exitRule()
2445         return localctx
2446 
2447     class ArgsContext(ParserRuleContext):
2448 
2449         def __init__(self, parser, parent=None, invokingState=-1):
2450             super(LaTeXParser.ArgsContext, self).__init__(parent, invokingState)
2451             self.parser = parser
2452 
2453         def expr(self):
2454             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2455 
2456 
2457         def args(self):
2458             return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)
2459 
2460 
2461         def getRuleIndex(self):
2462             return LaTeXParser.RULE_args
2463 
2464 
2465 
2466 
2467     def args(self):
2468 
2469         localctx = LaTeXParser.ArgsContext(self, self._ctx, self.state)
2470         self.enterRule(localctx, 54, self.RULE_args)
2471         try:
2472             self.state = 365
2473             self._errHandler.sync(self)
2474             la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
2475             if la_ == 1:
2476                 self.enterOuterAlt(localctx, 1)
2477                 self.state = 360
2478                 self.expr()
2479                 self.state = 361
2480                 self.match(LaTeXParser.T__0)
2481                 self.state = 362
2482                 self.args()
2483                 pass
2484 
2485             elif la_ == 2:
2486                 self.enterOuterAlt(localctx, 2)
2487                 self.state = 364
2488                 self.expr()
2489                 pass
2490 
2491 
2492         except RecognitionException as re:
2493             localctx.exception = re
2494             self._errHandler.reportError(self, re)
2495             self._errHandler.recover(self, re)
2496         finally:
2497             self.exitRule()
2498         return localctx
2499 
2500     class Limit_subContext(ParserRuleContext):
2501 
2502         def __init__(self, parser, parent=None, invokingState=-1):
2503             super(LaTeXParser.Limit_subContext, self).__init__(parent, invokingState)
2504             self.parser = parser
2505 
2506         def UNDERSCORE(self):
2507             return self.getToken(LaTeXParser.UNDERSCORE, 0)
2508 
2509         def L_BRACE(self, i=None):
2510             if i is None:
2511                 return self.getTokens(LaTeXParser.L_BRACE)
2512             else:
2513                 return self.getToken(LaTeXParser.L_BRACE, i)
2514 
2515         def LIM_APPROACH_SYM(self):
2516             return self.getToken(LaTeXParser.LIM_APPROACH_SYM, 0)
2517 
2518         def expr(self):
2519             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2520 
2521 
2522         def R_BRACE(self, i=None):
2523             if i is None:
2524                 return self.getTokens(LaTeXParser.R_BRACE)
2525             else:
2526                 return self.getToken(LaTeXParser.R_BRACE, i)
2527 
2528         def LETTER(self):
2529             return self.getToken(LaTeXParser.LETTER, 0)
2530 
2531         def SYMBOL(self):
2532             return self.getToken(LaTeXParser.SYMBOL, 0)
2533 
2534         def CARET(self):
2535             return self.getToken(LaTeXParser.CARET, 0)
2536 
2537         def ADD(self):
2538             return self.getToken(LaTeXParser.ADD, 0)
2539 
2540         def SUB(self):
2541             return self.getToken(LaTeXParser.SUB, 0)
2542 
2543         def getRuleIndex(self):
2544             return LaTeXParser.RULE_limit_sub
2545 
2546 
2547 
2548 
2549     def limit_sub(self):
2550 
2551         localctx = LaTeXParser.Limit_subContext(self, self._ctx, self.state)
2552         self.enterRule(localctx, 56, self.RULE_limit_sub)
2553         self._la = 0 # Token type
2554         try:
2555             self.enterOuterAlt(localctx, 1)
2556             self.state = 367
2557             self.match(LaTeXParser.UNDERSCORE)
2558             self.state = 368
2559             self.match(LaTeXParser.L_BRACE)
2560             self.state = 369
2561             _la = self._input.LA(1)
2562             if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
2563                 self._errHandler.recoverInline(self)
2564             else:
2565                 self._errHandler.reportMatch(self)
2566                 self.consume()
2567             self.state = 370
2568             self.match(LaTeXParser.LIM_APPROACH_SYM)
2569             self.state = 371
2570             self.expr()
2571             self.state = 376
2572             self._errHandler.sync(self)
2573             _la = self._input.LA(1)
2574             if _la==LaTeXParser.CARET:
2575                 self.state = 372
2576                 self.match(LaTeXParser.CARET)
2577                 self.state = 373
2578                 self.match(LaTeXParser.L_BRACE)
2579                 self.state = 374
2580                 _la = self._input.LA(1)
2581                 if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
2582                     self._errHandler.recoverInline(self)
2583                 else:
2584                     self._errHandler.reportMatch(self)
2585                     self.consume()
2586                 self.state = 375
2587                 self.match(LaTeXParser.R_BRACE)
2588 
2589 
2590             self.state = 378
2591             self.match(LaTeXParser.R_BRACE)
2592         except RecognitionException as re:
2593             localctx.exception = re
2594             self._errHandler.reportError(self, re)
2595             self._errHandler.recover(self, re)
2596         finally:
2597             self.exitRule()
2598         return localctx
2599 
2600     class Func_argContext(ParserRuleContext):
2601 
2602         def __init__(self, parser, parent=None, invokingState=-1):
2603             super(LaTeXParser.Func_argContext, self).__init__(parent, invokingState)
2604             self.parser = parser
2605 
2606         def expr(self):
2607             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2608 
2609 
2610         def func_arg(self):
2611             return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)
2612 
2613 
2614         def getRuleIndex(self):
2615             return LaTeXParser.RULE_func_arg
2616 
2617 
2618 
2619 
2620     def func_arg(self):
2621 
2622         localctx = LaTeXParser.Func_argContext(self, self._ctx, self.state)
2623         self.enterRule(localctx, 58, self.RULE_func_arg)
2624         try:
2625             self.state = 385
2626             self._errHandler.sync(self)
2627             la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
2628             if la_ == 1:
2629                 self.enterOuterAlt(localctx, 1)
2630                 self.state = 380
2631                 self.expr()
2632                 pass
2633 
2634             elif la_ == 2:
2635                 self.enterOuterAlt(localctx, 2)
2636                 self.state = 381
2637                 self.expr()
2638                 self.state = 382
2639                 self.match(LaTeXParser.T__0)
2640                 self.state = 383
2641                 self.func_arg()
2642                 pass
2643 
2644 
2645         except RecognitionException as re:
2646             localctx.exception = re
2647             self._errHandler.reportError(self, re)
2648             self._errHandler.recover(self, re)
2649         finally:
2650             self.exitRule()
2651         return localctx
2652 
2653     class Func_arg_noparensContext(ParserRuleContext):
2654 
2655         def __init__(self, parser, parent=None, invokingState=-1):
2656             super(LaTeXParser.Func_arg_noparensContext, self).__init__(parent, invokingState)
2657             self.parser = parser
2658 
2659         def mp_nofunc(self):
2660             return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,0)
2661 
2662 
2663         def getRuleIndex(self):
2664             return LaTeXParser.RULE_func_arg_noparens
2665 
2666 
2667 
2668 
2669     def func_arg_noparens(self):
2670 
2671         localctx = LaTeXParser.Func_arg_noparensContext(self, self._ctx, self.state)
2672         self.enterRule(localctx, 60, self.RULE_func_arg_noparens)
2673         try:
2674             self.enterOuterAlt(localctx, 1)
2675             self.state = 387
2676             self.mp_nofunc(0)
2677         except RecognitionException as re:
2678             localctx.exception = re
2679             self._errHandler.reportError(self, re)
2680             self._errHandler.recover(self, re)
2681         finally:
2682             self.exitRule()
2683         return localctx
2684 
2685     class SubexprContext(ParserRuleContext):
2686 
2687         def __init__(self, parser, parent=None, invokingState=-1):
2688             super(LaTeXParser.SubexprContext, self).__init__(parent, invokingState)
2689             self.parser = parser
2690 
2691         def UNDERSCORE(self):
2692             return self.getToken(LaTeXParser.UNDERSCORE, 0)
2693 
2694         def atom(self):
2695             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
2696 
2697 
2698         def L_BRACE(self):
2699             return self.getToken(LaTeXParser.L_BRACE, 0)
2700 
2701         def expr(self):
2702             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2703 
2704 
2705         def R_BRACE(self):
2706             return self.getToken(LaTeXParser.R_BRACE, 0)
2707 
2708         def getRuleIndex(self):
2709             return LaTeXParser.RULE_subexpr
2710 
2711 
2712 
2713 
2714     def subexpr(self):
2715 
2716         localctx = LaTeXParser.SubexprContext(self, self._ctx, self.state)
2717         self.enterRule(localctx, 62, self.RULE_subexpr)
2718         try:
2719             self.enterOuterAlt(localctx, 1)
2720             self.state = 389
2721             self.match(LaTeXParser.UNDERSCORE)
2722             self.state = 395
2723             self._errHandler.sync(self)
2724             token = self._input.LA(1)
2725             if token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
2726                 self.state = 390
2727                 self.atom()
2728                 pass
2729             elif token in [LaTeXParser.L_BRACE]:
2730                 self.state = 391
2731                 self.match(LaTeXParser.L_BRACE)
2732                 self.state = 392
2733                 self.expr()
2734                 self.state = 393
2735                 self.match(LaTeXParser.R_BRACE)
2736                 pass
2737             else:
2738                 raise NoViableAltException(self)
2739 
2740         except RecognitionException as re:
2741             localctx.exception = re
2742             self._errHandler.reportError(self, re)
2743             self._errHandler.recover(self, re)
2744         finally:
2745             self.exitRule()
2746         return localctx
2747 
2748     class SupexprContext(ParserRuleContext):
2749 
2750         def __init__(self, parser, parent=None, invokingState=-1):
2751             super(LaTeXParser.SupexprContext, self).__init__(parent, invokingState)
2752             self.parser = parser
2753 
2754         def CARET(self):
2755             return self.getToken(LaTeXParser.CARET, 0)
2756 
2757         def atom(self):
2758             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
2759 
2760 
2761         def L_BRACE(self):
2762             return self.getToken(LaTeXParser.L_BRACE, 0)
2763 
2764         def expr(self):
2765             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2766 
2767 
2768         def R_BRACE(self):
2769             return self.getToken(LaTeXParser.R_BRACE, 0)
2770 
2771         def getRuleIndex(self):
2772             return LaTeXParser.RULE_supexpr
2773 
2774 
2775 
2776 
2777     def supexpr(self):
2778 
2779         localctx = LaTeXParser.SupexprContext(self, self._ctx, self.state)
2780         self.enterRule(localctx, 64, self.RULE_supexpr)
2781         try:
2782             self.enterOuterAlt(localctx, 1)
2783             self.state = 397
2784             self.match(LaTeXParser.CARET)
2785             self.state = 403
2786             self._errHandler.sync(self)
2787             token = self._input.LA(1)
2788             if token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
2789                 self.state = 398
2790                 self.atom()
2791                 pass
2792             elif token in [LaTeXParser.L_BRACE]:
2793                 self.state = 399
2794                 self.match(LaTeXParser.L_BRACE)
2795                 self.state = 400
2796                 self.expr()
2797                 self.state = 401
2798                 self.match(LaTeXParser.R_BRACE)
2799                 pass
2800             else:
2801                 raise NoViableAltException(self)
2802 
2803         except RecognitionException as re:
2804             localctx.exception = re
2805             self._errHandler.reportError(self, re)
2806             self._errHandler.recover(self, re)
2807         finally:
2808             self.exitRule()
2809         return localctx
2810 
2811     class SubeqContext(ParserRuleContext):
2812 
2813         def __init__(self, parser, parent=None, invokingState=-1):
2814             super(LaTeXParser.SubeqContext, self).__init__(parent, invokingState)
2815             self.parser = parser
2816 
2817         def UNDERSCORE(self):
2818             return self.getToken(LaTeXParser.UNDERSCORE, 0)
2819 
2820         def L_BRACE(self):
2821             return self.getToken(LaTeXParser.L_BRACE, 0)
2822 
2823         def equality(self):
2824             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
2825 
2826 
2827         def R_BRACE(self):
2828             return self.getToken(LaTeXParser.R_BRACE, 0)
2829 
2830         def getRuleIndex(self):
2831             return LaTeXParser.RULE_subeq
2832 
2833 
2834 
2835 
2836     def subeq(self):
2837 
2838         localctx = LaTeXParser.SubeqContext(self, self._ctx, self.state)
2839         self.enterRule(localctx, 66, self.RULE_subeq)
2840         try:
2841             self.enterOuterAlt(localctx, 1)
2842             self.state = 405
2843             self.match(LaTeXParser.UNDERSCORE)
2844             self.state = 406
2845             self.match(LaTeXParser.L_BRACE)
2846             self.state = 407
2847             self.equality()
2848             self.state = 408
2849             self.match(LaTeXParser.R_BRACE)
2850         except RecognitionException as re:
2851             localctx.exception = re
2852             self._errHandler.reportError(self, re)
2853             self._errHandler.recover(self, re)
2854         finally:
2855             self.exitRule()
2856         return localctx
2857 
2858     class SupeqContext(ParserRuleContext):
2859 
2860         def __init__(self, parser, parent=None, invokingState=-1):
2861             super(LaTeXParser.SupeqContext, self).__init__(parent, invokingState)
2862             self.parser = parser
2863 
2864         def UNDERSCORE(self):
2865             return self.getToken(LaTeXParser.UNDERSCORE, 0)
2866 
2867         def L_BRACE(self):
2868             return self.getToken(LaTeXParser.L_BRACE, 0)
2869 
2870         def equality(self):
2871             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
2872 
2873 
2874         def R_BRACE(self):
2875             return self.getToken(LaTeXParser.R_BRACE, 0)
2876 
2877         def getRuleIndex(self):
2878             return LaTeXParser.RULE_supeq
2879 
2880 
2881 
2882 
2883     def supeq(self):
2884 
2885         localctx = LaTeXParser.SupeqContext(self, self._ctx, self.state)
2886         self.enterRule(localctx, 68, self.RULE_supeq)
2887         try:
2888             self.enterOuterAlt(localctx, 1)
2889             self.state = 410
2890             self.match(LaTeXParser.UNDERSCORE)
2891             self.state = 411
2892             self.match(LaTeXParser.L_BRACE)
2893             self.state = 412
2894             self.equality()
2895             self.state = 413
2896             self.match(LaTeXParser.R_BRACE)
2897         except RecognitionException as re:
2898             localctx.exception = re
2899             self._errHandler.reportError(self, re)
2900             self._errHandler.recover(self, re)
2901         finally:
2902             self.exitRule()
2903         return localctx
2904 
2905 
2906 
2907     def sempred(self, localctx, ruleIndex, predIndex):
2908         if self._predicates == None:
2909             self._predicates = dict()
2910         self._predicates[1] = self.relation_sempred
2911         self._predicates[4] = self.additive_sempred
2912         self._predicates[5] = self.mp_sempred
2913         self._predicates[6] = self.mp_nofunc_sempred
2914         self._predicates[15] = self.exp_sempred
2915         self._predicates[16] = self.exp_nofunc_sempred
2916         pred = self._predicates.get(ruleIndex, None)
2917         if pred is None:
2918             raise Exception("No predicate with index:" + str(ruleIndex))
2919         else:
2920             return pred(localctx, predIndex)
2921 
2922     def relation_sempred(self, localctx, predIndex):
2923             if predIndex == 0:
2924                 return self.precpred(self._ctx, 2)
2925 
2926 
2927     def additive_sempred(self, localctx, predIndex):
2928             if predIndex == 1:
2929                 return self.precpred(self._ctx, 2)
2930 
2931 
2932     def mp_sempred(self, localctx, predIndex):
2933             if predIndex == 2:
2934                 return self.precpred(self._ctx, 2)
2935 
2936 
2937     def mp_nofunc_sempred(self, localctx, predIndex):
2938             if predIndex == 3:
2939                 return self.precpred(self._ctx, 2)
2940 
2941 
2942     def exp_sempred(self, localctx, predIndex):
2943             if predIndex == 4:
2944                 return self.precpred(self._ctx, 2)
2945 
2946 
2947     def exp_nofunc_sempred(self, localctx, predIndex):
2948             if predIndex == 5:
2949                 return self.precpred(self._ctx, 2)
2950 
2951 
2952 
2953 
2954 

</code><intended_behavior>The handling of `\ln` and `\log` within this parsing logic needs to ensure the correct interpretation of natural logarithm expressions.</intended_behavior>, <file>sympy/parsing/latex/_antlr/latexlexer.py</file>
<class>None</class>
<method>None</method>
<code>
1 
2 # *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***
3 #
4 # Generated from ../LaTeX.g4, derived from latex2sympy
5 #     latex2sympy is licensed under the MIT license
6 #     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt
7 #
8 # Generated with antlr4
9 #    antlr4 is licensed under the BSD-3-Clause License
10 #    https://github.com/antlr/antlr4/blob/master/LICENSE.txt
11 from __future__ import print_function
12 from antlr4 import *
13 from io import StringIO
14 import sys
15 
16 
17 def serializedATN():
18     with StringIO() as buf:
19         buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2")
20         buf.write(u";\u01e8\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4")
21         buf.write(u"\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r")
22         buf.write(u"\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22")
23         buf.write(u"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4")
24         buf.write(u"\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35")
25         buf.write(u"\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4")
26         buf.write(u"$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t")
27         buf.write(u",\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63")
28         buf.write(u"\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\4")
29         buf.write(u"9\t9\4:\t:\4;\t;\4<\t<\3\2\3\2\3\3\6\3}\n\3\r\3\16\3")
30         buf.write(u"~\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t")
31         buf.write(u"\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17")
32         buf.write(u"\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3")
33         buf.write(u"\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
34         buf.write(u"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3")
35         buf.write(u"\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
36         buf.write(u"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3")
37         buf.write(u"\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u00d5\n\20\3\21")
38         buf.write(u"\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\23\3")
39         buf.write(u"\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\25")
40         buf.write(u"\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3")
41         buf.write(u"\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31")
42         buf.write(u"\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3")
43         buf.write(u"\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35")
44         buf.write(u"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3")
45         buf.write(u"\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37")
46         buf.write(u"\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!")
47         buf.write(u"\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3$\3")
48         buf.write(u"$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&")
49         buf.write(u"\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3")
50         buf.write(u"(\3(\3(\3)\3)\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3*\3+\3+")
51         buf.write(u"\3+\3+\3+\3,\3,\3,\3,\3,\3,\3-\3-\3-\3-\3-\3-\3-\3-\3")
52         buf.write(u".\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62\7\62\u0198\n")
53         buf.write(u"\62\f\62\16\62\u019b\13\62\3\62\3\62\3\62\6\62\u01a0")
54         buf.write(u"\n\62\r\62\16\62\u01a1\5\62\u01a4\n\62\3\63\3\63\3\64")
55         buf.write(u"\3\64\3\65\6\65\u01ab\n\65\r\65\16\65\u01ac\3\65\3\65")
56         buf.write(u"\3\65\3\65\3\65\7\65\u01b4\n\65\f\65\16\65\u01b7\13\65")
57         buf.write(u"\3\65\7\65\u01ba\n\65\f\65\16\65\u01bd\13\65\3\65\3\65")
58         buf.write(u"\3\65\3\65\3\65\7\65\u01c4\n\65\f\65\16\65\u01c7\13\65")
59         buf.write(u"\3\65\3\65\6\65\u01cb\n\65\r\65\16\65\u01cc\5\65\u01cf")
60         buf.write(u"\n\65\3\66\3\66\3\67\3\67\38\38\38\38\38\39\39\3:\3:")
61         buf.write(u"\3:\3:\3:\3;\3;\3<\3<\6<\u01e5\n<\r<\16<\u01e6\3\u0199")
62         buf.write(u"\2=\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27")
63         buf.write(u"\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-")
64         buf.write(u"\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%")
65         buf.write(u"I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\2c\62e\63g\2i\64k\65m")
66         buf.write(u"\66o\67q8s9u:w;\3\2\5\5\2\13\f\17\17\"\"\4\2C\\c|\3\2")
67         buf.write(u"\62;\2\u01f4\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t")
68         buf.write(u"\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3")
69         buf.write(u"\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3")
70         buf.write(u"\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2")
71         buf.write(u"\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+")
72         buf.write(u"\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2")
73         buf.write(u"\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2")
74         buf.write(u"\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2")
75         buf.write(u"\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2")
76         buf.write(u"\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3")
77         buf.write(u"\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2c\3\2\2\2\2")
78         buf.write(u"e\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2")
79         buf.write(u"\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\3y\3\2\2")
80         buf.write(u"\2\5|\3\2\2\2\7\u0082\3\2\2\2\t\u0084\3\2\2\2\13\u0086")
81         buf.write(u"\3\2\2\2\r\u0088\3\2\2\2\17\u008a\3\2\2\2\21\u008c\3")
82         buf.write(u"\2\2\2\23\u008e\3\2\2\2\25\u0090\3\2\2\2\27\u0092\3\2")
83         buf.write(u"\2\2\31\u0094\3\2\2\2\33\u0096\3\2\2\2\35\u0098\3\2\2")
84         buf.write(u"\2\37\u00d4\3\2\2\2!\u00d6\3\2\2\2#\u00db\3\2\2\2%\u00e0")
85         buf.write(u"\3\2\2\2\'\u00e6\3\2\2\2)\u00eb\3\2\2\2+\u00ef\3\2\2")
86         buf.write(u"\2-\u00f4\3\2\2\2/\u00f9\3\2\2\2\61\u00fe\3\2\2\2\63")
87         buf.write(u"\u0103\3\2\2\2\65\u0108\3\2\2\2\67\u010d\3\2\2\29\u0115")
88         buf.write(u"\3\2\2\2;\u011d\3\2\2\2=\u0125\3\2\2\2?\u012d\3\2\2\2")
89         buf.write(u"A\u0135\3\2\2\2C\u013d\3\2\2\2E\u0143\3\2\2\2G\u0149")
90         buf.write(u"\3\2\2\2I\u014f\3\2\2\2K\u0157\3\2\2\2M\u015f\3\2\2\2")
91         buf.write(u"O\u0167\3\2\2\2Q\u016d\3\2\2\2S\u0174\3\2\2\2U\u017a")
92         buf.write(u"\3\2\2\2W\u017f\3\2\2\2Y\u0185\3\2\2\2[\u018d\3\2\2\2")
93         buf.write(u"]\u018f\3\2\2\2_\u0191\3\2\2\2a\u0193\3\2\2\2c\u0195")
94         buf.write(u"\3\2\2\2e\u01a5\3\2\2\2g\u01a7\3\2\2\2i\u01ce\3\2\2\2")
95         buf.write(u"k\u01d0\3\2\2\2m\u01d2\3\2\2\2o\u01d4\3\2\2\2q\u01d9")
96         buf.write(u"\3\2\2\2s\u01db\3\2\2\2u\u01e0\3\2\2\2w\u01e2\3\2\2\2")
97         buf.write(u"yz\7.\2\2z\4\3\2\2\2{}\t\2\2\2|{\3\2\2\2}~\3\2\2\2~|")
98         buf.write(u"\3\2\2\2~\177\3\2\2\2\177\u0080\3\2\2\2\u0080\u0081\b")
99         buf.write(u"\3\2\2\u0081\6\3\2\2\2\u0082\u0083\7-\2\2\u0083\b\3\2")
100         buf.write(u"\2\2\u0084\u0085\7/\2\2\u0085\n\3\2\2\2\u0086\u0087\7")
101         buf.write(u",\2\2\u0087\f\3\2\2\2\u0088\u0089\7\61\2\2\u0089\16\3")
102         buf.write(u"\2\2\2\u008a\u008b\7*\2\2\u008b\20\3\2\2\2\u008c\u008d")
103         buf.write(u"\7+\2\2\u008d\22\3\2\2\2\u008e\u008f\7}\2\2\u008f\24")
104         buf.write(u"\3\2\2\2\u0090\u0091\7\177\2\2\u0091\26\3\2\2\2\u0092")
105         buf.write(u"\u0093\7]\2\2\u0093\30\3\2\2\2\u0094\u0095\7_\2\2\u0095")
106         buf.write(u"\32\3\2\2\2\u0096\u0097\7~\2\2\u0097\34\3\2\2\2\u0098")
107         buf.write(u"\u0099\7^\2\2\u0099\u009a\7n\2\2\u009a\u009b\7k\2\2\u009b")
108         buf.write(u"\u009c\7o\2\2\u009c\36\3\2\2\2\u009d\u009e\7^\2\2\u009e")
109         buf.write(u"\u009f\7v\2\2\u009f\u00d5\7q\2\2\u00a0\u00a1\7^\2\2\u00a1")
110         buf.write(u"\u00a2\7t\2\2\u00a2\u00a3\7k\2\2\u00a3\u00a4\7i\2\2\u00a4")
111         buf.write(u"\u00a5\7j\2\2\u00a5\u00a6\7v\2\2\u00a6\u00a7\7c\2\2\u00a7")
112         buf.write(u"\u00a8\7t\2\2\u00a8\u00a9\7t\2\2\u00a9\u00aa\7q\2\2\u00aa")
113         buf.write(u"\u00d5\7y\2\2\u00ab\u00ac\7^\2\2\u00ac\u00ad\7T\2\2\u00ad")
114         buf.write(u"\u00ae\7k\2\2\u00ae\u00af\7i\2\2\u00af\u00b0\7j\2\2\u00b0")
115         buf.write(u"\u00b1\7v\2\2\u00b1\u00b2\7c\2\2\u00b2\u00b3\7t\2\2\u00b3")
116         buf.write(u"\u00b4\7t\2\2\u00b4\u00b5\7q\2\2\u00b5\u00d5\7y\2\2\u00b6")
117         buf.write(u"\u00b7\7^\2\2\u00b7\u00b8\7n\2\2\u00b8\u00b9\7q\2\2\u00b9")
118         buf.write(u"\u00ba\7p\2\2\u00ba\u00bb\7i\2\2\u00bb\u00bc\7t\2\2\u00bc")
119         buf.write(u"\u00bd\7k\2\2\u00bd\u00be\7i\2\2\u00be\u00bf\7j\2\2\u00bf")
120         buf.write(u"\u00c0\7v\2\2\u00c0\u00c1\7c\2\2\u00c1\u00c2\7t\2\2\u00c2")
121         buf.write(u"\u00c3\7t\2\2\u00c3\u00c4\7q\2\2\u00c4\u00d5\7y\2\2\u00c5")
122         buf.write(u"\u00c6\7^\2\2\u00c6\u00c7\7N\2\2\u00c7\u00c8\7q\2\2\u00c8")
123         buf.write(u"\u00c9\7p\2\2\u00c9\u00ca\7i\2\2\u00ca\u00cb\7t\2\2\u00cb")
124         buf.write(u"\u00cc\7k\2\2\u00cc\u00cd\7i\2\2\u00cd\u00ce\7j\2\2\u00ce")
125         buf.write(u"\u00cf\7v\2\2\u00cf\u00d0\7c\2\2\u00d0\u00d1\7t\2\2\u00d1")
126         buf.write(u"\u00d2\7t\2\2\u00d2\u00d3\7q\2\2\u00d3\u00d5\7y\2\2\u00d4")
127         buf.write(u"\u009d\3\2\2\2\u00d4\u00a0\3\2\2\2\u00d4\u00ab\3\2\2")
128         buf.write(u"\2\u00d4\u00b6\3\2\2\2\u00d4\u00c5\3\2\2\2\u00d5 \3\2")
129         buf.write(u"\2\2\u00d6\u00d7\7^\2\2\u00d7\u00d8\7k\2\2\u00d8\u00d9")
130         buf.write(u"\7p\2\2\u00d9\u00da\7v\2\2\u00da\"\3\2\2\2\u00db\u00dc")
131         buf.write(u"\7^\2\2\u00dc\u00dd\7u\2\2\u00dd\u00de\7w\2\2\u00de\u00df")
132         buf.write(u"\7o\2\2\u00df$\3\2\2\2\u00e0\u00e1\7^\2\2\u00e1\u00e2")
133         buf.write(u"\7r\2\2\u00e2\u00e3\7t\2\2\u00e3\u00e4\7q\2\2\u00e4\u00e5")
134         buf.write(u"\7f\2\2\u00e5&\3\2\2\2\u00e6\u00e7\7^\2\2\u00e7\u00e8")
135         buf.write(u"\7n\2\2\u00e8\u00e9\7q\2\2\u00e9\u00ea\7i\2\2\u00ea(")
136         buf.write(u"\3\2\2\2\u00eb\u00ec\7^\2\2\u00ec\u00ed\7n\2\2\u00ed")
137         buf.write(u"\u00ee\7p\2\2\u00ee*\3\2\2\2\u00ef\u00f0\7^\2\2\u00f0")
138         buf.write(u"\u00f1\7u\2\2\u00f1\u00f2\7k\2\2\u00f2\u00f3\7p\2\2\u00f3")
139         buf.write(u",\3\2\2\2\u00f4\u00f5\7^\2\2\u00f5\u00f6\7e\2\2\u00f6")
140         buf.write(u"\u00f7\7q\2\2\u00f7\u00f8\7u\2\2\u00f8.\3\2\2\2\u00f9")
141         buf.write(u"\u00fa\7^\2\2\u00fa\u00fb\7v\2\2\u00fb\u00fc\7c\2\2\u00fc")
142         buf.write(u"\u00fd\7p\2\2\u00fd\60\3\2\2\2\u00fe\u00ff\7^\2\2\u00ff")
143         buf.write(u"\u0100\7e\2\2\u0100\u0101\7u\2\2\u0101\u0102\7e\2\2\u0102")
144         buf.write(u"\62\3\2\2\2\u0103\u0104\7^\2\2\u0104\u0105\7u\2\2\u0105")
145         buf.write(u"\u0106\7g\2\2\u0106\u0107\7e\2\2\u0107\64\3\2\2\2\u0108")
146         buf.write(u"\u0109\7^\2\2\u0109\u010a\7e\2\2\u010a\u010b\7q\2\2\u010b")
147         buf.write(u"\u010c\7v\2\2\u010c\66\3\2\2\2\u010d\u010e\7^\2\2\u010e")
148         buf.write(u"\u010f\7c\2\2\u010f\u0110\7t\2\2\u0110\u0111\7e\2\2\u0111")
149         buf.write(u"\u0112\7u\2\2\u0112\u0113\7k\2\2\u0113\u0114\7p\2\2\u0114")
150         buf.write(u"8\3\2\2\2\u0115\u0116\7^\2\2\u0116\u0117\7c\2\2\u0117")
151         buf.write(u"\u0118\7t\2\2\u0118\u0119\7e\2\2\u0119\u011a\7e\2\2\u011a")
152         buf.write(u"\u011b\7q\2\2\u011b\u011c\7u\2\2\u011c:\3\2\2\2\u011d")
153         buf.write(u"\u011e\7^\2\2\u011e\u011f\7c\2\2\u011f\u0120\7t\2\2\u0120")
154         buf.write(u"\u0121\7e\2\2\u0121\u0122\7v\2\2\u0122\u0123\7c\2\2\u0123")
155         buf.write(u"\u0124\7p\2\2\u0124<\3\2\2\2\u0125\u0126\7^\2\2\u0126")
156         buf.write(u"\u0127\7c\2\2\u0127\u0128\7t\2\2\u0128\u0129\7e\2\2\u0129")
157         buf.write(u"\u012a\7e\2\2\u012a\u012b\7u\2\2\u012b\u012c\7e\2\2\u012c")
158         buf.write(u">\3\2\2\2\u012d\u012e\7^\2\2\u012e\u012f\7c\2\2\u012f")
159         buf.write(u"\u0130\7t\2\2\u0130\u0131\7e\2\2\u0131\u0132\7u\2\2\u0132")
160         buf.write(u"\u0133\7g\2\2\u0133\u0134\7e\2\2\u0134@\3\2\2\2\u0135")
161         buf.write(u"\u0136\7^\2\2\u0136\u0137\7c\2\2\u0137\u0138\7t\2\2\u0138")
162         buf.write(u"\u0139\7e\2\2\u0139\u013a\7e\2\2\u013a\u013b\7q\2\2\u013b")
163         buf.write(u"\u013c\7v\2\2\u013cB\3\2\2\2\u013d\u013e\7^\2\2\u013e")
164         buf.write(u"\u013f\7u\2\2\u013f\u0140\7k\2\2\u0140\u0141\7p\2\2\u0141")
165         buf.write(u"\u0142\7j\2\2\u0142D\3\2\2\2\u0143\u0144\7^\2\2\u0144")
166         buf.write(u"\u0145\7e\2\2\u0145\u0146\7q\2\2\u0146\u0147\7u\2\2\u0147")
167         buf.write(u"\u0148\7j\2\2\u0148F\3\2\2\2\u0149\u014a\7^\2\2\u014a")
168         buf.write(u"\u014b\7v\2\2\u014b\u014c\7c\2\2\u014c\u014d\7p\2\2\u014d")
169         buf.write(u"\u014e\7j\2\2\u014eH\3\2\2\2\u014f\u0150\7^\2\2\u0150")
170         buf.write(u"\u0151\7c\2\2\u0151\u0152\7t\2\2\u0152\u0153\7u\2\2\u0153")
171         buf.write(u"\u0154\7k\2\2\u0154\u0155\7p\2\2\u0155\u0156\7j\2\2\u0156")
172         buf.write(u"J\3\2\2\2\u0157\u0158\7^\2\2\u0158\u0159\7c\2\2\u0159")
173         buf.write(u"\u015a\7t\2\2\u015a\u015b\7e\2\2\u015b\u015c\7q\2\2\u015c")
174         buf.write(u"\u015d\7u\2\2\u015d\u015e\7j\2\2\u015eL\3\2\2\2\u015f")
175         buf.write(u"\u0160\7^\2\2\u0160\u0161\7c\2\2\u0161\u0162\7t\2\2\u0162")
176         buf.write(u"\u0163\7v\2\2\u0163\u0164\7c\2\2\u0164\u0165\7p\2\2\u0165")
177         buf.write(u"\u0166\7j\2\2\u0166N\3\2\2\2\u0167\u0168\7^\2\2\u0168")
178         buf.write(u"\u0169\7u\2\2\u0169\u016a\7s\2\2\u016a\u016b\7t\2\2\u016b")
179         buf.write(u"\u016c\7v\2\2\u016cP\3\2\2\2\u016d\u016e\7^\2\2\u016e")
180         buf.write(u"\u016f\7v\2\2\u016f\u0170\7k\2\2\u0170\u0171\7o\2\2\u0171")
181         buf.write(u"\u0172\7g\2\2\u0172\u0173\7u\2\2\u0173R\3\2\2\2\u0174")
182         buf.write(u"\u0175\7^\2\2\u0175\u0176\7e\2\2\u0176\u0177\7f\2\2\u0177")
183         buf.write(u"\u0178\7q\2\2\u0178\u0179\7v\2\2\u0179T\3\2\2\2\u017a")
184         buf.write(u"\u017b\7^\2\2\u017b\u017c\7f\2\2\u017c\u017d\7k\2\2\u017d")
185         buf.write(u"\u017e\7x\2\2\u017eV\3\2\2\2\u017f\u0180\7^\2\2\u0180")
186         buf.write(u"\u0181\7h\2\2\u0181\u0182\7t\2\2\u0182\u0183\7c\2\2\u0183")
187         buf.write(u"\u0184\7e\2\2\u0184X\3\2\2\2\u0185\u0186\7^\2\2\u0186")
188         buf.write(u"\u0187\7o\2\2\u0187\u0188\7c\2\2\u0188\u0189\7v\2\2\u0189")
189         buf.write(u"\u018a\7j\2\2\u018a\u018b\7k\2\2\u018b\u018c\7v\2\2\u018c")
190         buf.write(u"Z\3\2\2\2\u018d\u018e\7a\2\2\u018e\\\3\2\2\2\u018f\u0190")
191         buf.write(u"\7`\2\2\u0190^\3\2\2\2\u0191\u0192\7<\2\2\u0192`\3\2")
192         buf.write(u"\2\2\u0193\u0194\t\2\2\2\u0194b\3\2\2\2\u0195\u0199\7")
193         buf.write(u"f\2\2\u0196\u0198\5a\61\2\u0197\u0196\3\2\2\2\u0198\u019b")
194         buf.write(u"\3\2\2\2\u0199\u019a\3\2\2\2\u0199\u0197\3\2\2\2\u019a")
195         buf.write(u"\u01a3\3\2\2\2\u019b\u0199\3\2\2\2\u019c\u01a4\t\3\2")
196         buf.write(u"\2\u019d\u019f\7^\2\2\u019e\u01a0\t\3\2\2\u019f\u019e")
197         buf.write(u"\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u019f\3\2\2\2\u01a1")
198         buf.write(u"\u01a2\3\2\2\2\u01a2\u01a4\3\2\2\2\u01a3\u019c\3\2\2")
199         buf.write(u"\2\u01a3\u019d\3\2\2\2\u01a4d\3\2\2\2\u01a5\u01a6\t\3")
200         buf.write(u"\2\2\u01a6f\3\2\2\2\u01a7\u01a8\t\4\2\2\u01a8h\3\2\2")
201         buf.write(u"\2\u01a9\u01ab\5g\64\2\u01aa\u01a9\3\2\2\2\u01ab\u01ac")
202         buf.write(u"\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad")
203         buf.write(u"\u01b5\3\2\2\2\u01ae\u01af\7.\2\2\u01af\u01b0\5g\64\2")
204         buf.write(u"\u01b0\u01b1\5g\64\2\u01b1\u01b2\5g\64\2\u01b2\u01b4")
205         buf.write(u"\3\2\2\2\u01b3\u01ae\3\2\2\2\u01b4\u01b7\3\2\2\2\u01b5")
206         buf.write(u"\u01b3\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01cf\3\2\2")
207         buf.write(u"\2\u01b7\u01b5\3\2\2\2\u01b8\u01ba\5g\64\2\u01b9\u01b8")
208         buf.write(u"\3\2\2\2\u01ba\u01bd\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bb")
209         buf.write(u"\u01bc\3\2\2\2\u01bc\u01c5\3\2\2\2\u01bd\u01bb\3\2\2")
210         buf.write(u"\2\u01be\u01bf\7.\2\2\u01bf\u01c0\5g\64\2\u01c0\u01c1")
211         buf.write(u"\5g\64\2\u01c1\u01c2\5g\64\2\u01c2\u01c4\3\2\2\2\u01c3")
212         buf.write(u"\u01be\3\2\2\2\u01c4\u01c7\3\2\2\2\u01c5\u01c3\3\2\2")
213         buf.write(u"\2\u01c5\u01c6\3\2\2\2\u01c6\u01c8\3\2\2\2\u01c7\u01c5")
214         buf.write(u"\3\2\2\2\u01c8\u01ca\7\60\2\2\u01c9\u01cb\5g\64\2\u01ca")
215         buf.write(u"\u01c9\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01ca\3\2\2")
216         buf.write(u"\2\u01cc\u01cd\3\2\2\2\u01cd\u01cf\3\2\2\2\u01ce\u01aa")
217         buf.write(u"\3\2\2\2\u01ce\u01bb\3\2\2\2\u01cfj\3\2\2\2\u01d0\u01d1")
218         buf.write(u"\7?\2\2\u01d1l\3\2\2\2\u01d2\u01d3\7>\2\2\u01d3n\3\2")
219         buf.write(u"\2\2\u01d4\u01d5\7^\2\2\u01d5\u01d6\7n\2\2\u01d6\u01d7")
220         buf.write(u"\7g\2\2\u01d7\u01d8\7s\2\2\u01d8p\3\2\2\2\u01d9\u01da")
221         buf.write(u"\7@\2\2\u01dar\3\2\2\2\u01db\u01dc\7^\2\2\u01dc\u01dd")
222         buf.write(u"\7i\2\2\u01dd\u01de\7g\2\2\u01de\u01df\7s\2\2\u01dft")
223         buf.write(u"\3\2\2\2\u01e0\u01e1\7#\2\2\u01e1v\3\2\2\2\u01e2\u01e4")
224         buf.write(u"\7^\2\2\u01e3\u01e5\t\3\2\2\u01e4\u01e3\3\2\2\2\u01e5")
225         buf.write(u"\u01e6\3\2\2\2\u01e6\u01e4\3\2\2\2\u01e6\u01e7\3\2\2")
226         buf.write(u"\2\u01e7x\3\2\2\2\17\2~\u00d4\u0199\u01a1\u01a3\u01ac")
227         buf.write(u"\u01b5\u01bb\u01c5\u01cc\u01ce\u01e6\3\b\2\2")
228         return buf.getvalue()
229 
230 
231 class LaTeXLexer(Lexer):
232 
233     atn = ATNDeserializer().deserialize(serializedATN())
234 
235     decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]
236 
237     T__0 = 1
238     WS = 2
239     ADD = 3
240     SUB = 4
241     MUL = 5
242     DIV = 6
243     L_PAREN = 7
244     R_PAREN = 8
245     L_BRACE = 9
246     R_BRACE = 10
247     L_BRACKET = 11
248     R_BRACKET = 12
249     BAR = 13
250     FUNC_LIM = 14
251     LIM_APPROACH_SYM = 15
252     FUNC_INT = 16
253     FUNC_SUM = 17
254     FUNC_PROD = 18
255     FUNC_LOG = 19
256     FUNC_LN = 20
257     FUNC_SIN = 21
258     FUNC_COS = 22
259     FUNC_TAN = 23
260     FUNC_CSC = 24
261     FUNC_SEC = 25
262     FUNC_COT = 26
263     FUNC_ARCSIN = 27
264     FUNC_ARCCOS = 28
265     FUNC_ARCTAN = 29
266     FUNC_ARCCSC = 30
267     FUNC_ARCSEC = 31
268     FUNC_ARCCOT = 32
269     FUNC_SINH = 33
270     FUNC_COSH = 34
271     FUNC_TANH = 35
272     FUNC_ARSINH = 36
273     FUNC_ARCOSH = 37
274     FUNC_ARTANH = 38
275     FUNC_SQRT = 39
276     CMD_TIMES = 40
277     CMD_CDOT = 41
278     CMD_DIV = 42
279     CMD_FRAC = 43
280     CMD_MATHIT = 44
281     UNDERSCORE = 45
282     CARET = 46
283     COLON = 47
284     DIFFERENTIAL = 48
285     LETTER = 49
286     NUMBER = 50
287     EQUAL = 51
288     LT = 52
289     LTE = 53
290     GT = 54
291     GTE = 55
292     BANG = 56
293     SYMBOL = 57
294 
295     channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]
296 
297     modeNames = [ u"DEFAULT_MODE" ]
298 
299     literalNames = [ u"<INVALID>",
300             u"','", u"'+'", u"'-'", u"'*'", u"'/'", u"'('", u"')'", u"'{'",
301             u"'}'", u"'['", u"']'", u"'|'", u"'\\lim'", u"'\\int'", u"'\\sum'",
302             u"'\\prod'", u"'\\log'", u"'\\ln'", u"'\\sin'", u"'\\cos'",
303             u"'\\tan'", u"'\\csc'", u"'\\sec'", u"'\\cot'", u"'\\arcsin'",
304             u"'\\arccos'", u"'\\arctan'", u"'\\arccsc'", u"'\\arcsec'",
305             u"'\\arccot'", u"'\\sinh'", u"'\\cosh'", u"'\\tanh'", u"'\\arsinh'",
306             u"'\\arcosh'", u"'\\artanh'", u"'\\sqrt'", u"'\\times'", u"'\\cdot'",
307             u"'\\div'", u"'\\frac'", u"'\\mathit'", u"'_'", u"'^'", u"':'",
308             u"'='", u"'<'", u"'\\leq'", u"'>'", u"'\\geq'", u"'!'" ]
309 
310     symbolicNames = [ u"<INVALID>",
311             u"WS", u"ADD", u"SUB", u"MUL", u"DIV", u"L_PAREN", u"R_PAREN",
312             u"L_BRACE", u"R_BRACE", u"L_BRACKET", u"R_BRACKET", u"BAR",
313             u"FUNC_LIM", u"LIM_APPROACH_SYM", u"FUNC_INT", u"FUNC_SUM",
314             u"FUNC_PROD", u"FUNC_LOG", u"FUNC_LN", u"FUNC_SIN", u"FUNC_COS",
315             u"FUNC_TAN", u"FUNC_CSC", u"FUNC_SEC", u"FUNC_COT", u"FUNC_ARCSIN",
316             u"FUNC_ARCCOS", u"FUNC_ARCTAN", u"FUNC_ARCCSC", u"FUNC_ARCSEC",
317             u"FUNC_ARCCOT", u"FUNC_SINH", u"FUNC_COSH", u"FUNC_TANH", u"FUNC_ARSINH",
318             u"FUNC_ARCOSH", u"FUNC_ARTANH", u"FUNC_SQRT", u"CMD_TIMES",
319             u"CMD_CDOT", u"CMD_DIV", u"CMD_FRAC", u"CMD_MATHIT", u"UNDERSCORE",
320             u"CARET", u"COLON", u"DIFFERENTIAL", u"LETTER", u"NUMBER", u"EQUAL",
321             u"LT", u"LTE", u"GT", u"GTE", u"BANG", u"SYMBOL" ]
322 
323     ruleNames = [ u"T__0", u"WS", u"ADD", u"SUB", u"MUL", u"DIV", u"L_PAREN",
324                   u"R_PAREN", u"L_BRACE", u"R_BRACE", u"L_BRACKET", u"R_BRACKET",
325                   u"BAR", u"FUNC_LIM", u"LIM_APPROACH_SYM", u"FUNC_INT",
326                   u"FUNC_SUM", u"FUNC_PROD", u"FUNC_LOG", u"FUNC_LN", u"FUNC_SIN",
327                   u"FUNC_COS", u"FUNC_TAN", u"FUNC_CSC", u"FUNC_SEC", u"FUNC_COT",
328                   u"FUNC_ARCSIN", u"FUNC_ARCCOS", u"FUNC_ARCTAN", u"FUNC_ARCCSC",
329                   u"FUNC_ARCSEC", u"FUNC_ARCCOT", u"FUNC_SINH", u"FUNC_COSH",
330                   u"FUNC_TANH", u"FUNC_ARSINH", u"FUNC_ARCOSH", u"FUNC_ARTANH",
331                   u"FUNC_SQRT", u"CMD_TIMES", u"CMD_CDOT", u"CMD_DIV", u"CMD_FRAC",
332                   u"CMD_MATHIT", u"UNDERSCORE", u"CARET", u"COLON", u"WS_CHAR",
333                   u"DIFFERENTIAL", u"LETTER", u"DIGIT", u"NUMBER", u"EQUAL",
334                   u"LT", u"LTE", u"GT", u"GTE", u"BANG", u"SYMBOL" ]
335 
336     grammarFileName = u"LaTeX.g4"
337 
338     def __init__(self, input=None, output=sys.stdout):
339         super(LaTeXLexer, self).__init__(input, output=output)
340         self.checkVersion("4.7.1")
341         self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
342         self._actions = None
343         self._predicates = None
344 
345 

</code><intended_behavior>Ensure that the lexer correctly differentiates and tokenizes `\ln` and `\log` as separate entities without ambiguity.</intended_behavior>]
2025-10-17 20:11:55.435 | INFO     | Search completed. Bug locations: [<file>sympy/parsing/latex/_antlr/latexparser.py</file>
<class>None</class>
<method>None</method>
<code>
1 
2 # *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***
3 #
4 # Generated from ../LaTeX.g4, derived from latex2sympy
5 #     latex2sympy is licensed under the MIT license
6 #     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt
7 #
8 # Generated with antlr4
9 #    antlr4 is licensed under the BSD-3-Clause License
10 #    https://github.com/antlr/antlr4/blob/master/LICENSE.txt
11 from __future__ import print_function
12 from antlr4 import *
13 from io import StringIO
14 import sys
15 
16 def serializedATN():
17     with StringIO() as buf:
18         buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
19         buf.write(u";\u01a2\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t")
20         buf.write(u"\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
21         buf.write(u"\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4")
22         buf.write(u"\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30")
23         buf.write(u"\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t")
24         buf.write(u"\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$")
25         buf.write(u"\t$\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\7\3Q\n\3\f\3\16\3")
26         buf.write(u"T\13\3\3\4\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3")
27         buf.write(u"\6\7\6b\n\6\f\6\16\6e\13\6\3\7\3\7\3\7\3\7\3\7\3\7\7")
28         buf.write(u"\7m\n\7\f\7\16\7p\13\7\3\b\3\b\3\b\3\b\3\b\3\b\7\bx\n")
29         buf.write(u"\b\f\b\16\b{\13\b\3\t\3\t\3\t\6\t\u0080\n\t\r\t\16\t")
30         buf.write(u"\u0081\5\t\u0084\n\t\3\n\3\n\3\n\3\n\7\n\u008a\n\n\f")
31         buf.write(u"\n\16\n\u008d\13\n\5\n\u008f\n\n\3\13\3\13\7\13\u0093")
32         buf.write(u"\n\13\f\13\16\13\u0096\13\13\3\f\3\f\7\f\u009a\n\f\f")
33         buf.write(u"\f\16\f\u009d\13\f\3\r\3\r\5\r\u00a1\n\r\3\16\3\16\3")
34         buf.write(u"\16\3\16\3\16\3\16\5\16\u00a9\n\16\3\17\3\17\3\17\3\17")
35         buf.write(u"\5\17\u00af\n\17\3\17\3\17\3\20\3\20\3\20\3\20\5\20\u00b7")
36         buf.write(u"\n\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3")
37         buf.write(u"\21\3\21\3\21\5\21\u00c5\n\21\3\21\5\21\u00c8\n\21\7")
38         buf.write(u"\21\u00ca\n\21\f\21\16\21\u00cd\13\21\3\22\3\22\3\22")
39         buf.write(u"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u00d9\n\22\3")
40         buf.write(u"\22\5\22\u00dc\n\22\7\22\u00de\n\22\f\22\16\22\u00e1")
41         buf.write(u"\13\22\3\23\3\23\3\23\3\23\3\23\5\23\u00e8\n\23\3\24")
42         buf.write(u"\3\24\3\24\3\24\5\24\u00ee\n\24\3\25\3\25\3\25\3\25\3")
43         buf.write(u"\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u00fc\n\25")
44         buf.write(u"\3\26\3\26\3\26\3\26\3\27\3\27\5\27\u0104\n\27\3\27\3")
45         buf.write(u"\27\3\27\5\27\u0109\n\27\3\30\3\30\3\30\3\30\3\30\3\31")
46         buf.write(u"\7\31\u0111\n\31\f\31\16\31\u0114\13\31\3\32\3\32\3\32")
47         buf.write(u"\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\34\3\34\5\34\u0122")
48         buf.write(u"\n\34\3\34\5\34\u0125\n\34\3\34\5\34\u0128\n\34\3\34")
49         buf.write(u"\5\34\u012b\n\34\5\34\u012d\n\34\3\34\3\34\3\34\3\34")
50         buf.write(u"\3\34\5\34\u0134\n\34\3\34\3\34\5\34\u0138\n\34\3\34")
51         buf.write(u"\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5")
52         buf.write(u"\34\u0145\n\34\3\34\5\34\u0148\n\34\3\34\3\34\3\34\5")
53         buf.write(u"\34\u014d\n\34\3\34\3\34\3\34\3\34\3\34\5\34\u0154\n")
54         buf.write(u"\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
55         buf.write(u"\3\34\5\34\u0161\n\34\3\34\3\34\3\34\3\34\3\34\3\34\5")
56         buf.write(u"\34\u0169\n\34\3\35\3\35\3\35\3\35\3\35\5\35\u0170\n")
57         buf.write(u"\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36")
58         buf.write(u"\u017b\n\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\5\37\u0184")
59         buf.write(u"\n\37\3 \3 \3!\3!\3!\3!\3!\3!\5!\u018e\n!\3\"\3\"\3\"")
60         buf.write(u"\3\"\3\"\3\"\5\"\u0196\n\"\3#\3#\3#\3#\3#\3$\3$\3$\3")
61         buf.write(u"$\3$\3$\2\b\4\n\f\16 \"%\2\4\6\b\n\f\16\20\22\24\26\30")
62         buf.write(u"\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF\2\b\3\2\659\3")
63         buf.write(u"\2\5\6\5\2\7\b*,\61\61\4\2\63\63;;\3\2\25(\3\2\23\24")
64         buf.write(u"\2\u01b9\2H\3\2\2\2\4J\3\2\2\2\6U\3\2\2\2\bY\3\2\2\2")
65         buf.write(u"\n[\3\2\2\2\ff\3\2\2\2\16q\3\2\2\2\20\u0083\3\2\2\2\22")
66         buf.write(u"\u008e\3\2\2\2\24\u0090\3\2\2\2\26\u0097\3\2\2\2\30\u00a0")
67         buf.write(u"\3\2\2\2\32\u00a2\3\2\2\2\34\u00aa\3\2\2\2\36\u00b2\3")
68         buf.write(u"\2\2\2 \u00ba\3\2\2\2\"\u00ce\3\2\2\2$\u00e7\3\2\2\2")
69         buf.write(u"&\u00ed\3\2\2\2(\u00fb\3\2\2\2*\u00fd\3\2\2\2,\u0108")
70         buf.write(u"\3\2\2\2.\u010a\3\2\2\2\60\u0112\3\2\2\2\62\u0115\3\2")
71         buf.write(u"\2\2\64\u011d\3\2\2\2\66\u0168\3\2\2\28\u016f\3\2\2\2")
72         buf.write(u":\u0171\3\2\2\2<\u0183\3\2\2\2>\u0185\3\2\2\2@\u0187")
73         buf.write(u"\3\2\2\2B\u018f\3\2\2\2D\u0197\3\2\2\2F\u019c\3\2\2\2")
74         buf.write(u"HI\5\4\3\2I\3\3\2\2\2JK\b\3\1\2KL\5\b\5\2LR\3\2\2\2M")
75         buf.write(u"N\f\4\2\2NO\t\2\2\2OQ\5\4\3\5PM\3\2\2\2QT\3\2\2\2RP\3")
76         buf.write(u"\2\2\2RS\3\2\2\2S\5\3\2\2\2TR\3\2\2\2UV\5\b\5\2VW\7\65")
77         buf.write(u"\2\2WX\5\b\5\2X\7\3\2\2\2YZ\5\n\6\2Z\t\3\2\2\2[\\\b\6")
78         buf.write(u"\1\2\\]\5\f\7\2]c\3\2\2\2^_\f\4\2\2_`\t\3\2\2`b\5\n\6")
79         buf.write(u"\5a^\3\2\2\2be\3\2\2\2ca\3\2\2\2cd\3\2\2\2d\13\3\2\2")
80         buf.write(u"\2ec\3\2\2\2fg\b\7\1\2gh\5\20\t\2hn\3\2\2\2ij\f\4\2\2")
81         buf.write(u"jk\t\4\2\2km\5\f\7\5li\3\2\2\2mp\3\2\2\2nl\3\2\2\2no")
82         buf.write(u"\3\2\2\2o\r\3\2\2\2pn\3\2\2\2qr\b\b\1\2rs\5\22\n\2sy")
83         buf.write(u"\3\2\2\2tu\f\4\2\2uv\t\4\2\2vx\5\16\b\5wt\3\2\2\2x{\3")
84         buf.write(u"\2\2\2yw\3\2\2\2yz\3\2\2\2z\17\3\2\2\2{y\3\2\2\2|}\t")
85         buf.write(u"\3\2\2}\u0084\5\20\t\2~\u0080\5\24\13\2\177~\3\2\2\2")
86         buf.write(u"\u0080\u0081\3\2\2\2\u0081\177\3\2\2\2\u0081\u0082\3")
87         buf.write(u"\2\2\2\u0082\u0084\3\2\2\2\u0083|\3\2\2\2\u0083\177\3")
88         buf.write(u"\2\2\2\u0084\21\3\2\2\2\u0085\u0086\t\3\2\2\u0086\u008f")
89         buf.write(u"\5\22\n\2\u0087\u008b\5\24\13\2\u0088\u008a\5\26\f\2")
90         buf.write(u"\u0089\u0088\3\2\2\2\u008a\u008d\3\2\2\2\u008b\u0089")
91         buf.write(u"\3\2\2\2\u008b\u008c\3\2\2\2\u008c\u008f\3\2\2\2\u008d")
92         buf.write(u"\u008b\3\2\2\2\u008e\u0085\3\2\2\2\u008e\u0087\3\2\2")
93         buf.write(u"\2\u008f\23\3\2\2\2\u0090\u0094\5 \21\2\u0091\u0093\5")
94         buf.write(u"\30\r\2\u0092\u0091\3\2\2\2\u0093\u0096\3\2\2\2\u0094")
95         buf.write(u"\u0092\3\2\2\2\u0094\u0095\3\2\2\2\u0095\25\3\2\2\2\u0096")
96         buf.write(u"\u0094\3\2\2\2\u0097\u009b\5\"\22\2\u0098\u009a\5\30")
97         buf.write(u"\r\2\u0099\u0098\3\2\2\2\u009a\u009d\3\2\2\2\u009b\u0099")
98         buf.write(u"\3\2\2\2\u009b\u009c\3\2\2\2\u009c\27\3\2\2\2\u009d\u009b")
99         buf.write(u"\3\2\2\2\u009e\u00a1\7:\2\2\u009f\u00a1\5\32\16\2\u00a0")
100         buf.write(u"\u009e\3\2\2\2\u00a0\u009f\3\2\2\2\u00a1\31\3\2\2\2\u00a2")
101         buf.write(u"\u00a8\7\17\2\2\u00a3\u00a9\5\36\20\2\u00a4\u00a9\5\34")
102         buf.write(u"\17\2\u00a5\u00a6\5\36\20\2\u00a6\u00a7\5\34\17\2\u00a7")
103         buf.write(u"\u00a9\3\2\2\2\u00a8\u00a3\3\2\2\2\u00a8\u00a4\3\2\2")
104         buf.write(u"\2\u00a8\u00a5\3\2\2\2\u00a9\33\3\2\2\2\u00aa\u00ab\7")
105         buf.write(u"/\2\2\u00ab\u00ae\7\13\2\2\u00ac\u00af\5\b\5\2\u00ad")
106         buf.write(u"\u00af\5\6\4\2\u00ae\u00ac\3\2\2\2\u00ae\u00ad\3\2\2")
107         buf.write(u"\2\u00af\u00b0\3\2\2\2\u00b0\u00b1\7\f\2\2\u00b1\35\3")
108         buf.write(u"\2\2\2\u00b2\u00b3\7\60\2\2\u00b3\u00b6\7\13\2\2\u00b4")
109         buf.write(u"\u00b7\5\b\5\2\u00b5\u00b7\5\6\4\2\u00b6\u00b4\3\2\2")
110         buf.write(u"\2\u00b6\u00b5\3\2\2\2\u00b7\u00b8\3\2\2\2\u00b8\u00b9")
111         buf.write(u"\7\f\2\2\u00b9\37\3\2\2\2\u00ba\u00bb\b\21\1\2\u00bb")
112         buf.write(u"\u00bc\5$\23\2\u00bc\u00cb\3\2\2\2\u00bd\u00be\f\4\2")
113         buf.write(u"\2\u00be\u00c4\7\60\2\2\u00bf\u00c5\5,\27\2\u00c0\u00c1")
114         buf.write(u"\7\13\2\2\u00c1\u00c2\5\b\5\2\u00c2\u00c3\7\f\2\2\u00c3")
115         buf.write(u"\u00c5\3\2\2\2\u00c4\u00bf\3\2\2\2\u00c4\u00c0\3\2\2")
116         buf.write(u"\2\u00c5\u00c7\3\2\2\2\u00c6\u00c8\5@!\2\u00c7\u00c6")
117         buf.write(u"\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00ca\3\2\2\2\u00c9")
118         buf.write(u"\u00bd\3\2\2\2\u00ca\u00cd\3\2\2\2\u00cb\u00c9\3\2\2")
119         buf.write(u"\2\u00cb\u00cc\3\2\2\2\u00cc!\3\2\2\2\u00cd\u00cb\3\2")
120         buf.write(u"\2\2\u00ce\u00cf\b\22\1\2\u00cf\u00d0\5&\24\2\u00d0\u00df")
121         buf.write(u"\3\2\2\2\u00d1\u00d2\f\4\2\2\u00d2\u00d8\7\60\2\2\u00d3")
122         buf.write(u"\u00d9\5,\27\2\u00d4\u00d5\7\13\2\2\u00d5\u00d6\5\b\5")
123         buf.write(u"\2\u00d6\u00d7\7\f\2\2\u00d7\u00d9\3\2\2\2\u00d8\u00d3")
124         buf.write(u"\3\2\2\2\u00d8\u00d4\3\2\2\2\u00d9\u00db\3\2\2\2\u00da")
125         buf.write(u"\u00dc\5@!\2\u00db\u00da\3\2\2\2\u00db\u00dc\3\2\2\2")
126         buf.write(u"\u00dc\u00de\3\2\2\2\u00dd\u00d1\3\2\2\2\u00de\u00e1")
127         buf.write(u"\3\2\2\2\u00df\u00dd\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0")
128         buf.write(u"#\3\2\2\2\u00e1\u00df\3\2\2\2\u00e2\u00e8\5(\25\2\u00e3")
129         buf.write(u"\u00e8\5*\26\2\u00e4\u00e8\5\66\34\2\u00e5\u00e8\5,\27")
130         buf.write(u"\2\u00e6\u00e8\5\62\32\2\u00e7\u00e2\3\2\2\2\u00e7\u00e3")
131         buf.write(u"\3\2\2\2\u00e7\u00e4\3\2\2\2\u00e7\u00e5\3\2\2\2\u00e7")
132         buf.write(u"\u00e6\3\2\2\2\u00e8%\3\2\2\2\u00e9\u00ee\5(\25\2\u00ea")
133         buf.write(u"\u00ee\5*\26\2\u00eb\u00ee\5,\27\2\u00ec\u00ee\5\62\32")
134         buf.write(u"\2\u00ed\u00e9\3\2\2\2\u00ed\u00ea\3\2\2\2\u00ed\u00eb")
135         buf.write(u"\3\2\2\2\u00ed\u00ec\3\2\2\2\u00ee\'\3\2\2\2\u00ef\u00f0")
136         buf.write(u"\7\t\2\2\u00f0\u00f1\5\b\5\2\u00f1\u00f2\7\n\2\2\u00f2")
137         buf.write(u"\u00fc\3\2\2\2\u00f3\u00f4\7\r\2\2\u00f4\u00f5\5\b\5")
138         buf.write(u"\2\u00f5\u00f6\7\16\2\2\u00f6\u00fc\3\2\2\2\u00f7\u00f8")
139         buf.write(u"\7\13\2\2\u00f8\u00f9\5\b\5\2\u00f9\u00fa\7\f\2\2\u00fa")
140         buf.write(u"\u00fc\3\2\2\2\u00fb\u00ef\3\2\2\2\u00fb\u00f3\3\2\2")
141         buf.write(u"\2\u00fb\u00f7\3\2\2\2\u00fc)\3\2\2\2\u00fd\u00fe\7\17")
142         buf.write(u"\2\2\u00fe\u00ff\5\b\5\2\u00ff\u0100\7\17\2\2\u0100+")
143         buf.write(u"\3\2\2\2\u0101\u0103\t\5\2\2\u0102\u0104\5@!\2\u0103")
144         buf.write(u"\u0102\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u0109\3\2\2")
145         buf.write(u"\2\u0105\u0109\7\64\2\2\u0106\u0109\7\62\2\2\u0107\u0109")
146         buf.write(u"\5.\30\2\u0108\u0101\3\2\2\2\u0108\u0105\3\2\2\2\u0108")
147         buf.write(u"\u0106\3\2\2\2\u0108\u0107\3\2\2\2\u0109-\3\2\2\2\u010a")
148         buf.write(u"\u010b\7.\2\2\u010b\u010c\7\13\2\2\u010c\u010d\5\60\31")
149         buf.write(u"\2\u010d\u010e\7\f\2\2\u010e/\3\2\2\2\u010f\u0111\7\63")
150         buf.write(u"\2\2\u0110\u010f\3\2\2\2\u0111\u0114\3\2\2\2\u0112\u0110")
151         buf.write(u"\3\2\2\2\u0112\u0113\3\2\2\2\u0113\61\3\2\2\2\u0114\u0112")
152         buf.write(u"\3\2\2\2\u0115\u0116\7-\2\2\u0116\u0117\7\13\2\2\u0117")
153         buf.write(u"\u0118\5\b\5\2\u0118\u0119\7\f\2\2\u0119\u011a\7\13\2")
154         buf.write(u"\2\u011a\u011b\5\b\5\2\u011b\u011c\7\f\2\2\u011c\63\3")
155         buf.write(u"\2\2\2\u011d\u011e\t\6\2\2\u011e\65\3\2\2\2\u011f\u012c")
156         buf.write(u"\5\64\33\2\u0120\u0122\5@!\2\u0121\u0120\3\2\2\2\u0121")
157         buf.write(u"\u0122\3\2\2\2\u0122\u0124\3\2\2\2\u0123\u0125\5B\"\2")
158         buf.write(u"\u0124\u0123\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u012d")
159         buf.write(u"\3\2\2\2\u0126\u0128\5B\"\2\u0127\u0126\3\2\2\2\u0127")
160         buf.write(u"\u0128\3\2\2\2\u0128\u012a\3\2\2\2\u0129\u012b\5@!\2")
161         buf.write(u"\u012a\u0129\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u012d")
162         buf.write(u"\3\2\2\2\u012c\u0121\3\2\2\2\u012c\u0127\3\2\2\2\u012d")
163         buf.write(u"\u0133\3\2\2\2\u012e\u012f\7\t\2\2\u012f\u0130\5<\37")
164         buf.write(u"\2\u0130\u0131\7\n\2\2\u0131\u0134\3\2\2\2\u0132\u0134")
165         buf.write(u"\5> \2\u0133\u012e\3\2\2\2\u0133\u0132\3\2\2\2\u0134")
166         buf.write(u"\u0169\3\2\2\2\u0135\u0137\t\5\2\2\u0136\u0138\5@!\2")
167         buf.write(u"\u0137\u0136\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u0139")
168         buf.write(u"\3\2\2\2\u0139\u013a\7\t\2\2\u013a\u013b\58\35\2\u013b")
169         buf.write(u"\u013c\7\n\2\2\u013c\u0169\3\2\2\2\u013d\u0144\7\22\2")
170         buf.write(u"\2\u013e\u013f\5@!\2\u013f\u0140\5B\"\2\u0140\u0145\3")
171         buf.write(u"\2\2\2\u0141\u0142\5B\"\2\u0142\u0143\5@!\2\u0143\u0145")
172         buf.write(u"\3\2\2\2\u0144\u013e\3\2\2\2\u0144\u0141\3\2\2\2\u0144")
173         buf.write(u"\u0145\3\2\2\2\u0145\u014c\3\2\2\2\u0146\u0148\5\n\6")
174         buf.write(u"\2\u0147\u0146\3\2\2\2\u0147\u0148\3\2\2\2\u0148\u0149")
175         buf.write(u"\3\2\2\2\u0149\u014d\7\62\2\2\u014a\u014d\5\62\32\2\u014b")
176         buf.write(u"\u014d\5\n\6\2\u014c\u0147\3\2\2\2\u014c\u014a\3\2\2")
177         buf.write(u"\2\u014c\u014b\3\2\2\2\u014d\u0169\3\2\2\2\u014e\u0153")
178         buf.write(u"\7)\2\2\u014f\u0150\7\r\2\2\u0150\u0151\5\b\5\2\u0151")
179         buf.write(u"\u0152\7\16\2\2\u0152\u0154\3\2\2\2\u0153\u014f\3\2\2")
180         buf.write(u"\2\u0153\u0154\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u0156")
181         buf.write(u"\7\13\2\2\u0156\u0157\5\b\5\2\u0157\u0158\7\f\2\2\u0158")
182         buf.write(u"\u0169\3\2\2\2\u0159\u0160\t\7\2\2\u015a\u015b\5D#\2")
183         buf.write(u"\u015b\u015c\5B\"\2\u015c\u0161\3\2\2\2\u015d\u015e\5")
184         buf.write(u"B\"\2\u015e\u015f\5D#\2\u015f\u0161\3\2\2\2\u0160\u015a")
185         buf.write(u"\3\2\2\2\u0160\u015d\3\2\2\2\u0161\u0162\3\2\2\2\u0162")
186         buf.write(u"\u0163\5\f\7\2\u0163\u0169\3\2\2\2\u0164\u0165\7\20\2")
187         buf.write(u"\2\u0165\u0166\5:\36\2\u0166\u0167\5\f\7\2\u0167\u0169")
188         buf.write(u"\3\2\2\2\u0168\u011f\3\2\2\2\u0168\u0135\3\2\2\2\u0168")
189         buf.write(u"\u013d\3\2\2\2\u0168\u014e\3\2\2\2\u0168\u0159\3\2\2")
190         buf.write(u"\2\u0168\u0164\3\2\2\2\u0169\67\3\2\2\2\u016a\u016b\5")
191         buf.write(u"\b\5\2\u016b\u016c\7\3\2\2\u016c\u016d\58\35\2\u016d")
192         buf.write(u"\u0170\3\2\2\2\u016e\u0170\5\b\5\2\u016f\u016a\3\2\2")
193         buf.write(u"\2\u016f\u016e\3\2\2\2\u01709\3\2\2\2\u0171\u0172\7/")
194         buf.write(u"\2\2\u0172\u0173\7\13\2\2\u0173\u0174\t\5\2\2\u0174\u0175")
195         buf.write(u"\7\21\2\2\u0175\u017a\5\b\5\2\u0176\u0177\7\60\2\2\u0177")
196         buf.write(u"\u0178\7\13\2\2\u0178\u0179\t\3\2\2\u0179\u017b\7\f\2")
197         buf.write(u"\2\u017a\u0176\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017c")
198         buf.write(u"\3\2\2\2\u017c\u017d\7\f\2\2\u017d;\3\2\2\2\u017e\u0184")
199         buf.write(u"\5\b\5\2\u017f\u0180\5\b\5\2\u0180\u0181\7\3\2\2\u0181")
200         buf.write(u"\u0182\5<\37\2\u0182\u0184\3\2\2\2\u0183\u017e\3\2\2")
201         buf.write(u"\2\u0183\u017f\3\2\2\2\u0184=\3\2\2\2\u0185\u0186\5\16")
202         buf.write(u"\b\2\u0186?\3\2\2\2\u0187\u018d\7/\2\2\u0188\u018e\5")
203         buf.write(u",\27\2\u0189\u018a\7\13\2\2\u018a\u018b\5\b\5\2\u018b")
204         buf.write(u"\u018c\7\f\2\2\u018c\u018e\3\2\2\2\u018d\u0188\3\2\2")
205         buf.write(u"\2\u018d\u0189\3\2\2\2\u018eA\3\2\2\2\u018f\u0195\7\60")
206         buf.write(u"\2\2\u0190\u0196\5,\27\2\u0191\u0192\7\13\2\2\u0192\u0193")
207         buf.write(u"\5\b\5\2\u0193\u0194\7\f\2\2\u0194\u0196\3\2\2\2\u0195")
208         buf.write(u"\u0190\3\2\2\2\u0195\u0191\3\2\2\2\u0196C\3\2\2\2\u0197")
209         buf.write(u"\u0198\7/\2\2\u0198\u0199\7\13\2\2\u0199\u019a\5\6\4")
210         buf.write(u"\2\u019a\u019b\7\f\2\2\u019bE\3\2\2\2\u019c\u019d\7/")
211         buf.write(u"\2\2\u019d\u019e\7\13\2\2\u019e\u019f\5\6\4\2\u019f\u01a0")
212         buf.write(u"\7\f\2\2\u01a0G\3\2\2\2.Rcny\u0081\u0083\u008b\u008e")
213         buf.write(u"\u0094\u009b\u00a0\u00a8\u00ae\u00b6\u00c4\u00c7\u00cb")
214         buf.write(u"\u00d8\u00db\u00df\u00e7\u00ed\u00fb\u0103\u0108\u0112")
215         buf.write(u"\u0121\u0124\u0127\u012a\u012c\u0133\u0137\u0144\u0147")
216         buf.write(u"\u014c\u0153\u0160\u0168\u016f\u017a\u0183\u018d\u0195")
217         return buf.getvalue()
218 
219 
220 class LaTeXParser ( Parser ):
221 
222     grammarFileName = "LaTeX.g4"
223 
224     atn = ATNDeserializer().deserialize(serializedATN())
225 
226     decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]
227 
228     sharedContextCache = PredictionContextCache()
229 
230     literalNames = [ u"<INVALID>", u"','", u"<INVALID>", u"'+'", u"'-'",
231                      u"'*'", u"'/'", u"'('", u"')'", u"'{'", u"'}'", u"'['",
232                      u"']'", u"'|'", u"'\\lim'", u"<INVALID>", u"'\\int'",
233                      u"'\\sum'", u"'\\prod'", u"'\\log'", u"'\\ln'", u"'\\sin'",
234                      u"'\\cos'", u"'\\tan'", u"'\\csc'", u"'\\sec'", u"'\\cot'",
235                      u"'\\arcsin'", u"'\\arccos'", u"'\\arctan'", u"'\\arccsc'",
236                      u"'\\arcsec'", u"'\\arccot'", u"'\\sinh'", u"'\\cosh'",
237                      u"'\\tanh'", u"'\\arsinh'", u"'\\arcosh'", u"'\\artanh'",
238                      u"'\\sqrt'", u"'\\times'", u"'\\cdot'", u"'\\div'",
239                      u"'\\frac'", u"'\\mathit'", u"'_'", u"'^'", u"':'",
240                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"'='", u"'<'",
241                      u"'\\leq'", u"'>'", u"'\\geq'", u"'!'" ]
242 
243     symbolicNames = [ u"<INVALID>", u"<INVALID>", u"WS", u"ADD", u"SUB",
244                       u"MUL", u"DIV", u"L_PAREN", u"R_PAREN", u"L_BRACE",
245                       u"R_BRACE", u"L_BRACKET", u"R_BRACKET", u"BAR", u"FUNC_LIM",
246                       u"LIM_APPROACH_SYM", u"FUNC_INT", u"FUNC_SUM", u"FUNC_PROD",
247                       u"FUNC_LOG", u"FUNC_LN", u"FUNC_SIN", u"FUNC_COS",
248                       u"FUNC_TAN", u"FUNC_CSC", u"FUNC_SEC", u"FUNC_COT",
249                       u"FUNC_ARCSIN", u"FUNC_ARCCOS", u"FUNC_ARCTAN", u"FUNC_ARCCSC",
250                       u"FUNC_ARCSEC", u"FUNC_ARCCOT", u"FUNC_SINH", u"FUNC_COSH",
251                       u"FUNC_TANH", u"FUNC_ARSINH", u"FUNC_ARCOSH", u"FUNC_ARTANH",
252                       u"FUNC_SQRT", u"CMD_TIMES", u"CMD_CDOT", u"CMD_DIV",
253                       u"CMD_FRAC", u"CMD_MATHIT", u"UNDERSCORE", u"CARET",
254                       u"COLON", u"DIFFERENTIAL", u"LETTER", u"NUMBER", u"EQUAL",
255                       u"LT", u"LTE", u"GT", u"GTE", u"BANG", u"SYMBOL" ]
256 
257     RULE_math = 0
258     RULE_relation = 1
259     RULE_equality = 2
260     RULE_expr = 3
261     RULE_additive = 4
262     RULE_mp = 5
263     RULE_mp_nofunc = 6
264     RULE_unary = 7
265     RULE_unary_nofunc = 8
266     RULE_postfix = 9
267     RULE_postfix_nofunc = 10
268     RULE_postfix_op = 11
269     RULE_eval_at = 12
270     RULE_eval_at_sub = 13
271     RULE_eval_at_sup = 14
272     RULE_exp = 15
273     RULE_exp_nofunc = 16
274     RULE_comp = 17
275     RULE_comp_nofunc = 18
276     RULE_group = 19
277     RULE_abs_group = 20
278     RULE_atom = 21
279     RULE_mathit = 22
280     RULE_mathit_text = 23
281     RULE_frac = 24
282     RULE_func_normal = 25
283     RULE_func = 26
284     RULE_args = 27
285     RULE_limit_sub = 28
286     RULE_func_arg = 29
287     RULE_func_arg_noparens = 30
288     RULE_subexpr = 31
289     RULE_supexpr = 32
290     RULE_subeq = 33
291     RULE_supeq = 34
292 
293     ruleNames =  [ u"math", u"relation", u"equality", u"expr", u"additive",
294                    u"mp", u"mp_nofunc", u"unary", u"unary_nofunc", u"postfix",
295                    u"postfix_nofunc", u"postfix_op", u"eval_at", u"eval_at_sub",
296                    u"eval_at_sup", u"exp", u"exp_nofunc", u"comp", u"comp_nofunc",
297                    u"group", u"abs_group", u"atom", u"mathit", u"mathit_text",
298                    u"frac", u"func_normal", u"func", u"args", u"limit_sub",
299                    u"func_arg", u"func_arg_noparens", u"subexpr", u"supexpr",
300                    u"subeq", u"supeq" ]
301 
302     EOF = Token.EOF
303     T__0=1
304     WS=2
305     ADD=3
306     SUB=4
307     MUL=5
308     DIV=6
309     L_PAREN=7
310     R_PAREN=8
311     L_BRACE=9
312     R_BRACE=10
313     L_BRACKET=11
314     R_BRACKET=12
315     BAR=13
316     FUNC_LIM=14
317     LIM_APPROACH_SYM=15
318     FUNC_INT=16
319     FUNC_SUM=17
320     FUNC_PROD=18
321     FUNC_LOG=19
322     FUNC_LN=20
323     FUNC_SIN=21
324     FUNC_COS=22
325     FUNC_TAN=23
326     FUNC_CSC=24
327     FUNC_SEC=25
328     FUNC_COT=26
329     FUNC_ARCSIN=27
330     FUNC_ARCCOS=28
331     FUNC_ARCTAN=29
332     FUNC_ARCCSC=30
333     FUNC_ARCSEC=31
334     FUNC_ARCCOT=32
335     FUNC_SINH=33
336     FUNC_COSH=34
337     FUNC_TANH=35
338     FUNC_ARSINH=36
339     FUNC_ARCOSH=37
340     FUNC_ARTANH=38
341     FUNC_SQRT=39
342     CMD_TIMES=40
343     CMD_CDOT=41
344     CMD_DIV=42
345     CMD_FRAC=43
346     CMD_MATHIT=44
347     UNDERSCORE=45
348     CARET=46
349     COLON=47
350     DIFFERENTIAL=48
351     LETTER=49
352     NUMBER=50
353     EQUAL=51
354     LT=52
355     LTE=53
356     GT=54
357     GTE=55
358     BANG=56
359     SYMBOL=57
360 
361     def __init__(self, input, output=sys.stdout):
362         super(LaTeXParser, self).__init__(input, output=output)
363         self.checkVersion("4.7.1")
364         self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
365         self._predicates = None
366 
367 
368 
369     class MathContext(ParserRuleContext):
370 
371         def __init__(self, parser, parent=None, invokingState=-1):
372             super(LaTeXParser.MathContext, self).__init__(parent, invokingState)
373             self.parser = parser
374 
375         def relation(self):
376             return self.getTypedRuleContext(LaTeXParser.RelationContext,0)
377 
378 
379         def getRuleIndex(self):
380             return LaTeXParser.RULE_math
381 
382 
383 
384 
385     def math(self):
386 
387         localctx = LaTeXParser.MathContext(self, self._ctx, self.state)
388         self.enterRule(localctx, 0, self.RULE_math)
389         try:
390             self.enterOuterAlt(localctx, 1)
391             self.state = 70
392             self.relation(0)
393         except RecognitionException as re:
394             localctx.exception = re
395             self._errHandler.reportError(self, re)
396             self._errHandler.recover(self, re)
397         finally:
398             self.exitRule()
399         return localctx
400 
401     class RelationContext(ParserRuleContext):
402 
403         def __init__(self, parser, parent=None, invokingState=-1):
404             super(LaTeXParser.RelationContext, self).__init__(parent, invokingState)
405             self.parser = parser
406 
407         def expr(self):
408             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
409 
410 
411         def relation(self, i=None):
412             if i is None:
413                 return self.getTypedRuleContexts(LaTeXParser.RelationContext)
414             else:
415                 return self.getTypedRuleContext(LaTeXParser.RelationContext,i)
416 
417 
418         def EQUAL(self):
419             return self.getToken(LaTeXParser.EQUAL, 0)
420 
421         def LT(self):
422             return self.getToken(LaTeXParser.LT, 0)
423 
424         def LTE(self):
425             return self.getToken(LaTeXParser.LTE, 0)
426 
427         def GT(self):
428             return self.getToken(LaTeXParser.GT, 0)
429 
430         def GTE(self):
431             return self.getToken(LaTeXParser.GTE, 0)
432 
433         def getRuleIndex(self):
434             return LaTeXParser.RULE_relation
435 
436 
437 
438     def relation(self, _p=0):
439         _parentctx = self._ctx
440         _parentState = self.state
441         localctx = LaTeXParser.RelationContext(self, self._ctx, _parentState)
442         _prevctx = localctx
443         _startState = 2
444         self.enterRecursionRule(localctx, 2, self.RULE_relation, _p)
445         self._la = 0 # Token type
446         try:
447             self.enterOuterAlt(localctx, 1)
448             self.state = 73
449             self.expr()
450             self._ctx.stop = self._input.LT(-1)
451             self.state = 80
452             self._errHandler.sync(self)
453             _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
454             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
455                 if _alt==1:
456                     if self._parseListeners is not None:
457                         self.triggerExitRuleEvent()
458                     _prevctx = localctx
459                     localctx = LaTeXParser.RelationContext(self, _parentctx, _parentState)
460                     self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
461                     self.state = 75
462                     if not self.precpred(self._ctx, 2):
463                         from antlr4.error.Errors import FailedPredicateException
464                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
465                     self.state = 76
466                     _la = self._input.LA(1)
467                     if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.EQUAL) | (1 << LaTeXParser.LT) | (1 << LaTeXParser.LTE) | (1 << LaTeXParser.GT) | (1 << LaTeXParser.GTE))) != 0)):
468                         self._errHandler.recoverInline(self)
469                     else:
470                         self._errHandler.reportMatch(self)
471                         self.consume()
472                     self.state = 77
473                     self.relation(3)
474                 self.state = 82
475                 self._errHandler.sync(self)
476                 _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
477 
478         except RecognitionException as re:
479             localctx.exception = re
480             self._errHandler.reportError(self, re)
481             self._errHandler.recover(self, re)
482         finally:
483             self.unrollRecursionContexts(_parentctx)
484         return localctx
485 
486     class EqualityContext(ParserRuleContext):
487 
488         def __init__(self, parser, parent=None, invokingState=-1):
489             super(LaTeXParser.EqualityContext, self).__init__(parent, invokingState)
490             self.parser = parser
491 
492         def expr(self, i=None):
493             if i is None:
494                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
495             else:
496                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
497 
498 
499         def EQUAL(self):
500             return self.getToken(LaTeXParser.EQUAL, 0)
501 
502         def getRuleIndex(self):
503             return LaTeXParser.RULE_equality
504 
505 
506 
507 
508     def equality(self):
509 
510         localctx = LaTeXParser.EqualityContext(self, self._ctx, self.state)
511         self.enterRule(localctx, 4, self.RULE_equality)
512         try:
513             self.enterOuterAlt(localctx, 1)
514             self.state = 83
515             self.expr()
516             self.state = 84
517             self.match(LaTeXParser.EQUAL)
518             self.state = 85
519             self.expr()
520         except RecognitionException as re:
521             localctx.exception = re
522             self._errHandler.reportError(self, re)
523             self._errHandler.recover(self, re)
524         finally:
525             self.exitRule()
526         return localctx
527 
528     class ExprContext(ParserRuleContext):
529 
530         def __init__(self, parser, parent=None, invokingState=-1):
531             super(LaTeXParser.ExprContext, self).__init__(parent, invokingState)
532             self.parser = parser
533 
534         def additive(self):
535             return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)
536 
537 
538         def getRuleIndex(self):
539             return LaTeXParser.RULE_expr
540 
541 
542 
543 
544     def expr(self):
545 
546         localctx = LaTeXParser.ExprContext(self, self._ctx, self.state)
547         self.enterRule(localctx, 6, self.RULE_expr)
548         try:
549             self.enterOuterAlt(localctx, 1)
550             self.state = 87
551             self.additive(0)
552         except RecognitionException as re:
553             localctx.exception = re
554             self._errHandler.reportError(self, re)
555             self._errHandler.recover(self, re)
556         finally:
557             self.exitRule()
558         return localctx
559 
560     class AdditiveContext(ParserRuleContext):
561 
562         def __init__(self, parser, parent=None, invokingState=-1):
563             super(LaTeXParser.AdditiveContext, self).__init__(parent, invokingState)
564             self.parser = parser
565 
566         def mp(self):
567             return self.getTypedRuleContext(LaTeXParser.MpContext,0)
568 
569 
570         def additive(self, i=None):
571             if i is None:
572                 return self.getTypedRuleContexts(LaTeXParser.AdditiveContext)
573             else:
574                 return self.getTypedRuleContext(LaTeXParser.AdditiveContext,i)
575 
576 
577         def ADD(self):
578             return self.getToken(LaTeXParser.ADD, 0)
579 
580         def SUB(self):
581             return self.getToken(LaTeXParser.SUB, 0)
582 
583         def getRuleIndex(self):
584             return LaTeXParser.RULE_additive
585 
586 
587 
588     def additive(self, _p=0):
589         _parentctx = self._ctx
590         _parentState = self.state
591         localctx = LaTeXParser.AdditiveContext(self, self._ctx, _parentState)
592         _prevctx = localctx
593         _startState = 8
594         self.enterRecursionRule(localctx, 8, self.RULE_additive, _p)
595         self._la = 0 # Token type
596         try:
597             self.enterOuterAlt(localctx, 1)
598             self.state = 90
599             self.mp(0)
600             self._ctx.stop = self._input.LT(-1)
601             self.state = 97
602             self._errHandler.sync(self)
603             _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
604             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
605                 if _alt==1:
606                     if self._parseListeners is not None:
607                         self.triggerExitRuleEvent()
608                     _prevctx = localctx
609                     localctx = LaTeXParser.AdditiveContext(self, _parentctx, _parentState)
610                     self.pushNewRecursionContext(localctx, _startState, self.RULE_additive)
611                     self.state = 92
612                     if not self.precpred(self._ctx, 2):
613                         from antlr4.error.Errors import FailedPredicateException
614                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
615                     self.state = 93
616                     _la = self._input.LA(1)
617                     if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
618                         self._errHandler.recoverInline(self)
619                     else:
620                         self._errHandler.reportMatch(self)
621                         self.consume()
622                     self.state = 94
623                     self.additive(3)
624                 self.state = 99
625                 self._errHandler.sync(self)
626                 _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
627 
628         except RecognitionException as re:
629             localctx.exception = re
630             self._errHandler.reportError(self, re)
631             self._errHandler.recover(self, re)
632         finally:
633             self.unrollRecursionContexts(_parentctx)
634         return localctx
635 
636     class MpContext(ParserRuleContext):
637 
638         def __init__(self, parser, parent=None, invokingState=-1):
639             super(LaTeXParser.MpContext, self).__init__(parent, invokingState)
640             self.parser = parser
641 
642         def unary(self):
643             return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)
644 
645 
646         def mp(self, i=None):
647             if i is None:
648                 return self.getTypedRuleContexts(LaTeXParser.MpContext)
649             else:
650                 return self.getTypedRuleContext(LaTeXParser.MpContext,i)
651 
652 
653         def MUL(self):
654             return self.getToken(LaTeXParser.MUL, 0)
655 
656         def CMD_TIMES(self):
657             return self.getToken(LaTeXParser.CMD_TIMES, 0)
658 
659         def CMD_CDOT(self):
660             return self.getToken(LaTeXParser.CMD_CDOT, 0)
661 
662         def DIV(self):
663             return self.getToken(LaTeXParser.DIV, 0)
664 
665         def CMD_DIV(self):
666             return self.getToken(LaTeXParser.CMD_DIV, 0)
667 
668         def COLON(self):
669             return self.getToken(LaTeXParser.COLON, 0)
670 
671         def getRuleIndex(self):
672             return LaTeXParser.RULE_mp
673 
674 
675 
676     def mp(self, _p=0):
677         _parentctx = self._ctx
678         _parentState = self.state
679         localctx = LaTeXParser.MpContext(self, self._ctx, _parentState)
680         _prevctx = localctx
681         _startState = 10
682         self.enterRecursionRule(localctx, 10, self.RULE_mp, _p)
683         self._la = 0 # Token type
684         try:
685             self.enterOuterAlt(localctx, 1)
686             self.state = 101
687             self.unary()
688             self._ctx.stop = self._input.LT(-1)
689             self.state = 108
690             self._errHandler.sync(self)
691             _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
692             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
693                 if _alt==1:
694                     if self._parseListeners is not None:
695                         self.triggerExitRuleEvent()
696                     _prevctx = localctx
697                     localctx = LaTeXParser.MpContext(self, _parentctx, _parentState)
698                     self.pushNewRecursionContext(localctx, _startState, self.RULE_mp)
699                     self.state = 103
700                     if not self.precpred(self._ctx, 2):
701                         from antlr4.error.Errors import FailedPredicateException
702                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
703                     self.state = 104
704                     _la = self._input.LA(1)
705                     if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.MUL) | (1 << LaTeXParser.DIV) | (1 << LaTeXParser.CMD_TIMES) | (1 << LaTeXParser.CMD_CDOT) | (1 << LaTeXParser.CMD_DIV) | (1 << LaTeXParser.COLON))) != 0)):
706                         self._errHandler.recoverInline(self)
707                     else:
708                         self._errHandler.reportMatch(self)
709                         self.consume()
710                     self.state = 105
711                     self.mp(3)
712                 self.state = 110
713                 self._errHandler.sync(self)
714                 _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
715 
716         except RecognitionException as re:
717             localctx.exception = re
718             self._errHandler.reportError(self, re)
719             self._errHandler.recover(self, re)
720         finally:
721             self.unrollRecursionContexts(_parentctx)
722         return localctx
723 
724     class Mp_nofuncContext(ParserRuleContext):
725 
726         def __init__(self, parser, parent=None, invokingState=-1):
727             super(LaTeXParser.Mp_nofuncContext, self).__init__(parent, invokingState)
728             self.parser = parser
729 
730         def unary_nofunc(self):
731             return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)
732 
733 
734         def mp_nofunc(self, i=None):
735             if i is None:
736                 return self.getTypedRuleContexts(LaTeXParser.Mp_nofuncContext)
737             else:
738                 return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,i)
739 
740 
741         def MUL(self):
742             return self.getToken(LaTeXParser.MUL, 0)
743 
744         def CMD_TIMES(self):
745             return self.getToken(LaTeXParser.CMD_TIMES, 0)
746 
747         def CMD_CDOT(self):
748             return self.getToken(LaTeXParser.CMD_CDOT, 0)
749 
750         def DIV(self):
751             return self.getToken(LaTeXParser.DIV, 0)
752 
753         def CMD_DIV(self):
754             return self.getToken(LaTeXParser.CMD_DIV, 0)
755 
756         def COLON(self):
757             return self.getToken(LaTeXParser.COLON, 0)
758 
759         def getRuleIndex(self):
760             return LaTeXParser.RULE_mp_nofunc
761 
762 
763 
764     def mp_nofunc(self, _p=0):
765         _parentctx = self._ctx
766         _parentState = self.state
767         localctx = LaTeXParser.Mp_nofuncContext(self, self._ctx, _parentState)
768         _prevctx = localctx
769         _startState = 12
770         self.enterRecursionRule(localctx, 12, self.RULE_mp_nofunc, _p)
771         self._la = 0 # Token type
772         try:
773             self.enterOuterAlt(localctx, 1)
774             self.state = 112
775             self.unary_nofunc()
776             self._ctx.stop = self._input.LT(-1)
777             self.state = 119
778             self._errHandler.sync(self)
779             _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
780             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
781                 if _alt==1:
782                     if self._parseListeners is not None:
783                         self.triggerExitRuleEvent()
784                     _prevctx = localctx
785                     localctx = LaTeXParser.Mp_nofuncContext(self, _parentctx, _parentState)
786                     self.pushNewRecursionContext(localctx, _startState, self.RULE_mp_nofunc)
787                     self.state = 114
788                     if not self.precpred(self._ctx, 2):
789                         from antlr4.error.Errors import FailedPredicateException
790                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
791                     self.state = 115
792                     _la = self._input.LA(1)
793                     if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.MUL) | (1 << LaTeXParser.DIV) | (1 << LaTeXParser.CMD_TIMES) | (1 << LaTeXParser.CMD_CDOT) | (1 << LaTeXParser.CMD_DIV) | (1 << LaTeXParser.COLON))) != 0)):
794                         self._errHandler.recoverInline(self)
795                     else:
796                         self._errHandler.reportMatch(self)
797                         self.consume()
798                     self.state = 116
799                     self.mp_nofunc(3)
800                 self.state = 121
801                 self._errHandler.sync(self)
802                 _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
803 
804         except RecognitionException as re:
805             localctx.exception = re
806             self._errHandler.reportError(self, re)
807             self._errHandler.recover(self, re)
808         finally:
809             self.unrollRecursionContexts(_parentctx)
810         return localctx
811 
812     class UnaryContext(ParserRuleContext):
813 
814         def __init__(self, parser, parent=None, invokingState=-1):
815             super(LaTeXParser.UnaryContext, self).__init__(parent, invokingState)
816             self.parser = parser
817 
818         def unary(self):
819             return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)
820 
821 
822         def ADD(self):
823             return self.getToken(LaTeXParser.ADD, 0)
824 
825         def SUB(self):
826             return self.getToken(LaTeXParser.SUB, 0)
827 
828         def postfix(self, i=None):
829             if i is None:
830                 return self.getTypedRuleContexts(LaTeXParser.PostfixContext)
831             else:
832                 return self.getTypedRuleContext(LaTeXParser.PostfixContext,i)
833 
834 
835         def getRuleIndex(self):
836             return LaTeXParser.RULE_unary
837 
838 
839 
840 
841     def unary(self):
842 
843         localctx = LaTeXParser.UnaryContext(self, self._ctx, self.state)
844         self.enterRule(localctx, 14, self.RULE_unary)
845         self._la = 0 # Token type
846         try:
847             self.state = 129
848             self._errHandler.sync(self)
849             token = self._input.LA(1)
850             if token in [LaTeXParser.ADD, LaTeXParser.SUB]:
851                 self.enterOuterAlt(localctx, 1)
852                 self.state = 122
853                 _la = self._input.LA(1)
854                 if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
855                     self._errHandler.recoverInline(self)
856                 else:
857                     self._errHandler.reportMatch(self)
858                     self.consume()
859                 self.state = 123
860                 self.unary()
861                 pass
862             elif token in [LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.FUNC_SQRT, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
863                 self.enterOuterAlt(localctx, 2)
864                 self.state = 125
865                 self._errHandler.sync(self)
866                 _alt = 1
867                 while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
868                     if _alt == 1:
869                         self.state = 124
870                         self.postfix()
871 
872                     else:
873                         raise NoViableAltException(self)
874                     self.state = 127
875                     self._errHandler.sync(self)
876                     _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
877 
878                 pass
879             else:
880                 raise NoViableAltException(self)
881 
882         except RecognitionException as re:
883             localctx.exception = re
884             self._errHandler.reportError(self, re)
885             self._errHandler.recover(self, re)
886         finally:
887             self.exitRule()
888         return localctx
889 
890     class Unary_nofuncContext(ParserRuleContext):
891 
892         def __init__(self, parser, parent=None, invokingState=-1):
893             super(LaTeXParser.Unary_nofuncContext, self).__init__(parent, invokingState)
894             self.parser = parser
895 
896         def unary_nofunc(self):
897             return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)
898 
899 
900         def ADD(self):
901             return self.getToken(LaTeXParser.ADD, 0)
902 
903         def SUB(self):
904             return self.getToken(LaTeXParser.SUB, 0)
905 
906         def postfix(self):
907             return self.getTypedRuleContext(LaTeXParser.PostfixContext,0)
908 
909 
910         def postfix_nofunc(self, i=None):
911             if i is None:
912                 return self.getTypedRuleContexts(LaTeXParser.Postfix_nofuncContext)
913             else:
914                 return self.getTypedRuleContext(LaTeXParser.Postfix_nofuncContext,i)
915 
916 
917         def getRuleIndex(self):
918             return LaTeXParser.RULE_unary_nofunc
919 
920 
921 
922 
923     def unary_nofunc(self):
924 
925         localctx = LaTeXParser.Unary_nofuncContext(self, self._ctx, self.state)
926         self.enterRule(localctx, 16, self.RULE_unary_nofunc)
927         self._la = 0 # Token type
928         try:
929             self.state = 140
930             self._errHandler.sync(self)
931             token = self._input.LA(1)
932             if token in [LaTeXParser.ADD, LaTeXParser.SUB]:
933                 self.enterOuterAlt(localctx, 1)
934                 self.state = 131
935                 _la = self._input.LA(1)
936                 if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
937                     self._errHandler.recoverInline(self)
938                 else:
939                     self._errHandler.reportMatch(self)
940                     self.consume()
941                 self.state = 132
942                 self.unary_nofunc()
943                 pass
944             elif token in [LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.FUNC_SQRT, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
945                 self.enterOuterAlt(localctx, 2)
946                 self.state = 133
947                 self.postfix()
948                 self.state = 137
949                 self._errHandler.sync(self)
950                 _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
951                 while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
952                     if _alt==1:
953                         self.state = 134
954                         self.postfix_nofunc()
955                     self.state = 139
956                     self._errHandler.sync(self)
957                     _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
958 
959                 pass
960             else:
961                 raise NoViableAltException(self)
962 
963         except RecognitionException as re:
964             localctx.exception = re
965             self._errHandler.reportError(self, re)
966             self._errHandler.recover(self, re)
967         finally:
968             self.exitRule()
969         return localctx
970 
971     class PostfixContext(ParserRuleContext):
972 
973         def __init__(self, parser, parent=None, invokingState=-1):
974             super(LaTeXParser.PostfixContext, self).__init__(parent, invokingState)
975             self.parser = parser
976 
977         def exp(self):
978             return self.getTypedRuleContext(LaTeXParser.ExpContext,0)
979 
980 
981         def postfix_op(self, i=None):
982             if i is None:
983                 return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
984             else:
985                 return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)
986 
987 
988         def getRuleIndex(self):
989             return LaTeXParser.RULE_postfix
990 
991 
992 
993 
994     def postfix(self):
995 
996         localctx = LaTeXParser.PostfixContext(self, self._ctx, self.state)
997         self.enterRule(localctx, 18, self.RULE_postfix)
998         try:
999             self.enterOuterAlt(localctx, 1)
1000             self.state = 142
1001             self.exp(0)
1002             self.state = 146
1003             self._errHandler.sync(self)
1004             _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
1005             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1006                 if _alt==1:
1007                     self.state = 143
1008                     self.postfix_op()
1009                 self.state = 148
1010                 self._errHandler.sync(self)
1011                 _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
1012 
1013         except RecognitionException as re:
1014             localctx.exception = re
1015             self._errHandler.reportError(self, re)
1016             self._errHandler.recover(self, re)
1017         finally:
1018             self.exitRule()
1019         return localctx
1020 
1021     class Postfix_nofuncContext(ParserRuleContext):
1022 
1023         def __init__(self, parser, parent=None, invokingState=-1):
1024             super(LaTeXParser.Postfix_nofuncContext, self).__init__(parent, invokingState)
1025             self.parser = parser
1026 
1027         def exp_nofunc(self):
1028             return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)
1029 
1030 
1031         def postfix_op(self, i=None):
1032             if i is None:
1033                 return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
1034             else:
1035                 return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)
1036 
1037 
1038         def getRuleIndex(self):
1039             return LaTeXParser.RULE_postfix_nofunc
1040 
1041 
1042 
1043 
1044     def postfix_nofunc(self):
1045 
1046         localctx = LaTeXParser.Postfix_nofuncContext(self, self._ctx, self.state)
1047         self.enterRule(localctx, 20, self.RULE_postfix_nofunc)
1048         try:
1049             self.enterOuterAlt(localctx, 1)
1050             self.state = 149
1051             self.exp_nofunc(0)
1052             self.state = 153
1053             self._errHandler.sync(self)
1054             _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
1055             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1056                 if _alt==1:
1057                     self.state = 150
1058                     self.postfix_op()
1059                 self.state = 155
1060                 self._errHandler.sync(self)
1061                 _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
1062 
1063         except RecognitionException as re:
1064             localctx.exception = re
1065             self._errHandler.reportError(self, re)
1066             self._errHandler.recover(self, re)
1067         finally:
1068             self.exitRule()
1069         return localctx
1070 
1071     class Postfix_opContext(ParserRuleContext):
1072 
1073         def __init__(self, parser, parent=None, invokingState=-1):
1074             super(LaTeXParser.Postfix_opContext, self).__init__(parent, invokingState)
1075             self.parser = parser
1076 
1077         def BANG(self):
1078             return self.getToken(LaTeXParser.BANG, 0)
1079 
1080         def eval_at(self):
1081             return self.getTypedRuleContext(LaTeXParser.Eval_atContext,0)
1082 
1083 
1084         def getRuleIndex(self):
1085             return LaTeXParser.RULE_postfix_op
1086 
1087 
1088 
1089 
1090     def postfix_op(self):
1091 
1092         localctx = LaTeXParser.Postfix_opContext(self, self._ctx, self.state)
1093         self.enterRule(localctx, 22, self.RULE_postfix_op)
1094         try:
1095             self.state = 158
1096             self._errHandler.sync(self)
1097             token = self._input.LA(1)
1098             if token in [LaTeXParser.BANG]:
1099                 self.enterOuterAlt(localctx, 1)
1100                 self.state = 156
1101                 self.match(LaTeXParser.BANG)
1102                 pass
1103             elif token in [LaTeXParser.BAR]:
1104                 self.enterOuterAlt(localctx, 2)
1105                 self.state = 157
1106                 self.eval_at()
1107                 pass
1108             else:
1109                 raise NoViableAltException(self)
1110 
1111         except RecognitionException as re:
1112             localctx.exception = re
1113             self._errHandler.reportError(self, re)
1114             self._errHandler.recover(self, re)
1115         finally:
1116             self.exitRule()
1117         return localctx
1118 
1119     class Eval_atContext(ParserRuleContext):
1120 
1121         def __init__(self, parser, parent=None, invokingState=-1):
1122             super(LaTeXParser.Eval_atContext, self).__init__(parent, invokingState)
1123             self.parser = parser
1124 
1125         def BAR(self):
1126             return self.getToken(LaTeXParser.BAR, 0)
1127 
1128         def eval_at_sup(self):
1129             return self.getTypedRuleContext(LaTeXParser.Eval_at_supContext,0)
1130 
1131 
1132         def eval_at_sub(self):
1133             return self.getTypedRuleContext(LaTeXParser.Eval_at_subContext,0)
1134 
1135 
1136         def getRuleIndex(self):
1137             return LaTeXParser.RULE_eval_at
1138 
1139 
1140 
1141 
1142     def eval_at(self):
1143 
1144         localctx = LaTeXParser.Eval_atContext(self, self._ctx, self.state)
1145         self.enterRule(localctx, 24, self.RULE_eval_at)
1146         try:
1147             self.enterOuterAlt(localctx, 1)
1148             self.state = 160
1149             self.match(LaTeXParser.BAR)
1150             self.state = 166
1151             self._errHandler.sync(self)
1152             la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
1153             if la_ == 1:
1154                 self.state = 161
1155                 self.eval_at_sup()
1156                 pass
1157 
1158             elif la_ == 2:
1159                 self.state = 162
1160                 self.eval_at_sub()
1161                 pass
1162 
1163             elif la_ == 3:
1164                 self.state = 163
1165                 self.eval_at_sup()
1166                 self.state = 164
1167                 self.eval_at_sub()
1168                 pass
1169 
1170 
1171         except RecognitionException as re:
1172             localctx.exception = re
1173             self._errHandler.reportError(self, re)
1174             self._errHandler.recover(self, re)
1175         finally:
1176             self.exitRule()
1177         return localctx
1178 
1179     class Eval_at_subContext(ParserRuleContext):
1180 
1181         def __init__(self, parser, parent=None, invokingState=-1):
1182             super(LaTeXParser.Eval_at_subContext, self).__init__(parent, invokingState)
1183             self.parser = parser
1184 
1185         def UNDERSCORE(self):
1186             return self.getToken(LaTeXParser.UNDERSCORE, 0)
1187 
1188         def L_BRACE(self):
1189             return self.getToken(LaTeXParser.L_BRACE, 0)
1190 
1191         def R_BRACE(self):
1192             return self.getToken(LaTeXParser.R_BRACE, 0)
1193 
1194         def expr(self):
1195             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1196 
1197 
1198         def equality(self):
1199             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
1200 
1201 
1202         def getRuleIndex(self):
1203             return LaTeXParser.RULE_eval_at_sub
1204 
1205 
1206 
1207 
1208     def eval_at_sub(self):
1209 
1210         localctx = LaTeXParser.Eval_at_subContext(self, self._ctx, self.state)
1211         self.enterRule(localctx, 26, self.RULE_eval_at_sub)
1212         try:
1213             self.enterOuterAlt(localctx, 1)
1214             self.state = 168
1215             self.match(LaTeXParser.UNDERSCORE)
1216             self.state = 169
1217             self.match(LaTeXParser.L_BRACE)
1218             self.state = 172
1219             self._errHandler.sync(self)
1220             la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
1221             if la_ == 1:
1222                 self.state = 170
1223                 self.expr()
1224                 pass
1225 
1226             elif la_ == 2:
1227                 self.state = 171
1228                 self.equality()
1229                 pass
1230 
1231 
1232             self.state = 174
1233             self.match(LaTeXParser.R_BRACE)
1234         except RecognitionException as re:
1235             localctx.exception = re
1236             self._errHandler.reportError(self, re)
1237             self._errHandler.recover(self, re)
1238         finally:
1239             self.exitRule()
1240         return localctx
1241 
1242     class Eval_at_supContext(ParserRuleContext):
1243 
1244         def __init__(self, parser, parent=None, invokingState=-1):
1245             super(LaTeXParser.Eval_at_supContext, self).__init__(parent, invokingState)
1246             self.parser = parser
1247 
1248         def CARET(self):
1249             return self.getToken(LaTeXParser.CARET, 0)
1250 
1251         def L_BRACE(self):
1252             return self.getToken(LaTeXParser.L_BRACE, 0)
1253 
1254         def R_BRACE(self):
1255             return self.getToken(LaTeXParser.R_BRACE, 0)
1256 
1257         def expr(self):
1258             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1259 
1260 
1261         def equality(self):
1262             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
1263 
1264 
1265         def getRuleIndex(self):
1266             return LaTeXParser.RULE_eval_at_sup
1267 
1268 
1269 
1270 
1271     def eval_at_sup(self):
1272 
1273         localctx = LaTeXParser.Eval_at_supContext(self, self._ctx, self.state)
1274         self.enterRule(localctx, 28, self.RULE_eval_at_sup)
1275         try:
1276             self.enterOuterAlt(localctx, 1)
1277             self.state = 176
1278             self.match(LaTeXParser.CARET)
1279             self.state = 177
1280             self.match(LaTeXParser.L_BRACE)
1281             self.state = 180
1282             self._errHandler.sync(self)
1283             la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
1284             if la_ == 1:
1285                 self.state = 178
1286                 self.expr()
1287                 pass
1288 
1289             elif la_ == 2:
1290                 self.state = 179
1291                 self.equality()
1292                 pass
1293 
1294 
1295             self.state = 182
1296             self.match(LaTeXParser.R_BRACE)
1297         except RecognitionException as re:
1298             localctx.exception = re
1299             self._errHandler.reportError(self, re)
1300             self._errHandler.recover(self, re)
1301         finally:
1302             self.exitRule()
1303         return localctx
1304 
1305     class ExpContext(ParserRuleContext):
1306 
1307         def __init__(self, parser, parent=None, invokingState=-1):
1308             super(LaTeXParser.ExpContext, self).__init__(parent, invokingState)
1309             self.parser = parser
1310 
1311         def comp(self):
1312             return self.getTypedRuleContext(LaTeXParser.CompContext,0)
1313 
1314 
1315         def exp(self):
1316             return self.getTypedRuleContext(LaTeXParser.ExpContext,0)
1317 
1318 
1319         def CARET(self):
1320             return self.getToken(LaTeXParser.CARET, 0)
1321 
1322         def atom(self):
1323             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
1324 
1325 
1326         def L_BRACE(self):
1327             return self.getToken(LaTeXParser.L_BRACE, 0)
1328 
1329         def expr(self):
1330             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1331 
1332 
1333         def R_BRACE(self):
1334             return self.getToken(LaTeXParser.R_BRACE, 0)
1335 
1336         def subexpr(self):
1337             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
1338 
1339 
1340         def getRuleIndex(self):
1341             return LaTeXParser.RULE_exp
1342 
1343 
1344 
1345     def exp(self, _p=0):
1346         _parentctx = self._ctx
1347         _parentState = self.state
1348         localctx = LaTeXParser.ExpContext(self, self._ctx, _parentState)
1349         _prevctx = localctx
1350         _startState = 30
1351         self.enterRecursionRule(localctx, 30, self.RULE_exp, _p)
1352         try:
1353             self.enterOuterAlt(localctx, 1)
1354             self.state = 185
1355             self.comp()
1356             self._ctx.stop = self._input.LT(-1)
1357             self.state = 201
1358             self._errHandler.sync(self)
1359             _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
1360             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1361                 if _alt==1:
1362                     if self._parseListeners is not None:
1363                         self.triggerExitRuleEvent()
1364                     _prevctx = localctx
1365                     localctx = LaTeXParser.ExpContext(self, _parentctx, _parentState)
1366                     self.pushNewRecursionContext(localctx, _startState, self.RULE_exp)
1367                     self.state = 187
1368                     if not self.precpred(self._ctx, 2):
1369                         from antlr4.error.Errors import FailedPredicateException
1370                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
1371                     self.state = 188
1372                     self.match(LaTeXParser.CARET)
1373                     self.state = 194
1374                     self._errHandler.sync(self)
1375                     token = self._input.LA(1)
1376                     if token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
1377                         self.state = 189
1378                         self.atom()
1379                         pass
1380                     elif token in [LaTeXParser.L_BRACE]:
1381                         self.state = 190
1382                         self.match(LaTeXParser.L_BRACE)
1383                         self.state = 191
1384                         self.expr()
1385                         self.state = 192
1386                         self.match(LaTeXParser.R_BRACE)
1387                         pass
1388                     else:
1389                         raise NoViableAltException(self)
1390 
1391                     self.state = 197
1392                     self._errHandler.sync(self)
1393                     la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
1394                     if la_ == 1:
1395                         self.state = 196
1396                         self.subexpr()
1397 
1398 
1399                 self.state = 203
1400                 self._errHandler.sync(self)
1401                 _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
1402 
1403         except RecognitionException as re:
1404             localctx.exception = re
1405             self._errHandler.reportError(self, re)
1406             self._errHandler.recover(self, re)
1407         finally:
1408             self.unrollRecursionContexts(_parentctx)
1409         return localctx
1410 
1411     class Exp_nofuncContext(ParserRuleContext):
1412 
1413         def __init__(self, parser, parent=None, invokingState=-1):
1414             super(LaTeXParser.Exp_nofuncContext, self).__init__(parent, invokingState)
1415             self.parser = parser
1416 
1417         def comp_nofunc(self):
1418             return self.getTypedRuleContext(LaTeXParser.Comp_nofuncContext,0)
1419 
1420 
1421         def exp_nofunc(self):
1422             return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)
1423 
1424 
1425         def CARET(self):
1426             return self.getToken(LaTeXParser.CARET, 0)
1427 
1428         def atom(self):
1429             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
1430 
1431 
1432         def L_BRACE(self):
1433             return self.getToken(LaTeXParser.L_BRACE, 0)
1434 
1435         def expr(self):
1436             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1437 
1438 
1439         def R_BRACE(self):
1440             return self.getToken(LaTeXParser.R_BRACE, 0)
1441 
1442         def subexpr(self):
1443             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
1444 
1445 
1446         def getRuleIndex(self):
1447             return LaTeXParser.RULE_exp_nofunc
1448 
1449 
1450 
1451     def exp_nofunc(self, _p=0):
1452         _parentctx = self._ctx
1453         _parentState = self.state
1454         localctx = LaTeXParser.Exp_nofuncContext(self, self._ctx, _parentState)
1455         _prevctx = localctx
1456         _startState = 32
1457         self.enterRecursionRule(localctx, 32, self.RULE_exp_nofunc, _p)
1458         try:
1459             self.enterOuterAlt(localctx, 1)
1460             self.state = 205
1461             self.comp_nofunc()
1462             self._ctx.stop = self._input.LT(-1)
1463             self.state = 221
1464             self._errHandler.sync(self)
1465             _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
1466             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1467                 if _alt==1:
1468                     if self._parseListeners is not None:
1469                         self.triggerExitRuleEvent()
1470                     _prevctx = localctx
1471                     localctx = LaTeXParser.Exp_nofuncContext(self, _parentctx, _parentState)
1472                     self.pushNewRecursionContext(localctx, _startState, self.RULE_exp_nofunc)
1473                     self.state = 207
1474                     if not self.precpred(self._ctx, 2):
1475                         from antlr4.error.Errors import FailedPredicateException
1476                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
1477                     self.state = 208
1478                     self.match(LaTeXParser.CARET)
1479                     self.state = 214
1480                     self._errHandler.sync(self)
1481                     token = self._input.LA(1)
1482                     if token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
1483                         self.state = 209
1484                         self.atom()
1485                         pass
1486                     elif token in [LaTeXParser.L_BRACE]:
1487                         self.state = 210
1488                         self.match(LaTeXParser.L_BRACE)
1489                         self.state = 211
1490                         self.expr()
1491                         self.state = 212
1492                         self.match(LaTeXParser.R_BRACE)
1493                         pass
1494                     else:
1495                         raise NoViableAltException(self)
1496 
1497                     self.state = 217
1498                     self._errHandler.sync(self)
1499                     la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
1500                     if la_ == 1:
1501                         self.state = 216
1502                         self.subexpr()
1503 
1504 
1505                 self.state = 223
1506                 self._errHandler.sync(self)
1507                 _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
1508 
1509         except RecognitionException as re:
1510             localctx.exception = re
1511             self._errHandler.reportError(self, re)
1512             self._errHandler.recover(self, re)
1513         finally:
1514             self.unrollRecursionContexts(_parentctx)
1515         return localctx
1516 
1517     class CompContext(ParserRuleContext):
1518 
1519         def __init__(self, parser, parent=None, invokingState=-1):
1520             super(LaTeXParser.CompContext, self).__init__(parent, invokingState)
1521             self.parser = parser
1522 
1523         def group(self):
1524             return self.getTypedRuleContext(LaTeXParser.GroupContext,0)
1525 
1526 
1527         def abs_group(self):
1528             return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)
1529 
1530 
1531         def func(self):
1532             return self.getTypedRuleContext(LaTeXParser.FuncContext,0)
1533 
1534 
1535         def atom(self):
1536             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
1537 
1538 
1539         def frac(self):
1540             return self.getTypedRuleContext(LaTeXParser.FracContext,0)
1541 
1542 
1543         def getRuleIndex(self):
1544             return LaTeXParser.RULE_comp
1545 
1546 
1547 
1548 
1549     def comp(self):
1550 
1551         localctx = LaTeXParser.CompContext(self, self._ctx, self.state)
1552         self.enterRule(localctx, 34, self.RULE_comp)
1553         try:
1554             self.state = 229
1555             self._errHandler.sync(self)
1556             la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
1557             if la_ == 1:
1558                 self.enterOuterAlt(localctx, 1)
1559                 self.state = 224
1560                 self.group()
1561                 pass
1562 
1563             elif la_ == 2:
1564                 self.enterOuterAlt(localctx, 2)
1565                 self.state = 225
1566                 self.abs_group()
1567                 pass
1568 
1569             elif la_ == 3:
1570                 self.enterOuterAlt(localctx, 3)
1571                 self.state = 226
1572                 self.func()
1573                 pass
1574 
1575             elif la_ == 4:
1576                 self.enterOuterAlt(localctx, 4)
1577                 self.state = 227
1578                 self.atom()
1579                 pass
1580 
1581             elif la_ == 5:
1582                 self.enterOuterAlt(localctx, 5)
1583                 self.state = 228
1584                 self.frac()
1585                 pass
1586 
1587 
1588         except RecognitionException as re:
1589             localctx.exception = re
1590             self._errHandler.reportError(self, re)
1591             self._errHandler.recover(self, re)
1592         finally:
1593             self.exitRule()
1594         return localctx
1595 
1596     class Comp_nofuncContext(ParserRuleContext):
1597 
1598         def __init__(self, parser, parent=None, invokingState=-1):
1599             super(LaTeXParser.Comp_nofuncContext, self).__init__(parent, invokingState)
1600             self.parser = parser
1601 
1602         def group(self):
1603             return self.getTypedRuleContext(LaTeXParser.GroupContext,0)
1604 
1605 
1606         def abs_group(self):
1607             return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)
1608 
1609 
1610         def atom(self):
1611             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
1612 
1613 
1614         def frac(self):
1615             return self.getTypedRuleContext(LaTeXParser.FracContext,0)
1616 
1617 
1618         def getRuleIndex(self):
1619             return LaTeXParser.RULE_comp_nofunc
1620 
1621 
1622 
1623 
1624     def comp_nofunc(self):
1625 
1626         localctx = LaTeXParser.Comp_nofuncContext(self, self._ctx, self.state)
1627         self.enterRule(localctx, 36, self.RULE_comp_nofunc)
1628         try:
1629             self.state = 235
1630             self._errHandler.sync(self)
1631             token = self._input.LA(1)
1632             if token in [LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACKET]:
1633                 self.enterOuterAlt(localctx, 1)
1634                 self.state = 231
1635                 self.group()
1636                 pass
1637             elif token in [LaTeXParser.BAR]:
1638                 self.enterOuterAlt(localctx, 2)
1639                 self.state = 232
1640                 self.abs_group()
1641                 pass
1642             elif token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
1643                 self.enterOuterAlt(localctx, 3)
1644                 self.state = 233
1645                 self.atom()
1646                 pass
1647             elif token in [LaTeXParser.CMD_FRAC]:
1648                 self.enterOuterAlt(localctx, 4)
1649                 self.state = 234
1650                 self.frac()
1651                 pass
1652             else:
1653                 raise NoViableAltException(self)
1654 
1655         except RecognitionException as re:
1656             localctx.exception = re
1657             self._errHandler.reportError(self, re)
1658             self._errHandler.recover(self, re)
1659         finally:
1660             self.exitRule()
1661         return localctx
1662 
1663     class GroupContext(ParserRuleContext):
1664 
1665         def __init__(self, parser, parent=None, invokingState=-1):
1666             super(LaTeXParser.GroupContext, self).__init__(parent, invokingState)
1667             self.parser = parser
1668 
1669         def L_PAREN(self):
1670             return self.getToken(LaTeXParser.L_PAREN, 0)
1671 
1672         def expr(self):
1673             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1674 
1675 
1676         def R_PAREN(self):
1677             return self.getToken(LaTeXParser.R_PAREN, 0)
1678 
1679         def L_BRACKET(self):
1680             return self.getToken(LaTeXParser.L_BRACKET, 0)
1681 
1682         def R_BRACKET(self):
1683             return self.getToken(LaTeXParser.R_BRACKET, 0)
1684 
1685         def L_BRACE(self):
1686             return self.getToken(LaTeXParser.L_BRACE, 0)
1687 
1688         def R_BRACE(self):
1689             return self.getToken(LaTeXParser.R_BRACE, 0)
1690 
1691         def getRuleIndex(self):
1692             return LaTeXParser.RULE_group
1693 
1694 
1695 
1696 
1697     def group(self):
1698 
1699         localctx = LaTeXParser.GroupContext(self, self._ctx, self.state)
1700         self.enterRule(localctx, 38, self.RULE_group)
1701         try:
1702             self.state = 249
1703             self._errHandler.sync(self)
1704             token = self._input.LA(1)
1705             if token in [LaTeXParser.L_PAREN]:
1706                 self.enterOuterAlt(localctx, 1)
1707                 self.state = 237
1708                 self.match(LaTeXParser.L_PAREN)
1709                 self.state = 238
1710                 self.expr()
1711                 self.state = 239
1712                 self.match(LaTeXParser.R_PAREN)
1713                 pass
1714             elif token in [LaTeXParser.L_BRACKET]:
1715                 self.enterOuterAlt(localctx, 2)
1716                 self.state = 241
1717                 self.match(LaTeXParser.L_BRACKET)
1718                 self.state = 242
1719                 self.expr()
1720                 self.state = 243
1721                 self.match(LaTeXParser.R_BRACKET)
1722                 pass
1723             elif token in [LaTeXParser.L_BRACE]:
1724                 self.enterOuterAlt(localctx, 3)
1725                 self.state = 245
1726                 self.match(LaTeXParser.L_BRACE)
1727                 self.state = 246
1728                 self.expr()
1729                 self.state = 247
1730                 self.match(LaTeXParser.R_BRACE)
1731                 pass
1732             else:
1733                 raise NoViableAltException(self)
1734 
1735         except RecognitionException as re:
1736             localctx.exception = re
1737             self._errHandler.reportError(self, re)
1738             self._errHandler.recover(self, re)
1739         finally:
1740             self.exitRule()
1741         return localctx
1742 
1743     class Abs_groupContext(ParserRuleContext):
1744 
1745         def __init__(self, parser, parent=None, invokingState=-1):
1746             super(LaTeXParser.Abs_groupContext, self).__init__(parent, invokingState)
1747             self.parser = parser
1748 
1749         def BAR(self, i=None):
1750             if i is None:
1751                 return self.getTokens(LaTeXParser.BAR)
1752             else:
1753                 return self.getToken(LaTeXParser.BAR, i)
1754 
1755         def expr(self):
1756             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1757 
1758 
1759         def getRuleIndex(self):
1760             return LaTeXParser.RULE_abs_group
1761 
1762 
1763 
1764 
1765     def abs_group(self):
1766 
1767         localctx = LaTeXParser.Abs_groupContext(self, self._ctx, self.state)
1768         self.enterRule(localctx, 40, self.RULE_abs_group)
1769         try:
1770             self.enterOuterAlt(localctx, 1)
1771             self.state = 251
1772             self.match(LaTeXParser.BAR)
1773             self.state = 252
1774             self.expr()
1775             self.state = 253
1776             self.match(LaTeXParser.BAR)
1777         except RecognitionException as re:
1778             localctx.exception = re
1779             self._errHandler.reportError(self, re)
1780             self._errHandler.recover(self, re)
1781         finally:
1782             self.exitRule()
1783         return localctx
1784 
1785     class AtomContext(ParserRuleContext):
1786 
1787         def __init__(self, parser, parent=None, invokingState=-1):
1788             super(LaTeXParser.AtomContext, self).__init__(parent, invokingState)
1789             self.parser = parser
1790 
1791         def LETTER(self):
1792             return self.getToken(LaTeXParser.LETTER, 0)
1793 
1794         def SYMBOL(self):
1795             return self.getToken(LaTeXParser.SYMBOL, 0)
1796 
1797         def subexpr(self):
1798             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
1799 
1800 
1801         def NUMBER(self):
1802             return self.getToken(LaTeXParser.NUMBER, 0)
1803 
1804         def DIFFERENTIAL(self):
1805             return self.getToken(LaTeXParser.DIFFERENTIAL, 0)
1806 
1807         def mathit(self):
1808             return self.getTypedRuleContext(LaTeXParser.MathitContext,0)
1809 
1810 
1811         def getRuleIndex(self):
1812             return LaTeXParser.RULE_atom
1813 
1814 
1815 
1816 
1817     def atom(self):
1818 
1819         localctx = LaTeXParser.AtomContext(self, self._ctx, self.state)
1820         self.enterRule(localctx, 42, self.RULE_atom)
1821         self._la = 0 # Token type
1822         try:
1823             self.state = 262
1824             self._errHandler.sync(self)
1825             token = self._input.LA(1)
1826             if token in [LaTeXParser.LETTER, LaTeXParser.SYMBOL]:
1827                 self.enterOuterAlt(localctx, 1)
1828                 self.state = 255
1829                 _la = self._input.LA(1)
1830                 if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
1831                     self._errHandler.recoverInline(self)
1832                 else:
1833                     self._errHandler.reportMatch(self)
1834                     self.consume()
1835                 self.state = 257
1836                 self._errHandler.sync(self)
1837                 la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
1838                 if la_ == 1:
1839                     self.state = 256
1840                     self.subexpr()
1841 
1842 
1843                 pass
1844             elif token in [LaTeXParser.NUMBER]:
1845                 self.enterOuterAlt(localctx, 2)
1846                 self.state = 259
1847                 self.match(LaTeXParser.NUMBER)
1848                 pass
1849             elif token in [LaTeXParser.DIFFERENTIAL]:
1850                 self.enterOuterAlt(localctx, 3)
1851                 self.state = 260
1852                 self.match(LaTeXParser.DIFFERENTIAL)
1853                 pass
1854             elif token in [LaTeXParser.CMD_MATHIT]:
1855                 self.enterOuterAlt(localctx, 4)
1856                 self.state = 261
1857                 self.mathit()
1858                 pass
1859             else:
1860                 raise NoViableAltException(self)
1861 
1862         except RecognitionException as re:
1863             localctx.exception = re
1864             self._errHandler.reportError(self, re)
1865             self._errHandler.recover(self, re)
1866         finally:
1867             self.exitRule()
1868         return localctx
1869 
1870     class MathitContext(ParserRuleContext):
1871 
1872         def __init__(self, parser, parent=None, invokingState=-1):
1873             super(LaTeXParser.MathitContext, self).__init__(parent, invokingState)
1874             self.parser = parser
1875 
1876         def CMD_MATHIT(self):
1877             return self.getToken(LaTeXParser.CMD_MATHIT, 0)
1878 
1879         def L_BRACE(self):
1880             return self.getToken(LaTeXParser.L_BRACE, 0)
1881 
1882         def mathit_text(self):
1883             return self.getTypedRuleContext(LaTeXParser.Mathit_textContext,0)
1884 
1885 
1886         def R_BRACE(self):
1887             return self.getToken(LaTeXParser.R_BRACE, 0)
1888 
1889         def getRuleIndex(self):
1890             return LaTeXParser.RULE_mathit
1891 
1892 
1893 
1894 
1895     def mathit(self):
1896 
1897         localctx = LaTeXParser.MathitContext(self, self._ctx, self.state)
1898         self.enterRule(localctx, 44, self.RULE_mathit)
1899         try:
1900             self.enterOuterAlt(localctx, 1)
1901             self.state = 264
1902             self.match(LaTeXParser.CMD_MATHIT)
1903             self.state = 265
1904             self.match(LaTeXParser.L_BRACE)
1905             self.state = 266
1906             self.mathit_text()
1907             self.state = 267
1908             self.match(LaTeXParser.R_BRACE)
1909         except RecognitionException as re:
1910             localctx.exception = re
1911             self._errHandler.reportError(self, re)
1912             self._errHandler.recover(self, re)
1913         finally:
1914             self.exitRule()
1915         return localctx
1916 
1917     class Mathit_textContext(ParserRuleContext):
1918 
1919         def __init__(self, parser, parent=None, invokingState=-1):
1920             super(LaTeXParser.Mathit_textContext, self).__init__(parent, invokingState)
1921             self.parser = parser
1922 
1923         def LETTER(self, i=None):
1924             if i is None:
1925                 return self.getTokens(LaTeXParser.LETTER)
1926             else:
1927                 return self.getToken(LaTeXParser.LETTER, i)
1928 
1929         def getRuleIndex(self):
1930             return LaTeXParser.RULE_mathit_text
1931 
1932 
1933 
1934 
1935     def mathit_text(self):
1936 
1937         localctx = LaTeXParser.Mathit_textContext(self, self._ctx, self.state)
1938         self.enterRule(localctx, 46, self.RULE_mathit_text)
1939         self._la = 0 # Token type
1940         try:
1941             self.enterOuterAlt(localctx, 1)
1942             self.state = 272
1943             self._errHandler.sync(self)
1944             _la = self._input.LA(1)
1945             while _la==LaTeXParser.LETTER:
1946                 self.state = 269
1947                 self.match(LaTeXParser.LETTER)
1948                 self.state = 274
1949                 self._errHandler.sync(self)
1950                 _la = self._input.LA(1)
1951 
1952         except RecognitionException as re:
1953             localctx.exception = re
1954             self._errHandler.reportError(self, re)
1955             self._errHandler.recover(self, re)
1956         finally:
1957             self.exitRule()
1958         return localctx
1959 
1960     class FracContext(ParserRuleContext):
1961 
1962         def __init__(self, parser, parent=None, invokingState=-1):
1963             super(LaTeXParser.FracContext, self).__init__(parent, invokingState)
1964             self.parser = parser
1965             self.upper = None # ExprContext
1966             self.lower = None # ExprContext
1967 
1968         def CMD_FRAC(self):
1969             return self.getToken(LaTeXParser.CMD_FRAC, 0)
1970 
1971         def L_BRACE(self, i=None):
1972             if i is None:
1973                 return self.getTokens(LaTeXParser.L_BRACE)
1974             else:
1975                 return self.getToken(LaTeXParser.L_BRACE, i)
1976 
1977         def R_BRACE(self, i=None):
1978             if i is None:
1979                 return self.getTokens(LaTeXParser.R_BRACE)
1980             else:
1981                 return self.getToken(LaTeXParser.R_BRACE, i)
1982 
1983         def expr(self, i=None):
1984             if i is None:
1985                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
1986             else:
1987                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
1988 
1989 
1990         def getRuleIndex(self):
1991             return LaTeXParser.RULE_frac
1992 
1993 
1994 
1995 
1996     def frac(self):
1997 
1998         localctx = LaTeXParser.FracContext(self, self._ctx, self.state)
1999         self.enterRule(localctx, 48, self.RULE_frac)
2000         try:
2001             self.enterOuterAlt(localctx, 1)
2002             self.state = 275
2003             self.match(LaTeXParser.CMD_FRAC)
2004             self.state = 276
2005             self.match(LaTeXParser.L_BRACE)
2006             self.state = 277
2007             localctx.upper = self.expr()
2008             self.state = 278
2009             self.match(LaTeXParser.R_BRACE)
2010             self.state = 279
2011             self.match(LaTeXParser.L_BRACE)
2012             self.state = 280
2013             localctx.lower = self.expr()
2014             self.state = 281
2015             self.match(LaTeXParser.R_BRACE)
2016         except RecognitionException as re:
2017             localctx.exception = re
2018             self._errHandler.reportError(self, re)
2019             self._errHandler.recover(self, re)
2020         finally:
2021             self.exitRule()
2022         return localctx
2023 
2024     class Func_normalContext(ParserRuleContext):
2025 
2026         def __init__(self, parser, parent=None, invokingState=-1):
2027             super(LaTeXParser.Func_normalContext, self).__init__(parent, invokingState)
2028             self.parser = parser
2029 
2030         def FUNC_LOG(self):
2031             return self.getToken(LaTeXParser.FUNC_LOG, 0)
2032 
2033         def FUNC_LN(self):
2034             return self.getToken(LaTeXParser.FUNC_LN, 0)
2035 
2036         def FUNC_SIN(self):
2037             return self.getToken(LaTeXParser.FUNC_SIN, 0)
2038 
2039         def FUNC_COS(self):
2040             return self.getToken(LaTeXParser.FUNC_COS, 0)
2041 
2042         def FUNC_TAN(self):
2043             return self.getToken(LaTeXParser.FUNC_TAN, 0)
2044 
2045         def FUNC_CSC(self):
2046             return self.getToken(LaTeXParser.FUNC_CSC, 0)
2047 
2048         def FUNC_SEC(self):
2049             return self.getToken(LaTeXParser.FUNC_SEC, 0)
2050 
2051         def FUNC_COT(self):
2052             return self.getToken(LaTeXParser.FUNC_COT, 0)
2053 
2054         def FUNC_ARCSIN(self):
2055             return self.getToken(LaTeXParser.FUNC_ARCSIN, 0)
2056 
2057         def FUNC_ARCCOS(self):
2058             return self.getToken(LaTeXParser.FUNC_ARCCOS, 0)
2059 
2060         def FUNC_ARCTAN(self):
2061             return self.getToken(LaTeXParser.FUNC_ARCTAN, 0)
2062 
2063         def FUNC_ARCCSC(self):
2064             return self.getToken(LaTeXParser.FUNC_ARCCSC, 0)
2065 
2066         def FUNC_ARCSEC(self):
2067             return self.getToken(LaTeXParser.FUNC_ARCSEC, 0)
2068 
2069         def FUNC_ARCCOT(self):
2070             return self.getToken(LaTeXParser.FUNC_ARCCOT, 0)
2071 
2072         def FUNC_SINH(self):
2073             return self.getToken(LaTeXParser.FUNC_SINH, 0)
2074 
2075         def FUNC_COSH(self):
2076             return self.getToken(LaTeXParser.FUNC_COSH, 0)
2077 
2078         def FUNC_TANH(self):
2079             return self.getToken(LaTeXParser.FUNC_TANH, 0)
2080 
2081         def FUNC_ARSINH(self):
2082             return self.getToken(LaTeXParser.FUNC_ARSINH, 0)
2083 
2084         def FUNC_ARCOSH(self):
2085             return self.getToken(LaTeXParser.FUNC_ARCOSH, 0)
2086 
2087         def FUNC_ARTANH(self):
2088             return self.getToken(LaTeXParser.FUNC_ARTANH, 0)
2089 
2090         def getRuleIndex(self):
2091             return LaTeXParser.RULE_func_normal
2092 
2093 
2094 
2095 
2096     def func_normal(self):
2097 
2098         localctx = LaTeXParser.Func_normalContext(self, self._ctx, self.state)
2099         self.enterRule(localctx, 50, self.RULE_func_normal)
2100         self._la = 0 # Token type
2101         try:
2102             self.enterOuterAlt(localctx, 1)
2103             self.state = 283
2104             _la = self._input.LA(1)
2105             if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.FUNC_LOG) | (1 << LaTeXParser.FUNC_LN) | (1 << LaTeXParser.FUNC_SIN) | (1 << LaTeXParser.FUNC_COS) | (1 << LaTeXParser.FUNC_TAN) | (1 << LaTeXParser.FUNC_CSC) | (1 << LaTeXParser.FUNC_SEC) | (1 << LaTeXParser.FUNC_COT) | (1 << LaTeXParser.FUNC_ARCSIN) | (1 << LaTeXParser.FUNC_ARCCOS) | (1 << LaTeXParser.FUNC_ARCTAN) | (1 << LaTeXParser.FUNC_ARCCSC) | (1 << LaTeXParser.FUNC_ARCSEC) | (1 << LaTeXParser.FUNC_ARCCOT) | (1 << LaTeXParser.FUNC_SINH) | (1 << LaTeXParser.FUNC_COSH) | (1 << LaTeXParser.FUNC_TANH) | (1 << LaTeXParser.FUNC_ARSINH) | (1 << LaTeXParser.FUNC_ARCOSH) | (1 << LaTeXParser.FUNC_ARTANH))) != 0)):
2106                 self._errHandler.recoverInline(self)
2107             else:
2108                 self._errHandler.reportMatch(self)
2109                 self.consume()
2110         except RecognitionException as re:
2111             localctx.exception = re
2112             self._errHandler.reportError(self, re)
2113             self._errHandler.recover(self, re)
2114         finally:
2115             self.exitRule()
2116         return localctx
2117 
2118     class FuncContext(ParserRuleContext):
2119 
2120         def __init__(self, parser, parent=None, invokingState=-1):
2121             super(LaTeXParser.FuncContext, self).__init__(parent, invokingState)
2122             self.parser = parser
2123             self.root = None # ExprContext
2124             self.base = None # ExprContext
2125 
2126         def func_normal(self):
2127             return self.getTypedRuleContext(LaTeXParser.Func_normalContext,0)
2128 
2129 
2130         def L_PAREN(self):
2131             return self.getToken(LaTeXParser.L_PAREN, 0)
2132 
2133         def func_arg(self):
2134             return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)
2135 
2136 
2137         def R_PAREN(self):
2138             return self.getToken(LaTeXParser.R_PAREN, 0)
2139 
2140         def func_arg_noparens(self):
2141             return self.getTypedRuleContext(LaTeXParser.Func_arg_noparensContext,0)
2142 
2143 
2144         def subexpr(self):
2145             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
2146 
2147 
2148         def supexpr(self):
2149             return self.getTypedRuleContext(LaTeXParser.SupexprContext,0)
2150 
2151 
2152         def args(self):
2153             return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)
2154 
2155 
2156         def LETTER(self):
2157             return self.getToken(LaTeXParser.LETTER, 0)
2158 
2159         def SYMBOL(self):
2160             return self.getToken(LaTeXParser.SYMBOL, 0)
2161 
2162         def FUNC_INT(self):
2163             return self.getToken(LaTeXParser.FUNC_INT, 0)
2164 
2165         def DIFFERENTIAL(self):
2166             return self.getToken(LaTeXParser.DIFFERENTIAL, 0)
2167 
2168         def frac(self):
2169             return self.getTypedRuleContext(LaTeXParser.FracContext,0)
2170 
2171 
2172         def additive(self):
2173             return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)
2174 
2175 
2176         def FUNC_SQRT(self):
2177             return self.getToken(LaTeXParser.FUNC_SQRT, 0)
2178 
2179         def L_BRACE(self):
2180             return self.getToken(LaTeXParser.L_BRACE, 0)
2181 
2182         def R_BRACE(self):
2183             return self.getToken(LaTeXParser.R_BRACE, 0)
2184 
2185         def expr(self, i=None):
2186             if i is None:
2187                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
2188             else:
2189                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
2190 
2191 
2192         def L_BRACKET(self):
2193             return self.getToken(LaTeXParser.L_BRACKET, 0)
2194 
2195         def R_BRACKET(self):
2196             return self.getToken(LaTeXParser.R_BRACKET, 0)
2197 
2198         def mp(self):
2199             return self.getTypedRuleContext(LaTeXParser.MpContext,0)
2200 
2201 
2202         def FUNC_SUM(self):
2203             return self.getToken(LaTeXParser.FUNC_SUM, 0)
2204 
2205         def FUNC_PROD(self):
2206             return self.getToken(LaTeXParser.FUNC_PROD, 0)
2207 
2208         def subeq(self):
2209             return self.getTypedRuleContext(LaTeXParser.SubeqContext,0)
2210 
2211 
2212         def FUNC_LIM(self):
2213             return self.getToken(LaTeXParser.FUNC_LIM, 0)
2214 
2215         def limit_sub(self):
2216             return self.getTypedRuleContext(LaTeXParser.Limit_subContext,0)
2217 
2218 
2219         def getRuleIndex(self):
2220             return LaTeXParser.RULE_func
2221 
2222 
2223 
2224 
2225     def func(self):
2226 
2227         localctx = LaTeXParser.FuncContext(self, self._ctx, self.state)
2228         self.enterRule(localctx, 52, self.RULE_func)
2229         self._la = 0 # Token type
2230         try:
2231             self.state = 358
2232             self._errHandler.sync(self)
2233             token = self._input.LA(1)
2234             if token in [LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH]:
2235                 self.enterOuterAlt(localctx, 1)
2236                 self.state = 285
2237                 self.func_normal()
2238                 self.state = 298
2239                 self._errHandler.sync(self)
2240                 la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
2241                 if la_ == 1:
2242                     self.state = 287
2243                     self._errHandler.sync(self)
2244                     _la = self._input.LA(1)
2245                     if _la==LaTeXParser.UNDERSCORE:
2246                         self.state = 286
2247                         self.subexpr()
2248 
2249 
2250                     self.state = 290
2251                     self._errHandler.sync(self)
2252                     _la = self._input.LA(1)
2253                     if _la==LaTeXParser.CARET:
2254                         self.state = 289
2255                         self.supexpr()
2256 
2257 
2258                     pass
2259 
2260                 elif la_ == 2:
2261                     self.state = 293
2262                     self._errHandler.sync(self)
2263                     _la = self._input.LA(1)
2264                     if _la==LaTeXParser.CARET:
2265                         self.state = 292
2266                         self.supexpr()
2267 
2268 
2269                     self.state = 296
2270                     self._errHandler.sync(self)
2271                     _la = self._input.LA(1)
2272                     if _la==LaTeXParser.UNDERSCORE:
2273                         self.state = 295
2274                         self.subexpr()
2275 
2276 
2277                     pass
2278 
2279 
2280                 self.state = 305
2281                 self._errHandler.sync(self)
2282                 la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
2283                 if la_ == 1:
2284                     self.state = 300
2285                     self.match(LaTeXParser.L_PAREN)
2286                     self.state = 301
2287                     self.func_arg()
2288                     self.state = 302
2289                     self.match(LaTeXParser.R_PAREN)
2290                     pass
2291 
2292                 elif la_ == 2:
2293                     self.state = 304
2294                     self.func_arg_noparens()
2295                     pass
2296 
2297 
2298                 pass
2299             elif token in [LaTeXParser.LETTER, LaTeXParser.SYMBOL]:
2300                 self.enterOuterAlt(localctx, 2)
2301                 self.state = 307
2302                 _la = self._input.LA(1)
2303                 if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
2304                     self._errHandler.recoverInline(self)
2305                 else:
2306                     self._errHandler.reportMatch(self)
2307                     self.consume()
2308                 self.state = 309
2309                 self._errHandler.sync(self)
2310                 _la = self._input.LA(1)
2311                 if _la==LaTeXParser.UNDERSCORE:
2312                     self.state = 308
2313                     self.subexpr()
2314 
2315 
2316                 self.state = 311
2317                 self.match(LaTeXParser.L_PAREN)
2318                 self.state = 312
2319                 self.args()
2320                 self.state = 313
2321                 self.match(LaTeXParser.R_PAREN)
2322                 pass
2323             elif token in [LaTeXParser.FUNC_INT]:
2324                 self.enterOuterAlt(localctx, 3)
2325                 self.state = 315
2326                 self.match(LaTeXParser.FUNC_INT)
2327                 self.state = 322
2328                 self._errHandler.sync(self)
2329                 token = self._input.LA(1)
2330                 if token in [LaTeXParser.UNDERSCORE]:
2331                     self.state = 316
2332                     self.subexpr()
2333                     self.state = 317
2334                     self.supexpr()
2335                     pass
2336                 elif token in [LaTeXParser.CARET]:
2337                     self.state = 319
2338                     self.supexpr()
2339                     self.state = 320
2340                     self.subexpr()
2341                     pass
2342                 elif token in [LaTeXParser.ADD, LaTeXParser.SUB, LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.FUNC_SQRT, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
2343                     pass
2344                 else:
2345                     pass
2346                 self.state = 330
2347                 self._errHandler.sync(self)
2348                 la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
2349                 if la_ == 1:
2350                     self.state = 325
2351                     self._errHandler.sync(self)
2352                     la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
2353                     if la_ == 1:
2354                         self.state = 324
2355                         self.additive(0)
2356 
2357 
2358                     self.state = 327
2359                     self.match(LaTeXParser.DIFFERENTIAL)
2360                     pass
2361 
2362                 elif la_ == 2:
2363                     self.state = 328
2364                     self.frac()
2365                     pass
2366 
2367                 elif la_ == 3:
2368                     self.state = 329
2369                     self.additive(0)
2370                     pass
2371 
2372 
2373                 pass
2374             elif token in [LaTeXParser.FUNC_SQRT]:
2375                 self.enterOuterAlt(localctx, 4)
2376                 self.state = 332
2377                 self.match(LaTeXParser.FUNC_SQRT)
2378                 self.state = 337
2379                 self._errHandler.sync(self)
2380                 _la = self._input.LA(1)
2381                 if _la==LaTeXParser.L_BRACKET:
2382                     self.state = 333
2383                     self.match(LaTeXParser.L_BRACKET)
2384                     self.state = 334
2385                     localctx.root = self.expr()
2386                     self.state = 335
2387                     self.match(LaTeXParser.R_BRACKET)
2388 
2389 
2390                 self.state = 339
2391                 self.match(LaTeXParser.L_BRACE)
2392                 self.state = 340
2393                 localctx.base = self.expr()
2394                 self.state = 341
2395                 self.match(LaTeXParser.R_BRACE)
2396                 pass
2397             elif token in [LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD]:
2398                 self.enterOuterAlt(localctx, 5)
2399                 self.state = 343
2400                 _la = self._input.LA(1)
2401                 if not(_la==LaTeXParser.FUNC_SUM or _la==LaTeXParser.FUNC_PROD):
2402                     self._errHandler.recoverInline(self)
2403                 else:
2404                     self._errHandler.reportMatch(self)
2405                     self.consume()
2406                 self.state = 350
2407                 self._errHandler.sync(self)
2408                 token = self._input.LA(1)
2409                 if token in [LaTeXParser.UNDERSCORE]:
2410                     self.state = 344
2411                     self.subeq()
2412                     self.state = 345
2413                     self.supexpr()
2414                     pass
2415                 elif token in [LaTeXParser.CARET]:
2416                     self.state = 347
2417                     self.supexpr()
2418                     self.state = 348
2419                     self.subeq()
2420                     pass
2421                 else:
2422                     raise NoViableAltException(self)
2423 
2424                 self.state = 352
2425                 self.mp(0)
2426                 pass
2427             elif token in [LaTeXParser.FUNC_LIM]:
2428                 self.enterOuterAlt(localctx, 6)
2429                 self.state = 354
2430                 self.match(LaTeXParser.FUNC_LIM)
2431                 self.state = 355
2432                 self.limit_sub()
2433                 self.state = 356
2434                 self.mp(0)
2435                 pass
2436             else:
2437                 raise NoViableAltException(self)
2438 
2439         except RecognitionException as re:
2440             localctx.exception = re
2441             self._errHandler.reportError(self, re)
2442             self._errHandler.recover(self, re)
2443         finally:
2444             self.exitRule()
2445         return localctx
2446 
2447     class ArgsContext(ParserRuleContext):
2448 
2449         def __init__(self, parser, parent=None, invokingState=-1):
2450             super(LaTeXParser.ArgsContext, self).__init__(parent, invokingState)
2451             self.parser = parser
2452 
2453         def expr(self):
2454             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2455 
2456 
2457         def args(self):
2458             return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)
2459 
2460 
2461         def getRuleIndex(self):
2462             return LaTeXParser.RULE_args
2463 
2464 
2465 
2466 
2467     def args(self):
2468 
2469         localctx = LaTeXParser.ArgsContext(self, self._ctx, self.state)
2470         self.enterRule(localctx, 54, self.RULE_args)
2471         try:
2472             self.state = 365
2473             self._errHandler.sync(self)
2474             la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
2475             if la_ == 1:
2476                 self.enterOuterAlt(localctx, 1)
2477                 self.state = 360
2478                 self.expr()
2479                 self.state = 361
2480                 self.match(LaTeXParser.T__0)
2481                 self.state = 362
2482                 self.args()
2483                 pass
2484 
2485             elif la_ == 2:
2486                 self.enterOuterAlt(localctx, 2)
2487                 self.state = 364
2488                 self.expr()
2489                 pass
2490 
2491 
2492         except RecognitionException as re:
2493             localctx.exception = re
2494             self._errHandler.reportError(self, re)
2495             self._errHandler.recover(self, re)
2496         finally:
2497             self.exitRule()
2498         return localctx
2499 
2500     class Limit_subContext(ParserRuleContext):
2501 
2502         def __init__(self, parser, parent=None, invokingState=-1):
2503             super(LaTeXParser.Limit_subContext, self).__init__(parent, invokingState)
2504             self.parser = parser
2505 
2506         def UNDERSCORE(self):
2507             return self.getToken(LaTeXParser.UNDERSCORE, 0)
2508 
2509         def L_BRACE(self, i=None):
2510             if i is None:
2511                 return self.getTokens(LaTeXParser.L_BRACE)
2512             else:
2513                 return self.getToken(LaTeXParser.L_BRACE, i)
2514 
2515         def LIM_APPROACH_SYM(self):
2516             return self.getToken(LaTeXParser.LIM_APPROACH_SYM, 0)
2517 
2518         def expr(self):
2519             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2520 
2521 
2522         def R_BRACE(self, i=None):
2523             if i is None:
2524                 return self.getTokens(LaTeXParser.R_BRACE)
2525             else:
2526                 return self.getToken(LaTeXParser.R_BRACE, i)
2527 
2528         def LETTER(self):
2529             return self.getToken(LaTeXParser.LETTER, 0)
2530 
2531         def SYMBOL(self):
2532             return self.getToken(LaTeXParser.SYMBOL, 0)
2533 
2534         def CARET(self):
2535             return self.getToken(LaTeXParser.CARET, 0)
2536 
2537         def ADD(self):
2538             return self.getToken(LaTeXParser.ADD, 0)
2539 
2540         def SUB(self):
2541             return self.getToken(LaTeXParser.SUB, 0)
2542 
2543         def getRuleIndex(self):
2544             return LaTeXParser.RULE_limit_sub
2545 
2546 
2547 
2548 
2549     def limit_sub(self):
2550 
2551         localctx = LaTeXParser.Limit_subContext(self, self._ctx, self.state)
2552         self.enterRule(localctx, 56, self.RULE_limit_sub)
2553         self._la = 0 # Token type
2554         try:
2555             self.enterOuterAlt(localctx, 1)
2556             self.state = 367
2557             self.match(LaTeXParser.UNDERSCORE)
2558             self.state = 368
2559             self.match(LaTeXParser.L_BRACE)
2560             self.state = 369
2561             _la = self._input.LA(1)
2562             if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
2563                 self._errHandler.recoverInline(self)
2564             else:
2565                 self._errHandler.reportMatch(self)
2566                 self.consume()
2567             self.state = 370
2568             self.match(LaTeXParser.LIM_APPROACH_SYM)
2569             self.state = 371
2570             self.expr()
2571             self.state = 376
2572             self._errHandler.sync(self)
2573             _la = self._input.LA(1)
2574             if _la==LaTeXParser.CARET:
2575                 self.state = 372
2576                 self.match(LaTeXParser.CARET)
2577                 self.state = 373
2578                 self.match(LaTeXParser.L_BRACE)
2579                 self.state = 374
2580                 _la = self._input.LA(1)
2581                 if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
2582                     self._errHandler.recoverInline(self)
2583                 else:
2584                     self._errHandler.reportMatch(self)
2585                     self.consume()
2586                 self.state = 375
2587                 self.match(LaTeXParser.R_BRACE)
2588 
2589 
2590             self.state = 378
2591             self.match(LaTeXParser.R_BRACE)
2592         except RecognitionException as re:
2593             localctx.exception = re
2594             self._errHandler.reportError(self, re)
2595             self._errHandler.recover(self, re)
2596         finally:
2597             self.exitRule()
2598         return localctx
2599 
2600     class Func_argContext(ParserRuleContext):
2601 
2602         def __init__(self, parser, parent=None, invokingState=-1):
2603             super(LaTeXParser.Func_argContext, self).__init__(parent, invokingState)
2604             self.parser = parser
2605 
2606         def expr(self):
2607             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2608 
2609 
2610         def func_arg(self):
2611             return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)
2612 
2613 
2614         def getRuleIndex(self):
2615             return LaTeXParser.RULE_func_arg
2616 
2617 
2618 
2619 
2620     def func_arg(self):
2621 
2622         localctx = LaTeXParser.Func_argContext(self, self._ctx, self.state)
2623         self.enterRule(localctx, 58, self.RULE_func_arg)
2624         try:
2625             self.state = 385
2626             self._errHandler.sync(self)
2627             la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
2628             if la_ == 1:
2629                 self.enterOuterAlt(localctx, 1)
2630                 self.state = 380
2631                 self.expr()
2632                 pass
2633 
2634             elif la_ == 2:
2635                 self.enterOuterAlt(localctx, 2)
2636                 self.state = 381
2637                 self.expr()
2638                 self.state = 382
2639                 self.match(LaTeXParser.T__0)
2640                 self.state = 383
2641                 self.func_arg()
2642                 pass
2643 
2644 
2645         except RecognitionException as re:
2646             localctx.exception = re
2647             self._errHandler.reportError(self, re)
2648             self._errHandler.recover(self, re)
2649         finally:
2650             self.exitRule()
2651         return localctx
2652 
2653     class Func_arg_noparensContext(ParserRuleContext):
2654 
2655         def __init__(self, parser, parent=None, invokingState=-1):
2656             super(LaTeXParser.Func_arg_noparensContext, self).__init__(parent, invokingState)
2657             self.parser = parser
2658 
2659         def mp_nofunc(self):
2660             return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,0)
2661 
2662 
2663         def getRuleIndex(self):
2664             return LaTeXParser.RULE_func_arg_noparens
2665 
2666 
2667 
2668 
2669     def func_arg_noparens(self):
2670 
2671         localctx = LaTeXParser.Func_arg_noparensContext(self, self._ctx, self.state)
2672         self.enterRule(localctx, 60, self.RULE_func_arg_noparens)
2673         try:
2674             self.enterOuterAlt(localctx, 1)
2675             self.state = 387
2676             self.mp_nofunc(0)
2677         except RecognitionException as re:
2678             localctx.exception = re
2679             self._errHandler.reportError(self, re)
2680             self._errHandler.recover(self, re)
2681         finally:
2682             self.exitRule()
2683         return localctx
2684 
2685     class SubexprContext(ParserRuleContext):
2686 
2687         def __init__(self, parser, parent=None, invokingState=-1):
2688             super(LaTeXParser.SubexprContext, self).__init__(parent, invokingState)
2689             self.parser = parser
2690 
2691         def UNDERSCORE(self):
2692             return self.getToken(LaTeXParser.UNDERSCORE, 0)
2693 
2694         def atom(self):
2695             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
2696 
2697 
2698         def L_BRACE(self):
2699             return self.getToken(LaTeXParser.L_BRACE, 0)
2700 
2701         def expr(self):
2702             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2703 
2704 
2705         def R_BRACE(self):
2706             return self.getToken(LaTeXParser.R_BRACE, 0)
2707 
2708         def getRuleIndex(self):
2709             return LaTeXParser.RULE_subexpr
2710 
2711 
2712 
2713 
2714     def subexpr(self):
2715 
2716         localctx = LaTeXParser.SubexprContext(self, self._ctx, self.state)
2717         self.enterRule(localctx, 62, self.RULE_subexpr)
2718         try:
2719             self.enterOuterAlt(localctx, 1)
2720             self.state = 389
2721             self.match(LaTeXParser.UNDERSCORE)
2722             self.state = 395
2723             self._errHandler.sync(self)
2724             token = self._input.LA(1)
2725             if token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
2726                 self.state = 390
2727                 self.atom()
2728                 pass
2729             elif token in [LaTeXParser.L_BRACE]:
2730                 self.state = 391
2731                 self.match(LaTeXParser.L_BRACE)
2732                 self.state = 392
2733                 self.expr()
2734                 self.state = 393
2735                 self.match(LaTeXParser.R_BRACE)
2736                 pass
2737             else:
2738                 raise NoViableAltException(self)
2739 
2740         except RecognitionException as re:
2741             localctx.exception = re
2742             self._errHandler.reportError(self, re)
2743             self._errHandler.recover(self, re)
2744         finally:
2745             self.exitRule()
2746         return localctx
2747 
2748     class SupexprContext(ParserRuleContext):
2749 
2750         def __init__(self, parser, parent=None, invokingState=-1):
2751             super(LaTeXParser.SupexprContext, self).__init__(parent, invokingState)
2752             self.parser = parser
2753 
2754         def CARET(self):
2755             return self.getToken(LaTeXParser.CARET, 0)
2756 
2757         def atom(self):
2758             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
2759 
2760 
2761         def L_BRACE(self):
2762             return self.getToken(LaTeXParser.L_BRACE, 0)
2763 
2764         def expr(self):
2765             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2766 
2767 
2768         def R_BRACE(self):
2769             return self.getToken(LaTeXParser.R_BRACE, 0)
2770 
2771         def getRuleIndex(self):
2772             return LaTeXParser.RULE_supexpr
2773 
2774 
2775 
2776 
2777     def supexpr(self):
2778 
2779         localctx = LaTeXParser.SupexprContext(self, self._ctx, self.state)
2780         self.enterRule(localctx, 64, self.RULE_supexpr)
2781         try:
2782             self.enterOuterAlt(localctx, 1)
2783             self.state = 397
2784             self.match(LaTeXParser.CARET)
2785             self.state = 403
2786             self._errHandler.sync(self)
2787             token = self._input.LA(1)
2788             if token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
2789                 self.state = 398
2790                 self.atom()
2791                 pass
2792             elif token in [LaTeXParser.L_BRACE]:
2793                 self.state = 399
2794                 self.match(LaTeXParser.L_BRACE)
2795                 self.state = 400
2796                 self.expr()
2797                 self.state = 401
2798                 self.match(LaTeXParser.R_BRACE)
2799                 pass
2800             else:
2801                 raise NoViableAltException(self)
2802 
2803         except RecognitionException as re:
2804             localctx.exception = re
2805             self._errHandler.reportError(self, re)
2806             self._errHandler.recover(self, re)
2807         finally:
2808             self.exitRule()
2809         return localctx
2810 
2811     class SubeqContext(ParserRuleContext):
2812 
2813         def __init__(self, parser, parent=None, invokingState=-1):
2814             super(LaTeXParser.SubeqContext, self).__init__(parent, invokingState)
2815             self.parser = parser
2816 
2817         def UNDERSCORE(self):
2818             return self.getToken(LaTeXParser.UNDERSCORE, 0)
2819 
2820         def L_BRACE(self):
2821             return self.getToken(LaTeXParser.L_BRACE, 0)
2822 
2823         def equality(self):
2824             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
2825 
2826 
2827         def R_BRACE(self):
2828             return self.getToken(LaTeXParser.R_BRACE, 0)
2829 
2830         def getRuleIndex(self):
2831             return LaTeXParser.RULE_subeq
2832 
2833 
2834 
2835 
2836     def subeq(self):
2837 
2838         localctx = LaTeXParser.SubeqContext(self, self._ctx, self.state)
2839         self.enterRule(localctx, 66, self.RULE_subeq)
2840         try:
2841             self.enterOuterAlt(localctx, 1)
2842             self.state = 405
2843             self.match(LaTeXParser.UNDERSCORE)
2844             self.state = 406
2845             self.match(LaTeXParser.L_BRACE)
2846             self.state = 407
2847             self.equality()
2848             self.state = 408
2849             self.match(LaTeXParser.R_BRACE)
2850         except RecognitionException as re:
2851             localctx.exception = re
2852             self._errHandler.reportError(self, re)
2853             self._errHandler.recover(self, re)
2854         finally:
2855             self.exitRule()
2856         return localctx
2857 
2858     class SupeqContext(ParserRuleContext):
2859 
2860         def __init__(self, parser, parent=None, invokingState=-1):
2861             super(LaTeXParser.SupeqContext, self).__init__(parent, invokingState)
2862             self.parser = parser
2863 
2864         def UNDERSCORE(self):
2865             return self.getToken(LaTeXParser.UNDERSCORE, 0)
2866 
2867         def L_BRACE(self):
2868             return self.getToken(LaTeXParser.L_BRACE, 0)
2869 
2870         def equality(self):
2871             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
2872 
2873 
2874         def R_BRACE(self):
2875             return self.getToken(LaTeXParser.R_BRACE, 0)
2876 
2877         def getRuleIndex(self):
2878             return LaTeXParser.RULE_supeq
2879 
2880 
2881 
2882 
2883     def supeq(self):
2884 
2885         localctx = LaTeXParser.SupeqContext(self, self._ctx, self.state)
2886         self.enterRule(localctx, 68, self.RULE_supeq)
2887         try:
2888             self.enterOuterAlt(localctx, 1)
2889             self.state = 410
2890             self.match(LaTeXParser.UNDERSCORE)
2891             self.state = 411
2892             self.match(LaTeXParser.L_BRACE)
2893             self.state = 412
2894             self.equality()
2895             self.state = 413
2896             self.match(LaTeXParser.R_BRACE)
2897         except RecognitionException as re:
2898             localctx.exception = re
2899             self._errHandler.reportError(self, re)
2900             self._errHandler.recover(self, re)
2901         finally:
2902             self.exitRule()
2903         return localctx
2904 
2905 
2906 
2907     def sempred(self, localctx, ruleIndex, predIndex):
2908         if self._predicates == None:
2909             self._predicates = dict()
2910         self._predicates[1] = self.relation_sempred
2911         self._predicates[4] = self.additive_sempred
2912         self._predicates[5] = self.mp_sempred
2913         self._predicates[6] = self.mp_nofunc_sempred
2914         self._predicates[15] = self.exp_sempred
2915         self._predicates[16] = self.exp_nofunc_sempred
2916         pred = self._predicates.get(ruleIndex, None)
2917         if pred is None:
2918             raise Exception("No predicate with index:" + str(ruleIndex))
2919         else:
2920             return pred(localctx, predIndex)
2921 
2922     def relation_sempred(self, localctx, predIndex):
2923             if predIndex == 0:
2924                 return self.precpred(self._ctx, 2)
2925 
2926 
2927     def additive_sempred(self, localctx, predIndex):
2928             if predIndex == 1:
2929                 return self.precpred(self._ctx, 2)
2930 
2931 
2932     def mp_sempred(self, localctx, predIndex):
2933             if predIndex == 2:
2934                 return self.precpred(self._ctx, 2)
2935 
2936 
2937     def mp_nofunc_sempred(self, localctx, predIndex):
2938             if predIndex == 3:
2939                 return self.precpred(self._ctx, 2)
2940 
2941 
2942     def exp_sempred(self, localctx, predIndex):
2943             if predIndex == 4:
2944                 return self.precpred(self._ctx, 2)
2945 
2946 
2947     def exp_nofunc_sempred(self, localctx, predIndex):
2948             if predIndex == 5:
2949                 return self.precpred(self._ctx, 2)
2950 
2951 
2952 
2953 
2954 

</code><intended_behavior>The handling of `\ln` and `\log` within this parsing logic needs to ensure the correct interpretation of natural logarithm expressions.</intended_behavior>, <file>sympy/parsing/latex/_antlr/latexlexer.py</file>
<class>None</class>
<method>None</method>
<code>
1 
2 # *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***
3 #
4 # Generated from ../LaTeX.g4, derived from latex2sympy
5 #     latex2sympy is licensed under the MIT license
6 #     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt
7 #
8 # Generated with antlr4
9 #    antlr4 is licensed under the BSD-3-Clause License
10 #    https://github.com/antlr/antlr4/blob/master/LICENSE.txt
11 from __future__ import print_function
12 from antlr4 import *
13 from io import StringIO
14 import sys
15 
16 
17 def serializedATN():
18     with StringIO() as buf:
19         buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2")
20         buf.write(u";\u01e8\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4")
21         buf.write(u"\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r")
22         buf.write(u"\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22")
23         buf.write(u"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4")
24         buf.write(u"\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35")
25         buf.write(u"\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4")
26         buf.write(u"$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t")
27         buf.write(u",\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63")
28         buf.write(u"\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\4")
29         buf.write(u"9\t9\4:\t:\4;\t;\4<\t<\3\2\3\2\3\3\6\3}\n\3\r\3\16\3")
30         buf.write(u"~\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t")
31         buf.write(u"\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17")
32         buf.write(u"\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3")
33         buf.write(u"\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
34         buf.write(u"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3")
35         buf.write(u"\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
36         buf.write(u"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3")
37         buf.write(u"\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u00d5\n\20\3\21")
38         buf.write(u"\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\23\3")
39         buf.write(u"\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\25")
40         buf.write(u"\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3")
41         buf.write(u"\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31")
42         buf.write(u"\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3")
43         buf.write(u"\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35")
44         buf.write(u"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3")
45         buf.write(u"\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37")
46         buf.write(u"\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!")
47         buf.write(u"\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3$\3")
48         buf.write(u"$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&")
49         buf.write(u"\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3")
50         buf.write(u"(\3(\3(\3)\3)\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3*\3+\3+")
51         buf.write(u"\3+\3+\3+\3,\3,\3,\3,\3,\3,\3-\3-\3-\3-\3-\3-\3-\3-\3")
52         buf.write(u".\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62\7\62\u0198\n")
53         buf.write(u"\62\f\62\16\62\u019b\13\62\3\62\3\62\3\62\6\62\u01a0")
54         buf.write(u"\n\62\r\62\16\62\u01a1\5\62\u01a4\n\62\3\63\3\63\3\64")
55         buf.write(u"\3\64\3\65\6\65\u01ab\n\65\r\65\16\65\u01ac\3\65\3\65")
56         buf.write(u"\3\65\3\65\3\65\7\65\u01b4\n\65\f\65\16\65\u01b7\13\65")
57         buf.write(u"\3\65\7\65\u01ba\n\65\f\65\16\65\u01bd\13\65\3\65\3\65")
58         buf.write(u"\3\65\3\65\3\65\7\65\u01c4\n\65\f\65\16\65\u01c7\13\65")
59         buf.write(u"\3\65\3\65\6\65\u01cb\n\65\r\65\16\65\u01cc\5\65\u01cf")
60         buf.write(u"\n\65\3\66\3\66\3\67\3\67\38\38\38\38\38\39\39\3:\3:")
61         buf.write(u"\3:\3:\3:\3;\3;\3<\3<\6<\u01e5\n<\r<\16<\u01e6\3\u0199")
62         buf.write(u"\2=\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27")
63         buf.write(u"\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-")
64         buf.write(u"\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%")
65         buf.write(u"I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\2c\62e\63g\2i\64k\65m")
66         buf.write(u"\66o\67q8s9u:w;\3\2\5\5\2\13\f\17\17\"\"\4\2C\\c|\3\2")
67         buf.write(u"\62;\2\u01f4\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t")
68         buf.write(u"\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3")
69         buf.write(u"\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3")
70         buf.write(u"\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2")
71         buf.write(u"\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+")
72         buf.write(u"\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2")
73         buf.write(u"\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2")
74         buf.write(u"\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2")
75         buf.write(u"\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2")
76         buf.write(u"\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3")
77         buf.write(u"\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2c\3\2\2\2\2")
78         buf.write(u"e\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2")
79         buf.write(u"\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\3y\3\2\2")
80         buf.write(u"\2\5|\3\2\2\2\7\u0082\3\2\2\2\t\u0084\3\2\2\2\13\u0086")
81         buf.write(u"\3\2\2\2\r\u0088\3\2\2\2\17\u008a\3\2\2\2\21\u008c\3")
82         buf.write(u"\2\2\2\23\u008e\3\2\2\2\25\u0090\3\2\2\2\27\u0092\3\2")
83         buf.write(u"\2\2\31\u0094\3\2\2\2\33\u0096\3\2\2\2\35\u0098\3\2\2")
84         buf.write(u"\2\37\u00d4\3\2\2\2!\u00d6\3\2\2\2#\u00db\3\2\2\2%\u00e0")
85         buf.write(u"\3\2\2\2\'\u00e6\3\2\2\2)\u00eb\3\2\2\2+\u00ef\3\2\2")
86         buf.write(u"\2-\u00f4\3\2\2\2/\u00f9\3\2\2\2\61\u00fe\3\2\2\2\63")
87         buf.write(u"\u0103\3\2\2\2\65\u0108\3\2\2\2\67\u010d\3\2\2\29\u0115")
88         buf.write(u"\3\2\2\2;\u011d\3\2\2\2=\u0125\3\2\2\2?\u012d\3\2\2\2")
89         buf.write(u"A\u0135\3\2\2\2C\u013d\3\2\2\2E\u0143\3\2\2\2G\u0149")
90         buf.write(u"\3\2\2\2I\u014f\3\2\2\2K\u0157\3\2\2\2M\u015f\3\2\2\2")
91         buf.write(u"O\u0167\3\2\2\2Q\u016d\3\2\2\2S\u0174\3\2\2\2U\u017a")
92         buf.write(u"\3\2\2\2W\u017f\3\2\2\2Y\u0185\3\2\2\2[\u018d\3\2\2\2")
93         buf.write(u"]\u018f\3\2\2\2_\u0191\3\2\2\2a\u0193\3\2\2\2c\u0195")
94         buf.write(u"\3\2\2\2e\u01a5\3\2\2\2g\u01a7\3\2\2\2i\u01ce\3\2\2\2")
95         buf.write(u"k\u01d0\3\2\2\2m\u01d2\3\2\2\2o\u01d4\3\2\2\2q\u01d9")
96         buf.write(u"\3\2\2\2s\u01db\3\2\2\2u\u01e0\3\2\2\2w\u01e2\3\2\2\2")
97         buf.write(u"yz\7.\2\2z\4\3\2\2\2{}\t\2\2\2|{\3\2\2\2}~\3\2\2\2~|")
98         buf.write(u"\3\2\2\2~\177\3\2\2\2\177\u0080\3\2\2\2\u0080\u0081\b")
99         buf.write(u"\3\2\2\u0081\6\3\2\2\2\u0082\u0083\7-\2\2\u0083\b\3\2")
100         buf.write(u"\2\2\u0084\u0085\7/\2\2\u0085\n\3\2\2\2\u0086\u0087\7")
101         buf.write(u",\2\2\u0087\f\3\2\2\2\u0088\u0089\7\61\2\2\u0089\16\3")
102         buf.write(u"\2\2\2\u008a\u008b\7*\2\2\u008b\20\3\2\2\2\u008c\u008d")
103         buf.write(u"\7+\2\2\u008d\22\3\2\2\2\u008e\u008f\7}\2\2\u008f\24")
104         buf.write(u"\3\2\2\2\u0090\u0091\7\177\2\2\u0091\26\3\2\2\2\u0092")
105         buf.write(u"\u0093\7]\2\2\u0093\30\3\2\2\2\u0094\u0095\7_\2\2\u0095")
106         buf.write(u"\32\3\2\2\2\u0096\u0097\7~\2\2\u0097\34\3\2\2\2\u0098")
107         buf.write(u"\u0099\7^\2\2\u0099\u009a\7n\2\2\u009a\u009b\7k\2\2\u009b")
108         buf.write(u"\u009c\7o\2\2\u009c\36\3\2\2\2\u009d\u009e\7^\2\2\u009e")
109         buf.write(u"\u009f\7v\2\2\u009f\u00d5\7q\2\2\u00a0\u00a1\7^\2\2\u00a1")
110         buf.write(u"\u00a2\7t\2\2\u00a2\u00a3\7k\2\2\u00a3\u00a4\7i\2\2\u00a4")
111         buf.write(u"\u00a5\7j\2\2\u00a5\u00a6\7v\2\2\u00a6\u00a7\7c\2\2\u00a7")
112         buf.write(u"\u00a8\7t\2\2\u00a8\u00a9\7t\2\2\u00a9\u00aa\7q\2\2\u00aa")
113         buf.write(u"\u00d5\7y\2\2\u00ab\u00ac\7^\2\2\u00ac\u00ad\7T\2\2\u00ad")
114         buf.write(u"\u00ae\7k\2\2\u00ae\u00af\7i\2\2\u00af\u00b0\7j\2\2\u00b0")
115         buf.write(u"\u00b1\7v\2\2\u00b1\u00b2\7c\2\2\u00b2\u00b3\7t\2\2\u00b3")
116         buf.write(u"\u00b4\7t\2\2\u00b4\u00b5\7q\2\2\u00b5\u00d5\7y\2\2\u00b6")
117         buf.write(u"\u00b7\7^\2\2\u00b7\u00b8\7n\2\2\u00b8\u00b9\7q\2\2\u00b9")
118         buf.write(u"\u00ba\7p\2\2\u00ba\u00bb\7i\2\2\u00bb\u00bc\7t\2\2\u00bc")
119         buf.write(u"\u00bd\7k\2\2\u00bd\u00be\7i\2\2\u00be\u00bf\7j\2\2\u00bf")
120         buf.write(u"\u00c0\7v\2\2\u00c0\u00c1\7c\2\2\u00c1\u00c2\7t\2\2\u00c2")
121         buf.write(u"\u00c3\7t\2\2\u00c3\u00c4\7q\2\2\u00c4\u00d5\7y\2\2\u00c5")
122         buf.write(u"\u00c6\7^\2\2\u00c6\u00c7\7N\2\2\u00c7\u00c8\7q\2\2\u00c8")
123         buf.write(u"\u00c9\7p\2\2\u00c9\u00ca\7i\2\2\u00ca\u00cb\7t\2\2\u00cb")
124         buf.write(u"\u00cc\7k\2\2\u00cc\u00cd\7i\2\2\u00cd\u00ce\7j\2\2\u00ce")
125         buf.write(u"\u00cf\7v\2\2\u00cf\u00d0\7c\2\2\u00d0\u00d1\7t\2\2\u00d1")
126         buf.write(u"\u00d2\7t\2\2\u00d2\u00d3\7q\2\2\u00d3\u00d5\7y\2\2\u00d4")
127         buf.write(u"\u009d\3\2\2\2\u00d4\u00a0\3\2\2\2\u00d4\u00ab\3\2\2")
128         buf.write(u"\2\u00d4\u00b6\3\2\2\2\u00d4\u00c5\3\2\2\2\u00d5 \3\2")
129         buf.write(u"\2\2\u00d6\u00d7\7^\2\2\u00d7\u00d8\7k\2\2\u00d8\u00d9")
130         buf.write(u"\7p\2\2\u00d9\u00da\7v\2\2\u00da\"\3\2\2\2\u00db\u00dc")
131         buf.write(u"\7^\2\2\u00dc\u00dd\7u\2\2\u00dd\u00de\7w\2\2\u00de\u00df")
132         buf.write(u"\7o\2\2\u00df$\3\2\2\2\u00e0\u00e1\7^\2\2\u00e1\u00e2")
133         buf.write(u"\7r\2\2\u00e2\u00e3\7t\2\2\u00e3\u00e4\7q\2\2\u00e4\u00e5")
134         buf.write(u"\7f\2\2\u00e5&\3\2\2\2\u00e6\u00e7\7^\2\2\u00e7\u00e8")
135         buf.write(u"\7n\2\2\u00e8\u00e9\7q\2\2\u00e9\u00ea\7i\2\2\u00ea(")
136         buf.write(u"\3\2\2\2\u00eb\u00ec\7^\2\2\u00ec\u00ed\7n\2\2\u00ed")
137         buf.write(u"\u00ee\7p\2\2\u00ee*\3\2\2\2\u00ef\u00f0\7^\2\2\u00f0")
138         buf.write(u"\u00f1\7u\2\2\u00f1\u00f2\7k\2\2\u00f2\u00f3\7p\2\2\u00f3")
139         buf.write(u",\3\2\2\2\u00f4\u00f5\7^\2\2\u00f5\u00f6\7e\2\2\u00f6")
140         buf.write(u"\u00f7\7q\2\2\u00f7\u00f8\7u\2\2\u00f8.\3\2\2\2\u00f9")
141         buf.write(u"\u00fa\7^\2\2\u00fa\u00fb\7v\2\2\u00fb\u00fc\7c\2\2\u00fc")
142         buf.write(u"\u00fd\7p\2\2\u00fd\60\3\2\2\2\u00fe\u00ff\7^\2\2\u00ff")
143         buf.write(u"\u0100\7e\2\2\u0100\u0101\7u\2\2\u0101\u0102\7e\2\2\u0102")
144         buf.write(u"\62\3\2\2\2\u0103\u0104\7^\2\2\u0104\u0105\7u\2\2\u0105")
145         buf.write(u"\u0106\7g\2\2\u0106\u0107\7e\2\2\u0107\64\3\2\2\2\u0108")
146         buf.write(u"\u0109\7^\2\2\u0109\u010a\7e\2\2\u010a\u010b\7q\2\2\u010b")
147         buf.write(u"\u010c\7v\2\2\u010c\66\3\2\2\2\u010d\u010e\7^\2\2\u010e")
148         buf.write(u"\u010f\7c\2\2\u010f\u0110\7t\2\2\u0110\u0111\7e\2\2\u0111")
149         buf.write(u"\u0112\7u\2\2\u0112\u0113\7k\2\2\u0113\u0114\7p\2\2\u0114")
150         buf.write(u"8\3\2\2\2\u0115\u0116\7^\2\2\u0116\u0117\7c\2\2\u0117")
151         buf.write(u"\u0118\7t\2\2\u0118\u0119\7e\2\2\u0119\u011a\7e\2\2\u011a")
152         buf.write(u"\u011b\7q\2\2\u011b\u011c\7u\2\2\u011c:\3\2\2\2\u011d")
153         buf.write(u"\u011e\7^\2\2\u011e\u011f\7c\2\2\u011f\u0120\7t\2\2\u0120")
154         buf.write(u"\u0121\7e\2\2\u0121\u0122\7v\2\2\u0122\u0123\7c\2\2\u0123")
155         buf.write(u"\u0124\7p\2\2\u0124<\3\2\2\2\u0125\u0126\7^\2\2\u0126")
156         buf.write(u"\u0127\7c\2\2\u0127\u0128\7t\2\2\u0128\u0129\7e\2\2\u0129")
157         buf.write(u"\u012a\7e\2\2\u012a\u012b\7u\2\2\u012b\u012c\7e\2\2\u012c")
158         buf.write(u">\3\2\2\2\u012d\u012e\7^\2\2\u012e\u012f\7c\2\2\u012f")
159         buf.write(u"\u0130\7t\2\2\u0130\u0131\7e\2\2\u0131\u0132\7u\2\2\u0132")
160         buf.write(u"\u0133\7g\2\2\u0133\u0134\7e\2\2\u0134@\3\2\2\2\u0135")
161         buf.write(u"\u0136\7^\2\2\u0136\u0137\7c\2\2\u0137\u0138\7t\2\2\u0138")
162         buf.write(u"\u0139\7e\2\2\u0139\u013a\7e\2\2\u013a\u013b\7q\2\2\u013b")
163         buf.write(u"\u013c\7v\2\2\u013cB\3\2\2\2\u013d\u013e\7^\2\2\u013e")
164         buf.write(u"\u013f\7u\2\2\u013f\u0140\7k\2\2\u0140\u0141\7p\2\2\u0141")
165         buf.write(u"\u0142\7j\2\2\u0142D\3\2\2\2\u0143\u0144\7^\2\2\u0144")
166         buf.write(u"\u0145\7e\2\2\u0145\u0146\7q\2\2\u0146\u0147\7u\2\2\u0147")
167         buf.write(u"\u0148\7j\2\2\u0148F\3\2\2\2\u0149\u014a\7^\2\2\u014a")
168         buf.write(u"\u014b\7v\2\2\u014b\u014c\7c\2\2\u014c\u014d\7p\2\2\u014d")
169         buf.write(u"\u014e\7j\2\2\u014eH\3\2\2\2\u014f\u0150\7^\2\2\u0150")
170         buf.write(u"\u0151\7c\2\2\u0151\u0152\7t\2\2\u0152\u0153\7u\2\2\u0153")
171         buf.write(u"\u0154\7k\2\2\u0154\u0155\7p\2\2\u0155\u0156\7j\2\2\u0156")
172         buf.write(u"J\3\2\2\2\u0157\u0158\7^\2\2\u0158\u0159\7c\2\2\u0159")
173         buf.write(u"\u015a\7t\2\2\u015a\u015b\7e\2\2\u015b\u015c\7q\2\2\u015c")
174         buf.write(u"\u015d\7u\2\2\u015d\u015e\7j\2\2\u015eL\3\2\2\2\u015f")
175         buf.write(u"\u0160\7^\2\2\u0160\u0161\7c\2\2\u0161\u0162\7t\2\2\u0162")
176         buf.write(u"\u0163\7v\2\2\u0163\u0164\7c\2\2\u0164\u0165\7p\2\2\u0165")
177         buf.write(u"\u0166\7j\2\2\u0166N\3\2\2\2\u0167\u0168\7^\2\2\u0168")
178         buf.write(u"\u0169\7u\2\2\u0169\u016a\7s\2\2\u016a\u016b\7t\2\2\u016b")
179         buf.write(u"\u016c\7v\2\2\u016cP\3\2\2\2\u016d\u016e\7^\2\2\u016e")
180         buf.write(u"\u016f\7v\2\2\u016f\u0170\7k\2\2\u0170\u0171\7o\2\2\u0171")
181         buf.write(u"\u0172\7g\2\2\u0172\u0173\7u\2\2\u0173R\3\2\2\2\u0174")
182         buf.write(u"\u0175\7^\2\2\u0175\u0176\7e\2\2\u0176\u0177\7f\2\2\u0177")
183         buf.write(u"\u0178\7q\2\2\u0178\u0179\7v\2\2\u0179T\3\2\2\2\u017a")
184         buf.write(u"\u017b\7^\2\2\u017b\u017c\7f\2\2\u017c\u017d\7k\2\2\u017d")
185         buf.write(u"\u017e\7x\2\2\u017eV\3\2\2\2\u017f\u0180\7^\2\2\u0180")
186         buf.write(u"\u0181\7h\2\2\u0181\u0182\7t\2\2\u0182\u0183\7c\2\2\u0183")
187         buf.write(u"\u0184\7e\2\2\u0184X\3\2\2\2\u0185\u0186\7^\2\2\u0186")
188         buf.write(u"\u0187\7o\2\2\u0187\u0188\7c\2\2\u0188\u0189\7v\2\2\u0189")
189         buf.write(u"\u018a\7j\2\2\u018a\u018b\7k\2\2\u018b\u018c\7v\2\2\u018c")
190         buf.write(u"Z\3\2\2\2\u018d\u018e\7a\2\2\u018e\\\3\2\2\2\u018f\u0190")
191         buf.write(u"\7`\2\2\u0190^\3\2\2\2\u0191\u0192\7<\2\2\u0192`\3\2")
192         buf.write(u"\2\2\u0193\u0194\t\2\2\2\u0194b\3\2\2\2\u0195\u0199\7")
193         buf.write(u"f\2\2\u0196\u0198\5a\61\2\u0197\u0196\3\2\2\2\u0198\u019b")
194         buf.write(u"\3\2\2\2\u0199\u019a\3\2\2\2\u0199\u0197\3\2\2\2\u019a")
195         buf.write(u"\u01a3\3\2\2\2\u019b\u0199\3\2\2\2\u019c\u01a4\t\3\2")
196         buf.write(u"\2\u019d\u019f\7^\2\2\u019e\u01a0\t\3\2\2\u019f\u019e")
197         buf.write(u"\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u019f\3\2\2\2\u01a1")
198         buf.write(u"\u01a2\3\2\2\2\u01a2\u01a4\3\2\2\2\u01a3\u019c\3\2\2")
199         buf.write(u"\2\u01a3\u019d\3\2\2\2\u01a4d\3\2\2\2\u01a5\u01a6\t\3")
200         buf.write(u"\2\2\u01a6f\3\2\2\2\u01a7\u01a8\t\4\2\2\u01a8h\3\2\2")
201         buf.write(u"\2\u01a9\u01ab\5g\64\2\u01aa\u01a9\3\2\2\2\u01ab\u01ac")
202         buf.write(u"\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad")
203         buf.write(u"\u01b5\3\2\2\2\u01ae\u01af\7.\2\2\u01af\u01b0\5g\64\2")
204         buf.write(u"\u01b0\u01b1\5g\64\2\u01b1\u01b2\5g\64\2\u01b2\u01b4")
205         buf.write(u"\3\2\2\2\u01b3\u01ae\3\2\2\2\u01b4\u01b7\3\2\2\2\u01b5")
206         buf.write(u"\u01b3\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01cf\3\2\2")
207         buf.write(u"\2\u01b7\u01b5\3\2\2\2\u01b8\u01ba\5g\64\2\u01b9\u01b8")
208         buf.write(u"\3\2\2\2\u01ba\u01bd\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bb")
209         buf.write(u"\u01bc\3\2\2\2\u01bc\u01c5\3\2\2\2\u01bd\u01bb\3\2\2")
210         buf.write(u"\2\u01be\u01bf\7.\2\2\u01bf\u01c0\5g\64\2\u01c0\u01c1")
211         buf.write(u"\5g\64\2\u01c1\u01c2\5g\64\2\u01c2\u01c4\3\2\2\2\u01c3")
212         buf.write(u"\u01be\3\2\2\2\u01c4\u01c7\3\2\2\2\u01c5\u01c3\3\2\2")
213         buf.write(u"\2\u01c5\u01c6\3\2\2\2\u01c6\u01c8\3\2\2\2\u01c7\u01c5")
214         buf.write(u"\3\2\2\2\u01c8\u01ca\7\60\2\2\u01c9\u01cb\5g\64\2\u01ca")
215         buf.write(u"\u01c9\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01ca\3\2\2")
216         buf.write(u"\2\u01cc\u01cd\3\2\2\2\u01cd\u01cf\3\2\2\2\u01ce\u01aa")
217         buf.write(u"\3\2\2\2\u01ce\u01bb\3\2\2\2\u01cfj\3\2\2\2\u01d0\u01d1")
218         buf.write(u"\7?\2\2\u01d1l\3\2\2\2\u01d2\u01d3\7>\2\2\u01d3n\3\2")
219         buf.write(u"\2\2\u01d4\u01d5\7^\2\2\u01d5\u01d6\7n\2\2\u01d6\u01d7")
220         buf.write(u"\7g\2\2\u01d7\u01d8\7s\2\2\u01d8p\3\2\2\2\u01d9\u01da")
221         buf.write(u"\7@\2\2\u01dar\3\2\2\2\u01db\u01dc\7^\2\2\u01dc\u01dd")
222         buf.write(u"\7i\2\2\u01dd\u01de\7g\2\2\u01de\u01df\7s\2\2\u01dft")
223         buf.write(u"\3\2\2\2\u01e0\u01e1\7#\2\2\u01e1v\3\2\2\2\u01e2\u01e4")
224         buf.write(u"\7^\2\2\u01e3\u01e5\t\3\2\2\u01e4\u01e3\3\2\2\2\u01e5")
225         buf.write(u"\u01e6\3\2\2\2\u01e6\u01e4\3\2\2\2\u01e6\u01e7\3\2\2")
226         buf.write(u"\2\u01e7x\3\2\2\2\17\2~\u00d4\u0199\u01a1\u01a3\u01ac")
227         buf.write(u"\u01b5\u01bb\u01c5\u01cc\u01ce\u01e6\3\b\2\2")
228         return buf.getvalue()
229 
230 
231 class LaTeXLexer(Lexer):
232 
233     atn = ATNDeserializer().deserialize(serializedATN())
234 
235     decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]
236 
237     T__0 = 1
238     WS = 2
239     ADD = 3
240     SUB = 4
241     MUL = 5
242     DIV = 6
243     L_PAREN = 7
244     R_PAREN = 8
245     L_BRACE = 9
246     R_BRACE = 10
247     L_BRACKET = 11
248     R_BRACKET = 12
249     BAR = 13
250     FUNC_LIM = 14
251     LIM_APPROACH_SYM = 15
252     FUNC_INT = 16
253     FUNC_SUM = 17
254     FUNC_PROD = 18
255     FUNC_LOG = 19
256     FUNC_LN = 20
257     FUNC_SIN = 21
258     FUNC_COS = 22
259     FUNC_TAN = 23
260     FUNC_CSC = 24
261     FUNC_SEC = 25
262     FUNC_COT = 26
263     FUNC_ARCSIN = 27
264     FUNC_ARCCOS = 28
265     FUNC_ARCTAN = 29
266     FUNC_ARCCSC = 30
267     FUNC_ARCSEC = 31
268     FUNC_ARCCOT = 32
269     FUNC_SINH = 33
270     FUNC_COSH = 34
271     FUNC_TANH = 35
272     FUNC_ARSINH = 36
273     FUNC_ARCOSH = 37
274     FUNC_ARTANH = 38
275     FUNC_SQRT = 39
276     CMD_TIMES = 40
277     CMD_CDOT = 41
278     CMD_DIV = 42
279     CMD_FRAC = 43
280     CMD_MATHIT = 44
281     UNDERSCORE = 45
282     CARET = 46
283     COLON = 47
284     DIFFERENTIAL = 48
285     LETTER = 49
286     NUMBER = 50
287     EQUAL = 51
288     LT = 52
289     LTE = 53
290     GT = 54
291     GTE = 55
292     BANG = 56
293     SYMBOL = 57
294 
295     channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]
296 
297     modeNames = [ u"DEFAULT_MODE" ]
298 
299     literalNames = [ u"<INVALID>",
300             u"','", u"'+'", u"'-'", u"'*'", u"'/'", u"'('", u"')'", u"'{'",
301             u"'}'", u"'['", u"']'", u"'|'", u"'\\lim'", u"'\\int'", u"'\\sum'",
302             u"'\\prod'", u"'\\log'", u"'\\ln'", u"'\\sin'", u"'\\cos'",
303             u"'\\tan'", u"'\\csc'", u"'\\sec'", u"'\\cot'", u"'\\arcsin'",
304             u"'\\arccos'", u"'\\arctan'", u"'\\arccsc'", u"'\\arcsec'",
305             u"'\\arccot'", u"'\\sinh'", u"'\\cosh'", u"'\\tanh'", u"'\\arsinh'",
306             u"'\\arcosh'", u"'\\artanh'", u"'\\sqrt'", u"'\\times'", u"'\\cdot'",
307             u"'\\div'", u"'\\frac'", u"'\\mathit'", u"'_'", u"'^'", u"':'",
308             u"'='", u"'<'", u"'\\leq'", u"'>'", u"'\\geq'", u"'!'" ]
309 
310     symbolicNames = [ u"<INVALID>",
311             u"WS", u"ADD", u"SUB", u"MUL", u"DIV", u"L_PAREN", u"R_PAREN",
312             u"L_BRACE", u"R_BRACE", u"L_BRACKET", u"R_BRACKET", u"BAR",
313             u"FUNC_LIM", u"LIM_APPROACH_SYM", u"FUNC_INT", u"FUNC_SUM",
314             u"FUNC_PROD", u"FUNC_LOG", u"FUNC_LN", u"FUNC_SIN", u"FUNC_COS",
315             u"FUNC_TAN", u"FUNC_CSC", u"FUNC_SEC", u"FUNC_COT", u"FUNC_ARCSIN",
316             u"FUNC_ARCCOS", u"FUNC_ARCTAN", u"FUNC_ARCCSC", u"FUNC_ARCSEC",
317             u"FUNC_ARCCOT", u"FUNC_SINH", u"FUNC_COSH", u"FUNC_TANH", u"FUNC_ARSINH",
318             u"FUNC_ARCOSH", u"FUNC_ARTANH", u"FUNC_SQRT", u"CMD_TIMES",
319             u"CMD_CDOT", u"CMD_DIV", u"CMD_FRAC", u"CMD_MATHIT", u"UNDERSCORE",
320             u"CARET", u"COLON", u"DIFFERENTIAL", u"LETTER", u"NUMBER", u"EQUAL",
321             u"LT", u"LTE", u"GT", u"GTE", u"BANG", u"SYMBOL" ]
322 
323     ruleNames = [ u"T__0", u"WS", u"ADD", u"SUB", u"MUL", u"DIV", u"L_PAREN",
324                   u"R_PAREN", u"L_BRACE", u"R_BRACE", u"L_BRACKET", u"R_BRACKET",
325                   u"BAR", u"FUNC_LIM", u"LIM_APPROACH_SYM", u"FUNC_INT",
326                   u"FUNC_SUM", u"FUNC_PROD", u"FUNC_LOG", u"FUNC_LN", u"FUNC_SIN",
327                   u"FUNC_COS", u"FUNC_TAN", u"FUNC_CSC", u"FUNC_SEC", u"FUNC_COT",
328                   u"FUNC_ARCSIN", u"FUNC_ARCCOS", u"FUNC_ARCTAN", u"FUNC_ARCCSC",
329                   u"FUNC_ARCSEC", u"FUNC_ARCCOT", u"FUNC_SINH", u"FUNC_COSH",
330                   u"FUNC_TANH", u"FUNC_ARSINH", u"FUNC_ARCOSH", u"FUNC_ARTANH",
331                   u"FUNC_SQRT", u"CMD_TIMES", u"CMD_CDOT", u"CMD_DIV", u"CMD_FRAC",
332                   u"CMD_MATHIT", u"UNDERSCORE", u"CARET", u"COLON", u"WS_CHAR",
333                   u"DIFFERENTIAL", u"LETTER", u"DIGIT", u"NUMBER", u"EQUAL",
334                   u"LT", u"LTE", u"GT", u"GTE", u"BANG", u"SYMBOL" ]
335 
336     grammarFileName = u"LaTeX.g4"
337 
338     def __init__(self, input=None, output=sys.stdout):
339         super(LaTeXLexer, self).__init__(input, output=output)
340         self.checkVersion("4.7.1")
341         self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
342         self._actions = None
343         self._predicates = None
344 
345 

</code><intended_behavior>Ensure that the lexer correctly differentiates and tokenizes `\ln` and `\log` as separate entities without ambiguity.</intended_behavior>]
2025-10-17 20:11:55.436 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-17 20:11:55.436 | INFO     | Search-only: skipping patch selection
2025-10-17 20:11:55.520 | INFO     | Task sympy__sympy-14180 completed successfully.
2025-10-17 20:11:55.521 | INFO     | No patch generated. You can try running ACR again.
