2025-10-17 12:24:00.505 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-17 12:24:05.097 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=268, output_tokens=12, cost=0.003040
2025-10-17 12:24:18.104 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=448, output_tokens=441, cost=0.017710
2025-10-17 12:24:19.339 | INFO     | registered non reproducing test 0
2025-10-17 12:24:35.602 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1722, output_tokens=706, cost=0.038400
2025-10-17 12:24:36.724 | INFO     | registered non reproducing test 1
2025-10-17 12:24:55.044 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2183, output_tokens=715, cost=0.043280
2025-10-17 12:24:56.166 | INFO     | registered non reproducing test 2
2025-10-17 12:24:56.166 | WARNING  | Failed to write a reproducer test; skipping reproducer tracing
2025-10-17 12:24:56.169 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-17 12:25:04.268 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=577, output_tokens=298, cost=0.014710
2025-10-17 12:25:04.275 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-17 12:25:07.809 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=652, output_tokens=71, cost=0.008650
2025-10-17 12:25:07.811 | DEBUG    | Extracted a valid json.
2025-10-17 12:25:07.811 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_class(\"QuerySet\")",
        "search_method_in_class(\"aggregate\", \"QuerySet\")",
        "search_method_in_class(\"annotate\", \"QuerySet\")",
        "search_class(\"SQLCompiler\")",
        "search_code(\"field alias\")"
    ],
    "bug_locations": []
}
2025-10-17 12:25:07.905 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-17 12:25:07.906 | DEBUG    | <Agent search> Analyzing search results.
2025-10-17 12:25:25.521 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3066, output_tokens=795, cost=0.054510
2025-10-17 12:25:25.529 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-17 12:25:35.369 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=4077, output_tokens=387, cost=0.052380
2025-10-17 12:25:35.374 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-17 12:25:45.515 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=741, output_tokens=348, cost=0.017850
2025-10-17 12:25:45.515 | DEBUG    | Extracted a valid json.
2025-10-17 12:25:45.516 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations":[
        {
            "file": "django/db/models/query.py",
            "class": "QuerySet",
            "method": "aggregate",
            "intended_behavior": "The `aggregate` method should correctly handle the use of aliases introduced by `annotate` in aggregate expressions. This involves ensuring that when the method constructs the final aggregate query, it references any annotated fields by their correct aliases throughout the query, including the SELECT and GROUP BY clauses. To resolve the issue, the method needs to ensure that whenever a field referenced in an aggregation has been previously annotated, it uses the annotation's alias consistently in the generated SQL code. This may involve enhancing the internal mapping or tracking of field names to aliases within the `query` object that `aggregate` works on, ensuring that aliases are preserved and correctly referenced in the outputted SQL statement."
        },
        {
            "file": "django/db/models/sql/compiler.py",
            "class": "SQLCompiler",
            "method": "",
            "intended_behavior": "The `SQLCompiler` class's methods responsible for generating the SQL query need to be scrutinized to ensure they correctly manage aliases for annotated fields used in aggregation functions. The specific methods within `SQLCompiler` that construct the SQL clauses for selection (SELECT) and aggregation should be updated or fixed to respect the aliases of annotated fields throughout the query. This ensures that when the `QuerySet.aggregate` method translates a Django QuerySet into SQL, all parts of the query, especially those dealing with annotated fields used in aggregate expressions, reference the correct alias. Such behavior would prevent the generation of invalid SQL code and address the reported issue."
        }
    ]
}
2025-10-17 12:25:45.523 | DEBUG    | Bug location extracted successfully: [<file>django/db/models/query.py</file>
<class>QuerySet</class>
<method>aggregate</method>
<code>
365     def aggregate(self, *args, **kwargs):
366         """
367         Return a dictionary containing the calculations (aggregation)
368         over the current queryset.
369 
370         If args is present the expression is passed as a kwarg using
371         the Aggregate object's default alias.
372         """
373         if self.query.distinct_fields:
374             raise NotImplementedError("aggregate() + distinct(fields) not implemented.")
375         self._validate_values_are_expressions((*args, *kwargs.values()), method_name='aggregate')
376         for arg in args:
377             # The default_alias property raises TypeError if default_alias
378             # can't be set automatically or AttributeError if it isn't an
379             # attribute.
380             try:
381                 arg.default_alias
382             except (AttributeError, TypeError):
383                 raise TypeError("Complex aggregates require an alias")
384             kwargs[arg.default_alias] = arg
385 
386         query = self.query.chain()
387         for (alias, aggregate_expr) in kwargs.items():
388             query.add_annotation(aggregate_expr, alias, is_summary=True)
389             if not query.annotations[alias].contains_aggregate:
390                 raise TypeError("%s is not an aggregate expression" % alias)
391         return query.get_aggregation(self.db, kwargs)

</code><intended_behavior>The `aggregate` method should correctly handle the use of aliases introduced by `annotate` in aggregate expressions. This involves ensuring that when the method constructs the final aggregate query, it references any annotated fields by their correct aliases throughout the query, including the SELECT and GROUP BY clauses. To resolve the issue, the method needs to ensure that whenever a field referenced in an aggregation has been previously annotated, it uses the annotation's alias consistently in the generated SQL code. This may involve enhancing the internal mapping or tracking of field names to aliases within the `query` object that `aggregate` works on, ensuring that aliases are preserved and correctly referenced in the outputted SQL statement.</intended_behavior>, <file>django/db/models/query.py</file>
<class>QuerySet</class>
<method>None</method>
<code>
175 class QuerySet:
176     """Represent a lazy database lookup for a set of objects."""
177 
178     def __init__(self, model=None, query=None, using=None, hints=None):
179         self.model = model
180         self._db = using
181         self._hints = hints or {}
182         self._query = query or sql.Query(self.model)
183         self._result_cache = None
184         self._sticky_filter = False
185         self._for_write = False
186         self._prefetch_related_lookups = ()
187         self._prefetch_done = False
188         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
189         self._iterable_class = ModelIterable
190         self._fields = None
191         self._defer_next_filter = False
192         self._deferred_filter = None
193 
194     @property
195     def query(self):
196         if self._deferred_filter:
197             negate, args, kwargs = self._deferred_filter
198             self._filter_or_exclude_inplace(negate, args, kwargs)
199             self._deferred_filter = None
200         return self._query
201 
202     @query.setter
203     def query(self, value):
204         if value.values_select:
205             self._iterable_class = ValuesIterable
206         self._query = value
207 
208     def as_manager(cls):
209         # Address the circular dependency between `Queryset` and `Manager`.
210         from django.db.models.manager import Manager
211         manager = Manager.from_queryset(cls)()
212         manager._built_with_as_manager = True
213         return manager
214     as_manager.queryset_only = True
215     as_manager = classmethod(as_manager)
216 
217     ########################
218     # PYTHON MAGIC METHODS #
219     ########################
220 
221     def __deepcopy__(self, memo):
222         """Don't populate the QuerySet's cache."""
223         obj = self.__class__()
224         for k, v in self.__dict__.items():
225             if k == '_result_cache':
226                 obj.__dict__[k] = None
227             else:
228                 obj.__dict__[k] = copy.deepcopy(v, memo)
229         return obj
230 
231     def __getstate__(self):
232         # Force the cache to be fully populated.
233         self._fetch_all()
234         return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}
235 
236     def __setstate__(self, state):
237         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)
238         if pickled_version:
239             if pickled_version != django.__version__:
240                 warnings.warn(
241                     "Pickled queryset instance's Django version %s does not "
242                     "match the current version %s."
243                     % (pickled_version, django.__version__),
244                     RuntimeWarning,
245                     stacklevel=2,
246                 )
247         else:
248             warnings.warn(
249                 "Pickled queryset instance's Django version is not specified.",
250                 RuntimeWarning,
251                 stacklevel=2,
252             )
253         self.__dict__.update(state)
254 
255     def __repr__(self):
256         data = list(self[:REPR_OUTPUT_SIZE + 1])
257         if len(data) > REPR_OUTPUT_SIZE:
258             data[-1] = "...(remaining elements truncated)..."
259         return '<%s %r>' % (self.__class__.__name__, data)
260 
261     def __len__(self):
262         self._fetch_all()
263         return len(self._result_cache)
264 
265     def __iter__(self):
266         """
267         The queryset iterator protocol uses three nested iterators in the
268         default case:
269             1. sql.compiler.execute_sql()
270                - Returns 100 rows at time (constants.GET_ITERATOR_CHUNK_SIZE)
271                  using cursor.fetchmany(). This part is responsible for
272                  doing some column masking, and returning the rows in chunks.
273             2. sql.compiler.results_iter()
274                - Returns one row at time. At this point the rows are still just
275                  tuples. In some cases the return values are converted to
276                  Python values at this location.
277             3. self.iterator()
278                - Responsible for turning the rows into model objects.
279         """
280         self._fetch_all()
281         return iter(self._result_cache)
282 
283     def __bool__(self):
284         self._fetch_all()
285         return bool(self._result_cache)
286 
287     def __getitem__(self, k):
288         """Retrieve an item or slice from the set of results."""
289         if not isinstance(k, (int, slice)):
290             raise TypeError(
291                 'QuerySet indices must be integers or slices, not %s.'
292                 % type(k).__name__
293             )
294         assert ((not isinstance(k, slice) and (k >= 0)) or
295                 (isinstance(k, slice) and (k.start is None or k.start >= 0) and
296                  (k.stop is None or k.stop >= 0))), \
297             "Negative indexing is not supported."
298 
299         if self._result_cache is not None:
300             return self._result_cache[k]
301 
302         if isinstance(k, slice):
303             qs = self._chain()
304             if k.start is not None:
305                 start = int(k.start)
306             else:
307                 start = None
308             if k.stop is not None:
309                 stop = int(k.stop)
310             else:
311                 stop = None
312             qs.query.set_limits(start, stop)
313             return list(qs)[::k.step] if k.step else qs
314 
315         qs = self._chain()
316         qs.query.set_limits(k, k + 1)
317         qs._fetch_all()
318         return qs._result_cache[0]
319 
320     def __class_getitem__(cls, *args, **kwargs):
321         return cls
322 
323     def __and__(self, other):
324         self._merge_sanity_check(other)
325         if isinstance(other, EmptyQuerySet):
326             return other
327         if isinstance(self, EmptyQuerySet):
328             return self
329         combined = self._chain()
330         combined._merge_known_related_objects(other)
331         combined.query.combine(other.query, sql.AND)
332         return combined
333 
334     def __or__(self, other):
335         self._merge_sanity_check(other)
336         if isinstance(self, EmptyQuerySet):
337             return other
338         if isinstance(other, EmptyQuerySet):
339             return self
340         query = self if self.query.can_filter() else self.model._base_manager.filter(pk__in=self.values('pk'))
341         combined = query._chain()
342         combined._merge_known_related_objects(other)
343         if not other.query.can_filter():
344             other = other.model._base_manager.filter(pk__in=other.values('pk'))
345         combined.query.combine(other.query, sql.OR)
346         return combined
347 
348     ####################################
349     # METHODS THAT DO DATABASE QUERIES #
350     ####################################
351 
352     def _iterator(self, use_chunked_fetch, chunk_size):
353         yield from self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size)
354 
355     def iterator(self, chunk_size=2000):
356         """
357         An iterator over the results from applying this QuerySet to the
358         database.
359         """
360         if chunk_size <= 0:
361             raise ValueError('Chunk size must be strictly positive.')
362         use_chunked_fetch = not connections[self.db].settings_dict.get('DISABLE_SERVER_SIDE_CURSORS')
363         return self._iterator(use_chunked_fetch, chunk_size)
364 
365     def aggregate(self, *args, **kwargs):
366         """
367         Return a dictionary containing the calculations (aggregation)
368         over the current queryset.
369 
370         If args is present the expression is passed as a kwarg using
371         the Aggregate object's default alias.
372         """
373         if self.query.distinct_fields:
374             raise NotImplementedError("aggregate() + distinct(fields) not implemented.")
375         self._validate_values_are_expressions((*args, *kwargs.values()), method_name='aggregate')
376         for arg in args:
377             # The default_alias property raises TypeError if default_alias
378             # can't be set automatically or AttributeError if it isn't an
379             # attribute.
380             try:
381                 arg.default_alias
382             except (AttributeError, TypeError):
383                 raise TypeError("Complex aggregates require an alias")
384             kwargs[arg.default_alias] = arg
385 
386         query = self.query.chain()
387         for (alias, aggregate_expr) in kwargs.items():
388             query.add_annotation(aggregate_expr, alias, is_summary=True)
389             if not query.annotations[alias].contains_aggregate:
390                 raise TypeError("%s is not an aggregate expression" % alias)
391         return query.get_aggregation(self.db, kwargs)
392 
393     def count(self):
394         """
395         Perform a SELECT COUNT() and return the number of records as an
396         integer.
397 
398         If the QuerySet is already fully cached, return the length of the
399         cached results set to avoid multiple SELECT COUNT(*) calls.
400         """
401         if self._result_cache is not None:
402             return len(self._result_cache)
403 
404         return self.query.get_count(using=self.db)
405 
406     def get(self, *args, **kwargs):
407         """
408         Perform the query and return a single object matching the given
409         keyword arguments.
410         """
411         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
412         if self.query.can_filter() and not self.query.distinct_fields:
413             clone = clone.order_by()
414         limit = None
415         if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:
416             limit = MAX_GET_RESULTS
417             clone.query.set_limits(high=limit)
418         num = len(clone)
419         if num == 1:
420             return clone._result_cache[0]
421         if not num:
422             raise self.model.DoesNotExist(
423                 "%s matching query does not exist." %
424                 self.model._meta.object_name
425             )
426         raise self.model.MultipleObjectsReturned(
427             'get() returned more than one %s -- it returned %s!' % (
428                 self.model._meta.object_name,
429                 num if not limit or num < limit else 'more than %s' % (limit - 1),
430             )
431         )
432 
433     def create(self, **kwargs):
434         """
435         Create a new object with the given kwargs, saving it to the database
436         and returning the created object.
437         """
438         obj = self.model(**kwargs)
439         self._for_write = True
440         obj.save(force_insert=True, using=self.db)
441         return obj
442 
443     def _populate_pk_values(self, objs):
444         for obj in objs:
445             if obj.pk is None:
446                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
447 
448     def bulk_create(self, objs, batch_size=None, ignore_conflicts=False):
449         """
450         Insert each of the instances into the database. Do *not* call
451         save() on each of the instances, do not send any pre/post_save
452         signals, and do not set the primary key attribute if it is an
453         autoincrement field (except if features.can_return_rows_from_bulk_insert=True).
454         Multi-table models are not supported.
455         """
456         # When you bulk insert you don't get the primary keys back (if it's an
457         # autoincrement, except if can_return_rows_from_bulk_insert=True), so
458         # you can't insert into the child tables which references this. There
459         # are two workarounds:
460         # 1) This could be implemented if you didn't have an autoincrement pk
461         # 2) You could do it by doing O(n) normal inserts into the parent
462         #    tables to get the primary keys back and then doing a single bulk
463         #    insert into the childmost table.
464         # We currently set the primary keys on the objects when using
465         # PostgreSQL via the RETURNING ID clause. It should be possible for
466         # Oracle as well, but the semantics for extracting the primary keys is
467         # trickier so it's not done yet.
468         assert batch_size is None or batch_size > 0
469         # Check that the parents share the same concrete model with the our
470         # model to detect the inheritance pattern ConcreteGrandParent ->
471         # MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy
472         # would not identify that case as involving multiple tables.
473         for parent in self.model._meta.get_parent_list():
474             if parent._meta.concrete_model is not self.model._meta.concrete_model:
475                 raise ValueError("Can't bulk create a multi-table inherited model")
476         if not objs:
477             return objs
478         self._for_write = True
479         connection = connections[self.db]
480         opts = self.model._meta
481         fields = opts.concrete_fields
482         objs = list(objs)
483         self._populate_pk_values(objs)
484         with transaction.atomic(using=self.db, savepoint=False):
485             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
486             if objs_with_pk:
487                 returned_columns = self._batched_insert(
488                     objs_with_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
489                 )
490                 for obj_with_pk, results in zip(objs_with_pk, returned_columns):
491                     for result, field in zip(results, opts.db_returning_fields):
492                         if field != opts.pk:
493                             setattr(obj_with_pk, field.attname, result)
494                 for obj_with_pk in objs_with_pk:
495                     obj_with_pk._state.adding = False
496                     obj_with_pk._state.db = self.db
497             if objs_without_pk:
498                 fields = [f for f in fields if not isinstance(f, AutoField)]
499                 returned_columns = self._batched_insert(
500                     objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
501                 )
502                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
503                     assert len(returned_columns) == len(objs_without_pk)
504                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
505                     for result, field in zip(results, opts.db_returning_fields):
506                         setattr(obj_without_pk, field.attname, result)
507                     obj_without_pk._state.adding = False
508                     obj_without_pk._state.db = self.db
509 
510         return objs
511 
512     def bulk_update(self, objs, fields, batch_size=None):
513         """
514         Update the given fields in each of the given objects in the database.
515         """
516         if batch_size is not None and batch_size < 0:
517             raise ValueError('Batch size must be a positive integer.')
518         if not fields:
519             raise ValueError('Field names must be given to bulk_update().')
520         objs = tuple(objs)
521         if any(obj.pk is None for obj in objs):
522             raise ValueError('All bulk_update() objects must have a primary key set.')
523         fields = [self.model._meta.get_field(name) for name in fields]
524         if any(not f.concrete or f.many_to_many for f in fields):
525             raise ValueError('bulk_update() can only be used with concrete fields.')
526         if any(f.primary_key for f in fields):
527             raise ValueError('bulk_update() cannot be used with primary key fields.')
528         if not objs:
529             return
530         # PK is used twice in the resulting update query, once in the filter
531         # and once in the WHEN. Each field will also have one CAST.
532         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)
533         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
534         requires_casting = connections[self.db].features.requires_casted_case_in_updates
535         batches = (objs[i:i + batch_size] for i in range(0, len(objs), batch_size))
536         updates = []
537         for batch_objs in batches:
538             update_kwargs = {}
539             for field in fields:
540                 when_statements = []
541                 for obj in batch_objs:
542                     attr = getattr(obj, field.attname)
543                     if not isinstance(attr, Expression):
544                         attr = Value(attr, output_field=field)
545                     when_statements.append(When(pk=obj.pk, then=attr))
546                 case_statement = Case(*when_statements, output_field=field)
547                 if requires_casting:
548                     case_statement = Cast(case_statement, output_field=field)
549                 update_kwargs[field.attname] = case_statement
550             updates.append(([obj.pk for obj in batch_objs], update_kwargs))
551         with transaction.atomic(using=self.db, savepoint=False):
552             for pks, update_kwargs in updates:
553                 self.filter(pk__in=pks).update(**update_kwargs)
554     bulk_update.alters_data = True
555 
556     def get_or_create(self, defaults=None, **kwargs):
557         """
558         Look up an object with the given kwargs, creating one if necessary.
559         Return a tuple of (object, created), where created is a boolean
560         specifying whether an object was created.
561         """
562         # The get() needs to be targeted at the write database in order
563         # to avoid potential transaction consistency problems.
564         self._for_write = True
565         try:
566             return self.get(**kwargs), False
567         except self.model.DoesNotExist:
568             params = self._extract_model_params(defaults, **kwargs)
569             # Try to create an object using passed params.
570             try:
571                 with transaction.atomic(using=self.db):
572                     params = dict(resolve_callables(params))
573                     return self.create(**params), True
574             except IntegrityError:
575                 try:
576                     return self.get(**kwargs), False
577                 except self.model.DoesNotExist:
578                     pass
579                 raise
580 
581     def update_or_create(self, defaults=None, **kwargs):
582         """
583         Look up an object with the given kwargs, updating one with defaults
584         if it exists, otherwise create a new one.
585         Return a tuple (object, created), where created is a boolean
586         specifying whether an object was created.
587         """
588         defaults = defaults or {}
589         self._for_write = True
590         with transaction.atomic(using=self.db):
591             # Lock the row so that a concurrent update is blocked until
592             # update_or_create() has performed its save.
593             obj, created = self.select_for_update().get_or_create(defaults, **kwargs)
594             if created:
595                 return obj, created
596             for k, v in resolve_callables(defaults):
597                 setattr(obj, k, v)
598             obj.save(using=self.db)
599         return obj, False
600 
601     def _extract_model_params(self, defaults, **kwargs):
602         """
603         Prepare `params` for creating a model instance based on the given
604         kwargs; for use by get_or_create().
605         """
606         defaults = defaults or {}
607         params = {k: v for k, v in kwargs.items() if LOOKUP_SEP not in k}
608         params.update(defaults)
609         property_names = self.model._meta._property_names
610         invalid_params = []
611         for param in params:
612             try:
613                 self.model._meta.get_field(param)
614             except exceptions.FieldDoesNotExist:
615                 # It's okay to use a model's property if it has a setter.
616                 if not (param in property_names and getattr(self.model, param).fset):
617                     invalid_params.append(param)
618         if invalid_params:
619             raise exceptions.FieldError(
620                 "Invalid field name(s) for model %s: '%s'." % (
621                     self.model._meta.object_name,
622                     "', '".join(sorted(invalid_params)),
623                 ))
624         return params
625 
626     def _earliest(self, *fields):
627         """
628         Return the earliest object according to fields (if given) or by the
629         model's Meta.get_latest_by.
630         """
631         if fields:
632             order_by = fields
633         else:
634             order_by = getattr(self.model._meta, 'get_latest_by')
635             if order_by and not isinstance(order_by, (tuple, list)):
636                 order_by = (order_by,)
637         if order_by is None:
638             raise ValueError(
639                 "earliest() and latest() require either fields as positional "
640                 "arguments or 'get_latest_by' in the model's Meta."
641             )
642 
643         assert not self.query.is_sliced, \
644             "Cannot change a query once a slice has been taken."
645         obj = self._chain()
646         obj.query.set_limits(high=1)
647         obj.query.clear_ordering(force_empty=True)
648         obj.query.add_ordering(*order_by)
649         return obj.get()
650 
651     def earliest(self, *fields):
652         return self._earliest(*fields)
653 
654     def latest(self, *fields):
655         return self.reverse()._earliest(*fields)
656 
657     def first(self):
658         """Return the first object of a query or None if no match is found."""
659         for obj in (self if self.ordered else self.order_by('pk'))[:1]:
660             return obj
661 
662     def last(self):
663         """Return the last object of a query or None if no match is found."""
664         for obj in (self.reverse() if self.ordered else self.order_by('-pk'))[:1]:
665             return obj
666 
667     def in_bulk(self, id_list=None, *, field_name='pk'):
668         """
669         Return a dictionary mapping each of the given IDs to the object with
670         that ID. If `id_list` isn't provided, evaluate the entire QuerySet.
671         """
672         assert not self.query.is_sliced, \
673             "Cannot use 'limit' or 'offset' with in_bulk"
674         opts = self.model._meta
675         unique_fields = [
676             constraint.fields[0]
677             for constraint in opts.total_unique_constraints
678             if len(constraint.fields) == 1
679         ]
680         if (
681             field_name != 'pk' and
682             not opts.get_field(field_name).unique and
683             field_name not in unique_fields and
684             not self.query.distinct_fields == (field_name,)
685         ):
686             raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
687         if id_list is not None:
688             if not id_list:
689                 return {}
690             filter_key = '{}__in'.format(field_name)
691             batch_size = connections[self.db].features.max_query_params
692             id_list = tuple(id_list)
693             # If the database has a limit on the number of query parameters
694             # (e.g. SQLite), retrieve objects in batches if necessary.
695             if batch_size and batch_size < len(id_list):
696                 qs = ()
697                 for offset in range(0, len(id_list), batch_size):
698                     batch = id_list[offset:offset + batch_size]
699                     qs += tuple(self.filter(**{filter_key: batch}).order_by())
700             else:
701                 qs = self.filter(**{filter_key: id_list}).order_by()
702         else:
703             qs = self._chain()
704         return {getattr(obj, field_name): obj for obj in qs}
705 
706     def delete(self):
707         """Delete the records in the current QuerySet."""
708         self._not_support_combined_queries('delete')
709         assert not self.query.is_sliced, \
710             "Cannot use 'limit' or 'offset' with delete."
711 
712         if self._fields is not None:
713             raise TypeError("Cannot call delete() after .values() or .values_list()")
714 
715         del_query = self._chain()
716 
717         # The delete is actually 2 queries - one to find related objects,
718         # and one to delete. Make sure that the discovery of related
719         # objects is performed on the same database as the deletion.
720         del_query._for_write = True
721 
722         # Disable non-supported fields.
723         del_query.query.select_for_update = False
724         del_query.query.select_related = False
725         del_query.query.clear_ordering(force_empty=True)
726 
727         collector = Collector(using=del_query.db)
728         collector.collect(del_query)
729         deleted, _rows_count = collector.delete()
730 
731         # Clear the result cache, in case this QuerySet gets reused.
732         self._result_cache = None
733         return deleted, _rows_count
734 
735     delete.alters_data = True
736     delete.queryset_only = True
737 
738     def _raw_delete(self, using):
739         """
740         Delete objects found from the given queryset in single direct SQL
741         query. No signals are sent and there is no protection for cascades.
742         """
743         query = self.query.clone()
744         query.__class__ = sql.DeleteQuery
745         cursor = query.get_compiler(using).execute_sql(CURSOR)
746         if cursor:
747             with cursor:
748                 return cursor.rowcount
749         return 0
750     _raw_delete.alters_data = True
751 
752     def update(self, **kwargs):
753         """
754         Update all elements in the current QuerySet, setting all the given
755         fields to the appropriate values.
756         """
757         self._not_support_combined_queries('update')
758         assert not self.query.is_sliced, \
759             "Cannot update a query once a slice has been taken."
760         self._for_write = True
761         query = self.query.chain(sql.UpdateQuery)
762         query.add_update_values(kwargs)
763         # Clear any annotations so that they won't be present in subqueries.
764         query.annotations = {}
765         with transaction.mark_for_rollback_on_error(using=self.db):
766             rows = query.get_compiler(self.db).execute_sql(CURSOR)
767         self._result_cache = None
768         return rows
769     update.alters_data = True
770 
771     def _update(self, values):
772         """
773         A version of update() that accepts field objects instead of field names.
774         Used primarily for model saving and not intended for use by general
775         code (it requires too much poking around at model internals to be
776         useful at that level).
777         """
778         assert not self.query.is_sliced, \
779             "Cannot update a query once a slice has been taken."
780         query = self.query.chain(sql.UpdateQuery)
781         query.add_update_fields(values)
782         # Clear any annotations so that they won't be present in subqueries.
783         query.annotations = {}
784         self._result_cache = None
785         return query.get_compiler(self.db).execute_sql(CURSOR)
786     _update.alters_data = True
787     _update.queryset_only = False
788 
789     def exists(self):
790         if self._result_cache is None:
791             return self.query.has_results(using=self.db)
792         return bool(self._result_cache)
793 
794     def _prefetch_related_objects(self):
795         # This method can only be called once the result cache has been filled.
796         prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups)
797         self._prefetch_done = True
798 
799     def explain(self, *, format=None, **options):
800         return self.query.explain(using=self.db, format=format, **options)
801 
802     ##################################################
803     # PUBLIC METHODS THAT RETURN A QUERYSET SUBCLASS #
804     ##################################################
805 
806     def raw(self, raw_query, params=None, translations=None, using=None):
807         if using is None:
808             using = self.db
809         qs = RawQuerySet(raw_query, model=self.model, params=params, translations=translations, using=using)
810         qs._prefetch_related_lookups = self._prefetch_related_lookups[:]
811         return qs
812 
813     def _values(self, *fields, **expressions):
814         clone = self._chain()
815         if expressions:
816             clone = clone.annotate(**expressions)
817         clone._fields = fields
818         clone.query.set_values(fields)
819         return clone
820 
821     def values(self, *fields, **expressions):
822         fields += tuple(expressions)
823         clone = self._values(*fields, **expressions)
824         clone._iterable_class = ValuesIterable
825         return clone
826 
827     def values_list(self, *fields, flat=False, named=False):
828         if flat and named:
829             raise TypeError("'flat' and 'named' can't be used together.")
830         if flat and len(fields) > 1:
831             raise TypeError("'flat' is not valid when values_list is called with more than one field.")
832 
833         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
834         _fields = []
835         expressions = {}
836         counter = 1
837         for field in fields:
838             if hasattr(field, 'resolve_expression'):
839                 field_id_prefix = getattr(field, 'default_alias', field.__class__.__name__.lower())
840                 while True:
841                     field_id = field_id_prefix + str(counter)
842                     counter += 1
843                     if field_id not in field_names:
844                         break
845                 expressions[field_id] = field
846                 _fields.append(field_id)
847             else:
848                 _fields.append(field)
849 
850         clone = self._values(*_fields, **expressions)
851         clone._iterable_class = (
852             NamedValuesListIterable if named
853             else FlatValuesListIterable if flat
854             else ValuesListIterable
855         )
856         return clone
857 
858     def dates(self, field_name, kind, order='ASC'):
859         """
860         Return a list of date objects representing all available dates for
861         the given field_name, scoped to 'kind'.
862         """
863         assert kind in ('year', 'month', 'week', 'day'), \
864             "'kind' must be one of 'year', 'month', 'week', or 'day'."
865         assert order in ('ASC', 'DESC'), \
866             "'order' must be either 'ASC' or 'DESC'."
867         return self.annotate(
868             datefield=Trunc(field_name, kind, output_field=DateField()),
869             plain_field=F(field_name)
870         ).values_list(
871             'datefield', flat=True
872         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datefield')
873 
874     def datetimes(self, field_name, kind, order='ASC', tzinfo=None, is_dst=None):
875         """
876         Return a list of datetime objects representing all available
877         datetimes for the given field_name, scoped to 'kind'.
878         """
879         assert kind in ('year', 'month', 'week', 'day', 'hour', 'minute', 'second'), \
880             "'kind' must be one of 'year', 'month', 'week', 'day', 'hour', 'minute', or 'second'."
881         assert order in ('ASC', 'DESC'), \
882             "'order' must be either 'ASC' or 'DESC'."
883         if settings.USE_TZ:
884             if tzinfo is None:
885                 tzinfo = timezone.get_current_timezone()
886         else:
887             tzinfo = None
888         return self.annotate(
889             datetimefield=Trunc(
890                 field_name,
891                 kind,
892                 output_field=DateTimeField(),
893                 tzinfo=tzinfo,
894                 is_dst=is_dst,
895             ),
896             plain_field=F(field_name)
897         ).values_list(
898             'datetimefield', flat=True
899         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datetimefield')
900 
901     def none(self):
902         """Return an empty QuerySet."""
903         clone = self._chain()
904         clone.query.set_empty()
905         return clone
906 
907     ##################################################################
908     # PUBLIC METHODS THAT ALTER ATTRIBUTES AND RETURN A NEW QUERYSET #
909     ##################################################################
910 
911     def all(self):
912         """
913         Return a new QuerySet that is a copy of the current one. This allows a
914         QuerySet to proxy for a model manager in some cases.
915         """
916         return self._chain()
917 
918     def filter(self, *args, **kwargs):
919         """
920         Return a new QuerySet instance with the args ANDed to the existing
921         set.
922         """
923         self._not_support_combined_queries('filter')
924         return self._filter_or_exclude(False, args, kwargs)
925 
926     def exclude(self, *args, **kwargs):
927         """
928         Return a new QuerySet instance with NOT (args) ANDed to the existing
929         set.
930         """
931         self._not_support_combined_queries('exclude')
932         return self._filter_or_exclude(True, args, kwargs)
933 
934     def _filter_or_exclude(self, negate, args, kwargs):
935         if args or kwargs:
936             assert not self.query.is_sliced, \
937                 "Cannot filter a query once a slice has been taken."
938 
939         clone = self._chain()
940         if self._defer_next_filter:
941             self._defer_next_filter = False
942             clone._deferred_filter = negate, args, kwargs
943         else:
944             clone._filter_or_exclude_inplace(negate, args, kwargs)
945         return clone
946 
947     def _filter_or_exclude_inplace(self, negate, args, kwargs):
948         if negate:
949             self._query.add_q(~Q(*args, **kwargs))
950         else:
951             self._query.add_q(Q(*args, **kwargs))
952 
953     def complex_filter(self, filter_obj):
954         """
955         Return a new QuerySet instance with filter_obj added to the filters.
956 
957         filter_obj can be a Q object or a dictionary of keyword lookup
958         arguments.
959 
960         This exists to support framework features such as 'limit_choices_to',
961         and usually it will be more natural to use other methods.
962         """
963         if isinstance(filter_obj, Q):
964             clone = self._chain()
965             clone.query.add_q(filter_obj)
966             return clone
967         else:
968             return self._filter_or_exclude(False, args=(), kwargs=filter_obj)
969 
970     def _combinator_query(self, combinator, *other_qs, all=False):
971         # Clone the query to inherit the select list and everything
972         clone = self._chain()
973         # Clear limits and ordering so they can be reapplied
974         clone.query.clear_ordering(True)
975         clone.query.clear_limits()
976         clone.query.combined_queries = (self.query,) + tuple(qs.query for qs in other_qs)
977         clone.query.combinator = combinator
978         clone.query.combinator_all = all
979         return clone
980 
981     def union(self, *other_qs, all=False):
982         # If the query is an EmptyQuerySet, combine all nonempty querysets.
983         if isinstance(self, EmptyQuerySet):
984             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]
985             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self
986         return self._combinator_query('union', *other_qs, all=all)
987 
988     def intersection(self, *other_qs):
989         # If any query is an EmptyQuerySet, return it.
990         if isinstance(self, EmptyQuerySet):
991             return self
992         for other in other_qs:
993             if isinstance(other, EmptyQuerySet):
994                 return other
995         return self._combinator_query('intersection', *other_qs)
996 
997     def difference(self, *other_qs):
998         # If the query is an EmptyQuerySet, return it.
999         if isinstance(self, EmptyQuerySet):
1000             return self
1001         return self._combinator_query('difference', *other_qs)
1002 
1003     def select_for_update(self, nowait=False, skip_locked=False, of=(), no_key=False):
1004         """
1005         Return a new QuerySet instance that will select objects with a
1006         FOR UPDATE lock.
1007         """
1008         if nowait and skip_locked:
1009             raise ValueError('The nowait option cannot be used with skip_locked.')
1010         obj = self._chain()
1011         obj._for_write = True
1012         obj.query.select_for_update = True
1013         obj.query.select_for_update_nowait = nowait
1014         obj.query.select_for_update_skip_locked = skip_locked
1015         obj.query.select_for_update_of = of
1016         obj.query.select_for_no_key_update = no_key
1017         return obj
1018 
1019     def select_related(self, *fields):
1020         """
1021         Return a new QuerySet instance that will select related objects.
1022 
1023         If fields are specified, they must be ForeignKey fields and only those
1024         related objects are included in the selection.
1025 
1026         If select_related(None) is called, clear the list.
1027         """
1028         self._not_support_combined_queries('select_related')
1029         if self._fields is not None:
1030             raise TypeError("Cannot call select_related() after .values() or .values_list()")
1031 
1032         obj = self._chain()
1033         if fields == (None,):
1034             obj.query.select_related = False
1035         elif fields:
1036             obj.query.add_select_related(fields)
1037         else:
1038             obj.query.select_related = True
1039         return obj
1040 
1041     def prefetch_related(self, *lookups):
1042         """
1043         Return a new QuerySet instance that will prefetch the specified
1044         Many-To-One and Many-To-Many related objects when the QuerySet is
1045         evaluated.
1046 
1047         When prefetch_related() is called more than once, append to the list of
1048         prefetch lookups. If prefetch_related(None) is called, clear the list.
1049         """
1050         self._not_support_combined_queries('prefetch_related')
1051         clone = self._chain()
1052         if lookups == (None,):
1053             clone._prefetch_related_lookups = ()
1054         else:
1055             for lookup in lookups:
1056                 if isinstance(lookup, Prefetch):
1057                     lookup = lookup.prefetch_to
1058                 lookup = lookup.split(LOOKUP_SEP, 1)[0]
1059                 if lookup in self.query._filtered_relations:
1060                     raise ValueError('prefetch_related() is not supported with FilteredRelation.')
1061             clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups
1062         return clone
1063 
1064     def annotate(self, *args, **kwargs):
1065         """
1066         Return a query set in which the returned objects have been annotated
1067         with extra data or aggregations.
1068         """
1069         self._not_support_combined_queries('annotate')
1070         return self._annotate(args, kwargs, select=True)
1071 
1072     def alias(self, *args, **kwargs):
1073         """
1074         Return a query set with added aliases for extra data or aggregations.
1075         """
1076         self._not_support_combined_queries('alias')
1077         return self._annotate(args, kwargs, select=False)
1078 
1079     def _annotate(self, args, kwargs, select=True):
1080         self._validate_values_are_expressions(args + tuple(kwargs.values()), method_name='annotate')
1081         annotations = {}
1082         for arg in args:
1083             # The default_alias property may raise a TypeError.
1084             try:
1085                 if arg.default_alias in kwargs:
1086                     raise ValueError("The named annotation '%s' conflicts with the "
1087                                      "default name for another annotation."
1088                                      % arg.default_alias)
1089             except TypeError:
1090                 raise TypeError("Complex annotations require an alias")
1091             annotations[arg.default_alias] = arg
1092         annotations.update(kwargs)
1093 
1094         clone = self._chain()
1095         names = self._fields
1096         if names is None:
1097             names = set(chain.from_iterable(
1098                 (field.name, field.attname) if hasattr(field, 'attname') else (field.name,)
1099                 for field in self.model._meta.get_fields()
1100             ))
1101 
1102         for alias, annotation in annotations.items():
1103             if alias in names:
1104                 raise ValueError("The annotation '%s' conflicts with a field on "
1105                                  "the model." % alias)
1106             if isinstance(annotation, FilteredRelation):
1107                 clone.query.add_filtered_relation(annotation, alias)
1108             else:
1109                 clone.query.add_annotation(
1110                     annotation, alias, is_summary=False, select=select,
1111                 )
1112         for alias, annotation in clone.query.annotations.items():
1113             if alias in annotations and annotation.contains_aggregate:
1114                 if clone._fields is None:
1115                     clone.query.group_by = True
1116                 else:
1117                     clone.query.set_group_by()
1118                 break
1119 
1120         return clone
1121 
1122     def order_by(self, *field_names):
1123         """Return a new QuerySet instance with the ordering changed."""
1124         assert not self.query.is_sliced, \
1125             "Cannot reorder a query once a slice has been taken."
1126         obj = self._chain()
1127         obj.query.clear_ordering(force_empty=False)
1128         obj.query.add_ordering(*field_names)
1129         return obj
1130 
1131     def distinct(self, *field_names):
1132         """
1133         Return a new QuerySet instance that will select only distinct results.
1134         """
1135         self._not_support_combined_queries('distinct')
1136         assert not self.query.is_sliced, \
1137             "Cannot create distinct fields once a slice has been taken."
1138         obj = self._chain()
1139         obj.query.add_distinct_fields(*field_names)
1140         return obj
1141 
1142     def extra(self, select=None, where=None, params=None, tables=None,
1143               order_by=None, select_params=None):
1144         """Add extra SQL fragments to the query."""
1145         self._not_support_combined_queries('extra')
1146         assert not self.query.is_sliced, \
1147             "Cannot change a query once a slice has been taken"
1148         clone = self._chain()
1149         clone.query.add_extra(select, select_params, where, params, tables, order_by)
1150         return clone
1151 
1152     def reverse(self):
1153         """Reverse the ordering of the QuerySet."""
1154         if self.query.is_sliced:
1155             raise TypeError('Cannot reverse a query once a slice has been taken.')
1156         clone = self._chain()
1157         clone.query.standard_ordering = not clone.query.standard_ordering
1158         return clone
1159 
1160     def defer(self, *fields):
1161         """
1162         Defer the loading of data for certain fields until they are accessed.
1163         Add the set of deferred fields to any existing set of deferred fields.
1164         The only exception to this is if None is passed in as the only
1165         parameter, in which case removal all deferrals.
1166         """
1167         self._not_support_combined_queries('defer')
1168         if self._fields is not None:
1169             raise TypeError("Cannot call defer() after .values() or .values_list()")
1170         clone = self._chain()
1171         if fields == (None,):
1172             clone.query.clear_deferred_loading()
1173         else:
1174             clone.query.add_deferred_loading(fields)
1175         return clone
1176 
1177     def only(self, *fields):
1178         """
1179         Essentially, the opposite of defer(). Only the fields passed into this
1180         method and that are not already specified as deferred are loaded
1181         immediately when the queryset is evaluated.
1182         """
1183         self._not_support_combined_queries('only')
1184         if self._fields is not None:
1185             raise TypeError("Cannot call only() after .values() or .values_list()")
1186         if fields == (None,):
1187             # Can only pass None to defer(), not only(), as the rest option.
1188             # That won't stop people trying to do this, so let's be explicit.
1189             raise TypeError("Cannot pass None as an argument to only().")
1190         for field in fields:
1191             field = field.split(LOOKUP_SEP, 1)[0]
1192             if field in self.query._filtered_relations:
1193                 raise ValueError('only() is not supported with FilteredRelation.')
1194         clone = self._chain()
1195         clone.query.add_immediate_loading(fields)
1196         return clone
1197 
1198     def using(self, alias):
1199         """Select which database this QuerySet should execute against."""
1200         clone = self._chain()
1201         clone._db = alias
1202         return clone
1203 
1204     ###################################
1205     # PUBLIC INTROSPECTION ATTRIBUTES #
1206     ###################################
1207 
1208     @property
1209     def ordered(self):
1210         """
1211         Return True if the QuerySet is ordered -- i.e. has an order_by()
1212         clause or a default ordering on the model (or is empty).
1213         """
1214         if isinstance(self, EmptyQuerySet):
1215             return True
1216         if self.query.extra_order_by or self.query.order_by:
1217             return True
1218         elif (
1219             self.query.default_ordering and
1220             self.query.get_meta().ordering and
1221             # A default ordering doesn't affect GROUP BY queries.
1222             not self.query.group_by
1223         ):
1224             return True
1225         else:
1226             return False
1227 
1228     @property
1229     def db(self):
1230         """Return the database used if this query is executed now."""
1231         if self._for_write:
1232             return self._db or router.db_for_write(self.model, **self._hints)
1233         return self._db or router.db_for_read(self.model, **self._hints)
1234 
1235     ###################
1236     # PRIVATE METHODS #
1237     ###################
1238 
1239     def _insert(self, objs, fields, returning_fields=None, raw=False, using=None, ignore_conflicts=False):
1240         """
1241         Insert a new record for the given model. This provides an interface to
1242         the InsertQuery class and is how Model.save() is implemented.
1243         """
1244         self._for_write = True
1245         if using is None:
1246             using = self.db
1247         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
1248         query.insert_values(fields, objs, raw=raw)
1249         return query.get_compiler(using=using).execute_sql(returning_fields)
1250     _insert.alters_data = True
1251     _insert.queryset_only = False
1252 
1253     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):
1254         """
1255         Helper method for bulk_create() to insert objs one batch at a time.
1256         """
1257         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
1258             raise NotSupportedError('This database backend does not support ignoring conflicts.')
1259         ops = connections[self.db].ops
1260         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
1261         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
1262         inserted_rows = []
1263         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
1264         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
1265             if bulk_return and not ignore_conflicts:
1266                 inserted_rows.extend(self._insert(
1267                     item, fields=fields, using=self.db,
1268                     returning_fields=self.model._meta.db_returning_fields,
1269                     ignore_conflicts=ignore_conflicts,
1270                 ))
1271             else:
1272                 self._insert(item, fields=fields, using=self.db, ignore_conflicts=ignore_conflicts)
1273         return inserted_rows
1274 
1275     def _chain(self, **kwargs):
1276         """
1277         Return a copy of the current QuerySet that's ready for another
1278         operation.
1279         """
1280         obj = self._clone()
1281         if obj._sticky_filter:
1282             obj.query.filter_is_sticky = True
1283             obj._sticky_filter = False
1284         obj.__dict__.update(kwargs)
1285         return obj
1286 
1287     def _clone(self):
1288         """
1289         Return a copy of the current QuerySet. A lightweight alternative
1290         to deepcopy().
1291         """
1292         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
1293         c._sticky_filter = self._sticky_filter
1294         c._for_write = self._for_write
1295         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
1296         c._known_related_objects = self._known_related_objects
1297         c._iterable_class = self._iterable_class
1298         c._fields = self._fields
1299         return c
1300 
1301     def _fetch_all(self):
1302         if self._result_cache is None:
1303             self._result_cache = list(self._iterable_class(self))
1304         if self._prefetch_related_lookups and not self._prefetch_done:
1305             self._prefetch_related_objects()
1306 
1307     def _next_is_sticky(self):
1308         """
1309         Indicate that the next filter call and the one following that should
1310         be treated as a single filter. This is only important when it comes to
1311         determining when to reuse tables for many-to-many filters. Required so
1312         that we can filter naturally on the results of related managers.
1313 
1314         This doesn't return a clone of the current QuerySet (it returns
1315         "self"). The method is only used internally and should be immediately
1316         followed by a filter() that does create a clone.
1317         """
1318         self._sticky_filter = True
1319         return self
1320 
1321     def _merge_sanity_check(self, other):
1322         """Check that two QuerySet classes may be merged."""
1323         if self._fields is not None and (
1324                 set(self.query.values_select) != set(other.query.values_select) or
1325                 set(self.query.extra_select) != set(other.query.extra_select) or
1326                 set(self.query.annotation_select) != set(other.query.annotation_select)):
1327             raise TypeError(
1328                 "Merging '%s' classes must involve the same values in each case."
1329                 % self.__class__.__name__
1330             )
1331 
1332     def _merge_known_related_objects(self, other):
1333         """
1334         Keep track of all known related objects from either QuerySet instance.
1335         """
1336         for field, objects in other._known_related_objects.items():
1337             self._known_related_objects.setdefault(field, {}).update(objects)
1338 
1339     def resolve_expression(self, *args, **kwargs):
1340         if self._fields and len(self._fields) > 1:
1341             # values() queryset can only be used as nested queries
1342             # if they are set up to select only a single field.
1343             raise TypeError('Cannot use multi-field values as a filter value.')
1344         query = self.query.resolve_expression(*args, **kwargs)
1345         query._db = self._db
1346         return query
1347     resolve_expression.queryset_only = True
1348 
1349     def _add_hints(self, **hints):
1350         """
1351         Update hinting information for use by routers. Add new key/values or
1352         overwrite existing key/values.
1353         """
1354         self._hints.update(hints)
1355 
1356     def _has_filters(self):
1357         """
1358         Check if this QuerySet has any filtering going on. This isn't
1359         equivalent with checking if all objects are present in results, for
1360         example, qs[1:]._has_filters() -> False.
1361         """
1362         return self.query.has_filters()
1363 
1364     @staticmethod
1365     def _validate_values_are_expressions(values, method_name):
1366         invalid_args = sorted(str(arg) for arg in values if not hasattr(arg, 'resolve_expression'))
1367         if invalid_args:
1368             raise TypeError(
1369                 'QuerySet.%s() received non-expression(s): %s.' % (
1370                     method_name,
1371                     ', '.join(invalid_args),
1372                 )
1373             )
1374 
1375     def _not_support_combined_queries(self, operation_name):
1376         if self.query.combinator:
1377             raise NotSupportedError(
1378                 'Calling QuerySet.%s() after %s() is not supported.'
1379                 % (operation_name, self.query.combinator)
1380             )

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>django/db/models/sql/compiler.py</file>
<class>SQLCompiler</class>
<method>None</method>
<code>
22 class SQLCompiler:
23     # Multiline ordering SQL clause may appear from RawSQL.
24     ordering_parts = _lazy_re_compile(
25         r'^(.*)\s(?:ASC|DESC).*',
26         re.MULTILINE | re.DOTALL,
27     )
28 
29     def __init__(self, query, connection, using):
30         self.query = query
31         self.connection = connection
32         self.using = using
33         self.quote_cache = {'*': '*'}
34         # The select, klass_info, and annotations are needed by QuerySet.iterator()
35         # these are set as a side-effect of executing the query. Note that we calculate
36         # separately a list of extra select columns needed for grammatical correctness
37         # of the query, but these columns are not included in self.select.
38         self.select = None
39         self.annotation_col_map = None
40         self.klass_info = None
41         self._meta_ordering = None
42 
43     def setup_query(self):
44         if all(self.query.alias_refcount[a] == 0 for a in self.query.alias_map):
45             self.query.get_initial_alias()
46         self.select, self.klass_info, self.annotation_col_map = self.get_select()
47         self.col_count = len(self.select)
48 
49     def pre_sql_setup(self):
50         """
51         Do any necessary class setup immediately prior to producing SQL. This
52         is for things that can't necessarily be done in __init__ because we
53         might not have all the pieces in place at that time.
54         """
55         self.setup_query()
56         order_by = self.get_order_by()
57         self.where, self.having = self.query.where.split_having()
58         extra_select = self.get_extra_select(order_by, self.select)
59         self.has_extra_select = bool(extra_select)
60         group_by = self.get_group_by(self.select + extra_select, order_by)
61         return extra_select, order_by, group_by
62 
63     def get_group_by(self, select, order_by):
64         """
65         Return a list of 2-tuples of form (sql, params).
66 
67         The logic of what exactly the GROUP BY clause contains is hard
68         to describe in other words than "if it passes the test suite,
69         then it is correct".
70         """
71         # Some examples:
72         #     SomeModel.objects.annotate(Count('somecol'))
73         #     GROUP BY: all fields of the model
74         #
75         #    SomeModel.objects.values('name').annotate(Count('somecol'))
76         #    GROUP BY: name
77         #
78         #    SomeModel.objects.annotate(Count('somecol')).values('name')
79         #    GROUP BY: all cols of the model
80         #
81         #    SomeModel.objects.values('name', 'pk').annotate(Count('somecol')).values('pk')
82         #    GROUP BY: name, pk
83         #
84         #    SomeModel.objects.values('name').annotate(Count('somecol')).values('pk')
85         #    GROUP BY: name, pk
86         #
87         # In fact, the self.query.group_by is the minimal set to GROUP BY. It
88         # can't be ever restricted to a smaller set, but additional columns in
89         # HAVING, ORDER BY, and SELECT clauses are added to it. Unfortunately
90         # the end result is that it is impossible to force the query to have
91         # a chosen GROUP BY clause - you can almost do this by using the form:
92         #     .values(*wanted_cols).annotate(AnAggregate())
93         # but any later annotations, extra selects, values calls that
94         # refer some column outside of the wanted_cols, order_by, or even
95         # filter calls can alter the GROUP BY clause.
96 
97         # The query.group_by is either None (no GROUP BY at all), True
98         # (group by select fields), or a list of expressions to be added
99         # to the group by.
100         if self.query.group_by is None:
101             return []
102         expressions = []
103         if self.query.group_by is not True:
104             # If the group by is set to a list (by .values() call most likely),
105             # then we need to add everything in it to the GROUP BY clause.
106             # Backwards compatibility hack for setting query.group_by. Remove
107             # when  we have public API way of forcing the GROUP BY clause.
108             # Converts string references to expressions.
109             for expr in self.query.group_by:
110                 if not hasattr(expr, 'as_sql'):
111                     expressions.append(self.query.resolve_ref(expr))
112                 else:
113                     expressions.append(expr)
114         # Note that even if the group_by is set, it is only the minimal
115         # set to group by. So, we need to add cols in select, order_by, and
116         # having into the select in any case.
117         ref_sources = {
118             expr.source for expr in expressions if isinstance(expr, Ref)
119         }
120         for expr, _, _ in select:
121             # Skip members of the select clause that are already included
122             # by reference.
123             if expr in ref_sources:
124                 continue
125             cols = expr.get_group_by_cols()
126             for col in cols:
127                 expressions.append(col)
128         for expr, (sql, params, is_ref) in order_by:
129             # Skip References to the select clause, as all expressions in the
130             # select clause are already part of the group by.
131             if not is_ref:
132                 expressions.extend(expr.get_group_by_cols())
133         having_group_by = self.having.get_group_by_cols() if self.having else ()
134         for expr in having_group_by:
135             expressions.append(expr)
136         result = []
137         seen = set()
138         expressions = self.collapse_group_by(expressions, having_group_by)
139 
140         for expr in expressions:
141             sql, params = self.compile(expr)
142             sql, params = expr.select_format(self, sql, params)
143             params_hash = make_hashable(params)
144             if (sql, params_hash) not in seen:
145                 result.append((sql, params))
146                 seen.add((sql, params_hash))
147         return result
148 
149     def collapse_group_by(self, expressions, having):
150         # If the DB can group by primary key, then group by the primary key of
151         # query's main model. Note that for PostgreSQL the GROUP BY clause must
152         # include the primary key of every table, but for MySQL it is enough to
153         # have the main table's primary key.
154         if self.connection.features.allows_group_by_pk:
155             # Determine if the main model's primary key is in the query.
156             pk = None
157             for expr in expressions:
158                 # Is this a reference to query's base table primary key? If the
159                 # expression isn't a Col-like, then skip the expression.
160                 if (getattr(expr, 'target', None) == self.query.model._meta.pk and
161                         getattr(expr, 'alias', None) == self.query.base_table):
162                     pk = expr
163                     break
164             # If the main model's primary key is in the query, group by that
165             # field, HAVING expressions, and expressions associated with tables
166             # that don't have a primary key included in the grouped columns.
167             if pk:
168                 pk_aliases = {
169                     expr.alias for expr in expressions
170                     if hasattr(expr, 'target') and expr.target.primary_key
171                 }
172                 expressions = [pk] + [
173                     expr for expr in expressions
174                     if expr in having or (
175                         getattr(expr, 'alias', None) is not None and expr.alias not in pk_aliases
176                     )
177                 ]
178         elif self.connection.features.allows_group_by_selected_pks:
179             # Filter out all expressions associated with a table's primary key
180             # present in the grouped columns. This is done by identifying all
181             # tables that have their primary key included in the grouped
182             # columns and removing non-primary key columns referring to them.
183             # Unmanaged models are excluded because they could be representing
184             # database views on which the optimization might not be allowed.
185             pks = {
186                 expr for expr in expressions
187                 if (
188                     hasattr(expr, 'target') and
189                     expr.target.primary_key and
190                     self.connection.features.allows_group_by_selected_pks_on_model(expr.target.model)
191                 )
192             }
193             aliases = {expr.alias for expr in pks}
194             expressions = [
195                 expr for expr in expressions if expr in pks or getattr(expr, 'alias', None) not in aliases
196             ]
197         return expressions
198 
199     def get_select(self):
200         """
201         Return three values:
202         - a list of 3-tuples of (expression, (sql, params), alias)
203         - a klass_info structure,
204         - a dictionary of annotations
205 
206         The (sql, params) is what the expression will produce, and alias is the
207         "AS alias" for the column (possibly None).
208 
209         The klass_info structure contains the following information:
210         - The base model of the query.
211         - Which columns for that model are present in the query (by
212           position of the select clause).
213         - related_klass_infos: [f, klass_info] to descent into
214 
215         The annotations is a dictionary of {'attname': column position} values.
216         """
217         select = []
218         klass_info = None
219         annotations = {}
220         select_idx = 0
221         for alias, (sql, params) in self.query.extra_select.items():
222             annotations[alias] = select_idx
223             select.append((RawSQL(sql, params), alias))
224             select_idx += 1
225         assert not (self.query.select and self.query.default_cols)
226         if self.query.default_cols:
227             cols = self.get_default_columns()
228         else:
229             # self.query.select is a special case. These columns never go to
230             # any model.
231             cols = self.query.select
232         if cols:
233             select_list = []
234             for col in cols:
235                 select_list.append(select_idx)
236                 select.append((col, None))
237                 select_idx += 1
238             klass_info = {
239                 'model': self.query.model,
240                 'select_fields': select_list,
241             }
242         for alias, annotation in self.query.annotation_select.items():
243             annotations[alias] = select_idx
244             select.append((annotation, alias))
245             select_idx += 1
246 
247         if self.query.select_related:
248             related_klass_infos = self.get_related_selections(select)
249             klass_info['related_klass_infos'] = related_klass_infos
250 
251             def get_select_from_parent(klass_info):
252                 for ki in klass_info['related_klass_infos']:
253                     if ki['from_parent']:
254                         ki['select_fields'] = (klass_info['select_fields'] +
255                                                ki['select_fields'])
256                     get_select_from_parent(ki)
257             get_select_from_parent(klass_info)
258 
259         ret = []
260         for col, alias in select:
261             try:
262                 sql, params = self.compile(col)
263             except EmptyResultSet:
264                 # Select a predicate that's always False.
265                 sql, params = '0', ()
266             else:
267                 sql, params = col.select_format(self, sql, params)
268             ret.append((col, (sql, params), alias))
269         return ret, klass_info, annotations
270 
271     def get_order_by(self):
272         """
273         Return a list of 2-tuples of form (expr, (sql, params, is_ref)) for the
274         ORDER BY clause.
275 
276         The order_by clause can alter the select clause (for example it
277         can add aliases to clauses that do not yet have one, or it can
278         add totally new select clauses).
279         """
280         if self.query.extra_order_by:
281             ordering = self.query.extra_order_by
282         elif not self.query.default_ordering:
283             ordering = self.query.order_by
284         elif self.query.order_by:
285             ordering = self.query.order_by
286         elif self.query.get_meta().ordering:
287             ordering = self.query.get_meta().ordering
288             self._meta_ordering = ordering
289         else:
290             ordering = []
291         if self.query.standard_ordering:
292             asc, desc = ORDER_DIR['ASC']
293         else:
294             asc, desc = ORDER_DIR['DESC']
295 
296         order_by = []
297         for field in ordering:
298             if hasattr(field, 'resolve_expression'):
299                 if isinstance(field, Value):
300                     # output_field must be resolved for constants.
301                     field = Cast(field, field.output_field)
302                 if not isinstance(field, OrderBy):
303                     field = field.asc()
304                 if not self.query.standard_ordering:
305                     field = field.copy()
306                     field.reverse_ordering()
307                 order_by.append((field, False))
308                 continue
309             if field == '?':  # random
310                 order_by.append((OrderBy(Random()), False))
311                 continue
312 
313             col, order = get_order_dir(field, asc)
314             descending = order == 'DESC'
315 
316             if col in self.query.annotation_select:
317                 # Reference to expression in SELECT clause
318                 order_by.append((
319                     OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),
320                     True))
321                 continue
322             if col in self.query.annotations:
323                 # References to an expression which is masked out of the SELECT
324                 # clause.
325                 expr = self.query.annotations[col]
326                 if isinstance(expr, Value):
327                     # output_field must be resolved for constants.
328                     expr = Cast(expr, expr.output_field)
329                 order_by.append((OrderBy(expr, descending=descending), False))
330                 continue
331 
332             if '.' in field:
333                 # This came in through an extra(order_by=...) addition. Pass it
334                 # on verbatim.
335                 table, col = col.split('.', 1)
336                 order_by.append((
337                     OrderBy(
338                         RawSQL('%s.%s' % (self.quote_name_unless_alias(table), col), []),
339                         descending=descending
340                     ), False))
341                 continue
342 
343             if not self.query.extra or col not in self.query.extra:
344                 # 'col' is of the form 'field' or 'field1__field2' or
345                 # '-field1__field2__field', etc.
346                 order_by.extend(self.find_ordering_name(
347                     field, self.query.get_meta(), default_order=asc))
348             else:
349                 if col not in self.query.extra_select:
350                     order_by.append((
351                         OrderBy(RawSQL(*self.query.extra[col]), descending=descending),
352                         False))
353                 else:
354                     order_by.append((
355                         OrderBy(Ref(col, RawSQL(*self.query.extra[col])), descending=descending),
356                         True))
357         result = []
358         seen = set()
359 
360         for expr, is_ref in order_by:
361             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)
362             if self.query.combinator and self.select:
363                 src = resolved.get_source_expressions()[0]
364                 expr_src = expr.get_source_expressions()[0]
365                 # Relabel order by columns to raw numbers if this is a combined
366                 # query; necessary since the columns can't be referenced by the
367                 # fully qualified name and the simple column names may collide.
368                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):
369                     if is_ref and col_alias == src.refs:
370                         src = src.source
371                     elif col_alias and not (
372                         isinstance(expr_src, F) and col_alias == expr_src.name
373                     ):
374                         continue
375                     if src == sel_expr:
376                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
377                         break
378                 else:
379                     if col_alias:
380                         raise DatabaseError('ORDER BY term does not match any column in the result set.')
381                     # Add column used in ORDER BY clause without an alias to
382                     # the selected columns.
383                     self.query.add_select_col(src)
384                     resolved.set_source_expressions([RawSQL('%d' % len(self.query.select), ())])
385             sql, params = self.compile(resolved)
386             # Don't add the same column twice, but the order direction is
387             # not taken into account so we strip it. When this entire method
388             # is refactored into expressions, then we can check each part as we
389             # generate it.
390             without_ordering = self.ordering_parts.search(sql)[1]
391             params_hash = make_hashable(params)
392             if (without_ordering, params_hash) in seen:
393                 continue
394             seen.add((without_ordering, params_hash))
395             result.append((resolved, (sql, params, is_ref)))
396         return result
397 
398     def get_extra_select(self, order_by, select):
399         extra_select = []
400         if self.query.distinct and not self.query.distinct_fields:
401             select_sql = [t[1] for t in select]
402             for expr, (sql, params, is_ref) in order_by:
403                 without_ordering = self.ordering_parts.search(sql)[1]
404                 if not is_ref and (without_ordering, params) not in select_sql:
405                     extra_select.append((expr, (without_ordering, params), None))
406         return extra_select
407 
408     def quote_name_unless_alias(self, name):
409         """
410         A wrapper around connection.ops.quote_name that doesn't quote aliases
411         for table names. This avoids problems with some SQL dialects that treat
412         quoted strings specially (e.g. PostgreSQL).
413         """
414         if name in self.quote_cache:
415             return self.quote_cache[name]
416         if ((name in self.query.alias_map and name not in self.query.table_map) or
417                 name in self.query.extra_select or (
418                     self.query.external_aliases.get(name) and name not in self.query.table_map)):
419             self.quote_cache[name] = name
420             return name
421         r = self.connection.ops.quote_name(name)
422         self.quote_cache[name] = r
423         return r
424 
425     def compile(self, node):
426         vendor_impl = getattr(node, 'as_' + self.connection.vendor, None)
427         if vendor_impl:
428             sql, params = vendor_impl(self, self.connection)
429         else:
430             sql, params = node.as_sql(self, self.connection)
431         return sql, params
432 
433     def get_combinator_sql(self, combinator, all):
434         features = self.connection.features
435         compilers = [
436             query.get_compiler(self.using, self.connection)
437             for query in self.query.combined_queries if not query.is_empty()
438         ]
439         if not features.supports_slicing_ordering_in_compound:
440             for query, compiler in zip(self.query.combined_queries, compilers):
441                 if query.low_mark or query.high_mark:
442                     raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')
443                 if compiler.get_order_by():
444                     raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')
445         parts = ()
446         for compiler in compilers:
447             try:
448                 # If the columns list is limited, then all combined queries
449                 # must have the same columns list. Set the selects defined on
450                 # the query on all combined queries, if not already set.
451                 if not compiler.query.values_select and self.query.values_select:
452                     compiler.query = compiler.query.clone()
453                     compiler.query.set_values((
454                         *self.query.extra_select,
455                         *self.query.values_select,
456                         *self.query.annotation_select,
457                     ))
458                 part_sql, part_args = compiler.as_sql()
459                 if compiler.query.combinator:
460                     # Wrap in a subquery if wrapping in parentheses isn't
461                     # supported.
462                     if not features.supports_parentheses_in_compound:
463                         part_sql = 'SELECT * FROM ({})'.format(part_sql)
464                     # Add parentheses when combining with compound query if not
465                     # already added for all compound queries.
466                     elif not features.supports_slicing_ordering_in_compound:
467                         part_sql = '({})'.format(part_sql)
468                 parts += ((part_sql, part_args),)
469             except EmptyResultSet:
470                 # Omit the empty queryset with UNION and with DIFFERENCE if the
471                 # first queryset is nonempty.
472                 if combinator == 'union' or (combinator == 'difference' and parts):
473                     continue
474                 raise
475         if not parts:
476             raise EmptyResultSet
477         combinator_sql = self.connection.ops.set_operators[combinator]
478         if all and combinator == 'union':
479             combinator_sql += ' ALL'
480         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'
481         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))
482         result = [' {} '.format(combinator_sql).join(sql_parts)]
483         params = []
484         for part in args_parts:
485             params.extend(part)
486         return result, params
487 
488     def as_sql(self, with_limits=True, with_col_aliases=False):
489         """
490         Create the SQL for this query. Return the SQL string and list of
491         parameters.
492 
493         If 'with_limits' is False, any limit/offset information is not included
494         in the query.
495         """
496         refcounts_before = self.query.alias_refcount.copy()
497         try:
498             extra_select, order_by, group_by = self.pre_sql_setup()
499             for_update_part = None
500             # Is a LIMIT/OFFSET clause needed?
501             with_limit_offset = with_limits and (self.query.high_mark is not None or self.query.low_mark)
502             combinator = self.query.combinator
503             features = self.connection.features
504             if combinator:
505                 if not getattr(features, 'supports_select_{}'.format(combinator)):
506                     raise NotSupportedError('{} is not supported on this database backend.'.format(combinator))
507                 result, params = self.get_combinator_sql(combinator, self.query.combinator_all)
508             else:
509                 distinct_fields, distinct_params = self.get_distinct()
510                 # This must come after 'select', 'ordering', and 'distinct'
511                 # (see docstring of get_from_clause() for details).
512                 from_, f_params = self.get_from_clause()
513                 where, w_params = self.compile(self.where) if self.where is not None else ("", [])
514                 having, h_params = self.compile(self.having) if self.having is not None else ("", [])
515                 result = ['SELECT']
516                 params = []
517 
518                 if self.query.distinct:
519                     distinct_result, distinct_params = self.connection.ops.distinct_sql(
520                         distinct_fields,
521                         distinct_params,
522                     )
523                     result += distinct_result
524                     params += distinct_params
525 
526                 out_cols = []
527                 col_idx = 1
528                 for _, (s_sql, s_params), alias in self.select + extra_select:
529                     if alias:
530                         s_sql = '%s AS %s' % (s_sql, self.connection.ops.quote_name(alias))
531                     elif with_col_aliases:
532                         s_sql = '%s AS %s' % (s_sql, 'Col%d' % col_idx)
533                         col_idx += 1
534                     params.extend(s_params)
535                     out_cols.append(s_sql)
536 
537                 result += [', '.join(out_cols), 'FROM', *from_]
538                 params.extend(f_params)
539 
540                 if self.query.select_for_update and self.connection.features.has_select_for_update:
541                     if self.connection.get_autocommit():
542                         raise TransactionManagementError('select_for_update cannot be used outside of a transaction.')
543 
544                     if with_limit_offset and not self.connection.features.supports_select_for_update_with_limit:
545                         raise NotSupportedError(
546                             'LIMIT/OFFSET is not supported with '
547                             'select_for_update on this database backend.'
548                         )
549                     nowait = self.query.select_for_update_nowait
550                     skip_locked = self.query.select_for_update_skip_locked
551                     of = self.query.select_for_update_of
552                     no_key = self.query.select_for_no_key_update
553                     # If it's a NOWAIT/SKIP LOCKED/OF/NO KEY query but the
554                     # backend doesn't support it, raise NotSupportedError to
555                     # prevent a possible deadlock.
556                     if nowait and not self.connection.features.has_select_for_update_nowait:
557                         raise NotSupportedError('NOWAIT is not supported on this database backend.')
558                     elif skip_locked and not self.connection.features.has_select_for_update_skip_locked:
559                         raise NotSupportedError('SKIP LOCKED is not supported on this database backend.')
560                     elif of and not self.connection.features.has_select_for_update_of:
561                         raise NotSupportedError('FOR UPDATE OF is not supported on this database backend.')
562                     elif no_key and not self.connection.features.has_select_for_no_key_update:
563                         raise NotSupportedError(
564                             'FOR NO KEY UPDATE is not supported on this '
565                             'database backend.'
566                         )
567                     for_update_part = self.connection.ops.for_update_sql(
568                         nowait=nowait,
569                         skip_locked=skip_locked,
570                         of=self.get_select_for_update_of_arguments(),
571                         no_key=no_key,
572                     )
573 
574                 if for_update_part and self.connection.features.for_update_after_from:
575                     result.append(for_update_part)
576 
577                 if where:
578                     result.append('WHERE %s' % where)
579                     params.extend(w_params)
580 
581                 grouping = []
582                 for g_sql, g_params in group_by:
583                     grouping.append(g_sql)
584                     params.extend(g_params)
585                 if grouping:
586                     if distinct_fields:
587                         raise NotImplementedError('annotate() + distinct(fields) is not implemented.')
588                     order_by = order_by or self.connection.ops.force_no_ordering()
589                     result.append('GROUP BY %s' % ', '.join(grouping))
590                     if self._meta_ordering:
591                         order_by = None
592                 if having:
593                     result.append('HAVING %s' % having)
594                     params.extend(h_params)
595 
596             if self.query.explain_query:
597                 result.insert(0, self.connection.ops.explain_query_prefix(
598                     self.query.explain_format,
599                     **self.query.explain_options
600                 ))
601 
602             if order_by:
603                 ordering = []
604                 for _, (o_sql, o_params, _) in order_by:
605                     ordering.append(o_sql)
606                     params.extend(o_params)
607                 result.append('ORDER BY %s' % ', '.join(ordering))
608 
609             if with_limit_offset:
610                 result.append(self.connection.ops.limit_offset_sql(self.query.low_mark, self.query.high_mark))
611 
612             if for_update_part and not self.connection.features.for_update_after_from:
613                 result.append(for_update_part)
614 
615             if self.query.subquery and extra_select:
616                 # If the query is used as a subquery, the extra selects would
617                 # result in more columns than the left-hand side expression is
618                 # expecting. This can happen when a subquery uses a combination
619                 # of order_by() and distinct(), forcing the ordering expressions
620                 # to be selected as well. Wrap the query in another subquery
621                 # to exclude extraneous selects.
622                 sub_selects = []
623                 sub_params = []
624                 for index, (select, _, alias) in enumerate(self.select, start=1):
625                     if not alias and with_col_aliases:
626                         alias = 'col%d' % index
627                     if alias:
628                         sub_selects.append("%s.%s" % (
629                             self.connection.ops.quote_name('subquery'),
630                             self.connection.ops.quote_name(alias),
631                         ))
632                     else:
633                         select_clone = select.relabeled_clone({select.alias: 'subquery'})
634                         subselect, subparams = select_clone.as_sql(self, self.connection)
635                         sub_selects.append(subselect)
636                         sub_params.extend(subparams)
637                 return 'SELECT %s FROM (%s) subquery' % (
638                     ', '.join(sub_selects),
639                     ' '.join(result),
640                 ), tuple(sub_params + params)
641 
642             return ' '.join(result), tuple(params)
643         finally:
644             # Finally do cleanup - get rid of the joins we created above.
645             self.query.reset_refcounts(refcounts_before)
646 
647     def get_default_columns(self, start_alias=None, opts=None, from_parent=None):
648         """
649         Compute the default columns for selecting every field in the base
650         model. Will sometimes be called to pull in related models (e.g. via
651         select_related), in which case "opts" and "start_alias" will be given
652         to provide a starting point for the traversal.
653 
654         Return a list of strings, quoted appropriately for use in SQL
655         directly, as well as a set of aliases used in the select statement (if
656         'as_pairs' is True, return a list of (alias, col_name) pairs instead
657         of strings as the first component and None as the second component).
658         """
659         result = []
660         if opts is None:
661             opts = self.query.get_meta()
662         only_load = self.deferred_to_columns()
663         start_alias = start_alias or self.query.get_initial_alias()
664         # The 'seen_models' is used to optimize checking the needed parent
665         # alias for a given field. This also includes None -> start_alias to
666         # be used by local fields.
667         seen_models = {None: start_alias}
668 
669         for field in opts.concrete_fields:
670             model = field.model._meta.concrete_model
671             # A proxy model will have a different model and concrete_model. We
672             # will assign None if the field belongs to this model.
673             if model == opts.model:
674                 model = None
675             if from_parent and model is not None and issubclass(
676                     from_parent._meta.concrete_model, model._meta.concrete_model):
677                 # Avoid loading data for already loaded parents.
678                 # We end up here in the case select_related() resolution
679                 # proceeds from parent model to child model. In that case the
680                 # parent model data is already present in the SELECT clause,
681                 # and we want to avoid reloading the same data again.
682                 continue
683             if field.model in only_load and field.attname not in only_load[field.model]:
684                 continue
685             alias = self.query.join_parent_model(opts, model, start_alias,
686                                                  seen_models)
687             column = field.get_col(alias)
688             result.append(column)
689         return result
690 
691     def get_distinct(self):
692         """
693         Return a quoted list of fields to use in DISTINCT ON part of the query.
694 
695         This method can alter the tables in the query, and thus it must be
696         called before get_from_clause().
697         """
698         result = []
699         params = []
700         opts = self.query.get_meta()
701 
702         for name in self.query.distinct_fields:
703             parts = name.split(LOOKUP_SEP)
704             _, targets, alias, joins, path, _, transform_function = self._setup_joins(parts, opts, None)
705             targets, alias, _ = self.query.trim_joins(targets, joins, path)
706             for target in targets:
707                 if name in self.query.annotation_select:
708                     result.append(name)
709                 else:
710                     r, p = self.compile(transform_function(target, alias))
711                     result.append(r)
712                     params.append(p)
713         return result, params
714 
715     def find_ordering_name(self, name, opts, alias=None, default_order='ASC',
716                            already_seen=None):
717         """
718         Return the table alias (the name might be ambiguous, the alias will
719         not be) and column name for ordering by the given 'name' parameter.
720         The 'name' is of the form 'field1__field2__...__fieldN'.
721         """
722         name, order = get_order_dir(name, default_order)
723         descending = order == 'DESC'
724         pieces = name.split(LOOKUP_SEP)
725         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)
726 
727         # If we get to this point and the field is a relation to another model,
728         # append the default ordering for that model unless it is the pk
729         # shortcut or the attribute name of the field that is specified.
730         if (
731             field.is_relation and
732             opts.ordering and
733             getattr(field, 'attname', None) != pieces[-1] and
734             name != 'pk'
735         ):
736             # Firstly, avoid infinite loops.
737             already_seen = already_seen or set()
738             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)
739             if join_tuple in already_seen:
740                 raise FieldError('Infinite loop caused by ordering.')
741             already_seen.add(join_tuple)
742 
743             results = []
744             for item in opts.ordering:
745                 if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):
746                     item = item.desc() if descending else item.asc()
747                 if isinstance(item, OrderBy):
748                     results.append((item, False))
749                     continue
750                 results.extend(self.find_ordering_name(item, opts, alias,
751                                                        order, already_seen))
752             return results
753         targets, alias, _ = self.query.trim_joins(targets, joins, path)
754         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]
755 
756     def _setup_joins(self, pieces, opts, alias):
757         """
758         Helper method for get_order_by() and get_distinct().
759 
760         get_ordering() and get_distinct() must produce same target columns on
761         same input, as the prefixes of get_ordering() and get_distinct() must
762         match. Executing SQL where this is not true is an error.
763         """
764         alias = alias or self.query.get_initial_alias()
765         field, targets, opts, joins, path, transform_function = self.query.setup_joins(pieces, opts, alias)
766         alias = joins[-1]
767         return field, targets, alias, joins, path, opts, transform_function
768 
769     def get_from_clause(self):
770         """
771         Return a list of strings that are joined together to go after the
772         "FROM" part of the query, as well as a list any extra parameters that
773         need to be included. Subclasses, can override this to create a
774         from-clause via a "select".
775 
776         This should only be called after any SQL construction methods that
777         might change the tables that are needed. This means the select columns,
778         ordering, and distinct must be done first.
779         """
780         result = []
781         params = []
782         for alias in tuple(self.query.alias_map):
783             if not self.query.alias_refcount[alias]:
784                 continue
785             try:
786                 from_clause = self.query.alias_map[alias]
787             except KeyError:
788                 # Extra tables can end up in self.tables, but not in the
789                 # alias_map if they aren't in a join. That's OK. We skip them.
790                 continue
791             clause_sql, clause_params = self.compile(from_clause)
792             result.append(clause_sql)
793             params.extend(clause_params)
794         for t in self.query.extra_tables:
795             alias, _ = self.query.table_alias(t)
796             # Only add the alias if it's not already present (the table_alias()
797             # call increments the refcount, so an alias refcount of one means
798             # this is the only reference).
799             if alias not in self.query.alias_map or self.query.alias_refcount[alias] == 1:
800                 result.append(', %s' % self.quote_name_unless_alias(alias))
801         return result, params
802 
803     def get_related_selections(self, select, opts=None, root_alias=None, cur_depth=1,
804                                requested=None, restricted=None):
805         """
806         Fill in the information needed for a select_related query. The current
807         depth is measured as the number of connections away from the root model
808         (for example, cur_depth=1 means we are looking at models with direct
809         connections to the root model).
810         """
811         def _get_field_choices():
812             direct_choices = (f.name for f in opts.fields if f.is_relation)
813             reverse_choices = (
814                 f.field.related_query_name()
815                 for f in opts.related_objects if f.field.unique
816             )
817             return chain(direct_choices, reverse_choices, self.query._filtered_relations)
818 
819         related_klass_infos = []
820         if not restricted and cur_depth > self.query.max_depth:
821             # We've recursed far enough; bail out.
822             return related_klass_infos
823 
824         if not opts:
825             opts = self.query.get_meta()
826             root_alias = self.query.get_initial_alias()
827         only_load = self.query.get_loaded_field_names()
828 
829         # Setup for the case when only particular related fields should be
830         # included in the related selection.
831         fields_found = set()
832         if requested is None:
833             restricted = isinstance(self.query.select_related, dict)
834             if restricted:
835                 requested = self.query.select_related
836 
837         def get_related_klass_infos(klass_info, related_klass_infos):
838             klass_info['related_klass_infos'] = related_klass_infos
839 
840         for f in opts.fields:
841             field_model = f.model._meta.concrete_model
842             fields_found.add(f.name)
843 
844             if restricted:
845                 next = requested.get(f.name, {})
846                 if not f.is_relation:
847                     # If a non-related field is used like a relation,
848                     # or if a single non-relational field is given.
849                     if next or f.name in requested:
850                         raise FieldError(
851                             "Non-relational field given in select_related: '%s'. "
852                             "Choices are: %s" % (
853                                 f.name,
854                                 ", ".join(_get_field_choices()) or '(none)',
855                             )
856                         )
857             else:
858                 next = False
859 
860             if not select_related_descend(f, restricted, requested,
861                                           only_load.get(field_model)):
862                 continue
863             klass_info = {
864                 'model': f.remote_field.model,
865                 'field': f,
866                 'reverse': False,
867                 'local_setter': f.set_cached_value,
868                 'remote_setter': f.remote_field.set_cached_value if f.unique else lambda x, y: None,
869                 'from_parent': False,
870             }
871             related_klass_infos.append(klass_info)
872             select_fields = []
873             _, _, _, joins, _, _ = self.query.setup_joins(
874                 [f.name], opts, root_alias)
875             alias = joins[-1]
876             columns = self.get_default_columns(start_alias=alias, opts=f.remote_field.model._meta)
877             for col in columns:
878                 select_fields.append(len(select))
879                 select.append((col, None))
880             klass_info['select_fields'] = select_fields
881             next_klass_infos = self.get_related_selections(
882                 select, f.remote_field.model._meta, alias, cur_depth + 1, next, restricted)
883             get_related_klass_infos(klass_info, next_klass_infos)
884 
885         if restricted:
886             related_fields = [
887                 (o.field, o.related_model)
888                 for o in opts.related_objects
889                 if o.field.unique and not o.many_to_many
890             ]
891             for f, model in related_fields:
892                 if not select_related_descend(f, restricted, requested,
893                                               only_load.get(model), reverse=True):
894                     continue
895 
896                 related_field_name = f.related_query_name()
897                 fields_found.add(related_field_name)
898 
899                 join_info = self.query.setup_joins([related_field_name], opts, root_alias)
900                 alias = join_info.joins[-1]
901                 from_parent = issubclass(model, opts.model) and model is not opts.model
902                 klass_info = {
903                     'model': model,
904                     'field': f,
905                     'reverse': True,
906                     'local_setter': f.remote_field.set_cached_value,
907                     'remote_setter': f.set_cached_value,
908                     'from_parent': from_parent,
909                 }
910                 related_klass_infos.append(klass_info)
911                 select_fields = []
912                 columns = self.get_default_columns(
913                     start_alias=alias, opts=model._meta, from_parent=opts.model)
914                 for col in columns:
915                     select_fields.append(len(select))
916                     select.append((col, None))
917                 klass_info['select_fields'] = select_fields
918                 next = requested.get(f.related_query_name(), {})
919                 next_klass_infos = self.get_related_selections(
920                     select, model._meta, alias, cur_depth + 1,
921                     next, restricted)
922                 get_related_klass_infos(klass_info, next_klass_infos)
923 
924             def local_setter(obj, from_obj):
925                 # Set a reverse fk object when relation is non-empty.
926                 if from_obj:
927                     f.remote_field.set_cached_value(from_obj, obj)
928 
929             def remote_setter(name, obj, from_obj):
930                 setattr(from_obj, name, obj)
931 
932             for name in list(requested):
933                 # Filtered relations work only on the topmost level.
934                 if cur_depth > 1:
935                     break
936                 if name in self.query._filtered_relations:
937                     fields_found.add(name)
938                     f, _, join_opts, joins, _, _ = self.query.setup_joins([name], opts, root_alias)
939                     model = join_opts.model
940                     alias = joins[-1]
941                     from_parent = issubclass(model, opts.model) and model is not opts.model
942                     klass_info = {
943                         'model': model,
944                         'field': f,
945                         'reverse': True,
946                         'local_setter': local_setter,
947                         'remote_setter': partial(remote_setter, name),
948                         'from_parent': from_parent,
949                     }
950                     related_klass_infos.append(klass_info)
951                     select_fields = []
952                     columns = self.get_default_columns(
953                         start_alias=alias, opts=model._meta,
954                         from_parent=opts.model,
955                     )
956                     for col in columns:
957                         select_fields.append(len(select))
958                         select.append((col, None))
959                     klass_info['select_fields'] = select_fields
960                     next_requested = requested.get(name, {})
961                     next_klass_infos = self.get_related_selections(
962                         select, opts=model._meta, root_alias=alias,
963                         cur_depth=cur_depth + 1, requested=next_requested,
964                         restricted=restricted,
965                     )
966                     get_related_klass_infos(klass_info, next_klass_infos)
967             fields_not_found = set(requested).difference(fields_found)
968             if fields_not_found:
969                 invalid_fields = ("'%s'" % s for s in fields_not_found)
970                 raise FieldError(
971                     'Invalid field name(s) given in select_related: %s. '
972                     'Choices are: %s' % (
973                         ', '.join(invalid_fields),
974                         ', '.join(_get_field_choices()) or '(none)',
975                     )
976                 )
977         return related_klass_infos
978 
979     def get_select_for_update_of_arguments(self):
980         """
981         Return a quoted list of arguments for the SELECT FOR UPDATE OF part of
982         the query.
983         """
984         def _get_parent_klass_info(klass_info):
985             concrete_model = klass_info['model']._meta.concrete_model
986             for parent_model, parent_link in concrete_model._meta.parents.items():
987                 parent_list = parent_model._meta.get_parent_list()
988                 yield {
989                     'model': parent_model,
990                     'field': parent_link,
991                     'reverse': False,
992                     'select_fields': [
993                         select_index
994                         for select_index in klass_info['select_fields']
995                         # Selected columns from a model or its parents.
996                         if (
997                             self.select[select_index][0].target.model == parent_model or
998                             self.select[select_index][0].target.model in parent_list
999                         )
1000                     ],
1001                 }
1002 
1003         def _get_first_selected_col_from_model(klass_info):
1004             """
1005             Find the first selected column from a model. If it doesn't exist,
1006             don't lock a model.
1007 
1008             select_fields is filled recursively, so it also contains fields
1009             from the parent models.
1010             """
1011             concrete_model = klass_info['model']._meta.concrete_model
1012             for select_index in klass_info['select_fields']:
1013                 if self.select[select_index][0].target.model == concrete_model:
1014                     return self.select[select_index][0]
1015 
1016         def _get_field_choices():
1017             """Yield all allowed field paths in breadth-first search order."""
1018             queue = collections.deque([(None, self.klass_info)])
1019             while queue:
1020                 parent_path, klass_info = queue.popleft()
1021                 if parent_path is None:
1022                     path = []
1023                     yield 'self'
1024                 else:
1025                     field = klass_info['field']
1026                     if klass_info['reverse']:
1027                         field = field.remote_field
1028                     path = parent_path + [field.name]
1029                     yield LOOKUP_SEP.join(path)
1030                 queue.extend(
1031                     (path, klass_info)
1032                     for klass_info in _get_parent_klass_info(klass_info)
1033                 )
1034                 queue.extend(
1035                     (path, klass_info)
1036                     for klass_info in klass_info.get('related_klass_infos', [])
1037                 )
1038         result = []
1039         invalid_names = []
1040         for name in self.query.select_for_update_of:
1041             klass_info = self.klass_info
1042             if name == 'self':
1043                 col = _get_first_selected_col_from_model(klass_info)
1044             else:
1045                 for part in name.split(LOOKUP_SEP):
1046                     klass_infos = (
1047                         *klass_info.get('related_klass_infos', []),
1048                         *_get_parent_klass_info(klass_info),
1049                     )
1050                     for related_klass_info in klass_infos:
1051                         field = related_klass_info['field']
1052                         if related_klass_info['reverse']:
1053                             field = field.remote_field
1054                         if field.name == part:
1055                             klass_info = related_klass_info
1056                             break
1057                     else:
1058                         klass_info = None
1059                         break
1060                 if klass_info is None:
1061                     invalid_names.append(name)
1062                     continue
1063                 col = _get_first_selected_col_from_model(klass_info)
1064             if col is not None:
1065                 if self.connection.features.select_for_update_of_column:
1066                     result.append(self.compile(col)[0])
1067                 else:
1068                     result.append(self.quote_name_unless_alias(col.alias))
1069         if invalid_names:
1070             raise FieldError(
1071                 'Invalid field name(s) given in select_for_update(of=(...)): %s. '
1072                 'Only relational fields followed in the query are allowed. '
1073                 'Choices are: %s.' % (
1074                     ', '.join(invalid_names),
1075                     ', '.join(_get_field_choices()),
1076                 )
1077             )
1078         return result
1079 
1080     def deferred_to_columns(self):
1081         """
1082         Convert the self.deferred_loading data structure to mapping of table
1083         names to sets of column names which are to be loaded. Return the
1084         dictionary.
1085         """
1086         columns = {}
1087         self.query.deferred_to_data(columns, self.query.get_loaded_field_names_cb)
1088         return columns
1089 
1090     def get_converters(self, expressions):
1091         converters = {}
1092         for i, expression in enumerate(expressions):
1093             if expression:
1094                 backend_converters = self.connection.ops.get_db_converters(expression)
1095                 field_converters = expression.get_db_converters(self.connection)
1096                 if backend_converters or field_converters:
1097                     converters[i] = (backend_converters + field_converters, expression)
1098         return converters
1099 
1100     def apply_converters(self, rows, converters):
1101         connection = self.connection
1102         converters = list(converters.items())
1103         for row in map(list, rows):
1104             for pos, (convs, expression) in converters:
1105                 value = row[pos]
1106                 for converter in convs:
1107                     value = converter(value, expression, connection)
1108                 row[pos] = value
1109             yield row
1110 
1111     def results_iter(self, results=None, tuple_expected=False, chunked_fetch=False,
1112                      chunk_size=GET_ITERATOR_CHUNK_SIZE):
1113         """Return an iterator over the results from executing this query."""
1114         if results is None:
1115             results = self.execute_sql(MULTI, chunked_fetch=chunked_fetch, chunk_size=chunk_size)
1116         fields = [s[0] for s in self.select[0:self.col_count]]
1117         converters = self.get_converters(fields)
1118         rows = chain.from_iterable(results)
1119         if converters:
1120             rows = self.apply_converters(rows, converters)
1121             if tuple_expected:
1122                 rows = map(tuple, rows)
1123         return rows
1124 
1125     def has_results(self):
1126         """
1127         Backends (e.g. NoSQL) can override this in order to use optimized
1128         versions of "query has any results."
1129         """
1130         return bool(self.execute_sql(SINGLE))
1131 
1132     def execute_sql(self, result_type=MULTI, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE):
1133         """
1134         Run the query against the database and return the result(s). The
1135         return value is a single data item if result_type is SINGLE, or an
1136         iterator over the results if the result_type is MULTI.
1137 
1138         result_type is either MULTI (use fetchmany() to retrieve all rows),
1139         SINGLE (only retrieve a single row), or None. In this last case, the
1140         cursor is returned if any query is executed, since it's used by
1141         subclasses such as InsertQuery). It's possible, however, that no query
1142         is needed, as the filters describe an empty set. In that case, None is
1143         returned, to avoid any unnecessary database interaction.
1144         """
1145         result_type = result_type or NO_RESULTS
1146         try:
1147             sql, params = self.as_sql()
1148             if not sql:
1149                 raise EmptyResultSet
1150         except EmptyResultSet:
1151             if result_type == MULTI:
1152                 return iter([])
1153             else:
1154                 return
1155         if chunked_fetch:
1156             cursor = self.connection.chunked_cursor()
1157         else:
1158             cursor = self.connection.cursor()
1159         try:
1160             cursor.execute(sql, params)
1161         except Exception:
1162             # Might fail for server-side cursors (e.g. connection closed)
1163             cursor.close()
1164             raise
1165 
1166         if result_type == CURSOR:
1167             # Give the caller the cursor to process and close.
1168             return cursor
1169         if result_type == SINGLE:
1170             try:
1171                 val = cursor.fetchone()
1172                 if val:
1173                     return val[0:self.col_count]
1174                 return val
1175             finally:
1176                 # done with the cursor
1177                 cursor.close()
1178         if result_type == NO_RESULTS:
1179             cursor.close()
1180             return
1181 
1182         result = cursor_iter(
1183             cursor, self.connection.features.empty_fetchmany_value,
1184             self.col_count if self.has_extra_select else None,
1185             chunk_size,
1186         )
1187         if not chunked_fetch or not self.connection.features.can_use_chunked_reads:
1188             try:
1189                 # If we are using non-chunked reads, we return the same data
1190                 # structure as normally, but ensure it is all read into memory
1191                 # before going any further. Use chunked_fetch if requested,
1192                 # unless the database doesn't support it.
1193                 return list(result)
1194             finally:
1195                 # done with the cursor
1196                 cursor.close()
1197         return result
1198 
1199     def as_subquery_condition(self, alias, columns, compiler):
1200         qn = compiler.quote_name_unless_alias
1201         qn2 = self.connection.ops.quote_name
1202 
1203         for index, select_col in enumerate(self.query.select):
1204             lhs_sql, lhs_params = self.compile(select_col)
1205             rhs = '%s.%s' % (qn(alias), qn2(columns[index]))
1206             self.query.where.add(
1207                 RawSQL('%s = %s' % (lhs_sql, rhs), lhs_params), 'AND')
1208 
1209         sql, params = self.as_sql()
1210         return 'EXISTS (%s)' % sql, params
1211 
1212     def explain_query(self):
1213         result = list(self.execute_sql())
1214         # Some backends return 1 item tuples with strings, and others return
1215         # tuples with integers and strings. Flatten them out into strings.
1216         for row in result[0]:
1217             if not isinstance(row, str):
1218                 yield ' '.join(str(c) for c in row)
1219             else:
1220                 yield row

</code><intended_behavior>The `SQLCompiler` class's methods responsible for generating the SQL query need to be scrutinized to ensure they correctly manage aliases for annotated fields used in aggregation functions. The specific methods within `SQLCompiler` that construct the SQL clauses for selection (SELECT) and aggregation should be updated or fixed to respect the aliases of annotated fields throughout the query. This ensures that when the `QuerySet.aggregate` method translates a Django QuerySet into SQL, all parts of the query, especially those dealing with annotated fields used in aggregate expressions, reference the correct alias. Such behavior would prevent the generation of invalid SQL code and address the reported issue.</intended_behavior>]
2025-10-17 12:25:45.524 | INFO     | Search completed. Bug locations: [<file>django/db/models/query.py</file>
<class>QuerySet</class>
<method>aggregate</method>
<code>
365     def aggregate(self, *args, **kwargs):
366         """
367         Return a dictionary containing the calculations (aggregation)
368         over the current queryset.
369 
370         If args is present the expression is passed as a kwarg using
371         the Aggregate object's default alias.
372         """
373         if self.query.distinct_fields:
374             raise NotImplementedError("aggregate() + distinct(fields) not implemented.")
375         self._validate_values_are_expressions((*args, *kwargs.values()), method_name='aggregate')
376         for arg in args:
377             # The default_alias property raises TypeError if default_alias
378             # can't be set automatically or AttributeError if it isn't an
379             # attribute.
380             try:
381                 arg.default_alias
382             except (AttributeError, TypeError):
383                 raise TypeError("Complex aggregates require an alias")
384             kwargs[arg.default_alias] = arg
385 
386         query = self.query.chain()
387         for (alias, aggregate_expr) in kwargs.items():
388             query.add_annotation(aggregate_expr, alias, is_summary=True)
389             if not query.annotations[alias].contains_aggregate:
390                 raise TypeError("%s is not an aggregate expression" % alias)
391         return query.get_aggregation(self.db, kwargs)

</code><intended_behavior>The `aggregate` method should correctly handle the use of aliases introduced by `annotate` in aggregate expressions. This involves ensuring that when the method constructs the final aggregate query, it references any annotated fields by their correct aliases throughout the query, including the SELECT and GROUP BY clauses. To resolve the issue, the method needs to ensure that whenever a field referenced in an aggregation has been previously annotated, it uses the annotation's alias consistently in the generated SQL code. This may involve enhancing the internal mapping or tracking of field names to aliases within the `query` object that `aggregate` works on, ensuring that aliases are preserved and correctly referenced in the outputted SQL statement.</intended_behavior>, <file>django/db/models/query.py</file>
<class>QuerySet</class>
<method>None</method>
<code>
175 class QuerySet:
176     """Represent a lazy database lookup for a set of objects."""
177 
178     def __init__(self, model=None, query=None, using=None, hints=None):
179         self.model = model
180         self._db = using
181         self._hints = hints or {}
182         self._query = query or sql.Query(self.model)
183         self._result_cache = None
184         self._sticky_filter = False
185         self._for_write = False
186         self._prefetch_related_lookups = ()
187         self._prefetch_done = False
188         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
189         self._iterable_class = ModelIterable
190         self._fields = None
191         self._defer_next_filter = False
192         self._deferred_filter = None
193 
194     @property
195     def query(self):
196         if self._deferred_filter:
197             negate, args, kwargs = self._deferred_filter
198             self._filter_or_exclude_inplace(negate, args, kwargs)
199             self._deferred_filter = None
200         return self._query
201 
202     @query.setter
203     def query(self, value):
204         if value.values_select:
205             self._iterable_class = ValuesIterable
206         self._query = value
207 
208     def as_manager(cls):
209         # Address the circular dependency between `Queryset` and `Manager`.
210         from django.db.models.manager import Manager
211         manager = Manager.from_queryset(cls)()
212         manager._built_with_as_manager = True
213         return manager
214     as_manager.queryset_only = True
215     as_manager = classmethod(as_manager)
216 
217     ########################
218     # PYTHON MAGIC METHODS #
219     ########################
220 
221     def __deepcopy__(self, memo):
222         """Don't populate the QuerySet's cache."""
223         obj = self.__class__()
224         for k, v in self.__dict__.items():
225             if k == '_result_cache':
226                 obj.__dict__[k] = None
227             else:
228                 obj.__dict__[k] = copy.deepcopy(v, memo)
229         return obj
230 
231     def __getstate__(self):
232         # Force the cache to be fully populated.
233         self._fetch_all()
234         return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}
235 
236     def __setstate__(self, state):
237         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)
238         if pickled_version:
239             if pickled_version != django.__version__:
240                 warnings.warn(
241                     "Pickled queryset instance's Django version %s does not "
242                     "match the current version %s."
243                     % (pickled_version, django.__version__),
244                     RuntimeWarning,
245                     stacklevel=2,
246                 )
247         else:
248             warnings.warn(
249                 "Pickled queryset instance's Django version is not specified.",
250                 RuntimeWarning,
251                 stacklevel=2,
252             )
253         self.__dict__.update(state)
254 
255     def __repr__(self):
256         data = list(self[:REPR_OUTPUT_SIZE + 1])
257         if len(data) > REPR_OUTPUT_SIZE:
258             data[-1] = "...(remaining elements truncated)..."
259         return '<%s %r>' % (self.__class__.__name__, data)
260 
261     def __len__(self):
262         self._fetch_all()
263         return len(self._result_cache)
264 
265     def __iter__(self):
266         """
267         The queryset iterator protocol uses three nested iterators in the
268         default case:
269             1. sql.compiler.execute_sql()
270                - Returns 100 rows at time (constants.GET_ITERATOR_CHUNK_SIZE)
271                  using cursor.fetchmany(). This part is responsible for
272                  doing some column masking, and returning the rows in chunks.
273             2. sql.compiler.results_iter()
274                - Returns one row at time. At this point the rows are still just
275                  tuples. In some cases the return values are converted to
276                  Python values at this location.
277             3. self.iterator()
278                - Responsible for turning the rows into model objects.
279         """
280         self._fetch_all()
281         return iter(self._result_cache)
282 
283     def __bool__(self):
284         self._fetch_all()
285         return bool(self._result_cache)
286 
287     def __getitem__(self, k):
288         """Retrieve an item or slice from the set of results."""
289         if not isinstance(k, (int, slice)):
290             raise TypeError(
291                 'QuerySet indices must be integers or slices, not %s.'
292                 % type(k).__name__
293             )
294         assert ((not isinstance(k, slice) and (k >= 0)) or
295                 (isinstance(k, slice) and (k.start is None or k.start >= 0) and
296                  (k.stop is None or k.stop >= 0))), \
297             "Negative indexing is not supported."
298 
299         if self._result_cache is not None:
300             return self._result_cache[k]
301 
302         if isinstance(k, slice):
303             qs = self._chain()
304             if k.start is not None:
305                 start = int(k.start)
306             else:
307                 start = None
308             if k.stop is not None:
309                 stop = int(k.stop)
310             else:
311                 stop = None
312             qs.query.set_limits(start, stop)
313             return list(qs)[::k.step] if k.step else qs
314 
315         qs = self._chain()
316         qs.query.set_limits(k, k + 1)
317         qs._fetch_all()
318         return qs._result_cache[0]
319 
320     def __class_getitem__(cls, *args, **kwargs):
321         return cls
322 
323     def __and__(self, other):
324         self._merge_sanity_check(other)
325         if isinstance(other, EmptyQuerySet):
326             return other
327         if isinstance(self, EmptyQuerySet):
328             return self
329         combined = self._chain()
330         combined._merge_known_related_objects(other)
331         combined.query.combine(other.query, sql.AND)
332         return combined
333 
334     def __or__(self, other):
335         self._merge_sanity_check(other)
336         if isinstance(self, EmptyQuerySet):
337             return other
338         if isinstance(other, EmptyQuerySet):
339             return self
340         query = self if self.query.can_filter() else self.model._base_manager.filter(pk__in=self.values('pk'))
341         combined = query._chain()
342         combined._merge_known_related_objects(other)
343         if not other.query.can_filter():
344             other = other.model._base_manager.filter(pk__in=other.values('pk'))
345         combined.query.combine(other.query, sql.OR)
346         return combined
347 
348     ####################################
349     # METHODS THAT DO DATABASE QUERIES #
350     ####################################
351 
352     def _iterator(self, use_chunked_fetch, chunk_size):
353         yield from self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size)
354 
355     def iterator(self, chunk_size=2000):
356         """
357         An iterator over the results from applying this QuerySet to the
358         database.
359         """
360         if chunk_size <= 0:
361             raise ValueError('Chunk size must be strictly positive.')
362         use_chunked_fetch = not connections[self.db].settings_dict.get('DISABLE_SERVER_SIDE_CURSORS')
363         return self._iterator(use_chunked_fetch, chunk_size)
364 
365     def aggregate(self, *args, **kwargs):
366         """
367         Return a dictionary containing the calculations (aggregation)
368         over the current queryset.
369 
370         If args is present the expression is passed as a kwarg using
371         the Aggregate object's default alias.
372         """
373         if self.query.distinct_fields:
374             raise NotImplementedError("aggregate() + distinct(fields) not implemented.")
375         self._validate_values_are_expressions((*args, *kwargs.values()), method_name='aggregate')
376         for arg in args:
377             # The default_alias property raises TypeError if default_alias
378             # can't be set automatically or AttributeError if it isn't an
379             # attribute.
380             try:
381                 arg.default_alias
382             except (AttributeError, TypeError):
383                 raise TypeError("Complex aggregates require an alias")
384             kwargs[arg.default_alias] = arg
385 
386         query = self.query.chain()
387         for (alias, aggregate_expr) in kwargs.items():
388             query.add_annotation(aggregate_expr, alias, is_summary=True)
389             if not query.annotations[alias].contains_aggregate:
390                 raise TypeError("%s is not an aggregate expression" % alias)
391         return query.get_aggregation(self.db, kwargs)
392 
393     def count(self):
394         """
395         Perform a SELECT COUNT() and return the number of records as an
396         integer.
397 
398         If the QuerySet is already fully cached, return the length of the
399         cached results set to avoid multiple SELECT COUNT(*) calls.
400         """
401         if self._result_cache is not None:
402             return len(self._result_cache)
403 
404         return self.query.get_count(using=self.db)
405 
406     def get(self, *args, **kwargs):
407         """
408         Perform the query and return a single object matching the given
409         keyword arguments.
410         """
411         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
412         if self.query.can_filter() and not self.query.distinct_fields:
413             clone = clone.order_by()
414         limit = None
415         if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:
416             limit = MAX_GET_RESULTS
417             clone.query.set_limits(high=limit)
418         num = len(clone)
419         if num == 1:
420             return clone._result_cache[0]
421         if not num:
422             raise self.model.DoesNotExist(
423                 "%s matching query does not exist." %
424                 self.model._meta.object_name
425             )
426         raise self.model.MultipleObjectsReturned(
427             'get() returned more than one %s -- it returned %s!' % (
428                 self.model._meta.object_name,
429                 num if not limit or num < limit else 'more than %s' % (limit - 1),
430             )
431         )
432 
433     def create(self, **kwargs):
434         """
435         Create a new object with the given kwargs, saving it to the database
436         and returning the created object.
437         """
438         obj = self.model(**kwargs)
439         self._for_write = True
440         obj.save(force_insert=True, using=self.db)
441         return obj
442 
443     def _populate_pk_values(self, objs):
444         for obj in objs:
445             if obj.pk is None:
446                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
447 
448     def bulk_create(self, objs, batch_size=None, ignore_conflicts=False):
449         """
450         Insert each of the instances into the database. Do *not* call
451         save() on each of the instances, do not send any pre/post_save
452         signals, and do not set the primary key attribute if it is an
453         autoincrement field (except if features.can_return_rows_from_bulk_insert=True).
454         Multi-table models are not supported.
455         """
456         # When you bulk insert you don't get the primary keys back (if it's an
457         # autoincrement, except if can_return_rows_from_bulk_insert=True), so
458         # you can't insert into the child tables which references this. There
459         # are two workarounds:
460         # 1) This could be implemented if you didn't have an autoincrement pk
461         # 2) You could do it by doing O(n) normal inserts into the parent
462         #    tables to get the primary keys back and then doing a single bulk
463         #    insert into the childmost table.
464         # We currently set the primary keys on the objects when using
465         # PostgreSQL via the RETURNING ID clause. It should be possible for
466         # Oracle as well, but the semantics for extracting the primary keys is
467         # trickier so it's not done yet.
468         assert batch_size is None or batch_size > 0
469         # Check that the parents share the same concrete model with the our
470         # model to detect the inheritance pattern ConcreteGrandParent ->
471         # MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy
472         # would not identify that case as involving multiple tables.
473         for parent in self.model._meta.get_parent_list():
474             if parent._meta.concrete_model is not self.model._meta.concrete_model:
475                 raise ValueError("Can't bulk create a multi-table inherited model")
476         if not objs:
477             return objs
478         self._for_write = True
479         connection = connections[self.db]
480         opts = self.model._meta
481         fields = opts.concrete_fields
482         objs = list(objs)
483         self._populate_pk_values(objs)
484         with transaction.atomic(using=self.db, savepoint=False):
485             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
486             if objs_with_pk:
487                 returned_columns = self._batched_insert(
488                     objs_with_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
489                 )
490                 for obj_with_pk, results in zip(objs_with_pk, returned_columns):
491                     for result, field in zip(results, opts.db_returning_fields):
492                         if field != opts.pk:
493                             setattr(obj_with_pk, field.attname, result)
494                 for obj_with_pk in objs_with_pk:
495                     obj_with_pk._state.adding = False
496                     obj_with_pk._state.db = self.db
497             if objs_without_pk:
498                 fields = [f for f in fields if not isinstance(f, AutoField)]
499                 returned_columns = self._batched_insert(
500                     objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
501                 )
502                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
503                     assert len(returned_columns) == len(objs_without_pk)
504                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
505                     for result, field in zip(results, opts.db_returning_fields):
506                         setattr(obj_without_pk, field.attname, result)
507                     obj_without_pk._state.adding = False
508                     obj_without_pk._state.db = self.db
509 
510         return objs
511 
512     def bulk_update(self, objs, fields, batch_size=None):
513         """
514         Update the given fields in each of the given objects in the database.
515         """
516         if batch_size is not None and batch_size < 0:
517             raise ValueError('Batch size must be a positive integer.')
518         if not fields:
519             raise ValueError('Field names must be given to bulk_update().')
520         objs = tuple(objs)
521         if any(obj.pk is None for obj in objs):
522             raise ValueError('All bulk_update() objects must have a primary key set.')
523         fields = [self.model._meta.get_field(name) for name in fields]
524         if any(not f.concrete or f.many_to_many for f in fields):
525             raise ValueError('bulk_update() can only be used with concrete fields.')
526         if any(f.primary_key for f in fields):
527             raise ValueError('bulk_update() cannot be used with primary key fields.')
528         if not objs:
529             return
530         # PK is used twice in the resulting update query, once in the filter
531         # and once in the WHEN. Each field will also have one CAST.
532         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)
533         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
534         requires_casting = connections[self.db].features.requires_casted_case_in_updates
535         batches = (objs[i:i + batch_size] for i in range(0, len(objs), batch_size))
536         updates = []
537         for batch_objs in batches:
538             update_kwargs = {}
539             for field in fields:
540                 when_statements = []
541                 for obj in batch_objs:
542                     attr = getattr(obj, field.attname)
543                     if not isinstance(attr, Expression):
544                         attr = Value(attr, output_field=field)
545                     when_statements.append(When(pk=obj.pk, then=attr))
546                 case_statement = Case(*when_statements, output_field=field)
547                 if requires_casting:
548                     case_statement = Cast(case_statement, output_field=field)
549                 update_kwargs[field.attname] = case_statement
550             updates.append(([obj.pk for obj in batch_objs], update_kwargs))
551         with transaction.atomic(using=self.db, savepoint=False):
552             for pks, update_kwargs in updates:
553                 self.filter(pk__in=pks).update(**update_kwargs)
554     bulk_update.alters_data = True
555 
556     def get_or_create(self, defaults=None, **kwargs):
557         """
558         Look up an object with the given kwargs, creating one if necessary.
559         Return a tuple of (object, created), where created is a boolean
560         specifying whether an object was created.
561         """
562         # The get() needs to be targeted at the write database in order
563         # to avoid potential transaction consistency problems.
564         self._for_write = True
565         try:
566             return self.get(**kwargs), False
567         except self.model.DoesNotExist:
568             params = self._extract_model_params(defaults, **kwargs)
569             # Try to create an object using passed params.
570             try:
571                 with transaction.atomic(using=self.db):
572                     params = dict(resolve_callables(params))
573                     return self.create(**params), True
574             except IntegrityError:
575                 try:
576                     return self.get(**kwargs), False
577                 except self.model.DoesNotExist:
578                     pass
579                 raise
580 
581     def update_or_create(self, defaults=None, **kwargs):
582         """
583         Look up an object with the given kwargs, updating one with defaults
584         if it exists, otherwise create a new one.
585         Return a tuple (object, created), where created is a boolean
586         specifying whether an object was created.
587         """
588         defaults = defaults or {}
589         self._for_write = True
590         with transaction.atomic(using=self.db):
591             # Lock the row so that a concurrent update is blocked until
592             # update_or_create() has performed its save.
593             obj, created = self.select_for_update().get_or_create(defaults, **kwargs)
594             if created:
595                 return obj, created
596             for k, v in resolve_callables(defaults):
597                 setattr(obj, k, v)
598             obj.save(using=self.db)
599         return obj, False
600 
601     def _extract_model_params(self, defaults, **kwargs):
602         """
603         Prepare `params` for creating a model instance based on the given
604         kwargs; for use by get_or_create().
605         """
606         defaults = defaults or {}
607         params = {k: v for k, v in kwargs.items() if LOOKUP_SEP not in k}
608         params.update(defaults)
609         property_names = self.model._meta._property_names
610         invalid_params = []
611         for param in params:
612             try:
613                 self.model._meta.get_field(param)
614             except exceptions.FieldDoesNotExist:
615                 # It's okay to use a model's property if it has a setter.
616                 if not (param in property_names and getattr(self.model, param).fset):
617                     invalid_params.append(param)
618         if invalid_params:
619             raise exceptions.FieldError(
620                 "Invalid field name(s) for model %s: '%s'." % (
621                     self.model._meta.object_name,
622                     "', '".join(sorted(invalid_params)),
623                 ))
624         return params
625 
626     def _earliest(self, *fields):
627         """
628         Return the earliest object according to fields (if given) or by the
629         model's Meta.get_latest_by.
630         """
631         if fields:
632             order_by = fields
633         else:
634             order_by = getattr(self.model._meta, 'get_latest_by')
635             if order_by and not isinstance(order_by, (tuple, list)):
636                 order_by = (order_by,)
637         if order_by is None:
638             raise ValueError(
639                 "earliest() and latest() require either fields as positional "
640                 "arguments or 'get_latest_by' in the model's Meta."
641             )
642 
643         assert not self.query.is_sliced, \
644             "Cannot change a query once a slice has been taken."
645         obj = self._chain()
646         obj.query.set_limits(high=1)
647         obj.query.clear_ordering(force_empty=True)
648         obj.query.add_ordering(*order_by)
649         return obj.get()
650 
651     def earliest(self, *fields):
652         return self._earliest(*fields)
653 
654     def latest(self, *fields):
655         return self.reverse()._earliest(*fields)
656 
657     def first(self):
658         """Return the first object of a query or None if no match is found."""
659         for obj in (self if self.ordered else self.order_by('pk'))[:1]:
660             return obj
661 
662     def last(self):
663         """Return the last object of a query or None if no match is found."""
664         for obj in (self.reverse() if self.ordered else self.order_by('-pk'))[:1]:
665             return obj
666 
667     def in_bulk(self, id_list=None, *, field_name='pk'):
668         """
669         Return a dictionary mapping each of the given IDs to the object with
670         that ID. If `id_list` isn't provided, evaluate the entire QuerySet.
671         """
672         assert not self.query.is_sliced, \
673             "Cannot use 'limit' or 'offset' with in_bulk"
674         opts = self.model._meta
675         unique_fields = [
676             constraint.fields[0]
677             for constraint in opts.total_unique_constraints
678             if len(constraint.fields) == 1
679         ]
680         if (
681             field_name != 'pk' and
682             not opts.get_field(field_name).unique and
683             field_name not in unique_fields and
684             not self.query.distinct_fields == (field_name,)
685         ):
686             raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
687         if id_list is not None:
688             if not id_list:
689                 return {}
690             filter_key = '{}__in'.format(field_name)
691             batch_size = connections[self.db].features.max_query_params
692             id_list = tuple(id_list)
693             # If the database has a limit on the number of query parameters
694             # (e.g. SQLite), retrieve objects in batches if necessary.
695             if batch_size and batch_size < len(id_list):
696                 qs = ()
697                 for offset in range(0, len(id_list), batch_size):
698                     batch = id_list[offset:offset + batch_size]
699                     qs += tuple(self.filter(**{filter_key: batch}).order_by())
700             else:
701                 qs = self.filter(**{filter_key: id_list}).order_by()
702         else:
703             qs = self._chain()
704         return {getattr(obj, field_name): obj for obj in qs}
705 
706     def delete(self):
707         """Delete the records in the current QuerySet."""
708         self._not_support_combined_queries('delete')
709         assert not self.query.is_sliced, \
710             "Cannot use 'limit' or 'offset' with delete."
711 
712         if self._fields is not None:
713             raise TypeError("Cannot call delete() after .values() or .values_list()")
714 
715         del_query = self._chain()
716 
717         # The delete is actually 2 queries - one to find related objects,
718         # and one to delete. Make sure that the discovery of related
719         # objects is performed on the same database as the deletion.
720         del_query._for_write = True
721 
722         # Disable non-supported fields.
723         del_query.query.select_for_update = False
724         del_query.query.select_related = False
725         del_query.query.clear_ordering(force_empty=True)
726 
727         collector = Collector(using=del_query.db)
728         collector.collect(del_query)
729         deleted, _rows_count = collector.delete()
730 
731         # Clear the result cache, in case this QuerySet gets reused.
732         self._result_cache = None
733         return deleted, _rows_count
734 
735     delete.alters_data = True
736     delete.queryset_only = True
737 
738     def _raw_delete(self, using):
739         """
740         Delete objects found from the given queryset in single direct SQL
741         query. No signals are sent and there is no protection for cascades.
742         """
743         query = self.query.clone()
744         query.__class__ = sql.DeleteQuery
745         cursor = query.get_compiler(using).execute_sql(CURSOR)
746         if cursor:
747             with cursor:
748                 return cursor.rowcount
749         return 0
750     _raw_delete.alters_data = True
751 
752     def update(self, **kwargs):
753         """
754         Update all elements in the current QuerySet, setting all the given
755         fields to the appropriate values.
756         """
757         self._not_support_combined_queries('update')
758         assert not self.query.is_sliced, \
759             "Cannot update a query once a slice has been taken."
760         self._for_write = True
761         query = self.query.chain(sql.UpdateQuery)
762         query.add_update_values(kwargs)
763         # Clear any annotations so that they won't be present in subqueries.
764         query.annotations = {}
765         with transaction.mark_for_rollback_on_error(using=self.db):
766             rows = query.get_compiler(self.db).execute_sql(CURSOR)
767         self._result_cache = None
768         return rows
769     update.alters_data = True
770 
771     def _update(self, values):
772         """
773         A version of update() that accepts field objects instead of field names.
774         Used primarily for model saving and not intended for use by general
775         code (it requires too much poking around at model internals to be
776         useful at that level).
777         """
778         assert not self.query.is_sliced, \
779             "Cannot update a query once a slice has been taken."
780         query = self.query.chain(sql.UpdateQuery)
781         query.add_update_fields(values)
782         # Clear any annotations so that they won't be present in subqueries.
783         query.annotations = {}
784         self._result_cache = None
785         return query.get_compiler(self.db).execute_sql(CURSOR)
786     _update.alters_data = True
787     _update.queryset_only = False
788 
789     def exists(self):
790         if self._result_cache is None:
791             return self.query.has_results(using=self.db)
792         return bool(self._result_cache)
793 
794     def _prefetch_related_objects(self):
795         # This method can only be called once the result cache has been filled.
796         prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups)
797         self._prefetch_done = True
798 
799     def explain(self, *, format=None, **options):
800         return self.query.explain(using=self.db, format=format, **options)
801 
802     ##################################################
803     # PUBLIC METHODS THAT RETURN A QUERYSET SUBCLASS #
804     ##################################################
805 
806     def raw(self, raw_query, params=None, translations=None, using=None):
807         if using is None:
808             using = self.db
809         qs = RawQuerySet(raw_query, model=self.model, params=params, translations=translations, using=using)
810         qs._prefetch_related_lookups = self._prefetch_related_lookups[:]
811         return qs
812 
813     def _values(self, *fields, **expressions):
814         clone = self._chain()
815         if expressions:
816             clone = clone.annotate(**expressions)
817         clone._fields = fields
818         clone.query.set_values(fields)
819         return clone
820 
821     def values(self, *fields, **expressions):
822         fields += tuple(expressions)
823         clone = self._values(*fields, **expressions)
824         clone._iterable_class = ValuesIterable
825         return clone
826 
827     def values_list(self, *fields, flat=False, named=False):
828         if flat and named:
829             raise TypeError("'flat' and 'named' can't be used together.")
830         if flat and len(fields) > 1:
831             raise TypeError("'flat' is not valid when values_list is called with more than one field.")
832 
833         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
834         _fields = []
835         expressions = {}
836         counter = 1
837         for field in fields:
838             if hasattr(field, 'resolve_expression'):
839                 field_id_prefix = getattr(field, 'default_alias', field.__class__.__name__.lower())
840                 while True:
841                     field_id = field_id_prefix + str(counter)
842                     counter += 1
843                     if field_id not in field_names:
844                         break
845                 expressions[field_id] = field
846                 _fields.append(field_id)
847             else:
848                 _fields.append(field)
849 
850         clone = self._values(*_fields, **expressions)
851         clone._iterable_class = (
852             NamedValuesListIterable if named
853             else FlatValuesListIterable if flat
854             else ValuesListIterable
855         )
856         return clone
857 
858     def dates(self, field_name, kind, order='ASC'):
859         """
860         Return a list of date objects representing all available dates for
861         the given field_name, scoped to 'kind'.
862         """
863         assert kind in ('year', 'month', 'week', 'day'), \
864             "'kind' must be one of 'year', 'month', 'week', or 'day'."
865         assert order in ('ASC', 'DESC'), \
866             "'order' must be either 'ASC' or 'DESC'."
867         return self.annotate(
868             datefield=Trunc(field_name, kind, output_field=DateField()),
869             plain_field=F(field_name)
870         ).values_list(
871             'datefield', flat=True
872         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datefield')
873 
874     def datetimes(self, field_name, kind, order='ASC', tzinfo=None, is_dst=None):
875         """
876         Return a list of datetime objects representing all available
877         datetimes for the given field_name, scoped to 'kind'.
878         """
879         assert kind in ('year', 'month', 'week', 'day', 'hour', 'minute', 'second'), \
880             "'kind' must be one of 'year', 'month', 'week', 'day', 'hour', 'minute', or 'second'."
881         assert order in ('ASC', 'DESC'), \
882             "'order' must be either 'ASC' or 'DESC'."
883         if settings.USE_TZ:
884             if tzinfo is None:
885                 tzinfo = timezone.get_current_timezone()
886         else:
887             tzinfo = None
888         return self.annotate(
889             datetimefield=Trunc(
890                 field_name,
891                 kind,
892                 output_field=DateTimeField(),
893                 tzinfo=tzinfo,
894                 is_dst=is_dst,
895             ),
896             plain_field=F(field_name)
897         ).values_list(
898             'datetimefield', flat=True
899         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datetimefield')
900 
901     def none(self):
902         """Return an empty QuerySet."""
903         clone = self._chain()
904         clone.query.set_empty()
905         return clone
906 
907     ##################################################################
908     # PUBLIC METHODS THAT ALTER ATTRIBUTES AND RETURN A NEW QUERYSET #
909     ##################################################################
910 
911     def all(self):
912         """
913         Return a new QuerySet that is a copy of the current one. This allows a
914         QuerySet to proxy for a model manager in some cases.
915         """
916         return self._chain()
917 
918     def filter(self, *args, **kwargs):
919         """
920         Return a new QuerySet instance with the args ANDed to the existing
921         set.
922         """
923         self._not_support_combined_queries('filter')
924         return self._filter_or_exclude(False, args, kwargs)
925 
926     def exclude(self, *args, **kwargs):
927         """
928         Return a new QuerySet instance with NOT (args) ANDed to the existing
929         set.
930         """
931         self._not_support_combined_queries('exclude')
932         return self._filter_or_exclude(True, args, kwargs)
933 
934     def _filter_or_exclude(self, negate, args, kwargs):
935         if args or kwargs:
936             assert not self.query.is_sliced, \
937                 "Cannot filter a query once a slice has been taken."
938 
939         clone = self._chain()
940         if self._defer_next_filter:
941             self._defer_next_filter = False
942             clone._deferred_filter = negate, args, kwargs
943         else:
944             clone._filter_or_exclude_inplace(negate, args, kwargs)
945         return clone
946 
947     def _filter_or_exclude_inplace(self, negate, args, kwargs):
948         if negate:
949             self._query.add_q(~Q(*args, **kwargs))
950         else:
951             self._query.add_q(Q(*args, **kwargs))
952 
953     def complex_filter(self, filter_obj):
954         """
955         Return a new QuerySet instance with filter_obj added to the filters.
956 
957         filter_obj can be a Q object or a dictionary of keyword lookup
958         arguments.
959 
960         This exists to support framework features such as 'limit_choices_to',
961         and usually it will be more natural to use other methods.
962         """
963         if isinstance(filter_obj, Q):
964             clone = self._chain()
965             clone.query.add_q(filter_obj)
966             return clone
967         else:
968             return self._filter_or_exclude(False, args=(), kwargs=filter_obj)
969 
970     def _combinator_query(self, combinator, *other_qs, all=False):
971         # Clone the query to inherit the select list and everything
972         clone = self._chain()
973         # Clear limits and ordering so they can be reapplied
974         clone.query.clear_ordering(True)
975         clone.query.clear_limits()
976         clone.query.combined_queries = (self.query,) + tuple(qs.query for qs in other_qs)
977         clone.query.combinator = combinator
978         clone.query.combinator_all = all
979         return clone
980 
981     def union(self, *other_qs, all=False):
982         # If the query is an EmptyQuerySet, combine all nonempty querysets.
983         if isinstance(self, EmptyQuerySet):
984             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]
985             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self
986         return self._combinator_query('union', *other_qs, all=all)
987 
988     def intersection(self, *other_qs):
989         # If any query is an EmptyQuerySet, return it.
990         if isinstance(self, EmptyQuerySet):
991             return self
992         for other in other_qs:
993             if isinstance(other, EmptyQuerySet):
994                 return other
995         return self._combinator_query('intersection', *other_qs)
996 
997     def difference(self, *other_qs):
998         # If the query is an EmptyQuerySet, return it.
999         if isinstance(self, EmptyQuerySet):
1000             return self
1001         return self._combinator_query('difference', *other_qs)
1002 
1003     def select_for_update(self, nowait=False, skip_locked=False, of=(), no_key=False):
1004         """
1005         Return a new QuerySet instance that will select objects with a
1006         FOR UPDATE lock.
1007         """
1008         if nowait and skip_locked:
1009             raise ValueError('The nowait option cannot be used with skip_locked.')
1010         obj = self._chain()
1011         obj._for_write = True
1012         obj.query.select_for_update = True
1013         obj.query.select_for_update_nowait = nowait
1014         obj.query.select_for_update_skip_locked = skip_locked
1015         obj.query.select_for_update_of = of
1016         obj.query.select_for_no_key_update = no_key
1017         return obj
1018 
1019     def select_related(self, *fields):
1020         """
1021         Return a new QuerySet instance that will select related objects.
1022 
1023         If fields are specified, they must be ForeignKey fields and only those
1024         related objects are included in the selection.
1025 
1026         If select_related(None) is called, clear the list.
1027         """
1028         self._not_support_combined_queries('select_related')
1029         if self._fields is not None:
1030             raise TypeError("Cannot call select_related() after .values() or .values_list()")
1031 
1032         obj = self._chain()
1033         if fields == (None,):
1034             obj.query.select_related = False
1035         elif fields:
1036             obj.query.add_select_related(fields)
1037         else:
1038             obj.query.select_related = True
1039         return obj
1040 
1041     def prefetch_related(self, *lookups):
1042         """
1043         Return a new QuerySet instance that will prefetch the specified
1044         Many-To-One and Many-To-Many related objects when the QuerySet is
1045         evaluated.
1046 
1047         When prefetch_related() is called more than once, append to the list of
1048         prefetch lookups. If prefetch_related(None) is called, clear the list.
1049         """
1050         self._not_support_combined_queries('prefetch_related')
1051         clone = self._chain()
1052         if lookups == (None,):
1053             clone._prefetch_related_lookups = ()
1054         else:
1055             for lookup in lookups:
1056                 if isinstance(lookup, Prefetch):
1057                     lookup = lookup.prefetch_to
1058                 lookup = lookup.split(LOOKUP_SEP, 1)[0]
1059                 if lookup in self.query._filtered_relations:
1060                     raise ValueError('prefetch_related() is not supported with FilteredRelation.')
1061             clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups
1062         return clone
1063 
1064     def annotate(self, *args, **kwargs):
1065         """
1066         Return a query set in which the returned objects have been annotated
1067         with extra data or aggregations.
1068         """
1069         self._not_support_combined_queries('annotate')
1070         return self._annotate(args, kwargs, select=True)
1071 
1072     def alias(self, *args, **kwargs):
1073         """
1074         Return a query set with added aliases for extra data or aggregations.
1075         """
1076         self._not_support_combined_queries('alias')
1077         return self._annotate(args, kwargs, select=False)
1078 
1079     def _annotate(self, args, kwargs, select=True):
1080         self._validate_values_are_expressions(args + tuple(kwargs.values()), method_name='annotate')
1081         annotations = {}
1082         for arg in args:
1083             # The default_alias property may raise a TypeError.
1084             try:
1085                 if arg.default_alias in kwargs:
1086                     raise ValueError("The named annotation '%s' conflicts with the "
1087                                      "default name for another annotation."
1088                                      % arg.default_alias)
1089             except TypeError:
1090                 raise TypeError("Complex annotations require an alias")
1091             annotations[arg.default_alias] = arg
1092         annotations.update(kwargs)
1093 
1094         clone = self._chain()
1095         names = self._fields
1096         if names is None:
1097             names = set(chain.from_iterable(
1098                 (field.name, field.attname) if hasattr(field, 'attname') else (field.name,)
1099                 for field in self.model._meta.get_fields()
1100             ))
1101 
1102         for alias, annotation in annotations.items():
1103             if alias in names:
1104                 raise ValueError("The annotation '%s' conflicts with a field on "
1105                                  "the model." % alias)
1106             if isinstance(annotation, FilteredRelation):
1107                 clone.query.add_filtered_relation(annotation, alias)
1108             else:
1109                 clone.query.add_annotation(
1110                     annotation, alias, is_summary=False, select=select,
1111                 )
1112         for alias, annotation in clone.query.annotations.items():
1113             if alias in annotations and annotation.contains_aggregate:
1114                 if clone._fields is None:
1115                     clone.query.group_by = True
1116                 else:
1117                     clone.query.set_group_by()
1118                 break
1119 
1120         return clone
1121 
1122     def order_by(self, *field_names):
1123         """Return a new QuerySet instance with the ordering changed."""
1124         assert not self.query.is_sliced, \
1125             "Cannot reorder a query once a slice has been taken."
1126         obj = self._chain()
1127         obj.query.clear_ordering(force_empty=False)
1128         obj.query.add_ordering(*field_names)
1129         return obj
1130 
1131     def distinct(self, *field_names):
1132         """
1133         Return a new QuerySet instance that will select only distinct results.
1134         """
1135         self._not_support_combined_queries('distinct')
1136         assert not self.query.is_sliced, \
1137             "Cannot create distinct fields once a slice has been taken."
1138         obj = self._chain()
1139         obj.query.add_distinct_fields(*field_names)
1140         return obj
1141 
1142     def extra(self, select=None, where=None, params=None, tables=None,
1143               order_by=None, select_params=None):
1144         """Add extra SQL fragments to the query."""
1145         self._not_support_combined_queries('extra')
1146         assert not self.query.is_sliced, \
1147             "Cannot change a query once a slice has been taken"
1148         clone = self._chain()
1149         clone.query.add_extra(select, select_params, where, params, tables, order_by)
1150         return clone
1151 
1152     def reverse(self):
1153         """Reverse the ordering of the QuerySet."""
1154         if self.query.is_sliced:
1155             raise TypeError('Cannot reverse a query once a slice has been taken.')
1156         clone = self._chain()
1157         clone.query.standard_ordering = not clone.query.standard_ordering
1158         return clone
1159 
1160     def defer(self, *fields):
1161         """
1162         Defer the loading of data for certain fields until they are accessed.
1163         Add the set of deferred fields to any existing set of deferred fields.
1164         The only exception to this is if None is passed in as the only
1165         parameter, in which case removal all deferrals.
1166         """
1167         self._not_support_combined_queries('defer')
1168         if self._fields is not None:
1169             raise TypeError("Cannot call defer() after .values() or .values_list()")
1170         clone = self._chain()
1171         if fields == (None,):
1172             clone.query.clear_deferred_loading()
1173         else:
1174             clone.query.add_deferred_loading(fields)
1175         return clone
1176 
1177     def only(self, *fields):
1178         """
1179         Essentially, the opposite of defer(). Only the fields passed into this
1180         method and that are not already specified as deferred are loaded
1181         immediately when the queryset is evaluated.
1182         """
1183         self._not_support_combined_queries('only')
1184         if self._fields is not None:
1185             raise TypeError("Cannot call only() after .values() or .values_list()")
1186         if fields == (None,):
1187             # Can only pass None to defer(), not only(), as the rest option.
1188             # That won't stop people trying to do this, so let's be explicit.
1189             raise TypeError("Cannot pass None as an argument to only().")
1190         for field in fields:
1191             field = field.split(LOOKUP_SEP, 1)[0]
1192             if field in self.query._filtered_relations:
1193                 raise ValueError('only() is not supported with FilteredRelation.')
1194         clone = self._chain()
1195         clone.query.add_immediate_loading(fields)
1196         return clone
1197 
1198     def using(self, alias):
1199         """Select which database this QuerySet should execute against."""
1200         clone = self._chain()
1201         clone._db = alias
1202         return clone
1203 
1204     ###################################
1205     # PUBLIC INTROSPECTION ATTRIBUTES #
1206     ###################################
1207 
1208     @property
1209     def ordered(self):
1210         """
1211         Return True if the QuerySet is ordered -- i.e. has an order_by()
1212         clause or a default ordering on the model (or is empty).
1213         """
1214         if isinstance(self, EmptyQuerySet):
1215             return True
1216         if self.query.extra_order_by or self.query.order_by:
1217             return True
1218         elif (
1219             self.query.default_ordering and
1220             self.query.get_meta().ordering and
1221             # A default ordering doesn't affect GROUP BY queries.
1222             not self.query.group_by
1223         ):
1224             return True
1225         else:
1226             return False
1227 
1228     @property
1229     def db(self):
1230         """Return the database used if this query is executed now."""
1231         if self._for_write:
1232             return self._db or router.db_for_write(self.model, **self._hints)
1233         return self._db or router.db_for_read(self.model, **self._hints)
1234 
1235     ###################
1236     # PRIVATE METHODS #
1237     ###################
1238 
1239     def _insert(self, objs, fields, returning_fields=None, raw=False, using=None, ignore_conflicts=False):
1240         """
1241         Insert a new record for the given model. This provides an interface to
1242         the InsertQuery class and is how Model.save() is implemented.
1243         """
1244         self._for_write = True
1245         if using is None:
1246             using = self.db
1247         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
1248         query.insert_values(fields, objs, raw=raw)
1249         return query.get_compiler(using=using).execute_sql(returning_fields)
1250     _insert.alters_data = True
1251     _insert.queryset_only = False
1252 
1253     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):
1254         """
1255         Helper method for bulk_create() to insert objs one batch at a time.
1256         """
1257         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
1258             raise NotSupportedError('This database backend does not support ignoring conflicts.')
1259         ops = connections[self.db].ops
1260         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
1261         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
1262         inserted_rows = []
1263         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
1264         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
1265             if bulk_return and not ignore_conflicts:
1266                 inserted_rows.extend(self._insert(
1267                     item, fields=fields, using=self.db,
1268                     returning_fields=self.model._meta.db_returning_fields,
1269                     ignore_conflicts=ignore_conflicts,
1270                 ))
1271             else:
1272                 self._insert(item, fields=fields, using=self.db, ignore_conflicts=ignore_conflicts)
1273         return inserted_rows
1274 
1275     def _chain(self, **kwargs):
1276         """
1277         Return a copy of the current QuerySet that's ready for another
1278         operation.
1279         """
1280         obj = self._clone()
1281         if obj._sticky_filter:
1282             obj.query.filter_is_sticky = True
1283             obj._sticky_filter = False
1284         obj.__dict__.update(kwargs)
1285         return obj
1286 
1287     def _clone(self):
1288         """
1289         Return a copy of the current QuerySet. A lightweight alternative
1290         to deepcopy().
1291         """
1292         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
1293         c._sticky_filter = self._sticky_filter
1294         c._for_write = self._for_write
1295         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
1296         c._known_related_objects = self._known_related_objects
1297         c._iterable_class = self._iterable_class
1298         c._fields = self._fields
1299         return c
1300 
1301     def _fetch_all(self):
1302         if self._result_cache is None:
1303             self._result_cache = list(self._iterable_class(self))
1304         if self._prefetch_related_lookups and not self._prefetch_done:
1305             self._prefetch_related_objects()
1306 
1307     def _next_is_sticky(self):
1308         """
1309         Indicate that the next filter call and the one following that should
1310         be treated as a single filter. This is only important when it comes to
1311         determining when to reuse tables for many-to-many filters. Required so
1312         that we can filter naturally on the results of related managers.
1313 
1314         This doesn't return a clone of the current QuerySet (it returns
1315         "self"). The method is only used internally and should be immediately
1316         followed by a filter() that does create a clone.
1317         """
1318         self._sticky_filter = True
1319         return self
1320 
1321     def _merge_sanity_check(self, other):
1322         """Check that two QuerySet classes may be merged."""
1323         if self._fields is not None and (
1324                 set(self.query.values_select) != set(other.query.values_select) or
1325                 set(self.query.extra_select) != set(other.query.extra_select) or
1326                 set(self.query.annotation_select) != set(other.query.annotation_select)):
1327             raise TypeError(
1328                 "Merging '%s' classes must involve the same values in each case."
1329                 % self.__class__.__name__
1330             )
1331 
1332     def _merge_known_related_objects(self, other):
1333         """
1334         Keep track of all known related objects from either QuerySet instance.
1335         """
1336         for field, objects in other._known_related_objects.items():
1337             self._known_related_objects.setdefault(field, {}).update(objects)
1338 
1339     def resolve_expression(self, *args, **kwargs):
1340         if self._fields and len(self._fields) > 1:
1341             # values() queryset can only be used as nested queries
1342             # if they are set up to select only a single field.
1343             raise TypeError('Cannot use multi-field values as a filter value.')
1344         query = self.query.resolve_expression(*args, **kwargs)
1345         query._db = self._db
1346         return query
1347     resolve_expression.queryset_only = True
1348 
1349     def _add_hints(self, **hints):
1350         """
1351         Update hinting information for use by routers. Add new key/values or
1352         overwrite existing key/values.
1353         """
1354         self._hints.update(hints)
1355 
1356     def _has_filters(self):
1357         """
1358         Check if this QuerySet has any filtering going on. This isn't
1359         equivalent with checking if all objects are present in results, for
1360         example, qs[1:]._has_filters() -> False.
1361         """
1362         return self.query.has_filters()
1363 
1364     @staticmethod
1365     def _validate_values_are_expressions(values, method_name):
1366         invalid_args = sorted(str(arg) for arg in values if not hasattr(arg, 'resolve_expression'))
1367         if invalid_args:
1368             raise TypeError(
1369                 'QuerySet.%s() received non-expression(s): %s.' % (
1370                     method_name,
1371                     ', '.join(invalid_args),
1372                 )
1373             )
1374 
1375     def _not_support_combined_queries(self, operation_name):
1376         if self.query.combinator:
1377             raise NotSupportedError(
1378                 'Calling QuerySet.%s() after %s() is not supported.'
1379                 % (operation_name, self.query.combinator)
1380             )

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>django/db/models/sql/compiler.py</file>
<class>SQLCompiler</class>
<method>None</method>
<code>
22 class SQLCompiler:
23     # Multiline ordering SQL clause may appear from RawSQL.
24     ordering_parts = _lazy_re_compile(
25         r'^(.*)\s(?:ASC|DESC).*',
26         re.MULTILINE | re.DOTALL,
27     )
28 
29     def __init__(self, query, connection, using):
30         self.query = query
31         self.connection = connection
32         self.using = using
33         self.quote_cache = {'*': '*'}
34         # The select, klass_info, and annotations are needed by QuerySet.iterator()
35         # these are set as a side-effect of executing the query. Note that we calculate
36         # separately a list of extra select columns needed for grammatical correctness
37         # of the query, but these columns are not included in self.select.
38         self.select = None
39         self.annotation_col_map = None
40         self.klass_info = None
41         self._meta_ordering = None
42 
43     def setup_query(self):
44         if all(self.query.alias_refcount[a] == 0 for a in self.query.alias_map):
45             self.query.get_initial_alias()
46         self.select, self.klass_info, self.annotation_col_map = self.get_select()
47         self.col_count = len(self.select)
48 
49     def pre_sql_setup(self):
50         """
51         Do any necessary class setup immediately prior to producing SQL. This
52         is for things that can't necessarily be done in __init__ because we
53         might not have all the pieces in place at that time.
54         """
55         self.setup_query()
56         order_by = self.get_order_by()
57         self.where, self.having = self.query.where.split_having()
58         extra_select = self.get_extra_select(order_by, self.select)
59         self.has_extra_select = bool(extra_select)
60         group_by = self.get_group_by(self.select + extra_select, order_by)
61         return extra_select, order_by, group_by
62 
63     def get_group_by(self, select, order_by):
64         """
65         Return a list of 2-tuples of form (sql, params).
66 
67         The logic of what exactly the GROUP BY clause contains is hard
68         to describe in other words than "if it passes the test suite,
69         then it is correct".
70         """
71         # Some examples:
72         #     SomeModel.objects.annotate(Count('somecol'))
73         #     GROUP BY: all fields of the model
74         #
75         #    SomeModel.objects.values('name').annotate(Count('somecol'))
76         #    GROUP BY: name
77         #
78         #    SomeModel.objects.annotate(Count('somecol')).values('name')
79         #    GROUP BY: all cols of the model
80         #
81         #    SomeModel.objects.values('name', 'pk').annotate(Count('somecol')).values('pk')
82         #    GROUP BY: name, pk
83         #
84         #    SomeModel.objects.values('name').annotate(Count('somecol')).values('pk')
85         #    GROUP BY: name, pk
86         #
87         # In fact, the self.query.group_by is the minimal set to GROUP BY. It
88         # can't be ever restricted to a smaller set, but additional columns in
89         # HAVING, ORDER BY, and SELECT clauses are added to it. Unfortunately
90         # the end result is that it is impossible to force the query to have
91         # a chosen GROUP BY clause - you can almost do this by using the form:
92         #     .values(*wanted_cols).annotate(AnAggregate())
93         # but any later annotations, extra selects, values calls that
94         # refer some column outside of the wanted_cols, order_by, or even
95         # filter calls can alter the GROUP BY clause.
96 
97         # The query.group_by is either None (no GROUP BY at all), True
98         # (group by select fields), or a list of expressions to be added
99         # to the group by.
100         if self.query.group_by is None:
101             return []
102         expressions = []
103         if self.query.group_by is not True:
104             # If the group by is set to a list (by .values() call most likely),
105             # then we need to add everything in it to the GROUP BY clause.
106             # Backwards compatibility hack for setting query.group_by. Remove
107             # when  we have public API way of forcing the GROUP BY clause.
108             # Converts string references to expressions.
109             for expr in self.query.group_by:
110                 if not hasattr(expr, 'as_sql'):
111                     expressions.append(self.query.resolve_ref(expr))
112                 else:
113                     expressions.append(expr)
114         # Note that even if the group_by is set, it is only the minimal
115         # set to group by. So, we need to add cols in select, order_by, and
116         # having into the select in any case.
117         ref_sources = {
118             expr.source for expr in expressions if isinstance(expr, Ref)
119         }
120         for expr, _, _ in select:
121             # Skip members of the select clause that are already included
122             # by reference.
123             if expr in ref_sources:
124                 continue
125             cols = expr.get_group_by_cols()
126             for col in cols:
127                 expressions.append(col)
128         for expr, (sql, params, is_ref) in order_by:
129             # Skip References to the select clause, as all expressions in the
130             # select clause are already part of the group by.
131             if not is_ref:
132                 expressions.extend(expr.get_group_by_cols())
133         having_group_by = self.having.get_group_by_cols() if self.having else ()
134         for expr in having_group_by:
135             expressions.append(expr)
136         result = []
137         seen = set()
138         expressions = self.collapse_group_by(expressions, having_group_by)
139 
140         for expr in expressions:
141             sql, params = self.compile(expr)
142             sql, params = expr.select_format(self, sql, params)
143             params_hash = make_hashable(params)
144             if (sql, params_hash) not in seen:
145                 result.append((sql, params))
146                 seen.add((sql, params_hash))
147         return result
148 
149     def collapse_group_by(self, expressions, having):
150         # If the DB can group by primary key, then group by the primary key of
151         # query's main model. Note that for PostgreSQL the GROUP BY clause must
152         # include the primary key of every table, but for MySQL it is enough to
153         # have the main table's primary key.
154         if self.connection.features.allows_group_by_pk:
155             # Determine if the main model's primary key is in the query.
156             pk = None
157             for expr in expressions:
158                 # Is this a reference to query's base table primary key? If the
159                 # expression isn't a Col-like, then skip the expression.
160                 if (getattr(expr, 'target', None) == self.query.model._meta.pk and
161                         getattr(expr, 'alias', None) == self.query.base_table):
162                     pk = expr
163                     break
164             # If the main model's primary key is in the query, group by that
165             # field, HAVING expressions, and expressions associated with tables
166             # that don't have a primary key included in the grouped columns.
167             if pk:
168                 pk_aliases = {
169                     expr.alias for expr in expressions
170                     if hasattr(expr, 'target') and expr.target.primary_key
171                 }
172                 expressions = [pk] + [
173                     expr for expr in expressions
174                     if expr in having or (
175                         getattr(expr, 'alias', None) is not None and expr.alias not in pk_aliases
176                     )
177                 ]
178         elif self.connection.features.allows_group_by_selected_pks:
179             # Filter out all expressions associated with a table's primary key
180             # present in the grouped columns. This is done by identifying all
181             # tables that have their primary key included in the grouped
182             # columns and removing non-primary key columns referring to them.
183             # Unmanaged models are excluded because they could be representing
184             # database views on which the optimization might not be allowed.
185             pks = {
186                 expr for expr in expressions
187                 if (
188                     hasattr(expr, 'target') and
189                     expr.target.primary_key and
190                     self.connection.features.allows_group_by_selected_pks_on_model(expr.target.model)
191                 )
192             }
193             aliases = {expr.alias for expr in pks}
194             expressions = [
195                 expr for expr in expressions if expr in pks or getattr(expr, 'alias', None) not in aliases
196             ]
197         return expressions
198 
199     def get_select(self):
200         """
201         Return three values:
202         - a list of 3-tuples of (expression, (sql, params), alias)
203         - a klass_info structure,
204         - a dictionary of annotations
205 
206         The (sql, params) is what the expression will produce, and alias is the
207         "AS alias" for the column (possibly None).
208 
209         The klass_info structure contains the following information:
210         - The base model of the query.
211         - Which columns for that model are present in the query (by
212           position of the select clause).
213         - related_klass_infos: [f, klass_info] to descent into
214 
215         The annotations is a dictionary of {'attname': column position} values.
216         """
217         select = []
218         klass_info = None
219         annotations = {}
220         select_idx = 0
221         for alias, (sql, params) in self.query.extra_select.items():
222             annotations[alias] = select_idx
223             select.append((RawSQL(sql, params), alias))
224             select_idx += 1
225         assert not (self.query.select and self.query.default_cols)
226         if self.query.default_cols:
227             cols = self.get_default_columns()
228         else:
229             # self.query.select is a special case. These columns never go to
230             # any model.
231             cols = self.query.select
232         if cols:
233             select_list = []
234             for col in cols:
235                 select_list.append(select_idx)
236                 select.append((col, None))
237                 select_idx += 1
238             klass_info = {
239                 'model': self.query.model,
240                 'select_fields': select_list,
241             }
242         for alias, annotation in self.query.annotation_select.items():
243             annotations[alias] = select_idx
244             select.append((annotation, alias))
245             select_idx += 1
246 
247         if self.query.select_related:
248             related_klass_infos = self.get_related_selections(select)
249             klass_info['related_klass_infos'] = related_klass_infos
250 
251             def get_select_from_parent(klass_info):
252                 for ki in klass_info['related_klass_infos']:
253                     if ki['from_parent']:
254                         ki['select_fields'] = (klass_info['select_fields'] +
255                                                ki['select_fields'])
256                     get_select_from_parent(ki)
257             get_select_from_parent(klass_info)
258 
259         ret = []
260         for col, alias in select:
261             try:
262                 sql, params = self.compile(col)
263             except EmptyResultSet:
264                 # Select a predicate that's always False.
265                 sql, params = '0', ()
266             else:
267                 sql, params = col.select_format(self, sql, params)
268             ret.append((col, (sql, params), alias))
269         return ret, klass_info, annotations
270 
271     def get_order_by(self):
272         """
273         Return a list of 2-tuples of form (expr, (sql, params, is_ref)) for the
274         ORDER BY clause.
275 
276         The order_by clause can alter the select clause (for example it
277         can add aliases to clauses that do not yet have one, or it can
278         add totally new select clauses).
279         """
280         if self.query.extra_order_by:
281             ordering = self.query.extra_order_by
282         elif not self.query.default_ordering:
283             ordering = self.query.order_by
284         elif self.query.order_by:
285             ordering = self.query.order_by
286         elif self.query.get_meta().ordering:
287             ordering = self.query.get_meta().ordering
288             self._meta_ordering = ordering
289         else:
290             ordering = []
291         if self.query.standard_ordering:
292             asc, desc = ORDER_DIR['ASC']
293         else:
294             asc, desc = ORDER_DIR['DESC']
295 
296         order_by = []
297         for field in ordering:
298             if hasattr(field, 'resolve_expression'):
299                 if isinstance(field, Value):
300                     # output_field must be resolved for constants.
301                     field = Cast(field, field.output_field)
302                 if not isinstance(field, OrderBy):
303                     field = field.asc()
304                 if not self.query.standard_ordering:
305                     field = field.copy()
306                     field.reverse_ordering()
307                 order_by.append((field, False))
308                 continue
309             if field == '?':  # random
310                 order_by.append((OrderBy(Random()), False))
311                 continue
312 
313             col, order = get_order_dir(field, asc)
314             descending = order == 'DESC'
315 
316             if col in self.query.annotation_select:
317                 # Reference to expression in SELECT clause
318                 order_by.append((
319                     OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),
320                     True))
321                 continue
322             if col in self.query.annotations:
323                 # References to an expression which is masked out of the SELECT
324                 # clause.
325                 expr = self.query.annotations[col]
326                 if isinstance(expr, Value):
327                     # output_field must be resolved for constants.
328                     expr = Cast(expr, expr.output_field)
329                 order_by.append((OrderBy(expr, descending=descending), False))
330                 continue
331 
332             if '.' in field:
333                 # This came in through an extra(order_by=...) addition. Pass it
334                 # on verbatim.
335                 table, col = col.split('.', 1)
336                 order_by.append((
337                     OrderBy(
338                         RawSQL('%s.%s' % (self.quote_name_unless_alias(table), col), []),
339                         descending=descending
340                     ), False))
341                 continue
342 
343             if not self.query.extra or col not in self.query.extra:
344                 # 'col' is of the form 'field' or 'field1__field2' or
345                 # '-field1__field2__field', etc.
346                 order_by.extend(self.find_ordering_name(
347                     field, self.query.get_meta(), default_order=asc))
348             else:
349                 if col not in self.query.extra_select:
350                     order_by.append((
351                         OrderBy(RawSQL(*self.query.extra[col]), descending=descending),
352                         False))
353                 else:
354                     order_by.append((
355                         OrderBy(Ref(col, RawSQL(*self.query.extra[col])), descending=descending),
356                         True))
357         result = []
358         seen = set()
359 
360         for expr, is_ref in order_by:
361             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)
362             if self.query.combinator and self.select:
363                 src = resolved.get_source_expressions()[0]
364                 expr_src = expr.get_source_expressions()[0]
365                 # Relabel order by columns to raw numbers if this is a combined
366                 # query; necessary since the columns can't be referenced by the
367                 # fully qualified name and the simple column names may collide.
368                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):
369                     if is_ref and col_alias == src.refs:
370                         src = src.source
371                     elif col_alias and not (
372                         isinstance(expr_src, F) and col_alias == expr_src.name
373                     ):
374                         continue
375                     if src == sel_expr:
376                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
377                         break
378                 else:
379                     if col_alias:
380                         raise DatabaseError('ORDER BY term does not match any column in the result set.')
381                     # Add column used in ORDER BY clause without an alias to
382                     # the selected columns.
383                     self.query.add_select_col(src)
384                     resolved.set_source_expressions([RawSQL('%d' % len(self.query.select), ())])
385             sql, params = self.compile(resolved)
386             # Don't add the same column twice, but the order direction is
387             # not taken into account so we strip it. When this entire method
388             # is refactored into expressions, then we can check each part as we
389             # generate it.
390             without_ordering = self.ordering_parts.search(sql)[1]
391             params_hash = make_hashable(params)
392             if (without_ordering, params_hash) in seen:
393                 continue
394             seen.add((without_ordering, params_hash))
395             result.append((resolved, (sql, params, is_ref)))
396         return result
397 
398     def get_extra_select(self, order_by, select):
399         extra_select = []
400         if self.query.distinct and not self.query.distinct_fields:
401             select_sql = [t[1] for t in select]
402             for expr, (sql, params, is_ref) in order_by:
403                 without_ordering = self.ordering_parts.search(sql)[1]
404                 if not is_ref and (without_ordering, params) not in select_sql:
405                     extra_select.append((expr, (without_ordering, params), None))
406         return extra_select
407 
408     def quote_name_unless_alias(self, name):
409         """
410         A wrapper around connection.ops.quote_name that doesn't quote aliases
411         for table names. This avoids problems with some SQL dialects that treat
412         quoted strings specially (e.g. PostgreSQL).
413         """
414         if name in self.quote_cache:
415             return self.quote_cache[name]
416         if ((name in self.query.alias_map and name not in self.query.table_map) or
417                 name in self.query.extra_select or (
418                     self.query.external_aliases.get(name) and name not in self.query.table_map)):
419             self.quote_cache[name] = name
420             return name
421         r = self.connection.ops.quote_name(name)
422         self.quote_cache[name] = r
423         return r
424 
425     def compile(self, node):
426         vendor_impl = getattr(node, 'as_' + self.connection.vendor, None)
427         if vendor_impl:
428             sql, params = vendor_impl(self, self.connection)
429         else:
430             sql, params = node.as_sql(self, self.connection)
431         return sql, params
432 
433     def get_combinator_sql(self, combinator, all):
434         features = self.connection.features
435         compilers = [
436             query.get_compiler(self.using, self.connection)
437             for query in self.query.combined_queries if not query.is_empty()
438         ]
439         if not features.supports_slicing_ordering_in_compound:
440             for query, compiler in zip(self.query.combined_queries, compilers):
441                 if query.low_mark or query.high_mark:
442                     raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')
443                 if compiler.get_order_by():
444                     raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')
445         parts = ()
446         for compiler in compilers:
447             try:
448                 # If the columns list is limited, then all combined queries
449                 # must have the same columns list. Set the selects defined on
450                 # the query on all combined queries, if not already set.
451                 if not compiler.query.values_select and self.query.values_select:
452                     compiler.query = compiler.query.clone()
453                     compiler.query.set_values((
454                         *self.query.extra_select,
455                         *self.query.values_select,
456                         *self.query.annotation_select,
457                     ))
458                 part_sql, part_args = compiler.as_sql()
459                 if compiler.query.combinator:
460                     # Wrap in a subquery if wrapping in parentheses isn't
461                     # supported.
462                     if not features.supports_parentheses_in_compound:
463                         part_sql = 'SELECT * FROM ({})'.format(part_sql)
464                     # Add parentheses when combining with compound query if not
465                     # already added for all compound queries.
466                     elif not features.supports_slicing_ordering_in_compound:
467                         part_sql = '({})'.format(part_sql)
468                 parts += ((part_sql, part_args),)
469             except EmptyResultSet:
470                 # Omit the empty queryset with UNION and with DIFFERENCE if the
471                 # first queryset is nonempty.
472                 if combinator == 'union' or (combinator == 'difference' and parts):
473                     continue
474                 raise
475         if not parts:
476             raise EmptyResultSet
477         combinator_sql = self.connection.ops.set_operators[combinator]
478         if all and combinator == 'union':
479             combinator_sql += ' ALL'
480         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'
481         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))
482         result = [' {} '.format(combinator_sql).join(sql_parts)]
483         params = []
484         for part in args_parts:
485             params.extend(part)
486         return result, params
487 
488     def as_sql(self, with_limits=True, with_col_aliases=False):
489         """
490         Create the SQL for this query. Return the SQL string and list of
491         parameters.
492 
493         If 'with_limits' is False, any limit/offset information is not included
494         in the query.
495         """
496         refcounts_before = self.query.alias_refcount.copy()
497         try:
498             extra_select, order_by, group_by = self.pre_sql_setup()
499             for_update_part = None
500             # Is a LIMIT/OFFSET clause needed?
501             with_limit_offset = with_limits and (self.query.high_mark is not None or self.query.low_mark)
502             combinator = self.query.combinator
503             features = self.connection.features
504             if combinator:
505                 if not getattr(features, 'supports_select_{}'.format(combinator)):
506                     raise NotSupportedError('{} is not supported on this database backend.'.format(combinator))
507                 result, params = self.get_combinator_sql(combinator, self.query.combinator_all)
508             else:
509                 distinct_fields, distinct_params = self.get_distinct()
510                 # This must come after 'select', 'ordering', and 'distinct'
511                 # (see docstring of get_from_clause() for details).
512                 from_, f_params = self.get_from_clause()
513                 where, w_params = self.compile(self.where) if self.where is not None else ("", [])
514                 having, h_params = self.compile(self.having) if self.having is not None else ("", [])
515                 result = ['SELECT']
516                 params = []
517 
518                 if self.query.distinct:
519                     distinct_result, distinct_params = self.connection.ops.distinct_sql(
520                         distinct_fields,
521                         distinct_params,
522                     )
523                     result += distinct_result
524                     params += distinct_params
525 
526                 out_cols = []
527                 col_idx = 1
528                 for _, (s_sql, s_params), alias in self.select + extra_select:
529                     if alias:
530                         s_sql = '%s AS %s' % (s_sql, self.connection.ops.quote_name(alias))
531                     elif with_col_aliases:
532                         s_sql = '%s AS %s' % (s_sql, 'Col%d' % col_idx)
533                         col_idx += 1
534                     params.extend(s_params)
535                     out_cols.append(s_sql)
536 
537                 result += [', '.join(out_cols), 'FROM', *from_]
538                 params.extend(f_params)
539 
540                 if self.query.select_for_update and self.connection.features.has_select_for_update:
541                     if self.connection.get_autocommit():
542                         raise TransactionManagementError('select_for_update cannot be used outside of a transaction.')
543 
544                     if with_limit_offset and not self.connection.features.supports_select_for_update_with_limit:
545                         raise NotSupportedError(
546                             'LIMIT/OFFSET is not supported with '
547                             'select_for_update on this database backend.'
548                         )
549                     nowait = self.query.select_for_update_nowait
550                     skip_locked = self.query.select_for_update_skip_locked
551                     of = self.query.select_for_update_of
552                     no_key = self.query.select_for_no_key_update
553                     # If it's a NOWAIT/SKIP LOCKED/OF/NO KEY query but the
554                     # backend doesn't support it, raise NotSupportedError to
555                     # prevent a possible deadlock.
556                     if nowait and not self.connection.features.has_select_for_update_nowait:
557                         raise NotSupportedError('NOWAIT is not supported on this database backend.')
558                     elif skip_locked and not self.connection.features.has_select_for_update_skip_locked:
559                         raise NotSupportedError('SKIP LOCKED is not supported on this database backend.')
560                     elif of and not self.connection.features.has_select_for_update_of:
561                         raise NotSupportedError('FOR UPDATE OF is not supported on this database backend.')
562                     elif no_key and not self.connection.features.has_select_for_no_key_update:
563                         raise NotSupportedError(
564                             'FOR NO KEY UPDATE is not supported on this '
565                             'database backend.'
566                         )
567                     for_update_part = self.connection.ops.for_update_sql(
568                         nowait=nowait,
569                         skip_locked=skip_locked,
570                         of=self.get_select_for_update_of_arguments(),
571                         no_key=no_key,
572                     )
573 
574                 if for_update_part and self.connection.features.for_update_after_from:
575                     result.append(for_update_part)
576 
577                 if where:
578                     result.append('WHERE %s' % where)
579                     params.extend(w_params)
580 
581                 grouping = []
582                 for g_sql, g_params in group_by:
583                     grouping.append(g_sql)
584                     params.extend(g_params)
585                 if grouping:
586                     if distinct_fields:
587                         raise NotImplementedError('annotate() + distinct(fields) is not implemented.')
588                     order_by = order_by or self.connection.ops.force_no_ordering()
589                     result.append('GROUP BY %s' % ', '.join(grouping))
590                     if self._meta_ordering:
591                         order_by = None
592                 if having:
593                     result.append('HAVING %s' % having)
594                     params.extend(h_params)
595 
596             if self.query.explain_query:
597                 result.insert(0, self.connection.ops.explain_query_prefix(
598                     self.query.explain_format,
599                     **self.query.explain_options
600                 ))
601 
602             if order_by:
603                 ordering = []
604                 for _, (o_sql, o_params, _) in order_by:
605                     ordering.append(o_sql)
606                     params.extend(o_params)
607                 result.append('ORDER BY %s' % ', '.join(ordering))
608 
609             if with_limit_offset:
610                 result.append(self.connection.ops.limit_offset_sql(self.query.low_mark, self.query.high_mark))
611 
612             if for_update_part and not self.connection.features.for_update_after_from:
613                 result.append(for_update_part)
614 
615             if self.query.subquery and extra_select:
616                 # If the query is used as a subquery, the extra selects would
617                 # result in more columns than the left-hand side expression is
618                 # expecting. This can happen when a subquery uses a combination
619                 # of order_by() and distinct(), forcing the ordering expressions
620                 # to be selected as well. Wrap the query in another subquery
621                 # to exclude extraneous selects.
622                 sub_selects = []
623                 sub_params = []
624                 for index, (select, _, alias) in enumerate(self.select, start=1):
625                     if not alias and with_col_aliases:
626                         alias = 'col%d' % index
627                     if alias:
628                         sub_selects.append("%s.%s" % (
629                             self.connection.ops.quote_name('subquery'),
630                             self.connection.ops.quote_name(alias),
631                         ))
632                     else:
633                         select_clone = select.relabeled_clone({select.alias: 'subquery'})
634                         subselect, subparams = select_clone.as_sql(self, self.connection)
635                         sub_selects.append(subselect)
636                         sub_params.extend(subparams)
637                 return 'SELECT %s FROM (%s) subquery' % (
638                     ', '.join(sub_selects),
639                     ' '.join(result),
640                 ), tuple(sub_params + params)
641 
642             return ' '.join(result), tuple(params)
643         finally:
644             # Finally do cleanup - get rid of the joins we created above.
645             self.query.reset_refcounts(refcounts_before)
646 
647     def get_default_columns(self, start_alias=None, opts=None, from_parent=None):
648         """
649         Compute the default columns for selecting every field in the base
650         model. Will sometimes be called to pull in related models (e.g. via
651         select_related), in which case "opts" and "start_alias" will be given
652         to provide a starting point for the traversal.
653 
654         Return a list of strings, quoted appropriately for use in SQL
655         directly, as well as a set of aliases used in the select statement (if
656         'as_pairs' is True, return a list of (alias, col_name) pairs instead
657         of strings as the first component and None as the second component).
658         """
659         result = []
660         if opts is None:
661             opts = self.query.get_meta()
662         only_load = self.deferred_to_columns()
663         start_alias = start_alias or self.query.get_initial_alias()
664         # The 'seen_models' is used to optimize checking the needed parent
665         # alias for a given field. This also includes None -> start_alias to
666         # be used by local fields.
667         seen_models = {None: start_alias}
668 
669         for field in opts.concrete_fields:
670             model = field.model._meta.concrete_model
671             # A proxy model will have a different model and concrete_model. We
672             # will assign None if the field belongs to this model.
673             if model == opts.model:
674                 model = None
675             if from_parent and model is not None and issubclass(
676                     from_parent._meta.concrete_model, model._meta.concrete_model):
677                 # Avoid loading data for already loaded parents.
678                 # We end up here in the case select_related() resolution
679                 # proceeds from parent model to child model. In that case the
680                 # parent model data is already present in the SELECT clause,
681                 # and we want to avoid reloading the same data again.
682                 continue
683             if field.model in only_load and field.attname not in only_load[field.model]:
684                 continue
685             alias = self.query.join_parent_model(opts, model, start_alias,
686                                                  seen_models)
687             column = field.get_col(alias)
688             result.append(column)
689         return result
690 
691     def get_distinct(self):
692         """
693         Return a quoted list of fields to use in DISTINCT ON part of the query.
694 
695         This method can alter the tables in the query, and thus it must be
696         called before get_from_clause().
697         """
698         result = []
699         params = []
700         opts = self.query.get_meta()
701 
702         for name in self.query.distinct_fields:
703             parts = name.split(LOOKUP_SEP)
704             _, targets, alias, joins, path, _, transform_function = self._setup_joins(parts, opts, None)
705             targets, alias, _ = self.query.trim_joins(targets, joins, path)
706             for target in targets:
707                 if name in self.query.annotation_select:
708                     result.append(name)
709                 else:
710                     r, p = self.compile(transform_function(target, alias))
711                     result.append(r)
712                     params.append(p)
713         return result, params
714 
715     def find_ordering_name(self, name, opts, alias=None, default_order='ASC',
716                            already_seen=None):
717         """
718         Return the table alias (the name might be ambiguous, the alias will
719         not be) and column name for ordering by the given 'name' parameter.
720         The 'name' is of the form 'field1__field2__...__fieldN'.
721         """
722         name, order = get_order_dir(name, default_order)
723         descending = order == 'DESC'
724         pieces = name.split(LOOKUP_SEP)
725         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)
726 
727         # If we get to this point and the field is a relation to another model,
728         # append the default ordering for that model unless it is the pk
729         # shortcut or the attribute name of the field that is specified.
730         if (
731             field.is_relation and
732             opts.ordering and
733             getattr(field, 'attname', None) != pieces[-1] and
734             name != 'pk'
735         ):
736             # Firstly, avoid infinite loops.
737             already_seen = already_seen or set()
738             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)
739             if join_tuple in already_seen:
740                 raise FieldError('Infinite loop caused by ordering.')
741             already_seen.add(join_tuple)
742 
743             results = []
744             for item in opts.ordering:
745                 if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):
746                     item = item.desc() if descending else item.asc()
747                 if isinstance(item, OrderBy):
748                     results.append((item, False))
749                     continue
750                 results.extend(self.find_ordering_name(item, opts, alias,
751                                                        order, already_seen))
752             return results
753         targets, alias, _ = self.query.trim_joins(targets, joins, path)
754         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]
755 
756     def _setup_joins(self, pieces, opts, alias):
757         """
758         Helper method for get_order_by() and get_distinct().
759 
760         get_ordering() and get_distinct() must produce same target columns on
761         same input, as the prefixes of get_ordering() and get_distinct() must
762         match. Executing SQL where this is not true is an error.
763         """
764         alias = alias or self.query.get_initial_alias()
765         field, targets, opts, joins, path, transform_function = self.query.setup_joins(pieces, opts, alias)
766         alias = joins[-1]
767         return field, targets, alias, joins, path, opts, transform_function
768 
769     def get_from_clause(self):
770         """
771         Return a list of strings that are joined together to go after the
772         "FROM" part of the query, as well as a list any extra parameters that
773         need to be included. Subclasses, can override this to create a
774         from-clause via a "select".
775 
776         This should only be called after any SQL construction methods that
777         might change the tables that are needed. This means the select columns,
778         ordering, and distinct must be done first.
779         """
780         result = []
781         params = []
782         for alias in tuple(self.query.alias_map):
783             if not self.query.alias_refcount[alias]:
784                 continue
785             try:
786                 from_clause = self.query.alias_map[alias]
787             except KeyError:
788                 # Extra tables can end up in self.tables, but not in the
789                 # alias_map if they aren't in a join. That's OK. We skip them.
790                 continue
791             clause_sql, clause_params = self.compile(from_clause)
792             result.append(clause_sql)
793             params.extend(clause_params)
794         for t in self.query.extra_tables:
795             alias, _ = self.query.table_alias(t)
796             # Only add the alias if it's not already present (the table_alias()
797             # call increments the refcount, so an alias refcount of one means
798             # this is the only reference).
799             if alias not in self.query.alias_map or self.query.alias_refcount[alias] == 1:
800                 result.append(', %s' % self.quote_name_unless_alias(alias))
801         return result, params
802 
803     def get_related_selections(self, select, opts=None, root_alias=None, cur_depth=1,
804                                requested=None, restricted=None):
805         """
806         Fill in the information needed for a select_related query. The current
807         depth is measured as the number of connections away from the root model
808         (for example, cur_depth=1 means we are looking at models with direct
809         connections to the root model).
810         """
811         def _get_field_choices():
812             direct_choices = (f.name for f in opts.fields if f.is_relation)
813             reverse_choices = (
814                 f.field.related_query_name()
815                 for f in opts.related_objects if f.field.unique
816             )
817             return chain(direct_choices, reverse_choices, self.query._filtered_relations)
818 
819         related_klass_infos = []
820         if not restricted and cur_depth > self.query.max_depth:
821             # We've recursed far enough; bail out.
822             return related_klass_infos
823 
824         if not opts:
825             opts = self.query.get_meta()
826             root_alias = self.query.get_initial_alias()
827         only_load = self.query.get_loaded_field_names()
828 
829         # Setup for the case when only particular related fields should be
830         # included in the related selection.
831         fields_found = set()
832         if requested is None:
833             restricted = isinstance(self.query.select_related, dict)
834             if restricted:
835                 requested = self.query.select_related
836 
837         def get_related_klass_infos(klass_info, related_klass_infos):
838             klass_info['related_klass_infos'] = related_klass_infos
839 
840         for f in opts.fields:
841             field_model = f.model._meta.concrete_model
842             fields_found.add(f.name)
843 
844             if restricted:
845                 next = requested.get(f.name, {})
846                 if not f.is_relation:
847                     # If a non-related field is used like a relation,
848                     # or if a single non-relational field is given.
849                     if next or f.name in requested:
850                         raise FieldError(
851                             "Non-relational field given in select_related: '%s'. "
852                             "Choices are: %s" % (
853                                 f.name,
854                                 ", ".join(_get_field_choices()) or '(none)',
855                             )
856                         )
857             else:
858                 next = False
859 
860             if not select_related_descend(f, restricted, requested,
861                                           only_load.get(field_model)):
862                 continue
863             klass_info = {
864                 'model': f.remote_field.model,
865                 'field': f,
866                 'reverse': False,
867                 'local_setter': f.set_cached_value,
868                 'remote_setter': f.remote_field.set_cached_value if f.unique else lambda x, y: None,
869                 'from_parent': False,
870             }
871             related_klass_infos.append(klass_info)
872             select_fields = []
873             _, _, _, joins, _, _ = self.query.setup_joins(
874                 [f.name], opts, root_alias)
875             alias = joins[-1]
876             columns = self.get_default_columns(start_alias=alias, opts=f.remote_field.model._meta)
877             for col in columns:
878                 select_fields.append(len(select))
879                 select.append((col, None))
880             klass_info['select_fields'] = select_fields
881             next_klass_infos = self.get_related_selections(
882                 select, f.remote_field.model._meta, alias, cur_depth + 1, next, restricted)
883             get_related_klass_infos(klass_info, next_klass_infos)
884 
885         if restricted:
886             related_fields = [
887                 (o.field, o.related_model)
888                 for o in opts.related_objects
889                 if o.field.unique and not o.many_to_many
890             ]
891             for f, model in related_fields:
892                 if not select_related_descend(f, restricted, requested,
893                                               only_load.get(model), reverse=True):
894                     continue
895 
896                 related_field_name = f.related_query_name()
897                 fields_found.add(related_field_name)
898 
899                 join_info = self.query.setup_joins([related_field_name], opts, root_alias)
900                 alias = join_info.joins[-1]
901                 from_parent = issubclass(model, opts.model) and model is not opts.model
902                 klass_info = {
903                     'model': model,
904                     'field': f,
905                     'reverse': True,
906                     'local_setter': f.remote_field.set_cached_value,
907                     'remote_setter': f.set_cached_value,
908                     'from_parent': from_parent,
909                 }
910                 related_klass_infos.append(klass_info)
911                 select_fields = []
912                 columns = self.get_default_columns(
913                     start_alias=alias, opts=model._meta, from_parent=opts.model)
914                 for col in columns:
915                     select_fields.append(len(select))
916                     select.append((col, None))
917                 klass_info['select_fields'] = select_fields
918                 next = requested.get(f.related_query_name(), {})
919                 next_klass_infos = self.get_related_selections(
920                     select, model._meta, alias, cur_depth + 1,
921                     next, restricted)
922                 get_related_klass_infos(klass_info, next_klass_infos)
923 
924             def local_setter(obj, from_obj):
925                 # Set a reverse fk object when relation is non-empty.
926                 if from_obj:
927                     f.remote_field.set_cached_value(from_obj, obj)
928 
929             def remote_setter(name, obj, from_obj):
930                 setattr(from_obj, name, obj)
931 
932             for name in list(requested):
933                 # Filtered relations work only on the topmost level.
934                 if cur_depth > 1:
935                     break
936                 if name in self.query._filtered_relations:
937                     fields_found.add(name)
938                     f, _, join_opts, joins, _, _ = self.query.setup_joins([name], opts, root_alias)
939                     model = join_opts.model
940                     alias = joins[-1]
941                     from_parent = issubclass(model, opts.model) and model is not opts.model
942                     klass_info = {
943                         'model': model,
944                         'field': f,
945                         'reverse': True,
946                         'local_setter': local_setter,
947                         'remote_setter': partial(remote_setter, name),
948                         'from_parent': from_parent,
949                     }
950                     related_klass_infos.append(klass_info)
951                     select_fields = []
952                     columns = self.get_default_columns(
953                         start_alias=alias, opts=model._meta,
954                         from_parent=opts.model,
955                     )
956                     for col in columns:
957                         select_fields.append(len(select))
958                         select.append((col, None))
959                     klass_info['select_fields'] = select_fields
960                     next_requested = requested.get(name, {})
961                     next_klass_infos = self.get_related_selections(
962                         select, opts=model._meta, root_alias=alias,
963                         cur_depth=cur_depth + 1, requested=next_requested,
964                         restricted=restricted,
965                     )
966                     get_related_klass_infos(klass_info, next_klass_infos)
967             fields_not_found = set(requested).difference(fields_found)
968             if fields_not_found:
969                 invalid_fields = ("'%s'" % s for s in fields_not_found)
970                 raise FieldError(
971                     'Invalid field name(s) given in select_related: %s. '
972                     'Choices are: %s' % (
973                         ', '.join(invalid_fields),
974                         ', '.join(_get_field_choices()) or '(none)',
975                     )
976                 )
977         return related_klass_infos
978 
979     def get_select_for_update_of_arguments(self):
980         """
981         Return a quoted list of arguments for the SELECT FOR UPDATE OF part of
982         the query.
983         """
984         def _get_parent_klass_info(klass_info):
985             concrete_model = klass_info['model']._meta.concrete_model
986             for parent_model, parent_link in concrete_model._meta.parents.items():
987                 parent_list = parent_model._meta.get_parent_list()
988                 yield {
989                     'model': parent_model,
990                     'field': parent_link,
991                     'reverse': False,
992                     'select_fields': [
993                         select_index
994                         for select_index in klass_info['select_fields']
995                         # Selected columns from a model or its parents.
996                         if (
997                             self.select[select_index][0].target.model == parent_model or
998                             self.select[select_index][0].target.model in parent_list
999                         )
1000                     ],
1001                 }
1002 
1003         def _get_first_selected_col_from_model(klass_info):
1004             """
1005             Find the first selected column from a model. If it doesn't exist,
1006             don't lock a model.
1007 
1008             select_fields is filled recursively, so it also contains fields
1009             from the parent models.
1010             """
1011             concrete_model = klass_info['model']._meta.concrete_model
1012             for select_index in klass_info['select_fields']:
1013                 if self.select[select_index][0].target.model == concrete_model:
1014                     return self.select[select_index][0]
1015 
1016         def _get_field_choices():
1017             """Yield all allowed field paths in breadth-first search order."""
1018             queue = collections.deque([(None, self.klass_info)])
1019             while queue:
1020                 parent_path, klass_info = queue.popleft()
1021                 if parent_path is None:
1022                     path = []
1023                     yield 'self'
1024                 else:
1025                     field = klass_info['field']
1026                     if klass_info['reverse']:
1027                         field = field.remote_field
1028                     path = parent_path + [field.name]
1029                     yield LOOKUP_SEP.join(path)
1030                 queue.extend(
1031                     (path, klass_info)
1032                     for klass_info in _get_parent_klass_info(klass_info)
1033                 )
1034                 queue.extend(
1035                     (path, klass_info)
1036                     for klass_info in klass_info.get('related_klass_infos', [])
1037                 )
1038         result = []
1039         invalid_names = []
1040         for name in self.query.select_for_update_of:
1041             klass_info = self.klass_info
1042             if name == 'self':
1043                 col = _get_first_selected_col_from_model(klass_info)
1044             else:
1045                 for part in name.split(LOOKUP_SEP):
1046                     klass_infos = (
1047                         *klass_info.get('related_klass_infos', []),
1048                         *_get_parent_klass_info(klass_info),
1049                     )
1050                     for related_klass_info in klass_infos:
1051                         field = related_klass_info['field']
1052                         if related_klass_info['reverse']:
1053                             field = field.remote_field
1054                         if field.name == part:
1055                             klass_info = related_klass_info
1056                             break
1057                     else:
1058                         klass_info = None
1059                         break
1060                 if klass_info is None:
1061                     invalid_names.append(name)
1062                     continue
1063                 col = _get_first_selected_col_from_model(klass_info)
1064             if col is not None:
1065                 if self.connection.features.select_for_update_of_column:
1066                     result.append(self.compile(col)[0])
1067                 else:
1068                     result.append(self.quote_name_unless_alias(col.alias))
1069         if invalid_names:
1070             raise FieldError(
1071                 'Invalid field name(s) given in select_for_update(of=(...)): %s. '
1072                 'Only relational fields followed in the query are allowed. '
1073                 'Choices are: %s.' % (
1074                     ', '.join(invalid_names),
1075                     ', '.join(_get_field_choices()),
1076                 )
1077             )
1078         return result
1079 
1080     def deferred_to_columns(self):
1081         """
1082         Convert the self.deferred_loading data structure to mapping of table
1083         names to sets of column names which are to be loaded. Return the
1084         dictionary.
1085         """
1086         columns = {}
1087         self.query.deferred_to_data(columns, self.query.get_loaded_field_names_cb)
1088         return columns
1089 
1090     def get_converters(self, expressions):
1091         converters = {}
1092         for i, expression in enumerate(expressions):
1093             if expression:
1094                 backend_converters = self.connection.ops.get_db_converters(expression)
1095                 field_converters = expression.get_db_converters(self.connection)
1096                 if backend_converters or field_converters:
1097                     converters[i] = (backend_converters + field_converters, expression)
1098         return converters
1099 
1100     def apply_converters(self, rows, converters):
1101         connection = self.connection
1102         converters = list(converters.items())
1103         for row in map(list, rows):
1104             for pos, (convs, expression) in converters:
1105                 value = row[pos]
1106                 for converter in convs:
1107                     value = converter(value, expression, connection)
1108                 row[pos] = value
1109             yield row
1110 
1111     def results_iter(self, results=None, tuple_expected=False, chunked_fetch=False,
1112                      chunk_size=GET_ITERATOR_CHUNK_SIZE):
1113         """Return an iterator over the results from executing this query."""
1114         if results is None:
1115             results = self.execute_sql(MULTI, chunked_fetch=chunked_fetch, chunk_size=chunk_size)
1116         fields = [s[0] for s in self.select[0:self.col_count]]
1117         converters = self.get_converters(fields)
1118         rows = chain.from_iterable(results)
1119         if converters:
1120             rows = self.apply_converters(rows, converters)
1121             if tuple_expected:
1122                 rows = map(tuple, rows)
1123         return rows
1124 
1125     def has_results(self):
1126         """
1127         Backends (e.g. NoSQL) can override this in order to use optimized
1128         versions of "query has any results."
1129         """
1130         return bool(self.execute_sql(SINGLE))
1131 
1132     def execute_sql(self, result_type=MULTI, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE):
1133         """
1134         Run the query against the database and return the result(s). The
1135         return value is a single data item if result_type is SINGLE, or an
1136         iterator over the results if the result_type is MULTI.
1137 
1138         result_type is either MULTI (use fetchmany() to retrieve all rows),
1139         SINGLE (only retrieve a single row), or None. In this last case, the
1140         cursor is returned if any query is executed, since it's used by
1141         subclasses such as InsertQuery). It's possible, however, that no query
1142         is needed, as the filters describe an empty set. In that case, None is
1143         returned, to avoid any unnecessary database interaction.
1144         """
1145         result_type = result_type or NO_RESULTS
1146         try:
1147             sql, params = self.as_sql()
1148             if not sql:
1149                 raise EmptyResultSet
1150         except EmptyResultSet:
1151             if result_type == MULTI:
1152                 return iter([])
1153             else:
1154                 return
1155         if chunked_fetch:
1156             cursor = self.connection.chunked_cursor()
1157         else:
1158             cursor = self.connection.cursor()
1159         try:
1160             cursor.execute(sql, params)
1161         except Exception:
1162             # Might fail for server-side cursors (e.g. connection closed)
1163             cursor.close()
1164             raise
1165 
1166         if result_type == CURSOR:
1167             # Give the caller the cursor to process and close.
1168             return cursor
1169         if result_type == SINGLE:
1170             try:
1171                 val = cursor.fetchone()
1172                 if val:
1173                     return val[0:self.col_count]
1174                 return val
1175             finally:
1176                 # done with the cursor
1177                 cursor.close()
1178         if result_type == NO_RESULTS:
1179             cursor.close()
1180             return
1181 
1182         result = cursor_iter(
1183             cursor, self.connection.features.empty_fetchmany_value,
1184             self.col_count if self.has_extra_select else None,
1185             chunk_size,
1186         )
1187         if not chunked_fetch or not self.connection.features.can_use_chunked_reads:
1188             try:
1189                 # If we are using non-chunked reads, we return the same data
1190                 # structure as normally, but ensure it is all read into memory
1191                 # before going any further. Use chunked_fetch if requested,
1192                 # unless the database doesn't support it.
1193                 return list(result)
1194             finally:
1195                 # done with the cursor
1196                 cursor.close()
1197         return result
1198 
1199     def as_subquery_condition(self, alias, columns, compiler):
1200         qn = compiler.quote_name_unless_alias
1201         qn2 = self.connection.ops.quote_name
1202 
1203         for index, select_col in enumerate(self.query.select):
1204             lhs_sql, lhs_params = self.compile(select_col)
1205             rhs = '%s.%s' % (qn(alias), qn2(columns[index]))
1206             self.query.where.add(
1207                 RawSQL('%s = %s' % (lhs_sql, rhs), lhs_params), 'AND')
1208 
1209         sql, params = self.as_sql()
1210         return 'EXISTS (%s)' % sql, params
1211 
1212     def explain_query(self):
1213         result = list(self.execute_sql())
1214         # Some backends return 1 item tuples with strings, and others return
1215         # tuples with integers and strings. Flatten them out into strings.
1216         for row in result[0]:
1217             if not isinstance(row, str):
1218                 yield ' '.join(str(c) for c in row)
1219             else:
1220                 yield row

</code><intended_behavior>The `SQLCompiler` class's methods responsible for generating the SQL query need to be scrutinized to ensure they correctly manage aliases for annotated fields used in aggregation functions. The specific methods within `SQLCompiler` that construct the SQL clauses for selection (SELECT) and aggregation should be updated or fixed to respect the aliases of annotated fields throughout the query. This ensures that when the `QuerySet.aggregate` method translates a Django QuerySet into SQL, all parts of the query, especially those dealing with annotated fields used in aggregate expressions, reference the correct alias. Such behavior would prevent the generation of invalid SQL code and address the reported issue.</intended_behavior>]
2025-10-17 12:25:45.524 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-17 12:25:45.524 | INFO     | Search-only: skipping patch selection
2025-10-17 12:25:45.677 | INFO     | Task django__django-13431 completed successfully.
2025-10-17 12:25:45.678 | INFO     | No patch generated. You can try running ACR again.
