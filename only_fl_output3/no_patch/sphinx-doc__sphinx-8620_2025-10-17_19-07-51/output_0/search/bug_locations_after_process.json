[
    {
        "rel_file_path": "sphinx/builders/html/transforms.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sphinx-doc__sphinx/setup_sphinx-doc__sphinx__3.5/sphinx/builders/html/transforms.py",
        "start": 21,
        "end": 59,
        "class_name": "KeyboardTransform",
        "method_name": null,
        "code": "21 class KeyboardTransform(SphinxPostTransform):\n22     \"\"\"Transform :kbd: role to more detailed form.\n23 \n24     Before::\n25 \n26         <literal class=\"kbd\">\n27             Control-x\n28 \n29     After::\n30 \n31         <literal class=\"kbd\">\n32             <literal class=\"kbd\">\n33                 Control\n34             -\n35             <literal class=\"kbd\">\n36                 x\n37     \"\"\"\n38     default_priority = 400\n39     builders = ('html',)\n40     pattern = re.compile(r'(-|\\+|\\^|\\s+)')\n41 \n42     def run(self, **kwargs: Any) -> None:\n43         matcher = NodeMatcher(nodes.literal, classes=[\"kbd\"])\n44         for node in self.document.traverse(matcher):  # type: nodes.literal\n45             parts = self.pattern.split(node[-1].astext())\n46             if len(parts) == 1:\n47                 continue\n48 \n49             node.pop()\n50             while parts:\n51                 key = parts.pop(0)\n52                 node += nodes.literal('', key, classes=[\"kbd\"])\n53 \n54                 try:\n55                     # key separator (ex. -, +, ^)\n56                     sep = parts.pop(0)\n57                     node += nodes.Text(sep)\n58                 except IndexError:\n59                     pass\n",
        "intended_behavior": "Within the `KeyboardTransform` class, adjust the method responsible for generating the HTML for the `:kbd:` role so that it can differentiate between single keystrokes and compound keystrokes. For compound keystrokes (e.g., `Shift+X`), the container `<kbd>` element should be marked with an additional CSS class (suggested name: `compound`). This class does not need to be added to single keystroke elements or the individual child `<kbd>` elements within a compound keystroke. This enhancement will allow for specific styling of compound keystrokes without affecting the presentation of single keystrokes, thereby resolving the issue described. The existing functionality for handling single keystrokes and the initial generation of `<kbd>` elements must be preserved, with the only change being the conditional addition of a `compound` CSS class for compound keystrokes."
    }
]