[
    {
        "rel_file_path": "lib/matplotlib/cm.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.7/lib/matplotlib/cm.py",
        "start": 223,
        "end": 263,
        "class_name": null,
        "method_name": "register_cmap",
        "code": "223 def register_cmap(name=None, cmap=None, *, override_builtin=False):\n224     \"\"\"\n225     Add a colormap to the set recognized by :func:`get_cmap`.\n226 \n227     Register a new colormap to be accessed by name ::\n228 \n229         LinearSegmentedColormap('swirly', data, lut)\n230         register_cmap(cmap=swirly_cmap)\n231 \n232     Parameters\n233     ----------\n234     name : str, optional\n235        The name that can be used in :func:`get_cmap` or :rc:`image.cmap`\n236 \n237        If absent, the name will be the :attr:`~matplotlib.colors.Colormap.name`\n238        attribute of the *cmap*.\n239 \n240     cmap : matplotlib.colors.Colormap\n241        Despite being the second argument and having a default value, this\n242        is a required argument.\n243 \n244     override_builtin : bool\n245 \n246         Allow built-in colormaps to be overridden by a user-supplied\n247         colormap.\n248 \n249         Please do not use this unless you are sure you need it.\n250     \"\"\"\n251     _api.check_isinstance((str, None), name=name)\n252     if name is None:\n253         try:\n254             name = cmap.name\n255         except AttributeError as err:\n256             raise ValueError(\"Arguments must include a name or a \"\n257                              \"Colormap\") from err\n258     # override_builtin is allowed here for backward compatibility\n259     # this is just a shim to enable that to work privately in\n260     # the global ColormapRegistry\n261     _colormaps._allow_override_builtin = override_builtin\n262     _colormaps.register(cmap, name=name, force=override_builtin)\n263     _colormaps._allow_override_builtin = False\n",
        "intended_behavior": "Modify the register_cmap function to ensure that once a colormap is registered with a particular name, all references to this colormap (including in functions like set_cmap and imshow) should use the registered name instead of the internal colormap name. This might involve updating how colormaps are stored or retrieved in the _colormaps registry to prioritize registered names over internal names when both are available."
    },
    {
        "rel_file_path": "lib/matplotlib/pyplot.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.7/lib/matplotlib/pyplot.py",
        "start": 3231,
        "end": 3271,
        "class_name": null,
        "method_name": "imshow",
        "code": "3231 def imshow(\n3232     X: ArrayLike | PIL.Image.Image,\n3233     cmap: str | Colormap | None = None,\n3234     norm: str | Normalize | None = None,\n3235     *,\n3236     aspect: Literal[\"equal\", \"auto\"] | float | None = None,\n3237     interpolation: str | None = None,\n3238     alpha: float | ArrayLike | None = None,\n3239     vmin: float | None = None,\n3240     vmax: float | None = None,\n3241     origin: Literal[\"upper\", \"lower\"] | None = None,\n3242     extent: tuple[float, float, float, float] | None = None,\n3243     interpolation_stage: Literal[\"data\", \"rgba\"] | None = None,\n3244     filternorm: bool = True,\n3245     filterrad: float = 4.0,\n3246     resample: bool | None = None,\n3247     url: str | None = None,\n3248     data=None,\n3249     **kwargs,\n3250 ) -> AxesImage:\n3251     __ret = gca().imshow(\n3252         X,\n3253         cmap=cmap,\n3254         norm=norm,\n3255         aspect=aspect,\n3256         interpolation=interpolation,\n3257         alpha=alpha,\n3258         vmin=vmin,\n3259         vmax=vmax,\n3260         origin=origin,\n3261         extent=extent,\n3262         interpolation_stage=interpolation_stage,\n3263         filternorm=filternorm,\n3264         filterrad=filterrad,\n3265         resample=resample,\n3266         url=url,\n3267         **({\"data\": data} if data is not None else {}),\n3268         **kwargs,\n3269     )\n3270     sci(__ret)\n3271     return __ret\n",
        "intended_behavior": "Update the imshow function to ensure that it properly looks up colormaps using the registered name. This means validating colormap names against the registry of colormaps added through register_cmap, allowing for successful retrieval and application based on the registered name rather than just the internal name. Given that imshow may delegate to a lower-level implementation for the actual colormap application, a review and potential update of that delegation process are also implied to ensure consistency in colormap name handling."
    }
]