2025-10-17 12:03:36.960 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-17 12:03:40.218 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=287, output_tokens=12, cost=0.003230
2025-10-17 12:03:40.219 | INFO     | Test agent decides that the issue statement does not contain reproduction steps; skipping reproducer tracing
2025-10-17 12:03:40.223 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-17 12:03:47.479 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=596, output_tokens=288, cost=0.014600
2025-10-17 12:03:47.485 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-17 12:03:52.310 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=642, output_tokens=44, cost=0.007740
2025-10-17 12:03:52.312 | DEBUG    | Extracted a valid json.
2025-10-17 12:03:52.312 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_class(\"Migration\")",
        "search_method(\"generate_migration_filename\")",
        "search_code(\"merge migration filename\")"
    ],
    "bug_locations": []
}
2025-10-17 12:03:52.373 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-17 12:03:52.374 | DEBUG    | <Agent search> Analyzing search results.
2025-10-17 12:04:06.673 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1692, output_tokens=646, cost=0.036300
2025-10-17 12:04:06.680 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-17 12:04:18.351 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2554, output_tokens=506, cost=0.040720
2025-10-17 12:04:18.360 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-17 12:04:23.875 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=860, output_tokens=201, cost=0.014630
2025-10-17 12:04:23.876 | DEBUG    | Extracted a valid json.
2025-10-17 12:04:23.877 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_code_in_file(\"merge\", \"django/db/migrations/migration.py\")",
        "search_class(\"MigrationAutodetector\")",
        "search_method(\"merge_migrations\")"
    ],
    "bug_locations": [
        {
            "file": "django/db/migrations/migration.py",
            "class": "Migration or MigrationAutodetector",
            "method": "Method responsible for naming merge migration files",
            "intended_behavior": "Modify this method to incorporate logic for generating filenames for merge migrations by concatenating the names of the migrations being merged, ensuring readability and immediate recognition of the merged entities from the filename alone."
        },
        {
            "file": "",
            "class": "",
            "method": "",
            "intended_behavior": "Introduce or modify utilities to support the generation of more informative merge migration filenames, ensuring it integrates seamlessly with the current migration creation and application workflows."
        }
    ]
}
2025-10-17 12:04:23.907 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-17 12:04:23.908 | DEBUG    | <Agent search> Analyzing search results.
2025-10-17 12:04:39.765 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3738, output_tokens=724, cost=0.059100
2025-10-17 12:04:39.779 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-17 12:04:45.862 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=4678, output_tokens=237, cost=0.053890
2025-10-17 12:04:45.867 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-17 12:04:47.127 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=591, output_tokens=14, cost=0.006330
2025-10-17 12:04:47.128 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-17 12:04:47.128 | DEBUG    | Trying to convert API calls/bug locations into json. Try 2 of 5.
2025-10-17 12:04:48.591 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=591, output_tokens=14, cost=0.006330
2025-10-17 12:04:48.592 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-17 12:04:48.592 | DEBUG    | Trying to convert API calls/bug locations into json. Try 3 of 5.
2025-10-17 12:04:51.409 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=591, output_tokens=14, cost=0.006330
2025-10-17 12:04:51.410 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-17 12:04:51.416 | DEBUG    | Trying to convert API calls/bug locations into json. Try 4 of 5.
2025-10-17 12:04:52.618 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=591, output_tokens=14, cost=0.006330
2025-10-17 12:04:52.619 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-17 12:04:52.619 | DEBUG    | Trying to convert API calls/bug locations into json. Try 5 of 5.
2025-10-17 12:04:54.450 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=591, output_tokens=14, cost=0.006330
2025-10-17 12:04:54.451 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-17 12:04:54.451 | DEBUG    | Agent proxy return the following json: None
2025-10-17 12:04:54.451 | DEBUG    | Could not extract API calls from agent search response, asking search agent to re-generate response.
2025-10-17 12:04:54.452 | DEBUG    | <Agent search> Downstream could not consume our last response. Will retry.
2025-10-17 12:04:54.452 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-17 12:05:07.267 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=4942, output_tokens=514, cost=0.064840
2025-10-17 12:05:07.277 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-17 12:05:12.126 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=868, output_tokens=162, cost=0.013540
2025-10-17 12:05:12.127 | DEBUG    | Extracted a valid json.
2025-10-17 12:05:12.127 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations":[
        {
            "file": "django/db/migrations/autodetector.py",
            "class": "MigrationAutodetector",
            "method": "",
            "intended_behavior": "This new or modified method should construct the name of a merge migration by considering the names of the migrations that are being merged, using a clear separator to distinguish between the component names."
        },
        {
            "file": "django/db/migrations/writer.py",
            "class": "",
            "method": "",
            "intended_behavior": "Incorporate logic in the method for generating migration filenames that checks if the migration is a merge migration and applies a naming convention including identifying information from the merged migrations."
        }
    ]
}
2025-10-17 12:05:12.139 | DEBUG    | Bug location extracted successfully: [<file>django/db/migrations/autodetector.py</file>
<class>MigrationAutodetector</class>
<method>None</method>
<code>
16 class MigrationAutodetector:
17     """
18     Take a pair of ProjectStates and compare them to see what the first would
19     need doing to make it match the second (the second usually being the
20     project's current state).
21 
22     Note that this naturally operates on entire projects at a time,
23     as it's likely that changes interact (for example, you can't
24     add a ForeignKey without having a migration to add the table it
25     depends on first). A user interface may offer single-app usage
26     if it wishes, with the caveat that it may not always be possible.
27     """
28 
29     def __init__(self, from_state, to_state, questioner=None):
30         self.from_state = from_state
31         self.to_state = to_state
32         self.questioner = questioner or MigrationQuestioner()
33         self.existing_apps = {app for app, model in from_state.models}
34 
35     def changes(self, graph, trim_to_apps=None, convert_apps=None, migration_name=None):
36         """
37         Main entry point to produce a list of applicable changes.
38         Take a graph to base names on and an optional set of apps
39         to try and restrict to (restriction is not guaranteed)
40         """
41         changes = self._detect_changes(convert_apps, graph)
42         changes = self.arrange_for_graph(changes, graph, migration_name)
43         if trim_to_apps:
44             changes = self._trim_to_apps(changes, trim_to_apps)
45         return changes
46 
47     def deep_deconstruct(self, obj):
48         """
49         Recursive deconstruction for a field and its arguments.
50         Used for full comparison for rename/alter; sometimes a single-level
51         deconstruction will not compare correctly.
52         """
53         if isinstance(obj, list):
54             return [self.deep_deconstruct(value) for value in obj]
55         elif isinstance(obj, tuple):
56             return tuple(self.deep_deconstruct(value) for value in obj)
57         elif isinstance(obj, dict):
58             return {
59                 key: self.deep_deconstruct(value)
60                 for key, value in obj.items()
61             }
62         elif isinstance(obj, functools.partial):
63             return (obj.func, self.deep_deconstruct(obj.args), self.deep_deconstruct(obj.keywords))
64         elif isinstance(obj, COMPILED_REGEX_TYPE):
65             return RegexObject(obj)
66         elif isinstance(obj, type):
67             # If this is a type that implements 'deconstruct' as an instance method,
68             # avoid treating this as being deconstructible itself - see #22951
69             return obj
70         elif hasattr(obj, 'deconstruct'):
71             deconstructed = obj.deconstruct()
72             if isinstance(obj, models.Field):
73                 # we have a field which also returns a name
74                 deconstructed = deconstructed[1:]
75             path, args, kwargs = deconstructed
76             return (
77                 path,
78                 [self.deep_deconstruct(value) for value in args],
79                 {
80                     key: self.deep_deconstruct(value)
81                     for key, value in kwargs.items()
82                 },
83             )
84         else:
85             return obj
86 
87     def only_relation_agnostic_fields(self, fields):
88         """
89         Return a definition of the fields that ignores field names and
90         what related fields actually relate to. Used for detecting renames (as
91         the related fields change during renames).
92         """
93         fields_def = []
94         for name, field in sorted(fields.items()):
95             deconstruction = self.deep_deconstruct(field)
96             if field.remote_field and field.remote_field.model:
97                 del deconstruction[2]['to']
98             fields_def.append(deconstruction)
99         return fields_def
100 
101     def _detect_changes(self, convert_apps=None, graph=None):
102         """
103         Return a dict of migration plans which will achieve the
104         change from from_state to to_state. The dict has app labels
105         as keys and a list of migrations as values.
106 
107         The resulting migrations aren't specially named, but the names
108         do matter for dependencies inside the set.
109 
110         convert_apps is the list of apps to convert to use migrations
111         (i.e. to make initial migrations for, in the usual case)
112 
113         graph is an optional argument that, if provided, can help improve
114         dependency generation and avoid potential circular dependencies.
115         """
116         # The first phase is generating all the operations for each app
117         # and gathering them into a big per-app list.
118         # Then go through that list, order it, and split into migrations to
119         # resolve dependencies caused by M2Ms and FKs.
120         self.generated_operations = {}
121         self.altered_indexes = {}
122         self.altered_constraints = {}
123 
124         # Prepare some old/new state and model lists, separating
125         # proxy models and ignoring unmigrated apps.
126         self.old_apps = self.from_state.concrete_apps
127         self.new_apps = self.to_state.apps
128         self.old_model_keys = set()
129         self.old_proxy_keys = set()
130         self.old_unmanaged_keys = set()
131         self.new_model_keys = set()
132         self.new_proxy_keys = set()
133         self.new_unmanaged_keys = set()
134         for al, mn in self.from_state.models:
135             model = self.old_apps.get_model(al, mn)
136             if not model._meta.managed:
137                 self.old_unmanaged_keys.add((al, mn))
138             elif al not in self.from_state.real_apps:
139                 if model._meta.proxy:
140                     self.old_proxy_keys.add((al, mn))
141                 else:
142                     self.old_model_keys.add((al, mn))
143 
144         for al, mn in self.to_state.models:
145             model = self.new_apps.get_model(al, mn)
146             if not model._meta.managed:
147                 self.new_unmanaged_keys.add((al, mn))
148             elif (
149                 al not in self.from_state.real_apps or
150                 (convert_apps and al in convert_apps)
151             ):
152                 if model._meta.proxy:
153                     self.new_proxy_keys.add((al, mn))
154                 else:
155                     self.new_model_keys.add((al, mn))
156 
157         # Renames have to come first
158         self.generate_renamed_models()
159 
160         # Prepare lists of fields and generate through model map
161         self._prepare_field_lists()
162         self._generate_through_model_map()
163 
164         # Generate non-rename model operations
165         self.generate_deleted_models()
166         self.generate_created_models()
167         self.generate_deleted_proxies()
168         self.generate_created_proxies()
169         self.generate_altered_options()
170         self.generate_altered_managers()
171 
172         # Create the altered indexes and store them in self.altered_indexes.
173         # This avoids the same computation in generate_removed_indexes()
174         # and generate_added_indexes().
175         self.create_altered_indexes()
176         self.create_altered_constraints()
177         # Generate index removal operations before field is removed
178         self.generate_removed_constraints()
179         self.generate_removed_indexes()
180         # Generate field operations
181         self.generate_renamed_fields()
182         self.generate_removed_fields()
183         self.generate_added_fields()
184         self.generate_altered_fields()
185         self.generate_altered_unique_together()
186         self.generate_altered_index_together()
187         self.generate_added_indexes()
188         self.generate_added_constraints()
189         self.generate_altered_db_table()
190         self.generate_altered_order_with_respect_to()
191 
192         self._sort_migrations()
193         self._build_migration_list(graph)
194         self._optimize_migrations()
195 
196         return self.migrations
197 
198     def _prepare_field_lists(self):
199         """
200         Prepare field lists and a list of the fields that used through models
201         in the old state so dependencies can be made from the through model
202         deletion to the field that uses it.
203         """
204         self.kept_model_keys = self.old_model_keys & self.new_model_keys
205         self.kept_proxy_keys = self.old_proxy_keys & self.new_proxy_keys
206         self.kept_unmanaged_keys = self.old_unmanaged_keys & self.new_unmanaged_keys
207         self.through_users = {}
208         self.old_field_keys = {
209             (app_label, model_name, field_name)
210             for app_label, model_name in self.kept_model_keys
211             for field_name in self.from_state.models[
212                 app_label,
213                 self.renamed_models.get((app_label, model_name), model_name)
214             ].fields
215         }
216         self.new_field_keys = {
217             (app_label, model_name, field_name)
218             for app_label, model_name in self.kept_model_keys
219             for field_name in self.to_state.models[app_label, model_name].fields
220         }
221 
222     def _generate_through_model_map(self):
223         """Through model map generation."""
224         for app_label, model_name in sorted(self.old_model_keys):
225             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
226             old_model_state = self.from_state.models[app_label, old_model_name]
227             for field_name in old_model_state.fields:
228                 old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)
229                 if (hasattr(old_field, "remote_field") and getattr(old_field.remote_field, "through", None) and
230                         not old_field.remote_field.through._meta.auto_created):
231                     through_key = (
232                         old_field.remote_field.through._meta.app_label,
233                         old_field.remote_field.through._meta.model_name,
234                     )
235                     self.through_users[through_key] = (app_label, old_model_name, field_name)
236 
237     @staticmethod
238     def _resolve_dependency(dependency):
239         """
240         Return the resolved dependency and a boolean denoting whether or not
241         it was swappable.
242         """
243         if dependency[0] != '__setting__':
244             return dependency, False
245         resolved_app_label, resolved_object_name = getattr(settings, dependency[1]).split('.')
246         return (resolved_app_label, resolved_object_name.lower()) + dependency[2:], True
247 
248     def _build_migration_list(self, graph=None):
249         """
250         Chop the lists of operations up into migrations with dependencies on
251         each other. Do this by going through an app's list of operations until
252         one is found that has an outgoing dependency that isn't in another
253         app's migration yet (hasn't been chopped off its list). Then chop off
254         the operations before it into a migration and move onto the next app.
255         If the loops completes without doing anything, there's a circular
256         dependency (which _should_ be impossible as the operations are
257         all split at this point so they can't depend and be depended on).
258         """
259         self.migrations = {}
260         num_ops = sum(len(x) for x in self.generated_operations.values())
261         chop_mode = False
262         while num_ops:
263             # On every iteration, we step through all the apps and see if there
264             # is a completed set of operations.
265             # If we find that a subset of the operations are complete we can
266             # try to chop it off from the rest and continue, but we only
267             # do this if we've already been through the list once before
268             # without any chopping and nothing has changed.
269             for app_label in sorted(self.generated_operations):
270                 chopped = []
271                 dependencies = set()
272                 for operation in list(self.generated_operations[app_label]):
273                     deps_satisfied = True
274                     operation_dependencies = set()
275                     for dep in operation._auto_deps:
276                         # Temporarily resolve the swappable dependency to
277                         # prevent circular references. While keeping the
278                         # dependency checks on the resolved model, add the
279                         # swappable dependencies.
280                         original_dep = dep
281                         dep, is_swappable_dep = self._resolve_dependency(dep)
282                         if dep[0] != app_label:
283                             # External app dependency. See if it's not yet
284                             # satisfied.
285                             for other_operation in self.generated_operations.get(dep[0], []):
286                                 if self.check_dependency(other_operation, dep):
287                                     deps_satisfied = False
288                                     break
289                             if not deps_satisfied:
290                                 break
291                             else:
292                                 if is_swappable_dep:
293                                     operation_dependencies.add((original_dep[0], original_dep[1]))
294                                 elif dep[0] in self.migrations:
295                                     operation_dependencies.add((dep[0], self.migrations[dep[0]][-1].name))
296                                 else:
297                                     # If we can't find the other app, we add a first/last dependency,
298                                     # but only if we've already been through once and checked everything
299                                     if chop_mode:
300                                         # If the app already exists, we add a dependency on the last migration,
301                                         # as we don't know which migration contains the target field.
302                                         # If it's not yet migrated or has no migrations, we use __first__
303                                         if graph and graph.leaf_nodes(dep[0]):
304                                             operation_dependencies.add(graph.leaf_nodes(dep[0])[0])
305                                         else:
306                                             operation_dependencies.add((dep[0], "__first__"))
307                                     else:
308                                         deps_satisfied = False
309                     if deps_satisfied:
310                         chopped.append(operation)
311                         dependencies.update(operation_dependencies)
312                         del self.generated_operations[app_label][0]
313                     else:
314                         break
315                 # Make a migration! Well, only if there's stuff to put in it
316                 if dependencies or chopped:
317                     if not self.generated_operations[app_label] or chop_mode:
318                         subclass = type("Migration", (Migration,), {"operations": [], "dependencies": []})
319                         instance = subclass("auto_%i" % (len(self.migrations.get(app_label, [])) + 1), app_label)
320                         instance.dependencies = list(dependencies)
321                         instance.operations = chopped
322                         instance.initial = app_label not in self.existing_apps
323                         self.migrations.setdefault(app_label, []).append(instance)
324                         chop_mode = False
325                     else:
326                         self.generated_operations[app_label] = chopped + self.generated_operations[app_label]
327             new_num_ops = sum(len(x) for x in self.generated_operations.values())
328             if new_num_ops == num_ops:
329                 if not chop_mode:
330                     chop_mode = True
331                 else:
332                     raise ValueError("Cannot resolve operation dependencies: %r" % self.generated_operations)
333             num_ops = new_num_ops
334 
335     def _sort_migrations(self):
336         """
337         Reorder to make things possible. Reordering may be needed so FKs work
338         nicely inside the same app.
339         """
340         for app_label, ops in sorted(self.generated_operations.items()):
341             # construct a dependency graph for intra-app dependencies
342             dependency_graph = {op: set() for op in ops}
343             for op in ops:
344                 for dep in op._auto_deps:
345                     # Resolve intra-app dependencies to handle circular
346                     # references involving a swappable model.
347                     dep = self._resolve_dependency(dep)[0]
348                     if dep[0] == app_label:
349                         for op2 in ops:
350                             if self.check_dependency(op2, dep):
351                                 dependency_graph[op].add(op2)
352 
353             # we use a stable sort for deterministic tests & general behavior
354             self.generated_operations[app_label] = stable_topological_sort(ops, dependency_graph)
355 
356     def _optimize_migrations(self):
357         # Add in internal dependencies among the migrations
358         for app_label, migrations in self.migrations.items():
359             for m1, m2 in zip(migrations, migrations[1:]):
360                 m2.dependencies.append((app_label, m1.name))
361 
362         # De-dupe dependencies
363         for migrations in self.migrations.values():
364             for migration in migrations:
365                 migration.dependencies = list(set(migration.dependencies))
366 
367         # Optimize migrations
368         for app_label, migrations in self.migrations.items():
369             for migration in migrations:
370                 migration.operations = MigrationOptimizer().optimize(migration.operations, app_label)
371 
372     def check_dependency(self, operation, dependency):
373         """
374         Return True if the given operation depends on the given dependency,
375         False otherwise.
376         """
377         # Created model
378         if dependency[2] is None and dependency[3] is True:
379             return (
380                 isinstance(operation, operations.CreateModel) and
381                 operation.name_lower == dependency[1].lower()
382             )
383         # Created field
384         elif dependency[2] is not None and dependency[3] is True:
385             return (
386                 (
387                     isinstance(operation, operations.CreateModel) and
388                     operation.name_lower == dependency[1].lower() and
389                     any(dependency[2] == x for x, y in operation.fields)
390                 ) or
391                 (
392                     isinstance(operation, operations.AddField) and
393                     operation.model_name_lower == dependency[1].lower() and
394                     operation.name_lower == dependency[2].lower()
395                 )
396             )
397         # Removed field
398         elif dependency[2] is not None and dependency[3] is False:
399             return (
400                 isinstance(operation, operations.RemoveField) and
401                 operation.model_name_lower == dependency[1].lower() and
402                 operation.name_lower == dependency[2].lower()
403             )
404         # Removed model
405         elif dependency[2] is None and dependency[3] is False:
406             return (
407                 isinstance(operation, operations.DeleteModel) and
408                 operation.name_lower == dependency[1].lower()
409             )
410         # Field being altered
411         elif dependency[2] is not None and dependency[3] == "alter":
412             return (
413                 isinstance(operation, operations.AlterField) and
414                 operation.model_name_lower == dependency[1].lower() and
415                 operation.name_lower == dependency[2].lower()
416             )
417         # order_with_respect_to being unset for a field
418         elif dependency[2] is not None and dependency[3] == "order_wrt_unset":
419             return (
420                 isinstance(operation, operations.AlterOrderWithRespectTo) and
421                 operation.name_lower == dependency[1].lower() and
422                 (operation.order_with_respect_to or "").lower() != dependency[2].lower()
423             )
424         # Field is removed and part of an index/unique_together
425         elif dependency[2] is not None and dependency[3] == "foo_together_change":
426             return (
427                 isinstance(operation, (operations.AlterUniqueTogether,
428                                        operations.AlterIndexTogether)) and
429                 operation.name_lower == dependency[1].lower()
430             )
431         # Unknown dependency. Raise an error.
432         else:
433             raise ValueError("Can't handle dependency %r" % (dependency,))
434 
435     def add_operation(self, app_label, operation, dependencies=None, beginning=False):
436         # Dependencies are (app_label, model_name, field_name, create/delete as True/False)
437         operation._auto_deps = dependencies or []
438         if beginning:
439             self.generated_operations.setdefault(app_label, []).insert(0, operation)
440         else:
441             self.generated_operations.setdefault(app_label, []).append(operation)
442 
443     def swappable_first_key(self, item):
444         """
445         Place potential swappable models first in lists of created models (only
446         real way to solve #22783).
447         """
448         try:
449             model = self.new_apps.get_model(item[0], item[1])
450             base_names = [base.__name__ for base in model.__bases__]
451             string_version = "%s.%s" % (item[0], item[1])
452             if (
453                 model._meta.swappable or
454                 "AbstractUser" in base_names or
455                 "AbstractBaseUser" in base_names or
456                 settings.AUTH_USER_MODEL.lower() == string_version.lower()
457             ):
458                 return ("___" + item[0], "___" + item[1])
459         except LookupError:
460             pass
461         return item
462 
463     def generate_renamed_models(self):
464         """
465         Find any renamed models, generate the operations for them, and remove
466         the old entry from the model lists. Must be run before other
467         model-level generation.
468         """
469         self.renamed_models = {}
470         self.renamed_models_rel = {}
471         added_models = self.new_model_keys - self.old_model_keys
472         for app_label, model_name in sorted(added_models):
473             model_state = self.to_state.models[app_label, model_name]
474             model_fields_def = self.only_relation_agnostic_fields(model_state.fields)
475 
476             removed_models = self.old_model_keys - self.new_model_keys
477             for rem_app_label, rem_model_name in removed_models:
478                 if rem_app_label == app_label:
479                     rem_model_state = self.from_state.models[rem_app_label, rem_model_name]
480                     rem_model_fields_def = self.only_relation_agnostic_fields(rem_model_state.fields)
481                     if model_fields_def == rem_model_fields_def:
482                         if self.questioner.ask_rename_model(rem_model_state, model_state):
483                             model_opts = self.new_apps.get_model(app_label, model_name)._meta
484                             dependencies = []
485                             for field in model_opts.get_fields():
486                                 if field.is_relation:
487                                     dependencies.extend(self._get_dependencies_for_foreign_key(field))
488                             self.add_operation(
489                                 app_label,
490                                 operations.RenameModel(
491                                     old_name=rem_model_state.name,
492                                     new_name=model_state.name,
493                                 ),
494                                 dependencies=dependencies,
495                             )
496                             self.renamed_models[app_label, model_name] = rem_model_name
497                             renamed_models_rel_key = '%s.%s' % (
498                                 rem_model_state.app_label,
499                                 rem_model_state.name_lower,
500                             )
501                             self.renamed_models_rel[renamed_models_rel_key] = '%s.%s' % (
502                                 model_state.app_label,
503                                 model_state.name_lower,
504                             )
505                             self.old_model_keys.remove((rem_app_label, rem_model_name))
506                             self.old_model_keys.add((app_label, model_name))
507                             break
508 
509     def generate_created_models(self):
510         """
511         Find all new models (both managed and unmanaged) and make create
512         operations for them as well as separate operations to create any
513         foreign key or M2M relationships (these are optimized later, if
514         possible).
515 
516         Defer any model options that refer to collections of fields that might
517         be deferred (e.g. unique_together, index_together).
518         """
519         old_keys = self.old_model_keys | self.old_unmanaged_keys
520         added_models = self.new_model_keys - old_keys
521         added_unmanaged_models = self.new_unmanaged_keys - old_keys
522         all_added_models = chain(
523             sorted(added_models, key=self.swappable_first_key, reverse=True),
524             sorted(added_unmanaged_models, key=self.swappable_first_key, reverse=True)
525         )
526         for app_label, model_name in all_added_models:
527             model_state = self.to_state.models[app_label, model_name]
528             model_opts = self.new_apps.get_model(app_label, model_name)._meta
529             # Gather related fields
530             related_fields = {}
531             primary_key_rel = None
532             for field in model_opts.local_fields:
533                 if field.remote_field:
534                     if field.remote_field.model:
535                         if field.primary_key:
536                             primary_key_rel = field.remote_field.model
537                         elif not field.remote_field.parent_link:
538                             related_fields[field.name] = field
539                     # through will be none on M2Ms on swapped-out models;
540                     # we can treat lack of through as auto_created=True, though.
541                     if (getattr(field.remote_field, "through", None) and
542                             not field.remote_field.through._meta.auto_created):
543                         related_fields[field.name] = field
544             for field in model_opts.local_many_to_many:
545                 if field.remote_field.model:
546                     related_fields[field.name] = field
547                 if getattr(field.remote_field, "through", None) and not field.remote_field.through._meta.auto_created:
548                     related_fields[field.name] = field
549             # Are there indexes/unique|index_together to defer?
550             indexes = model_state.options.pop('indexes')
551             constraints = model_state.options.pop('constraints')
552             unique_together = model_state.options.pop('unique_together', None)
553             index_together = model_state.options.pop('index_together', None)
554             order_with_respect_to = model_state.options.pop('order_with_respect_to', None)
555             # Depend on the deletion of any possible proxy version of us
556             dependencies = [
557                 (app_label, model_name, None, False),
558             ]
559             # Depend on all bases
560             for base in model_state.bases:
561                 if isinstance(base, str) and "." in base:
562                     base_app_label, base_name = base.split(".", 1)
563                     dependencies.append((base_app_label, base_name, None, True))
564                     # Depend on the removal of base fields if the new model has
565                     # a field with the same name.
566                     old_base_model_state = self.from_state.models.get((base_app_label, base_name))
567                     new_base_model_state = self.to_state.models.get((base_app_label, base_name))
568                     if old_base_model_state and new_base_model_state:
569                         removed_base_fields = set(old_base_model_state.fields).difference(
570                             new_base_model_state.fields,
571                         ).intersection(model_state.fields)
572                         for removed_base_field in removed_base_fields:
573                             dependencies.append((base_app_label, base_name, removed_base_field, False))
574             # Depend on the other end of the primary key if it's a relation
575             if primary_key_rel:
576                 dependencies.append((
577                     primary_key_rel._meta.app_label,
578                     primary_key_rel._meta.object_name,
579                     None,
580                     True
581                 ))
582             # Generate creation operation
583             self.add_operation(
584                 app_label,
585                 operations.CreateModel(
586                     name=model_state.name,
587                     fields=[d for d in model_state.fields.items() if d[0] not in related_fields],
588                     options=model_state.options,
589                     bases=model_state.bases,
590                     managers=model_state.managers,
591                 ),
592                 dependencies=dependencies,
593                 beginning=True,
594             )
595 
596             # Don't add operations which modify the database for unmanaged models
597             if not model_opts.managed:
598                 continue
599 
600             # Generate operations for each related field
601             for name, field in sorted(related_fields.items()):
602                 dependencies = self._get_dependencies_for_foreign_key(field)
603                 # Depend on our own model being created
604                 dependencies.append((app_label, model_name, None, True))
605                 # Make operation
606                 self.add_operation(
607                     app_label,
608                     operations.AddField(
609                         model_name=model_name,
610                         name=name,
611                         field=field,
612                     ),
613                     dependencies=list(set(dependencies)),
614                 )
615             # Generate other opns
616             related_dependencies = [
617                 (app_label, model_name, name, True)
618                 for name in sorted(related_fields)
619             ]
620             related_dependencies.append((app_label, model_name, None, True))
621             for index in indexes:
622                 self.add_operation(
623                     app_label,
624                     operations.AddIndex(
625                         model_name=model_name,
626                         index=index,
627                     ),
628                     dependencies=related_dependencies,
629                 )
630             for constraint in constraints:
631                 self.add_operation(
632                     app_label,
633                     operations.AddConstraint(
634                         model_name=model_name,
635                         constraint=constraint,
636                     ),
637                     dependencies=related_dependencies,
638                 )
639             if unique_together:
640                 self.add_operation(
641                     app_label,
642                     operations.AlterUniqueTogether(
643                         name=model_name,
644                         unique_together=unique_together,
645                     ),
646                     dependencies=related_dependencies
647                 )
648             if index_together:
649                 self.add_operation(
650                     app_label,
651                     operations.AlterIndexTogether(
652                         name=model_name,
653                         index_together=index_together,
654                     ),
655                     dependencies=related_dependencies
656                 )
657             if order_with_respect_to:
658                 self.add_operation(
659                     app_label,
660                     operations.AlterOrderWithRespectTo(
661                         name=model_name,
662                         order_with_respect_to=order_with_respect_to,
663                     ),
664                     dependencies=[
665                         (app_label, model_name, order_with_respect_to, True),
666                         (app_label, model_name, None, True),
667                     ]
668                 )
669 
670             # Fix relationships if the model changed from a proxy model to a
671             # concrete model.
672             if (app_label, model_name) in self.old_proxy_keys:
673                 for related_object in model_opts.related_objects:
674                     self.add_operation(
675                         related_object.related_model._meta.app_label,
676                         operations.AlterField(
677                             model_name=related_object.related_model._meta.object_name,
678                             name=related_object.field.name,
679                             field=related_object.field,
680                         ),
681                         dependencies=[(app_label, model_name, None, True)],
682                     )
683 
684     def generate_created_proxies(self):
685         """
686         Make CreateModel statements for proxy models. Use the same statements
687         as that way there's less code duplication, but for proxy models it's
688         safe to skip all the pointless field stuff and chuck out an operation.
689         """
690         added = self.new_proxy_keys - self.old_proxy_keys
691         for app_label, model_name in sorted(added):
692             model_state = self.to_state.models[app_label, model_name]
693             assert model_state.options.get("proxy")
694             # Depend on the deletion of any possible non-proxy version of us
695             dependencies = [
696                 (app_label, model_name, None, False),
697             ]
698             # Depend on all bases
699             for base in model_state.bases:
700                 if isinstance(base, str) and "." in base:
701                     base_app_label, base_name = base.split(".", 1)
702                     dependencies.append((base_app_label, base_name, None, True))
703             # Generate creation operation
704             self.add_operation(
705                 app_label,
706                 operations.CreateModel(
707                     name=model_state.name,
708                     fields=[],
709                     options=model_state.options,
710                     bases=model_state.bases,
711                     managers=model_state.managers,
712                 ),
713                 # Depend on the deletion of any possible non-proxy version of us
714                 dependencies=dependencies,
715             )
716 
717     def generate_deleted_models(self):
718         """
719         Find all deleted models (managed and unmanaged) and make delete
720         operations for them as well as separate operations to delete any
721         foreign key or M2M relationships (these are optimized later, if
722         possible).
723 
724         Also bring forward removal of any model options that refer to
725         collections of fields - the inverse of generate_created_models().
726         """
727         new_keys = self.new_model_keys | self.new_unmanaged_keys
728         deleted_models = self.old_model_keys - new_keys
729         deleted_unmanaged_models = self.old_unmanaged_keys - new_keys
730         all_deleted_models = chain(sorted(deleted_models), sorted(deleted_unmanaged_models))
731         for app_label, model_name in all_deleted_models:
732             model_state = self.from_state.models[app_label, model_name]
733             model = self.old_apps.get_model(app_label, model_name)
734             # Gather related fields
735             related_fields = {}
736             for field in model._meta.local_fields:
737                 if field.remote_field:
738                     if field.remote_field.model:
739                         related_fields[field.name] = field
740                     # through will be none on M2Ms on swapped-out models;
741                     # we can treat lack of through as auto_created=True, though.
742                     if (getattr(field.remote_field, "through", None) and
743                             not field.remote_field.through._meta.auto_created):
744                         related_fields[field.name] = field
745             for field in model._meta.local_many_to_many:
746                 if field.remote_field.model:
747                     related_fields[field.name] = field
748                 if getattr(field.remote_field, "through", None) and not field.remote_field.through._meta.auto_created:
749                     related_fields[field.name] = field
750             # Generate option removal first
751             unique_together = model_state.options.pop('unique_together', None)
752             index_together = model_state.options.pop('index_together', None)
753             if unique_together:
754                 self.add_operation(
755                     app_label,
756                     operations.AlterUniqueTogether(
757                         name=model_name,
758                         unique_together=None,
759                     )
760                 )
761             if index_together:
762                 self.add_operation(
763                     app_label,
764                     operations.AlterIndexTogether(
765                         name=model_name,
766                         index_together=None,
767                     )
768                 )
769             # Then remove each related field
770             for name in sorted(related_fields):
771                 self.add_operation(
772                     app_label,
773                     operations.RemoveField(
774                         model_name=model_name,
775                         name=name,
776                     )
777                 )
778             # Finally, remove the model.
779             # This depends on both the removal/alteration of all incoming fields
780             # and the removal of all its own related fields, and if it's
781             # a through model the field that references it.
782             dependencies = []
783             for related_object in model._meta.related_objects:
784                 related_object_app_label = related_object.related_model._meta.app_label
785                 object_name = related_object.related_model._meta.object_name
786                 field_name = related_object.field.name
787                 dependencies.append((related_object_app_label, object_name, field_name, False))
788                 if not related_object.many_to_many:
789                     dependencies.append((related_object_app_label, object_name, field_name, "alter"))
790 
791             for name in sorted(related_fields):
792                 dependencies.append((app_label, model_name, name, False))
793             # We're referenced in another field's through=
794             through_user = self.through_users.get((app_label, model_state.name_lower))
795             if through_user:
796                 dependencies.append((through_user[0], through_user[1], through_user[2], False))
797             # Finally, make the operation, deduping any dependencies
798             self.add_operation(
799                 app_label,
800                 operations.DeleteModel(
801                     name=model_state.name,
802                 ),
803                 dependencies=list(set(dependencies)),
804             )
805 
806     def generate_deleted_proxies(self):
807         """Make DeleteModel options for proxy models."""
808         deleted = self.old_proxy_keys - self.new_proxy_keys
809         for app_label, model_name in sorted(deleted):
810             model_state = self.from_state.models[app_label, model_name]
811             assert model_state.options.get("proxy")
812             self.add_operation(
813                 app_label,
814                 operations.DeleteModel(
815                     name=model_state.name,
816                 ),
817             )
818 
819     def generate_renamed_fields(self):
820         """Work out renamed fields."""
821         self.renamed_fields = {}
822         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):
823             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
824             old_model_state = self.from_state.models[app_label, old_model_name]
825             field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)
826             # Scan to see if this is actually a rename!
827             field_dec = self.deep_deconstruct(field)
828             for rem_app_label, rem_model_name, rem_field_name in sorted(self.old_field_keys - self.new_field_keys):
829                 if rem_app_label == app_label and rem_model_name == model_name:
830                     old_field = old_model_state.fields[rem_field_name]
831                     old_field_dec = self.deep_deconstruct(old_field)
832                     if field.remote_field and field.remote_field.model and 'to' in old_field_dec[2]:
833                         old_rel_to = old_field_dec[2]['to']
834                         if old_rel_to in self.renamed_models_rel:
835                             old_field_dec[2]['to'] = self.renamed_models_rel[old_rel_to]
836                     old_field.set_attributes_from_name(rem_field_name)
837                     old_db_column = old_field.get_attname_column()[1]
838                     if (old_field_dec == field_dec or (
839                             # Was the field renamed and db_column equal to the
840                             # old field's column added?
841                             old_field_dec[0:2] == field_dec[0:2] and
842                             dict(old_field_dec[2], db_column=old_db_column) == field_dec[2])):
843                         if self.questioner.ask_rename(model_name, rem_field_name, field_name, field):
844                             self.add_operation(
845                                 app_label,
846                                 operations.RenameField(
847                                     model_name=model_name,
848                                     old_name=rem_field_name,
849                                     new_name=field_name,
850                                 )
851                             )
852                             self.old_field_keys.remove((rem_app_label, rem_model_name, rem_field_name))
853                             self.old_field_keys.add((app_label, model_name, field_name))
854                             self.renamed_fields[app_label, model_name, field_name] = rem_field_name
855                             break
856 
857     def generate_added_fields(self):
858         """Make AddField operations."""
859         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):
860             self._generate_added_field(app_label, model_name, field_name)
861 
862     def _generate_added_field(self, app_label, model_name, field_name):
863         field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)
864         # Fields that are foreignkeys/m2ms depend on stuff
865         dependencies = []
866         if field.remote_field and field.remote_field.model:
867             dependencies.extend(self._get_dependencies_for_foreign_key(field))
868         # You can't just add NOT NULL fields with no default or fields
869         # which don't allow empty strings as default.
870         time_fields = (models.DateField, models.DateTimeField, models.TimeField)
871         preserve_default = (
872             field.null or field.has_default() or field.many_to_many or
873             (field.blank and field.empty_strings_allowed) or
874             (isinstance(field, time_fields) and field.auto_now)
875         )
876         if not preserve_default:
877             field = field.clone()
878             if isinstance(field, time_fields) and field.auto_now_add:
879                 field.default = self.questioner.ask_auto_now_add_addition(field_name, model_name)
880             else:
881                 field.default = self.questioner.ask_not_null_addition(field_name, model_name)
882         self.add_operation(
883             app_label,
884             operations.AddField(
885                 model_name=model_name,
886                 name=field_name,
887                 field=field,
888                 preserve_default=preserve_default,
889             ),
890             dependencies=dependencies,
891         )
892 
893     def generate_removed_fields(self):
894         """Make RemoveField operations."""
895         for app_label, model_name, field_name in sorted(self.old_field_keys - self.new_field_keys):
896             self._generate_removed_field(app_label, model_name, field_name)
897 
898     def _generate_removed_field(self, app_label, model_name, field_name):
899         self.add_operation(
900             app_label,
901             operations.RemoveField(
902                 model_name=model_name,
903                 name=field_name,
904             ),
905             # We might need to depend on the removal of an
906             # order_with_respect_to or index/unique_together operation;
907             # this is safely ignored if there isn't one
908             dependencies=[
909                 (app_label, model_name, field_name, "order_wrt_unset"),
910                 (app_label, model_name, field_name, "foo_together_change"),
911             ],
912         )
913 
914     def generate_altered_fields(self):
915         """
916         Make AlterField operations, or possibly RemovedField/AddField if alter
917         isn's possible.
918         """
919         for app_label, model_name, field_name in sorted(self.old_field_keys & self.new_field_keys):
920             # Did the field change?
921             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
922             old_field_name = self.renamed_fields.get((app_label, model_name, field_name), field_name)
923             old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(old_field_name)
924             new_field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)
925             dependencies = []
926             # Implement any model renames on relations; these are handled by RenameModel
927             # so we need to exclude them from the comparison
928             if hasattr(new_field, "remote_field") and getattr(new_field.remote_field, "model", None):
929                 rename_key = (
930                     new_field.remote_field.model._meta.app_label,
931                     new_field.remote_field.model._meta.model_name,
932                 )
933                 if rename_key in self.renamed_models:
934                     new_field.remote_field.model = old_field.remote_field.model
935                 # Handle ForeignKey which can only have a single to_field.
936                 remote_field_name = getattr(new_field.remote_field, 'field_name', None)
937                 if remote_field_name:
938                     to_field_rename_key = rename_key + (remote_field_name,)
939                     if to_field_rename_key in self.renamed_fields:
940                         # Repoint both model and field name because to_field
941                         # inclusion in ForeignKey.deconstruct() is based on
942                         # both.
943                         new_field.remote_field.model = old_field.remote_field.model
944                         new_field.remote_field.field_name = old_field.remote_field.field_name
945                 # Handle ForeignObjects which can have multiple from_fields/to_fields.
946                 from_fields = getattr(new_field, 'from_fields', None)
947                 if from_fields:
948                     from_rename_key = (app_label, model_name)
949                     new_field.from_fields = tuple([
950                         self.renamed_fields.get(from_rename_key + (from_field,), from_field)
951                         for from_field in from_fields
952                     ])
953                     new_field.to_fields = tuple([
954                         self.renamed_fields.get(rename_key + (to_field,), to_field)
955                         for to_field in new_field.to_fields
956                     ])
957                 dependencies.extend(self._get_dependencies_for_foreign_key(new_field))
958             if hasattr(new_field, "remote_field") and getattr(new_field.remote_field, "through", None):
959                 rename_key = (
960                     new_field.remote_field.through._meta.app_label,
961                     new_field.remote_field.through._meta.model_name,
962                 )
963                 if rename_key in self.renamed_models:
964                     new_field.remote_field.through = old_field.remote_field.through
965             old_field_dec = self.deep_deconstruct(old_field)
966             new_field_dec = self.deep_deconstruct(new_field)
967             if old_field_dec != new_field_dec:
968                 both_m2m = old_field.many_to_many and new_field.many_to_many
969                 neither_m2m = not old_field.many_to_many and not new_field.many_to_many
970                 if both_m2m or neither_m2m:
971                     # Either both fields are m2m or neither is
972                     preserve_default = True
973                     if (old_field.null and not new_field.null and not new_field.has_default() and
974                             not new_field.many_to_many):
975                         field = new_field.clone()
976                         new_default = self.questioner.ask_not_null_alteration(field_name, model_name)
977                         if new_default is not models.NOT_PROVIDED:
978                             field.default = new_default
979                             preserve_default = False
980                     else:
981                         field = new_field
982                     self.add_operation(
983                         app_label,
984                         operations.AlterField(
985                             model_name=model_name,
986                             name=field_name,
987                             field=field,
988                             preserve_default=preserve_default,
989                         ),
990                         dependencies=dependencies,
991                     )
992                 else:
993                     # We cannot alter between m2m and concrete fields
994                     self._generate_removed_field(app_label, model_name, field_name)
995                     self._generate_added_field(app_label, model_name, field_name)
996 
997     def create_altered_indexes(self):
998         option_name = operations.AddIndex.option_name
999         for app_label, model_name in sorted(self.kept_model_keys):
1000             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
1001             old_model_state = self.from_state.models[app_label, old_model_name]
1002             new_model_state = self.to_state.models[app_label, model_name]
1003 
1004             old_indexes = old_model_state.options[option_name]
1005             new_indexes = new_model_state.options[option_name]
1006             add_idx = [idx for idx in new_indexes if idx not in old_indexes]
1007             rem_idx = [idx for idx in old_indexes if idx not in new_indexes]
1008 
1009             self.altered_indexes.update({
1010                 (app_label, model_name): {
1011                     'added_indexes': add_idx, 'removed_indexes': rem_idx,
1012                 }
1013             })
1014 
1015     def generate_added_indexes(self):
1016         for (app_label, model_name), alt_indexes in self.altered_indexes.items():
1017             for index in alt_indexes['added_indexes']:
1018                 self.add_operation(
1019                     app_label,
1020                     operations.AddIndex(
1021                         model_name=model_name,
1022                         index=index,
1023                     )
1024                 )
1025 
1026     def generate_removed_indexes(self):
1027         for (app_label, model_name), alt_indexes in self.altered_indexes.items():
1028             for index in alt_indexes['removed_indexes']:
1029                 self.add_operation(
1030                     app_label,
1031                     operations.RemoveIndex(
1032                         model_name=model_name,
1033                         name=index.name,
1034                     )
1035                 )
1036 
1037     def create_altered_constraints(self):
1038         option_name = operations.AddConstraint.option_name
1039         for app_label, model_name in sorted(self.kept_model_keys):
1040             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
1041             old_model_state = self.from_state.models[app_label, old_model_name]
1042             new_model_state = self.to_state.models[app_label, model_name]
1043 
1044             old_constraints = old_model_state.options[option_name]
1045             new_constraints = new_model_state.options[option_name]
1046             add_constraints = [c for c in new_constraints if c not in old_constraints]
1047             rem_constraints = [c for c in old_constraints if c not in new_constraints]
1048 
1049             self.altered_constraints.update({
1050                 (app_label, model_name): {
1051                     'added_constraints': add_constraints, 'removed_constraints': rem_constraints,
1052                 }
1053             })
1054 
1055     def generate_added_constraints(self):
1056         for (app_label, model_name), alt_constraints in self.altered_constraints.items():
1057             for constraint in alt_constraints['added_constraints']:
1058                 self.add_operation(
1059                     app_label,
1060                     operations.AddConstraint(
1061                         model_name=model_name,
1062                         constraint=constraint,
1063                     )
1064                 )
1065 
1066     def generate_removed_constraints(self):
1067         for (app_label, model_name), alt_constraints in self.altered_constraints.items():
1068             for constraint in alt_constraints['removed_constraints']:
1069                 self.add_operation(
1070                     app_label,
1071                     operations.RemoveConstraint(
1072                         model_name=model_name,
1073                         name=constraint.name,
1074                     )
1075                 )
1076 
1077     def _get_dependencies_for_foreign_key(self, field):
1078         # Account for FKs to swappable models
1079         swappable_setting = getattr(field, 'swappable_setting', None)
1080         if swappable_setting is not None:
1081             dep_app_label = "__setting__"
1082             dep_object_name = swappable_setting
1083         else:
1084             dep_app_label = field.remote_field.model._meta.app_label
1085             dep_object_name = field.remote_field.model._meta.object_name
1086         dependencies = [(dep_app_label, dep_object_name, None, True)]
1087         if getattr(field.remote_field, "through", None) and not field.remote_field.through._meta.auto_created:
1088             dependencies.append((
1089                 field.remote_field.through._meta.app_label,
1090                 field.remote_field.through._meta.object_name,
1091                 None,
1092                 True,
1093             ))
1094         return dependencies
1095 
1096     def _generate_altered_foo_together(self, operation):
1097         option_name = operation.option_name
1098         for app_label, model_name in sorted(self.kept_model_keys):
1099             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
1100             old_model_state = self.from_state.models[app_label, old_model_name]
1101             new_model_state = self.to_state.models[app_label, model_name]
1102 
1103             # We run the old version through the field renames to account for those
1104             old_value = old_model_state.options.get(option_name)
1105             old_value = {
1106                 tuple(
1107                     self.renamed_fields.get((app_label, model_name, n), n)
1108                     for n in unique
1109                 )
1110                 for unique in old_value
1111             } if old_value else set()
1112 
1113             new_value = new_model_state.options.get(option_name)
1114             new_value = set(new_value) if new_value else set()
1115 
1116             if old_value != new_value:
1117                 dependencies = []
1118                 for foo_togethers in new_value:
1119                     for field_name in foo_togethers:
1120                         field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)
1121                         if field.remote_field and field.remote_field.model:
1122                             dependencies.extend(self._get_dependencies_for_foreign_key(field))
1123 
1124                 self.add_operation(
1125                     app_label,
1126                     operation(
1127                         name=model_name,
1128                         **{option_name: new_value}
1129                     ),
1130                     dependencies=dependencies,
1131                 )
1132 
1133     def generate_altered_unique_together(self):
1134         self._generate_altered_foo_together(operations.AlterUniqueTogether)
1135 
1136     def generate_altered_index_together(self):
1137         self._generate_altered_foo_together(operations.AlterIndexTogether)
1138 
1139     def generate_altered_db_table(self):
1140         models_to_check = self.kept_model_keys.union(self.kept_proxy_keys, self.kept_unmanaged_keys)
1141         for app_label, model_name in sorted(models_to_check):
1142             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
1143             old_model_state = self.from_state.models[app_label, old_model_name]
1144             new_model_state = self.to_state.models[app_label, model_name]
1145             old_db_table_name = old_model_state.options.get('db_table')
1146             new_db_table_name = new_model_state.options.get('db_table')
1147             if old_db_table_name != new_db_table_name:
1148                 self.add_operation(
1149                     app_label,
1150                     operations.AlterModelTable(
1151                         name=model_name,
1152                         table=new_db_table_name,
1153                     )
1154                 )
1155 
1156     def generate_altered_options(self):
1157         """
1158         Work out if any non-schema-affecting options have changed and make an
1159         operation to represent them in state changes (in case Python code in
1160         migrations needs them).
1161         """
1162         models_to_check = self.kept_model_keys.union(
1163             self.kept_proxy_keys,
1164             self.kept_unmanaged_keys,
1165             # unmanaged converted to managed
1166             self.old_unmanaged_keys & self.new_model_keys,
1167             # managed converted to unmanaged
1168             self.old_model_keys & self.new_unmanaged_keys,
1169         )
1170 
1171         for app_label, model_name in sorted(models_to_check):
1172             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
1173             old_model_state = self.from_state.models[app_label, old_model_name]
1174             new_model_state = self.to_state.models[app_label, model_name]
1175             old_options = {
1176                 key: value for key, value in old_model_state.options.items()
1177                 if key in AlterModelOptions.ALTER_OPTION_KEYS
1178             }
1179             new_options = {
1180                 key: value for key, value in new_model_state.options.items()
1181                 if key in AlterModelOptions.ALTER_OPTION_KEYS
1182             }
1183             if old_options != new_options:
1184                 self.add_operation(
1185                     app_label,
1186                     operations.AlterModelOptions(
1187                         name=model_name,
1188                         options=new_options,
1189                     )
1190                 )
1191 
1192     def generate_altered_order_with_respect_to(self):
1193         for app_label, model_name in sorted(self.kept_model_keys):
1194             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
1195             old_model_state = self.from_state.models[app_label, old_model_name]
1196             new_model_state = self.to_state.models[app_label, model_name]
1197             if (old_model_state.options.get("order_with_respect_to") !=
1198                     new_model_state.options.get("order_with_respect_to")):
1199                 # Make sure it comes second if we're adding
1200                 # (removal dependency is part of RemoveField)
1201                 dependencies = []
1202                 if new_model_state.options.get("order_with_respect_to"):
1203                     dependencies.append((
1204                         app_label,
1205                         model_name,
1206                         new_model_state.options["order_with_respect_to"],
1207                         True,
1208                     ))
1209                 # Actually generate the operation
1210                 self.add_operation(
1211                     app_label,
1212                     operations.AlterOrderWithRespectTo(
1213                         name=model_name,
1214                         order_with_respect_to=new_model_state.options.get('order_with_respect_to'),
1215                     ),
1216                     dependencies=dependencies,
1217                 )
1218 
1219     def generate_altered_managers(self):
1220         for app_label, model_name in sorted(self.kept_model_keys):
1221             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
1222             old_model_state = self.from_state.models[app_label, old_model_name]
1223             new_model_state = self.to_state.models[app_label, model_name]
1224             if old_model_state.managers != new_model_state.managers:
1225                 self.add_operation(
1226                     app_label,
1227                     operations.AlterModelManagers(
1228                         name=model_name,
1229                         managers=new_model_state.managers,
1230                     )
1231                 )
1232 
1233     def arrange_for_graph(self, changes, graph, migration_name=None):
1234         """
1235         Take a result from changes() and a MigrationGraph, and fix the names
1236         and dependencies of the changes so they extend the graph from the leaf
1237         nodes for each app.
1238         """
1239         leaves = graph.leaf_nodes()
1240         name_map = {}
1241         for app_label, migrations in list(changes.items()):
1242             if not migrations:
1243                 continue
1244             # Find the app label's current leaf node
1245             app_leaf = None
1246             for leaf in leaves:
1247                 if leaf[0] == app_label:
1248                     app_leaf = leaf
1249                     break
1250             # Do they want an initial migration for this app?
1251             if app_leaf is None and not self.questioner.ask_initial(app_label):
1252                 # They don't.
1253                 for migration in migrations:
1254                     name_map[(app_label, migration.name)] = (app_label, "__first__")
1255                 del changes[app_label]
1256                 continue
1257             # Work out the next number in the sequence
1258             if app_leaf is None:
1259                 next_number = 1
1260             else:
1261                 next_number = (self.parse_number(app_leaf[1]) or 0) + 1
1262             # Name each migration
1263             for i, migration in enumerate(migrations):
1264                 if i == 0 and app_leaf:
1265                     migration.dependencies.append(app_leaf)
1266                 new_name_parts = ['%04i' % next_number]
1267                 if migration_name:
1268                     new_name_parts.append(migration_name)
1269                 elif i == 0 and not app_leaf:
1270                     new_name_parts.append('initial')
1271                 else:
1272                     new_name_parts.append(migration.suggest_name()[:100])
1273                 new_name = '_'.join(new_name_parts)
1274                 name_map[(app_label, migration.name)] = (app_label, new_name)
1275                 next_number += 1
1276                 migration.name = new_name
1277         # Now fix dependencies
1278         for migrations in changes.values():
1279             for migration in migrations:
1280                 migration.dependencies = [name_map.get(d, d) for d in migration.dependencies]
1281         return changes
1282 
1283     def _trim_to_apps(self, changes, app_labels):
1284         """
1285         Take changes from arrange_for_graph() and set of app labels, and return
1286         a modified set of changes which trims out as many migrations that are
1287         not in app_labels as possible. Note that some other migrations may
1288         still be present as they may be required dependencies.
1289         """
1290         # Gather other app dependencies in a first pass
1291         app_dependencies = {}
1292         for app_label, migrations in changes.items():
1293             for migration in migrations:
1294                 for dep_app_label, name in migration.dependencies:
1295                     app_dependencies.setdefault(app_label, set()).add(dep_app_label)
1296         required_apps = set(app_labels)
1297         # Keep resolving till there's no change
1298         old_required_apps = None
1299         while old_required_apps != required_apps:
1300             old_required_apps = set(required_apps)
1301             required_apps.update(*[app_dependencies.get(app_label, ()) for app_label in required_apps])
1302         # Remove all migrations that aren't needed
1303         for app_label in list(changes):
1304             if app_label not in required_apps:
1305                 del changes[app_label]
1306         return changes
1307 
1308     @classmethod
1309     def parse_number(cls, name):
1310         """
1311         Given a migration name, try to extract a number from the beginning of
1312         it. If no number is found, return None.
1313         """
1314         match = re.match(r'^\d+', name)
1315         if match:
1316             return int(match[0])
1317         return None

</code><intended_behavior>This new or modified method should construct the name of a merge migration by considering the names of the migrations that are being merged, using a clear separator to distinguish between the component names.</intended_behavior>, <file>django/db/migrations/writer.py</file>
<class>None</class>
<method>None</method>
<code>
1 
2 import os
3 import re
4 from importlib import import_module
5 
6 from django import get_version
7 from django.apps import apps
8 # SettingsReference imported for backwards compatibility in Django 2.2.
9 from django.conf import SettingsReference  # NOQA
10 from django.db import migrations
11 from django.db.migrations.loader import MigrationLoader
12 from django.db.migrations.serializer import Serializer, serializer_factory
13 from django.utils.inspect import get_func_args
14 from django.utils.module_loading import module_dir
15 from django.utils.timezone import now
16 
17 
18 class OperationWriter:
19     def __init__(self, operation, indentation=2):
20         self.operation = operation
21         self.buff = []
22         self.indentation = indentation
23 
24     def serialize(self):
25 
26         def _write(_arg_name, _arg_value):
27             if (_arg_name in self.operation.serialization_expand_args and
28                     isinstance(_arg_value, (list, tuple, dict))):
29                 if isinstance(_arg_value, dict):
30                     self.feed('%s={' % _arg_name)
31                     self.indent()
32                     for key, value in _arg_value.items():
33                         key_string, key_imports = MigrationWriter.serialize(key)
34                         arg_string, arg_imports = MigrationWriter.serialize(value)
35                         args = arg_string.splitlines()
36                         if len(args) > 1:
37                             self.feed('%s: %s' % (key_string, args[0]))
38                             for arg in args[1:-1]:
39                                 self.feed(arg)
40                             self.feed('%s,' % args[-1])
41                         else:
42                             self.feed('%s: %s,' % (key_string, arg_string))
43                         imports.update(key_imports)
44                         imports.update(arg_imports)
45                     self.unindent()
46                     self.feed('},')
47                 else:
48                     self.feed('%s=[' % _arg_name)
49                     self.indent()
50                     for item in _arg_value:
51                         arg_string, arg_imports = MigrationWriter.serialize(item)
52                         args = arg_string.splitlines()
53                         if len(args) > 1:
54                             for arg in args[:-1]:
55                                 self.feed(arg)
56                             self.feed('%s,' % args[-1])
57                         else:
58                             self.feed('%s,' % arg_string)
59                         imports.update(arg_imports)
60                     self.unindent()
61                     self.feed('],')
62             else:
63                 arg_string, arg_imports = MigrationWriter.serialize(_arg_value)
64                 args = arg_string.splitlines()
65                 if len(args) > 1:
66                     self.feed('%s=%s' % (_arg_name, args[0]))
67                     for arg in args[1:-1]:
68                         self.feed(arg)
69                     self.feed('%s,' % args[-1])
70                 else:
71                     self.feed('%s=%s,' % (_arg_name, arg_string))
72                 imports.update(arg_imports)
73 
74         imports = set()
75         name, args, kwargs = self.operation.deconstruct()
76         operation_args = get_func_args(self.operation.__init__)
77 
78         # See if this operation is in django.db.migrations. If it is,
79         # We can just use the fact we already have that imported,
80         # otherwise, we need to add an import for the operation class.
81         if getattr(migrations, name, None) == self.operation.__class__:
82             self.feed('migrations.%s(' % name)
83         else:
84             imports.add('import %s' % (self.operation.__class__.__module__))
85             self.feed('%s.%s(' % (self.operation.__class__.__module__, name))
86 
87         self.indent()
88 
89         for i, arg in enumerate(args):
90             arg_value = arg
91             arg_name = operation_args[i]
92             _write(arg_name, arg_value)
93 
94         i = len(args)
95         # Only iterate over remaining arguments
96         for arg_name in operation_args[i:]:
97             if arg_name in kwargs:  # Don't sort to maintain signature order
98                 arg_value = kwargs[arg_name]
99                 _write(arg_name, arg_value)
100 
101         self.unindent()
102         self.feed('),')
103         return self.render(), imports
104 
105     def indent(self):
106         self.indentation += 1
107 
108     def unindent(self):
109         self.indentation -= 1
110 
111     def feed(self, line):
112         self.buff.append(' ' * (self.indentation * 4) + line)
113 
114     def render(self):
115         return '\n'.join(self.buff)
116 
117 
118 class MigrationWriter:
119     """
120     Take a Migration instance and is able to produce the contents
121     of the migration file from it.
122     """
123 
124     def __init__(self, migration, include_header=True):
125         self.migration = migration
126         self.include_header = include_header
127         self.needs_manual_porting = False
128 
129     def as_string(self):
130         """Return a string of the file contents."""
131         items = {
132             "replaces_str": "",
133             "initial_str": "",
134         }
135 
136         imports = set()
137 
138         # Deconstruct operations
139         operations = []
140         for operation in self.migration.operations:
141             operation_string, operation_imports = OperationWriter(operation).serialize()
142             imports.update(operation_imports)
143             operations.append(operation_string)
144         items["operations"] = "\n".join(operations) + "\n" if operations else ""
145 
146         # Format dependencies and write out swappable dependencies right
147         dependencies = []
148         for dependency in self.migration.dependencies:
149             if dependency[0] == "__setting__":
150                 dependencies.append("        migrations.swappable_dependency(settings.%s)," % dependency[1])
151                 imports.add("from django.conf import settings")
152             else:
153                 dependencies.append("        %s," % self.serialize(dependency)[0])
154         items["dependencies"] = "\n".join(dependencies) + "\n" if dependencies else ""
155 
156         # Format imports nicely, swapping imports of functions from migration files
157         # for comments
158         migration_imports = set()
159         for line in list(imports):
160             if re.match(r"^import (.*)\.\d+[^\s]*$", line):
161                 migration_imports.add(line.split("import")[1].strip())
162                 imports.remove(line)
163                 self.needs_manual_porting = True
164 
165         # django.db.migrations is always used, but models import may not be.
166         # If models import exists, merge it with migrations import.
167         if "from django.db import models" in imports:
168             imports.discard("from django.db import models")
169             imports.add("from django.db import migrations, models")
170         else:
171             imports.add("from django.db import migrations")
172 
173         # Sort imports by the package / module to be imported (the part after
174         # "from" in "from ... import ..." or after "import" in "import ...").
175         sorted_imports = sorted(imports, key=lambda i: i.split()[1])
176         items["imports"] = "\n".join(sorted_imports) + "\n" if imports else ""
177         if migration_imports:
178             items["imports"] += (
179                 "\n\n# Functions from the following migrations need manual "
180                 "copying.\n# Move them and any dependencies into this file, "
181                 "then update the\n# RunPython operations to refer to the local "
182                 "versions:\n# %s"
183             ) % "\n# ".join(sorted(migration_imports))
184         # If there's a replaces, make a string for it
185         if self.migration.replaces:
186             items['replaces_str'] = "\n    replaces = %s\n" % self.serialize(self.migration.replaces)[0]
187         # Hinting that goes into comment
188         if self.include_header:
189             items['migration_header'] = MIGRATION_HEADER_TEMPLATE % {
190                 'version': get_version(),
191                 'timestamp': now().strftime("%Y-%m-%d %H:%M"),
192             }
193         else:
194             items['migration_header'] = ""
195 
196         if self.migration.initial:
197             items['initial_str'] = "\n    initial = True\n"
198 
199         return MIGRATION_TEMPLATE % items
200 
201     @property
202     def basedir(self):
203         migrations_package_name, _ = MigrationLoader.migrations_module(self.migration.app_label)
204 
205         if migrations_package_name is None:
206             raise ValueError(
207                 "Django can't create migrations for app '%s' because "
208                 "migrations have been disabled via the MIGRATION_MODULES "
209                 "setting." % self.migration.app_label
210             )
211 
212         # See if we can import the migrations module directly
213         try:
214             migrations_module = import_module(migrations_package_name)
215         except ImportError:
216             pass
217         else:
218             try:
219                 return module_dir(migrations_module)
220             except ValueError:
221                 pass
222 
223         # Alright, see if it's a direct submodule of the app
224         app_config = apps.get_app_config(self.migration.app_label)
225         maybe_app_name, _, migrations_package_basename = migrations_package_name.rpartition(".")
226         if app_config.name == maybe_app_name:
227             return os.path.join(app_config.path, migrations_package_basename)
228 
229         # In case of using MIGRATION_MODULES setting and the custom package
230         # doesn't exist, create one, starting from an existing package
231         existing_dirs, missing_dirs = migrations_package_name.split("."), []
232         while existing_dirs:
233             missing_dirs.insert(0, existing_dirs.pop(-1))
234             try:
235                 base_module = import_module(".".join(existing_dirs))
236             except (ImportError, ValueError):
237                 continue
238             else:
239                 try:
240                     base_dir = module_dir(base_module)
241                 except ValueError:
242                     continue
243                 else:
244                     break
245         else:
246             raise ValueError(
247                 "Could not locate an appropriate location to create "
248                 "migrations package %s. Make sure the toplevel "
249                 "package exists and can be imported." %
250                 migrations_package_name)
251 
252         final_dir = os.path.join(base_dir, *missing_dirs)
253         os.makedirs(final_dir, exist_ok=True)
254         for missing_dir in missing_dirs:
255             base_dir = os.path.join(base_dir, missing_dir)
256             with open(os.path.join(base_dir, "__init__.py"), "w"):
257                 pass
258 
259         return final_dir
260 
261     @property
262     def filename(self):
263         return "%s.py" % self.migration.name
264 
265     @property
266     def path(self):
267         return os.path.join(self.basedir, self.filename)
268 
269     @classmethod
270     def serialize(cls, value):
271         return serializer_factory(value).serialize()
272 
273     @classmethod
274     def register_serializer(cls, type_, serializer):
275         Serializer.register(type_, serializer)
276 
277     @classmethod
278     def unregister_serializer(cls, type_):
279         Serializer.unregister(type_)
280 
281 
282 MIGRATION_HEADER_TEMPLATE = """\
283 # Generated by Django %(version)s on %(timestamp)s
284 
285 """
286 
287 
288 MIGRATION_TEMPLATE = """\
289 %(migration_header)s%(imports)s
290 
291 class Migration(migrations.Migration):
292 %(replaces_str)s%(initial_str)s
293     dependencies = [
294 %(dependencies)s\
295     ]
296 
297     operations = [
298 %(operations)s\
299     ]
300 """

</code><intended_behavior>Incorporate logic in the method for generating migration filenames that checks if the migration is a merge migration and applies a naming convention including identifying information from the merged migrations.</intended_behavior>]
2025-10-17 12:05:12.139 | INFO     | Search completed. Bug locations: [<file>django/db/migrations/autodetector.py</file>
<class>MigrationAutodetector</class>
<method>None</method>
<code>
16 class MigrationAutodetector:
17     """
18     Take a pair of ProjectStates and compare them to see what the first would
19     need doing to make it match the second (the second usually being the
20     project's current state).
21 
22     Note that this naturally operates on entire projects at a time,
23     as it's likely that changes interact (for example, you can't
24     add a ForeignKey without having a migration to add the table it
25     depends on first). A user interface may offer single-app usage
26     if it wishes, with the caveat that it may not always be possible.
27     """
28 
29     def __init__(self, from_state, to_state, questioner=None):
30         self.from_state = from_state
31         self.to_state = to_state
32         self.questioner = questioner or MigrationQuestioner()
33         self.existing_apps = {app for app, model in from_state.models}
34 
35     def changes(self, graph, trim_to_apps=None, convert_apps=None, migration_name=None):
36         """
37         Main entry point to produce a list of applicable changes.
38         Take a graph to base names on and an optional set of apps
39         to try and restrict to (restriction is not guaranteed)
40         """
41         changes = self._detect_changes(convert_apps, graph)
42         changes = self.arrange_for_graph(changes, graph, migration_name)
43         if trim_to_apps:
44             changes = self._trim_to_apps(changes, trim_to_apps)
45         return changes
46 
47     def deep_deconstruct(self, obj):
48         """
49         Recursive deconstruction for a field and its arguments.
50         Used for full comparison for rename/alter; sometimes a single-level
51         deconstruction will not compare correctly.
52         """
53         if isinstance(obj, list):
54             return [self.deep_deconstruct(value) for value in obj]
55         elif isinstance(obj, tuple):
56             return tuple(self.deep_deconstruct(value) for value in obj)
57         elif isinstance(obj, dict):
58             return {
59                 key: self.deep_deconstruct(value)
60                 for key, value in obj.items()
61             }
62         elif isinstance(obj, functools.partial):
63             return (obj.func, self.deep_deconstruct(obj.args), self.deep_deconstruct(obj.keywords))
64         elif isinstance(obj, COMPILED_REGEX_TYPE):
65             return RegexObject(obj)
66         elif isinstance(obj, type):
67             # If this is a type that implements 'deconstruct' as an instance method,
68             # avoid treating this as being deconstructible itself - see #22951
69             return obj
70         elif hasattr(obj, 'deconstruct'):
71             deconstructed = obj.deconstruct()
72             if isinstance(obj, models.Field):
73                 # we have a field which also returns a name
74                 deconstructed = deconstructed[1:]
75             path, args, kwargs = deconstructed
76             return (
77                 path,
78                 [self.deep_deconstruct(value) for value in args],
79                 {
80                     key: self.deep_deconstruct(value)
81                     for key, value in kwargs.items()
82                 },
83             )
84         else:
85             return obj
86 
87     def only_relation_agnostic_fields(self, fields):
88         """
89         Return a definition of the fields that ignores field names and
90         what related fields actually relate to. Used for detecting renames (as
91         the related fields change during renames).
92         """
93         fields_def = []
94         for name, field in sorted(fields.items()):
95             deconstruction = self.deep_deconstruct(field)
96             if field.remote_field and field.remote_field.model:
97                 del deconstruction[2]['to']
98             fields_def.append(deconstruction)
99         return fields_def
100 
101     def _detect_changes(self, convert_apps=None, graph=None):
102         """
103         Return a dict of migration plans which will achieve the
104         change from from_state to to_state. The dict has app labels
105         as keys and a list of migrations as values.
106 
107         The resulting migrations aren't specially named, but the names
108         do matter for dependencies inside the set.
109 
110         convert_apps is the list of apps to convert to use migrations
111         (i.e. to make initial migrations for, in the usual case)
112 
113         graph is an optional argument that, if provided, can help improve
114         dependency generation and avoid potential circular dependencies.
115         """
116         # The first phase is generating all the operations for each app
117         # and gathering them into a big per-app list.
118         # Then go through that list, order it, and split into migrations to
119         # resolve dependencies caused by M2Ms and FKs.
120         self.generated_operations = {}
121         self.altered_indexes = {}
122         self.altered_constraints = {}
123 
124         # Prepare some old/new state and model lists, separating
125         # proxy models and ignoring unmigrated apps.
126         self.old_apps = self.from_state.concrete_apps
127         self.new_apps = self.to_state.apps
128         self.old_model_keys = set()
129         self.old_proxy_keys = set()
130         self.old_unmanaged_keys = set()
131         self.new_model_keys = set()
132         self.new_proxy_keys = set()
133         self.new_unmanaged_keys = set()
134         for al, mn in self.from_state.models:
135             model = self.old_apps.get_model(al, mn)
136             if not model._meta.managed:
137                 self.old_unmanaged_keys.add((al, mn))
138             elif al not in self.from_state.real_apps:
139                 if model._meta.proxy:
140                     self.old_proxy_keys.add((al, mn))
141                 else:
142                     self.old_model_keys.add((al, mn))
143 
144         for al, mn in self.to_state.models:
145             model = self.new_apps.get_model(al, mn)
146             if not model._meta.managed:
147                 self.new_unmanaged_keys.add((al, mn))
148             elif (
149                 al not in self.from_state.real_apps or
150                 (convert_apps and al in convert_apps)
151             ):
152                 if model._meta.proxy:
153                     self.new_proxy_keys.add((al, mn))
154                 else:
155                     self.new_model_keys.add((al, mn))
156 
157         # Renames have to come first
158         self.generate_renamed_models()
159 
160         # Prepare lists of fields and generate through model map
161         self._prepare_field_lists()
162         self._generate_through_model_map()
163 
164         # Generate non-rename model operations
165         self.generate_deleted_models()
166         self.generate_created_models()
167         self.generate_deleted_proxies()
168         self.generate_created_proxies()
169         self.generate_altered_options()
170         self.generate_altered_managers()
171 
172         # Create the altered indexes and store them in self.altered_indexes.
173         # This avoids the same computation in generate_removed_indexes()
174         # and generate_added_indexes().
175         self.create_altered_indexes()
176         self.create_altered_constraints()
177         # Generate index removal operations before field is removed
178         self.generate_removed_constraints()
179         self.generate_removed_indexes()
180         # Generate field operations
181         self.generate_renamed_fields()
182         self.generate_removed_fields()
183         self.generate_added_fields()
184         self.generate_altered_fields()
185         self.generate_altered_unique_together()
186         self.generate_altered_index_together()
187         self.generate_added_indexes()
188         self.generate_added_constraints()
189         self.generate_altered_db_table()
190         self.generate_altered_order_with_respect_to()
191 
192         self._sort_migrations()
193         self._build_migration_list(graph)
194         self._optimize_migrations()
195 
196         return self.migrations
197 
198     def _prepare_field_lists(self):
199         """
200         Prepare field lists and a list of the fields that used through models
201         in the old state so dependencies can be made from the through model
202         deletion to the field that uses it.
203         """
204         self.kept_model_keys = self.old_model_keys & self.new_model_keys
205         self.kept_proxy_keys = self.old_proxy_keys & self.new_proxy_keys
206         self.kept_unmanaged_keys = self.old_unmanaged_keys & self.new_unmanaged_keys
207         self.through_users = {}
208         self.old_field_keys = {
209             (app_label, model_name, field_name)
210             for app_label, model_name in self.kept_model_keys
211             for field_name in self.from_state.models[
212                 app_label,
213                 self.renamed_models.get((app_label, model_name), model_name)
214             ].fields
215         }
216         self.new_field_keys = {
217             (app_label, model_name, field_name)
218             for app_label, model_name in self.kept_model_keys
219             for field_name in self.to_state.models[app_label, model_name].fields
220         }
221 
222     def _generate_through_model_map(self):
223         """Through model map generation."""
224         for app_label, model_name in sorted(self.old_model_keys):
225             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
226             old_model_state = self.from_state.models[app_label, old_model_name]
227             for field_name in old_model_state.fields:
228                 old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)
229                 if (hasattr(old_field, "remote_field") and getattr(old_field.remote_field, "through", None) and
230                         not old_field.remote_field.through._meta.auto_created):
231                     through_key = (
232                         old_field.remote_field.through._meta.app_label,
233                         old_field.remote_field.through._meta.model_name,
234                     )
235                     self.through_users[through_key] = (app_label, old_model_name, field_name)
236 
237     @staticmethod
238     def _resolve_dependency(dependency):
239         """
240         Return the resolved dependency and a boolean denoting whether or not
241         it was swappable.
242         """
243         if dependency[0] != '__setting__':
244             return dependency, False
245         resolved_app_label, resolved_object_name = getattr(settings, dependency[1]).split('.')
246         return (resolved_app_label, resolved_object_name.lower()) + dependency[2:], True
247 
248     def _build_migration_list(self, graph=None):
249         """
250         Chop the lists of operations up into migrations with dependencies on
251         each other. Do this by going through an app's list of operations until
252         one is found that has an outgoing dependency that isn't in another
253         app's migration yet (hasn't been chopped off its list). Then chop off
254         the operations before it into a migration and move onto the next app.
255         If the loops completes without doing anything, there's a circular
256         dependency (which _should_ be impossible as the operations are
257         all split at this point so they can't depend and be depended on).
258         """
259         self.migrations = {}
260         num_ops = sum(len(x) for x in self.generated_operations.values())
261         chop_mode = False
262         while num_ops:
263             # On every iteration, we step through all the apps and see if there
264             # is a completed set of operations.
265             # If we find that a subset of the operations are complete we can
266             # try to chop it off from the rest and continue, but we only
267             # do this if we've already been through the list once before
268             # without any chopping and nothing has changed.
269             for app_label in sorted(self.generated_operations):
270                 chopped = []
271                 dependencies = set()
272                 for operation in list(self.generated_operations[app_label]):
273                     deps_satisfied = True
274                     operation_dependencies = set()
275                     for dep in operation._auto_deps:
276                         # Temporarily resolve the swappable dependency to
277                         # prevent circular references. While keeping the
278                         # dependency checks on the resolved model, add the
279                         # swappable dependencies.
280                         original_dep = dep
281                         dep, is_swappable_dep = self._resolve_dependency(dep)
282                         if dep[0] != app_label:
283                             # External app dependency. See if it's not yet
284                             # satisfied.
285                             for other_operation in self.generated_operations.get(dep[0], []):
286                                 if self.check_dependency(other_operation, dep):
287                                     deps_satisfied = False
288                                     break
289                             if not deps_satisfied:
290                                 break
291                             else:
292                                 if is_swappable_dep:
293                                     operation_dependencies.add((original_dep[0], original_dep[1]))
294                                 elif dep[0] in self.migrations:
295                                     operation_dependencies.add((dep[0], self.migrations[dep[0]][-1].name))
296                                 else:
297                                     # If we can't find the other app, we add a first/last dependency,
298                                     # but only if we've already been through once and checked everything
299                                     if chop_mode:
300                                         # If the app already exists, we add a dependency on the last migration,
301                                         # as we don't know which migration contains the target field.
302                                         # If it's not yet migrated or has no migrations, we use __first__
303                                         if graph and graph.leaf_nodes(dep[0]):
304                                             operation_dependencies.add(graph.leaf_nodes(dep[0])[0])
305                                         else:
306                                             operation_dependencies.add((dep[0], "__first__"))
307                                     else:
308                                         deps_satisfied = False
309                     if deps_satisfied:
310                         chopped.append(operation)
311                         dependencies.update(operation_dependencies)
312                         del self.generated_operations[app_label][0]
313                     else:
314                         break
315                 # Make a migration! Well, only if there's stuff to put in it
316                 if dependencies or chopped:
317                     if not self.generated_operations[app_label] or chop_mode:
318                         subclass = type("Migration", (Migration,), {"operations": [], "dependencies": []})
319                         instance = subclass("auto_%i" % (len(self.migrations.get(app_label, [])) + 1), app_label)
320                         instance.dependencies = list(dependencies)
321                         instance.operations = chopped
322                         instance.initial = app_label not in self.existing_apps
323                         self.migrations.setdefault(app_label, []).append(instance)
324                         chop_mode = False
325                     else:
326                         self.generated_operations[app_label] = chopped + self.generated_operations[app_label]
327             new_num_ops = sum(len(x) for x in self.generated_operations.values())
328             if new_num_ops == num_ops:
329                 if not chop_mode:
330                     chop_mode = True
331                 else:
332                     raise ValueError("Cannot resolve operation dependencies: %r" % self.generated_operations)
333             num_ops = new_num_ops
334 
335     def _sort_migrations(self):
336         """
337         Reorder to make things possible. Reordering may be needed so FKs work
338         nicely inside the same app.
339         """
340         for app_label, ops in sorted(self.generated_operations.items()):
341             # construct a dependency graph for intra-app dependencies
342             dependency_graph = {op: set() for op in ops}
343             for op in ops:
344                 for dep in op._auto_deps:
345                     # Resolve intra-app dependencies to handle circular
346                     # references involving a swappable model.
347                     dep = self._resolve_dependency(dep)[0]
348                     if dep[0] == app_label:
349                         for op2 in ops:
350                             if self.check_dependency(op2, dep):
351                                 dependency_graph[op].add(op2)
352 
353             # we use a stable sort for deterministic tests & general behavior
354             self.generated_operations[app_label] = stable_topological_sort(ops, dependency_graph)
355 
356     def _optimize_migrations(self):
357         # Add in internal dependencies among the migrations
358         for app_label, migrations in self.migrations.items():
359             for m1, m2 in zip(migrations, migrations[1:]):
360                 m2.dependencies.append((app_label, m1.name))
361 
362         # De-dupe dependencies
363         for migrations in self.migrations.values():
364             for migration in migrations:
365                 migration.dependencies = list(set(migration.dependencies))
366 
367         # Optimize migrations
368         for app_label, migrations in self.migrations.items():
369             for migration in migrations:
370                 migration.operations = MigrationOptimizer().optimize(migration.operations, app_label)
371 
372     def check_dependency(self, operation, dependency):
373         """
374         Return True if the given operation depends on the given dependency,
375         False otherwise.
376         """
377         # Created model
378         if dependency[2] is None and dependency[3] is True:
379             return (
380                 isinstance(operation, operations.CreateModel) and
381                 operation.name_lower == dependency[1].lower()
382             )
383         # Created field
384         elif dependency[2] is not None and dependency[3] is True:
385             return (
386                 (
387                     isinstance(operation, operations.CreateModel) and
388                     operation.name_lower == dependency[1].lower() and
389                     any(dependency[2] == x for x, y in operation.fields)
390                 ) or
391                 (
392                     isinstance(operation, operations.AddField) and
393                     operation.model_name_lower == dependency[1].lower() and
394                     operation.name_lower == dependency[2].lower()
395                 )
396             )
397         # Removed field
398         elif dependency[2] is not None and dependency[3] is False:
399             return (
400                 isinstance(operation, operations.RemoveField) and
401                 operation.model_name_lower == dependency[1].lower() and
402                 operation.name_lower == dependency[2].lower()
403             )
404         # Removed model
405         elif dependency[2] is None and dependency[3] is False:
406             return (
407                 isinstance(operation, operations.DeleteModel) and
408                 operation.name_lower == dependency[1].lower()
409             )
410         # Field being altered
411         elif dependency[2] is not None and dependency[3] == "alter":
412             return (
413                 isinstance(operation, operations.AlterField) and
414                 operation.model_name_lower == dependency[1].lower() and
415                 operation.name_lower == dependency[2].lower()
416             )
417         # order_with_respect_to being unset for a field
418         elif dependency[2] is not None and dependency[3] == "order_wrt_unset":
419             return (
420                 isinstance(operation, operations.AlterOrderWithRespectTo) and
421                 operation.name_lower == dependency[1].lower() and
422                 (operation.order_with_respect_to or "").lower() != dependency[2].lower()
423             )
424         # Field is removed and part of an index/unique_together
425         elif dependency[2] is not None and dependency[3] == "foo_together_change":
426             return (
427                 isinstance(operation, (operations.AlterUniqueTogether,
428                                        operations.AlterIndexTogether)) and
429                 operation.name_lower == dependency[1].lower()
430             )
431         # Unknown dependency. Raise an error.
432         else:
433             raise ValueError("Can't handle dependency %r" % (dependency,))
434 
435     def add_operation(self, app_label, operation, dependencies=None, beginning=False):
436         # Dependencies are (app_label, model_name, field_name, create/delete as True/False)
437         operation._auto_deps = dependencies or []
438         if beginning:
439             self.generated_operations.setdefault(app_label, []).insert(0, operation)
440         else:
441             self.generated_operations.setdefault(app_label, []).append(operation)
442 
443     def swappable_first_key(self, item):
444         """
445         Place potential swappable models first in lists of created models (only
446         real way to solve #22783).
447         """
448         try:
449             model = self.new_apps.get_model(item[0], item[1])
450             base_names = [base.__name__ for base in model.__bases__]
451             string_version = "%s.%s" % (item[0], item[1])
452             if (
453                 model._meta.swappable or
454                 "AbstractUser" in base_names or
455                 "AbstractBaseUser" in base_names or
456                 settings.AUTH_USER_MODEL.lower() == string_version.lower()
457             ):
458                 return ("___" + item[0], "___" + item[1])
459         except LookupError:
460             pass
461         return item
462 
463     def generate_renamed_models(self):
464         """
465         Find any renamed models, generate the operations for them, and remove
466         the old entry from the model lists. Must be run before other
467         model-level generation.
468         """
469         self.renamed_models = {}
470         self.renamed_models_rel = {}
471         added_models = self.new_model_keys - self.old_model_keys
472         for app_label, model_name in sorted(added_models):
473             model_state = self.to_state.models[app_label, model_name]
474             model_fields_def = self.only_relation_agnostic_fields(model_state.fields)
475 
476             removed_models = self.old_model_keys - self.new_model_keys
477             for rem_app_label, rem_model_name in removed_models:
478                 if rem_app_label == app_label:
479                     rem_model_state = self.from_state.models[rem_app_label, rem_model_name]
480                     rem_model_fields_def = self.only_relation_agnostic_fields(rem_model_state.fields)
481                     if model_fields_def == rem_model_fields_def:
482                         if self.questioner.ask_rename_model(rem_model_state, model_state):
483                             model_opts = self.new_apps.get_model(app_label, model_name)._meta
484                             dependencies = []
485                             for field in model_opts.get_fields():
486                                 if field.is_relation:
487                                     dependencies.extend(self._get_dependencies_for_foreign_key(field))
488                             self.add_operation(
489                                 app_label,
490                                 operations.RenameModel(
491                                     old_name=rem_model_state.name,
492                                     new_name=model_state.name,
493                                 ),
494                                 dependencies=dependencies,
495                             )
496                             self.renamed_models[app_label, model_name] = rem_model_name
497                             renamed_models_rel_key = '%s.%s' % (
498                                 rem_model_state.app_label,
499                                 rem_model_state.name_lower,
500                             )
501                             self.renamed_models_rel[renamed_models_rel_key] = '%s.%s' % (
502                                 model_state.app_label,
503                                 model_state.name_lower,
504                             )
505                             self.old_model_keys.remove((rem_app_label, rem_model_name))
506                             self.old_model_keys.add((app_label, model_name))
507                             break
508 
509     def generate_created_models(self):
510         """
511         Find all new models (both managed and unmanaged) and make create
512         operations for them as well as separate operations to create any
513         foreign key or M2M relationships (these are optimized later, if
514         possible).
515 
516         Defer any model options that refer to collections of fields that might
517         be deferred (e.g. unique_together, index_together).
518         """
519         old_keys = self.old_model_keys | self.old_unmanaged_keys
520         added_models = self.new_model_keys - old_keys
521         added_unmanaged_models = self.new_unmanaged_keys - old_keys
522         all_added_models = chain(
523             sorted(added_models, key=self.swappable_first_key, reverse=True),
524             sorted(added_unmanaged_models, key=self.swappable_first_key, reverse=True)
525         )
526         for app_label, model_name in all_added_models:
527             model_state = self.to_state.models[app_label, model_name]
528             model_opts = self.new_apps.get_model(app_label, model_name)._meta
529             # Gather related fields
530             related_fields = {}
531             primary_key_rel = None
532             for field in model_opts.local_fields:
533                 if field.remote_field:
534                     if field.remote_field.model:
535                         if field.primary_key:
536                             primary_key_rel = field.remote_field.model
537                         elif not field.remote_field.parent_link:
538                             related_fields[field.name] = field
539                     # through will be none on M2Ms on swapped-out models;
540                     # we can treat lack of through as auto_created=True, though.
541                     if (getattr(field.remote_field, "through", None) and
542                             not field.remote_field.through._meta.auto_created):
543                         related_fields[field.name] = field
544             for field in model_opts.local_many_to_many:
545                 if field.remote_field.model:
546                     related_fields[field.name] = field
547                 if getattr(field.remote_field, "through", None) and not field.remote_field.through._meta.auto_created:
548                     related_fields[field.name] = field
549             # Are there indexes/unique|index_together to defer?
550             indexes = model_state.options.pop('indexes')
551             constraints = model_state.options.pop('constraints')
552             unique_together = model_state.options.pop('unique_together', None)
553             index_together = model_state.options.pop('index_together', None)
554             order_with_respect_to = model_state.options.pop('order_with_respect_to', None)
555             # Depend on the deletion of any possible proxy version of us
556             dependencies = [
557                 (app_label, model_name, None, False),
558             ]
559             # Depend on all bases
560             for base in model_state.bases:
561                 if isinstance(base, str) and "." in base:
562                     base_app_label, base_name = base.split(".", 1)
563                     dependencies.append((base_app_label, base_name, None, True))
564                     # Depend on the removal of base fields if the new model has
565                     # a field with the same name.
566                     old_base_model_state = self.from_state.models.get((base_app_label, base_name))
567                     new_base_model_state = self.to_state.models.get((base_app_label, base_name))
568                     if old_base_model_state and new_base_model_state:
569                         removed_base_fields = set(old_base_model_state.fields).difference(
570                             new_base_model_state.fields,
571                         ).intersection(model_state.fields)
572                         for removed_base_field in removed_base_fields:
573                             dependencies.append((base_app_label, base_name, removed_base_field, False))
574             # Depend on the other end of the primary key if it's a relation
575             if primary_key_rel:
576                 dependencies.append((
577                     primary_key_rel._meta.app_label,
578                     primary_key_rel._meta.object_name,
579                     None,
580                     True
581                 ))
582             # Generate creation operation
583             self.add_operation(
584                 app_label,
585                 operations.CreateModel(
586                     name=model_state.name,
587                     fields=[d for d in model_state.fields.items() if d[0] not in related_fields],
588                     options=model_state.options,
589                     bases=model_state.bases,
590                     managers=model_state.managers,
591                 ),
592                 dependencies=dependencies,
593                 beginning=True,
594             )
595 
596             # Don't add operations which modify the database for unmanaged models
597             if not model_opts.managed:
598                 continue
599 
600             # Generate operations for each related field
601             for name, field in sorted(related_fields.items()):
602                 dependencies = self._get_dependencies_for_foreign_key(field)
603                 # Depend on our own model being created
604                 dependencies.append((app_label, model_name, None, True))
605                 # Make operation
606                 self.add_operation(
607                     app_label,
608                     operations.AddField(
609                         model_name=model_name,
610                         name=name,
611                         field=field,
612                     ),
613                     dependencies=list(set(dependencies)),
614                 )
615             # Generate other opns
616             related_dependencies = [
617                 (app_label, model_name, name, True)
618                 for name in sorted(related_fields)
619             ]
620             related_dependencies.append((app_label, model_name, None, True))
621             for index in indexes:
622                 self.add_operation(
623                     app_label,
624                     operations.AddIndex(
625                         model_name=model_name,
626                         index=index,
627                     ),
628                     dependencies=related_dependencies,
629                 )
630             for constraint in constraints:
631                 self.add_operation(
632                     app_label,
633                     operations.AddConstraint(
634                         model_name=model_name,
635                         constraint=constraint,
636                     ),
637                     dependencies=related_dependencies,
638                 )
639             if unique_together:
640                 self.add_operation(
641                     app_label,
642                     operations.AlterUniqueTogether(
643                         name=model_name,
644                         unique_together=unique_together,
645                     ),
646                     dependencies=related_dependencies
647                 )
648             if index_together:
649                 self.add_operation(
650                     app_label,
651                     operations.AlterIndexTogether(
652                         name=model_name,
653                         index_together=index_together,
654                     ),
655                     dependencies=related_dependencies
656                 )
657             if order_with_respect_to:
658                 self.add_operation(
659                     app_label,
660                     operations.AlterOrderWithRespectTo(
661                         name=model_name,
662                         order_with_respect_to=order_with_respect_to,
663                     ),
664                     dependencies=[
665                         (app_label, model_name, order_with_respect_to, True),
666                         (app_label, model_name, None, True),
667                     ]
668                 )
669 
670             # Fix relationships if the model changed from a proxy model to a
671             # concrete model.
672             if (app_label, model_name) in self.old_proxy_keys:
673                 for related_object in model_opts.related_objects:
674                     self.add_operation(
675                         related_object.related_model._meta.app_label,
676                         operations.AlterField(
677                             model_name=related_object.related_model._meta.object_name,
678                             name=related_object.field.name,
679                             field=related_object.field,
680                         ),
681                         dependencies=[(app_label, model_name, None, True)],
682                     )
683 
684     def generate_created_proxies(self):
685         """
686         Make CreateModel statements for proxy models. Use the same statements
687         as that way there's less code duplication, but for proxy models it's
688         safe to skip all the pointless field stuff and chuck out an operation.
689         """
690         added = self.new_proxy_keys - self.old_proxy_keys
691         for app_label, model_name in sorted(added):
692             model_state = self.to_state.models[app_label, model_name]
693             assert model_state.options.get("proxy")
694             # Depend on the deletion of any possible non-proxy version of us
695             dependencies = [
696                 (app_label, model_name, None, False),
697             ]
698             # Depend on all bases
699             for base in model_state.bases:
700                 if isinstance(base, str) and "." in base:
701                     base_app_label, base_name = base.split(".", 1)
702                     dependencies.append((base_app_label, base_name, None, True))
703             # Generate creation operation
704             self.add_operation(
705                 app_label,
706                 operations.CreateModel(
707                     name=model_state.name,
708                     fields=[],
709                     options=model_state.options,
710                     bases=model_state.bases,
711                     managers=model_state.managers,
712                 ),
713                 # Depend on the deletion of any possible non-proxy version of us
714                 dependencies=dependencies,
715             )
716 
717     def generate_deleted_models(self):
718         """
719         Find all deleted models (managed and unmanaged) and make delete
720         operations for them as well as separate operations to delete any
721         foreign key or M2M relationships (these are optimized later, if
722         possible).
723 
724         Also bring forward removal of any model options that refer to
725         collections of fields - the inverse of generate_created_models().
726         """
727         new_keys = self.new_model_keys | self.new_unmanaged_keys
728         deleted_models = self.old_model_keys - new_keys
729         deleted_unmanaged_models = self.old_unmanaged_keys - new_keys
730         all_deleted_models = chain(sorted(deleted_models), sorted(deleted_unmanaged_models))
731         for app_label, model_name in all_deleted_models:
732             model_state = self.from_state.models[app_label, model_name]
733             model = self.old_apps.get_model(app_label, model_name)
734             # Gather related fields
735             related_fields = {}
736             for field in model._meta.local_fields:
737                 if field.remote_field:
738                     if field.remote_field.model:
739                         related_fields[field.name] = field
740                     # through will be none on M2Ms on swapped-out models;
741                     # we can treat lack of through as auto_created=True, though.
742                     if (getattr(field.remote_field, "through", None) and
743                             not field.remote_field.through._meta.auto_created):
744                         related_fields[field.name] = field
745             for field in model._meta.local_many_to_many:
746                 if field.remote_field.model:
747                     related_fields[field.name] = field
748                 if getattr(field.remote_field, "through", None) and not field.remote_field.through._meta.auto_created:
749                     related_fields[field.name] = field
750             # Generate option removal first
751             unique_together = model_state.options.pop('unique_together', None)
752             index_together = model_state.options.pop('index_together', None)
753             if unique_together:
754                 self.add_operation(
755                     app_label,
756                     operations.AlterUniqueTogether(
757                         name=model_name,
758                         unique_together=None,
759                     )
760                 )
761             if index_together:
762                 self.add_operation(
763                     app_label,
764                     operations.AlterIndexTogether(
765                         name=model_name,
766                         index_together=None,
767                     )
768                 )
769             # Then remove each related field
770             for name in sorted(related_fields):
771                 self.add_operation(
772                     app_label,
773                     operations.RemoveField(
774                         model_name=model_name,
775                         name=name,
776                     )
777                 )
778             # Finally, remove the model.
779             # This depends on both the removal/alteration of all incoming fields
780             # and the removal of all its own related fields, and if it's
781             # a through model the field that references it.
782             dependencies = []
783             for related_object in model._meta.related_objects:
784                 related_object_app_label = related_object.related_model._meta.app_label
785                 object_name = related_object.related_model._meta.object_name
786                 field_name = related_object.field.name
787                 dependencies.append((related_object_app_label, object_name, field_name, False))
788                 if not related_object.many_to_many:
789                     dependencies.append((related_object_app_label, object_name, field_name, "alter"))
790 
791             for name in sorted(related_fields):
792                 dependencies.append((app_label, model_name, name, False))
793             # We're referenced in another field's through=
794             through_user = self.through_users.get((app_label, model_state.name_lower))
795             if through_user:
796                 dependencies.append((through_user[0], through_user[1], through_user[2], False))
797             # Finally, make the operation, deduping any dependencies
798             self.add_operation(
799                 app_label,
800                 operations.DeleteModel(
801                     name=model_state.name,
802                 ),
803                 dependencies=list(set(dependencies)),
804             )
805 
806     def generate_deleted_proxies(self):
807         """Make DeleteModel options for proxy models."""
808         deleted = self.old_proxy_keys - self.new_proxy_keys
809         for app_label, model_name in sorted(deleted):
810             model_state = self.from_state.models[app_label, model_name]
811             assert model_state.options.get("proxy")
812             self.add_operation(
813                 app_label,
814                 operations.DeleteModel(
815                     name=model_state.name,
816                 ),
817             )
818 
819     def generate_renamed_fields(self):
820         """Work out renamed fields."""
821         self.renamed_fields = {}
822         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):
823             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
824             old_model_state = self.from_state.models[app_label, old_model_name]
825             field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)
826             # Scan to see if this is actually a rename!
827             field_dec = self.deep_deconstruct(field)
828             for rem_app_label, rem_model_name, rem_field_name in sorted(self.old_field_keys - self.new_field_keys):
829                 if rem_app_label == app_label and rem_model_name == model_name:
830                     old_field = old_model_state.fields[rem_field_name]
831                     old_field_dec = self.deep_deconstruct(old_field)
832                     if field.remote_field and field.remote_field.model and 'to' in old_field_dec[2]:
833                         old_rel_to = old_field_dec[2]['to']
834                         if old_rel_to in self.renamed_models_rel:
835                             old_field_dec[2]['to'] = self.renamed_models_rel[old_rel_to]
836                     old_field.set_attributes_from_name(rem_field_name)
837                     old_db_column = old_field.get_attname_column()[1]
838                     if (old_field_dec == field_dec or (
839                             # Was the field renamed and db_column equal to the
840                             # old field's column added?
841                             old_field_dec[0:2] == field_dec[0:2] and
842                             dict(old_field_dec[2], db_column=old_db_column) == field_dec[2])):
843                         if self.questioner.ask_rename(model_name, rem_field_name, field_name, field):
844                             self.add_operation(
845                                 app_label,
846                                 operations.RenameField(
847                                     model_name=model_name,
848                                     old_name=rem_field_name,
849                                     new_name=field_name,
850                                 )
851                             )
852                             self.old_field_keys.remove((rem_app_label, rem_model_name, rem_field_name))
853                             self.old_field_keys.add((app_label, model_name, field_name))
854                             self.renamed_fields[app_label, model_name, field_name] = rem_field_name
855                             break
856 
857     def generate_added_fields(self):
858         """Make AddField operations."""
859         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):
860             self._generate_added_field(app_label, model_name, field_name)
861 
862     def _generate_added_field(self, app_label, model_name, field_name):
863         field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)
864         # Fields that are foreignkeys/m2ms depend on stuff
865         dependencies = []
866         if field.remote_field and field.remote_field.model:
867             dependencies.extend(self._get_dependencies_for_foreign_key(field))
868         # You can't just add NOT NULL fields with no default or fields
869         # which don't allow empty strings as default.
870         time_fields = (models.DateField, models.DateTimeField, models.TimeField)
871         preserve_default = (
872             field.null or field.has_default() or field.many_to_many or
873             (field.blank and field.empty_strings_allowed) or
874             (isinstance(field, time_fields) and field.auto_now)
875         )
876         if not preserve_default:
877             field = field.clone()
878             if isinstance(field, time_fields) and field.auto_now_add:
879                 field.default = self.questioner.ask_auto_now_add_addition(field_name, model_name)
880             else:
881                 field.default = self.questioner.ask_not_null_addition(field_name, model_name)
882         self.add_operation(
883             app_label,
884             operations.AddField(
885                 model_name=model_name,
886                 name=field_name,
887                 field=field,
888                 preserve_default=preserve_default,
889             ),
890             dependencies=dependencies,
891         )
892 
893     def generate_removed_fields(self):
894         """Make RemoveField operations."""
895         for app_label, model_name, field_name in sorted(self.old_field_keys - self.new_field_keys):
896             self._generate_removed_field(app_label, model_name, field_name)
897 
898     def _generate_removed_field(self, app_label, model_name, field_name):
899         self.add_operation(
900             app_label,
901             operations.RemoveField(
902                 model_name=model_name,
903                 name=field_name,
904             ),
905             # We might need to depend on the removal of an
906             # order_with_respect_to or index/unique_together operation;
907             # this is safely ignored if there isn't one
908             dependencies=[
909                 (app_label, model_name, field_name, "order_wrt_unset"),
910                 (app_label, model_name, field_name, "foo_together_change"),
911             ],
912         )
913 
914     def generate_altered_fields(self):
915         """
916         Make AlterField operations, or possibly RemovedField/AddField if alter
917         isn's possible.
918         """
919         for app_label, model_name, field_name in sorted(self.old_field_keys & self.new_field_keys):
920             # Did the field change?
921             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
922             old_field_name = self.renamed_fields.get((app_label, model_name, field_name), field_name)
923             old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(old_field_name)
924             new_field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)
925             dependencies = []
926             # Implement any model renames on relations; these are handled by RenameModel
927             # so we need to exclude them from the comparison
928             if hasattr(new_field, "remote_field") and getattr(new_field.remote_field, "model", None):
929                 rename_key = (
930                     new_field.remote_field.model._meta.app_label,
931                     new_field.remote_field.model._meta.model_name,
932                 )
933                 if rename_key in self.renamed_models:
934                     new_field.remote_field.model = old_field.remote_field.model
935                 # Handle ForeignKey which can only have a single to_field.
936                 remote_field_name = getattr(new_field.remote_field, 'field_name', None)
937                 if remote_field_name:
938                     to_field_rename_key = rename_key + (remote_field_name,)
939                     if to_field_rename_key in self.renamed_fields:
940                         # Repoint both model and field name because to_field
941                         # inclusion in ForeignKey.deconstruct() is based on
942                         # both.
943                         new_field.remote_field.model = old_field.remote_field.model
944                         new_field.remote_field.field_name = old_field.remote_field.field_name
945                 # Handle ForeignObjects which can have multiple from_fields/to_fields.
946                 from_fields = getattr(new_field, 'from_fields', None)
947                 if from_fields:
948                     from_rename_key = (app_label, model_name)
949                     new_field.from_fields = tuple([
950                         self.renamed_fields.get(from_rename_key + (from_field,), from_field)
951                         for from_field in from_fields
952                     ])
953                     new_field.to_fields = tuple([
954                         self.renamed_fields.get(rename_key + (to_field,), to_field)
955                         for to_field in new_field.to_fields
956                     ])
957                 dependencies.extend(self._get_dependencies_for_foreign_key(new_field))
958             if hasattr(new_field, "remote_field") and getattr(new_field.remote_field, "through", None):
959                 rename_key = (
960                     new_field.remote_field.through._meta.app_label,
961                     new_field.remote_field.through._meta.model_name,
962                 )
963                 if rename_key in self.renamed_models:
964                     new_field.remote_field.through = old_field.remote_field.through
965             old_field_dec = self.deep_deconstruct(old_field)
966             new_field_dec = self.deep_deconstruct(new_field)
967             if old_field_dec != new_field_dec:
968                 both_m2m = old_field.many_to_many and new_field.many_to_many
969                 neither_m2m = not old_field.many_to_many and not new_field.many_to_many
970                 if both_m2m or neither_m2m:
971                     # Either both fields are m2m or neither is
972                     preserve_default = True
973                     if (old_field.null and not new_field.null and not new_field.has_default() and
974                             not new_field.many_to_many):
975                         field = new_field.clone()
976                         new_default = self.questioner.ask_not_null_alteration(field_name, model_name)
977                         if new_default is not models.NOT_PROVIDED:
978                             field.default = new_default
979                             preserve_default = False
980                     else:
981                         field = new_field
982                     self.add_operation(
983                         app_label,
984                         operations.AlterField(
985                             model_name=model_name,
986                             name=field_name,
987                             field=field,
988                             preserve_default=preserve_default,
989                         ),
990                         dependencies=dependencies,
991                     )
992                 else:
993                     # We cannot alter between m2m and concrete fields
994                     self._generate_removed_field(app_label, model_name, field_name)
995                     self._generate_added_field(app_label, model_name, field_name)
996 
997     def create_altered_indexes(self):
998         option_name = operations.AddIndex.option_name
999         for app_label, model_name in sorted(self.kept_model_keys):
1000             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
1001             old_model_state = self.from_state.models[app_label, old_model_name]
1002             new_model_state = self.to_state.models[app_label, model_name]
1003 
1004             old_indexes = old_model_state.options[option_name]
1005             new_indexes = new_model_state.options[option_name]
1006             add_idx = [idx for idx in new_indexes if idx not in old_indexes]
1007             rem_idx = [idx for idx in old_indexes if idx not in new_indexes]
1008 
1009             self.altered_indexes.update({
1010                 (app_label, model_name): {
1011                     'added_indexes': add_idx, 'removed_indexes': rem_idx,
1012                 }
1013             })
1014 
1015     def generate_added_indexes(self):
1016         for (app_label, model_name), alt_indexes in self.altered_indexes.items():
1017             for index in alt_indexes['added_indexes']:
1018                 self.add_operation(
1019                     app_label,
1020                     operations.AddIndex(
1021                         model_name=model_name,
1022                         index=index,
1023                     )
1024                 )
1025 
1026     def generate_removed_indexes(self):
1027         for (app_label, model_name), alt_indexes in self.altered_indexes.items():
1028             for index in alt_indexes['removed_indexes']:
1029                 self.add_operation(
1030                     app_label,
1031                     operations.RemoveIndex(
1032                         model_name=model_name,
1033                         name=index.name,
1034                     )
1035                 )
1036 
1037     def create_altered_constraints(self):
1038         option_name = operations.AddConstraint.option_name
1039         for app_label, model_name in sorted(self.kept_model_keys):
1040             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
1041             old_model_state = self.from_state.models[app_label, old_model_name]
1042             new_model_state = self.to_state.models[app_label, model_name]
1043 
1044             old_constraints = old_model_state.options[option_name]
1045             new_constraints = new_model_state.options[option_name]
1046             add_constraints = [c for c in new_constraints if c not in old_constraints]
1047             rem_constraints = [c for c in old_constraints if c not in new_constraints]
1048 
1049             self.altered_constraints.update({
1050                 (app_label, model_name): {
1051                     'added_constraints': add_constraints, 'removed_constraints': rem_constraints,
1052                 }
1053             })
1054 
1055     def generate_added_constraints(self):
1056         for (app_label, model_name), alt_constraints in self.altered_constraints.items():
1057             for constraint in alt_constraints['added_constraints']:
1058                 self.add_operation(
1059                     app_label,
1060                     operations.AddConstraint(
1061                         model_name=model_name,
1062                         constraint=constraint,
1063                     )
1064                 )
1065 
1066     def generate_removed_constraints(self):
1067         for (app_label, model_name), alt_constraints in self.altered_constraints.items():
1068             for constraint in alt_constraints['removed_constraints']:
1069                 self.add_operation(
1070                     app_label,
1071                     operations.RemoveConstraint(
1072                         model_name=model_name,
1073                         name=constraint.name,
1074                     )
1075                 )
1076 
1077     def _get_dependencies_for_foreign_key(self, field):
1078         # Account for FKs to swappable models
1079         swappable_setting = getattr(field, 'swappable_setting', None)
1080         if swappable_setting is not None:
1081             dep_app_label = "__setting__"
1082             dep_object_name = swappable_setting
1083         else:
1084             dep_app_label = field.remote_field.model._meta.app_label
1085             dep_object_name = field.remote_field.model._meta.object_name
1086         dependencies = [(dep_app_label, dep_object_name, None, True)]
1087         if getattr(field.remote_field, "through", None) and not field.remote_field.through._meta.auto_created:
1088             dependencies.append((
1089                 field.remote_field.through._meta.app_label,
1090                 field.remote_field.through._meta.object_name,
1091                 None,
1092                 True,
1093             ))
1094         return dependencies
1095 
1096     def _generate_altered_foo_together(self, operation):
1097         option_name = operation.option_name
1098         for app_label, model_name in sorted(self.kept_model_keys):
1099             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
1100             old_model_state = self.from_state.models[app_label, old_model_name]
1101             new_model_state = self.to_state.models[app_label, model_name]
1102 
1103             # We run the old version through the field renames to account for those
1104             old_value = old_model_state.options.get(option_name)
1105             old_value = {
1106                 tuple(
1107                     self.renamed_fields.get((app_label, model_name, n), n)
1108                     for n in unique
1109                 )
1110                 for unique in old_value
1111             } if old_value else set()
1112 
1113             new_value = new_model_state.options.get(option_name)
1114             new_value = set(new_value) if new_value else set()
1115 
1116             if old_value != new_value:
1117                 dependencies = []
1118                 for foo_togethers in new_value:
1119                     for field_name in foo_togethers:
1120                         field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)
1121                         if field.remote_field and field.remote_field.model:
1122                             dependencies.extend(self._get_dependencies_for_foreign_key(field))
1123 
1124                 self.add_operation(
1125                     app_label,
1126                     operation(
1127                         name=model_name,
1128                         **{option_name: new_value}
1129                     ),
1130                     dependencies=dependencies,
1131                 )
1132 
1133     def generate_altered_unique_together(self):
1134         self._generate_altered_foo_together(operations.AlterUniqueTogether)
1135 
1136     def generate_altered_index_together(self):
1137         self._generate_altered_foo_together(operations.AlterIndexTogether)
1138 
1139     def generate_altered_db_table(self):
1140         models_to_check = self.kept_model_keys.union(self.kept_proxy_keys, self.kept_unmanaged_keys)
1141         for app_label, model_name in sorted(models_to_check):
1142             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
1143             old_model_state = self.from_state.models[app_label, old_model_name]
1144             new_model_state = self.to_state.models[app_label, model_name]
1145             old_db_table_name = old_model_state.options.get('db_table')
1146             new_db_table_name = new_model_state.options.get('db_table')
1147             if old_db_table_name != new_db_table_name:
1148                 self.add_operation(
1149                     app_label,
1150                     operations.AlterModelTable(
1151                         name=model_name,
1152                         table=new_db_table_name,
1153                     )
1154                 )
1155 
1156     def generate_altered_options(self):
1157         """
1158         Work out if any non-schema-affecting options have changed and make an
1159         operation to represent them in state changes (in case Python code in
1160         migrations needs them).
1161         """
1162         models_to_check = self.kept_model_keys.union(
1163             self.kept_proxy_keys,
1164             self.kept_unmanaged_keys,
1165             # unmanaged converted to managed
1166             self.old_unmanaged_keys & self.new_model_keys,
1167             # managed converted to unmanaged
1168             self.old_model_keys & self.new_unmanaged_keys,
1169         )
1170 
1171         for app_label, model_name in sorted(models_to_check):
1172             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
1173             old_model_state = self.from_state.models[app_label, old_model_name]
1174             new_model_state = self.to_state.models[app_label, model_name]
1175             old_options = {
1176                 key: value for key, value in old_model_state.options.items()
1177                 if key in AlterModelOptions.ALTER_OPTION_KEYS
1178             }
1179             new_options = {
1180                 key: value for key, value in new_model_state.options.items()
1181                 if key in AlterModelOptions.ALTER_OPTION_KEYS
1182             }
1183             if old_options != new_options:
1184                 self.add_operation(
1185                     app_label,
1186                     operations.AlterModelOptions(
1187                         name=model_name,
1188                         options=new_options,
1189                     )
1190                 )
1191 
1192     def generate_altered_order_with_respect_to(self):
1193         for app_label, model_name in sorted(self.kept_model_keys):
1194             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
1195             old_model_state = self.from_state.models[app_label, old_model_name]
1196             new_model_state = self.to_state.models[app_label, model_name]
1197             if (old_model_state.options.get("order_with_respect_to") !=
1198                     new_model_state.options.get("order_with_respect_to")):
1199                 # Make sure it comes second if we're adding
1200                 # (removal dependency is part of RemoveField)
1201                 dependencies = []
1202                 if new_model_state.options.get("order_with_respect_to"):
1203                     dependencies.append((
1204                         app_label,
1205                         model_name,
1206                         new_model_state.options["order_with_respect_to"],
1207                         True,
1208                     ))
1209                 # Actually generate the operation
1210                 self.add_operation(
1211                     app_label,
1212                     operations.AlterOrderWithRespectTo(
1213                         name=model_name,
1214                         order_with_respect_to=new_model_state.options.get('order_with_respect_to'),
1215                     ),
1216                     dependencies=dependencies,
1217                 )
1218 
1219     def generate_altered_managers(self):
1220         for app_label, model_name in sorted(self.kept_model_keys):
1221             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
1222             old_model_state = self.from_state.models[app_label, old_model_name]
1223             new_model_state = self.to_state.models[app_label, model_name]
1224             if old_model_state.managers != new_model_state.managers:
1225                 self.add_operation(
1226                     app_label,
1227                     operations.AlterModelManagers(
1228                         name=model_name,
1229                         managers=new_model_state.managers,
1230                     )
1231                 )
1232 
1233     def arrange_for_graph(self, changes, graph, migration_name=None):
1234         """
1235         Take a result from changes() and a MigrationGraph, and fix the names
1236         and dependencies of the changes so they extend the graph from the leaf
1237         nodes for each app.
1238         """
1239         leaves = graph.leaf_nodes()
1240         name_map = {}
1241         for app_label, migrations in list(changes.items()):
1242             if not migrations:
1243                 continue
1244             # Find the app label's current leaf node
1245             app_leaf = None
1246             for leaf in leaves:
1247                 if leaf[0] == app_label:
1248                     app_leaf = leaf
1249                     break
1250             # Do they want an initial migration for this app?
1251             if app_leaf is None and not self.questioner.ask_initial(app_label):
1252                 # They don't.
1253                 for migration in migrations:
1254                     name_map[(app_label, migration.name)] = (app_label, "__first__")
1255                 del changes[app_label]
1256                 continue
1257             # Work out the next number in the sequence
1258             if app_leaf is None:
1259                 next_number = 1
1260             else:
1261                 next_number = (self.parse_number(app_leaf[1]) or 0) + 1
1262             # Name each migration
1263             for i, migration in enumerate(migrations):
1264                 if i == 0 and app_leaf:
1265                     migration.dependencies.append(app_leaf)
1266                 new_name_parts = ['%04i' % next_number]
1267                 if migration_name:
1268                     new_name_parts.append(migration_name)
1269                 elif i == 0 and not app_leaf:
1270                     new_name_parts.append('initial')
1271                 else:
1272                     new_name_parts.append(migration.suggest_name()[:100])
1273                 new_name = '_'.join(new_name_parts)
1274                 name_map[(app_label, migration.name)] = (app_label, new_name)
1275                 next_number += 1
1276                 migration.name = new_name
1277         # Now fix dependencies
1278         for migrations in changes.values():
1279             for migration in migrations:
1280                 migration.dependencies = [name_map.get(d, d) for d in migration.dependencies]
1281         return changes
1282 
1283     def _trim_to_apps(self, changes, app_labels):
1284         """
1285         Take changes from arrange_for_graph() and set of app labels, and return
1286         a modified set of changes which trims out as many migrations that are
1287         not in app_labels as possible. Note that some other migrations may
1288         still be present as they may be required dependencies.
1289         """
1290         # Gather other app dependencies in a first pass
1291         app_dependencies = {}
1292         for app_label, migrations in changes.items():
1293             for migration in migrations:
1294                 for dep_app_label, name in migration.dependencies:
1295                     app_dependencies.setdefault(app_label, set()).add(dep_app_label)
1296         required_apps = set(app_labels)
1297         # Keep resolving till there's no change
1298         old_required_apps = None
1299         while old_required_apps != required_apps:
1300             old_required_apps = set(required_apps)
1301             required_apps.update(*[app_dependencies.get(app_label, ()) for app_label in required_apps])
1302         # Remove all migrations that aren't needed
1303         for app_label in list(changes):
1304             if app_label not in required_apps:
1305                 del changes[app_label]
1306         return changes
1307 
1308     @classmethod
1309     def parse_number(cls, name):
1310         """
1311         Given a migration name, try to extract a number from the beginning of
1312         it. If no number is found, return None.
1313         """
1314         match = re.match(r'^\d+', name)
1315         if match:
1316             return int(match[0])
1317         return None

</code><intended_behavior>This new or modified method should construct the name of a merge migration by considering the names of the migrations that are being merged, using a clear separator to distinguish between the component names.</intended_behavior>, <file>django/db/migrations/writer.py</file>
<class>None</class>
<method>None</method>
<code>
1 
2 import os
3 import re
4 from importlib import import_module
5 
6 from django import get_version
7 from django.apps import apps
8 # SettingsReference imported for backwards compatibility in Django 2.2.
9 from django.conf import SettingsReference  # NOQA
10 from django.db import migrations
11 from django.db.migrations.loader import MigrationLoader
12 from django.db.migrations.serializer import Serializer, serializer_factory
13 from django.utils.inspect import get_func_args
14 from django.utils.module_loading import module_dir
15 from django.utils.timezone import now
16 
17 
18 class OperationWriter:
19     def __init__(self, operation, indentation=2):
20         self.operation = operation
21         self.buff = []
22         self.indentation = indentation
23 
24     def serialize(self):
25 
26         def _write(_arg_name, _arg_value):
27             if (_arg_name in self.operation.serialization_expand_args and
28                     isinstance(_arg_value, (list, tuple, dict))):
29                 if isinstance(_arg_value, dict):
30                     self.feed('%s={' % _arg_name)
31                     self.indent()
32                     for key, value in _arg_value.items():
33                         key_string, key_imports = MigrationWriter.serialize(key)
34                         arg_string, arg_imports = MigrationWriter.serialize(value)
35                         args = arg_string.splitlines()
36                         if len(args) > 1:
37                             self.feed('%s: %s' % (key_string, args[0]))
38                             for arg in args[1:-1]:
39                                 self.feed(arg)
40                             self.feed('%s,' % args[-1])
41                         else:
42                             self.feed('%s: %s,' % (key_string, arg_string))
43                         imports.update(key_imports)
44                         imports.update(arg_imports)
45                     self.unindent()
46                     self.feed('},')
47                 else:
48                     self.feed('%s=[' % _arg_name)
49                     self.indent()
50                     for item in _arg_value:
51                         arg_string, arg_imports = MigrationWriter.serialize(item)
52                         args = arg_string.splitlines()
53                         if len(args) > 1:
54                             for arg in args[:-1]:
55                                 self.feed(arg)
56                             self.feed('%s,' % args[-1])
57                         else:
58                             self.feed('%s,' % arg_string)
59                         imports.update(arg_imports)
60                     self.unindent()
61                     self.feed('],')
62             else:
63                 arg_string, arg_imports = MigrationWriter.serialize(_arg_value)
64                 args = arg_string.splitlines()
65                 if len(args) > 1:
66                     self.feed('%s=%s' % (_arg_name, args[0]))
67                     for arg in args[1:-1]:
68                         self.feed(arg)
69                     self.feed('%s,' % args[-1])
70                 else:
71                     self.feed('%s=%s,' % (_arg_name, arg_string))
72                 imports.update(arg_imports)
73 
74         imports = set()
75         name, args, kwargs = self.operation.deconstruct()
76         operation_args = get_func_args(self.operation.__init__)
77 
78         # See if this operation is in django.db.migrations. If it is,
79         # We can just use the fact we already have that imported,
80         # otherwise, we need to add an import for the operation class.
81         if getattr(migrations, name, None) == self.operation.__class__:
82             self.feed('migrations.%s(' % name)
83         else:
84             imports.add('import %s' % (self.operation.__class__.__module__))
85             self.feed('%s.%s(' % (self.operation.__class__.__module__, name))
86 
87         self.indent()
88 
89         for i, arg in enumerate(args):
90             arg_value = arg
91             arg_name = operation_args[i]
92             _write(arg_name, arg_value)
93 
94         i = len(args)
95         # Only iterate over remaining arguments
96         for arg_name in operation_args[i:]:
97             if arg_name in kwargs:  # Don't sort to maintain signature order
98                 arg_value = kwargs[arg_name]
99                 _write(arg_name, arg_value)
100 
101         self.unindent()
102         self.feed('),')
103         return self.render(), imports
104 
105     def indent(self):
106         self.indentation += 1
107 
108     def unindent(self):
109         self.indentation -= 1
110 
111     def feed(self, line):
112         self.buff.append(' ' * (self.indentation * 4) + line)
113 
114     def render(self):
115         return '\n'.join(self.buff)
116 
117 
118 class MigrationWriter:
119     """
120     Take a Migration instance and is able to produce the contents
121     of the migration file from it.
122     """
123 
124     def __init__(self, migration, include_header=True):
125         self.migration = migration
126         self.include_header = include_header
127         self.needs_manual_porting = False
128 
129     def as_string(self):
130         """Return a string of the file contents."""
131         items = {
132             "replaces_str": "",
133             "initial_str": "",
134         }
135 
136         imports = set()
137 
138         # Deconstruct operations
139         operations = []
140         for operation in self.migration.operations:
141             operation_string, operation_imports = OperationWriter(operation).serialize()
142             imports.update(operation_imports)
143             operations.append(operation_string)
144         items["operations"] = "\n".join(operations) + "\n" if operations else ""
145 
146         # Format dependencies and write out swappable dependencies right
147         dependencies = []
148         for dependency in self.migration.dependencies:
149             if dependency[0] == "__setting__":
150                 dependencies.append("        migrations.swappable_dependency(settings.%s)," % dependency[1])
151                 imports.add("from django.conf import settings")
152             else:
153                 dependencies.append("        %s," % self.serialize(dependency)[0])
154         items["dependencies"] = "\n".join(dependencies) + "\n" if dependencies else ""
155 
156         # Format imports nicely, swapping imports of functions from migration files
157         # for comments
158         migration_imports = set()
159         for line in list(imports):
160             if re.match(r"^import (.*)\.\d+[^\s]*$", line):
161                 migration_imports.add(line.split("import")[1].strip())
162                 imports.remove(line)
163                 self.needs_manual_porting = True
164 
165         # django.db.migrations is always used, but models import may not be.
166         # If models import exists, merge it with migrations import.
167         if "from django.db import models" in imports:
168             imports.discard("from django.db import models")
169             imports.add("from django.db import migrations, models")
170         else:
171             imports.add("from django.db import migrations")
172 
173         # Sort imports by the package / module to be imported (the part after
174         # "from" in "from ... import ..." or after "import" in "import ...").
175         sorted_imports = sorted(imports, key=lambda i: i.split()[1])
176         items["imports"] = "\n".join(sorted_imports) + "\n" if imports else ""
177         if migration_imports:
178             items["imports"] += (
179                 "\n\n# Functions from the following migrations need manual "
180                 "copying.\n# Move them and any dependencies into this file, "
181                 "then update the\n# RunPython operations to refer to the local "
182                 "versions:\n# %s"
183             ) % "\n# ".join(sorted(migration_imports))
184         # If there's a replaces, make a string for it
185         if self.migration.replaces:
186             items['replaces_str'] = "\n    replaces = %s\n" % self.serialize(self.migration.replaces)[0]
187         # Hinting that goes into comment
188         if self.include_header:
189             items['migration_header'] = MIGRATION_HEADER_TEMPLATE % {
190                 'version': get_version(),
191                 'timestamp': now().strftime("%Y-%m-%d %H:%M"),
192             }
193         else:
194             items['migration_header'] = ""
195 
196         if self.migration.initial:
197             items['initial_str'] = "\n    initial = True\n"
198 
199         return MIGRATION_TEMPLATE % items
200 
201     @property
202     def basedir(self):
203         migrations_package_name, _ = MigrationLoader.migrations_module(self.migration.app_label)
204 
205         if migrations_package_name is None:
206             raise ValueError(
207                 "Django can't create migrations for app '%s' because "
208                 "migrations have been disabled via the MIGRATION_MODULES "
209                 "setting." % self.migration.app_label
210             )
211 
212         # See if we can import the migrations module directly
213         try:
214             migrations_module = import_module(migrations_package_name)
215         except ImportError:
216             pass
217         else:
218             try:
219                 return module_dir(migrations_module)
220             except ValueError:
221                 pass
222 
223         # Alright, see if it's a direct submodule of the app
224         app_config = apps.get_app_config(self.migration.app_label)
225         maybe_app_name, _, migrations_package_basename = migrations_package_name.rpartition(".")
226         if app_config.name == maybe_app_name:
227             return os.path.join(app_config.path, migrations_package_basename)
228 
229         # In case of using MIGRATION_MODULES setting and the custom package
230         # doesn't exist, create one, starting from an existing package
231         existing_dirs, missing_dirs = migrations_package_name.split("."), []
232         while existing_dirs:
233             missing_dirs.insert(0, existing_dirs.pop(-1))
234             try:
235                 base_module = import_module(".".join(existing_dirs))
236             except (ImportError, ValueError):
237                 continue
238             else:
239                 try:
240                     base_dir = module_dir(base_module)
241                 except ValueError:
242                     continue
243                 else:
244                     break
245         else:
246             raise ValueError(
247                 "Could not locate an appropriate location to create "
248                 "migrations package %s. Make sure the toplevel "
249                 "package exists and can be imported." %
250                 migrations_package_name)
251 
252         final_dir = os.path.join(base_dir, *missing_dirs)
253         os.makedirs(final_dir, exist_ok=True)
254         for missing_dir in missing_dirs:
255             base_dir = os.path.join(base_dir, missing_dir)
256             with open(os.path.join(base_dir, "__init__.py"), "w"):
257                 pass
258 
259         return final_dir
260 
261     @property
262     def filename(self):
263         return "%s.py" % self.migration.name
264 
265     @property
266     def path(self):
267         return os.path.join(self.basedir, self.filename)
268 
269     @classmethod
270     def serialize(cls, value):
271         return serializer_factory(value).serialize()
272 
273     @classmethod
274     def register_serializer(cls, type_, serializer):
275         Serializer.register(type_, serializer)
276 
277     @classmethod
278     def unregister_serializer(cls, type_):
279         Serializer.unregister(type_)
280 
281 
282 MIGRATION_HEADER_TEMPLATE = """\
283 # Generated by Django %(version)s on %(timestamp)s
284 
285 """
286 
287 
288 MIGRATION_TEMPLATE = """\
289 %(migration_header)s%(imports)s
290 
291 class Migration(migrations.Migration):
292 %(replaces_str)s%(initial_str)s
293     dependencies = [
294 %(dependencies)s\
295     ]
296 
297     operations = [
298 %(operations)s\
299     ]
300 """

</code><intended_behavior>Incorporate logic in the method for generating migration filenames that checks if the migration is a merge migration and applies a naming convention including identifying information from the merged migrations.</intended_behavior>]
2025-10-17 12:05:12.140 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-17 12:05:12.140 | INFO     | Search-only: skipping patch selection
2025-10-17 12:05:12.295 | INFO     | Task django__django-13162 completed successfully.
2025-10-17 12:05:12.296 | INFO     | No patch generated. You can try running ACR again.
