[
    {
        "rel_file_path": "sphinx/builders/linkcheck.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sphinx-doc__sphinx/setup_sphinx-doc__sphinx__4.1/sphinx/builders/linkcheck.py",
        "start": 89,
        "end": 93,
        "class_name": "AnchorCheckParser",
        "method_name": "handle_starttag",
        "code": "89     def handle_starttag(self, tag: Any, attrs: Any) -> None:\n90         for key, value in attrs:\n91             if key in ('id', 'name') and value == self.search_anchor:\n92                 self.found = True\n93                 break\n",
        "intended_behavior": "Modify the AnchorCheckParser class to accurately recognize and validate anchors with variations in their format, specifically accommodating for the user-content- prefix added by GitHub. This includes adjusting the __init__ method for additional configuration, enhancing the handle_starttag method for normalization, and ensuring these changes do not disrupt original functionality."
    },
    {
        "rel_file_path": "sphinx/builders/linkcheck.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sphinx-doc__sphinx/setup_sphinx-doc__sphinx__4.1/sphinx/builders/linkcheck.py",
        "start": 80,
        "end": 93,
        "class_name": "AnchorCheckParser",
        "method_name": null,
        "code": "80 class AnchorCheckParser(HTMLParser):\n81     \"\"\"Specialized HTML parser that looks for a specific anchor.\"\"\"\n82 \n83     def __init__(self, search_anchor: str) -> None:\n84         super().__init__()\n85 \n86         self.search_anchor = search_anchor\n87         self.found = False\n88 \n89     def handle_starttag(self, tag: Any, attrs: Any) -> None:\n90         for key, value in attrs:\n91             if key in ('id', 'name') and value == self.search_anchor:\n92                 self.found = True\n93                 break\n",
        "intended_behavior": "This class provides additional context to the issue."
    }
]