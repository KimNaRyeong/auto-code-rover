[
    {
        "file": "django/db/migrations/executor.py",
        "class": "MigrationExecutor",
        "method": "detect_soft_applied",
        "intended_behavior": "The `detect_soft_applied` method should ensure that the comparison between the column name specified in a migration and the column names as they exist in the database is performed in a case-insensitive manner. This is crucial for ensuring compatibility with databases that use a case-insensitive collation. To preserve the existing functionality while resolving the issue, the method must be modified so that both the `field.column` value and the `column_names` list items are transformed to a common case (either lower or uppercase) before comparison, or by utilizing a comparison method that inherently ignores case differences. The choice between these approaches may depend on Django's existing mechanisms for handling case sensitivity and the need to support a wide range of database backends with different collation behaviors. A possible modification could look something like this (if choosing to lowercase both sides of the comparison):\n```python\ncolumn_names = [\n    column.name.lower() for column in\n    self.connection.introspection.get_table_description(self.connection.cursor(), table)\n]\nif field.column.lower() not in column_names:\n    return False, project_state\n```\nThis modification ensures that when the database's collation is case-insensitive, the framework will still accurately detect whether a column has already been applied, thus, avoiding operational errors during migrations in such environments."
    }
]