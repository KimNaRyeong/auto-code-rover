[
    {
        "rel_file_path": "testing/conftest.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/pytest-dev__pytest/setup_pytest-dev__pytest__7.2/testing/conftest.py",
        "start": 1,
        "end": 216,
        "class_name": null,
        "method_name": null,
        "code": "1 import re\n2 import sys\n3 from typing import List\n4 \n5 import pytest\n6 from _pytest.monkeypatch import MonkeyPatch\n7 from _pytest.pytester import Pytester\n8 \n9 if sys.gettrace():\n10 \n11     @pytest.fixture(autouse=True)\n12     def restore_tracing():\n13         \"\"\"Restore tracing function (when run with Coverage.py).\n14 \n15         https://bugs.python.org/issue37011\n16         \"\"\"\n17         orig_trace = sys.gettrace()\n18         yield\n19         if sys.gettrace() != orig_trace:\n20             sys.settrace(orig_trace)\n21 \n22 \n23 @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n24 def pytest_collection_modifyitems(items):\n25     \"\"\"Prefer faster tests.\n26 \n27     Use a hookwrapper to do this in the beginning, so e.g. --ff still works\n28     correctly.\n29     \"\"\"\n30     fast_items = []\n31     slow_items = []\n32     slowest_items = []\n33     neutral_items = []\n34 \n35     spawn_names = {\"spawn_pytest\", \"spawn\"}\n36 \n37     for item in items:\n38         try:\n39             fixtures = item.fixturenames\n40         except AttributeError:\n41             # doctest at least\n42             # (https://github.com/pytest-dev/pytest/issues/5070)\n43             neutral_items.append(item)\n44         else:\n45             if \"pytester\" in fixtures:\n46                 co_names = item.function.__code__.co_names\n47                 if spawn_names.intersection(co_names):\n48                     item.add_marker(pytest.mark.uses_pexpect)\n49                     slowest_items.append(item)\n50                 elif \"runpytest_subprocess\" in co_names:\n51                     slowest_items.append(item)\n52                 else:\n53                     slow_items.append(item)\n54                 item.add_marker(pytest.mark.slow)\n55             else:\n56                 marker = item.get_closest_marker(\"slow\")\n57                 if marker:\n58                     slowest_items.append(item)\n59                 else:\n60                     fast_items.append(item)\n61 \n62     items[:] = fast_items + neutral_items + slow_items + slowest_items\n63 \n64     yield\n65 \n66 \n67 @pytest.fixture\n68 def tw_mock():\n69     \"\"\"Returns a mock terminal writer\"\"\"\n70 \n71     class TWMock:\n72         WRITE = object()\n73 \n74         def __init__(self):\n75             self.lines = []\n76             self.is_writing = False\n77 \n78         def sep(self, sep, line=None):\n79             self.lines.append((sep, line))\n80 \n81         def write(self, msg, **kw):\n82             self.lines.append((TWMock.WRITE, msg))\n83 \n84         def _write_source(self, lines, indents=()):\n85             if not indents:\n86                 indents = [\"\"] * len(lines)\n87             for indent, line in zip(indents, lines):\n88                 self.line(indent + line)\n89 \n90         def line(self, line, **kw):\n91             self.lines.append(line)\n92 \n93         def markup(self, text, **kw):\n94             return text\n95 \n96         def get_write_msg(self, idx):\n97             flag, msg = self.lines[idx]\n98             assert flag == TWMock.WRITE\n99             return msg\n100 \n101         fullwidth = 80\n102 \n103     return TWMock()\n104 \n105 \n106 @pytest.fixture\n107 def dummy_yaml_custom_test(pytester: Pytester):\n108     \"\"\"Writes a conftest file that collects and executes a dummy yaml test.\n109 \n110     Taken from the docs, but stripped down to the bare minimum, useful for\n111     tests which needs custom items collected.\n112     \"\"\"\n113     pytester.makeconftest(\n114         \"\"\"\n115         import pytest\n116 \n117         def pytest_collect_file(parent, file_path):\n118             if file_path.suffix == \".yaml\" and file_path.name.startswith(\"test\"):\n119                 return YamlFile.from_parent(path=file_path, parent=parent)\n120 \n121         class YamlFile(pytest.File):\n122             def collect(self):\n123                 yield YamlItem.from_parent(name=self.path.name, parent=self)\n124 \n125         class YamlItem(pytest.Item):\n126             def runtest(self):\n127                 pass\n128     \"\"\"\n129     )\n130     pytester.makefile(\".yaml\", test1=\"\")\n131 \n132 \n133 @pytest.fixture\n134 def pytester(pytester: Pytester, monkeypatch: MonkeyPatch) -> Pytester:\n135     monkeypatch.setenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", \"1\")\n136     return pytester\n137 \n138 \n139 @pytest.fixture(scope=\"session\")\n140 def color_mapping():\n141     \"\"\"Returns a utility class which can replace keys in strings in the form \"{NAME}\"\n142     by their equivalent ASCII codes in the terminal.\n143 \n144     Used by tests which check the actual colors output by pytest.\n145     \"\"\"\n146 \n147     class ColorMapping:\n148         COLORS = {\n149             \"red\": \"\\x1b[31m\",\n150             \"green\": \"\\x1b[32m\",\n151             \"yellow\": \"\\x1b[33m\",\n152             \"bold\": \"\\x1b[1m\",\n153             \"reset\": \"\\x1b[0m\",\n154             \"kw\": \"\\x1b[94m\",\n155             \"hl-reset\": \"\\x1b[39;49;00m\",\n156             \"function\": \"\\x1b[92m\",\n157             \"number\": \"\\x1b[94m\",\n158             \"str\": \"\\x1b[33m\",\n159             \"print\": \"\\x1b[96m\",\n160         }\n161         RE_COLORS = {k: re.escape(v) for k, v in COLORS.items()}\n162 \n163         @classmethod\n164         def format(cls, lines: List[str]) -> List[str]:\n165             \"\"\"Straightforward replacement of color names to their ASCII codes.\"\"\"\n166             return [line.format(**cls.COLORS) for line in lines]\n167 \n168         @classmethod\n169         def format_for_fnmatch(cls, lines: List[str]) -> List[str]:\n170             \"\"\"Replace color names for use with LineMatcher.fnmatch_lines\"\"\"\n171             return [line.format(**cls.COLORS).replace(\"[\", \"[[]\") for line in lines]\n172 \n173         @classmethod\n174         def format_for_rematch(cls, lines: List[str]) -> List[str]:\n175             \"\"\"Replace color names for use with LineMatcher.re_match_lines\"\"\"\n176             return [line.format(**cls.RE_COLORS) for line in lines]\n177 \n178     return ColorMapping\n179 \n180 \n181 @pytest.fixture\n182 def mock_timing(monkeypatch: MonkeyPatch):\n183     \"\"\"Mocks _pytest.timing with a known object that can be used to control timing in tests\n184     deterministically.\n185 \n186     pytest itself should always use functions from `_pytest.timing` instead of `time` directly.\n187 \n188     This then allows us more control over time during testing, if testing code also\n189     uses `_pytest.timing` functions.\n190 \n191     Time is static, and only advances through `sleep` calls, thus tests might sleep over large\n192     numbers and obtain accurate time() calls at the end, making tests reliable and instant.\n193     \"\"\"\n194     import attr\n195 \n196     @attr.s\n197     class MockTiming:\n198 \n199         _current_time = attr.ib(default=1590150050.0)\n200 \n201         def sleep(self, seconds):\n202             self._current_time += seconds\n203 \n204         def time(self):\n205             return self._current_time\n206 \n207         def patch(self):\n208             from _pytest import timing\n209 \n210             monkeypatch.setattr(timing, \"sleep\", self.sleep)\n211             monkeypatch.setattr(timing, \"time\", self.time)\n212             monkeypatch.setattr(timing, \"perf_counter\", self.time)\n213 \n214     result = MockTiming()\n215     result.patch()\n216     return result\n",
        "intended_behavior": "Ensure that custom fixtures and pytest hooks support the collection and execution of staticmethod and classmethod tests. If these methods are being excluded or not run due to custom logic, this logic should be adjusted to include them explicitly or handle their execution correctly."
    }
]