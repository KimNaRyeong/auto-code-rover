[
    {
        "rel_file_path": "django/utils/http.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.1/django/utils/http.py",
        "start": 158,
        "end": 191,
        "class_name": null,
        "method_name": "parse_http_date",
        "code": "158 def parse_http_date(date):\n159     \"\"\"\n160     Parse a date format as specified by HTTP RFC7231 section 7.1.1.1.\n161 \n162     The three formats allowed by the RFC are accepted, even if only the first\n163     one is still in widespread use.\n164 \n165     Return an integer expressed in seconds since the epoch, in UTC.\n166     \"\"\"\n167     # email.utils.parsedate() does the job for RFC1123 dates; unfortunately\n168     # RFC7231 makes it mandatory to support RFC850 dates too. So we roll\n169     # our own RFC-compliant parsing.\n170     for regex in RFC1123_DATE, RFC850_DATE, ASCTIME_DATE:\n171         m = regex.match(date)\n172         if m is not None:\n173             break\n174     else:\n175         raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n176     try:\n177         year = int(m.group('year'))\n178         if year < 100:\n179             if year < 70:\n180                 year += 2000\n181             else:\n182                 year += 1900\n183         month = MONTHS.index(m.group('mon').lower()) + 1\n184         day = int(m.group('day'))\n185         hour = int(m.group('hour'))\n186         min = int(m.group('min'))\n187         sec = int(m.group('sec'))\n188         result = datetime.datetime(year, month, day, hour, min, sec)\n189         return calendar.timegm(result.utctimetuple())\n190     except Exception as exc:\n191         raise ValueError(\"%r is not a valid date\" % date) from exc\n",
        "intended_behavior": "The `parse_http_date` method should update its handling of two-digit years to be compliant with RFC 7231, which advises that a two-digit year that appears more than 50 years in the future should be interpreted as representing the most recent year in the past that had the same last two digits. Specifically:\n\n- The logic in lines 178 to 182 needs to be enhanced to dynamically determine the century of a two-digit year based on the current year at the time of parsing. This means if parsing happens in the year 2023, and the two-digit year is '30', this should be interpreted as 2030 because it is not more than 50 years in the future. Conversely, if the two-digit year is '95', then it should be interpreted as 1995, as that is the most recent past year with the same last two digits.\n\n- The updated logic should calculate the full year from the two digits by assessing the current year and determining whether adding the two digits to either 1900 or 2000 would place the year more than 50 years in the future. If so, it should select the century that places the year in the past, not the future.\n\nSuch a dynamic adjustment adheres to the RFC 7231 stipulation and ensures that dates are interpreted correctly, regardless of the current year, ensuring both backward compatibility and future-proofing the function."
    }
]