[
    {
        "rel_file_path": "sklearn/model_selection/_split.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/scikit-learn__scikit-learn/setup_scikit-learn__scikit-learn__0.22/sklearn/model_selection/_split.py",
        "start": 1066,
        "end": 1164,
        "class_name": "_RepeatedSplits",
        "method_name": null,
        "code": "1066 class _RepeatedSplits(metaclass=ABCMeta):\n1067     \"\"\"Repeated splits for an arbitrary randomized CV splitter.\n1068 \n1069     Repeats splits for cross-validators n times with different randomization\n1070     in each repetition.\n1071 \n1072     Parameters\n1073     ----------\n1074     cv : callable\n1075         Cross-validator class.\n1076 \n1077     n_repeats : int, default=10\n1078         Number of times cross-validator needs to be repeated.\n1079 \n1080     random_state : int, RandomState instance or None, optional, default=None\n1081         If int, random_state is the seed used by the random number generator;\n1082         If RandomState instance, random_state is the random number generator;\n1083         If None, the random number generator is the RandomState instance used\n1084         by `np.random`.\n1085 \n1086     **cvargs : additional params\n1087         Constructor parameters for cv. Must not contain random_state\n1088         and shuffle.\n1089     \"\"\"\n1090     def __init__(self, cv, n_repeats=10, random_state=None, **cvargs):\n1091         if not isinstance(n_repeats, numbers.Integral):\n1092             raise ValueError(\"Number of repetitions must be of Integral type.\")\n1093 \n1094         if n_repeats <= 0:\n1095             raise ValueError(\"Number of repetitions must be greater than 0.\")\n1096 \n1097         if any(key in cvargs for key in ('random_state', 'shuffle')):\n1098             raise ValueError(\n1099                 \"cvargs must not contain random_state or shuffle.\")\n1100 \n1101         self.cv = cv\n1102         self.n_repeats = n_repeats\n1103         self.random_state = random_state\n1104         self.cvargs = cvargs\n1105 \n1106     def split(self, X, y=None, groups=None):\n1107         \"\"\"Generates indices to split data into training and test set.\n1108 \n1109         Parameters\n1110         ----------\n1111         X : array-like, shape (n_samples, n_features)\n1112             Training data, where n_samples is the number of samples\n1113             and n_features is the number of features.\n1114 \n1115         y : array-like, of length n_samples\n1116             The target variable for supervised learning problems.\n1117 \n1118         groups : array-like, with shape (n_samples,), optional\n1119             Group labels for the samples used while splitting the dataset into\n1120             train/test set.\n1121 \n1122         Yields\n1123         ------\n1124         train : ndarray\n1125             The training set indices for that split.\n1126 \n1127         test : ndarray\n1128             The testing set indices for that split.\n1129         \"\"\"\n1130         n_repeats = self.n_repeats\n1131         rng = check_random_state(self.random_state)\n1132 \n1133         for idx in range(n_repeats):\n1134             cv = self.cv(random_state=rng, shuffle=True,\n1135                          **self.cvargs)\n1136             for train_index, test_index in cv.split(X, y, groups):\n1137                 yield train_index, test_index\n1138 \n1139     def get_n_splits(self, X=None, y=None, groups=None):\n1140         \"\"\"Returns the number of splitting iterations in the cross-validator\n1141 \n1142         Parameters\n1143         ----------\n1144         X : object\n1145             Always ignored, exists for compatibility.\n1146             ``np.zeros(n_samples)`` may be used as a placeholder.\n1147 \n1148         y : object\n1149             Always ignored, exists for compatibility.\n1150             ``np.zeros(n_samples)`` may be used as a placeholder.\n1151 \n1152         groups : array-like, with shape (n_samples,), optional\n1153             Group labels for the samples used while splitting the dataset into\n1154             train/test set.\n1155 \n1156         Returns\n1157         -------\n1158         n_splits : int\n1159             Returns the number of splitting iterations in the cross-validator.\n1160         \"\"\"\n1161         rng = check_random_state(self.random_state)\n1162         cv = self.cv(random_state=rng, shuffle=True,\n1163                      **self.cvargs)\n1164         return cv.get_n_splits(X, y, groups) * self.n_repeats\n",
        "intended_behavior": "Implement a `__repr__` method within the `_RepeatedSplits` class that dynamically constructs a string representation of instances, including the class name and the initialized parameters (such as `n_repeats` and `random_state`). This `__repr__` method should be designed to automatically adapt to instances of any subclass, providing a clear, accurate representation without requiring subclasses to override the method unless they have unique attributes. For example, the method could use `self.__class__.__name__` to dynamically insert the class name into the string. The output format should closely resemble the proposed format, matching the expectations set in the issue description: `ClassName(n_splits=X, n_repeats=Y, random_state=Z)`. This solution offers a central fix that benefits both the direct subclasses mentioned in the issue and any future subclasses of `_RepeatedSplits`."
    }
]