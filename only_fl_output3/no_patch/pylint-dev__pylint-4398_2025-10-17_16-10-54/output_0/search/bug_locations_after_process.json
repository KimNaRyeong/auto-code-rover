[
    {
        "rel_file_path": "pylint/lint/run.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/pylint-dev__pylint/setup_pylint-dev__pylint__2.8/pylint/lint/run.py",
        "start": 1,
        "end": 470,
        "class_name": null,
        "method_name": null,
        "code": "1 # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n2 # For details: https://github.com/PyCQA/pylint/blob/master/LICENSE\n3 \n4 import os\n5 import sys\n6 import warnings\n7 \n8 from pylint import __pkginfo__, config, extensions, interfaces\n9 from pylint.constants import full_version\n10 from pylint.lint.pylinter import PyLinter\n11 from pylint.lint.utils import ArgumentPreprocessingError, preprocess_options\n12 from pylint.utils import utils\n13 \n14 try:\n15     import multiprocessing\n16 except ImportError:\n17     multiprocessing = None  # type: ignore\n18 \n19 \n20 def _cpu_count() -> int:\n21     \"\"\"Use sched_affinity if available for virtualized or containerized environments.\"\"\"\n22     sched_getaffinity = getattr(os, \"sched_getaffinity\", None)\n23     # pylint: disable=not-callable,using-constant-test\n24     if sched_getaffinity:\n25         return len(sched_getaffinity(0))\n26     if multiprocessing:\n27         return multiprocessing.cpu_count()\n28     return 1\n29 \n30 \n31 def cb_list_extensions(option, optname, value, parser):\n32     \"\"\"List all the extensions under pylint.extensions\"\"\"\n33 \n34     for filename in os.listdir(os.path.dirname(extensions.__file__)):\n35         if filename.endswith(\".py\") and not filename.startswith(\"_\"):\n36             extension_name, _, _ = filename.partition(\".\")\n37             print(f\"pylint.extensions.{extension_name}\")\n38     sys.exit(0)\n39 \n40 \n41 def cb_list_confidence_levels(option, optname, value, parser):\n42     for level in interfaces.CONFIDENCE_LEVELS:\n43         print(\"%-18s: %s\" % level)\n44     sys.exit(0)\n45 \n46 \n47 def cb_init_hook(optname, value):\n48     \"\"\"exec arbitrary code to set sys.path for instance\"\"\"\n49     exec(value)  # pylint: disable=exec-used\n50 \n51 \n52 UNUSED_PARAM_SENTINEL = object()\n53 \n54 \n55 class Run:\n56     \"\"\"helper class to use as main for pylint :\n57 \n58     run(*sys.argv[1:])\n59     \"\"\"\n60 \n61     LinterClass = PyLinter\n62     option_groups = (\n63         (\n64             \"Commands\",\n65             \"Options which are actually commands. Options in this \\\n66 group are mutually exclusive.\",\n67         ),\n68     )\n69 \n70     @staticmethod\n71     def _return_one(*args):  # pylint: disable=unused-argument\n72         return 1\n73 \n74     def __init__(\n75         self,\n76         args,\n77         reporter=None,\n78         exit=True,\n79         do_exit=UNUSED_PARAM_SENTINEL,\n80     ):  # pylint: disable=redefined-builtin\n81         self._rcfile = None\n82         self._output = None\n83         self._version_asked = False\n84         self._plugins = []\n85         self.verbose = None\n86         try:\n87             preprocess_options(\n88                 args,\n89                 {\n90                     # option: (callback, takearg)\n91                     \"version\": (self.version_asked, False),\n92                     \"init-hook\": (cb_init_hook, True),\n93                     \"rcfile\": (self.cb_set_rcfile, True),\n94                     \"load-plugins\": (self.cb_add_plugins, True),\n95                     \"verbose\": (self.cb_verbose_mode, False),\n96                     \"output\": (self.cb_set_output, True),\n97                 },\n98             )\n99         except ArgumentPreprocessingError as ex:\n100             print(ex, file=sys.stderr)\n101             sys.exit(32)\n102 \n103         self.linter = linter = self.LinterClass(\n104             (\n105                 (\n106                     \"rcfile\",\n107                     {\n108                         \"action\": \"callback\",\n109                         \"callback\": Run._return_one,\n110                         \"group\": \"Commands\",\n111                         \"type\": \"string\",\n112                         \"metavar\": \"<file>\",\n113                         \"help\": \"Specify a configuration file to load.\",\n114                     },\n115                 ),\n116                 (\n117                     \"output\",\n118                     {\n119                         \"action\": \"callback\",\n120                         \"callback\": Run._return_one,\n121                         \"group\": \"Commands\",\n122                         \"type\": \"string\",\n123                         \"metavar\": \"<file>\",\n124                         \"help\": \"Specify an output file.\",\n125                     },\n126                 ),\n127                 (\n128                     \"init-hook\",\n129                     {\n130                         \"action\": \"callback\",\n131                         \"callback\": Run._return_one,\n132                         \"type\": \"string\",\n133                         \"metavar\": \"<code>\",\n134                         \"level\": 1,\n135                         \"help\": \"Python code to execute, usually for sys.path \"\n136                         \"manipulation such as pygtk.require().\",\n137                     },\n138                 ),\n139                 (\n140                     \"help-msg\",\n141                     {\n142                         \"action\": \"callback\",\n143                         \"type\": \"string\",\n144                         \"metavar\": \"<msg-id>\",\n145                         \"callback\": self.cb_help_message,\n146                         \"group\": \"Commands\",\n147                         \"help\": \"Display a help message for the given message id and \"\n148                         \"exit. The value may be a comma separated list of message ids.\",\n149                     },\n150                 ),\n151                 (\n152                     \"list-msgs\",\n153                     {\n154                         \"action\": \"callback\",\n155                         \"metavar\": \"<msg-id>\",\n156                         \"callback\": self.cb_list_messages,\n157                         \"group\": \"Commands\",\n158                         \"level\": 1,\n159                         \"help\": \"Generate pylint's messages.\",\n160                     },\n161                 ),\n162                 (\n163                     \"list-msgs-enabled\",\n164                     {\n165                         \"action\": \"callback\",\n166                         \"metavar\": \"<msg-id>\",\n167                         \"callback\": self.cb_list_messages_enabled,\n168                         \"group\": \"Commands\",\n169                         \"level\": 1,\n170                         \"help\": \"Display a list of what messages are enabled \"\n171                         \"and disabled with the given configuration.\",\n172                     },\n173                 ),\n174                 (\n175                     \"list-groups\",\n176                     {\n177                         \"action\": \"callback\",\n178                         \"metavar\": \"<msg-id>\",\n179                         \"callback\": self.cb_list_groups,\n180                         \"group\": \"Commands\",\n181                         \"level\": 1,\n182                         \"help\": \"List pylint's message groups.\",\n183                     },\n184                 ),\n185                 (\n186                     \"list-conf-levels\",\n187                     {\n188                         \"action\": \"callback\",\n189                         \"callback\": cb_list_confidence_levels,\n190                         \"group\": \"Commands\",\n191                         \"level\": 1,\n192                         \"help\": \"Generate pylint's confidence levels.\",\n193                     },\n194                 ),\n195                 (\n196                     \"list-extensions\",\n197                     {\n198                         \"action\": \"callback\",\n199                         \"callback\": cb_list_extensions,\n200                         \"group\": \"Commands\",\n201                         \"level\": 1,\n202                         \"help\": \"List available extensions.\",\n203                     },\n204                 ),\n205                 (\n206                     \"full-documentation\",\n207                     {\n208                         \"action\": \"callback\",\n209                         \"metavar\": \"<msg-id>\",\n210                         \"callback\": self.cb_full_documentation,\n211                         \"group\": \"Commands\",\n212                         \"level\": 1,\n213                         \"help\": \"Generate pylint's full documentation.\",\n214                     },\n215                 ),\n216                 (\n217                     \"generate-rcfile\",\n218                     {\n219                         \"action\": \"callback\",\n220                         \"callback\": self.cb_generate_config,\n221                         \"group\": \"Commands\",\n222                         \"help\": \"Generate a sample configuration file according to \"\n223                         \"the current configuration. You can put other options \"\n224                         \"before this one to get them in the generated \"\n225                         \"configuration.\",\n226                     },\n227                 ),\n228                 (\n229                     \"generate-man\",\n230                     {\n231                         \"action\": \"callback\",\n232                         \"callback\": self.cb_generate_manpage,\n233                         \"group\": \"Commands\",\n234                         \"help\": \"Generate pylint's man page.\",\n235                         \"hide\": True,\n236                     },\n237                 ),\n238                 (\n239                     \"errors-only\",\n240                     {\n241                         \"action\": \"callback\",\n242                         \"callback\": self.cb_error_mode,\n243                         \"short\": \"E\",\n244                         \"help\": \"In error mode, checkers without error messages are \"\n245                         \"disabled and for others, only the ERROR messages are \"\n246                         \"displayed, and no reports are done by default.\",\n247                     },\n248                 ),\n249                 (\n250                     \"py3k\",\n251                     {\n252                         \"action\": \"callback\",\n253                         \"callback\": self.cb_python3_porting_mode,\n254                         \"help\": \"In Python 3 porting mode, all checkers will be \"\n255                         \"disabled and only messages emitted by the porting \"\n256                         \"checker will be displayed.\",\n257                     },\n258                 ),\n259                 (\n260                     \"verbose\",\n261                     {\n262                         \"action\": \"callback\",\n263                         \"callback\": self.cb_verbose_mode,\n264                         \"short\": \"v\",\n265                         \"help\": \"In verbose mode, extra non-checker-related info \"\n266                         \"will be displayed.\",\n267                     },\n268                 ),\n269             ),\n270             option_groups=self.option_groups,\n271             pylintrc=self._rcfile,\n272         )\n273         # register standard checkers\n274         if self._version_asked:\n275             print(full_version)\n276             sys.exit(0)\n277         linter.load_default_plugins()\n278         # load command line plugins\n279         linter.load_plugin_modules(self._plugins)\n280         # add some help section\n281         linter.add_help_section(\"Environment variables\", config.ENV_HELP, level=1)\n282         linter.add_help_section(\n283             \"Output\",\n284             \"Using the default text output, the message format is :                          \\n\"\n285             \"                                                                                \\n\"\n286             \"        MESSAGE_TYPE: LINE_NUM:[OBJECT:] MESSAGE                                \\n\"\n287             \"                                                                                \\n\"\n288             \"There are 5 kind of message types :                                             \\n\"\n289             \"    * (C) convention, for programming standard violation                        \\n\"\n290             \"    * (R) refactor, for bad code smell                                          \\n\"\n291             \"    * (W) warning, for python specific problems                                 \\n\"\n292             \"    * (E) error, for probable bugs in the code                                  \\n\"\n293             \"    * (F) fatal, if an error occurred which prevented pylint from doing further\\n\"\n294             \"processing.\\n\",\n295             level=1,\n296         )\n297         linter.add_help_section(\n298             \"Output status code\",\n299             \"Pylint should leave with following status code:                                 \\n\"\n300             \"    * 0 if everything went fine                                                 \\n\"\n301             \"    * 1 if a fatal message was issued                                           \\n\"\n302             \"    * 2 if an error message was issued                                          \\n\"\n303             \"    * 4 if a warning message was issued                                         \\n\"\n304             \"    * 8 if a refactor message was issued                                        \\n\"\n305             \"    * 16 if a convention message was issued                                     \\n\"\n306             \"    * 32 on usage error                                                         \\n\"\n307             \"                                                                                \\n\"\n308             \"status 1 to 16 will be bit-ORed so you can know which different categories has\\n\"\n309             \"been issued by analysing pylint output status code\\n\",\n310             level=1,\n311         )\n312         # read configuration\n313         linter.disable(\"I\")\n314         linter.enable(\"c-extension-no-member\")\n315         try:\n316             linter.read_config_file(verbose=self.verbose)\n317         except OSError as ex:\n318             print(ex, file=sys.stderr)\n319             sys.exit(32)\n320 \n321         config_parser = linter.cfgfile_parser\n322         # run init hook, if present, before loading plugins\n323         if config_parser.has_option(\"MASTER\", \"init-hook\"):\n324             cb_init_hook(\n325                 \"init-hook\", utils._unquote(config_parser.get(\"MASTER\", \"init-hook\"))\n326             )\n327         # is there some additional plugins in the file configuration, in\n328         if config_parser.has_option(\"MASTER\", \"load-plugins\"):\n329             plugins = utils._splitstrip(config_parser.get(\"MASTER\", \"load-plugins\"))\n330             linter.load_plugin_modules(plugins)\n331         # now we can load file config and command line, plugins (which can\n332         # provide options) have been registered\n333         linter.load_config_file()\n334 \n335         if reporter:\n336             # if a custom reporter is provided as argument, it may be overridden\n337             # by file parameters, so re-set it here, but before command line\n338             # parsing so it's still overrideable by command line option\n339             linter.set_reporter(reporter)\n340         try:\n341             args = linter.load_command_line_configuration(args)\n342         except SystemExit as exc:\n343             if exc.code == 2:  # bad options\n344                 exc.code = 32\n345             raise\n346         if not args:\n347             print(linter.help())\n348             sys.exit(32)\n349 \n350         if linter.config.jobs < 0:\n351             print(\n352                 \"Jobs number (%d) should be greater than or equal to 0\"\n353                 % linter.config.jobs,\n354                 file=sys.stderr,\n355             )\n356             sys.exit(32)\n357         if linter.config.jobs > 1 or linter.config.jobs == 0:\n358             if multiprocessing is None:\n359                 print(\n360                     \"Multiprocessing library is missing, fallback to single process\",\n361                     file=sys.stderr,\n362                 )\n363                 linter.set_option(\"jobs\", 1)\n364             elif linter.config.jobs == 0:\n365                 linter.config.jobs = _cpu_count()\n366 \n367         # We have loaded configuration from config file and command line. Now, we can\n368         # load plugin specific configuration.\n369         linter.load_plugin_configuration()\n370 \n371         if self._output:\n372             try:\n373                 with open(self._output, \"w\") as output:\n374                     linter.reporter.set_output(output)\n375                     linter.check(args)\n376                     score_value = linter.generate_reports()\n377             except OSError as ex:\n378                 print(ex, file=sys.stderr)\n379                 sys.exit(32)\n380         else:\n381             linter.check(args)\n382             score_value = linter.generate_reports()\n383 \n384         if do_exit is not UNUSED_PARAM_SENTINEL:\n385             warnings.warn(\n386                 \"do_exit is deprecated and it is going to be removed in a future version.\",\n387                 DeprecationWarning,\n388             )\n389             exit = do_exit\n390 \n391         if exit:\n392             if linter.config.exit_zero:\n393                 sys.exit(0)\n394             else:\n395                 if score_value and score_value >= linter.config.fail_under:\n396                     sys.exit(0)\n397                 sys.exit(self.linter.msg_status)\n398 \n399     def version_asked(self, _, __):\n400         \"\"\"callback for version (i.e. before option parsing)\"\"\"\n401         self._version_asked = True\n402 \n403     def cb_set_rcfile(self, name, value):\n404         \"\"\"callback for option preprocessing (i.e. before option parsing)\"\"\"\n405         self._rcfile = value\n406 \n407     def cb_set_output(self, name, value):\n408         \"\"\"callback for option preprocessing (i.e. before option parsing)\"\"\"\n409         self._output = value\n410 \n411     def cb_add_plugins(self, name, value):\n412         \"\"\"callback for option preprocessing (i.e. before option parsing)\"\"\"\n413         self._plugins.extend(utils._splitstrip(value))\n414 \n415     def cb_error_mode(self, *args, **kwargs):\n416         \"\"\"error mode:\n417         * disable all but error messages\n418         * disable the 'miscellaneous' checker which can be safely deactivated in\n419           debug\n420         * disable reports\n421         * do not save execution information\n422         \"\"\"\n423         self.linter.error_mode()\n424 \n425     def cb_generate_config(self, *args, **kwargs):\n426         \"\"\"optik callback for sample config file generation\"\"\"\n427         self.linter.generate_config(skipsections=(\"COMMANDS\",))\n428         sys.exit(0)\n429 \n430     def cb_generate_manpage(self, *args, **kwargs):\n431         \"\"\"optik callback for sample config file generation\"\"\"\n432         self.linter.generate_manpage(__pkginfo__)\n433         sys.exit(0)\n434 \n435     def cb_help_message(self, option, optname, value, parser):\n436         \"\"\"optik callback for printing some help about a particular message\"\"\"\n437         self.linter.msgs_store.help_message(utils._splitstrip(value))\n438         sys.exit(0)\n439 \n440     def cb_full_documentation(self, option, optname, value, parser):\n441         \"\"\"optik callback for printing full documentation\"\"\"\n442         self.linter.print_full_documentation()\n443         sys.exit(0)\n444 \n445     def cb_list_messages(self, option, optname, value, parser):\n446         \"\"\"optik callback for printing available messages\"\"\"\n447         self.linter.msgs_store.list_messages()\n448         sys.exit(0)\n449 \n450     def cb_list_messages_enabled(self, option, optname, value, parser):\n451         \"\"\"optik callback for printing available messages\"\"\"\n452         self.linter.list_messages_enabled()\n453         sys.exit(0)\n454 \n455     def cb_list_groups(self, *args, **kwargs):\n456         \"\"\"List all the check groups that pylint knows about\n457 \n458         These should be useful to know what check groups someone can disable\n459         or enable.\n460         \"\"\"\n461         for check in self.linter.get_checker_names():\n462             print(check)\n463         sys.exit(0)\n464 \n465     def cb_python3_porting_mode(self, *args, **kwargs):\n466         \"\"\"Activate only the python3 porting checker.\"\"\"\n467         self.linter.python3_porting_mode()\n468 \n469     def cb_verbose_mode(self, *args, **kwargs):\n470         self.verbose = True\n",
        "intended_behavior": "This file likely contains the main execution path and decision-making logic for exiting with certain codes based on lint results. To resolve the issue, a new logic path should be added to evaluate detected issues against the new `--fail-on` criteria (specific issue types or codes). This logic should be able to override the `--fail-under` behavior if necessary, without disrupting the existing functionality for users not using the new option. This requires implementing or modifying a method within this file to include checking against the `--fail-on` criteria before deciding the exit code. Existing functionality around exit codes, especially related to the `--fail-under` option, should be preserved unless explicitly overridden by the new option."
    }
]