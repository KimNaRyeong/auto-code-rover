2025-10-17 12:05:12.554 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-17 12:05:15.247 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1152, output_tokens=12, cost=0.011880
2025-10-17 12:05:29.421 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1332, output_tokens=647, cost=0.032730
2025-10-17 12:05:30.630 | INFO     | registered non reproducing test 0
2025-10-17 12:05:54.345 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3093, output_tokens=723, cost=0.052620
2025-10-17 12:05:55.492 | INFO     | registered non reproducing test 1
2025-10-17 12:06:13.868 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3174, output_tokens=742, cost=0.054000
2025-10-17 12:06:15.022 | INFO     | registered non reproducing test 2
2025-10-17 12:06:15.022 | WARNING  | Failed to write a reproducer test; skipping reproducer tracing
2025-10-17 12:06:15.029 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-17 12:06:24.033 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1455, output_tokens=365, cost=0.025500
2025-10-17 12:06:24.041 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-17 12:06:28.721 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=719, output_tokens=133, cost=0.011180
2025-10-17 12:06:28.722 | DEBUG    | Extracted a valid json.
2025-10-17 12:06:28.722 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_class(\"ExpressionWrapper\")",
        "search_method_in_class(\"output_field\", \"ExpressionWrapper\")",
        "search_method_in_class(\"_resolve_output_field\", \"ExpressionWrapper\")",
        "search_method(\"as_sql\")",
        "search_class(\"FieldError\")",
        "search_method(\"select_format\")",
        "search_method_in_file(\"pre_sql_setup\", \"django/db/models/sql/compiler.py\")",
        "search_method_in_file(\"get_group_by\", \"django/db/models/sql/compiler.py\")",
        "search_code(\"select_format\")"
    ],
    "bug_locations": []
}
2025-10-17 12:06:28.848 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-17 12:06:28.848 | DEBUG    | <Agent search> Analyzing search results.
2025-10-17 12:06:50.869 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=6419, output_tokens=842, cost=0.089450
2025-10-17 12:06:50.885 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-17 12:07:02.850 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=7477, output_tokens=412, cost=0.087130
2025-10-17 12:07:02.859 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-17 12:07:13.085 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=766, output_tokens=361, cost=0.018490
2025-10-17 12:07:13.086 | DEBUG    | Extracted a valid json.
2025-10-17 12:07:13.092 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations": [
        {
            "file": "django/db/models/expressions.py",
            "class": "ExpressionWrapper",
            "method": "",
            "intended_behavior": "The `ExpressionWrapper` class should ensure that the `output_field` for combined expressions is preserved through all operations, specifically when the expressions involve different types of fields. This behavior must maintain existing functionality while also providing a way to correctly infer or set the `output_field` for complex expressions. Potentially, enhancing the `__init__` or introducing a new method to better handle or verify `output_field` in cases of combined expressions could rectify the regression. This includes the implementation of a robust mechanism for inferring the appropriate `output_field` based on the types of the fields involved in the expression if it is not explicitly provided."
        },
        {
            "file": "django/db/models/sql/compiler.py",
            "class": "",
            "method": "",
            "intended_behavior": "These methods in the SQL compiler should account for and correctly handle the `output_field` specified by `ExpressionWrapper`, ensuring that it is correctly applied in the SQL query, especially in the `GROUP BY`, `ORDER BY`, and `SELECT` clauses. If there is indeed a flaw in how these methods are handling expressions wrapped in `ExpressionWrapper`, particularly when it comes to recognizing and applying the `output_field`, fixing this would involve ensuring that the compiler accurately respects and utilizes the `output_field` information provided by such expressions, thus preventing the `FieldError` seen. This includes correctly handling complex expressions where fields of differing types are combined, ensuring they do not lose their explicit `output_field` specification through the query construction process."
        }
    ]
}
2025-10-17 12:07:13.106 | DEBUG    | Bug location extracted successfully: [<file>django/db/models/expressions.py</file>
<class>ExpressionWrapper</class>
<method>None</method>
<code>
853 class ExpressionWrapper(Expression):
854     """
855     An expression that can wrap another expression so that it can provide
856     extra context to the inner expression, such as the output_field.
857     """
858 
859     def __init__(self, expression, output_field):
860         super().__init__(output_field=output_field)
861         if getattr(expression, '_output_field_or_none', True) is None:
862             expression = expression.copy()
863             expression.output_field = output_field
864         self.expression = expression
865 
866     def set_source_expressions(self, exprs):
867         self.expression = exprs[0]
868 
869     def get_source_expressions(self):
870         return [self.expression]
871 
872     def get_group_by_cols(self, alias=None):
873         return self.expression.get_group_by_cols(alias=alias)
874 
875     def as_sql(self, compiler, connection):
876         return self.expression.as_sql(compiler, connection)
877 
878     def __repr__(self):
879         return "{}({})".format(self.__class__.__name__, self.expression)

</code><intended_behavior>The `ExpressionWrapper` class should ensure that the `output_field` for combined expressions is preserved through all operations, specifically when the expressions involve different types of fields. This behavior must maintain existing functionality while also providing a way to correctly infer or set the `output_field` for complex expressions. Potentially, enhancing the `__init__` or introducing a new method to better handle or verify `output_field` in cases of combined expressions could rectify the regression. This includes the implementation of a robust mechanism for inferring the appropriate `output_field` based on the types of the fields involved in the expression if it is not explicitly provided.</intended_behavior>, <file>django/db/models/sql/compiler.py</file>
<class>None</class>
<method>None</method>
<code>
1 import collections
2 import re
3 from functools import partial
4 from itertools import chain
5 
6 from django.core.exceptions import EmptyResultSet, FieldError
7 from django.db import DatabaseError, NotSupportedError
8 from django.db.models.constants import LOOKUP_SEP
9 from django.db.models.expressions import F, OrderBy, Random, RawSQL, Ref, Value
10 from django.db.models.functions import Cast
11 from django.db.models.query_utils import Q, select_related_descend
12 from django.db.models.sql.constants import (
13     CURSOR, GET_ITERATOR_CHUNK_SIZE, MULTI, NO_RESULTS, ORDER_DIR, SINGLE,
14 )
15 from django.db.models.sql.query import Query, get_order_dir
16 from django.db.transaction import TransactionManagementError
17 from django.utils.functional import cached_property
18 from django.utils.hashable import make_hashable
19 from django.utils.regex_helper import _lazy_re_compile
20 
21 
22 class SQLCompiler:
23     # Multiline ordering SQL clause may appear from RawSQL.
24     ordering_parts = _lazy_re_compile(
25         r'^(.*)\s(?:ASC|DESC).*',
26         re.MULTILINE | re.DOTALL,
27     )
28 
29     def __init__(self, query, connection, using):
30         self.query = query
31         self.connection = connection
32         self.using = using
33         self.quote_cache = {'*': '*'}
34         # The select, klass_info, and annotations are needed by QuerySet.iterator()
35         # these are set as a side-effect of executing the query. Note that we calculate
36         # separately a list of extra select columns needed for grammatical correctness
37         # of the query, but these columns are not included in self.select.
38         self.select = None
39         self.annotation_col_map = None
40         self.klass_info = None
41         self._meta_ordering = None
42 
43     def setup_query(self):
44         if all(self.query.alias_refcount[a] == 0 for a in self.query.alias_map):
45             self.query.get_initial_alias()
46         self.select, self.klass_info, self.annotation_col_map = self.get_select()
47         self.col_count = len(self.select)
48 
49     def pre_sql_setup(self):
50         """
51         Do any necessary class setup immediately prior to producing SQL. This
52         is for things that can't necessarily be done in __init__ because we
53         might not have all the pieces in place at that time.
54         """
55         self.setup_query()
56         order_by = self.get_order_by()
57         self.where, self.having = self.query.where.split_having()
58         extra_select = self.get_extra_select(order_by, self.select)
59         self.has_extra_select = bool(extra_select)
60         group_by = self.get_group_by(self.select + extra_select, order_by)
61         return extra_select, order_by, group_by
62 
63     def get_group_by(self, select, order_by):
64         """
65         Return a list of 2-tuples of form (sql, params).
66 
67         The logic of what exactly the GROUP BY clause contains is hard
68         to describe in other words than "if it passes the test suite,
69         then it is correct".
70         """
71         # Some examples:
72         #     SomeModel.objects.annotate(Count('somecol'))
73         #     GROUP BY: all fields of the model
74         #
75         #    SomeModel.objects.values('name').annotate(Count('somecol'))
76         #    GROUP BY: name
77         #
78         #    SomeModel.objects.annotate(Count('somecol')).values('name')
79         #    GROUP BY: all cols of the model
80         #
81         #    SomeModel.objects.values('name', 'pk').annotate(Count('somecol')).values('pk')
82         #    GROUP BY: name, pk
83         #
84         #    SomeModel.objects.values('name').annotate(Count('somecol')).values('pk')
85         #    GROUP BY: name, pk
86         #
87         # In fact, the self.query.group_by is the minimal set to GROUP BY. It
88         # can't be ever restricted to a smaller set, but additional columns in
89         # HAVING, ORDER BY, and SELECT clauses are added to it. Unfortunately
90         # the end result is that it is impossible to force the query to have
91         # a chosen GROUP BY clause - you can almost do this by using the form:
92         #     .values(*wanted_cols).annotate(AnAggregate())
93         # but any later annotations, extra selects, values calls that
94         # refer some column outside of the wanted_cols, order_by, or even
95         # filter calls can alter the GROUP BY clause.
96 
97         # The query.group_by is either None (no GROUP BY at all), True
98         # (group by select fields), or a list of expressions to be added
99         # to the group by.
100         if self.query.group_by is None:
101             return []
102         expressions = []
103         if self.query.group_by is not True:
104             # If the group by is set to a list (by .values() call most likely),
105             # then we need to add everything in it to the GROUP BY clause.
106             # Backwards compatibility hack for setting query.group_by. Remove
107             # when  we have public API way of forcing the GROUP BY clause.
108             # Converts string references to expressions.
109             for expr in self.query.group_by:
110                 if not hasattr(expr, 'as_sql'):
111                     expressions.append(self.query.resolve_ref(expr))
112                 else:
113                     expressions.append(expr)
114         # Note that even if the group_by is set, it is only the minimal
115         # set to group by. So, we need to add cols in select, order_by, and
116         # having into the select in any case.
117         ref_sources = {
118             expr.source for expr in expressions if isinstance(expr, Ref)
119         }
120         for expr, _, _ in select:
121             # Skip members of the select clause that are already included
122             # by reference.
123             if expr in ref_sources:
124                 continue
125             cols = expr.get_group_by_cols()
126             for col in cols:
127                 expressions.append(col)
128         for expr, (sql, params, is_ref) in order_by:
129             # Skip References to the select clause, as all expressions in the
130             # select clause are already part of the group by.
131             if not is_ref:
132                 expressions.extend(expr.get_group_by_cols())
133         having_group_by = self.having.get_group_by_cols() if self.having else ()
134         for expr in having_group_by:
135             expressions.append(expr)
136         result = []
137         seen = set()
138         expressions = self.collapse_group_by(expressions, having_group_by)
139 
140         for expr in expressions:
141             sql, params = self.compile(expr)
142             sql, params = expr.select_format(self, sql, params)
143             params_hash = make_hashable(params)
144             if (sql, params_hash) not in seen:
145                 result.append((sql, params))
146                 seen.add((sql, params_hash))
147         return result
148 
149     def collapse_group_by(self, expressions, having):
150         # If the DB can group by primary key, then group by the primary key of
151         # query's main model. Note that for PostgreSQL the GROUP BY clause must
152         # include the primary key of every table, but for MySQL it is enough to
153         # have the main table's primary key.
154         if self.connection.features.allows_group_by_pk:
155             # Determine if the main model's primary key is in the query.
156             pk = None
157             for expr in expressions:
158                 # Is this a reference to query's base table primary key? If the
159                 # expression isn't a Col-like, then skip the expression.
160                 if (getattr(expr, 'target', None) == self.query.model._meta.pk and
161                         getattr(expr, 'alias', None) == self.query.base_table):
162                     pk = expr
163                     break
164             # If the main model's primary key is in the query, group by that
165             # field, HAVING expressions, and expressions associated with tables
166             # that don't have a primary key included in the grouped columns.
167             if pk:
168                 pk_aliases = {
169                     expr.alias for expr in expressions
170                     if hasattr(expr, 'target') and expr.target.primary_key
171                 }
172                 expressions = [pk] + [
173                     expr for expr in expressions
174                     if expr in having or (
175                         getattr(expr, 'alias', None) is not None and expr.alias not in pk_aliases
176                     )
177                 ]
178         elif self.connection.features.allows_group_by_selected_pks:
179             # Filter out all expressions associated with a table's primary key
180             # present in the grouped columns. This is done by identifying all
181             # tables that have their primary key included in the grouped
182             # columns and removing non-primary key columns referring to them.
183             # Unmanaged models are excluded because they could be representing
184             # database views on which the optimization might not be allowed.
185             pks = {
186                 expr for expr in expressions
187                 if (
188                     hasattr(expr, 'target') and
189                     expr.target.primary_key and
190                     self.connection.features.allows_group_by_selected_pks_on_model(expr.target.model)
191                 )
192             }
193             aliases = {expr.alias for expr in pks}
194             expressions = [
195                 expr for expr in expressions if expr in pks or getattr(expr, 'alias', None) not in aliases
196             ]
197         return expressions
198 
199     def get_select(self):
200         """
201         Return three values:
202         - a list of 3-tuples of (expression, (sql, params), alias)
203         - a klass_info structure,
204         - a dictionary of annotations
205 
206         The (sql, params) is what the expression will produce, and alias is the
207         "AS alias" for the column (possibly None).
208 
209         The klass_info structure contains the following information:
210         - The base model of the query.
211         - Which columns for that model are present in the query (by
212           position of the select clause).
213         - related_klass_infos: [f, klass_info] to descent into
214 
215         The annotations is a dictionary of {'attname': column position} values.
216         """
217         select = []
218         klass_info = None
219         annotations = {}
220         select_idx = 0
221         for alias, (sql, params) in self.query.extra_select.items():
222             annotations[alias] = select_idx
223             select.append((RawSQL(sql, params), alias))
224             select_idx += 1
225         assert not (self.query.select and self.query.default_cols)
226         if self.query.default_cols:
227             cols = self.get_default_columns()
228         else:
229             # self.query.select is a special case. These columns never go to
230             # any model.
231             cols = self.query.select
232         if cols:
233             select_list = []
234             for col in cols:
235                 select_list.append(select_idx)
236                 select.append((col, None))
237                 select_idx += 1
238             klass_info = {
239                 'model': self.query.model,
240                 'select_fields': select_list,
241             }
242         for alias, annotation in self.query.annotation_select.items():
243             annotations[alias] = select_idx
244             select.append((annotation, alias))
245             select_idx += 1
246 
247         if self.query.select_related:
248             related_klass_infos = self.get_related_selections(select)
249             klass_info['related_klass_infos'] = related_klass_infos
250 
251             def get_select_from_parent(klass_info):
252                 for ki in klass_info['related_klass_infos']:
253                     if ki['from_parent']:
254                         ki['select_fields'] = (klass_info['select_fields'] +
255                                                ki['select_fields'])
256                     get_select_from_parent(ki)
257             get_select_from_parent(klass_info)
258 
259         ret = []
260         for col, alias in select:
261             try:
262                 sql, params = self.compile(col)
263             except EmptyResultSet:
264                 # Select a predicate that's always False.
265                 sql, params = '0', ()
266             else:
267                 sql, params = col.select_format(self, sql, params)
268             ret.append((col, (sql, params), alias))
269         return ret, klass_info, annotations
270 
271     def get_order_by(self):
272         """
273         Return a list of 2-tuples of form (expr, (sql, params, is_ref)) for the
274         ORDER BY clause.
275 
276         The order_by clause can alter the select clause (for example it
277         can add aliases to clauses that do not yet have one, or it can
278         add totally new select clauses).
279         """
280         if self.query.extra_order_by:
281             ordering = self.query.extra_order_by
282         elif not self.query.default_ordering:
283             ordering = self.query.order_by
284         elif self.query.order_by:
285             ordering = self.query.order_by
286         elif self.query.get_meta().ordering:
287             ordering = self.query.get_meta().ordering
288             self._meta_ordering = ordering
289         else:
290             ordering = []
291         if self.query.standard_ordering:
292             asc, desc = ORDER_DIR['ASC']
293         else:
294             asc, desc = ORDER_DIR['DESC']
295 
296         order_by = []
297         for field in ordering:
298             if hasattr(field, 'resolve_expression'):
299                 if isinstance(field, Value):
300                     # output_field must be resolved for constants.
301                     field = Cast(field, field.output_field)
302                 if not isinstance(field, OrderBy):
303                     field = field.asc()
304                 if not self.query.standard_ordering:
305                     field = field.copy()
306                     field.reverse_ordering()
307                 order_by.append((field, False))
308                 continue
309             if field == '?':  # random
310                 order_by.append((OrderBy(Random()), False))
311                 continue
312 
313             col, order = get_order_dir(field, asc)
314             descending = order == 'DESC'
315 
316             if col in self.query.annotation_select:
317                 # Reference to expression in SELECT clause
318                 order_by.append((
319                     OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),
320                     True))
321                 continue
322             if col in self.query.annotations:
323                 # References to an expression which is masked out of the SELECT
324                 # clause.
325                 expr = self.query.annotations[col]
326                 if isinstance(expr, Value):
327                     # output_field must be resolved for constants.
328                     expr = Cast(expr, expr.output_field)
329                 order_by.append((OrderBy(expr, descending=descending), False))
330                 continue
331 
332             if '.' in field:
333                 # This came in through an extra(order_by=...) addition. Pass it
334                 # on verbatim.
335                 table, col = col.split('.', 1)
336                 order_by.append((
337                     OrderBy(
338                         RawSQL('%s.%s' % (self.quote_name_unless_alias(table), col), []),
339                         descending=descending
340                     ), False))
341                 continue
342 
343             if not self.query.extra or col not in self.query.extra:
344                 # 'col' is of the form 'field' or 'field1__field2' or
345                 # '-field1__field2__field', etc.
346                 order_by.extend(self.find_ordering_name(
347                     field, self.query.get_meta(), default_order=asc))
348             else:
349                 if col not in self.query.extra_select:
350                     order_by.append((
351                         OrderBy(RawSQL(*self.query.extra[col]), descending=descending),
352                         False))
353                 else:
354                     order_by.append((
355                         OrderBy(Ref(col, RawSQL(*self.query.extra[col])), descending=descending),
356                         True))
357         result = []
358         seen = set()
359 
360         for expr, is_ref in order_by:
361             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)
362             if self.query.combinator:
363                 src = resolved.get_source_expressions()[0]
364                 expr_src = expr.get_source_expressions()[0]
365                 # Relabel order by columns to raw numbers if this is a combined
366                 # query; necessary since the columns can't be referenced by the
367                 # fully qualified name and the simple column names may collide.
368                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):
369                     if is_ref and col_alias == src.refs:
370                         src = src.source
371                     elif col_alias and not (
372                         isinstance(expr_src, F) and col_alias == expr_src.name
373                     ):
374                         continue
375                     if src == sel_expr:
376                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
377                         break
378                 else:
379                     if col_alias:
380                         raise DatabaseError('ORDER BY term does not match any column in the result set.')
381                     # Add column used in ORDER BY clause without an alias to
382                     # the selected columns.
383                     self.query.add_select_col(src)
384                     resolved.set_source_expressions([RawSQL('%d' % len(self.query.select), ())])
385             sql, params = self.compile(resolved)
386             # Don't add the same column twice, but the order direction is
387             # not taken into account so we strip it. When this entire method
388             # is refactored into expressions, then we can check each part as we
389             # generate it.
390             without_ordering = self.ordering_parts.search(sql)[1]
391             params_hash = make_hashable(params)
392             if (without_ordering, params_hash) in seen:
393                 continue
394             seen.add((without_ordering, params_hash))
395             result.append((resolved, (sql, params, is_ref)))
396         return result
397 
398     def get_extra_select(self, order_by, select):
399         extra_select = []
400         if self.query.distinct and not self.query.distinct_fields:
401             select_sql = [t[1] for t in select]
402             for expr, (sql, params, is_ref) in order_by:
403                 without_ordering = self.ordering_parts.search(sql)[1]
404                 if not is_ref and (without_ordering, params) not in select_sql:
405                     extra_select.append((expr, (without_ordering, params), None))
406         return extra_select
407 
408     def quote_name_unless_alias(self, name):
409         """
410         A wrapper around connection.ops.quote_name that doesn't quote aliases
411         for table names. This avoids problems with some SQL dialects that treat
412         quoted strings specially (e.g. PostgreSQL).
413         """
414         if name in self.quote_cache:
415             return self.quote_cache[name]
416         if ((name in self.query.alias_map and name not in self.query.table_map) or
417                 name in self.query.extra_select or (
418                     self.query.external_aliases.get(name) and name not in self.query.table_map)):
419             self.quote_cache[name] = name
420             return name
421         r = self.connection.ops.quote_name(name)
422         self.quote_cache[name] = r
423         return r
424 
425     def compile(self, node):
426         vendor_impl = getattr(node, 'as_' + self.connection.vendor, None)
427         if vendor_impl:
428             sql, params = vendor_impl(self, self.connection)
429         else:
430             sql, params = node.as_sql(self, self.connection)
431         return sql, params
432 
433     def get_combinator_sql(self, combinator, all):
434         features = self.connection.features
435         compilers = [
436             query.get_compiler(self.using, self.connection)
437             for query in self.query.combined_queries if not query.is_empty()
438         ]
439         if not features.supports_slicing_ordering_in_compound:
440             for query, compiler in zip(self.query.combined_queries, compilers):
441                 if query.low_mark or query.high_mark:
442                     raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')
443                 if compiler.get_order_by():
444                     raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')
445         parts = ()
446         for compiler in compilers:
447             try:
448                 # If the columns list is limited, then all combined queries
449                 # must have the same columns list. Set the selects defined on
450                 # the query on all combined queries, if not already set.
451                 if not compiler.query.values_select and self.query.values_select:
452                     compiler.query = compiler.query.clone()
453                     compiler.query.set_values((
454                         *self.query.extra_select,
455                         *self.query.values_select,
456                         *self.query.annotation_select,
457                     ))
458                 part_sql, part_args = compiler.as_sql()
459                 if compiler.query.combinator:
460                     # Wrap in a subquery if wrapping in parentheses isn't
461                     # supported.
462                     if not features.supports_parentheses_in_compound:
463                         part_sql = 'SELECT * FROM ({})'.format(part_sql)
464                     # Add parentheses when combining with compound query if not
465                     # already added for all compound queries.
466                     elif not features.supports_slicing_ordering_in_compound:
467                         part_sql = '({})'.format(part_sql)
468                 parts += ((part_sql, part_args),)
469             except EmptyResultSet:
470                 # Omit the empty queryset with UNION and with DIFFERENCE if the
471                 # first queryset is nonempty.
472                 if combinator == 'union' or (combinator == 'difference' and parts):
473                     continue
474                 raise
475         if not parts:
476             raise EmptyResultSet
477         combinator_sql = self.connection.ops.set_operators[combinator]
478         if all and combinator == 'union':
479             combinator_sql += ' ALL'
480         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'
481         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))
482         result = [' {} '.format(combinator_sql).join(sql_parts)]
483         params = []
484         for part in args_parts:
485             params.extend(part)
486         return result, params
487 
488     def as_sql(self, with_limits=True, with_col_aliases=False):
489         """
490         Create the SQL for this query. Return the SQL string and list of
491         parameters.
492 
493         If 'with_limits' is False, any limit/offset information is not included
494         in the query.
495         """
496         refcounts_before = self.query.alias_refcount.copy()
497         try:
498             extra_select, order_by, group_by = self.pre_sql_setup()
499             for_update_part = None
500             # Is a LIMIT/OFFSET clause needed?
501             with_limit_offset = with_limits and (self.query.high_mark is not None or self.query.low_mark)
502             combinator = self.query.combinator
503             features = self.connection.features
504             if combinator:
505                 if not getattr(features, 'supports_select_{}'.format(combinator)):
506                     raise NotSupportedError('{} is not supported on this database backend.'.format(combinator))
507                 result, params = self.get_combinator_sql(combinator, self.query.combinator_all)
508             else:
509                 distinct_fields, distinct_params = self.get_distinct()
510                 # This must come after 'select', 'ordering', and 'distinct'
511                 # (see docstring of get_from_clause() for details).
512                 from_, f_params = self.get_from_clause()
513                 where, w_params = self.compile(self.where) if self.where is not None else ("", [])
514                 having, h_params = self.compile(self.having) if self.having is not None else ("", [])
515                 result = ['SELECT']
516                 params = []
517 
518                 if self.query.distinct:
519                     distinct_result, distinct_params = self.connection.ops.distinct_sql(
520                         distinct_fields,
521                         distinct_params,
522                     )
523                     result += distinct_result
524                     params += distinct_params
525 
526                 out_cols = []
527                 col_idx = 1
528                 for _, (s_sql, s_params), alias in self.select + extra_select:
529                     if alias:
530                         s_sql = '%s AS %s' % (s_sql, self.connection.ops.quote_name(alias))
531                     elif with_col_aliases:
532                         s_sql = '%s AS %s' % (s_sql, 'Col%d' % col_idx)
533                         col_idx += 1
534                     params.extend(s_params)
535                     out_cols.append(s_sql)
536 
537                 result += [', '.join(out_cols), 'FROM', *from_]
538                 params.extend(f_params)
539 
540                 if self.query.select_for_update and self.connection.features.has_select_for_update:
541                     if self.connection.get_autocommit():
542                         raise TransactionManagementError('select_for_update cannot be used outside of a transaction.')
543 
544                     if with_limit_offset and not self.connection.features.supports_select_for_update_with_limit:
545                         raise NotSupportedError(
546                             'LIMIT/OFFSET is not supported with '
547                             'select_for_update on this database backend.'
548                         )
549                     nowait = self.query.select_for_update_nowait
550                     skip_locked = self.query.select_for_update_skip_locked
551                     of = self.query.select_for_update_of
552                     no_key = self.query.select_for_no_key_update
553                     # If it's a NOWAIT/SKIP LOCKED/OF/NO KEY query but the
554                     # backend doesn't support it, raise NotSupportedError to
555                     # prevent a possible deadlock.
556                     if nowait and not self.connection.features.has_select_for_update_nowait:
557                         raise NotSupportedError('NOWAIT is not supported on this database backend.')
558                     elif skip_locked and not self.connection.features.has_select_for_update_skip_locked:
559                         raise NotSupportedError('SKIP LOCKED is not supported on this database backend.')
560                     elif of and not self.connection.features.has_select_for_update_of:
561                         raise NotSupportedError('FOR UPDATE OF is not supported on this database backend.')
562                     elif no_key and not self.connection.features.has_select_for_no_key_update:
563                         raise NotSupportedError(
564                             'FOR NO KEY UPDATE is not supported on this '
565                             'database backend.'
566                         )
567                     for_update_part = self.connection.ops.for_update_sql(
568                         nowait=nowait,
569                         skip_locked=skip_locked,
570                         of=self.get_select_for_update_of_arguments(),
571                         no_key=no_key,
572                     )
573 
574                 if for_update_part and self.connection.features.for_update_after_from:
575                     result.append(for_update_part)
576 
577                 if where:
578                     result.append('WHERE %s' % where)
579                     params.extend(w_params)
580 
581                 grouping = []
582                 for g_sql, g_params in group_by:
583                     grouping.append(g_sql)
584                     params.extend(g_params)
585                 if grouping:
586                     if distinct_fields:
587                         raise NotImplementedError('annotate() + distinct(fields) is not implemented.')
588                     order_by = order_by or self.connection.ops.force_no_ordering()
589                     result.append('GROUP BY %s' % ', '.join(grouping))
590                     if self._meta_ordering:
591                         order_by = None
592                 if having:
593                     result.append('HAVING %s' % having)
594                     params.extend(h_params)
595 
596             if self.query.explain_query:
597                 result.insert(0, self.connection.ops.explain_query_prefix(
598                     self.query.explain_format,
599                     **self.query.explain_options
600                 ))
601 
602             if order_by:
603                 ordering = []
604                 for _, (o_sql, o_params, _) in order_by:
605                     ordering.append(o_sql)
606                     params.extend(o_params)
607                 result.append('ORDER BY %s' % ', '.join(ordering))
608 
609             if with_limit_offset:
610                 result.append(self.connection.ops.limit_offset_sql(self.query.low_mark, self.query.high_mark))
611 
612             if for_update_part and not self.connection.features.for_update_after_from:
613                 result.append(for_update_part)
614 
615             if self.query.subquery and extra_select:
616                 # If the query is used as a subquery, the extra selects would
617                 # result in more columns than the left-hand side expression is
618                 # expecting. This can happen when a subquery uses a combination
619                 # of order_by() and distinct(), forcing the ordering expressions
620                 # to be selected as well. Wrap the query in another subquery
621                 # to exclude extraneous selects.
622                 sub_selects = []
623                 sub_params = []
624                 for index, (select, _, alias) in enumerate(self.select, start=1):
625                     if not alias and with_col_aliases:
626                         alias = 'col%d' % index
627                     if alias:
628                         sub_selects.append("%s.%s" % (
629                             self.connection.ops.quote_name('subquery'),
630                             self.connection.ops.quote_name(alias),
631                         ))
632                     else:
633                         select_clone = select.relabeled_clone({select.alias: 'subquery'})
634                         subselect, subparams = select_clone.as_sql(self, self.connection)
635                         sub_selects.append(subselect)
636                         sub_params.extend(subparams)
637                 return 'SELECT %s FROM (%s) subquery' % (
638                     ', '.join(sub_selects),
639                     ' '.join(result),
640                 ), tuple(sub_params + params)
641 
642             return ' '.join(result), tuple(params)
643         finally:
644             # Finally do cleanup - get rid of the joins we created above.
645             self.query.reset_refcounts(refcounts_before)
646 
647     def get_default_columns(self, start_alias=None, opts=None, from_parent=None):
648         """
649         Compute the default columns for selecting every field in the base
650         model. Will sometimes be called to pull in related models (e.g. via
651         select_related), in which case "opts" and "start_alias" will be given
652         to provide a starting point for the traversal.
653 
654         Return a list of strings, quoted appropriately for use in SQL
655         directly, as well as a set of aliases used in the select statement (if
656         'as_pairs' is True, return a list of (alias, col_name) pairs instead
657         of strings as the first component and None as the second component).
658         """
659         result = []
660         if opts is None:
661             opts = self.query.get_meta()
662         only_load = self.deferred_to_columns()
663         start_alias = start_alias or self.query.get_initial_alias()
664         # The 'seen_models' is used to optimize checking the needed parent
665         # alias for a given field. This also includes None -> start_alias to
666         # be used by local fields.
667         seen_models = {None: start_alias}
668 
669         for field in opts.concrete_fields:
670             model = field.model._meta.concrete_model
671             # A proxy model will have a different model and concrete_model. We
672             # will assign None if the field belongs to this model.
673             if model == opts.model:
674                 model = None
675             if from_parent and model is not None and issubclass(
676                     from_parent._meta.concrete_model, model._meta.concrete_model):
677                 # Avoid loading data for already loaded parents.
678                 # We end up here in the case select_related() resolution
679                 # proceeds from parent model to child model. In that case the
680                 # parent model data is already present in the SELECT clause,
681                 # and we want to avoid reloading the same data again.
682                 continue
683             if field.model in only_load and field.attname not in only_load[field.model]:
684                 continue
685             alias = self.query.join_parent_model(opts, model, start_alias,
686                                                  seen_models)
687             column = field.get_col(alias)
688             result.append(column)
689         return result
690 
691     def get_distinct(self):
692         """
693         Return a quoted list of fields to use in DISTINCT ON part of the query.
694 
695         This method can alter the tables in the query, and thus it must be
696         called before get_from_clause().
697         """
698         result = []
699         params = []
700         opts = self.query.get_meta()
701 
702         for name in self.query.distinct_fields:
703             parts = name.split(LOOKUP_SEP)
704             _, targets, alias, joins, path, _, transform_function = self._setup_joins(parts, opts, None)
705             targets, alias, _ = self.query.trim_joins(targets, joins, path)
706             for target in targets:
707                 if name in self.query.annotation_select:
708                     result.append(name)
709                 else:
710                     r, p = self.compile(transform_function(target, alias))
711                     result.append(r)
712                     params.append(p)
713         return result, params
714 
715     def find_ordering_name(self, name, opts, alias=None, default_order='ASC',
716                            already_seen=None):
717         """
718         Return the table alias (the name might be ambiguous, the alias will
719         not be) and column name for ordering by the given 'name' parameter.
720         The 'name' is of the form 'field1__field2__...__fieldN'.
721         """
722         name, order = get_order_dir(name, default_order)
723         descending = order == 'DESC'
724         pieces = name.split(LOOKUP_SEP)
725         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)
726 
727         # If we get to this point and the field is a relation to another model,
728         # append the default ordering for that model unless it is the pk
729         # shortcut or the attribute name of the field that is specified.
730         if (
731             field.is_relation and
732             opts.ordering and
733             getattr(field, 'attname', None) != pieces[-1] and
734             name != 'pk'
735         ):
736             # Firstly, avoid infinite loops.
737             already_seen = already_seen or set()
738             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)
739             if join_tuple in already_seen:
740                 raise FieldError('Infinite loop caused by ordering.')
741             already_seen.add(join_tuple)
742 
743             results = []
744             for item in opts.ordering:
745                 if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):
746                     item = item.desc() if descending else item.asc()
747                 if isinstance(item, OrderBy):
748                     results.append((item, False))
749                     continue
750                 results.extend(self.find_ordering_name(item, opts, alias,
751                                                        order, already_seen))
752             return results
753         targets, alias, _ = self.query.trim_joins(targets, joins, path)
754         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]
755 
756     def _setup_joins(self, pieces, opts, alias):
757         """
758         Helper method for get_order_by() and get_distinct().
759 
760         get_ordering() and get_distinct() must produce same target columns on
761         same input, as the prefixes of get_ordering() and get_distinct() must
762         match. Executing SQL where this is not true is an error.
763         """
764         alias = alias or self.query.get_initial_alias()
765         field, targets, opts, joins, path, transform_function = self.query.setup_joins(pieces, opts, alias)
766         alias = joins[-1]
767         return field, targets, alias, joins, path, opts, transform_function
768 
769     def get_from_clause(self):
770         """
771         Return a list of strings that are joined together to go after the
772         "FROM" part of the query, as well as a list any extra parameters that
773         need to be included. Subclasses, can override this to create a
774         from-clause via a "select".
775 
776         This should only be called after any SQL construction methods that
777         might change the tables that are needed. This means the select columns,
778         ordering, and distinct must be done first.
779         """
780         result = []
781         params = []
782         for alias in tuple(self.query.alias_map):
783             if not self.query.alias_refcount[alias]:
784                 continue
785             try:
786                 from_clause = self.query.alias_map[alias]
787             except KeyError:
788                 # Extra tables can end up in self.tables, but not in the
789                 # alias_map if they aren't in a join. That's OK. We skip them.
790                 continue
791             clause_sql, clause_params = self.compile(from_clause)
792             result.append(clause_sql)
793             params.extend(clause_params)
794         for t in self.query.extra_tables:
795             alias, _ = self.query.table_alias(t)
796             # Only add the alias if it's not already present (the table_alias()
797             # call increments the refcount, so an alias refcount of one means
798             # this is the only reference).
799             if alias not in self.query.alias_map or self.query.alias_refcount[alias] == 1:
800                 result.append(', %s' % self.quote_name_unless_alias(alias))
801         return result, params
802 
803     def get_related_selections(self, select, opts=None, root_alias=None, cur_depth=1,
804                                requested=None, restricted=None):
805         """
806         Fill in the information needed for a select_related query. The current
807         depth is measured as the number of connections away from the root model
808         (for example, cur_depth=1 means we are looking at models with direct
809         connections to the root model).
810         """
811         def _get_field_choices():
812             direct_choices = (f.name for f in opts.fields if f.is_relation)
813             reverse_choices = (
814                 f.field.related_query_name()
815                 for f in opts.related_objects if f.field.unique
816             )
817             return chain(direct_choices, reverse_choices, self.query._filtered_relations)
818 
819         related_klass_infos = []
820         if not restricted and cur_depth > self.query.max_depth:
821             # We've recursed far enough; bail out.
822             return related_klass_infos
823 
824         if not opts:
825             opts = self.query.get_meta()
826             root_alias = self.query.get_initial_alias()
827         only_load = self.query.get_loaded_field_names()
828 
829         # Setup for the case when only particular related fields should be
830         # included in the related selection.
831         fields_found = set()
832         if requested is None:
833             restricted = isinstance(self.query.select_related, dict)
834             if restricted:
835                 requested = self.query.select_related
836 
837         def get_related_klass_infos(klass_info, related_klass_infos):
838             klass_info['related_klass_infos'] = related_klass_infos
839 
840         for f in opts.fields:
841             field_model = f.model._meta.concrete_model
842             fields_found.add(f.name)
843 
844             if restricted:
845                 next = requested.get(f.name, {})
846                 if not f.is_relation:
847                     # If a non-related field is used like a relation,
848                     # or if a single non-relational field is given.
849                     if next or f.name in requested:
850                         raise FieldError(
851                             "Non-relational field given in select_related: '%s'. "
852                             "Choices are: %s" % (
853                                 f.name,
854                                 ", ".join(_get_field_choices()) or '(none)',
855                             )
856                         )
857             else:
858                 next = False
859 
860             if not select_related_descend(f, restricted, requested,
861                                           only_load.get(field_model)):
862                 continue
863             klass_info = {
864                 'model': f.remote_field.model,
865                 'field': f,
866                 'reverse': False,
867                 'local_setter': f.set_cached_value,
868                 'remote_setter': f.remote_field.set_cached_value if f.unique else lambda x, y: None,
869                 'from_parent': False,
870             }
871             related_klass_infos.append(klass_info)
872             select_fields = []
873             _, _, _, joins, _, _ = self.query.setup_joins(
874                 [f.name], opts, root_alias)
875             alias = joins[-1]
876             columns = self.get_default_columns(start_alias=alias, opts=f.remote_field.model._meta)
877             for col in columns:
878                 select_fields.append(len(select))
879                 select.append((col, None))
880             klass_info['select_fields'] = select_fields
881             next_klass_infos = self.get_related_selections(
882                 select, f.remote_field.model._meta, alias, cur_depth + 1, next, restricted)
883             get_related_klass_infos(klass_info, next_klass_infos)
884 
885         if restricted:
886             related_fields = [
887                 (o.field, o.related_model)
888                 for o in opts.related_objects
889                 if o.field.unique and not o.many_to_many
890             ]
891             for f, model in related_fields:
892                 if not select_related_descend(f, restricted, requested,
893                                               only_load.get(model), reverse=True):
894                     continue
895 
896                 related_field_name = f.related_query_name()
897                 fields_found.add(related_field_name)
898 
899                 join_info = self.query.setup_joins([related_field_name], opts, root_alias)
900                 alias = join_info.joins[-1]
901                 from_parent = issubclass(model, opts.model) and model is not opts.model
902                 klass_info = {
903                     'model': model,
904                     'field': f,
905                     'reverse': True,
906                     'local_setter': f.remote_field.set_cached_value,
907                     'remote_setter': f.set_cached_value,
908                     'from_parent': from_parent,
909                 }
910                 related_klass_infos.append(klass_info)
911                 select_fields = []
912                 columns = self.get_default_columns(
913                     start_alias=alias, opts=model._meta, from_parent=opts.model)
914                 for col in columns:
915                     select_fields.append(len(select))
916                     select.append((col, None))
917                 klass_info['select_fields'] = select_fields
918                 next = requested.get(f.related_query_name(), {})
919                 next_klass_infos = self.get_related_selections(
920                     select, model._meta, alias, cur_depth + 1,
921                     next, restricted)
922                 get_related_klass_infos(klass_info, next_klass_infos)
923 
924             def local_setter(obj, from_obj):
925                 # Set a reverse fk object when relation is non-empty.
926                 if from_obj:
927                     f.remote_field.set_cached_value(from_obj, obj)
928 
929             def remote_setter(name, obj, from_obj):
930                 setattr(from_obj, name, obj)
931 
932             for name in list(requested):
933                 # Filtered relations work only on the topmost level.
934                 if cur_depth > 1:
935                     break
936                 if name in self.query._filtered_relations:
937                     fields_found.add(name)
938                     f, _, join_opts, joins, _, _ = self.query.setup_joins([name], opts, root_alias)
939                     model = join_opts.model
940                     alias = joins[-1]
941                     from_parent = issubclass(model, opts.model) and model is not opts.model
942                     klass_info = {
943                         'model': model,
944                         'field': f,
945                         'reverse': True,
946                         'local_setter': local_setter,
947                         'remote_setter': partial(remote_setter, name),
948                         'from_parent': from_parent,
949                     }
950                     related_klass_infos.append(klass_info)
951                     select_fields = []
952                     columns = self.get_default_columns(
953                         start_alias=alias, opts=model._meta,
954                         from_parent=opts.model,
955                     )
956                     for col in columns:
957                         select_fields.append(len(select))
958                         select.append((col, None))
959                     klass_info['select_fields'] = select_fields
960                     next_requested = requested.get(name, {})
961                     next_klass_infos = self.get_related_selections(
962                         select, opts=model._meta, root_alias=alias,
963                         cur_depth=cur_depth + 1, requested=next_requested,
964                         restricted=restricted,
965                     )
966                     get_related_klass_infos(klass_info, next_klass_infos)
967             fields_not_found = set(requested).difference(fields_found)
968             if fields_not_found:
969                 invalid_fields = ("'%s'" % s for s in fields_not_found)
970                 raise FieldError(
971                     'Invalid field name(s) given in select_related: %s. '
972                     'Choices are: %s' % (
973                         ', '.join(invalid_fields),
974                         ', '.join(_get_field_choices()) or '(none)',
975                     )
976                 )
977         return related_klass_infos
978 
979     def get_select_for_update_of_arguments(self):
980         """
981         Return a quoted list of arguments for the SELECT FOR UPDATE OF part of
982         the query.
983         """
984         def _get_parent_klass_info(klass_info):
985             for parent_model, parent_link in klass_info['model']._meta.parents.items():
986                 parent_list = parent_model._meta.get_parent_list()
987                 yield {
988                     'model': parent_model,
989                     'field': parent_link,
990                     'reverse': False,
991                     'select_fields': [
992                         select_index
993                         for select_index in klass_info['select_fields']
994                         # Selected columns from a model or its parents.
995                         if (
996                             self.select[select_index][0].target.model == parent_model or
997                             self.select[select_index][0].target.model in parent_list
998                         )
999                     ],
1000                 }
1001 
1002         def _get_first_selected_col_from_model(klass_info):
1003             """
1004             Find the first selected column from a model. If it doesn't exist,
1005             don't lock a model.
1006 
1007             select_fields is filled recursively, so it also contains fields
1008             from the parent models.
1009             """
1010             for select_index in klass_info['select_fields']:
1011                 if self.select[select_index][0].target.model == klass_info['model']:
1012                     return self.select[select_index][0]
1013 
1014         def _get_field_choices():
1015             """Yield all allowed field paths in breadth-first search order."""
1016             queue = collections.deque([(None, self.klass_info)])
1017             while queue:
1018                 parent_path, klass_info = queue.popleft()
1019                 if parent_path is None:
1020                     path = []
1021                     yield 'self'
1022                 else:
1023                     field = klass_info['field']
1024                     if klass_info['reverse']:
1025                         field = field.remote_field
1026                     path = parent_path + [field.name]
1027                     yield LOOKUP_SEP.join(path)
1028                 queue.extend(
1029                     (path, klass_info)
1030                     for klass_info in _get_parent_klass_info(klass_info)
1031                 )
1032                 queue.extend(
1033                     (path, klass_info)
1034                     for klass_info in klass_info.get('related_klass_infos', [])
1035                 )
1036         result = []
1037         invalid_names = []
1038         for name in self.query.select_for_update_of:
1039             klass_info = self.klass_info
1040             if name == 'self':
1041                 col = _get_first_selected_col_from_model(klass_info)
1042             else:
1043                 for part in name.split(LOOKUP_SEP):
1044                     klass_infos = (
1045                         *klass_info.get('related_klass_infos', []),
1046                         *_get_parent_klass_info(klass_info),
1047                     )
1048                     for related_klass_info in klass_infos:
1049                         field = related_klass_info['field']
1050                         if related_klass_info['reverse']:
1051                             field = field.remote_field
1052                         if field.name == part:
1053                             klass_info = related_klass_info
1054                             break
1055                     else:
1056                         klass_info = None
1057                         break
1058                 if klass_info is None:
1059                     invalid_names.append(name)
1060                     continue
1061                 col = _get_first_selected_col_from_model(klass_info)
1062             if col is not None:
1063                 if self.connection.features.select_for_update_of_column:
1064                     result.append(self.compile(col)[0])
1065                 else:
1066                     result.append(self.quote_name_unless_alias(col.alias))
1067         if invalid_names:
1068             raise FieldError(
1069                 'Invalid field name(s) given in select_for_update(of=(...)): %s. '
1070                 'Only relational fields followed in the query are allowed. '
1071                 'Choices are: %s.' % (
1072                     ', '.join(invalid_names),
1073                     ', '.join(_get_field_choices()),
1074                 )
1075             )
1076         return result
1077 
1078     def deferred_to_columns(self):
1079         """
1080         Convert the self.deferred_loading data structure to mapping of table
1081         names to sets of column names which are to be loaded. Return the
1082         dictionary.
1083         """
1084         columns = {}
1085         self.query.deferred_to_data(columns, self.query.get_loaded_field_names_cb)
1086         return columns
1087 
1088     def get_converters(self, expressions):
1089         converters = {}
1090         for i, expression in enumerate(expressions):
1091             if expression:
1092                 backend_converters = self.connection.ops.get_db_converters(expression)
1093                 field_converters = expression.get_db_converters(self.connection)
1094                 if backend_converters or field_converters:
1095                     converters[i] = (backend_converters + field_converters, expression)
1096         return converters
1097 
1098     def apply_converters(self, rows, converters):
1099         connection = self.connection
1100         converters = list(converters.items())
1101         for row in map(list, rows):
1102             for pos, (convs, expression) in converters:
1103                 value = row[pos]
1104                 for converter in convs:
1105                     value = converter(value, expression, connection)
1106                 row[pos] = value
1107             yield row
1108 
1109     def results_iter(self, results=None, tuple_expected=False, chunked_fetch=False,
1110                      chunk_size=GET_ITERATOR_CHUNK_SIZE):
1111         """Return an iterator over the results from executing this query."""
1112         if results is None:
1113             results = self.execute_sql(MULTI, chunked_fetch=chunked_fetch, chunk_size=chunk_size)
1114         fields = [s[0] for s in self.select[0:self.col_count]]
1115         converters = self.get_converters(fields)
1116         rows = chain.from_iterable(results)
1117         if converters:
1118             rows = self.apply_converters(rows, converters)
1119             if tuple_expected:
1120                 rows = map(tuple, rows)
1121         return rows
1122 
1123     def has_results(self):
1124         """
1125         Backends (e.g. NoSQL) can override this in order to use optimized
1126         versions of "query has any results."
1127         """
1128         # This is always executed on a query clone, so we can modify self.query
1129         self.query.add_extra({'a': 1}, None, None, None, None, None)
1130         self.query.set_extra_mask(['a'])
1131         return bool(self.execute_sql(SINGLE))
1132 
1133     def execute_sql(self, result_type=MULTI, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE):
1134         """
1135         Run the query against the database and return the result(s). The
1136         return value is a single data item if result_type is SINGLE, or an
1137         iterator over the results if the result_type is MULTI.
1138 
1139         result_type is either MULTI (use fetchmany() to retrieve all rows),
1140         SINGLE (only retrieve a single row), or None. In this last case, the
1141         cursor is returned if any query is executed, since it's used by
1142         subclasses such as InsertQuery). It's possible, however, that no query
1143         is needed, as the filters describe an empty set. In that case, None is
1144         returned, to avoid any unnecessary database interaction.
1145         """
1146         result_type = result_type or NO_RESULTS
1147         try:
1148             sql, params = self.as_sql()
1149             if not sql:
1150                 raise EmptyResultSet
1151         except EmptyResultSet:
1152             if result_type == MULTI:
1153                 return iter([])
1154             else:
1155                 return
1156         if chunked_fetch:
1157             cursor = self.connection.chunked_cursor()
1158         else:
1159             cursor = self.connection.cursor()
1160         try:
1161             cursor.execute(sql, params)
1162         except Exception:
1163             # Might fail for server-side cursors (e.g. connection closed)
1164             cursor.close()
1165             raise
1166 
1167         if result_type == CURSOR:
1168             # Give the caller the cursor to process and close.
1169             return cursor
1170         if result_type == SINGLE:
1171             try:
1172                 val = cursor.fetchone()
1173                 if val:
1174                     return val[0:self.col_count]
1175                 return val
1176             finally:
1177                 # done with the cursor
1178                 cursor.close()
1179         if result_type == NO_RESULTS:
1180             cursor.close()
1181             return
1182 
1183         result = cursor_iter(
1184             cursor, self.connection.features.empty_fetchmany_value,
1185             self.col_count if self.has_extra_select else None,
1186             chunk_size,
1187         )
1188         if not chunked_fetch or not self.connection.features.can_use_chunked_reads:
1189             try:
1190                 # If we are using non-chunked reads, we return the same data
1191                 # structure as normally, but ensure it is all read into memory
1192                 # before going any further. Use chunked_fetch if requested,
1193                 # unless the database doesn't support it.
1194                 return list(result)
1195             finally:
1196                 # done with the cursor
1197                 cursor.close()
1198         return result
1199 
1200     def as_subquery_condition(self, alias, columns, compiler):
1201         qn = compiler.quote_name_unless_alias
1202         qn2 = self.connection.ops.quote_name
1203 
1204         for index, select_col in enumerate(self.query.select):
1205             lhs_sql, lhs_params = self.compile(select_col)
1206             rhs = '%s.%s' % (qn(alias), qn2(columns[index]))
1207             self.query.where.add(
1208                 RawSQL('%s = %s' % (lhs_sql, rhs), lhs_params), 'AND')
1209 
1210         sql, params = self.as_sql()
1211         return 'EXISTS (%s)' % sql, params
1212 
1213     def explain_query(self):
1214         result = list(self.execute_sql())
1215         # Some backends return 1 item tuples with strings, and others return
1216         # tuples with integers and strings. Flatten them out into strings.
1217         for row in result[0]:
1218             if not isinstance(row, str):
1219                 yield ' '.join(str(c) for c in row)
1220             else:
1221                 yield row
1222 
1223 
1224 class SQLInsertCompiler(SQLCompiler):
1225     returning_fields = None
1226     returning_params = tuple()
1227 
1228     def field_as_sql(self, field, val):
1229         """
1230         Take a field and a value intended to be saved on that field, and
1231         return placeholder SQL and accompanying params. Check for raw values,
1232         expressions, and fields with get_placeholder() defined in that order.
1233 
1234         When field is None, consider the value raw and use it as the
1235         placeholder, with no corresponding parameters returned.
1236         """
1237         if field is None:
1238             # A field value of None means the value is raw.
1239             sql, params = val, []
1240         elif hasattr(val, 'as_sql'):
1241             # This is an expression, let's compile it.
1242             sql, params = self.compile(val)
1243         elif hasattr(field, 'get_placeholder'):
1244             # Some fields (e.g. geo fields) need special munging before
1245             # they can be inserted.
1246             sql, params = field.get_placeholder(val, self, self.connection), [val]
1247         else:
1248             # Return the common case for the placeholder
1249             sql, params = '%s', [val]
1250 
1251         # The following hook is only used by Oracle Spatial, which sometimes
1252         # needs to yield 'NULL' and [] as its placeholder and params instead
1253         # of '%s' and [None]. The 'NULL' placeholder is produced earlier by
1254         # OracleOperations.get_geom_placeholder(). The following line removes
1255         # the corresponding None parameter. See ticket #10888.
1256         params = self.connection.ops.modify_insert_params(sql, params)
1257 
1258         return sql, params
1259 
1260     def prepare_value(self, field, value):
1261         """
1262         Prepare a value to be used in a query by resolving it if it is an
1263         expression and otherwise calling the field's get_db_prep_save().
1264         """
1265         if hasattr(value, 'resolve_expression'):
1266             value = value.resolve_expression(self.query, allow_joins=False, for_save=True)
1267             # Don't allow values containing Col expressions. They refer to
1268             # existing columns on a row, but in the case of insert the row
1269             # doesn't exist yet.
1270             if value.contains_column_references:
1271                 raise ValueError(
1272                     'Failed to insert expression "%s" on %s. F() expressions '
1273                     'can only be used to update, not to insert.' % (value, field)
1274                 )
1275             if value.contains_aggregate:
1276                 raise FieldError(
1277                     'Aggregate functions are not allowed in this query '
1278                     '(%s=%r).' % (field.name, value)
1279                 )
1280             if value.contains_over_clause:
1281                 raise FieldError(
1282                     'Window expressions are not allowed in this query (%s=%r).'
1283                     % (field.name, value)
1284                 )
1285         else:
1286             value = field.get_db_prep_save(value, connection=self.connection)
1287         return value
1288 
1289     def pre_save_val(self, field, obj):
1290         """
1291         Get the given field's value off the given obj. pre_save() is used for
1292         things like auto_now on DateTimeField. Skip it if this is a raw query.
1293         """
1294         if self.query.raw:
1295             return getattr(obj, field.attname)
1296         return field.pre_save(obj, add=True)
1297 
1298     def assemble_as_sql(self, fields, value_rows):
1299         """
1300         Take a sequence of N fields and a sequence of M rows of values, and
1301         generate placeholder SQL and parameters for each field and value.
1302         Return a pair containing:
1303          * a sequence of M rows of N SQL placeholder strings, and
1304          * a sequence of M rows of corresponding parameter values.
1305 
1306         Each placeholder string may contain any number of '%s' interpolation
1307         strings, and each parameter row will contain exactly as many params
1308         as the total number of '%s's in the corresponding placeholder row.
1309         """
1310         if not value_rows:
1311             return [], []
1312 
1313         # list of (sql, [params]) tuples for each object to be saved
1314         # Shape: [n_objs][n_fields][2]
1315         rows_of_fields_as_sql = (
1316             (self.field_as_sql(field, v) for field, v in zip(fields, row))
1317             for row in value_rows
1318         )
1319 
1320         # tuple like ([sqls], [[params]s]) for each object to be saved
1321         # Shape: [n_objs][2][n_fields]
1322         sql_and_param_pair_rows = (zip(*row) for row in rows_of_fields_as_sql)
1323 
1324         # Extract separate lists for placeholders and params.
1325         # Each of these has shape [n_objs][n_fields]
1326         placeholder_rows, param_rows = zip(*sql_and_param_pair_rows)
1327 
1328         # Params for each field are still lists, and need to be flattened.
1329         param_rows = [[p for ps in row for p in ps] for row in param_rows]
1330 
1331         return placeholder_rows, param_rows
1332 
1333     def as_sql(self):
1334         # We don't need quote_name_unless_alias() here, since these are all
1335         # going to be column names (so we can avoid the extra overhead).
1336         qn = self.connection.ops.quote_name
1337         opts = self.query.get_meta()
1338         insert_statement = self.connection.ops.insert_statement(ignore_conflicts=self.query.ignore_conflicts)
1339         result = ['%s %s' % (insert_statement, qn(opts.db_table))]
1340         fields = self.query.fields or [opts.pk]
1341         result.append('(%s)' % ', '.join(qn(f.column) for f in fields))
1342 
1343         if self.query.fields:
1344             value_rows = [
1345                 [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
1346                 for obj in self.query.objs
1347             ]
1348         else:
1349             # An empty object.
1350             value_rows = [[self.connection.ops.pk_default_value()] for _ in self.query.objs]
1351             fields = [None]
1352 
1353         # Currently the backends just accept values when generating bulk
1354         # queries and generate their own placeholders. Doing that isn't
1355         # necessary and it should be possible to use placeholders and
1356         # expressions in bulk inserts too.
1357         can_bulk = (not self.returning_fields and self.connection.features.has_bulk_insert)
1358 
1359         placeholder_rows, param_rows = self.assemble_as_sql(fields, value_rows)
1360 
1361         ignore_conflicts_suffix_sql = self.connection.ops.ignore_conflicts_suffix_sql(
1362             ignore_conflicts=self.query.ignore_conflicts
1363         )
1364         if self.returning_fields and self.connection.features.can_return_columns_from_insert:
1365             if self.connection.features.can_return_rows_from_bulk_insert:
1366                 result.append(self.connection.ops.bulk_insert_sql(fields, placeholder_rows))
1367                 params = param_rows
1368             else:
1369                 result.append("VALUES (%s)" % ", ".join(placeholder_rows[0]))
1370                 params = [param_rows[0]]
1371             if ignore_conflicts_suffix_sql:
1372                 result.append(ignore_conflicts_suffix_sql)
1373             # Skip empty r_sql to allow subclasses to customize behavior for
1374             # 3rd party backends. Refs #19096.
1375             r_sql, self.returning_params = self.connection.ops.return_insert_columns(self.returning_fields)
1376             if r_sql:
1377                 result.append(r_sql)
1378                 params += [self.returning_params]
1379             return [(" ".join(result), tuple(chain.from_iterable(params)))]
1380 
1381         if can_bulk:
1382             result.append(self.connection.ops.bulk_insert_sql(fields, placeholder_rows))
1383             if ignore_conflicts_suffix_sql:
1384                 result.append(ignore_conflicts_suffix_sql)
1385             return [(" ".join(result), tuple(p for ps in param_rows for p in ps))]
1386         else:
1387             if ignore_conflicts_suffix_sql:
1388                 result.append(ignore_conflicts_suffix_sql)
1389             return [
1390                 (" ".join(result + ["VALUES (%s)" % ", ".join(p)]), vals)
1391                 for p, vals in zip(placeholder_rows, param_rows)
1392             ]
1393 
1394     def execute_sql(self, returning_fields=None):
1395         assert not (
1396             returning_fields and len(self.query.objs) != 1 and
1397             not self.connection.features.can_return_rows_from_bulk_insert
1398         )
1399         self.returning_fields = returning_fields
1400         with self.connection.cursor() as cursor:
1401             for sql, params in self.as_sql():
1402                 cursor.execute(sql, params)
1403             if not self.returning_fields:
1404                 return []
1405             if self.connection.features.can_return_rows_from_bulk_insert and len(self.query.objs) > 1:
1406                 return self.connection.ops.fetch_returned_insert_rows(cursor)
1407             if self.connection.features.can_return_columns_from_insert:
1408                 assert len(self.query.objs) == 1
1409                 return [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]
1410             return [(self.connection.ops.last_insert_id(
1411                 cursor, self.query.get_meta().db_table, self.query.get_meta().pk.column
1412             ),)]
1413 
1414 
1415 class SQLDeleteCompiler(SQLCompiler):
1416     @cached_property
1417     def single_alias(self):
1418         # Ensure base table is in aliases.
1419         self.query.get_initial_alias()
1420         return sum(self.query.alias_refcount[t] > 0 for t in self.query.alias_map) == 1
1421 
1422     def _as_sql(self, query):
1423         result = [
1424             'DELETE FROM %s' % self.quote_name_unless_alias(query.base_table)
1425         ]
1426         where, params = self.compile(query.where)
1427         if where:
1428             result.append('WHERE %s' % where)
1429         return ' '.join(result), tuple(params)
1430 
1431     def as_sql(self):
1432         """
1433         Create the SQL for this query. Return the SQL string and list of
1434         parameters.
1435         """
1436         if self.single_alias:
1437             return self._as_sql(self.query)
1438         innerq = self.query.clone()
1439         innerq.__class__ = Query
1440         innerq.clear_select_clause()
1441         pk = self.query.model._meta.pk
1442         innerq.select = [
1443             pk.get_col(self.query.get_initial_alias())
1444         ]
1445         outerq = Query(self.query.model)
1446         outerq.where = self.query.where_class()
1447         outerq.add_q(Q(pk__in=innerq))
1448         return self._as_sql(outerq)
1449 
1450 
1451 class SQLUpdateCompiler(SQLCompiler):
1452     def as_sql(self):
1453         """
1454         Create the SQL for this query. Return the SQL string and list of
1455         parameters.
1456         """
1457         self.pre_sql_setup()
1458         if not self.query.values:
1459             return '', ()
1460         qn = self.quote_name_unless_alias
1461         values, update_params = [], []
1462         for field, model, val in self.query.values:
1463             if hasattr(val, 'resolve_expression'):
1464                 val = val.resolve_expression(self.query, allow_joins=False, for_save=True)
1465                 if val.contains_aggregate:
1466                     raise FieldError(
1467                         'Aggregate functions are not allowed in this query '
1468                         '(%s=%r).' % (field.name, val)
1469                     )
1470                 if val.contains_over_clause:
1471                     raise FieldError(
1472                         'Window expressions are not allowed in this query '
1473                         '(%s=%r).' % (field.name, val)
1474                     )
1475             elif hasattr(val, 'prepare_database_save'):
1476                 if field.remote_field:
1477                     val = field.get_db_prep_save(
1478                         val.prepare_database_save(field),
1479                         connection=self.connection,
1480                     )
1481                 else:
1482                     raise TypeError(
1483                         "Tried to update field %s with a model instance, %r. "
1484                         "Use a value compatible with %s."
1485                         % (field, val, field.__class__.__name__)
1486                     )
1487             else:
1488                 val = field.get_db_prep_save(val, connection=self.connection)
1489 
1490             # Getting the placeholder for the field.
1491             if hasattr(field, 'get_placeholder'):
1492                 placeholder = field.get_placeholder(val, self, self.connection)
1493             else:
1494                 placeholder = '%s'
1495             name = field.column
1496             if hasattr(val, 'as_sql'):
1497                 sql, params = self.compile(val)
1498                 values.append('%s = %s' % (qn(name), placeholder % sql))
1499                 update_params.extend(params)
1500             elif val is not None:
1501                 values.append('%s = %s' % (qn(name), placeholder))
1502                 update_params.append(val)
1503             else:
1504                 values.append('%s = NULL' % qn(name))
1505         table = self.query.base_table
1506         result = [
1507             'UPDATE %s SET' % qn(table),
1508             ', '.join(values),
1509         ]
1510         where, params = self.compile(self.query.where)
1511         if where:
1512             result.append('WHERE %s' % where)
1513         return ' '.join(result), tuple(update_params + params)
1514 
1515     def execute_sql(self, result_type):
1516         """
1517         Execute the specified update. Return the number of rows affected by
1518         the primary update query. The "primary update query" is the first
1519         non-empty query that is executed. Row counts for any subsequent,
1520         related queries are not available.
1521         """
1522         cursor = super().execute_sql(result_type)
1523         try:
1524             rows = cursor.rowcount if cursor else 0
1525             is_empty = cursor is None
1526         finally:
1527             if cursor:
1528                 cursor.close()
1529         for query in self.query.get_related_updates():
1530             aux_rows = query.get_compiler(self.using).execute_sql(result_type)
1531             if is_empty and aux_rows:
1532                 rows = aux_rows
1533                 is_empty = False
1534         return rows
1535 
1536     def pre_sql_setup(self):
1537         """
1538         If the update depends on results from other tables, munge the "where"
1539         conditions to match the format required for (portable) SQL updates.
1540 
1541         If multiple updates are required, pull out the id values to update at
1542         this point so that they don't change as a result of the progressive
1543         updates.
1544         """
1545         refcounts_before = self.query.alias_refcount.copy()
1546         # Ensure base table is in the query
1547         self.query.get_initial_alias()
1548         count = self.query.count_active_tables()
1549         if not self.query.related_updates and count == 1:
1550             return
1551         query = self.query.chain(klass=Query)
1552         query.select_related = False
1553         query.clear_ordering(True)
1554         query.extra = {}
1555         query.select = []
1556         query.add_fields([query.get_meta().pk.name])
1557         super().pre_sql_setup()
1558 
1559         must_pre_select = count > 1 and not self.connection.features.update_can_self_select
1560 
1561         # Now we adjust the current query: reset the where clause and get rid
1562         # of all the tables we don't need (since they're in the sub-select).
1563         self.query.where = self.query.where_class()
1564         if self.query.related_updates or must_pre_select:
1565             # Either we're using the idents in multiple update queries (so
1566             # don't want them to change), or the db backend doesn't support
1567             # selecting from the updating table (e.g. MySQL).
1568             idents = []
1569             for rows in query.get_compiler(self.using).execute_sql(MULTI):
1570                 idents.extend(r[0] for r in rows)
1571             self.query.add_filter(('pk__in', idents))
1572             self.query.related_ids = idents
1573         else:
1574             # The fast path. Filters and updates in one query.
1575             self.query.add_filter(('pk__in', query))
1576         self.query.reset_refcounts(refcounts_before)
1577 
1578 
1579 class SQLAggregateCompiler(SQLCompiler):
1580     def as_sql(self):
1581         """
1582         Create the SQL for this query. Return the SQL string and list of
1583         parameters.
1584         """
1585         sql, params = [], []
1586         for annotation in self.query.annotation_select.values():
1587             ann_sql, ann_params = self.compile(annotation)
1588             ann_sql, ann_params = annotation.select_format(self, ann_sql, ann_params)
1589             sql.append(ann_sql)
1590             params.extend(ann_params)
1591         self.col_count = len(self.query.annotation_select)
1592         sql = ', '.join(sql)
1593         params = tuple(params)
1594 
1595         sql = 'SELECT %s FROM (%s) subquery' % (sql, self.query.subquery)
1596         params = params + self.query.sub_params
1597         return sql, params
1598 
1599 
1600 def cursor_iter(cursor, sentinel, col_count, itersize):
1601     """
1602     Yield blocks of rows from a cursor and ensure the cursor is closed when
1603     done.
1604     """
1605     try:
1606         for rows in iter((lambda: cursor.fetchmany(itersize)), sentinel):
1607             yield rows if col_count is None else [r[:col_count] for r in rows]
1608     finally:
1609         cursor.close()

</code><intended_behavior>These methods in the SQL compiler should account for and correctly handle the `output_field` specified by `ExpressionWrapper`, ensuring that it is correctly applied in the SQL query, especially in the `GROUP BY`, `ORDER BY`, and `SELECT` clauses. If there is indeed a flaw in how these methods are handling expressions wrapped in `ExpressionWrapper`, particularly when it comes to recognizing and applying the `output_field`, fixing this would involve ensuring that the compiler accurately respects and utilizes the `output_field` information provided by such expressions, thus preventing the `FieldError` seen. This includes correctly handling complex expressions where fields of differing types are combined, ensuring they do not lose their explicit `output_field` specification through the query construction process.</intended_behavior>]
2025-10-17 12:07:13.107 | INFO     | Search completed. Bug locations: [<file>django/db/models/expressions.py</file>
<class>ExpressionWrapper</class>
<method>None</method>
<code>
853 class ExpressionWrapper(Expression):
854     """
855     An expression that can wrap another expression so that it can provide
856     extra context to the inner expression, such as the output_field.
857     """
858 
859     def __init__(self, expression, output_field):
860         super().__init__(output_field=output_field)
861         if getattr(expression, '_output_field_or_none', True) is None:
862             expression = expression.copy()
863             expression.output_field = output_field
864         self.expression = expression
865 
866     def set_source_expressions(self, exprs):
867         self.expression = exprs[0]
868 
869     def get_source_expressions(self):
870         return [self.expression]
871 
872     def get_group_by_cols(self, alias=None):
873         return self.expression.get_group_by_cols(alias=alias)
874 
875     def as_sql(self, compiler, connection):
876         return self.expression.as_sql(compiler, connection)
877 
878     def __repr__(self):
879         return "{}({})".format(self.__class__.__name__, self.expression)

</code><intended_behavior>The `ExpressionWrapper` class should ensure that the `output_field` for combined expressions is preserved through all operations, specifically when the expressions involve different types of fields. This behavior must maintain existing functionality while also providing a way to correctly infer or set the `output_field` for complex expressions. Potentially, enhancing the `__init__` or introducing a new method to better handle or verify `output_field` in cases of combined expressions could rectify the regression. This includes the implementation of a robust mechanism for inferring the appropriate `output_field` based on the types of the fields involved in the expression if it is not explicitly provided.</intended_behavior>, <file>django/db/models/sql/compiler.py</file>
<class>None</class>
<method>None</method>
<code>
1 import collections
2 import re
3 from functools import partial
4 from itertools import chain
5 
6 from django.core.exceptions import EmptyResultSet, FieldError
7 from django.db import DatabaseError, NotSupportedError
8 from django.db.models.constants import LOOKUP_SEP
9 from django.db.models.expressions import F, OrderBy, Random, RawSQL, Ref, Value
10 from django.db.models.functions import Cast
11 from django.db.models.query_utils import Q, select_related_descend
12 from django.db.models.sql.constants import (
13     CURSOR, GET_ITERATOR_CHUNK_SIZE, MULTI, NO_RESULTS, ORDER_DIR, SINGLE,
14 )
15 from django.db.models.sql.query import Query, get_order_dir
16 from django.db.transaction import TransactionManagementError
17 from django.utils.functional import cached_property
18 from django.utils.hashable import make_hashable
19 from django.utils.regex_helper import _lazy_re_compile
20 
21 
22 class SQLCompiler:
23     # Multiline ordering SQL clause may appear from RawSQL.
24     ordering_parts = _lazy_re_compile(
25         r'^(.*)\s(?:ASC|DESC).*',
26         re.MULTILINE | re.DOTALL,
27     )
28 
29     def __init__(self, query, connection, using):
30         self.query = query
31         self.connection = connection
32         self.using = using
33         self.quote_cache = {'*': '*'}
34         # The select, klass_info, and annotations are needed by QuerySet.iterator()
35         # these are set as a side-effect of executing the query. Note that we calculate
36         # separately a list of extra select columns needed for grammatical correctness
37         # of the query, but these columns are not included in self.select.
38         self.select = None
39         self.annotation_col_map = None
40         self.klass_info = None
41         self._meta_ordering = None
42 
43     def setup_query(self):
44         if all(self.query.alias_refcount[a] == 0 for a in self.query.alias_map):
45             self.query.get_initial_alias()
46         self.select, self.klass_info, self.annotation_col_map = self.get_select()
47         self.col_count = len(self.select)
48 
49     def pre_sql_setup(self):
50         """
51         Do any necessary class setup immediately prior to producing SQL. This
52         is for things that can't necessarily be done in __init__ because we
53         might not have all the pieces in place at that time.
54         """
55         self.setup_query()
56         order_by = self.get_order_by()
57         self.where, self.having = self.query.where.split_having()
58         extra_select = self.get_extra_select(order_by, self.select)
59         self.has_extra_select = bool(extra_select)
60         group_by = self.get_group_by(self.select + extra_select, order_by)
61         return extra_select, order_by, group_by
62 
63     def get_group_by(self, select, order_by):
64         """
65         Return a list of 2-tuples of form (sql, params).
66 
67         The logic of what exactly the GROUP BY clause contains is hard
68         to describe in other words than "if it passes the test suite,
69         then it is correct".
70         """
71         # Some examples:
72         #     SomeModel.objects.annotate(Count('somecol'))
73         #     GROUP BY: all fields of the model
74         #
75         #    SomeModel.objects.values('name').annotate(Count('somecol'))
76         #    GROUP BY: name
77         #
78         #    SomeModel.objects.annotate(Count('somecol')).values('name')
79         #    GROUP BY: all cols of the model
80         #
81         #    SomeModel.objects.values('name', 'pk').annotate(Count('somecol')).values('pk')
82         #    GROUP BY: name, pk
83         #
84         #    SomeModel.objects.values('name').annotate(Count('somecol')).values('pk')
85         #    GROUP BY: name, pk
86         #
87         # In fact, the self.query.group_by is the minimal set to GROUP BY. It
88         # can't be ever restricted to a smaller set, but additional columns in
89         # HAVING, ORDER BY, and SELECT clauses are added to it. Unfortunately
90         # the end result is that it is impossible to force the query to have
91         # a chosen GROUP BY clause - you can almost do this by using the form:
92         #     .values(*wanted_cols).annotate(AnAggregate())
93         # but any later annotations, extra selects, values calls that
94         # refer some column outside of the wanted_cols, order_by, or even
95         # filter calls can alter the GROUP BY clause.
96 
97         # The query.group_by is either None (no GROUP BY at all), True
98         # (group by select fields), or a list of expressions to be added
99         # to the group by.
100         if self.query.group_by is None:
101             return []
102         expressions = []
103         if self.query.group_by is not True:
104             # If the group by is set to a list (by .values() call most likely),
105             # then we need to add everything in it to the GROUP BY clause.
106             # Backwards compatibility hack for setting query.group_by. Remove
107             # when  we have public API way of forcing the GROUP BY clause.
108             # Converts string references to expressions.
109             for expr in self.query.group_by:
110                 if not hasattr(expr, 'as_sql'):
111                     expressions.append(self.query.resolve_ref(expr))
112                 else:
113                     expressions.append(expr)
114         # Note that even if the group_by is set, it is only the minimal
115         # set to group by. So, we need to add cols in select, order_by, and
116         # having into the select in any case.
117         ref_sources = {
118             expr.source for expr in expressions if isinstance(expr, Ref)
119         }
120         for expr, _, _ in select:
121             # Skip members of the select clause that are already included
122             # by reference.
123             if expr in ref_sources:
124                 continue
125             cols = expr.get_group_by_cols()
126             for col in cols:
127                 expressions.append(col)
128         for expr, (sql, params, is_ref) in order_by:
129             # Skip References to the select clause, as all expressions in the
130             # select clause are already part of the group by.
131             if not is_ref:
132                 expressions.extend(expr.get_group_by_cols())
133         having_group_by = self.having.get_group_by_cols() if self.having else ()
134         for expr in having_group_by:
135             expressions.append(expr)
136         result = []
137         seen = set()
138         expressions = self.collapse_group_by(expressions, having_group_by)
139 
140         for expr in expressions:
141             sql, params = self.compile(expr)
142             sql, params = expr.select_format(self, sql, params)
143             params_hash = make_hashable(params)
144             if (sql, params_hash) not in seen:
145                 result.append((sql, params))
146                 seen.add((sql, params_hash))
147         return result
148 
149     def collapse_group_by(self, expressions, having):
150         # If the DB can group by primary key, then group by the primary key of
151         # query's main model. Note that for PostgreSQL the GROUP BY clause must
152         # include the primary key of every table, but for MySQL it is enough to
153         # have the main table's primary key.
154         if self.connection.features.allows_group_by_pk:
155             # Determine if the main model's primary key is in the query.
156             pk = None
157             for expr in expressions:
158                 # Is this a reference to query's base table primary key? If the
159                 # expression isn't a Col-like, then skip the expression.
160                 if (getattr(expr, 'target', None) == self.query.model._meta.pk and
161                         getattr(expr, 'alias', None) == self.query.base_table):
162                     pk = expr
163                     break
164             # If the main model's primary key is in the query, group by that
165             # field, HAVING expressions, and expressions associated with tables
166             # that don't have a primary key included in the grouped columns.
167             if pk:
168                 pk_aliases = {
169                     expr.alias for expr in expressions
170                     if hasattr(expr, 'target') and expr.target.primary_key
171                 }
172                 expressions = [pk] + [
173                     expr for expr in expressions
174                     if expr in having or (
175                         getattr(expr, 'alias', None) is not None and expr.alias not in pk_aliases
176                     )
177                 ]
178         elif self.connection.features.allows_group_by_selected_pks:
179             # Filter out all expressions associated with a table's primary key
180             # present in the grouped columns. This is done by identifying all
181             # tables that have their primary key included in the grouped
182             # columns and removing non-primary key columns referring to them.
183             # Unmanaged models are excluded because they could be representing
184             # database views on which the optimization might not be allowed.
185             pks = {
186                 expr for expr in expressions
187                 if (
188                     hasattr(expr, 'target') and
189                     expr.target.primary_key and
190                     self.connection.features.allows_group_by_selected_pks_on_model(expr.target.model)
191                 )
192             }
193             aliases = {expr.alias for expr in pks}
194             expressions = [
195                 expr for expr in expressions if expr in pks or getattr(expr, 'alias', None) not in aliases
196             ]
197         return expressions
198 
199     def get_select(self):
200         """
201         Return three values:
202         - a list of 3-tuples of (expression, (sql, params), alias)
203         - a klass_info structure,
204         - a dictionary of annotations
205 
206         The (sql, params) is what the expression will produce, and alias is the
207         "AS alias" for the column (possibly None).
208 
209         The klass_info structure contains the following information:
210         - The base model of the query.
211         - Which columns for that model are present in the query (by
212           position of the select clause).
213         - related_klass_infos: [f, klass_info] to descent into
214 
215         The annotations is a dictionary of {'attname': column position} values.
216         """
217         select = []
218         klass_info = None
219         annotations = {}
220         select_idx = 0
221         for alias, (sql, params) in self.query.extra_select.items():
222             annotations[alias] = select_idx
223             select.append((RawSQL(sql, params), alias))
224             select_idx += 1
225         assert not (self.query.select and self.query.default_cols)
226         if self.query.default_cols:
227             cols = self.get_default_columns()
228         else:
229             # self.query.select is a special case. These columns never go to
230             # any model.
231             cols = self.query.select
232         if cols:
233             select_list = []
234             for col in cols:
235                 select_list.append(select_idx)
236                 select.append((col, None))
237                 select_idx += 1
238             klass_info = {
239                 'model': self.query.model,
240                 'select_fields': select_list,
241             }
242         for alias, annotation in self.query.annotation_select.items():
243             annotations[alias] = select_idx
244             select.append((annotation, alias))
245             select_idx += 1
246 
247         if self.query.select_related:
248             related_klass_infos = self.get_related_selections(select)
249             klass_info['related_klass_infos'] = related_klass_infos
250 
251             def get_select_from_parent(klass_info):
252                 for ki in klass_info['related_klass_infos']:
253                     if ki['from_parent']:
254                         ki['select_fields'] = (klass_info['select_fields'] +
255                                                ki['select_fields'])
256                     get_select_from_parent(ki)
257             get_select_from_parent(klass_info)
258 
259         ret = []
260         for col, alias in select:
261             try:
262                 sql, params = self.compile(col)
263             except EmptyResultSet:
264                 # Select a predicate that's always False.
265                 sql, params = '0', ()
266             else:
267                 sql, params = col.select_format(self, sql, params)
268             ret.append((col, (sql, params), alias))
269         return ret, klass_info, annotations
270 
271     def get_order_by(self):
272         """
273         Return a list of 2-tuples of form (expr, (sql, params, is_ref)) for the
274         ORDER BY clause.
275 
276         The order_by clause can alter the select clause (for example it
277         can add aliases to clauses that do not yet have one, or it can
278         add totally new select clauses).
279         """
280         if self.query.extra_order_by:
281             ordering = self.query.extra_order_by
282         elif not self.query.default_ordering:
283             ordering = self.query.order_by
284         elif self.query.order_by:
285             ordering = self.query.order_by
286         elif self.query.get_meta().ordering:
287             ordering = self.query.get_meta().ordering
288             self._meta_ordering = ordering
289         else:
290             ordering = []
291         if self.query.standard_ordering:
292             asc, desc = ORDER_DIR['ASC']
293         else:
294             asc, desc = ORDER_DIR['DESC']
295 
296         order_by = []
297         for field in ordering:
298             if hasattr(field, 'resolve_expression'):
299                 if isinstance(field, Value):
300                     # output_field must be resolved for constants.
301                     field = Cast(field, field.output_field)
302                 if not isinstance(field, OrderBy):
303                     field = field.asc()
304                 if not self.query.standard_ordering:
305                     field = field.copy()
306                     field.reverse_ordering()
307                 order_by.append((field, False))
308                 continue
309             if field == '?':  # random
310                 order_by.append((OrderBy(Random()), False))
311                 continue
312 
313             col, order = get_order_dir(field, asc)
314             descending = order == 'DESC'
315 
316             if col in self.query.annotation_select:
317                 # Reference to expression in SELECT clause
318                 order_by.append((
319                     OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),
320                     True))
321                 continue
322             if col in self.query.annotations:
323                 # References to an expression which is masked out of the SELECT
324                 # clause.
325                 expr = self.query.annotations[col]
326                 if isinstance(expr, Value):
327                     # output_field must be resolved for constants.
328                     expr = Cast(expr, expr.output_field)
329                 order_by.append((OrderBy(expr, descending=descending), False))
330                 continue
331 
332             if '.' in field:
333                 # This came in through an extra(order_by=...) addition. Pass it
334                 # on verbatim.
335                 table, col = col.split('.', 1)
336                 order_by.append((
337                     OrderBy(
338                         RawSQL('%s.%s' % (self.quote_name_unless_alias(table), col), []),
339                         descending=descending
340                     ), False))
341                 continue
342 
343             if not self.query.extra or col not in self.query.extra:
344                 # 'col' is of the form 'field' or 'field1__field2' or
345                 # '-field1__field2__field', etc.
346                 order_by.extend(self.find_ordering_name(
347                     field, self.query.get_meta(), default_order=asc))
348             else:
349                 if col not in self.query.extra_select:
350                     order_by.append((
351                         OrderBy(RawSQL(*self.query.extra[col]), descending=descending),
352                         False))
353                 else:
354                     order_by.append((
355                         OrderBy(Ref(col, RawSQL(*self.query.extra[col])), descending=descending),
356                         True))
357         result = []
358         seen = set()
359 
360         for expr, is_ref in order_by:
361             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)
362             if self.query.combinator:
363                 src = resolved.get_source_expressions()[0]
364                 expr_src = expr.get_source_expressions()[0]
365                 # Relabel order by columns to raw numbers if this is a combined
366                 # query; necessary since the columns can't be referenced by the
367                 # fully qualified name and the simple column names may collide.
368                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):
369                     if is_ref and col_alias == src.refs:
370                         src = src.source
371                     elif col_alias and not (
372                         isinstance(expr_src, F) and col_alias == expr_src.name
373                     ):
374                         continue
375                     if src == sel_expr:
376                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
377                         break
378                 else:
379                     if col_alias:
380                         raise DatabaseError('ORDER BY term does not match any column in the result set.')
381                     # Add column used in ORDER BY clause without an alias to
382                     # the selected columns.
383                     self.query.add_select_col(src)
384                     resolved.set_source_expressions([RawSQL('%d' % len(self.query.select), ())])
385             sql, params = self.compile(resolved)
386             # Don't add the same column twice, but the order direction is
387             # not taken into account so we strip it. When this entire method
388             # is refactored into expressions, then we can check each part as we
389             # generate it.
390             without_ordering = self.ordering_parts.search(sql)[1]
391             params_hash = make_hashable(params)
392             if (without_ordering, params_hash) in seen:
393                 continue
394             seen.add((without_ordering, params_hash))
395             result.append((resolved, (sql, params, is_ref)))
396         return result
397 
398     def get_extra_select(self, order_by, select):
399         extra_select = []
400         if self.query.distinct and not self.query.distinct_fields:
401             select_sql = [t[1] for t in select]
402             for expr, (sql, params, is_ref) in order_by:
403                 without_ordering = self.ordering_parts.search(sql)[1]
404                 if not is_ref and (without_ordering, params) not in select_sql:
405                     extra_select.append((expr, (without_ordering, params), None))
406         return extra_select
407 
408     def quote_name_unless_alias(self, name):
409         """
410         A wrapper around connection.ops.quote_name that doesn't quote aliases
411         for table names. This avoids problems with some SQL dialects that treat
412         quoted strings specially (e.g. PostgreSQL).
413         """
414         if name in self.quote_cache:
415             return self.quote_cache[name]
416         if ((name in self.query.alias_map and name not in self.query.table_map) or
417                 name in self.query.extra_select or (
418                     self.query.external_aliases.get(name) and name not in self.query.table_map)):
419             self.quote_cache[name] = name
420             return name
421         r = self.connection.ops.quote_name(name)
422         self.quote_cache[name] = r
423         return r
424 
425     def compile(self, node):
426         vendor_impl = getattr(node, 'as_' + self.connection.vendor, None)
427         if vendor_impl:
428             sql, params = vendor_impl(self, self.connection)
429         else:
430             sql, params = node.as_sql(self, self.connection)
431         return sql, params
432 
433     def get_combinator_sql(self, combinator, all):
434         features = self.connection.features
435         compilers = [
436             query.get_compiler(self.using, self.connection)
437             for query in self.query.combined_queries if not query.is_empty()
438         ]
439         if not features.supports_slicing_ordering_in_compound:
440             for query, compiler in zip(self.query.combined_queries, compilers):
441                 if query.low_mark or query.high_mark:
442                     raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')
443                 if compiler.get_order_by():
444                     raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')
445         parts = ()
446         for compiler in compilers:
447             try:
448                 # If the columns list is limited, then all combined queries
449                 # must have the same columns list. Set the selects defined on
450                 # the query on all combined queries, if not already set.
451                 if not compiler.query.values_select and self.query.values_select:
452                     compiler.query = compiler.query.clone()
453                     compiler.query.set_values((
454                         *self.query.extra_select,
455                         *self.query.values_select,
456                         *self.query.annotation_select,
457                     ))
458                 part_sql, part_args = compiler.as_sql()
459                 if compiler.query.combinator:
460                     # Wrap in a subquery if wrapping in parentheses isn't
461                     # supported.
462                     if not features.supports_parentheses_in_compound:
463                         part_sql = 'SELECT * FROM ({})'.format(part_sql)
464                     # Add parentheses when combining with compound query if not
465                     # already added for all compound queries.
466                     elif not features.supports_slicing_ordering_in_compound:
467                         part_sql = '({})'.format(part_sql)
468                 parts += ((part_sql, part_args),)
469             except EmptyResultSet:
470                 # Omit the empty queryset with UNION and with DIFFERENCE if the
471                 # first queryset is nonempty.
472                 if combinator == 'union' or (combinator == 'difference' and parts):
473                     continue
474                 raise
475         if not parts:
476             raise EmptyResultSet
477         combinator_sql = self.connection.ops.set_operators[combinator]
478         if all and combinator == 'union':
479             combinator_sql += ' ALL'
480         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'
481         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))
482         result = [' {} '.format(combinator_sql).join(sql_parts)]
483         params = []
484         for part in args_parts:
485             params.extend(part)
486         return result, params
487 
488     def as_sql(self, with_limits=True, with_col_aliases=False):
489         """
490         Create the SQL for this query. Return the SQL string and list of
491         parameters.
492 
493         If 'with_limits' is False, any limit/offset information is not included
494         in the query.
495         """
496         refcounts_before = self.query.alias_refcount.copy()
497         try:
498             extra_select, order_by, group_by = self.pre_sql_setup()
499             for_update_part = None
500             # Is a LIMIT/OFFSET clause needed?
501             with_limit_offset = with_limits and (self.query.high_mark is not None or self.query.low_mark)
502             combinator = self.query.combinator
503             features = self.connection.features
504             if combinator:
505                 if not getattr(features, 'supports_select_{}'.format(combinator)):
506                     raise NotSupportedError('{} is not supported on this database backend.'.format(combinator))
507                 result, params = self.get_combinator_sql(combinator, self.query.combinator_all)
508             else:
509                 distinct_fields, distinct_params = self.get_distinct()
510                 # This must come after 'select', 'ordering', and 'distinct'
511                 # (see docstring of get_from_clause() for details).
512                 from_, f_params = self.get_from_clause()
513                 where, w_params = self.compile(self.where) if self.where is not None else ("", [])
514                 having, h_params = self.compile(self.having) if self.having is not None else ("", [])
515                 result = ['SELECT']
516                 params = []
517 
518                 if self.query.distinct:
519                     distinct_result, distinct_params = self.connection.ops.distinct_sql(
520                         distinct_fields,
521                         distinct_params,
522                     )
523                     result += distinct_result
524                     params += distinct_params
525 
526                 out_cols = []
527                 col_idx = 1
528                 for _, (s_sql, s_params), alias in self.select + extra_select:
529                     if alias:
530                         s_sql = '%s AS %s' % (s_sql, self.connection.ops.quote_name(alias))
531                     elif with_col_aliases:
532                         s_sql = '%s AS %s' % (s_sql, 'Col%d' % col_idx)
533                         col_idx += 1
534                     params.extend(s_params)
535                     out_cols.append(s_sql)
536 
537                 result += [', '.join(out_cols), 'FROM', *from_]
538                 params.extend(f_params)
539 
540                 if self.query.select_for_update and self.connection.features.has_select_for_update:
541                     if self.connection.get_autocommit():
542                         raise TransactionManagementError('select_for_update cannot be used outside of a transaction.')
543 
544                     if with_limit_offset and not self.connection.features.supports_select_for_update_with_limit:
545                         raise NotSupportedError(
546                             'LIMIT/OFFSET is not supported with '
547                             'select_for_update on this database backend.'
548                         )
549                     nowait = self.query.select_for_update_nowait
550                     skip_locked = self.query.select_for_update_skip_locked
551                     of = self.query.select_for_update_of
552                     no_key = self.query.select_for_no_key_update
553                     # If it's a NOWAIT/SKIP LOCKED/OF/NO KEY query but the
554                     # backend doesn't support it, raise NotSupportedError to
555                     # prevent a possible deadlock.
556                     if nowait and not self.connection.features.has_select_for_update_nowait:
557                         raise NotSupportedError('NOWAIT is not supported on this database backend.')
558                     elif skip_locked and not self.connection.features.has_select_for_update_skip_locked:
559                         raise NotSupportedError('SKIP LOCKED is not supported on this database backend.')
560                     elif of and not self.connection.features.has_select_for_update_of:
561                         raise NotSupportedError('FOR UPDATE OF is not supported on this database backend.')
562                     elif no_key and not self.connection.features.has_select_for_no_key_update:
563                         raise NotSupportedError(
564                             'FOR NO KEY UPDATE is not supported on this '
565                             'database backend.'
566                         )
567                     for_update_part = self.connection.ops.for_update_sql(
568                         nowait=nowait,
569                         skip_locked=skip_locked,
570                         of=self.get_select_for_update_of_arguments(),
571                         no_key=no_key,
572                     )
573 
574                 if for_update_part and self.connection.features.for_update_after_from:
575                     result.append(for_update_part)
576 
577                 if where:
578                     result.append('WHERE %s' % where)
579                     params.extend(w_params)
580 
581                 grouping = []
582                 for g_sql, g_params in group_by:
583                     grouping.append(g_sql)
584                     params.extend(g_params)
585                 if grouping:
586                     if distinct_fields:
587                         raise NotImplementedError('annotate() + distinct(fields) is not implemented.')
588                     order_by = order_by or self.connection.ops.force_no_ordering()
589                     result.append('GROUP BY %s' % ', '.join(grouping))
590                     if self._meta_ordering:
591                         order_by = None
592                 if having:
593                     result.append('HAVING %s' % having)
594                     params.extend(h_params)
595 
596             if self.query.explain_query:
597                 result.insert(0, self.connection.ops.explain_query_prefix(
598                     self.query.explain_format,
599                     **self.query.explain_options
600                 ))
601 
602             if order_by:
603                 ordering = []
604                 for _, (o_sql, o_params, _) in order_by:
605                     ordering.append(o_sql)
606                     params.extend(o_params)
607                 result.append('ORDER BY %s' % ', '.join(ordering))
608 
609             if with_limit_offset:
610                 result.append(self.connection.ops.limit_offset_sql(self.query.low_mark, self.query.high_mark))
611 
612             if for_update_part and not self.connection.features.for_update_after_from:
613                 result.append(for_update_part)
614 
615             if self.query.subquery and extra_select:
616                 # If the query is used as a subquery, the extra selects would
617                 # result in more columns than the left-hand side expression is
618                 # expecting. This can happen when a subquery uses a combination
619                 # of order_by() and distinct(), forcing the ordering expressions
620                 # to be selected as well. Wrap the query in another subquery
621                 # to exclude extraneous selects.
622                 sub_selects = []
623                 sub_params = []
624                 for index, (select, _, alias) in enumerate(self.select, start=1):
625                     if not alias and with_col_aliases:
626                         alias = 'col%d' % index
627                     if alias:
628                         sub_selects.append("%s.%s" % (
629                             self.connection.ops.quote_name('subquery'),
630                             self.connection.ops.quote_name(alias),
631                         ))
632                     else:
633                         select_clone = select.relabeled_clone({select.alias: 'subquery'})
634                         subselect, subparams = select_clone.as_sql(self, self.connection)
635                         sub_selects.append(subselect)
636                         sub_params.extend(subparams)
637                 return 'SELECT %s FROM (%s) subquery' % (
638                     ', '.join(sub_selects),
639                     ' '.join(result),
640                 ), tuple(sub_params + params)
641 
642             return ' '.join(result), tuple(params)
643         finally:
644             # Finally do cleanup - get rid of the joins we created above.
645             self.query.reset_refcounts(refcounts_before)
646 
647     def get_default_columns(self, start_alias=None, opts=None, from_parent=None):
648         """
649         Compute the default columns for selecting every field in the base
650         model. Will sometimes be called to pull in related models (e.g. via
651         select_related), in which case "opts" and "start_alias" will be given
652         to provide a starting point for the traversal.
653 
654         Return a list of strings, quoted appropriately for use in SQL
655         directly, as well as a set of aliases used in the select statement (if
656         'as_pairs' is True, return a list of (alias, col_name) pairs instead
657         of strings as the first component and None as the second component).
658         """
659         result = []
660         if opts is None:
661             opts = self.query.get_meta()
662         only_load = self.deferred_to_columns()
663         start_alias = start_alias or self.query.get_initial_alias()
664         # The 'seen_models' is used to optimize checking the needed parent
665         # alias for a given field. This also includes None -> start_alias to
666         # be used by local fields.
667         seen_models = {None: start_alias}
668 
669         for field in opts.concrete_fields:
670             model = field.model._meta.concrete_model
671             # A proxy model will have a different model and concrete_model. We
672             # will assign None if the field belongs to this model.
673             if model == opts.model:
674                 model = None
675             if from_parent and model is not None and issubclass(
676                     from_parent._meta.concrete_model, model._meta.concrete_model):
677                 # Avoid loading data for already loaded parents.
678                 # We end up here in the case select_related() resolution
679                 # proceeds from parent model to child model. In that case the
680                 # parent model data is already present in the SELECT clause,
681                 # and we want to avoid reloading the same data again.
682                 continue
683             if field.model in only_load and field.attname not in only_load[field.model]:
684                 continue
685             alias = self.query.join_parent_model(opts, model, start_alias,
686                                                  seen_models)
687             column = field.get_col(alias)
688             result.append(column)
689         return result
690 
691     def get_distinct(self):
692         """
693         Return a quoted list of fields to use in DISTINCT ON part of the query.
694 
695         This method can alter the tables in the query, and thus it must be
696         called before get_from_clause().
697         """
698         result = []
699         params = []
700         opts = self.query.get_meta()
701 
702         for name in self.query.distinct_fields:
703             parts = name.split(LOOKUP_SEP)
704             _, targets, alias, joins, path, _, transform_function = self._setup_joins(parts, opts, None)
705             targets, alias, _ = self.query.trim_joins(targets, joins, path)
706             for target in targets:
707                 if name in self.query.annotation_select:
708                     result.append(name)
709                 else:
710                     r, p = self.compile(transform_function(target, alias))
711                     result.append(r)
712                     params.append(p)
713         return result, params
714 
715     def find_ordering_name(self, name, opts, alias=None, default_order='ASC',
716                            already_seen=None):
717         """
718         Return the table alias (the name might be ambiguous, the alias will
719         not be) and column name for ordering by the given 'name' parameter.
720         The 'name' is of the form 'field1__field2__...__fieldN'.
721         """
722         name, order = get_order_dir(name, default_order)
723         descending = order == 'DESC'
724         pieces = name.split(LOOKUP_SEP)
725         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)
726 
727         # If we get to this point and the field is a relation to another model,
728         # append the default ordering for that model unless it is the pk
729         # shortcut or the attribute name of the field that is specified.
730         if (
731             field.is_relation and
732             opts.ordering and
733             getattr(field, 'attname', None) != pieces[-1] and
734             name != 'pk'
735         ):
736             # Firstly, avoid infinite loops.
737             already_seen = already_seen or set()
738             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)
739             if join_tuple in already_seen:
740                 raise FieldError('Infinite loop caused by ordering.')
741             already_seen.add(join_tuple)
742 
743             results = []
744             for item in opts.ordering:
745                 if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):
746                     item = item.desc() if descending else item.asc()
747                 if isinstance(item, OrderBy):
748                     results.append((item, False))
749                     continue
750                 results.extend(self.find_ordering_name(item, opts, alias,
751                                                        order, already_seen))
752             return results
753         targets, alias, _ = self.query.trim_joins(targets, joins, path)
754         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]
755 
756     def _setup_joins(self, pieces, opts, alias):
757         """
758         Helper method for get_order_by() and get_distinct().
759 
760         get_ordering() and get_distinct() must produce same target columns on
761         same input, as the prefixes of get_ordering() and get_distinct() must
762         match. Executing SQL where this is not true is an error.
763         """
764         alias = alias or self.query.get_initial_alias()
765         field, targets, opts, joins, path, transform_function = self.query.setup_joins(pieces, opts, alias)
766         alias = joins[-1]
767         return field, targets, alias, joins, path, opts, transform_function
768 
769     def get_from_clause(self):
770         """
771         Return a list of strings that are joined together to go after the
772         "FROM" part of the query, as well as a list any extra parameters that
773         need to be included. Subclasses, can override this to create a
774         from-clause via a "select".
775 
776         This should only be called after any SQL construction methods that
777         might change the tables that are needed. This means the select columns,
778         ordering, and distinct must be done first.
779         """
780         result = []
781         params = []
782         for alias in tuple(self.query.alias_map):
783             if not self.query.alias_refcount[alias]:
784                 continue
785             try:
786                 from_clause = self.query.alias_map[alias]
787             except KeyError:
788                 # Extra tables can end up in self.tables, but not in the
789                 # alias_map if they aren't in a join. That's OK. We skip them.
790                 continue
791             clause_sql, clause_params = self.compile(from_clause)
792             result.append(clause_sql)
793             params.extend(clause_params)
794         for t in self.query.extra_tables:
795             alias, _ = self.query.table_alias(t)
796             # Only add the alias if it's not already present (the table_alias()
797             # call increments the refcount, so an alias refcount of one means
798             # this is the only reference).
799             if alias not in self.query.alias_map or self.query.alias_refcount[alias] == 1:
800                 result.append(', %s' % self.quote_name_unless_alias(alias))
801         return result, params
802 
803     def get_related_selections(self, select, opts=None, root_alias=None, cur_depth=1,
804                                requested=None, restricted=None):
805         """
806         Fill in the information needed for a select_related query. The current
807         depth is measured as the number of connections away from the root model
808         (for example, cur_depth=1 means we are looking at models with direct
809         connections to the root model).
810         """
811         def _get_field_choices():
812             direct_choices = (f.name for f in opts.fields if f.is_relation)
813             reverse_choices = (
814                 f.field.related_query_name()
815                 for f in opts.related_objects if f.field.unique
816             )
817             return chain(direct_choices, reverse_choices, self.query._filtered_relations)
818 
819         related_klass_infos = []
820         if not restricted and cur_depth > self.query.max_depth:
821             # We've recursed far enough; bail out.
822             return related_klass_infos
823 
824         if not opts:
825             opts = self.query.get_meta()
826             root_alias = self.query.get_initial_alias()
827         only_load = self.query.get_loaded_field_names()
828 
829         # Setup for the case when only particular related fields should be
830         # included in the related selection.
831         fields_found = set()
832         if requested is None:
833             restricted = isinstance(self.query.select_related, dict)
834             if restricted:
835                 requested = self.query.select_related
836 
837         def get_related_klass_infos(klass_info, related_klass_infos):
838             klass_info['related_klass_infos'] = related_klass_infos
839 
840         for f in opts.fields:
841             field_model = f.model._meta.concrete_model
842             fields_found.add(f.name)
843 
844             if restricted:
845                 next = requested.get(f.name, {})
846                 if not f.is_relation:
847                     # If a non-related field is used like a relation,
848                     # or if a single non-relational field is given.
849                     if next or f.name in requested:
850                         raise FieldError(
851                             "Non-relational field given in select_related: '%s'. "
852                             "Choices are: %s" % (
853                                 f.name,
854                                 ", ".join(_get_field_choices()) or '(none)',
855                             )
856                         )
857             else:
858                 next = False
859 
860             if not select_related_descend(f, restricted, requested,
861                                           only_load.get(field_model)):
862                 continue
863             klass_info = {
864                 'model': f.remote_field.model,
865                 'field': f,
866                 'reverse': False,
867                 'local_setter': f.set_cached_value,
868                 'remote_setter': f.remote_field.set_cached_value if f.unique else lambda x, y: None,
869                 'from_parent': False,
870             }
871             related_klass_infos.append(klass_info)
872             select_fields = []
873             _, _, _, joins, _, _ = self.query.setup_joins(
874                 [f.name], opts, root_alias)
875             alias = joins[-1]
876             columns = self.get_default_columns(start_alias=alias, opts=f.remote_field.model._meta)
877             for col in columns:
878                 select_fields.append(len(select))
879                 select.append((col, None))
880             klass_info['select_fields'] = select_fields
881             next_klass_infos = self.get_related_selections(
882                 select, f.remote_field.model._meta, alias, cur_depth + 1, next, restricted)
883             get_related_klass_infos(klass_info, next_klass_infos)
884 
885         if restricted:
886             related_fields = [
887                 (o.field, o.related_model)
888                 for o in opts.related_objects
889                 if o.field.unique and not o.many_to_many
890             ]
891             for f, model in related_fields:
892                 if not select_related_descend(f, restricted, requested,
893                                               only_load.get(model), reverse=True):
894                     continue
895 
896                 related_field_name = f.related_query_name()
897                 fields_found.add(related_field_name)
898 
899                 join_info = self.query.setup_joins([related_field_name], opts, root_alias)
900                 alias = join_info.joins[-1]
901                 from_parent = issubclass(model, opts.model) and model is not opts.model
902                 klass_info = {
903                     'model': model,
904                     'field': f,
905                     'reverse': True,
906                     'local_setter': f.remote_field.set_cached_value,
907                     'remote_setter': f.set_cached_value,
908                     'from_parent': from_parent,
909                 }
910                 related_klass_infos.append(klass_info)
911                 select_fields = []
912                 columns = self.get_default_columns(
913                     start_alias=alias, opts=model._meta, from_parent=opts.model)
914                 for col in columns:
915                     select_fields.append(len(select))
916                     select.append((col, None))
917                 klass_info['select_fields'] = select_fields
918                 next = requested.get(f.related_query_name(), {})
919                 next_klass_infos = self.get_related_selections(
920                     select, model._meta, alias, cur_depth + 1,
921                     next, restricted)
922                 get_related_klass_infos(klass_info, next_klass_infos)
923 
924             def local_setter(obj, from_obj):
925                 # Set a reverse fk object when relation is non-empty.
926                 if from_obj:
927                     f.remote_field.set_cached_value(from_obj, obj)
928 
929             def remote_setter(name, obj, from_obj):
930                 setattr(from_obj, name, obj)
931 
932             for name in list(requested):
933                 # Filtered relations work only on the topmost level.
934                 if cur_depth > 1:
935                     break
936                 if name in self.query._filtered_relations:
937                     fields_found.add(name)
938                     f, _, join_opts, joins, _, _ = self.query.setup_joins([name], opts, root_alias)
939                     model = join_opts.model
940                     alias = joins[-1]
941                     from_parent = issubclass(model, opts.model) and model is not opts.model
942                     klass_info = {
943                         'model': model,
944                         'field': f,
945                         'reverse': True,
946                         'local_setter': local_setter,
947                         'remote_setter': partial(remote_setter, name),
948                         'from_parent': from_parent,
949                     }
950                     related_klass_infos.append(klass_info)
951                     select_fields = []
952                     columns = self.get_default_columns(
953                         start_alias=alias, opts=model._meta,
954                         from_parent=opts.model,
955                     )
956                     for col in columns:
957                         select_fields.append(len(select))
958                         select.append((col, None))
959                     klass_info['select_fields'] = select_fields
960                     next_requested = requested.get(name, {})
961                     next_klass_infos = self.get_related_selections(
962                         select, opts=model._meta, root_alias=alias,
963                         cur_depth=cur_depth + 1, requested=next_requested,
964                         restricted=restricted,
965                     )
966                     get_related_klass_infos(klass_info, next_klass_infos)
967             fields_not_found = set(requested).difference(fields_found)
968             if fields_not_found:
969                 invalid_fields = ("'%s'" % s for s in fields_not_found)
970                 raise FieldError(
971                     'Invalid field name(s) given in select_related: %s. '
972                     'Choices are: %s' % (
973                         ', '.join(invalid_fields),
974                         ', '.join(_get_field_choices()) or '(none)',
975                     )
976                 )
977         return related_klass_infos
978 
979     def get_select_for_update_of_arguments(self):
980         """
981         Return a quoted list of arguments for the SELECT FOR UPDATE OF part of
982         the query.
983         """
984         def _get_parent_klass_info(klass_info):
985             for parent_model, parent_link in klass_info['model']._meta.parents.items():
986                 parent_list = parent_model._meta.get_parent_list()
987                 yield {
988                     'model': parent_model,
989                     'field': parent_link,
990                     'reverse': False,
991                     'select_fields': [
992                         select_index
993                         for select_index in klass_info['select_fields']
994                         # Selected columns from a model or its parents.
995                         if (
996                             self.select[select_index][0].target.model == parent_model or
997                             self.select[select_index][0].target.model in parent_list
998                         )
999                     ],
1000                 }
1001 
1002         def _get_first_selected_col_from_model(klass_info):
1003             """
1004             Find the first selected column from a model. If it doesn't exist,
1005             don't lock a model.
1006 
1007             select_fields is filled recursively, so it also contains fields
1008             from the parent models.
1009             """
1010             for select_index in klass_info['select_fields']:
1011                 if self.select[select_index][0].target.model == klass_info['model']:
1012                     return self.select[select_index][0]
1013 
1014         def _get_field_choices():
1015             """Yield all allowed field paths in breadth-first search order."""
1016             queue = collections.deque([(None, self.klass_info)])
1017             while queue:
1018                 parent_path, klass_info = queue.popleft()
1019                 if parent_path is None:
1020                     path = []
1021                     yield 'self'
1022                 else:
1023                     field = klass_info['field']
1024                     if klass_info['reverse']:
1025                         field = field.remote_field
1026                     path = parent_path + [field.name]
1027                     yield LOOKUP_SEP.join(path)
1028                 queue.extend(
1029                     (path, klass_info)
1030                     for klass_info in _get_parent_klass_info(klass_info)
1031                 )
1032                 queue.extend(
1033                     (path, klass_info)
1034                     for klass_info in klass_info.get('related_klass_infos', [])
1035                 )
1036         result = []
1037         invalid_names = []
1038         for name in self.query.select_for_update_of:
1039             klass_info = self.klass_info
1040             if name == 'self':
1041                 col = _get_first_selected_col_from_model(klass_info)
1042             else:
1043                 for part in name.split(LOOKUP_SEP):
1044                     klass_infos = (
1045                         *klass_info.get('related_klass_infos', []),
1046                         *_get_parent_klass_info(klass_info),
1047                     )
1048                     for related_klass_info in klass_infos:
1049                         field = related_klass_info['field']
1050                         if related_klass_info['reverse']:
1051                             field = field.remote_field
1052                         if field.name == part:
1053                             klass_info = related_klass_info
1054                             break
1055                     else:
1056                         klass_info = None
1057                         break
1058                 if klass_info is None:
1059                     invalid_names.append(name)
1060                     continue
1061                 col = _get_first_selected_col_from_model(klass_info)
1062             if col is not None:
1063                 if self.connection.features.select_for_update_of_column:
1064                     result.append(self.compile(col)[0])
1065                 else:
1066                     result.append(self.quote_name_unless_alias(col.alias))
1067         if invalid_names:
1068             raise FieldError(
1069                 'Invalid field name(s) given in select_for_update(of=(...)): %s. '
1070                 'Only relational fields followed in the query are allowed. '
1071                 'Choices are: %s.' % (
1072                     ', '.join(invalid_names),
1073                     ', '.join(_get_field_choices()),
1074                 )
1075             )
1076         return result
1077 
1078     def deferred_to_columns(self):
1079         """
1080         Convert the self.deferred_loading data structure to mapping of table
1081         names to sets of column names which are to be loaded. Return the
1082         dictionary.
1083         """
1084         columns = {}
1085         self.query.deferred_to_data(columns, self.query.get_loaded_field_names_cb)
1086         return columns
1087 
1088     def get_converters(self, expressions):
1089         converters = {}
1090         for i, expression in enumerate(expressions):
1091             if expression:
1092                 backend_converters = self.connection.ops.get_db_converters(expression)
1093                 field_converters = expression.get_db_converters(self.connection)
1094                 if backend_converters or field_converters:
1095                     converters[i] = (backend_converters + field_converters, expression)
1096         return converters
1097 
1098     def apply_converters(self, rows, converters):
1099         connection = self.connection
1100         converters = list(converters.items())
1101         for row in map(list, rows):
1102             for pos, (convs, expression) in converters:
1103                 value = row[pos]
1104                 for converter in convs:
1105                     value = converter(value, expression, connection)
1106                 row[pos] = value
1107             yield row
1108 
1109     def results_iter(self, results=None, tuple_expected=False, chunked_fetch=False,
1110                      chunk_size=GET_ITERATOR_CHUNK_SIZE):
1111         """Return an iterator over the results from executing this query."""
1112         if results is None:
1113             results = self.execute_sql(MULTI, chunked_fetch=chunked_fetch, chunk_size=chunk_size)
1114         fields = [s[0] for s in self.select[0:self.col_count]]
1115         converters = self.get_converters(fields)
1116         rows = chain.from_iterable(results)
1117         if converters:
1118             rows = self.apply_converters(rows, converters)
1119             if tuple_expected:
1120                 rows = map(tuple, rows)
1121         return rows
1122 
1123     def has_results(self):
1124         """
1125         Backends (e.g. NoSQL) can override this in order to use optimized
1126         versions of "query has any results."
1127         """
1128         # This is always executed on a query clone, so we can modify self.query
1129         self.query.add_extra({'a': 1}, None, None, None, None, None)
1130         self.query.set_extra_mask(['a'])
1131         return bool(self.execute_sql(SINGLE))
1132 
1133     def execute_sql(self, result_type=MULTI, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE):
1134         """
1135         Run the query against the database and return the result(s). The
1136         return value is a single data item if result_type is SINGLE, or an
1137         iterator over the results if the result_type is MULTI.
1138 
1139         result_type is either MULTI (use fetchmany() to retrieve all rows),
1140         SINGLE (only retrieve a single row), or None. In this last case, the
1141         cursor is returned if any query is executed, since it's used by
1142         subclasses such as InsertQuery). It's possible, however, that no query
1143         is needed, as the filters describe an empty set. In that case, None is
1144         returned, to avoid any unnecessary database interaction.
1145         """
1146         result_type = result_type or NO_RESULTS
1147         try:
1148             sql, params = self.as_sql()
1149             if not sql:
1150                 raise EmptyResultSet
1151         except EmptyResultSet:
1152             if result_type == MULTI:
1153                 return iter([])
1154             else:
1155                 return
1156         if chunked_fetch:
1157             cursor = self.connection.chunked_cursor()
1158         else:
1159             cursor = self.connection.cursor()
1160         try:
1161             cursor.execute(sql, params)
1162         except Exception:
1163             # Might fail for server-side cursors (e.g. connection closed)
1164             cursor.close()
1165             raise
1166 
1167         if result_type == CURSOR:
1168             # Give the caller the cursor to process and close.
1169             return cursor
1170         if result_type == SINGLE:
1171             try:
1172                 val = cursor.fetchone()
1173                 if val:
1174                     return val[0:self.col_count]
1175                 return val
1176             finally:
1177                 # done with the cursor
1178                 cursor.close()
1179         if result_type == NO_RESULTS:
1180             cursor.close()
1181             return
1182 
1183         result = cursor_iter(
1184             cursor, self.connection.features.empty_fetchmany_value,
1185             self.col_count if self.has_extra_select else None,
1186             chunk_size,
1187         )
1188         if not chunked_fetch or not self.connection.features.can_use_chunked_reads:
1189             try:
1190                 # If we are using non-chunked reads, we return the same data
1191                 # structure as normally, but ensure it is all read into memory
1192                 # before going any further. Use chunked_fetch if requested,
1193                 # unless the database doesn't support it.
1194                 return list(result)
1195             finally:
1196                 # done with the cursor
1197                 cursor.close()
1198         return result
1199 
1200     def as_subquery_condition(self, alias, columns, compiler):
1201         qn = compiler.quote_name_unless_alias
1202         qn2 = self.connection.ops.quote_name
1203 
1204         for index, select_col in enumerate(self.query.select):
1205             lhs_sql, lhs_params = self.compile(select_col)
1206             rhs = '%s.%s' % (qn(alias), qn2(columns[index]))
1207             self.query.where.add(
1208                 RawSQL('%s = %s' % (lhs_sql, rhs), lhs_params), 'AND')
1209 
1210         sql, params = self.as_sql()
1211         return 'EXISTS (%s)' % sql, params
1212 
1213     def explain_query(self):
1214         result = list(self.execute_sql())
1215         # Some backends return 1 item tuples with strings, and others return
1216         # tuples with integers and strings. Flatten them out into strings.
1217         for row in result[0]:
1218             if not isinstance(row, str):
1219                 yield ' '.join(str(c) for c in row)
1220             else:
1221                 yield row
1222 
1223 
1224 class SQLInsertCompiler(SQLCompiler):
1225     returning_fields = None
1226     returning_params = tuple()
1227 
1228     def field_as_sql(self, field, val):
1229         """
1230         Take a field and a value intended to be saved on that field, and
1231         return placeholder SQL and accompanying params. Check for raw values,
1232         expressions, and fields with get_placeholder() defined in that order.
1233 
1234         When field is None, consider the value raw and use it as the
1235         placeholder, with no corresponding parameters returned.
1236         """
1237         if field is None:
1238             # A field value of None means the value is raw.
1239             sql, params = val, []
1240         elif hasattr(val, 'as_sql'):
1241             # This is an expression, let's compile it.
1242             sql, params = self.compile(val)
1243         elif hasattr(field, 'get_placeholder'):
1244             # Some fields (e.g. geo fields) need special munging before
1245             # they can be inserted.
1246             sql, params = field.get_placeholder(val, self, self.connection), [val]
1247         else:
1248             # Return the common case for the placeholder
1249             sql, params = '%s', [val]
1250 
1251         # The following hook is only used by Oracle Spatial, which sometimes
1252         # needs to yield 'NULL' and [] as its placeholder and params instead
1253         # of '%s' and [None]. The 'NULL' placeholder is produced earlier by
1254         # OracleOperations.get_geom_placeholder(). The following line removes
1255         # the corresponding None parameter. See ticket #10888.
1256         params = self.connection.ops.modify_insert_params(sql, params)
1257 
1258         return sql, params
1259 
1260     def prepare_value(self, field, value):
1261         """
1262         Prepare a value to be used in a query by resolving it if it is an
1263         expression and otherwise calling the field's get_db_prep_save().
1264         """
1265         if hasattr(value, 'resolve_expression'):
1266             value = value.resolve_expression(self.query, allow_joins=False, for_save=True)
1267             # Don't allow values containing Col expressions. They refer to
1268             # existing columns on a row, but in the case of insert the row
1269             # doesn't exist yet.
1270             if value.contains_column_references:
1271                 raise ValueError(
1272                     'Failed to insert expression "%s" on %s. F() expressions '
1273                     'can only be used to update, not to insert.' % (value, field)
1274                 )
1275             if value.contains_aggregate:
1276                 raise FieldError(
1277                     'Aggregate functions are not allowed in this query '
1278                     '(%s=%r).' % (field.name, value)
1279                 )
1280             if value.contains_over_clause:
1281                 raise FieldError(
1282                     'Window expressions are not allowed in this query (%s=%r).'
1283                     % (field.name, value)
1284                 )
1285         else:
1286             value = field.get_db_prep_save(value, connection=self.connection)
1287         return value
1288 
1289     def pre_save_val(self, field, obj):
1290         """
1291         Get the given field's value off the given obj. pre_save() is used for
1292         things like auto_now on DateTimeField. Skip it if this is a raw query.
1293         """
1294         if self.query.raw:
1295             return getattr(obj, field.attname)
1296         return field.pre_save(obj, add=True)
1297 
1298     def assemble_as_sql(self, fields, value_rows):
1299         """
1300         Take a sequence of N fields and a sequence of M rows of values, and
1301         generate placeholder SQL and parameters for each field and value.
1302         Return a pair containing:
1303          * a sequence of M rows of N SQL placeholder strings, and
1304          * a sequence of M rows of corresponding parameter values.
1305 
1306         Each placeholder string may contain any number of '%s' interpolation
1307         strings, and each parameter row will contain exactly as many params
1308         as the total number of '%s's in the corresponding placeholder row.
1309         """
1310         if not value_rows:
1311             return [], []
1312 
1313         # list of (sql, [params]) tuples for each object to be saved
1314         # Shape: [n_objs][n_fields][2]
1315         rows_of_fields_as_sql = (
1316             (self.field_as_sql(field, v) for field, v in zip(fields, row))
1317             for row in value_rows
1318         )
1319 
1320         # tuple like ([sqls], [[params]s]) for each object to be saved
1321         # Shape: [n_objs][2][n_fields]
1322         sql_and_param_pair_rows = (zip(*row) for row in rows_of_fields_as_sql)
1323 
1324         # Extract separate lists for placeholders and params.
1325         # Each of these has shape [n_objs][n_fields]
1326         placeholder_rows, param_rows = zip(*sql_and_param_pair_rows)
1327 
1328         # Params for each field are still lists, and need to be flattened.
1329         param_rows = [[p for ps in row for p in ps] for row in param_rows]
1330 
1331         return placeholder_rows, param_rows
1332 
1333     def as_sql(self):
1334         # We don't need quote_name_unless_alias() here, since these are all
1335         # going to be column names (so we can avoid the extra overhead).
1336         qn = self.connection.ops.quote_name
1337         opts = self.query.get_meta()
1338         insert_statement = self.connection.ops.insert_statement(ignore_conflicts=self.query.ignore_conflicts)
1339         result = ['%s %s' % (insert_statement, qn(opts.db_table))]
1340         fields = self.query.fields or [opts.pk]
1341         result.append('(%s)' % ', '.join(qn(f.column) for f in fields))
1342 
1343         if self.query.fields:
1344             value_rows = [
1345                 [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
1346                 for obj in self.query.objs
1347             ]
1348         else:
1349             # An empty object.
1350             value_rows = [[self.connection.ops.pk_default_value()] for _ in self.query.objs]
1351             fields = [None]
1352 
1353         # Currently the backends just accept values when generating bulk
1354         # queries and generate their own placeholders. Doing that isn't
1355         # necessary and it should be possible to use placeholders and
1356         # expressions in bulk inserts too.
1357         can_bulk = (not self.returning_fields and self.connection.features.has_bulk_insert)
1358 
1359         placeholder_rows, param_rows = self.assemble_as_sql(fields, value_rows)
1360 
1361         ignore_conflicts_suffix_sql = self.connection.ops.ignore_conflicts_suffix_sql(
1362             ignore_conflicts=self.query.ignore_conflicts
1363         )
1364         if self.returning_fields and self.connection.features.can_return_columns_from_insert:
1365             if self.connection.features.can_return_rows_from_bulk_insert:
1366                 result.append(self.connection.ops.bulk_insert_sql(fields, placeholder_rows))
1367                 params = param_rows
1368             else:
1369                 result.append("VALUES (%s)" % ", ".join(placeholder_rows[0]))
1370                 params = [param_rows[0]]
1371             if ignore_conflicts_suffix_sql:
1372                 result.append(ignore_conflicts_suffix_sql)
1373             # Skip empty r_sql to allow subclasses to customize behavior for
1374             # 3rd party backends. Refs #19096.
1375             r_sql, self.returning_params = self.connection.ops.return_insert_columns(self.returning_fields)
1376             if r_sql:
1377                 result.append(r_sql)
1378                 params += [self.returning_params]
1379             return [(" ".join(result), tuple(chain.from_iterable(params)))]
1380 
1381         if can_bulk:
1382             result.append(self.connection.ops.bulk_insert_sql(fields, placeholder_rows))
1383             if ignore_conflicts_suffix_sql:
1384                 result.append(ignore_conflicts_suffix_sql)
1385             return [(" ".join(result), tuple(p for ps in param_rows for p in ps))]
1386         else:
1387             if ignore_conflicts_suffix_sql:
1388                 result.append(ignore_conflicts_suffix_sql)
1389             return [
1390                 (" ".join(result + ["VALUES (%s)" % ", ".join(p)]), vals)
1391                 for p, vals in zip(placeholder_rows, param_rows)
1392             ]
1393 
1394     def execute_sql(self, returning_fields=None):
1395         assert not (
1396             returning_fields and len(self.query.objs) != 1 and
1397             not self.connection.features.can_return_rows_from_bulk_insert
1398         )
1399         self.returning_fields = returning_fields
1400         with self.connection.cursor() as cursor:
1401             for sql, params in self.as_sql():
1402                 cursor.execute(sql, params)
1403             if not self.returning_fields:
1404                 return []
1405             if self.connection.features.can_return_rows_from_bulk_insert and len(self.query.objs) > 1:
1406                 return self.connection.ops.fetch_returned_insert_rows(cursor)
1407             if self.connection.features.can_return_columns_from_insert:
1408                 assert len(self.query.objs) == 1
1409                 return [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]
1410             return [(self.connection.ops.last_insert_id(
1411                 cursor, self.query.get_meta().db_table, self.query.get_meta().pk.column
1412             ),)]
1413 
1414 
1415 class SQLDeleteCompiler(SQLCompiler):
1416     @cached_property
1417     def single_alias(self):
1418         # Ensure base table is in aliases.
1419         self.query.get_initial_alias()
1420         return sum(self.query.alias_refcount[t] > 0 for t in self.query.alias_map) == 1
1421 
1422     def _as_sql(self, query):
1423         result = [
1424             'DELETE FROM %s' % self.quote_name_unless_alias(query.base_table)
1425         ]
1426         where, params = self.compile(query.where)
1427         if where:
1428             result.append('WHERE %s' % where)
1429         return ' '.join(result), tuple(params)
1430 
1431     def as_sql(self):
1432         """
1433         Create the SQL for this query. Return the SQL string and list of
1434         parameters.
1435         """
1436         if self.single_alias:
1437             return self._as_sql(self.query)
1438         innerq = self.query.clone()
1439         innerq.__class__ = Query
1440         innerq.clear_select_clause()
1441         pk = self.query.model._meta.pk
1442         innerq.select = [
1443             pk.get_col(self.query.get_initial_alias())
1444         ]
1445         outerq = Query(self.query.model)
1446         outerq.where = self.query.where_class()
1447         outerq.add_q(Q(pk__in=innerq))
1448         return self._as_sql(outerq)
1449 
1450 
1451 class SQLUpdateCompiler(SQLCompiler):
1452     def as_sql(self):
1453         """
1454         Create the SQL for this query. Return the SQL string and list of
1455         parameters.
1456         """
1457         self.pre_sql_setup()
1458         if not self.query.values:
1459             return '', ()
1460         qn = self.quote_name_unless_alias
1461         values, update_params = [], []
1462         for field, model, val in self.query.values:
1463             if hasattr(val, 'resolve_expression'):
1464                 val = val.resolve_expression(self.query, allow_joins=False, for_save=True)
1465                 if val.contains_aggregate:
1466                     raise FieldError(
1467                         'Aggregate functions are not allowed in this query '
1468                         '(%s=%r).' % (field.name, val)
1469                     )
1470                 if val.contains_over_clause:
1471                     raise FieldError(
1472                         'Window expressions are not allowed in this query '
1473                         '(%s=%r).' % (field.name, val)
1474                     )
1475             elif hasattr(val, 'prepare_database_save'):
1476                 if field.remote_field:
1477                     val = field.get_db_prep_save(
1478                         val.prepare_database_save(field),
1479                         connection=self.connection,
1480                     )
1481                 else:
1482                     raise TypeError(
1483                         "Tried to update field %s with a model instance, %r. "
1484                         "Use a value compatible with %s."
1485                         % (field, val, field.__class__.__name__)
1486                     )
1487             else:
1488                 val = field.get_db_prep_save(val, connection=self.connection)
1489 
1490             # Getting the placeholder for the field.
1491             if hasattr(field, 'get_placeholder'):
1492                 placeholder = field.get_placeholder(val, self, self.connection)
1493             else:
1494                 placeholder = '%s'
1495             name = field.column
1496             if hasattr(val, 'as_sql'):
1497                 sql, params = self.compile(val)
1498                 values.append('%s = %s' % (qn(name), placeholder % sql))
1499                 update_params.extend(params)
1500             elif val is not None:
1501                 values.append('%s = %s' % (qn(name), placeholder))
1502                 update_params.append(val)
1503             else:
1504                 values.append('%s = NULL' % qn(name))
1505         table = self.query.base_table
1506         result = [
1507             'UPDATE %s SET' % qn(table),
1508             ', '.join(values),
1509         ]
1510         where, params = self.compile(self.query.where)
1511         if where:
1512             result.append('WHERE %s' % where)
1513         return ' '.join(result), tuple(update_params + params)
1514 
1515     def execute_sql(self, result_type):
1516         """
1517         Execute the specified update. Return the number of rows affected by
1518         the primary update query. The "primary update query" is the first
1519         non-empty query that is executed. Row counts for any subsequent,
1520         related queries are not available.
1521         """
1522         cursor = super().execute_sql(result_type)
1523         try:
1524             rows = cursor.rowcount if cursor else 0
1525             is_empty = cursor is None
1526         finally:
1527             if cursor:
1528                 cursor.close()
1529         for query in self.query.get_related_updates():
1530             aux_rows = query.get_compiler(self.using).execute_sql(result_type)
1531             if is_empty and aux_rows:
1532                 rows = aux_rows
1533                 is_empty = False
1534         return rows
1535 
1536     def pre_sql_setup(self):
1537         """
1538         If the update depends on results from other tables, munge the "where"
1539         conditions to match the format required for (portable) SQL updates.
1540 
1541         If multiple updates are required, pull out the id values to update at
1542         this point so that they don't change as a result of the progressive
1543         updates.
1544         """
1545         refcounts_before = self.query.alias_refcount.copy()
1546         # Ensure base table is in the query
1547         self.query.get_initial_alias()
1548         count = self.query.count_active_tables()
1549         if not self.query.related_updates and count == 1:
1550             return
1551         query = self.query.chain(klass=Query)
1552         query.select_related = False
1553         query.clear_ordering(True)
1554         query.extra = {}
1555         query.select = []
1556         query.add_fields([query.get_meta().pk.name])
1557         super().pre_sql_setup()
1558 
1559         must_pre_select = count > 1 and not self.connection.features.update_can_self_select
1560 
1561         # Now we adjust the current query: reset the where clause and get rid
1562         # of all the tables we don't need (since they're in the sub-select).
1563         self.query.where = self.query.where_class()
1564         if self.query.related_updates or must_pre_select:
1565             # Either we're using the idents in multiple update queries (so
1566             # don't want them to change), or the db backend doesn't support
1567             # selecting from the updating table (e.g. MySQL).
1568             idents = []
1569             for rows in query.get_compiler(self.using).execute_sql(MULTI):
1570                 idents.extend(r[0] for r in rows)
1571             self.query.add_filter(('pk__in', idents))
1572             self.query.related_ids = idents
1573         else:
1574             # The fast path. Filters and updates in one query.
1575             self.query.add_filter(('pk__in', query))
1576         self.query.reset_refcounts(refcounts_before)
1577 
1578 
1579 class SQLAggregateCompiler(SQLCompiler):
1580     def as_sql(self):
1581         """
1582         Create the SQL for this query. Return the SQL string and list of
1583         parameters.
1584         """
1585         sql, params = [], []
1586         for annotation in self.query.annotation_select.values():
1587             ann_sql, ann_params = self.compile(annotation)
1588             ann_sql, ann_params = annotation.select_format(self, ann_sql, ann_params)
1589             sql.append(ann_sql)
1590             params.extend(ann_params)
1591         self.col_count = len(self.query.annotation_select)
1592         sql = ', '.join(sql)
1593         params = tuple(params)
1594 
1595         sql = 'SELECT %s FROM (%s) subquery' % (sql, self.query.subquery)
1596         params = params + self.query.sub_params
1597         return sql, params
1598 
1599 
1600 def cursor_iter(cursor, sentinel, col_count, itersize):
1601     """
1602     Yield blocks of rows from a cursor and ensure the cursor is closed when
1603     done.
1604     """
1605     try:
1606         for rows in iter((lambda: cursor.fetchmany(itersize)), sentinel):
1607             yield rows if col_count is None else [r[:col_count] for r in rows]
1608     finally:
1609         cursor.close()

</code><intended_behavior>These methods in the SQL compiler should account for and correctly handle the `output_field` specified by `ExpressionWrapper`, ensuring that it is correctly applied in the SQL query, especially in the `GROUP BY`, `ORDER BY`, and `SELECT` clauses. If there is indeed a flaw in how these methods are handling expressions wrapped in `ExpressionWrapper`, particularly when it comes to recognizing and applying the `output_field`, fixing this would involve ensuring that the compiler accurately respects and utilizes the `output_field` information provided by such expressions, thus preventing the `FieldError` seen. This includes correctly handling complex expressions where fields of differing types are combined, ensuring they do not lose their explicit `output_field` specification through the query construction process.</intended_behavior>]
2025-10-17 12:07:13.107 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-17 12:07:13.107 | INFO     | Search-only: skipping patch selection
2025-10-17 12:07:13.252 | INFO     | Task django__django-13165 completed successfully.
2025-10-17 12:07:13.253 | INFO     | No patch generated. You can try running ACR again.
