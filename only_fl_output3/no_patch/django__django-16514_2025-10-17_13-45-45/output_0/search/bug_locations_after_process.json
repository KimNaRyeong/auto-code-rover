[
    {
        "rel_file_path": "django/contrib/admin/options.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__5.0/django/contrib/admin/options.py",
        "start": 914,
        "end": 929,
        "class_name": "ModelAdmin",
        "method_name": "log_addition",
        "code": "914     def log_addition(self, request, obj, message):\n915         \"\"\"\n916         Log that an object has been successfully added.\n917 \n918         The default implementation creates an admin LogEntry object.\n919         \"\"\"\n920         from django.contrib.admin.models import ADDITION, LogEntry\n921 \n922         return LogEntry.objects.log_action(\n923             user_id=request.user.pk,\n924             content_type_id=get_content_type_for_model(obj).pk,\n925             object_id=obj.pk,\n926             object_repr=str(obj),\n927             action_flag=ADDITION,\n928             change_message=message,\n929         )\n",
        "intended_behavior": "Update or extend this method to include a reference to or consideration of the AdminSite instance when creating LogEntry records. Ensure that when a new log entry is added, it includes which AdminSite it was created through, if applicable. This might involve extending the LogEntry model to include a foreign key to the AdminSite model (or a suitable identifier if the relationship is not direct), and adjusting the method to populate this field based on the admin site context."
    },
    {
        "rel_file_path": "django/contrib/admin/options.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__5.0/django/contrib/admin/options.py",
        "start": 614,
        "end": 2282,
        "class_name": "ModelAdmin",
        "method_name": null,
        "code": "614 class ModelAdmin(BaseModelAdmin):\n615     \"\"\"Encapsulate all admin options and functionality for a given model.\"\"\"\n616 \n617     list_display = (\"__str__\",)\n618     list_display_links = ()\n619     list_filter = ()\n620     list_select_related = False\n621     list_per_page = 100\n622     list_max_show_all = 200\n623     list_editable = ()\n624     search_fields = ()\n625     search_help_text = None\n626     date_hierarchy = None\n627     save_as = False\n628     save_as_continue = True\n629     save_on_top = False\n630     paginator = Paginator\n631     preserve_filters = True\n632     inlines = ()\n633 \n634     # Custom templates (designed to be over-ridden in subclasses)\n635     add_form_template = None\n636     change_form_template = None\n637     change_list_template = None\n638     delete_confirmation_template = None\n639     delete_selected_confirmation_template = None\n640     object_history_template = None\n641     popup_response_template = None\n642 \n643     # Actions\n644     actions = ()\n645     action_form = helpers.ActionForm\n646     actions_on_top = True\n647     actions_on_bottom = False\n648     actions_selection_counter = True\n649     checks_class = ModelAdminChecks\n650 \n651     def __init__(self, model, admin_site):\n652         self.model = model\n653         self.opts = model._meta\n654         self.admin_site = admin_site\n655         super().__init__()\n656 \n657     def __str__(self):\n658         return \"%s.%s\" % (self.opts.app_label, self.__class__.__name__)\n659 \n660     def __repr__(self):\n661         return (\n662             f\"<{self.__class__.__qualname__}: model={self.model.__qualname__} \"\n663             f\"site={self.admin_site!r}>\"\n664         )\n665 \n666     def get_inline_instances(self, request, obj=None):\n667         inline_instances = []\n668         for inline_class in self.get_inlines(request, obj):\n669             inline = inline_class(self.model, self.admin_site)\n670             if request:\n671                 if not (\n672                     inline.has_view_or_change_permission(request, obj)\n673                     or inline.has_add_permission(request, obj)\n674                     or inline.has_delete_permission(request, obj)\n675                 ):\n676                     continue\n677                 if not inline.has_add_permission(request, obj):\n678                     inline.max_num = 0\n679             inline_instances.append(inline)\n680 \n681         return inline_instances\n682 \n683     def get_urls(self):\n684         from django.urls import path\n685 \n686         def wrap(view):\n687             def wrapper(*args, **kwargs):\n688                 return self.admin_site.admin_view(view)(*args, **kwargs)\n689 \n690             wrapper.model_admin = self\n691             return update_wrapper(wrapper, view)\n692 \n693         info = self.opts.app_label, self.opts.model_name\n694 \n695         return [\n696             path(\"\", wrap(self.changelist_view), name=\"%s_%s_changelist\" % info),\n697             path(\"add/\", wrap(self.add_view), name=\"%s_%s_add\" % info),\n698             path(\n699                 \"<path:object_id>/history/\",\n700                 wrap(self.history_view),\n701                 name=\"%s_%s_history\" % info,\n702             ),\n703             path(\n704                 \"<path:object_id>/delete/\",\n705                 wrap(self.delete_view),\n706                 name=\"%s_%s_delete\" % info,\n707             ),\n708             path(\n709                 \"<path:object_id>/change/\",\n710                 wrap(self.change_view),\n711                 name=\"%s_%s_change\" % info,\n712             ),\n713             # For backwards compatibility (was the change url before 1.9)\n714             path(\n715                 \"<path:object_id>/\",\n716                 wrap(\n717                     RedirectView.as_view(\n718                         pattern_name=\"%s:%s_%s_change\"\n719                         % ((self.admin_site.name,) + info)\n720                     )\n721                 ),\n722             ),\n723         ]\n724 \n725     @property\n726     def urls(self):\n727         return self.get_urls()\n728 \n729     @property\n730     def media(self):\n731         extra = \"\" if settings.DEBUG else \".min\"\n732         js = [\n733             \"vendor/jquery/jquery%s.js\" % extra,\n734             \"jquery.init.js\",\n735             \"core.js\",\n736             \"admin/RelatedObjectLookups.js\",\n737             \"actions.js\",\n738             \"urlify.js\",\n739             \"prepopulate.js\",\n740             \"vendor/xregexp/xregexp%s.js\" % extra,\n741         ]\n742         return forms.Media(js=[\"admin/js/%s\" % url for url in js])\n743 \n744     def get_model_perms(self, request):\n745         \"\"\"\n746         Return a dict of all perms for this model. This dict has the keys\n747         ``add``, ``change``, ``delete``, and ``view`` mapping to the True/False\n748         for each of those actions.\n749         \"\"\"\n750         return {\n751             \"add\": self.has_add_permission(request),\n752             \"change\": self.has_change_permission(request),\n753             \"delete\": self.has_delete_permission(request),\n754             \"view\": self.has_view_permission(request),\n755         }\n756 \n757     def _get_form_for_get_fields(self, request, obj):\n758         return self.get_form(request, obj, fields=None)\n759 \n760     def get_form(self, request, obj=None, change=False, **kwargs):\n761         \"\"\"\n762         Return a Form class for use in the admin add view. This is used by\n763         add_view and change_view.\n764         \"\"\"\n765         if \"fields\" in kwargs:\n766             fields = kwargs.pop(\"fields\")\n767         else:\n768             fields = flatten_fieldsets(self.get_fieldsets(request, obj))\n769         excluded = self.get_exclude(request, obj)\n770         exclude = [] if excluded is None else list(excluded)\n771         readonly_fields = self.get_readonly_fields(request, obj)\n772         exclude.extend(readonly_fields)\n773         # Exclude all fields if it's a change form and the user doesn't have\n774         # the change permission.\n775         if (\n776             change\n777             and hasattr(request, \"user\")\n778             and not self.has_change_permission(request, obj)\n779         ):\n780             exclude.extend(fields)\n781         if excluded is None and hasattr(self.form, \"_meta\") and self.form._meta.exclude:\n782             # Take the custom ModelForm's Meta.exclude into account only if the\n783             # ModelAdmin doesn't define its own.\n784             exclude.extend(self.form._meta.exclude)\n785         # if exclude is an empty list we pass None to be consistent with the\n786         # default on modelform_factory\n787         exclude = exclude or None\n788 \n789         # Remove declared form fields which are in readonly_fields.\n790         new_attrs = dict.fromkeys(\n791             f for f in readonly_fields if f in self.form.declared_fields\n792         )\n793         form = type(self.form.__name__, (self.form,), new_attrs)\n794 \n795         defaults = {\n796             \"form\": form,\n797             \"fields\": fields,\n798             \"exclude\": exclude,\n799             \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n800             **kwargs,\n801         }\n802 \n803         if defaults[\"fields\"] is None and not modelform_defines_fields(\n804             defaults[\"form\"]\n805         ):\n806             defaults[\"fields\"] = forms.ALL_FIELDS\n807 \n808         try:\n809             return modelform_factory(self.model, **defaults)\n810         except FieldError as e:\n811             raise FieldError(\n812                 \"%s. Check fields/fieldsets/exclude attributes of class %s.\"\n813                 % (e, self.__class__.__name__)\n814             )\n815 \n816     def get_changelist(self, request, **kwargs):\n817         \"\"\"\n818         Return the ChangeList class for use on the changelist page.\n819         \"\"\"\n820         from django.contrib.admin.views.main import ChangeList\n821 \n822         return ChangeList\n823 \n824     def get_changelist_instance(self, request):\n825         \"\"\"\n826         Return a `ChangeList` instance based on `request`. May raise\n827         `IncorrectLookupParameters`.\n828         \"\"\"\n829         list_display = self.get_list_display(request)\n830         list_display_links = self.get_list_display_links(request, list_display)\n831         # Add the action checkboxes if any actions are available.\n832         if self.get_actions(request):\n833             list_display = [\"action_checkbox\", *list_display]\n834         sortable_by = self.get_sortable_by(request)\n835         ChangeList = self.get_changelist(request)\n836         return ChangeList(\n837             request,\n838             self.model,\n839             list_display,\n840             list_display_links,\n841             self.get_list_filter(request),\n842             self.date_hierarchy,\n843             self.get_search_fields(request),\n844             self.get_list_select_related(request),\n845             self.list_per_page,\n846             self.list_max_show_all,\n847             self.list_editable,\n848             self,\n849             sortable_by,\n850             self.search_help_text,\n851         )\n852 \n853     def get_object(self, request, object_id, from_field=None):\n854         \"\"\"\n855         Return an instance matching the field and value provided, the primary\n856         key is used if no field is provided. Return ``None`` if no match is\n857         found or the object_id fails validation.\n858         \"\"\"\n859         queryset = self.get_queryset(request)\n860         model = queryset.model\n861         field = (\n862             model._meta.pk if from_field is None else model._meta.get_field(from_field)\n863         )\n864         try:\n865             object_id = field.to_python(object_id)\n866             return queryset.get(**{field.name: object_id})\n867         except (model.DoesNotExist, ValidationError, ValueError):\n868             return None\n869 \n870     def get_changelist_form(self, request, **kwargs):\n871         \"\"\"\n872         Return a Form class for use in the Formset on the changelist page.\n873         \"\"\"\n874         defaults = {\n875             \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n876             **kwargs,\n877         }\n878         if defaults.get(\"fields\") is None and not modelform_defines_fields(\n879             defaults.get(\"form\")\n880         ):\n881             defaults[\"fields\"] = forms.ALL_FIELDS\n882 \n883         return modelform_factory(self.model, **defaults)\n884 \n885     def get_changelist_formset(self, request, **kwargs):\n886         \"\"\"\n887         Return a FormSet class for use on the changelist page if list_editable\n888         is used.\n889         \"\"\"\n890         defaults = {\n891             \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n892             **kwargs,\n893         }\n894         return modelformset_factory(\n895             self.model,\n896             self.get_changelist_form(request),\n897             extra=0,\n898             fields=self.list_editable,\n899             **defaults,\n900         )\n901 \n902     def get_formsets_with_inlines(self, request, obj=None):\n903         \"\"\"\n904         Yield formsets and the corresponding inlines.\n905         \"\"\"\n906         for inline in self.get_inline_instances(request, obj):\n907             yield inline.get_formset(request, obj), inline\n908 \n909     def get_paginator(\n910         self, request, queryset, per_page, orphans=0, allow_empty_first_page=True\n911     ):\n912         return self.paginator(queryset, per_page, orphans, allow_empty_first_page)\n913 \n914     def log_addition(self, request, obj, message):\n915         \"\"\"\n916         Log that an object has been successfully added.\n917 \n918         The default implementation creates an admin LogEntry object.\n919         \"\"\"\n920         from django.contrib.admin.models import ADDITION, LogEntry\n921 \n922         return LogEntry.objects.log_action(\n923             user_id=request.user.pk,\n924             content_type_id=get_content_type_for_model(obj).pk,\n925             object_id=obj.pk,\n926             object_repr=str(obj),\n927             action_flag=ADDITION,\n928             change_message=message,\n929         )\n930 \n931     def log_change(self, request, obj, message):\n932         \"\"\"\n933         Log that an object has been successfully changed.\n934 \n935         The default implementation creates an admin LogEntry object.\n936         \"\"\"\n937         from django.contrib.admin.models import CHANGE, LogEntry\n938 \n939         return LogEntry.objects.log_action(\n940             user_id=request.user.pk,\n941             content_type_id=get_content_type_for_model(obj).pk,\n942             object_id=obj.pk,\n943             object_repr=str(obj),\n944             action_flag=CHANGE,\n945             change_message=message,\n946         )\n947 \n948     def log_deletion(self, request, obj, object_repr):\n949         \"\"\"\n950         Log that an object will be deleted. Note that this method must be\n951         called before the deletion.\n952 \n953         The default implementation creates an admin LogEntry object.\n954         \"\"\"\n955         from django.contrib.admin.models import DELETION, LogEntry\n956 \n957         return LogEntry.objects.log_action(\n958             user_id=request.user.pk,\n959             content_type_id=get_content_type_for_model(obj).pk,\n960             object_id=obj.pk,\n961             object_repr=object_repr,\n962             action_flag=DELETION,\n963         )\n964 \n965     @display(description=mark_safe('<input type=\"checkbox\" id=\"action-toggle\">'))\n966     def action_checkbox(self, obj):\n967         \"\"\"\n968         A list_display column containing a checkbox widget.\n969         \"\"\"\n970         return helpers.checkbox.render(helpers.ACTION_CHECKBOX_NAME, str(obj.pk))\n971 \n972     @staticmethod\n973     def _get_action_description(func, name):\n974         return getattr(func, \"short_description\", capfirst(name.replace(\"_\", \" \")))\n975 \n976     def _get_base_actions(self):\n977         \"\"\"Return the list of actions, prior to any request-based filtering.\"\"\"\n978         actions = []\n979         base_actions = (self.get_action(action) for action in self.actions or [])\n980         # get_action might have returned None, so filter any of those out.\n981         base_actions = [action for action in base_actions if action]\n982         base_action_names = {name for _, name, _ in base_actions}\n983 \n984         # Gather actions from the admin site first\n985         for name, func in self.admin_site.actions:\n986             if name in base_action_names:\n987                 continue\n988             description = self._get_action_description(func, name)\n989             actions.append((func, name, description))\n990         # Add actions from this ModelAdmin.\n991         actions.extend(base_actions)\n992         return actions\n993 \n994     def _filter_actions_by_permissions(self, request, actions):\n995         \"\"\"Filter out any actions that the user doesn't have access to.\"\"\"\n996         filtered_actions = []\n997         for action in actions:\n998             callable = action[0]\n999             if not hasattr(callable, \"allowed_permissions\"):\n1000                 filtered_actions.append(action)\n1001                 continue\n1002             permission_checks = (\n1003                 getattr(self, \"has_%s_permission\" % permission)\n1004                 for permission in callable.allowed_permissions\n1005             )\n1006             if any(has_permission(request) for has_permission in permission_checks):\n1007                 filtered_actions.append(action)\n1008         return filtered_actions\n1009 \n1010     def get_actions(self, request):\n1011         \"\"\"\n1012         Return a dictionary mapping the names of all actions for this\n1013         ModelAdmin to a tuple of (callable, name, description) for each action.\n1014         \"\"\"\n1015         # If self.actions is set to None that means actions are disabled on\n1016         # this page.\n1017         if self.actions is None or IS_POPUP_VAR in request.GET:\n1018             return {}\n1019         actions = self._filter_actions_by_permissions(request, self._get_base_actions())\n1020         return {name: (func, name, desc) for func, name, desc in actions}\n1021 \n1022     def get_action_choices(self, request, default_choices=models.BLANK_CHOICE_DASH):\n1023         \"\"\"\n1024         Return a list of choices for use in a form object.  Each choice is a\n1025         tuple (name, description).\n1026         \"\"\"\n1027         choices = [] + default_choices\n1028         for func, name, description in self.get_actions(request).values():\n1029             choice = (name, description % model_format_dict(self.opts))\n1030             choices.append(choice)\n1031         return choices\n1032 \n1033     def get_action(self, action):\n1034         \"\"\"\n1035         Return a given action from a parameter, which can either be a callable,\n1036         or the name of a method on the ModelAdmin.  Return is a tuple of\n1037         (callable, name, description).\n1038         \"\"\"\n1039         # If the action is a callable, just use it.\n1040         if callable(action):\n1041             func = action\n1042             action = action.__name__\n1043 \n1044         # Next, look for a method. Grab it off self.__class__ to get an unbound\n1045         # method instead of a bound one; this ensures that the calling\n1046         # conventions are the same for functions and methods.\n1047         elif hasattr(self.__class__, action):\n1048             func = getattr(self.__class__, action)\n1049 \n1050         # Finally, look for a named method on the admin site\n1051         else:\n1052             try:\n1053                 func = self.admin_site.get_action(action)\n1054             except KeyError:\n1055                 return None\n1056 \n1057         description = self._get_action_description(func, action)\n1058         return func, action, description\n1059 \n1060     def get_list_display(self, request):\n1061         \"\"\"\n1062         Return a sequence containing the fields to be displayed on the\n1063         changelist.\n1064         \"\"\"\n1065         return self.list_display\n1066 \n1067     def get_list_display_links(self, request, list_display):\n1068         \"\"\"\n1069         Return a sequence containing the fields to be displayed as links\n1070         on the changelist. The list_display parameter is the list of fields\n1071         returned by get_list_display().\n1072         \"\"\"\n1073         if (\n1074             self.list_display_links\n1075             or self.list_display_links is None\n1076             or not list_display\n1077         ):\n1078             return self.list_display_links\n1079         else:\n1080             # Use only the first item in list_display as link\n1081             return list(list_display)[:1]\n1082 \n1083     def get_list_filter(self, request):\n1084         \"\"\"\n1085         Return a sequence containing the fields to be displayed as filters in\n1086         the right sidebar of the changelist page.\n1087         \"\"\"\n1088         return self.list_filter\n1089 \n1090     def get_list_select_related(self, request):\n1091         \"\"\"\n1092         Return a list of fields to add to the select_related() part of the\n1093         changelist items query.\n1094         \"\"\"\n1095         return self.list_select_related\n1096 \n1097     def get_search_fields(self, request):\n1098         \"\"\"\n1099         Return a sequence containing the fields to be searched whenever\n1100         somebody submits a search query.\n1101         \"\"\"\n1102         return self.search_fields\n1103 \n1104     def get_search_results(self, request, queryset, search_term):\n1105         \"\"\"\n1106         Return a tuple containing a queryset to implement the search\n1107         and a boolean indicating if the results may contain duplicates.\n1108         \"\"\"\n1109 \n1110         # Apply keyword searches.\n1111         def construct_search(field_name):\n1112             if field_name.startswith(\"^\"):\n1113                 return \"%s__istartswith\" % field_name.removeprefix(\"^\")\n1114             elif field_name.startswith(\"=\"):\n1115                 return \"%s__iexact\" % field_name.removeprefix(\"=\")\n1116             elif field_name.startswith(\"@\"):\n1117                 return \"%s__search\" % field_name.removeprefix(\"@\")\n1118             # Use field_name if it includes a lookup.\n1119             opts = queryset.model._meta\n1120             lookup_fields = field_name.split(LOOKUP_SEP)\n1121             # Go through the fields, following all relations.\n1122             prev_field = None\n1123             for path_part in lookup_fields:\n1124                 if path_part == \"pk\":\n1125                     path_part = opts.pk.name\n1126                 try:\n1127                     field = opts.get_field(path_part)\n1128                 except FieldDoesNotExist:\n1129                     # Use valid query lookups.\n1130                     if prev_field and prev_field.get_lookup(path_part):\n1131                         return field_name\n1132                 else:\n1133                     prev_field = field\n1134                     if hasattr(field, \"path_infos\"):\n1135                         # Update opts to follow the relation.\n1136                         opts = field.path_infos[-1].to_opts\n1137             # Otherwise, use the field with icontains.\n1138             return \"%s__icontains\" % field_name\n1139 \n1140         may_have_duplicates = False\n1141         search_fields = self.get_search_fields(request)\n1142         if search_fields and search_term:\n1143             orm_lookups = [\n1144                 construct_search(str(search_field)) for search_field in search_fields\n1145             ]\n1146             term_queries = []\n1147             for bit in smart_split(search_term):\n1148                 if bit.startswith(('\"', \"'\")) and bit[0] == bit[-1]:\n1149                     bit = unescape_string_literal(bit)\n1150                 or_queries = models.Q.create(\n1151                     [(orm_lookup, bit) for orm_lookup in orm_lookups],\n1152                     connector=models.Q.OR,\n1153                 )\n1154                 term_queries.append(or_queries)\n1155             queryset = queryset.filter(models.Q.create(term_queries))\n1156             may_have_duplicates |= any(\n1157                 lookup_spawns_duplicates(self.opts, search_spec)\n1158                 for search_spec in orm_lookups\n1159             )\n1160         return queryset, may_have_duplicates\n1161 \n1162     def get_preserved_filters(self, request):\n1163         \"\"\"\n1164         Return the preserved filters querystring.\n1165         \"\"\"\n1166         match = request.resolver_match\n1167         if self.preserve_filters and match:\n1168             current_url = \"%s:%s\" % (match.app_name, match.url_name)\n1169             changelist_url = \"admin:%s_%s_changelist\" % (\n1170                 self.opts.app_label,\n1171                 self.opts.model_name,\n1172             )\n1173             if current_url == changelist_url:\n1174                 preserved_filters = request.GET.urlencode()\n1175             else:\n1176                 preserved_filters = request.GET.get(\"_changelist_filters\")\n1177 \n1178             if preserved_filters:\n1179                 return urlencode({\"_changelist_filters\": preserved_filters})\n1180         return \"\"\n1181 \n1182     def construct_change_message(self, request, form, formsets, add=False):\n1183         \"\"\"\n1184         Construct a JSON structure describing changes from a changed object.\n1185         \"\"\"\n1186         return construct_change_message(form, formsets, add)\n1187 \n1188     def message_user(\n1189         self, request, message, level=messages.INFO, extra_tags=\"\", fail_silently=False\n1190     ):\n1191         \"\"\"\n1192         Send a message to the user. The default implementation\n1193         posts a message using the django.contrib.messages backend.\n1194 \n1195         Exposes almost the same API as messages.add_message(), but accepts the\n1196         positional arguments in a different order to maintain backwards\n1197         compatibility. For convenience, it accepts the `level` argument as\n1198         a string rather than the usual level number.\n1199         \"\"\"\n1200         if not isinstance(level, int):\n1201             # attempt to get the level if passed a string\n1202             try:\n1203                 level = getattr(messages.constants, level.upper())\n1204             except AttributeError:\n1205                 levels = messages.constants.DEFAULT_TAGS.values()\n1206                 levels_repr = \", \".join(\"`%s`\" % level for level in levels)\n1207                 raise ValueError(\n1208                     \"Bad message level string: `%s`. Possible values are: %s\"\n1209                     % (level, levels_repr)\n1210                 )\n1211 \n1212         messages.add_message(\n1213             request, level, message, extra_tags=extra_tags, fail_silently=fail_silently\n1214         )\n1215 \n1216     def save_form(self, request, form, change):\n1217         \"\"\"\n1218         Given a ModelForm return an unsaved instance. ``change`` is True if\n1219         the object is being changed, and False if it's being added.\n1220         \"\"\"\n1221         return form.save(commit=False)\n1222 \n1223     def save_model(self, request, obj, form, change):\n1224         \"\"\"\n1225         Given a model instance save it to the database.\n1226         \"\"\"\n1227         obj.save()\n1228 \n1229     def delete_model(self, request, obj):\n1230         \"\"\"\n1231         Given a model instance delete it from the database.\n1232         \"\"\"\n1233         obj.delete()\n1234 \n1235     def delete_queryset(self, request, queryset):\n1236         \"\"\"Given a queryset, delete it from the database.\"\"\"\n1237         queryset.delete()\n1238 \n1239     def save_formset(self, request, form, formset, change):\n1240         \"\"\"\n1241         Given an inline formset save it to the database.\n1242         \"\"\"\n1243         formset.save()\n1244 \n1245     def save_related(self, request, form, formsets, change):\n1246         \"\"\"\n1247         Given the ``HttpRequest``, the parent ``ModelForm`` instance, the\n1248         list of inline formsets and a boolean value based on whether the\n1249         parent is being added or changed, save the related objects to the\n1250         database. Note that at this point save_form() and save_model() have\n1251         already been called.\n1252         \"\"\"\n1253         form.save_m2m()\n1254         for formset in formsets:\n1255             self.save_formset(request, form, formset, change=change)\n1256 \n1257     def render_change_form(\n1258         self, request, context, add=False, change=False, form_url=\"\", obj=None\n1259     ):\n1260         app_label = self.opts.app_label\n1261         preserved_filters = self.get_preserved_filters(request)\n1262         form_url = add_preserved_filters(\n1263             {\"preserved_filters\": preserved_filters, \"opts\": self.opts}, form_url\n1264         )\n1265         view_on_site_url = self.get_view_on_site_url(obj)\n1266         has_editable_inline_admin_formsets = False\n1267         for inline in context[\"inline_admin_formsets\"]:\n1268             if (\n1269                 inline.has_add_permission\n1270                 or inline.has_change_permission\n1271                 or inline.has_delete_permission\n1272             ):\n1273                 has_editable_inline_admin_formsets = True\n1274                 break\n1275         context.update(\n1276             {\n1277                 \"add\": add,\n1278                 \"change\": change,\n1279                 \"has_view_permission\": self.has_view_permission(request, obj),\n1280                 \"has_add_permission\": self.has_add_permission(request),\n1281                 \"has_change_permission\": self.has_change_permission(request, obj),\n1282                 \"has_delete_permission\": self.has_delete_permission(request, obj),\n1283                 \"has_editable_inline_admin_formsets\": (\n1284                     has_editable_inline_admin_formsets\n1285                 ),\n1286                 \"has_file_field\": context[\"adminform\"].form.is_multipart()\n1287                 or any(\n1288                     admin_formset.formset.is_multipart()\n1289                     for admin_formset in context[\"inline_admin_formsets\"]\n1290                 ),\n1291                 \"has_absolute_url\": view_on_site_url is not None,\n1292                 \"absolute_url\": view_on_site_url,\n1293                 \"form_url\": form_url,\n1294                 \"opts\": self.opts,\n1295                 \"content_type_id\": get_content_type_for_model(self.model).pk,\n1296                 \"save_as\": self.save_as,\n1297                 \"save_on_top\": self.save_on_top,\n1298                 \"to_field_var\": TO_FIELD_VAR,\n1299                 \"is_popup_var\": IS_POPUP_VAR,\n1300                 \"app_label\": app_label,\n1301             }\n1302         )\n1303         if add and self.add_form_template is not None:\n1304             form_template = self.add_form_template\n1305         else:\n1306             form_template = self.change_form_template\n1307 \n1308         request.current_app = self.admin_site.name\n1309 \n1310         return TemplateResponse(\n1311             request,\n1312             form_template\n1313             or [\n1314                 \"admin/%s/%s/change_form.html\" % (app_label, self.opts.model_name),\n1315                 \"admin/%s/change_form.html\" % app_label,\n1316                 \"admin/change_form.html\",\n1317             ],\n1318             context,\n1319         )\n1320 \n1321     def response_add(self, request, obj, post_url_continue=None):\n1322         \"\"\"\n1323         Determine the HttpResponse for the add_view stage.\n1324         \"\"\"\n1325         opts = obj._meta\n1326         preserved_filters = self.get_preserved_filters(request)\n1327         obj_url = reverse(\n1328             \"admin:%s_%s_change\" % (opts.app_label, opts.model_name),\n1329             args=(quote(obj.pk),),\n1330             current_app=self.admin_site.name,\n1331         )\n1332         # Add a link to the object's change form if the user can edit the obj.\n1333         if self.has_change_permission(request, obj):\n1334             obj_repr = format_html('<a href=\"{}\">{}</a>', urlquote(obj_url), obj)\n1335         else:\n1336             obj_repr = str(obj)\n1337         msg_dict = {\n1338             \"name\": opts.verbose_name,\n1339             \"obj\": obj_repr,\n1340         }\n1341         # Here, we distinguish between different save types by checking for\n1342         # the presence of keys in request.POST.\n1343 \n1344         if IS_POPUP_VAR in request.POST:\n1345             to_field = request.POST.get(TO_FIELD_VAR)\n1346             if to_field:\n1347                 attr = str(to_field)\n1348             else:\n1349                 attr = obj._meta.pk.attname\n1350             value = obj.serializable_value(attr)\n1351             popup_response_data = json.dumps(\n1352                 {\n1353                     \"value\": str(value),\n1354                     \"obj\": str(obj),\n1355                 }\n1356             )\n1357             return TemplateResponse(\n1358                 request,\n1359                 self.popup_response_template\n1360                 or [\n1361                     \"admin/%s/%s/popup_response.html\"\n1362                     % (opts.app_label, opts.model_name),\n1363                     \"admin/%s/popup_response.html\" % opts.app_label,\n1364                     \"admin/popup_response.html\",\n1365                 ],\n1366                 {\n1367                     \"popup_response_data\": popup_response_data,\n1368                 },\n1369             )\n1370 \n1371         elif \"_continue\" in request.POST or (\n1372             # Redirecting after \"Save as new\".\n1373             \"_saveasnew\" in request.POST\n1374             and self.save_as_continue\n1375             and self.has_change_permission(request, obj)\n1376         ):\n1377             msg = _(\"The {name} \u201c{obj}\u201d was added successfully.\")\n1378             if self.has_change_permission(request, obj):\n1379                 msg += \" \" + _(\"You may edit it again below.\")\n1380             self.message_user(request, format_html(msg, **msg_dict), messages.SUCCESS)\n1381             if post_url_continue is None:\n1382                 post_url_continue = obj_url\n1383             post_url_continue = add_preserved_filters(\n1384                 {\"preserved_filters\": preserved_filters, \"opts\": opts},\n1385                 post_url_continue,\n1386             )\n1387             return HttpResponseRedirect(post_url_continue)\n1388 \n1389         elif \"_addanother\" in request.POST:\n1390             msg = format_html(\n1391                 _(\n1392                     \"The {name} \u201c{obj}\u201d was added successfully. You may add another \"\n1393                     \"{name} below.\"\n1394                 ),\n1395                 **msg_dict,\n1396             )\n1397             self.message_user(request, msg, messages.SUCCESS)\n1398             redirect_url = request.path\n1399             redirect_url = add_preserved_filters(\n1400                 {\"preserved_filters\": preserved_filters, \"opts\": opts}, redirect_url\n1401             )\n1402             return HttpResponseRedirect(redirect_url)\n1403 \n1404         else:\n1405             msg = format_html(\n1406                 _(\"The {name} \u201c{obj}\u201d was added successfully.\"), **msg_dict\n1407             )\n1408             self.message_user(request, msg, messages.SUCCESS)\n1409             return self.response_post_save_add(request, obj)\n1410 \n1411     def response_change(self, request, obj):\n1412         \"\"\"\n1413         Determine the HttpResponse for the change_view stage.\n1414         \"\"\"\n1415 \n1416         if IS_POPUP_VAR in request.POST:\n1417             opts = obj._meta\n1418             to_field = request.POST.get(TO_FIELD_VAR)\n1419             attr = str(to_field) if to_field else opts.pk.attname\n1420             value = request.resolver_match.kwargs[\"object_id\"]\n1421             new_value = obj.serializable_value(attr)\n1422             popup_response_data = json.dumps(\n1423                 {\n1424                     \"action\": \"change\",\n1425                     \"value\": str(value),\n1426                     \"obj\": str(obj),\n1427                     \"new_value\": str(new_value),\n1428                 }\n1429             )\n1430             return TemplateResponse(\n1431                 request,\n1432                 self.popup_response_template\n1433                 or [\n1434                     \"admin/%s/%s/popup_response.html\"\n1435                     % (opts.app_label, opts.model_name),\n1436                     \"admin/%s/popup_response.html\" % opts.app_label,\n1437                     \"admin/popup_response.html\",\n1438                 ],\n1439                 {\n1440                     \"popup_response_data\": popup_response_data,\n1441                 },\n1442             )\n1443 \n1444         opts = self.opts\n1445         preserved_filters = self.get_preserved_filters(request)\n1446 \n1447         msg_dict = {\n1448             \"name\": opts.verbose_name,\n1449             \"obj\": format_html('<a href=\"{}\">{}</a>', urlquote(request.path), obj),\n1450         }\n1451         if \"_continue\" in request.POST:\n1452             msg = format_html(\n1453                 _(\n1454                     \"The {name} \u201c{obj}\u201d was changed successfully. You may edit it \"\n1455                     \"again below.\"\n1456                 ),\n1457                 **msg_dict,\n1458             )\n1459             self.message_user(request, msg, messages.SUCCESS)\n1460             redirect_url = request.path\n1461             redirect_url = add_preserved_filters(\n1462                 {\"preserved_filters\": preserved_filters, \"opts\": opts}, redirect_url\n1463             )\n1464             return HttpResponseRedirect(redirect_url)\n1465 \n1466         elif \"_saveasnew\" in request.POST:\n1467             msg = format_html(\n1468                 _(\n1469                     \"The {name} \u201c{obj}\u201d was added successfully. You may edit it again \"\n1470                     \"below.\"\n1471                 ),\n1472                 **msg_dict,\n1473             )\n1474             self.message_user(request, msg, messages.SUCCESS)\n1475             redirect_url = reverse(\n1476                 \"admin:%s_%s_change\" % (opts.app_label, opts.model_name),\n1477                 args=(obj.pk,),\n1478                 current_app=self.admin_site.name,\n1479             )\n1480             redirect_url = add_preserved_filters(\n1481                 {\"preserved_filters\": preserved_filters, \"opts\": opts}, redirect_url\n1482             )\n1483             return HttpResponseRedirect(redirect_url)\n1484 \n1485         elif \"_addanother\" in request.POST:\n1486             msg = format_html(\n1487                 _(\n1488                     \"The {name} \u201c{obj}\u201d was changed successfully. You may add another \"\n1489                     \"{name} below.\"\n1490                 ),\n1491                 **msg_dict,\n1492             )\n1493             self.message_user(request, msg, messages.SUCCESS)\n1494             redirect_url = reverse(\n1495                 \"admin:%s_%s_add\" % (opts.app_label, opts.model_name),\n1496                 current_app=self.admin_site.name,\n1497             )\n1498             redirect_url = add_preserved_filters(\n1499                 {\"preserved_filters\": preserved_filters, \"opts\": opts}, redirect_url\n1500             )\n1501             return HttpResponseRedirect(redirect_url)\n1502 \n1503         else:\n1504             msg = format_html(\n1505                 _(\"The {name} \u201c{obj}\u201d was changed successfully.\"), **msg_dict\n1506             )\n1507             self.message_user(request, msg, messages.SUCCESS)\n1508             return self.response_post_save_change(request, obj)\n1509 \n1510     def _response_post_save(self, request, obj):\n1511         if self.has_view_or_change_permission(request):\n1512             post_url = reverse(\n1513                 \"admin:%s_%s_changelist\" % (self.opts.app_label, self.opts.model_name),\n1514                 current_app=self.admin_site.name,\n1515             )\n1516             preserved_filters = self.get_preserved_filters(request)\n1517             post_url = add_preserved_filters(\n1518                 {\"preserved_filters\": preserved_filters, \"opts\": self.opts}, post_url\n1519             )\n1520         else:\n1521             post_url = reverse(\"admin:index\", current_app=self.admin_site.name)\n1522         return HttpResponseRedirect(post_url)\n1523 \n1524     def response_post_save_add(self, request, obj):\n1525         \"\"\"\n1526         Figure out where to redirect after the 'Save' button has been pressed\n1527         when adding a new object.\n1528         \"\"\"\n1529         return self._response_post_save(request, obj)\n1530 \n1531     def response_post_save_change(self, request, obj):\n1532         \"\"\"\n1533         Figure out where to redirect after the 'Save' button has been pressed\n1534         when editing an existing object.\n1535         \"\"\"\n1536         return self._response_post_save(request, obj)\n1537 \n1538     def response_action(self, request, queryset):\n1539         \"\"\"\n1540         Handle an admin action. This is called if a request is POSTed to the\n1541         changelist; it returns an HttpResponse if the action was handled, and\n1542         None otherwise.\n1543         \"\"\"\n1544 \n1545         # There can be multiple action forms on the page (at the top\n1546         # and bottom of the change list, for example). Get the action\n1547         # whose button was pushed.\n1548         try:\n1549             action_index = int(request.POST.get(\"index\", 0))\n1550         except ValueError:\n1551             action_index = 0\n1552 \n1553         # Construct the action form.\n1554         data = request.POST.copy()\n1555         data.pop(helpers.ACTION_CHECKBOX_NAME, None)\n1556         data.pop(\"index\", None)\n1557 \n1558         # Use the action whose button was pushed\n1559         try:\n1560             data.update({\"action\": data.getlist(\"action\")[action_index]})\n1561         except IndexError:\n1562             # If we didn't get an action from the chosen form that's invalid\n1563             # POST data, so by deleting action it'll fail the validation check\n1564             # below. So no need to do anything here\n1565             pass\n1566 \n1567         action_form = self.action_form(data, auto_id=None)\n1568         action_form.fields[\"action\"].choices = self.get_action_choices(request)\n1569 \n1570         # If the form's valid we can handle the action.\n1571         if action_form.is_valid():\n1572             action = action_form.cleaned_data[\"action\"]\n1573             select_across = action_form.cleaned_data[\"select_across\"]\n1574             func = self.get_actions(request)[action][0]\n1575 \n1576             # Get the list of selected PKs. If nothing's selected, we can't\n1577             # perform an action on it, so bail. Except we want to perform\n1578             # the action explicitly on all objects.\n1579             selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)\n1580             if not selected and not select_across:\n1581                 # Reminder that something needs to be selected or nothing will happen\n1582                 msg = _(\n1583                     \"Items must be selected in order to perform \"\n1584                     \"actions on them. No items have been changed.\"\n1585                 )\n1586                 self.message_user(request, msg, messages.WARNING)\n1587                 return None\n1588 \n1589             if not select_across:\n1590                 # Perform the action only on the selected objects\n1591                 queryset = queryset.filter(pk__in=selected)\n1592 \n1593             response = func(self, request, queryset)\n1594 \n1595             # Actions may return an HttpResponse-like object, which will be\n1596             # used as the response from the POST. If not, we'll be a good\n1597             # little HTTP citizen and redirect back to the changelist page.\n1598             if isinstance(response, HttpResponseBase):\n1599                 return response\n1600             else:\n1601                 return HttpResponseRedirect(request.get_full_path())\n1602         else:\n1603             msg = _(\"No action selected.\")\n1604             self.message_user(request, msg, messages.WARNING)\n1605             return None\n1606 \n1607     def response_delete(self, request, obj_display, obj_id):\n1608         \"\"\"\n1609         Determine the HttpResponse for the delete_view stage.\n1610         \"\"\"\n1611         if IS_POPUP_VAR in request.POST:\n1612             popup_response_data = json.dumps(\n1613                 {\n1614                     \"action\": \"delete\",\n1615                     \"value\": str(obj_id),\n1616                 }\n1617             )\n1618             return TemplateResponse(\n1619                 request,\n1620                 self.popup_response_template\n1621                 or [\n1622                     \"admin/%s/%s/popup_response.html\"\n1623                     % (self.opts.app_label, self.opts.model_name),\n1624                     \"admin/%s/popup_response.html\" % self.opts.app_label,\n1625                     \"admin/popup_response.html\",\n1626                 ],\n1627                 {\n1628                     \"popup_response_data\": popup_response_data,\n1629                 },\n1630             )\n1631 \n1632         self.message_user(\n1633             request,\n1634             _(\"The %(name)s \u201c%(obj)s\u201d was deleted successfully.\")\n1635             % {\n1636                 \"name\": self.opts.verbose_name,\n1637                 \"obj\": obj_display,\n1638             },\n1639             messages.SUCCESS,\n1640         )\n1641 \n1642         if self.has_change_permission(request, None):\n1643             post_url = reverse(\n1644                 \"admin:%s_%s_changelist\" % (self.opts.app_label, self.opts.model_name),\n1645                 current_app=self.admin_site.name,\n1646             )\n1647             preserved_filters = self.get_preserved_filters(request)\n1648             post_url = add_preserved_filters(\n1649                 {\"preserved_filters\": preserved_filters, \"opts\": self.opts}, post_url\n1650             )\n1651         else:\n1652             post_url = reverse(\"admin:index\", current_app=self.admin_site.name)\n1653         return HttpResponseRedirect(post_url)\n1654 \n1655     def render_delete_form(self, request, context):\n1656         app_label = self.opts.app_label\n1657 \n1658         request.current_app = self.admin_site.name\n1659         context.update(\n1660             to_field_var=TO_FIELD_VAR,\n1661             is_popup_var=IS_POPUP_VAR,\n1662             media=self.media,\n1663         )\n1664 \n1665         return TemplateResponse(\n1666             request,\n1667             self.delete_confirmation_template\n1668             or [\n1669                 \"admin/{}/{}/delete_confirmation.html\".format(\n1670                     app_label, self.opts.model_name\n1671                 ),\n1672                 \"admin/{}/delete_confirmation.html\".format(app_label),\n1673                 \"admin/delete_confirmation.html\",\n1674             ],\n1675             context,\n1676         )\n1677 \n1678     def get_inline_formsets(self, request, formsets, inline_instances, obj=None):\n1679         # Edit permissions on parent model are required for editable inlines.\n1680         can_edit_parent = (\n1681             self.has_change_permission(request, obj)\n1682             if obj\n1683             else self.has_add_permission(request)\n1684         )\n1685         inline_admin_formsets = []\n1686         for inline, formset in zip(inline_instances, formsets):\n1687             fieldsets = list(inline.get_fieldsets(request, obj))\n1688             readonly = list(inline.get_readonly_fields(request, obj))\n1689             if can_edit_parent:\n1690                 has_add_permission = inline.has_add_permission(request, obj)\n1691                 has_change_permission = inline.has_change_permission(request, obj)\n1692                 has_delete_permission = inline.has_delete_permission(request, obj)\n1693             else:\n1694                 # Disable all edit-permissions, and override formset settings.\n1695                 has_add_permission = (\n1696                     has_change_permission\n1697                 ) = has_delete_permission = False\n1698                 formset.extra = formset.max_num = 0\n1699             has_view_permission = inline.has_view_permission(request, obj)\n1700             prepopulated = dict(inline.get_prepopulated_fields(request, obj))\n1701             inline_admin_formset = helpers.InlineAdminFormSet(\n1702                 inline,\n1703                 formset,\n1704                 fieldsets,\n1705                 prepopulated,\n1706                 readonly,\n1707                 model_admin=self,\n1708                 has_add_permission=has_add_permission,\n1709                 has_change_permission=has_change_permission,\n1710                 has_delete_permission=has_delete_permission,\n1711                 has_view_permission=has_view_permission,\n1712             )\n1713             inline_admin_formsets.append(inline_admin_formset)\n1714         return inline_admin_formsets\n1715 \n1716     def get_changeform_initial_data(self, request):\n1717         \"\"\"\n1718         Get the initial form data from the request's GET params.\n1719         \"\"\"\n1720         initial = dict(request.GET.items())\n1721         for k in initial:\n1722             try:\n1723                 f = self.opts.get_field(k)\n1724             except FieldDoesNotExist:\n1725                 continue\n1726             # We have to special-case M2Ms as a list of comma-separated PKs.\n1727             if isinstance(f, models.ManyToManyField):\n1728                 initial[k] = initial[k].split(\",\")\n1729         return initial\n1730 \n1731     def _get_obj_does_not_exist_redirect(self, request, opts, object_id):\n1732         \"\"\"\n1733         Create a message informing the user that the object doesn't exist\n1734         and return a redirect to the admin index page.\n1735         \"\"\"\n1736         msg = _(\"%(name)s with ID \u201c%(key)s\u201d doesn\u2019t exist. Perhaps it was deleted?\") % {\n1737             \"name\": opts.verbose_name,\n1738             \"key\": unquote(object_id),\n1739         }\n1740         self.message_user(request, msg, messages.WARNING)\n1741         url = reverse(\"admin:index\", current_app=self.admin_site.name)\n1742         return HttpResponseRedirect(url)\n1743 \n1744     @csrf_protect_m\n1745     def changeform_view(self, request, object_id=None, form_url=\"\", extra_context=None):\n1746         with transaction.atomic(using=router.db_for_write(self.model)):\n1747             return self._changeform_view(request, object_id, form_url, extra_context)\n1748 \n1749     def _changeform_view(self, request, object_id, form_url, extra_context):\n1750         to_field = request.POST.get(TO_FIELD_VAR, request.GET.get(TO_FIELD_VAR))\n1751         if to_field and not self.to_field_allowed(request, to_field):\n1752             raise DisallowedModelAdminToField(\n1753                 \"The field %s cannot be referenced.\" % to_field\n1754             )\n1755 \n1756         if request.method == \"POST\" and \"_saveasnew\" in request.POST:\n1757             object_id = None\n1758 \n1759         add = object_id is None\n1760 \n1761         if add:\n1762             if not self.has_add_permission(request):\n1763                 raise PermissionDenied\n1764             obj = None\n1765 \n1766         else:\n1767             obj = self.get_object(request, unquote(object_id), to_field)\n1768 \n1769             if request.method == \"POST\":\n1770                 if not self.has_change_permission(request, obj):\n1771                     raise PermissionDenied\n1772             else:\n1773                 if not self.has_view_or_change_permission(request, obj):\n1774                     raise PermissionDenied\n1775 \n1776             if obj is None:\n1777                 return self._get_obj_does_not_exist_redirect(\n1778                     request, self.opts, object_id\n1779                 )\n1780 \n1781         fieldsets = self.get_fieldsets(request, obj)\n1782         ModelForm = self.get_form(\n1783             request, obj, change=not add, fields=flatten_fieldsets(fieldsets)\n1784         )\n1785         if request.method == \"POST\":\n1786             form = ModelForm(request.POST, request.FILES, instance=obj)\n1787             formsets, inline_instances = self._create_formsets(\n1788                 request,\n1789                 form.instance,\n1790                 change=not add,\n1791             )\n1792             form_validated = form.is_valid()\n1793             if form_validated:\n1794                 new_object = self.save_form(request, form, change=not add)\n1795             else:\n1796                 new_object = form.instance\n1797             if all_valid(formsets) and form_validated:\n1798                 self.save_model(request, new_object, form, not add)\n1799                 self.save_related(request, form, formsets, not add)\n1800                 change_message = self.construct_change_message(\n1801                     request, form, formsets, add\n1802                 )\n1803                 if add:\n1804                     self.log_addition(request, new_object, change_message)\n1805                     return self.response_add(request, new_object)\n1806                 else:\n1807                     self.log_change(request, new_object, change_message)\n1808                     return self.response_change(request, new_object)\n1809             else:\n1810                 form_validated = False\n1811         else:\n1812             if add:\n1813                 initial = self.get_changeform_initial_data(request)\n1814                 form = ModelForm(initial=initial)\n1815                 formsets, inline_instances = self._create_formsets(\n1816                     request, form.instance, change=False\n1817                 )\n1818             else:\n1819                 form = ModelForm(instance=obj)\n1820                 formsets, inline_instances = self._create_formsets(\n1821                     request, obj, change=True\n1822                 )\n1823 \n1824         if not add and not self.has_change_permission(request, obj):\n1825             readonly_fields = flatten_fieldsets(fieldsets)\n1826         else:\n1827             readonly_fields = self.get_readonly_fields(request, obj)\n1828         admin_form = helpers.AdminForm(\n1829             form,\n1830             list(fieldsets),\n1831             # Clear prepopulated fields on a view-only form to avoid a crash.\n1832             self.get_prepopulated_fields(request, obj)\n1833             if add or self.has_change_permission(request, obj)\n1834             else {},\n1835             readonly_fields,\n1836             model_admin=self,\n1837         )\n1838         media = self.media + admin_form.media\n1839 \n1840         inline_formsets = self.get_inline_formsets(\n1841             request, formsets, inline_instances, obj\n1842         )\n1843         for inline_formset in inline_formsets:\n1844             media += inline_formset.media\n1845 \n1846         if add:\n1847             title = _(\"Add %s\")\n1848         elif self.has_change_permission(request, obj):\n1849             title = _(\"Change %s\")\n1850         else:\n1851             title = _(\"View %s\")\n1852         context = {\n1853             **self.admin_site.each_context(request),\n1854             \"title\": title % self.opts.verbose_name,\n1855             \"subtitle\": str(obj) if obj else None,\n1856             \"adminform\": admin_form,\n1857             \"object_id\": object_id,\n1858             \"original\": obj,\n1859             \"is_popup\": IS_POPUP_VAR in request.POST or IS_POPUP_VAR in request.GET,\n1860             \"to_field\": to_field,\n1861             \"media\": media,\n1862             \"inline_admin_formsets\": inline_formsets,\n1863             \"errors\": helpers.AdminErrorList(form, formsets),\n1864             \"preserved_filters\": self.get_preserved_filters(request),\n1865         }\n1866 \n1867         # Hide the \"Save\" and \"Save and continue\" buttons if \"Save as New\" was\n1868         # previously chosen to prevent the interface from getting confusing.\n1869         if (\n1870             request.method == \"POST\"\n1871             and not form_validated\n1872             and \"_saveasnew\" in request.POST\n1873         ):\n1874             context[\"show_save\"] = False\n1875             context[\"show_save_and_continue\"] = False\n1876             # Use the change template instead of the add template.\n1877             add = False\n1878 \n1879         context.update(extra_context or {})\n1880 \n1881         return self.render_change_form(\n1882             request, context, add=add, change=not add, obj=obj, form_url=form_url\n1883         )\n1884 \n1885     def add_view(self, request, form_url=\"\", extra_context=None):\n1886         return self.changeform_view(request, None, form_url, extra_context)\n1887 \n1888     def change_view(self, request, object_id, form_url=\"\", extra_context=None):\n1889         return self.changeform_view(request, object_id, form_url, extra_context)\n1890 \n1891     def _get_edited_object_pks(self, request, prefix):\n1892         \"\"\"Return POST data values of list_editable primary keys.\"\"\"\n1893         pk_pattern = re.compile(\n1894             r\"{}-\\d+-{}$\".format(re.escape(prefix), self.opts.pk.name)\n1895         )\n1896         return [value for key, value in request.POST.items() if pk_pattern.match(key)]\n1897 \n1898     def _get_list_editable_queryset(self, request, prefix):\n1899         \"\"\"\n1900         Based on POST data, return a queryset of the objects that were edited\n1901         via list_editable.\n1902         \"\"\"\n1903         object_pks = self._get_edited_object_pks(request, prefix)\n1904         queryset = self.get_queryset(request)\n1905         validate = queryset.model._meta.pk.to_python\n1906         try:\n1907             for pk in object_pks:\n1908                 validate(pk)\n1909         except ValidationError:\n1910             # Disable the optimization if the POST data was tampered with.\n1911             return queryset\n1912         return queryset.filter(pk__in=object_pks)\n1913 \n1914     @csrf_protect_m\n1915     def changelist_view(self, request, extra_context=None):\n1916         \"\"\"\n1917         The 'change list' admin view for this model.\n1918         \"\"\"\n1919         from django.contrib.admin.views.main import ERROR_FLAG\n1920 \n1921         app_label = self.opts.app_label\n1922         if not self.has_view_or_change_permission(request):\n1923             raise PermissionDenied\n1924 \n1925         try:\n1926             cl = self.get_changelist_instance(request)\n1927         except IncorrectLookupParameters:\n1928             # Wacky lookup parameters were given, so redirect to the main\n1929             # changelist page, without parameters, and pass an 'invalid=1'\n1930             # parameter via the query string. If wacky parameters were given\n1931             # and the 'invalid=1' parameter was already in the query string,\n1932             # something is screwed up with the database, so display an error\n1933             # page.\n1934             if ERROR_FLAG in request.GET:\n1935                 return SimpleTemplateResponse(\n1936                     \"admin/invalid_setup.html\",\n1937                     {\n1938                         \"title\": _(\"Database error\"),\n1939                     },\n1940                 )\n1941             return HttpResponseRedirect(request.path + \"?\" + ERROR_FLAG + \"=1\")\n1942 \n1943         # If the request was POSTed, this might be a bulk action or a bulk\n1944         # edit. Try to look up an action or confirmation first, but if this\n1945         # isn't an action the POST will fall through to the bulk edit check,\n1946         # below.\n1947         action_failed = False\n1948         selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)\n1949 \n1950         actions = self.get_actions(request)\n1951         # Actions with no confirmation\n1952         if (\n1953             actions\n1954             and request.method == \"POST\"\n1955             and \"index\" in request.POST\n1956             and \"_save\" not in request.POST\n1957         ):\n1958             if selected:\n1959                 response = self.response_action(\n1960                     request, queryset=cl.get_queryset(request)\n1961                 )\n1962                 if response:\n1963                     return response\n1964                 else:\n1965                     action_failed = True\n1966             else:\n1967                 msg = _(\n1968                     \"Items must be selected in order to perform \"\n1969                     \"actions on them. No items have been changed.\"\n1970                 )\n1971                 self.message_user(request, msg, messages.WARNING)\n1972                 action_failed = True\n1973 \n1974         # Actions with confirmation\n1975         if (\n1976             actions\n1977             and request.method == \"POST\"\n1978             and helpers.ACTION_CHECKBOX_NAME in request.POST\n1979             and \"index\" not in request.POST\n1980             and \"_save\" not in request.POST\n1981         ):\n1982             if selected:\n1983                 response = self.response_action(\n1984                     request, queryset=cl.get_queryset(request)\n1985                 )\n1986                 if response:\n1987                     return response\n1988                 else:\n1989                     action_failed = True\n1990 \n1991         if action_failed:\n1992             # Redirect back to the changelist page to avoid resubmitting the\n1993             # form if the user refreshes the browser or uses the \"No, take\n1994             # me back\" button on the action confirmation page.\n1995             return HttpResponseRedirect(request.get_full_path())\n1996 \n1997         # If we're allowing changelist editing, we need to construct a formset\n1998         # for the changelist given all the fields to be edited. Then we'll\n1999         # use the formset to validate/process POSTed data.\n2000         formset = cl.formset = None\n2001 \n2002         # Handle POSTed bulk-edit data.\n2003         if request.method == \"POST\" and cl.list_editable and \"_save\" in request.POST:\n2004             if not self.has_change_permission(request):\n2005                 raise PermissionDenied\n2006             FormSet = self.get_changelist_formset(request)\n2007             modified_objects = self._get_list_editable_queryset(\n2008                 request, FormSet.get_default_prefix()\n2009             )\n2010             formset = cl.formset = FormSet(\n2011                 request.POST, request.FILES, queryset=modified_objects\n2012             )\n2013             if formset.is_valid():\n2014                 changecount = 0\n2015                 with transaction.atomic(using=router.db_for_write(self.model)):\n2016                     for form in formset.forms:\n2017                         if form.has_changed():\n2018                             obj = self.save_form(request, form, change=True)\n2019                             self.save_model(request, obj, form, change=True)\n2020                             self.save_related(request, form, formsets=[], change=True)\n2021                             change_msg = self.construct_change_message(\n2022                                 request, form, None\n2023                             )\n2024                             self.log_change(request, obj, change_msg)\n2025                             changecount += 1\n2026                 if changecount:\n2027                     msg = ngettext(\n2028                         \"%(count)s %(name)s was changed successfully.\",\n2029                         \"%(count)s %(name)s were changed successfully.\",\n2030                         changecount,\n2031                     ) % {\n2032                         \"count\": changecount,\n2033                         \"name\": model_ngettext(self.opts, changecount),\n2034                     }\n2035                     self.message_user(request, msg, messages.SUCCESS)\n2036 \n2037                 return HttpResponseRedirect(request.get_full_path())\n2038 \n2039         # Handle GET -- construct a formset for display.\n2040         elif cl.list_editable and self.has_change_permission(request):\n2041             FormSet = self.get_changelist_formset(request)\n2042             formset = cl.formset = FormSet(queryset=cl.result_list)\n2043 \n2044         # Build the list of media to be used by the formset.\n2045         if formset:\n2046             media = self.media + formset.media\n2047         else:\n2048             media = self.media\n2049 \n2050         # Build the action form and populate it with available actions.\n2051         if actions:\n2052             action_form = self.action_form(auto_id=None)\n2053             action_form.fields[\"action\"].choices = self.get_action_choices(request)\n2054             media += action_form.media\n2055         else:\n2056             action_form = None\n2057 \n2058         selection_note_all = ngettext(\n2059             \"%(total_count)s selected\", \"All %(total_count)s selected\", cl.result_count\n2060         )\n2061 \n2062         context = {\n2063             **self.admin_site.each_context(request),\n2064             \"module_name\": str(self.opts.verbose_name_plural),\n2065             \"selection_note\": _(\"0 of %(cnt)s selected\") % {\"cnt\": len(cl.result_list)},\n2066             \"selection_note_all\": selection_note_all % {\"total_count\": cl.result_count},\n2067             \"title\": cl.title,\n2068             \"subtitle\": None,\n2069             \"is_popup\": cl.is_popup,\n2070             \"to_field\": cl.to_field,\n2071             \"cl\": cl,\n2072             \"media\": media,\n2073             \"has_add_permission\": self.has_add_permission(request),\n2074             \"opts\": cl.opts,\n2075             \"action_form\": action_form,\n2076             \"actions_on_top\": self.actions_on_top,\n2077             \"actions_on_bottom\": self.actions_on_bottom,\n2078             \"actions_selection_counter\": self.actions_selection_counter,\n2079             \"preserved_filters\": self.get_preserved_filters(request),\n2080             **(extra_context or {}),\n2081         }\n2082 \n2083         request.current_app = self.admin_site.name\n2084 \n2085         return TemplateResponse(\n2086             request,\n2087             self.change_list_template\n2088             or [\n2089                 \"admin/%s/%s/change_list.html\" % (app_label, self.opts.model_name),\n2090                 \"admin/%s/change_list.html\" % app_label,\n2091                 \"admin/change_list.html\",\n2092             ],\n2093             context,\n2094         )\n2095 \n2096     def get_deleted_objects(self, objs, request):\n2097         \"\"\"\n2098         Hook for customizing the delete process for the delete view and the\n2099         \"delete selected\" action.\n2100         \"\"\"\n2101         return get_deleted_objects(objs, request, self.admin_site)\n2102 \n2103     @csrf_protect_m\n2104     def delete_view(self, request, object_id, extra_context=None):\n2105         with transaction.atomic(using=router.db_for_write(self.model)):\n2106             return self._delete_view(request, object_id, extra_context)\n2107 \n2108     def _delete_view(self, request, object_id, extra_context):\n2109         \"The 'delete' admin view for this model.\"\n2110         app_label = self.opts.app_label\n2111 \n2112         to_field = request.POST.get(TO_FIELD_VAR, request.GET.get(TO_FIELD_VAR))\n2113         if to_field and not self.to_field_allowed(request, to_field):\n2114             raise DisallowedModelAdminToField(\n2115                 \"The field %s cannot be referenced.\" % to_field\n2116             )\n2117 \n2118         obj = self.get_object(request, unquote(object_id), to_field)\n2119 \n2120         if not self.has_delete_permission(request, obj):\n2121             raise PermissionDenied\n2122 \n2123         if obj is None:\n2124             return self._get_obj_does_not_exist_redirect(request, self.opts, object_id)\n2125 \n2126         # Populate deleted_objects, a data structure of all related objects that\n2127         # will also be deleted.\n2128         (\n2129             deleted_objects,\n2130             model_count,\n2131             perms_needed,\n2132             protected,\n2133         ) = self.get_deleted_objects([obj], request)\n2134 \n2135         if request.POST and not protected:  # The user has confirmed the deletion.\n2136             if perms_needed:\n2137                 raise PermissionDenied\n2138             obj_display = str(obj)\n2139             attr = str(to_field) if to_field else self.opts.pk.attname\n2140             obj_id = obj.serializable_value(attr)\n2141             self.log_deletion(request, obj, obj_display)\n2142             self.delete_model(request, obj)\n2143 \n2144             return self.response_delete(request, obj_display, obj_id)\n2145 \n2146         object_name = str(self.opts.verbose_name)\n2147 \n2148         if perms_needed or protected:\n2149             title = _(\"Cannot delete %(name)s\") % {\"name\": object_name}\n2150         else:\n2151             title = _(\"Are you sure?\")\n2152 \n2153         context = {\n2154             **self.admin_site.each_context(request),\n2155             \"title\": title,\n2156             \"subtitle\": None,\n2157             \"object_name\": object_name,\n2158             \"object\": obj,\n2159             \"deleted_objects\": deleted_objects,\n2160             \"model_count\": dict(model_count).items(),\n2161             \"perms_lacking\": perms_needed,\n2162             \"protected\": protected,\n2163             \"opts\": self.opts,\n2164             \"app_label\": app_label,\n2165             \"preserved_filters\": self.get_preserved_filters(request),\n2166             \"is_popup\": IS_POPUP_VAR in request.POST or IS_POPUP_VAR in request.GET,\n2167             \"to_field\": to_field,\n2168             **(extra_context or {}),\n2169         }\n2170 \n2171         return self.render_delete_form(request, context)\n2172 \n2173     def history_view(self, request, object_id, extra_context=None):\n2174         \"The 'history' admin view for this model.\"\n2175         from django.contrib.admin.models import LogEntry\n2176         from django.contrib.admin.views.main import PAGE_VAR\n2177 \n2178         # First check if the user can see this history.\n2179         model = self.model\n2180         obj = self.get_object(request, unquote(object_id))\n2181         if obj is None:\n2182             return self._get_obj_does_not_exist_redirect(\n2183                 request, model._meta, object_id\n2184             )\n2185 \n2186         if not self.has_view_or_change_permission(request, obj):\n2187             raise PermissionDenied\n2188 \n2189         # Then get the history for this object.\n2190         app_label = self.opts.app_label\n2191         action_list = (\n2192             LogEntry.objects.filter(\n2193                 object_id=unquote(object_id),\n2194                 content_type=get_content_type_for_model(model),\n2195             )\n2196             .select_related()\n2197             .order_by(\"action_time\")\n2198         )\n2199 \n2200         paginator = self.get_paginator(request, action_list, 100)\n2201         page_number = request.GET.get(PAGE_VAR, 1)\n2202         page_obj = paginator.get_page(page_number)\n2203         page_range = paginator.get_elided_page_range(page_obj.number)\n2204 \n2205         context = {\n2206             **self.admin_site.each_context(request),\n2207             \"title\": _(\"Change history: %s\") % obj,\n2208             \"subtitle\": None,\n2209             \"action_list\": page_obj,\n2210             \"page_range\": page_range,\n2211             \"page_var\": PAGE_VAR,\n2212             \"pagination_required\": paginator.count > 100,\n2213             \"module_name\": str(capfirst(self.opts.verbose_name_plural)),\n2214             \"object\": obj,\n2215             \"opts\": self.opts,\n2216             \"preserved_filters\": self.get_preserved_filters(request),\n2217             **(extra_context or {}),\n2218         }\n2219 \n2220         request.current_app = self.admin_site.name\n2221 \n2222         return TemplateResponse(\n2223             request,\n2224             self.object_history_template\n2225             or [\n2226                 \"admin/%s/%s/object_history.html\" % (app_label, self.opts.model_name),\n2227                 \"admin/%s/object_history.html\" % app_label,\n2228                 \"admin/object_history.html\",\n2229             ],\n2230             context,\n2231         )\n2232 \n2233     def get_formset_kwargs(self, request, obj, inline, prefix):\n2234         formset_params = {\n2235             \"instance\": obj,\n2236             \"prefix\": prefix,\n2237             \"queryset\": inline.get_queryset(request),\n2238         }\n2239         if request.method == \"POST\":\n2240             formset_params.update(\n2241                 {\n2242                     \"data\": request.POST.copy(),\n2243                     \"files\": request.FILES,\n2244                     \"save_as_new\": \"_saveasnew\" in request.POST,\n2245                 }\n2246             )\n2247         return formset_params\n2248 \n2249     def _create_formsets(self, request, obj, change):\n2250         \"Helper function to generate formsets for add/change_view.\"\n2251         formsets = []\n2252         inline_instances = []\n2253         prefixes = {}\n2254         get_formsets_args = [request]\n2255         if change:\n2256             get_formsets_args.append(obj)\n2257         for FormSet, inline in self.get_formsets_with_inlines(*get_formsets_args):\n2258             prefix = FormSet.get_default_prefix()\n2259             prefixes[prefix] = prefixes.get(prefix, 0) + 1\n2260             if prefixes[prefix] != 1 or not prefix:\n2261                 prefix = \"%s-%s\" % (prefix, prefixes[prefix])\n2262             formset_params = self.get_formset_kwargs(request, obj, inline, prefix)\n2263             formset = FormSet(**formset_params)\n2264 \n2265             def user_deleted_form(request, obj, formset, index, inline):\n2266                 \"\"\"Return whether or not the user deleted the form.\"\"\"\n2267                 return (\n2268                     inline.has_delete_permission(request, obj)\n2269                     and \"{}-{}-DELETE\".format(formset.prefix, index) in request.POST\n2270                 )\n2271 \n2272             # Bypass validation of each view-only inline form (since the form's\n2273             # data won't be in request.POST), unless the form was deleted.\n2274             if not inline.has_change_permission(request, obj if change else None):\n2275                 for index, form in enumerate(formset.initial_forms):\n2276                     if user_deleted_form(request, obj, formset, index, inline):\n2277                         continue\n2278                     form._errors = {}\n2279                     form.cleaned_data = form.initial\n2280             formsets.append(formset)\n2281             inline_instances.append(inline)\n2282         return formsets, inline_instances\n",
        "intended_behavior": "This class provides additional context to the issue."
    },
    {
        "rel_file_path": "django/contrib/admin/options.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__5.0/django/contrib/admin/options.py",
        "start": 931,
        "end": 946,
        "class_name": "ModelAdmin",
        "method_name": "log_change",
        "code": "931     def log_change(self, request, obj, message):\n932         \"\"\"\n933         Log that an object has been successfully changed.\n934 \n935         The default implementation creates an admin LogEntry object.\n936         \"\"\"\n937         from django.contrib.admin.models import CHANGE, LogEntry\n938 \n939         return LogEntry.objects.log_action(\n940             user_id=request.user.pk,\n941             content_type_id=get_content_type_for_model(obj).pk,\n942             object_id=obj.pk,\n943             object_repr=str(obj),\n944             action_flag=CHANGE,\n945             change_message=message,\n946         )\n",
        "intended_behavior": "Similar to log_addition, modify this method to account for the AdminSite instance during the creation of LogEntry records for model changes. This adjustment ensures logs of changes are associated with the correct admin site, facilitating filtered log display per AdminSite instance."
    },
    {
        "rel_file_path": "django/contrib/admin/options.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__5.0/django/contrib/admin/options.py",
        "start": 614,
        "end": 2282,
        "class_name": "ModelAdmin",
        "method_name": null,
        "code": "614 class ModelAdmin(BaseModelAdmin):\n615     \"\"\"Encapsulate all admin options and functionality for a given model.\"\"\"\n616 \n617     list_display = (\"__str__\",)\n618     list_display_links = ()\n619     list_filter = ()\n620     list_select_related = False\n621     list_per_page = 100\n622     list_max_show_all = 200\n623     list_editable = ()\n624     search_fields = ()\n625     search_help_text = None\n626     date_hierarchy = None\n627     save_as = False\n628     save_as_continue = True\n629     save_on_top = False\n630     paginator = Paginator\n631     preserve_filters = True\n632     inlines = ()\n633 \n634     # Custom templates (designed to be over-ridden in subclasses)\n635     add_form_template = None\n636     change_form_template = None\n637     change_list_template = None\n638     delete_confirmation_template = None\n639     delete_selected_confirmation_template = None\n640     object_history_template = None\n641     popup_response_template = None\n642 \n643     # Actions\n644     actions = ()\n645     action_form = helpers.ActionForm\n646     actions_on_top = True\n647     actions_on_bottom = False\n648     actions_selection_counter = True\n649     checks_class = ModelAdminChecks\n650 \n651     def __init__(self, model, admin_site):\n652         self.model = model\n653         self.opts = model._meta\n654         self.admin_site = admin_site\n655         super().__init__()\n656 \n657     def __str__(self):\n658         return \"%s.%s\" % (self.opts.app_label, self.__class__.__name__)\n659 \n660     def __repr__(self):\n661         return (\n662             f\"<{self.__class__.__qualname__}: model={self.model.__qualname__} \"\n663             f\"site={self.admin_site!r}>\"\n664         )\n665 \n666     def get_inline_instances(self, request, obj=None):\n667         inline_instances = []\n668         for inline_class in self.get_inlines(request, obj):\n669             inline = inline_class(self.model, self.admin_site)\n670             if request:\n671                 if not (\n672                     inline.has_view_or_change_permission(request, obj)\n673                     or inline.has_add_permission(request, obj)\n674                     or inline.has_delete_permission(request, obj)\n675                 ):\n676                     continue\n677                 if not inline.has_add_permission(request, obj):\n678                     inline.max_num = 0\n679             inline_instances.append(inline)\n680 \n681         return inline_instances\n682 \n683     def get_urls(self):\n684         from django.urls import path\n685 \n686         def wrap(view):\n687             def wrapper(*args, **kwargs):\n688                 return self.admin_site.admin_view(view)(*args, **kwargs)\n689 \n690             wrapper.model_admin = self\n691             return update_wrapper(wrapper, view)\n692 \n693         info = self.opts.app_label, self.opts.model_name\n694 \n695         return [\n696             path(\"\", wrap(self.changelist_view), name=\"%s_%s_changelist\" % info),\n697             path(\"add/\", wrap(self.add_view), name=\"%s_%s_add\" % info),\n698             path(\n699                 \"<path:object_id>/history/\",\n700                 wrap(self.history_view),\n701                 name=\"%s_%s_history\" % info,\n702             ),\n703             path(\n704                 \"<path:object_id>/delete/\",\n705                 wrap(self.delete_view),\n706                 name=\"%s_%s_delete\" % info,\n707             ),\n708             path(\n709                 \"<path:object_id>/change/\",\n710                 wrap(self.change_view),\n711                 name=\"%s_%s_change\" % info,\n712             ),\n713             # For backwards compatibility (was the change url before 1.9)\n714             path(\n715                 \"<path:object_id>/\",\n716                 wrap(\n717                     RedirectView.as_view(\n718                         pattern_name=\"%s:%s_%s_change\"\n719                         % ((self.admin_site.name,) + info)\n720                     )\n721                 ),\n722             ),\n723         ]\n724 \n725     @property\n726     def urls(self):\n727         return self.get_urls()\n728 \n729     @property\n730     def media(self):\n731         extra = \"\" if settings.DEBUG else \".min\"\n732         js = [\n733             \"vendor/jquery/jquery%s.js\" % extra,\n734             \"jquery.init.js\",\n735             \"core.js\",\n736             \"admin/RelatedObjectLookups.js\",\n737             \"actions.js\",\n738             \"urlify.js\",\n739             \"prepopulate.js\",\n740             \"vendor/xregexp/xregexp%s.js\" % extra,\n741         ]\n742         return forms.Media(js=[\"admin/js/%s\" % url for url in js])\n743 \n744     def get_model_perms(self, request):\n745         \"\"\"\n746         Return a dict of all perms for this model. This dict has the keys\n747         ``add``, ``change``, ``delete``, and ``view`` mapping to the True/False\n748         for each of those actions.\n749         \"\"\"\n750         return {\n751             \"add\": self.has_add_permission(request),\n752             \"change\": self.has_change_permission(request),\n753             \"delete\": self.has_delete_permission(request),\n754             \"view\": self.has_view_permission(request),\n755         }\n756 \n757     def _get_form_for_get_fields(self, request, obj):\n758         return self.get_form(request, obj, fields=None)\n759 \n760     def get_form(self, request, obj=None, change=False, **kwargs):\n761         \"\"\"\n762         Return a Form class for use in the admin add view. This is used by\n763         add_view and change_view.\n764         \"\"\"\n765         if \"fields\" in kwargs:\n766             fields = kwargs.pop(\"fields\")\n767         else:\n768             fields = flatten_fieldsets(self.get_fieldsets(request, obj))\n769         excluded = self.get_exclude(request, obj)\n770         exclude = [] if excluded is None else list(excluded)\n771         readonly_fields = self.get_readonly_fields(request, obj)\n772         exclude.extend(readonly_fields)\n773         # Exclude all fields if it's a change form and the user doesn't have\n774         # the change permission.\n775         if (\n776             change\n777             and hasattr(request, \"user\")\n778             and not self.has_change_permission(request, obj)\n779         ):\n780             exclude.extend(fields)\n781         if excluded is None and hasattr(self.form, \"_meta\") and self.form._meta.exclude:\n782             # Take the custom ModelForm's Meta.exclude into account only if the\n783             # ModelAdmin doesn't define its own.\n784             exclude.extend(self.form._meta.exclude)\n785         # if exclude is an empty list we pass None to be consistent with the\n786         # default on modelform_factory\n787         exclude = exclude or None\n788 \n789         # Remove declared form fields which are in readonly_fields.\n790         new_attrs = dict.fromkeys(\n791             f for f in readonly_fields if f in self.form.declared_fields\n792         )\n793         form = type(self.form.__name__, (self.form,), new_attrs)\n794 \n795         defaults = {\n796             \"form\": form,\n797             \"fields\": fields,\n798             \"exclude\": exclude,\n799             \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n800             **kwargs,\n801         }\n802 \n803         if defaults[\"fields\"] is None and not modelform_defines_fields(\n804             defaults[\"form\"]\n805         ):\n806             defaults[\"fields\"] = forms.ALL_FIELDS\n807 \n808         try:\n809             return modelform_factory(self.model, **defaults)\n810         except FieldError as e:\n811             raise FieldError(\n812                 \"%s. Check fields/fieldsets/exclude attributes of class %s.\"\n813                 % (e, self.__class__.__name__)\n814             )\n815 \n816     def get_changelist(self, request, **kwargs):\n817         \"\"\"\n818         Return the ChangeList class for use on the changelist page.\n819         \"\"\"\n820         from django.contrib.admin.views.main import ChangeList\n821 \n822         return ChangeList\n823 \n824     def get_changelist_instance(self, request):\n825         \"\"\"\n826         Return a `ChangeList` instance based on `request`. May raise\n827         `IncorrectLookupParameters`.\n828         \"\"\"\n829         list_display = self.get_list_display(request)\n830         list_display_links = self.get_list_display_links(request, list_display)\n831         # Add the action checkboxes if any actions are available.\n832         if self.get_actions(request):\n833             list_display = [\"action_checkbox\", *list_display]\n834         sortable_by = self.get_sortable_by(request)\n835         ChangeList = self.get_changelist(request)\n836         return ChangeList(\n837             request,\n838             self.model,\n839             list_display,\n840             list_display_links,\n841             self.get_list_filter(request),\n842             self.date_hierarchy,\n843             self.get_search_fields(request),\n844             self.get_list_select_related(request),\n845             self.list_per_page,\n846             self.list_max_show_all,\n847             self.list_editable,\n848             self,\n849             sortable_by,\n850             self.search_help_text,\n851         )\n852 \n853     def get_object(self, request, object_id, from_field=None):\n854         \"\"\"\n855         Return an instance matching the field and value provided, the primary\n856         key is used if no field is provided. Return ``None`` if no match is\n857         found or the object_id fails validation.\n858         \"\"\"\n859         queryset = self.get_queryset(request)\n860         model = queryset.model\n861         field = (\n862             model._meta.pk if from_field is None else model._meta.get_field(from_field)\n863         )\n864         try:\n865             object_id = field.to_python(object_id)\n866             return queryset.get(**{field.name: object_id})\n867         except (model.DoesNotExist, ValidationError, ValueError):\n868             return None\n869 \n870     def get_changelist_form(self, request, **kwargs):\n871         \"\"\"\n872         Return a Form class for use in the Formset on the changelist page.\n873         \"\"\"\n874         defaults = {\n875             \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n876             **kwargs,\n877         }\n878         if defaults.get(\"fields\") is None and not modelform_defines_fields(\n879             defaults.get(\"form\")\n880         ):\n881             defaults[\"fields\"] = forms.ALL_FIELDS\n882 \n883         return modelform_factory(self.model, **defaults)\n884 \n885     def get_changelist_formset(self, request, **kwargs):\n886         \"\"\"\n887         Return a FormSet class for use on the changelist page if list_editable\n888         is used.\n889         \"\"\"\n890         defaults = {\n891             \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n892             **kwargs,\n893         }\n894         return modelformset_factory(\n895             self.model,\n896             self.get_changelist_form(request),\n897             extra=0,\n898             fields=self.list_editable,\n899             **defaults,\n900         )\n901 \n902     def get_formsets_with_inlines(self, request, obj=None):\n903         \"\"\"\n904         Yield formsets and the corresponding inlines.\n905         \"\"\"\n906         for inline in self.get_inline_instances(request, obj):\n907             yield inline.get_formset(request, obj), inline\n908 \n909     def get_paginator(\n910         self, request, queryset, per_page, orphans=0, allow_empty_first_page=True\n911     ):\n912         return self.paginator(queryset, per_page, orphans, allow_empty_first_page)\n913 \n914     def log_addition(self, request, obj, message):\n915         \"\"\"\n916         Log that an object has been successfully added.\n917 \n918         The default implementation creates an admin LogEntry object.\n919         \"\"\"\n920         from django.contrib.admin.models import ADDITION, LogEntry\n921 \n922         return LogEntry.objects.log_action(\n923             user_id=request.user.pk,\n924             content_type_id=get_content_type_for_model(obj).pk,\n925             object_id=obj.pk,\n926             object_repr=str(obj),\n927             action_flag=ADDITION,\n928             change_message=message,\n929         )\n930 \n931     def log_change(self, request, obj, message):\n932         \"\"\"\n933         Log that an object has been successfully changed.\n934 \n935         The default implementation creates an admin LogEntry object.\n936         \"\"\"\n937         from django.contrib.admin.models import CHANGE, LogEntry\n938 \n939         return LogEntry.objects.log_action(\n940             user_id=request.user.pk,\n941             content_type_id=get_content_type_for_model(obj).pk,\n942             object_id=obj.pk,\n943             object_repr=str(obj),\n944             action_flag=CHANGE,\n945             change_message=message,\n946         )\n947 \n948     def log_deletion(self, request, obj, object_repr):\n949         \"\"\"\n950         Log that an object will be deleted. Note that this method must be\n951         called before the deletion.\n952 \n953         The default implementation creates an admin LogEntry object.\n954         \"\"\"\n955         from django.contrib.admin.models import DELETION, LogEntry\n956 \n957         return LogEntry.objects.log_action(\n958             user_id=request.user.pk,\n959             content_type_id=get_content_type_for_model(obj).pk,\n960             object_id=obj.pk,\n961             object_repr=object_repr,\n962             action_flag=DELETION,\n963         )\n964 \n965     @display(description=mark_safe('<input type=\"checkbox\" id=\"action-toggle\">'))\n966     def action_checkbox(self, obj):\n967         \"\"\"\n968         A list_display column containing a checkbox widget.\n969         \"\"\"\n970         return helpers.checkbox.render(helpers.ACTION_CHECKBOX_NAME, str(obj.pk))\n971 \n972     @staticmethod\n973     def _get_action_description(func, name):\n974         return getattr(func, \"short_description\", capfirst(name.replace(\"_\", \" \")))\n975 \n976     def _get_base_actions(self):\n977         \"\"\"Return the list of actions, prior to any request-based filtering.\"\"\"\n978         actions = []\n979         base_actions = (self.get_action(action) for action in self.actions or [])\n980         # get_action might have returned None, so filter any of those out.\n981         base_actions = [action for action in base_actions if action]\n982         base_action_names = {name for _, name, _ in base_actions}\n983 \n984         # Gather actions from the admin site first\n985         for name, func in self.admin_site.actions:\n986             if name in base_action_names:\n987                 continue\n988             description = self._get_action_description(func, name)\n989             actions.append((func, name, description))\n990         # Add actions from this ModelAdmin.\n991         actions.extend(base_actions)\n992         return actions\n993 \n994     def _filter_actions_by_permissions(self, request, actions):\n995         \"\"\"Filter out any actions that the user doesn't have access to.\"\"\"\n996         filtered_actions = []\n997         for action in actions:\n998             callable = action[0]\n999             if not hasattr(callable, \"allowed_permissions\"):\n1000                 filtered_actions.append(action)\n1001                 continue\n1002             permission_checks = (\n1003                 getattr(self, \"has_%s_permission\" % permission)\n1004                 for permission in callable.allowed_permissions\n1005             )\n1006             if any(has_permission(request) for has_permission in permission_checks):\n1007                 filtered_actions.append(action)\n1008         return filtered_actions\n1009 \n1010     def get_actions(self, request):\n1011         \"\"\"\n1012         Return a dictionary mapping the names of all actions for this\n1013         ModelAdmin to a tuple of (callable, name, description) for each action.\n1014         \"\"\"\n1015         # If self.actions is set to None that means actions are disabled on\n1016         # this page.\n1017         if self.actions is None or IS_POPUP_VAR in request.GET:\n1018             return {}\n1019         actions = self._filter_actions_by_permissions(request, self._get_base_actions())\n1020         return {name: (func, name, desc) for func, name, desc in actions}\n1021 \n1022     def get_action_choices(self, request, default_choices=models.BLANK_CHOICE_DASH):\n1023         \"\"\"\n1024         Return a list of choices for use in a form object.  Each choice is a\n1025         tuple (name, description).\n1026         \"\"\"\n1027         choices = [] + default_choices\n1028         for func, name, description in self.get_actions(request).values():\n1029             choice = (name, description % model_format_dict(self.opts))\n1030             choices.append(choice)\n1031         return choices\n1032 \n1033     def get_action(self, action):\n1034         \"\"\"\n1035         Return a given action from a parameter, which can either be a callable,\n1036         or the name of a method on the ModelAdmin.  Return is a tuple of\n1037         (callable, name, description).\n1038         \"\"\"\n1039         # If the action is a callable, just use it.\n1040         if callable(action):\n1041             func = action\n1042             action = action.__name__\n1043 \n1044         # Next, look for a method. Grab it off self.__class__ to get an unbound\n1045         # method instead of a bound one; this ensures that the calling\n1046         # conventions are the same for functions and methods.\n1047         elif hasattr(self.__class__, action):\n1048             func = getattr(self.__class__, action)\n1049 \n1050         # Finally, look for a named method on the admin site\n1051         else:\n1052             try:\n1053                 func = self.admin_site.get_action(action)\n1054             except KeyError:\n1055                 return None\n1056 \n1057         description = self._get_action_description(func, action)\n1058         return func, action, description\n1059 \n1060     def get_list_display(self, request):\n1061         \"\"\"\n1062         Return a sequence containing the fields to be displayed on the\n1063         changelist.\n1064         \"\"\"\n1065         return self.list_display\n1066 \n1067     def get_list_display_links(self, request, list_display):\n1068         \"\"\"\n1069         Return a sequence containing the fields to be displayed as links\n1070         on the changelist. The list_display parameter is the list of fields\n1071         returned by get_list_display().\n1072         \"\"\"\n1073         if (\n1074             self.list_display_links\n1075             or self.list_display_links is None\n1076             or not list_display\n1077         ):\n1078             return self.list_display_links\n1079         else:\n1080             # Use only the first item in list_display as link\n1081             return list(list_display)[:1]\n1082 \n1083     def get_list_filter(self, request):\n1084         \"\"\"\n1085         Return a sequence containing the fields to be displayed as filters in\n1086         the right sidebar of the changelist page.\n1087         \"\"\"\n1088         return self.list_filter\n1089 \n1090     def get_list_select_related(self, request):\n1091         \"\"\"\n1092         Return a list of fields to add to the select_related() part of the\n1093         changelist items query.\n1094         \"\"\"\n1095         return self.list_select_related\n1096 \n1097     def get_search_fields(self, request):\n1098         \"\"\"\n1099         Return a sequence containing the fields to be searched whenever\n1100         somebody submits a search query.\n1101         \"\"\"\n1102         return self.search_fields\n1103 \n1104     def get_search_results(self, request, queryset, search_term):\n1105         \"\"\"\n1106         Return a tuple containing a queryset to implement the search\n1107         and a boolean indicating if the results may contain duplicates.\n1108         \"\"\"\n1109 \n1110         # Apply keyword searches.\n1111         def construct_search(field_name):\n1112             if field_name.startswith(\"^\"):\n1113                 return \"%s__istartswith\" % field_name.removeprefix(\"^\")\n1114             elif field_name.startswith(\"=\"):\n1115                 return \"%s__iexact\" % field_name.removeprefix(\"=\")\n1116             elif field_name.startswith(\"@\"):\n1117                 return \"%s__search\" % field_name.removeprefix(\"@\")\n1118             # Use field_name if it includes a lookup.\n1119             opts = queryset.model._meta\n1120             lookup_fields = field_name.split(LOOKUP_SEP)\n1121             # Go through the fields, following all relations.\n1122             prev_field = None\n1123             for path_part in lookup_fields:\n1124                 if path_part == \"pk\":\n1125                     path_part = opts.pk.name\n1126                 try:\n1127                     field = opts.get_field(path_part)\n1128                 except FieldDoesNotExist:\n1129                     # Use valid query lookups.\n1130                     if prev_field and prev_field.get_lookup(path_part):\n1131                         return field_name\n1132                 else:\n1133                     prev_field = field\n1134                     if hasattr(field, \"path_infos\"):\n1135                         # Update opts to follow the relation.\n1136                         opts = field.path_infos[-1].to_opts\n1137             # Otherwise, use the field with icontains.\n1138             return \"%s__icontains\" % field_name\n1139 \n1140         may_have_duplicates = False\n1141         search_fields = self.get_search_fields(request)\n1142         if search_fields and search_term:\n1143             orm_lookups = [\n1144                 construct_search(str(search_field)) for search_field in search_fields\n1145             ]\n1146             term_queries = []\n1147             for bit in smart_split(search_term):\n1148                 if bit.startswith(('\"', \"'\")) and bit[0] == bit[-1]:\n1149                     bit = unescape_string_literal(bit)\n1150                 or_queries = models.Q.create(\n1151                     [(orm_lookup, bit) for orm_lookup in orm_lookups],\n1152                     connector=models.Q.OR,\n1153                 )\n1154                 term_queries.append(or_queries)\n1155             queryset = queryset.filter(models.Q.create(term_queries))\n1156             may_have_duplicates |= any(\n1157                 lookup_spawns_duplicates(self.opts, search_spec)\n1158                 for search_spec in orm_lookups\n1159             )\n1160         return queryset, may_have_duplicates\n1161 \n1162     def get_preserved_filters(self, request):\n1163         \"\"\"\n1164         Return the preserved filters querystring.\n1165         \"\"\"\n1166         match = request.resolver_match\n1167         if self.preserve_filters and match:\n1168             current_url = \"%s:%s\" % (match.app_name, match.url_name)\n1169             changelist_url = \"admin:%s_%s_changelist\" % (\n1170                 self.opts.app_label,\n1171                 self.opts.model_name,\n1172             )\n1173             if current_url == changelist_url:\n1174                 preserved_filters = request.GET.urlencode()\n1175             else:\n1176                 preserved_filters = request.GET.get(\"_changelist_filters\")\n1177 \n1178             if preserved_filters:\n1179                 return urlencode({\"_changelist_filters\": preserved_filters})\n1180         return \"\"\n1181 \n1182     def construct_change_message(self, request, form, formsets, add=False):\n1183         \"\"\"\n1184         Construct a JSON structure describing changes from a changed object.\n1185         \"\"\"\n1186         return construct_change_message(form, formsets, add)\n1187 \n1188     def message_user(\n1189         self, request, message, level=messages.INFO, extra_tags=\"\", fail_silently=False\n1190     ):\n1191         \"\"\"\n1192         Send a message to the user. The default implementation\n1193         posts a message using the django.contrib.messages backend.\n1194 \n1195         Exposes almost the same API as messages.add_message(), but accepts the\n1196         positional arguments in a different order to maintain backwards\n1197         compatibility. For convenience, it accepts the `level` argument as\n1198         a string rather than the usual level number.\n1199         \"\"\"\n1200         if not isinstance(level, int):\n1201             # attempt to get the level if passed a string\n1202             try:\n1203                 level = getattr(messages.constants, level.upper())\n1204             except AttributeError:\n1205                 levels = messages.constants.DEFAULT_TAGS.values()\n1206                 levels_repr = \", \".join(\"`%s`\" % level for level in levels)\n1207                 raise ValueError(\n1208                     \"Bad message level string: `%s`. Possible values are: %s\"\n1209                     % (level, levels_repr)\n1210                 )\n1211 \n1212         messages.add_message(\n1213             request, level, message, extra_tags=extra_tags, fail_silently=fail_silently\n1214         )\n1215 \n1216     def save_form(self, request, form, change):\n1217         \"\"\"\n1218         Given a ModelForm return an unsaved instance. ``change`` is True if\n1219         the object is being changed, and False if it's being added.\n1220         \"\"\"\n1221         return form.save(commit=False)\n1222 \n1223     def save_model(self, request, obj, form, change):\n1224         \"\"\"\n1225         Given a model instance save it to the database.\n1226         \"\"\"\n1227         obj.save()\n1228 \n1229     def delete_model(self, request, obj):\n1230         \"\"\"\n1231         Given a model instance delete it from the database.\n1232         \"\"\"\n1233         obj.delete()\n1234 \n1235     def delete_queryset(self, request, queryset):\n1236         \"\"\"Given a queryset, delete it from the database.\"\"\"\n1237         queryset.delete()\n1238 \n1239     def save_formset(self, request, form, formset, change):\n1240         \"\"\"\n1241         Given an inline formset save it to the database.\n1242         \"\"\"\n1243         formset.save()\n1244 \n1245     def save_related(self, request, form, formsets, change):\n1246         \"\"\"\n1247         Given the ``HttpRequest``, the parent ``ModelForm`` instance, the\n1248         list of inline formsets and a boolean value based on whether the\n1249         parent is being added or changed, save the related objects to the\n1250         database. Note that at this point save_form() and save_model() have\n1251         already been called.\n1252         \"\"\"\n1253         form.save_m2m()\n1254         for formset in formsets:\n1255             self.save_formset(request, form, formset, change=change)\n1256 \n1257     def render_change_form(\n1258         self, request, context, add=False, change=False, form_url=\"\", obj=None\n1259     ):\n1260         app_label = self.opts.app_label\n1261         preserved_filters = self.get_preserved_filters(request)\n1262         form_url = add_preserved_filters(\n1263             {\"preserved_filters\": preserved_filters, \"opts\": self.opts}, form_url\n1264         )\n1265         view_on_site_url = self.get_view_on_site_url(obj)\n1266         has_editable_inline_admin_formsets = False\n1267         for inline in context[\"inline_admin_formsets\"]:\n1268             if (\n1269                 inline.has_add_permission\n1270                 or inline.has_change_permission\n1271                 or inline.has_delete_permission\n1272             ):\n1273                 has_editable_inline_admin_formsets = True\n1274                 break\n1275         context.update(\n1276             {\n1277                 \"add\": add,\n1278                 \"change\": change,\n1279                 \"has_view_permission\": self.has_view_permission(request, obj),\n1280                 \"has_add_permission\": self.has_add_permission(request),\n1281                 \"has_change_permission\": self.has_change_permission(request, obj),\n1282                 \"has_delete_permission\": self.has_delete_permission(request, obj),\n1283                 \"has_editable_inline_admin_formsets\": (\n1284                     has_editable_inline_admin_formsets\n1285                 ),\n1286                 \"has_file_field\": context[\"adminform\"].form.is_multipart()\n1287                 or any(\n1288                     admin_formset.formset.is_multipart()\n1289                     for admin_formset in context[\"inline_admin_formsets\"]\n1290                 ),\n1291                 \"has_absolute_url\": view_on_site_url is not None,\n1292                 \"absolute_url\": view_on_site_url,\n1293                 \"form_url\": form_url,\n1294                 \"opts\": self.opts,\n1295                 \"content_type_id\": get_content_type_for_model(self.model).pk,\n1296                 \"save_as\": self.save_as,\n1297                 \"save_on_top\": self.save_on_top,\n1298                 \"to_field_var\": TO_FIELD_VAR,\n1299                 \"is_popup_var\": IS_POPUP_VAR,\n1300                 \"app_label\": app_label,\n1301             }\n1302         )\n1303         if add and self.add_form_template is not None:\n1304             form_template = self.add_form_template\n1305         else:\n1306             form_template = self.change_form_template\n1307 \n1308         request.current_app = self.admin_site.name\n1309 \n1310         return TemplateResponse(\n1311             request,\n1312             form_template\n1313             or [\n1314                 \"admin/%s/%s/change_form.html\" % (app_label, self.opts.model_name),\n1315                 \"admin/%s/change_form.html\" % app_label,\n1316                 \"admin/change_form.html\",\n1317             ],\n1318             context,\n1319         )\n1320 \n1321     def response_add(self, request, obj, post_url_continue=None):\n1322         \"\"\"\n1323         Determine the HttpResponse for the add_view stage.\n1324         \"\"\"\n1325         opts = obj._meta\n1326         preserved_filters = self.get_preserved_filters(request)\n1327         obj_url = reverse(\n1328             \"admin:%s_%s_change\" % (opts.app_label, opts.model_name),\n1329             args=(quote(obj.pk),),\n1330             current_app=self.admin_site.name,\n1331         )\n1332         # Add a link to the object's change form if the user can edit the obj.\n1333         if self.has_change_permission(request, obj):\n1334             obj_repr = format_html('<a href=\"{}\">{}</a>', urlquote(obj_url), obj)\n1335         else:\n1336             obj_repr = str(obj)\n1337         msg_dict = {\n1338             \"name\": opts.verbose_name,\n1339             \"obj\": obj_repr,\n1340         }\n1341         # Here, we distinguish between different save types by checking for\n1342         # the presence of keys in request.POST.\n1343 \n1344         if IS_POPUP_VAR in request.POST:\n1345             to_field = request.POST.get(TO_FIELD_VAR)\n1346             if to_field:\n1347                 attr = str(to_field)\n1348             else:\n1349                 attr = obj._meta.pk.attname\n1350             value = obj.serializable_value(attr)\n1351             popup_response_data = json.dumps(\n1352                 {\n1353                     \"value\": str(value),\n1354                     \"obj\": str(obj),\n1355                 }\n1356             )\n1357             return TemplateResponse(\n1358                 request,\n1359                 self.popup_response_template\n1360                 or [\n1361                     \"admin/%s/%s/popup_response.html\"\n1362                     % (opts.app_label, opts.model_name),\n1363                     \"admin/%s/popup_response.html\" % opts.app_label,\n1364                     \"admin/popup_response.html\",\n1365                 ],\n1366                 {\n1367                     \"popup_response_data\": popup_response_data,\n1368                 },\n1369             )\n1370 \n1371         elif \"_continue\" in request.POST or (\n1372             # Redirecting after \"Save as new\".\n1373             \"_saveasnew\" in request.POST\n1374             and self.save_as_continue\n1375             and self.has_change_permission(request, obj)\n1376         ):\n1377             msg = _(\"The {name} \u201c{obj}\u201d was added successfully.\")\n1378             if self.has_change_permission(request, obj):\n1379                 msg += \" \" + _(\"You may edit it again below.\")\n1380             self.message_user(request, format_html(msg, **msg_dict), messages.SUCCESS)\n1381             if post_url_continue is None:\n1382                 post_url_continue = obj_url\n1383             post_url_continue = add_preserved_filters(\n1384                 {\"preserved_filters\": preserved_filters, \"opts\": opts},\n1385                 post_url_continue,\n1386             )\n1387             return HttpResponseRedirect(post_url_continue)\n1388 \n1389         elif \"_addanother\" in request.POST:\n1390             msg = format_html(\n1391                 _(\n1392                     \"The {name} \u201c{obj}\u201d was added successfully. You may add another \"\n1393                     \"{name} below.\"\n1394                 ),\n1395                 **msg_dict,\n1396             )\n1397             self.message_user(request, msg, messages.SUCCESS)\n1398             redirect_url = request.path\n1399             redirect_url = add_preserved_filters(\n1400                 {\"preserved_filters\": preserved_filters, \"opts\": opts}, redirect_url\n1401             )\n1402             return HttpResponseRedirect(redirect_url)\n1403 \n1404         else:\n1405             msg = format_html(\n1406                 _(\"The {name} \u201c{obj}\u201d was added successfully.\"), **msg_dict\n1407             )\n1408             self.message_user(request, msg, messages.SUCCESS)\n1409             return self.response_post_save_add(request, obj)\n1410 \n1411     def response_change(self, request, obj):\n1412         \"\"\"\n1413         Determine the HttpResponse for the change_view stage.\n1414         \"\"\"\n1415 \n1416         if IS_POPUP_VAR in request.POST:\n1417             opts = obj._meta\n1418             to_field = request.POST.get(TO_FIELD_VAR)\n1419             attr = str(to_field) if to_field else opts.pk.attname\n1420             value = request.resolver_match.kwargs[\"object_id\"]\n1421             new_value = obj.serializable_value(attr)\n1422             popup_response_data = json.dumps(\n1423                 {\n1424                     \"action\": \"change\",\n1425                     \"value\": str(value),\n1426                     \"obj\": str(obj),\n1427                     \"new_value\": str(new_value),\n1428                 }\n1429             )\n1430             return TemplateResponse(\n1431                 request,\n1432                 self.popup_response_template\n1433                 or [\n1434                     \"admin/%s/%s/popup_response.html\"\n1435                     % (opts.app_label, opts.model_name),\n1436                     \"admin/%s/popup_response.html\" % opts.app_label,\n1437                     \"admin/popup_response.html\",\n1438                 ],\n1439                 {\n1440                     \"popup_response_data\": popup_response_data,\n1441                 },\n1442             )\n1443 \n1444         opts = self.opts\n1445         preserved_filters = self.get_preserved_filters(request)\n1446 \n1447         msg_dict = {\n1448             \"name\": opts.verbose_name,\n1449             \"obj\": format_html('<a href=\"{}\">{}</a>', urlquote(request.path), obj),\n1450         }\n1451         if \"_continue\" in request.POST:\n1452             msg = format_html(\n1453                 _(\n1454                     \"The {name} \u201c{obj}\u201d was changed successfully. You may edit it \"\n1455                     \"again below.\"\n1456                 ),\n1457                 **msg_dict,\n1458             )\n1459             self.message_user(request, msg, messages.SUCCESS)\n1460             redirect_url = request.path\n1461             redirect_url = add_preserved_filters(\n1462                 {\"preserved_filters\": preserved_filters, \"opts\": opts}, redirect_url\n1463             )\n1464             return HttpResponseRedirect(redirect_url)\n1465 \n1466         elif \"_saveasnew\" in request.POST:\n1467             msg = format_html(\n1468                 _(\n1469                     \"The {name} \u201c{obj}\u201d was added successfully. You may edit it again \"\n1470                     \"below.\"\n1471                 ),\n1472                 **msg_dict,\n1473             )\n1474             self.message_user(request, msg, messages.SUCCESS)\n1475             redirect_url = reverse(\n1476                 \"admin:%s_%s_change\" % (opts.app_label, opts.model_name),\n1477                 args=(obj.pk,),\n1478                 current_app=self.admin_site.name,\n1479             )\n1480             redirect_url = add_preserved_filters(\n1481                 {\"preserved_filters\": preserved_filters, \"opts\": opts}, redirect_url\n1482             )\n1483             return HttpResponseRedirect(redirect_url)\n1484 \n1485         elif \"_addanother\" in request.POST:\n1486             msg = format_html(\n1487                 _(\n1488                     \"The {name} \u201c{obj}\u201d was changed successfully. You may add another \"\n1489                     \"{name} below.\"\n1490                 ),\n1491                 **msg_dict,\n1492             )\n1493             self.message_user(request, msg, messages.SUCCESS)\n1494             redirect_url = reverse(\n1495                 \"admin:%s_%s_add\" % (opts.app_label, opts.model_name),\n1496                 current_app=self.admin_site.name,\n1497             )\n1498             redirect_url = add_preserved_filters(\n1499                 {\"preserved_filters\": preserved_filters, \"opts\": opts}, redirect_url\n1500             )\n1501             return HttpResponseRedirect(redirect_url)\n1502 \n1503         else:\n1504             msg = format_html(\n1505                 _(\"The {name} \u201c{obj}\u201d was changed successfully.\"), **msg_dict\n1506             )\n1507             self.message_user(request, msg, messages.SUCCESS)\n1508             return self.response_post_save_change(request, obj)\n1509 \n1510     def _response_post_save(self, request, obj):\n1511         if self.has_view_or_change_permission(request):\n1512             post_url = reverse(\n1513                 \"admin:%s_%s_changelist\" % (self.opts.app_label, self.opts.model_name),\n1514                 current_app=self.admin_site.name,\n1515             )\n1516             preserved_filters = self.get_preserved_filters(request)\n1517             post_url = add_preserved_filters(\n1518                 {\"preserved_filters\": preserved_filters, \"opts\": self.opts}, post_url\n1519             )\n1520         else:\n1521             post_url = reverse(\"admin:index\", current_app=self.admin_site.name)\n1522         return HttpResponseRedirect(post_url)\n1523 \n1524     def response_post_save_add(self, request, obj):\n1525         \"\"\"\n1526         Figure out where to redirect after the 'Save' button has been pressed\n1527         when adding a new object.\n1528         \"\"\"\n1529         return self._response_post_save(request, obj)\n1530 \n1531     def response_post_save_change(self, request, obj):\n1532         \"\"\"\n1533         Figure out where to redirect after the 'Save' button has been pressed\n1534         when editing an existing object.\n1535         \"\"\"\n1536         return self._response_post_save(request, obj)\n1537 \n1538     def response_action(self, request, queryset):\n1539         \"\"\"\n1540         Handle an admin action. This is called if a request is POSTed to the\n1541         changelist; it returns an HttpResponse if the action was handled, and\n1542         None otherwise.\n1543         \"\"\"\n1544 \n1545         # There can be multiple action forms on the page (at the top\n1546         # and bottom of the change list, for example). Get the action\n1547         # whose button was pushed.\n1548         try:\n1549             action_index = int(request.POST.get(\"index\", 0))\n1550         except ValueError:\n1551             action_index = 0\n1552 \n1553         # Construct the action form.\n1554         data = request.POST.copy()\n1555         data.pop(helpers.ACTION_CHECKBOX_NAME, None)\n1556         data.pop(\"index\", None)\n1557 \n1558         # Use the action whose button was pushed\n1559         try:\n1560             data.update({\"action\": data.getlist(\"action\")[action_index]})\n1561         except IndexError:\n1562             # If we didn't get an action from the chosen form that's invalid\n1563             # POST data, so by deleting action it'll fail the validation check\n1564             # below. So no need to do anything here\n1565             pass\n1566 \n1567         action_form = self.action_form(data, auto_id=None)\n1568         action_form.fields[\"action\"].choices = self.get_action_choices(request)\n1569 \n1570         # If the form's valid we can handle the action.\n1571         if action_form.is_valid():\n1572             action = action_form.cleaned_data[\"action\"]\n1573             select_across = action_form.cleaned_data[\"select_across\"]\n1574             func = self.get_actions(request)[action][0]\n1575 \n1576             # Get the list of selected PKs. If nothing's selected, we can't\n1577             # perform an action on it, so bail. Except we want to perform\n1578             # the action explicitly on all objects.\n1579             selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)\n1580             if not selected and not select_across:\n1581                 # Reminder that something needs to be selected or nothing will happen\n1582                 msg = _(\n1583                     \"Items must be selected in order to perform \"\n1584                     \"actions on them. No items have been changed.\"\n1585                 )\n1586                 self.message_user(request, msg, messages.WARNING)\n1587                 return None\n1588 \n1589             if not select_across:\n1590                 # Perform the action only on the selected objects\n1591                 queryset = queryset.filter(pk__in=selected)\n1592 \n1593             response = func(self, request, queryset)\n1594 \n1595             # Actions may return an HttpResponse-like object, which will be\n1596             # used as the response from the POST. If not, we'll be a good\n1597             # little HTTP citizen and redirect back to the changelist page.\n1598             if isinstance(response, HttpResponseBase):\n1599                 return response\n1600             else:\n1601                 return HttpResponseRedirect(request.get_full_path())\n1602         else:\n1603             msg = _(\"No action selected.\")\n1604             self.message_user(request, msg, messages.WARNING)\n1605             return None\n1606 \n1607     def response_delete(self, request, obj_display, obj_id):\n1608         \"\"\"\n1609         Determine the HttpResponse for the delete_view stage.\n1610         \"\"\"\n1611         if IS_POPUP_VAR in request.POST:\n1612             popup_response_data = json.dumps(\n1613                 {\n1614                     \"action\": \"delete\",\n1615                     \"value\": str(obj_id),\n1616                 }\n1617             )\n1618             return TemplateResponse(\n1619                 request,\n1620                 self.popup_response_template\n1621                 or [\n1622                     \"admin/%s/%s/popup_response.html\"\n1623                     % (self.opts.app_label, self.opts.model_name),\n1624                     \"admin/%s/popup_response.html\" % self.opts.app_label,\n1625                     \"admin/popup_response.html\",\n1626                 ],\n1627                 {\n1628                     \"popup_response_data\": popup_response_data,\n1629                 },\n1630             )\n1631 \n1632         self.message_user(\n1633             request,\n1634             _(\"The %(name)s \u201c%(obj)s\u201d was deleted successfully.\")\n1635             % {\n1636                 \"name\": self.opts.verbose_name,\n1637                 \"obj\": obj_display,\n1638             },\n1639             messages.SUCCESS,\n1640         )\n1641 \n1642         if self.has_change_permission(request, None):\n1643             post_url = reverse(\n1644                 \"admin:%s_%s_changelist\" % (self.opts.app_label, self.opts.model_name),\n1645                 current_app=self.admin_site.name,\n1646             )\n1647             preserved_filters = self.get_preserved_filters(request)\n1648             post_url = add_preserved_filters(\n1649                 {\"preserved_filters\": preserved_filters, \"opts\": self.opts}, post_url\n1650             )\n1651         else:\n1652             post_url = reverse(\"admin:index\", current_app=self.admin_site.name)\n1653         return HttpResponseRedirect(post_url)\n1654 \n1655     def render_delete_form(self, request, context):\n1656         app_label = self.opts.app_label\n1657 \n1658         request.current_app = self.admin_site.name\n1659         context.update(\n1660             to_field_var=TO_FIELD_VAR,\n1661             is_popup_var=IS_POPUP_VAR,\n1662             media=self.media,\n1663         )\n1664 \n1665         return TemplateResponse(\n1666             request,\n1667             self.delete_confirmation_template\n1668             or [\n1669                 \"admin/{}/{}/delete_confirmation.html\".format(\n1670                     app_label, self.opts.model_name\n1671                 ),\n1672                 \"admin/{}/delete_confirmation.html\".format(app_label),\n1673                 \"admin/delete_confirmation.html\",\n1674             ],\n1675             context,\n1676         )\n1677 \n1678     def get_inline_formsets(self, request, formsets, inline_instances, obj=None):\n1679         # Edit permissions on parent model are required for editable inlines.\n1680         can_edit_parent = (\n1681             self.has_change_permission(request, obj)\n1682             if obj\n1683             else self.has_add_permission(request)\n1684         )\n1685         inline_admin_formsets = []\n1686         for inline, formset in zip(inline_instances, formsets):\n1687             fieldsets = list(inline.get_fieldsets(request, obj))\n1688             readonly = list(inline.get_readonly_fields(request, obj))\n1689             if can_edit_parent:\n1690                 has_add_permission = inline.has_add_permission(request, obj)\n1691                 has_change_permission = inline.has_change_permission(request, obj)\n1692                 has_delete_permission = inline.has_delete_permission(request, obj)\n1693             else:\n1694                 # Disable all edit-permissions, and override formset settings.\n1695                 has_add_permission = (\n1696                     has_change_permission\n1697                 ) = has_delete_permission = False\n1698                 formset.extra = formset.max_num = 0\n1699             has_view_permission = inline.has_view_permission(request, obj)\n1700             prepopulated = dict(inline.get_prepopulated_fields(request, obj))\n1701             inline_admin_formset = helpers.InlineAdminFormSet(\n1702                 inline,\n1703                 formset,\n1704                 fieldsets,\n1705                 prepopulated,\n1706                 readonly,\n1707                 model_admin=self,\n1708                 has_add_permission=has_add_permission,\n1709                 has_change_permission=has_change_permission,\n1710                 has_delete_permission=has_delete_permission,\n1711                 has_view_permission=has_view_permission,\n1712             )\n1713             inline_admin_formsets.append(inline_admin_formset)\n1714         return inline_admin_formsets\n1715 \n1716     def get_changeform_initial_data(self, request):\n1717         \"\"\"\n1718         Get the initial form data from the request's GET params.\n1719         \"\"\"\n1720         initial = dict(request.GET.items())\n1721         for k in initial:\n1722             try:\n1723                 f = self.opts.get_field(k)\n1724             except FieldDoesNotExist:\n1725                 continue\n1726             # We have to special-case M2Ms as a list of comma-separated PKs.\n1727             if isinstance(f, models.ManyToManyField):\n1728                 initial[k] = initial[k].split(\",\")\n1729         return initial\n1730 \n1731     def _get_obj_does_not_exist_redirect(self, request, opts, object_id):\n1732         \"\"\"\n1733         Create a message informing the user that the object doesn't exist\n1734         and return a redirect to the admin index page.\n1735         \"\"\"\n1736         msg = _(\"%(name)s with ID \u201c%(key)s\u201d doesn\u2019t exist. Perhaps it was deleted?\") % {\n1737             \"name\": opts.verbose_name,\n1738             \"key\": unquote(object_id),\n1739         }\n1740         self.message_user(request, msg, messages.WARNING)\n1741         url = reverse(\"admin:index\", current_app=self.admin_site.name)\n1742         return HttpResponseRedirect(url)\n1743 \n1744     @csrf_protect_m\n1745     def changeform_view(self, request, object_id=None, form_url=\"\", extra_context=None):\n1746         with transaction.atomic(using=router.db_for_write(self.model)):\n1747             return self._changeform_view(request, object_id, form_url, extra_context)\n1748 \n1749     def _changeform_view(self, request, object_id, form_url, extra_context):\n1750         to_field = request.POST.get(TO_FIELD_VAR, request.GET.get(TO_FIELD_VAR))\n1751         if to_field and not self.to_field_allowed(request, to_field):\n1752             raise DisallowedModelAdminToField(\n1753                 \"The field %s cannot be referenced.\" % to_field\n1754             )\n1755 \n1756         if request.method == \"POST\" and \"_saveasnew\" in request.POST:\n1757             object_id = None\n1758 \n1759         add = object_id is None\n1760 \n1761         if add:\n1762             if not self.has_add_permission(request):\n1763                 raise PermissionDenied\n1764             obj = None\n1765 \n1766         else:\n1767             obj = self.get_object(request, unquote(object_id), to_field)\n1768 \n1769             if request.method == \"POST\":\n1770                 if not self.has_change_permission(request, obj):\n1771                     raise PermissionDenied\n1772             else:\n1773                 if not self.has_view_or_change_permission(request, obj):\n1774                     raise PermissionDenied\n1775 \n1776             if obj is None:\n1777                 return self._get_obj_does_not_exist_redirect(\n1778                     request, self.opts, object_id\n1779                 )\n1780 \n1781         fieldsets = self.get_fieldsets(request, obj)\n1782         ModelForm = self.get_form(\n1783             request, obj, change=not add, fields=flatten_fieldsets(fieldsets)\n1784         )\n1785         if request.method == \"POST\":\n1786             form = ModelForm(request.POST, request.FILES, instance=obj)\n1787             formsets, inline_instances = self._create_formsets(\n1788                 request,\n1789                 form.instance,\n1790                 change=not add,\n1791             )\n1792             form_validated = form.is_valid()\n1793             if form_validated:\n1794                 new_object = self.save_form(request, form, change=not add)\n1795             else:\n1796                 new_object = form.instance\n1797             if all_valid(formsets) and form_validated:\n1798                 self.save_model(request, new_object, form, not add)\n1799                 self.save_related(request, form, formsets, not add)\n1800                 change_message = self.construct_change_message(\n1801                     request, form, formsets, add\n1802                 )\n1803                 if add:\n1804                     self.log_addition(request, new_object, change_message)\n1805                     return self.response_add(request, new_object)\n1806                 else:\n1807                     self.log_change(request, new_object, change_message)\n1808                     return self.response_change(request, new_object)\n1809             else:\n1810                 form_validated = False\n1811         else:\n1812             if add:\n1813                 initial = self.get_changeform_initial_data(request)\n1814                 form = ModelForm(initial=initial)\n1815                 formsets, inline_instances = self._create_formsets(\n1816                     request, form.instance, change=False\n1817                 )\n1818             else:\n1819                 form = ModelForm(instance=obj)\n1820                 formsets, inline_instances = self._create_formsets(\n1821                     request, obj, change=True\n1822                 )\n1823 \n1824         if not add and not self.has_change_permission(request, obj):\n1825             readonly_fields = flatten_fieldsets(fieldsets)\n1826         else:\n1827             readonly_fields = self.get_readonly_fields(request, obj)\n1828         admin_form = helpers.AdminForm(\n1829             form,\n1830             list(fieldsets),\n1831             # Clear prepopulated fields on a view-only form to avoid a crash.\n1832             self.get_prepopulated_fields(request, obj)\n1833             if add or self.has_change_permission(request, obj)\n1834             else {},\n1835             readonly_fields,\n1836             model_admin=self,\n1837         )\n1838         media = self.media + admin_form.media\n1839 \n1840         inline_formsets = self.get_inline_formsets(\n1841             request, formsets, inline_instances, obj\n1842         )\n1843         for inline_formset in inline_formsets:\n1844             media += inline_formset.media\n1845 \n1846         if add:\n1847             title = _(\"Add %s\")\n1848         elif self.has_change_permission(request, obj):\n1849             title = _(\"Change %s\")\n1850         else:\n1851             title = _(\"View %s\")\n1852         context = {\n1853             **self.admin_site.each_context(request),\n1854             \"title\": title % self.opts.verbose_name,\n1855             \"subtitle\": str(obj) if obj else None,\n1856             \"adminform\": admin_form,\n1857             \"object_id\": object_id,\n1858             \"original\": obj,\n1859             \"is_popup\": IS_POPUP_VAR in request.POST or IS_POPUP_VAR in request.GET,\n1860             \"to_field\": to_field,\n1861             \"media\": media,\n1862             \"inline_admin_formsets\": inline_formsets,\n1863             \"errors\": helpers.AdminErrorList(form, formsets),\n1864             \"preserved_filters\": self.get_preserved_filters(request),\n1865         }\n1866 \n1867         # Hide the \"Save\" and \"Save and continue\" buttons if \"Save as New\" was\n1868         # previously chosen to prevent the interface from getting confusing.\n1869         if (\n1870             request.method == \"POST\"\n1871             and not form_validated\n1872             and \"_saveasnew\" in request.POST\n1873         ):\n1874             context[\"show_save\"] = False\n1875             context[\"show_save_and_continue\"] = False\n1876             # Use the change template instead of the add template.\n1877             add = False\n1878 \n1879         context.update(extra_context or {})\n1880 \n1881         return self.render_change_form(\n1882             request, context, add=add, change=not add, obj=obj, form_url=form_url\n1883         )\n1884 \n1885     def add_view(self, request, form_url=\"\", extra_context=None):\n1886         return self.changeform_view(request, None, form_url, extra_context)\n1887 \n1888     def change_view(self, request, object_id, form_url=\"\", extra_context=None):\n1889         return self.changeform_view(request, object_id, form_url, extra_context)\n1890 \n1891     def _get_edited_object_pks(self, request, prefix):\n1892         \"\"\"Return POST data values of list_editable primary keys.\"\"\"\n1893         pk_pattern = re.compile(\n1894             r\"{}-\\d+-{}$\".format(re.escape(prefix), self.opts.pk.name)\n1895         )\n1896         return [value for key, value in request.POST.items() if pk_pattern.match(key)]\n1897 \n1898     def _get_list_editable_queryset(self, request, prefix):\n1899         \"\"\"\n1900         Based on POST data, return a queryset of the objects that were edited\n1901         via list_editable.\n1902         \"\"\"\n1903         object_pks = self._get_edited_object_pks(request, prefix)\n1904         queryset = self.get_queryset(request)\n1905         validate = queryset.model._meta.pk.to_python\n1906         try:\n1907             for pk in object_pks:\n1908                 validate(pk)\n1909         except ValidationError:\n1910             # Disable the optimization if the POST data was tampered with.\n1911             return queryset\n1912         return queryset.filter(pk__in=object_pks)\n1913 \n1914     @csrf_protect_m\n1915     def changelist_view(self, request, extra_context=None):\n1916         \"\"\"\n1917         The 'change list' admin view for this model.\n1918         \"\"\"\n1919         from django.contrib.admin.views.main import ERROR_FLAG\n1920 \n1921         app_label = self.opts.app_label\n1922         if not self.has_view_or_change_permission(request):\n1923             raise PermissionDenied\n1924 \n1925         try:\n1926             cl = self.get_changelist_instance(request)\n1927         except IncorrectLookupParameters:\n1928             # Wacky lookup parameters were given, so redirect to the main\n1929             # changelist page, without parameters, and pass an 'invalid=1'\n1930             # parameter via the query string. If wacky parameters were given\n1931             # and the 'invalid=1' parameter was already in the query string,\n1932             # something is screwed up with the database, so display an error\n1933             # page.\n1934             if ERROR_FLAG in request.GET:\n1935                 return SimpleTemplateResponse(\n1936                     \"admin/invalid_setup.html\",\n1937                     {\n1938                         \"title\": _(\"Database error\"),\n1939                     },\n1940                 )\n1941             return HttpResponseRedirect(request.path + \"?\" + ERROR_FLAG + \"=1\")\n1942 \n1943         # If the request was POSTed, this might be a bulk action or a bulk\n1944         # edit. Try to look up an action or confirmation first, but if this\n1945         # isn't an action the POST will fall through to the bulk edit check,\n1946         # below.\n1947         action_failed = False\n1948         selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)\n1949 \n1950         actions = self.get_actions(request)\n1951         # Actions with no confirmation\n1952         if (\n1953             actions\n1954             and request.method == \"POST\"\n1955             and \"index\" in request.POST\n1956             and \"_save\" not in request.POST\n1957         ):\n1958             if selected:\n1959                 response = self.response_action(\n1960                     request, queryset=cl.get_queryset(request)\n1961                 )\n1962                 if response:\n1963                     return response\n1964                 else:\n1965                     action_failed = True\n1966             else:\n1967                 msg = _(\n1968                     \"Items must be selected in order to perform \"\n1969                     \"actions on them. No items have been changed.\"\n1970                 )\n1971                 self.message_user(request, msg, messages.WARNING)\n1972                 action_failed = True\n1973 \n1974         # Actions with confirmation\n1975         if (\n1976             actions\n1977             and request.method == \"POST\"\n1978             and helpers.ACTION_CHECKBOX_NAME in request.POST\n1979             and \"index\" not in request.POST\n1980             and \"_save\" not in request.POST\n1981         ):\n1982             if selected:\n1983                 response = self.response_action(\n1984                     request, queryset=cl.get_queryset(request)\n1985                 )\n1986                 if response:\n1987                     return response\n1988                 else:\n1989                     action_failed = True\n1990 \n1991         if action_failed:\n1992             # Redirect back to the changelist page to avoid resubmitting the\n1993             # form if the user refreshes the browser or uses the \"No, take\n1994             # me back\" button on the action confirmation page.\n1995             return HttpResponseRedirect(request.get_full_path())\n1996 \n1997         # If we're allowing changelist editing, we need to construct a formset\n1998         # for the changelist given all the fields to be edited. Then we'll\n1999         # use the formset to validate/process POSTed data.\n2000         formset = cl.formset = None\n2001 \n2002         # Handle POSTed bulk-edit data.\n2003         if request.method == \"POST\" and cl.list_editable and \"_save\" in request.POST:\n2004             if not self.has_change_permission(request):\n2005                 raise PermissionDenied\n2006             FormSet = self.get_changelist_formset(request)\n2007             modified_objects = self._get_list_editable_queryset(\n2008                 request, FormSet.get_default_prefix()\n2009             )\n2010             formset = cl.formset = FormSet(\n2011                 request.POST, request.FILES, queryset=modified_objects\n2012             )\n2013             if formset.is_valid():\n2014                 changecount = 0\n2015                 with transaction.atomic(using=router.db_for_write(self.model)):\n2016                     for form in formset.forms:\n2017                         if form.has_changed():\n2018                             obj = self.save_form(request, form, change=True)\n2019                             self.save_model(request, obj, form, change=True)\n2020                             self.save_related(request, form, formsets=[], change=True)\n2021                             change_msg = self.construct_change_message(\n2022                                 request, form, None\n2023                             )\n2024                             self.log_change(request, obj, change_msg)\n2025                             changecount += 1\n2026                 if changecount:\n2027                     msg = ngettext(\n2028                         \"%(count)s %(name)s was changed successfully.\",\n2029                         \"%(count)s %(name)s were changed successfully.\",\n2030                         changecount,\n2031                     ) % {\n2032                         \"count\": changecount,\n2033                         \"name\": model_ngettext(self.opts, changecount),\n2034                     }\n2035                     self.message_user(request, msg, messages.SUCCESS)\n2036 \n2037                 return HttpResponseRedirect(request.get_full_path())\n2038 \n2039         # Handle GET -- construct a formset for display.\n2040         elif cl.list_editable and self.has_change_permission(request):\n2041             FormSet = self.get_changelist_formset(request)\n2042             formset = cl.formset = FormSet(queryset=cl.result_list)\n2043 \n2044         # Build the list of media to be used by the formset.\n2045         if formset:\n2046             media = self.media + formset.media\n2047         else:\n2048             media = self.media\n2049 \n2050         # Build the action form and populate it with available actions.\n2051         if actions:\n2052             action_form = self.action_form(auto_id=None)\n2053             action_form.fields[\"action\"].choices = self.get_action_choices(request)\n2054             media += action_form.media\n2055         else:\n2056             action_form = None\n2057 \n2058         selection_note_all = ngettext(\n2059             \"%(total_count)s selected\", \"All %(total_count)s selected\", cl.result_count\n2060         )\n2061 \n2062         context = {\n2063             **self.admin_site.each_context(request),\n2064             \"module_name\": str(self.opts.verbose_name_plural),\n2065             \"selection_note\": _(\"0 of %(cnt)s selected\") % {\"cnt\": len(cl.result_list)},\n2066             \"selection_note_all\": selection_note_all % {\"total_count\": cl.result_count},\n2067             \"title\": cl.title,\n2068             \"subtitle\": None,\n2069             \"is_popup\": cl.is_popup,\n2070             \"to_field\": cl.to_field,\n2071             \"cl\": cl,\n2072             \"media\": media,\n2073             \"has_add_permission\": self.has_add_permission(request),\n2074             \"opts\": cl.opts,\n2075             \"action_form\": action_form,\n2076             \"actions_on_top\": self.actions_on_top,\n2077             \"actions_on_bottom\": self.actions_on_bottom,\n2078             \"actions_selection_counter\": self.actions_selection_counter,\n2079             \"preserved_filters\": self.get_preserved_filters(request),\n2080             **(extra_context or {}),\n2081         }\n2082 \n2083         request.current_app = self.admin_site.name\n2084 \n2085         return TemplateResponse(\n2086             request,\n2087             self.change_list_template\n2088             or [\n2089                 \"admin/%s/%s/change_list.html\" % (app_label, self.opts.model_name),\n2090                 \"admin/%s/change_list.html\" % app_label,\n2091                 \"admin/change_list.html\",\n2092             ],\n2093             context,\n2094         )\n2095 \n2096     def get_deleted_objects(self, objs, request):\n2097         \"\"\"\n2098         Hook for customizing the delete process for the delete view and the\n2099         \"delete selected\" action.\n2100         \"\"\"\n2101         return get_deleted_objects(objs, request, self.admin_site)\n2102 \n2103     @csrf_protect_m\n2104     def delete_view(self, request, object_id, extra_context=None):\n2105         with transaction.atomic(using=router.db_for_write(self.model)):\n2106             return self._delete_view(request, object_id, extra_context)\n2107 \n2108     def _delete_view(self, request, object_id, extra_context):\n2109         \"The 'delete' admin view for this model.\"\n2110         app_label = self.opts.app_label\n2111 \n2112         to_field = request.POST.get(TO_FIELD_VAR, request.GET.get(TO_FIELD_VAR))\n2113         if to_field and not self.to_field_allowed(request, to_field):\n2114             raise DisallowedModelAdminToField(\n2115                 \"The field %s cannot be referenced.\" % to_field\n2116             )\n2117 \n2118         obj = self.get_object(request, unquote(object_id), to_field)\n2119 \n2120         if not self.has_delete_permission(request, obj):\n2121             raise PermissionDenied\n2122 \n2123         if obj is None:\n2124             return self._get_obj_does_not_exist_redirect(request, self.opts, object_id)\n2125 \n2126         # Populate deleted_objects, a data structure of all related objects that\n2127         # will also be deleted.\n2128         (\n2129             deleted_objects,\n2130             model_count,\n2131             perms_needed,\n2132             protected,\n2133         ) = self.get_deleted_objects([obj], request)\n2134 \n2135         if request.POST and not protected:  # The user has confirmed the deletion.\n2136             if perms_needed:\n2137                 raise PermissionDenied\n2138             obj_display = str(obj)\n2139             attr = str(to_field) if to_field else self.opts.pk.attname\n2140             obj_id = obj.serializable_value(attr)\n2141             self.log_deletion(request, obj, obj_display)\n2142             self.delete_model(request, obj)\n2143 \n2144             return self.response_delete(request, obj_display, obj_id)\n2145 \n2146         object_name = str(self.opts.verbose_name)\n2147 \n2148         if perms_needed or protected:\n2149             title = _(\"Cannot delete %(name)s\") % {\"name\": object_name}\n2150         else:\n2151             title = _(\"Are you sure?\")\n2152 \n2153         context = {\n2154             **self.admin_site.each_context(request),\n2155             \"title\": title,\n2156             \"subtitle\": None,\n2157             \"object_name\": object_name,\n2158             \"object\": obj,\n2159             \"deleted_objects\": deleted_objects,\n2160             \"model_count\": dict(model_count).items(),\n2161             \"perms_lacking\": perms_needed,\n2162             \"protected\": protected,\n2163             \"opts\": self.opts,\n2164             \"app_label\": app_label,\n2165             \"preserved_filters\": self.get_preserved_filters(request),\n2166             \"is_popup\": IS_POPUP_VAR in request.POST or IS_POPUP_VAR in request.GET,\n2167             \"to_field\": to_field,\n2168             **(extra_context or {}),\n2169         }\n2170 \n2171         return self.render_delete_form(request, context)\n2172 \n2173     def history_view(self, request, object_id, extra_context=None):\n2174         \"The 'history' admin view for this model.\"\n2175         from django.contrib.admin.models import LogEntry\n2176         from django.contrib.admin.views.main import PAGE_VAR\n2177 \n2178         # First check if the user can see this history.\n2179         model = self.model\n2180         obj = self.get_object(request, unquote(object_id))\n2181         if obj is None:\n2182             return self._get_obj_does_not_exist_redirect(\n2183                 request, model._meta, object_id\n2184             )\n2185 \n2186         if not self.has_view_or_change_permission(request, obj):\n2187             raise PermissionDenied\n2188 \n2189         # Then get the history for this object.\n2190         app_label = self.opts.app_label\n2191         action_list = (\n2192             LogEntry.objects.filter(\n2193                 object_id=unquote(object_id),\n2194                 content_type=get_content_type_for_model(model),\n2195             )\n2196             .select_related()\n2197             .order_by(\"action_time\")\n2198         )\n2199 \n2200         paginator = self.get_paginator(request, action_list, 100)\n2201         page_number = request.GET.get(PAGE_VAR, 1)\n2202         page_obj = paginator.get_page(page_number)\n2203         page_range = paginator.get_elided_page_range(page_obj.number)\n2204 \n2205         context = {\n2206             **self.admin_site.each_context(request),\n2207             \"title\": _(\"Change history: %s\") % obj,\n2208             \"subtitle\": None,\n2209             \"action_list\": page_obj,\n2210             \"page_range\": page_range,\n2211             \"page_var\": PAGE_VAR,\n2212             \"pagination_required\": paginator.count > 100,\n2213             \"module_name\": str(capfirst(self.opts.verbose_name_plural)),\n2214             \"object\": obj,\n2215             \"opts\": self.opts,\n2216             \"preserved_filters\": self.get_preserved_filters(request),\n2217             **(extra_context or {}),\n2218         }\n2219 \n2220         request.current_app = self.admin_site.name\n2221 \n2222         return TemplateResponse(\n2223             request,\n2224             self.object_history_template\n2225             or [\n2226                 \"admin/%s/%s/object_history.html\" % (app_label, self.opts.model_name),\n2227                 \"admin/%s/object_history.html\" % app_label,\n2228                 \"admin/object_history.html\",\n2229             ],\n2230             context,\n2231         )\n2232 \n2233     def get_formset_kwargs(self, request, obj, inline, prefix):\n2234         formset_params = {\n2235             \"instance\": obj,\n2236             \"prefix\": prefix,\n2237             \"queryset\": inline.get_queryset(request),\n2238         }\n2239         if request.method == \"POST\":\n2240             formset_params.update(\n2241                 {\n2242                     \"data\": request.POST.copy(),\n2243                     \"files\": request.FILES,\n2244                     \"save_as_new\": \"_saveasnew\" in request.POST,\n2245                 }\n2246             )\n2247         return formset_params\n2248 \n2249     def _create_formsets(self, request, obj, change):\n2250         \"Helper function to generate formsets for add/change_view.\"\n2251         formsets = []\n2252         inline_instances = []\n2253         prefixes = {}\n2254         get_formsets_args = [request]\n2255         if change:\n2256             get_formsets_args.append(obj)\n2257         for FormSet, inline in self.get_formsets_with_inlines(*get_formsets_args):\n2258             prefix = FormSet.get_default_prefix()\n2259             prefixes[prefix] = prefixes.get(prefix, 0) + 1\n2260             if prefixes[prefix] != 1 or not prefix:\n2261                 prefix = \"%s-%s\" % (prefix, prefixes[prefix])\n2262             formset_params = self.get_formset_kwargs(request, obj, inline, prefix)\n2263             formset = FormSet(**formset_params)\n2264 \n2265             def user_deleted_form(request, obj, formset, index, inline):\n2266                 \"\"\"Return whether or not the user deleted the form.\"\"\"\n2267                 return (\n2268                     inline.has_delete_permission(request, obj)\n2269                     and \"{}-{}-DELETE\".format(formset.prefix, index) in request.POST\n2270                 )\n2271 \n2272             # Bypass validation of each view-only inline form (since the form's\n2273             # data won't be in request.POST), unless the form was deleted.\n2274             if not inline.has_change_permission(request, obj if change else None):\n2275                 for index, form in enumerate(formset.initial_forms):\n2276                     if user_deleted_form(request, obj, formset, index, inline):\n2277                         continue\n2278                     form._errors = {}\n2279                     form.cleaned_data = form.initial\n2280             formsets.append(formset)\n2281             inline_instances.append(inline)\n2282         return formsets, inline_instances\n",
        "intended_behavior": "This class provides additional context to the issue."
    },
    {
        "rel_file_path": "django/contrib/admin/options.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__5.0/django/contrib/admin/options.py",
        "start": 948,
        "end": 963,
        "class_name": "ModelAdmin",
        "method_name": "log_deletion",
        "code": "948     def log_deletion(self, request, obj, object_repr):\n949         \"\"\"\n950         Log that an object will be deleted. Note that this method must be\n951         called before the deletion.\n952 \n953         The default implementation creates an admin LogEntry object.\n954         \"\"\"\n955         from django.contrib.admin.models import DELETION, LogEntry\n956 \n957         return LogEntry.objects.log_action(\n958             user_id=request.user.pk,\n959             content_type_id=get_content_type_for_model(obj).pk,\n960             object_id=obj.pk,\n961             object_repr=object_repr,\n962             action_flag=DELETION,\n963         )\n",
        "intended_behavior": "Again, align this method with the above-described modifications, so deletions are also logged with a reference to the AdminSite. This consistent approach across all types of logs supports the complete and proper filtering of log entries based on the admin site."
    },
    {
        "rel_file_path": "django/contrib/admin/options.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__5.0/django/contrib/admin/options.py",
        "start": 614,
        "end": 2282,
        "class_name": "ModelAdmin",
        "method_name": null,
        "code": "614 class ModelAdmin(BaseModelAdmin):\n615     \"\"\"Encapsulate all admin options and functionality for a given model.\"\"\"\n616 \n617     list_display = (\"__str__\",)\n618     list_display_links = ()\n619     list_filter = ()\n620     list_select_related = False\n621     list_per_page = 100\n622     list_max_show_all = 200\n623     list_editable = ()\n624     search_fields = ()\n625     search_help_text = None\n626     date_hierarchy = None\n627     save_as = False\n628     save_as_continue = True\n629     save_on_top = False\n630     paginator = Paginator\n631     preserve_filters = True\n632     inlines = ()\n633 \n634     # Custom templates (designed to be over-ridden in subclasses)\n635     add_form_template = None\n636     change_form_template = None\n637     change_list_template = None\n638     delete_confirmation_template = None\n639     delete_selected_confirmation_template = None\n640     object_history_template = None\n641     popup_response_template = None\n642 \n643     # Actions\n644     actions = ()\n645     action_form = helpers.ActionForm\n646     actions_on_top = True\n647     actions_on_bottom = False\n648     actions_selection_counter = True\n649     checks_class = ModelAdminChecks\n650 \n651     def __init__(self, model, admin_site):\n652         self.model = model\n653         self.opts = model._meta\n654         self.admin_site = admin_site\n655         super().__init__()\n656 \n657     def __str__(self):\n658         return \"%s.%s\" % (self.opts.app_label, self.__class__.__name__)\n659 \n660     def __repr__(self):\n661         return (\n662             f\"<{self.__class__.__qualname__}: model={self.model.__qualname__} \"\n663             f\"site={self.admin_site!r}>\"\n664         )\n665 \n666     def get_inline_instances(self, request, obj=None):\n667         inline_instances = []\n668         for inline_class in self.get_inlines(request, obj):\n669             inline = inline_class(self.model, self.admin_site)\n670             if request:\n671                 if not (\n672                     inline.has_view_or_change_permission(request, obj)\n673                     or inline.has_add_permission(request, obj)\n674                     or inline.has_delete_permission(request, obj)\n675                 ):\n676                     continue\n677                 if not inline.has_add_permission(request, obj):\n678                     inline.max_num = 0\n679             inline_instances.append(inline)\n680 \n681         return inline_instances\n682 \n683     def get_urls(self):\n684         from django.urls import path\n685 \n686         def wrap(view):\n687             def wrapper(*args, **kwargs):\n688                 return self.admin_site.admin_view(view)(*args, **kwargs)\n689 \n690             wrapper.model_admin = self\n691             return update_wrapper(wrapper, view)\n692 \n693         info = self.opts.app_label, self.opts.model_name\n694 \n695         return [\n696             path(\"\", wrap(self.changelist_view), name=\"%s_%s_changelist\" % info),\n697             path(\"add/\", wrap(self.add_view), name=\"%s_%s_add\" % info),\n698             path(\n699                 \"<path:object_id>/history/\",\n700                 wrap(self.history_view),\n701                 name=\"%s_%s_history\" % info,\n702             ),\n703             path(\n704                 \"<path:object_id>/delete/\",\n705                 wrap(self.delete_view),\n706                 name=\"%s_%s_delete\" % info,\n707             ),\n708             path(\n709                 \"<path:object_id>/change/\",\n710                 wrap(self.change_view),\n711                 name=\"%s_%s_change\" % info,\n712             ),\n713             # For backwards compatibility (was the change url before 1.9)\n714             path(\n715                 \"<path:object_id>/\",\n716                 wrap(\n717                     RedirectView.as_view(\n718                         pattern_name=\"%s:%s_%s_change\"\n719                         % ((self.admin_site.name,) + info)\n720                     )\n721                 ),\n722             ),\n723         ]\n724 \n725     @property\n726     def urls(self):\n727         return self.get_urls()\n728 \n729     @property\n730     def media(self):\n731         extra = \"\" if settings.DEBUG else \".min\"\n732         js = [\n733             \"vendor/jquery/jquery%s.js\" % extra,\n734             \"jquery.init.js\",\n735             \"core.js\",\n736             \"admin/RelatedObjectLookups.js\",\n737             \"actions.js\",\n738             \"urlify.js\",\n739             \"prepopulate.js\",\n740             \"vendor/xregexp/xregexp%s.js\" % extra,\n741         ]\n742         return forms.Media(js=[\"admin/js/%s\" % url for url in js])\n743 \n744     def get_model_perms(self, request):\n745         \"\"\"\n746         Return a dict of all perms for this model. This dict has the keys\n747         ``add``, ``change``, ``delete``, and ``view`` mapping to the True/False\n748         for each of those actions.\n749         \"\"\"\n750         return {\n751             \"add\": self.has_add_permission(request),\n752             \"change\": self.has_change_permission(request),\n753             \"delete\": self.has_delete_permission(request),\n754             \"view\": self.has_view_permission(request),\n755         }\n756 \n757     def _get_form_for_get_fields(self, request, obj):\n758         return self.get_form(request, obj, fields=None)\n759 \n760     def get_form(self, request, obj=None, change=False, **kwargs):\n761         \"\"\"\n762         Return a Form class for use in the admin add view. This is used by\n763         add_view and change_view.\n764         \"\"\"\n765         if \"fields\" in kwargs:\n766             fields = kwargs.pop(\"fields\")\n767         else:\n768             fields = flatten_fieldsets(self.get_fieldsets(request, obj))\n769         excluded = self.get_exclude(request, obj)\n770         exclude = [] if excluded is None else list(excluded)\n771         readonly_fields = self.get_readonly_fields(request, obj)\n772         exclude.extend(readonly_fields)\n773         # Exclude all fields if it's a change form and the user doesn't have\n774         # the change permission.\n775         if (\n776             change\n777             and hasattr(request, \"user\")\n778             and not self.has_change_permission(request, obj)\n779         ):\n780             exclude.extend(fields)\n781         if excluded is None and hasattr(self.form, \"_meta\") and self.form._meta.exclude:\n782             # Take the custom ModelForm's Meta.exclude into account only if the\n783             # ModelAdmin doesn't define its own.\n784             exclude.extend(self.form._meta.exclude)\n785         # if exclude is an empty list we pass None to be consistent with the\n786         # default on modelform_factory\n787         exclude = exclude or None\n788 \n789         # Remove declared form fields which are in readonly_fields.\n790         new_attrs = dict.fromkeys(\n791             f for f in readonly_fields if f in self.form.declared_fields\n792         )\n793         form = type(self.form.__name__, (self.form,), new_attrs)\n794 \n795         defaults = {\n796             \"form\": form,\n797             \"fields\": fields,\n798             \"exclude\": exclude,\n799             \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n800             **kwargs,\n801         }\n802 \n803         if defaults[\"fields\"] is None and not modelform_defines_fields(\n804             defaults[\"form\"]\n805         ):\n806             defaults[\"fields\"] = forms.ALL_FIELDS\n807 \n808         try:\n809             return modelform_factory(self.model, **defaults)\n810         except FieldError as e:\n811             raise FieldError(\n812                 \"%s. Check fields/fieldsets/exclude attributes of class %s.\"\n813                 % (e, self.__class__.__name__)\n814             )\n815 \n816     def get_changelist(self, request, **kwargs):\n817         \"\"\"\n818         Return the ChangeList class for use on the changelist page.\n819         \"\"\"\n820         from django.contrib.admin.views.main import ChangeList\n821 \n822         return ChangeList\n823 \n824     def get_changelist_instance(self, request):\n825         \"\"\"\n826         Return a `ChangeList` instance based on `request`. May raise\n827         `IncorrectLookupParameters`.\n828         \"\"\"\n829         list_display = self.get_list_display(request)\n830         list_display_links = self.get_list_display_links(request, list_display)\n831         # Add the action checkboxes if any actions are available.\n832         if self.get_actions(request):\n833             list_display = [\"action_checkbox\", *list_display]\n834         sortable_by = self.get_sortable_by(request)\n835         ChangeList = self.get_changelist(request)\n836         return ChangeList(\n837             request,\n838             self.model,\n839             list_display,\n840             list_display_links,\n841             self.get_list_filter(request),\n842             self.date_hierarchy,\n843             self.get_search_fields(request),\n844             self.get_list_select_related(request),\n845             self.list_per_page,\n846             self.list_max_show_all,\n847             self.list_editable,\n848             self,\n849             sortable_by,\n850             self.search_help_text,\n851         )\n852 \n853     def get_object(self, request, object_id, from_field=None):\n854         \"\"\"\n855         Return an instance matching the field and value provided, the primary\n856         key is used if no field is provided. Return ``None`` if no match is\n857         found or the object_id fails validation.\n858         \"\"\"\n859         queryset = self.get_queryset(request)\n860         model = queryset.model\n861         field = (\n862             model._meta.pk if from_field is None else model._meta.get_field(from_field)\n863         )\n864         try:\n865             object_id = field.to_python(object_id)\n866             return queryset.get(**{field.name: object_id})\n867         except (model.DoesNotExist, ValidationError, ValueError):\n868             return None\n869 \n870     def get_changelist_form(self, request, **kwargs):\n871         \"\"\"\n872         Return a Form class for use in the Formset on the changelist page.\n873         \"\"\"\n874         defaults = {\n875             \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n876             **kwargs,\n877         }\n878         if defaults.get(\"fields\") is None and not modelform_defines_fields(\n879             defaults.get(\"form\")\n880         ):\n881             defaults[\"fields\"] = forms.ALL_FIELDS\n882 \n883         return modelform_factory(self.model, **defaults)\n884 \n885     def get_changelist_formset(self, request, **kwargs):\n886         \"\"\"\n887         Return a FormSet class for use on the changelist page if list_editable\n888         is used.\n889         \"\"\"\n890         defaults = {\n891             \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n892             **kwargs,\n893         }\n894         return modelformset_factory(\n895             self.model,\n896             self.get_changelist_form(request),\n897             extra=0,\n898             fields=self.list_editable,\n899             **defaults,\n900         )\n901 \n902     def get_formsets_with_inlines(self, request, obj=None):\n903         \"\"\"\n904         Yield formsets and the corresponding inlines.\n905         \"\"\"\n906         for inline in self.get_inline_instances(request, obj):\n907             yield inline.get_formset(request, obj), inline\n908 \n909     def get_paginator(\n910         self, request, queryset, per_page, orphans=0, allow_empty_first_page=True\n911     ):\n912         return self.paginator(queryset, per_page, orphans, allow_empty_first_page)\n913 \n914     def log_addition(self, request, obj, message):\n915         \"\"\"\n916         Log that an object has been successfully added.\n917 \n918         The default implementation creates an admin LogEntry object.\n919         \"\"\"\n920         from django.contrib.admin.models import ADDITION, LogEntry\n921 \n922         return LogEntry.objects.log_action(\n923             user_id=request.user.pk,\n924             content_type_id=get_content_type_for_model(obj).pk,\n925             object_id=obj.pk,\n926             object_repr=str(obj),\n927             action_flag=ADDITION,\n928             change_message=message,\n929         )\n930 \n931     def log_change(self, request, obj, message):\n932         \"\"\"\n933         Log that an object has been successfully changed.\n934 \n935         The default implementation creates an admin LogEntry object.\n936         \"\"\"\n937         from django.contrib.admin.models import CHANGE, LogEntry\n938 \n939         return LogEntry.objects.log_action(\n940             user_id=request.user.pk,\n941             content_type_id=get_content_type_for_model(obj).pk,\n942             object_id=obj.pk,\n943             object_repr=str(obj),\n944             action_flag=CHANGE,\n945             change_message=message,\n946         )\n947 \n948     def log_deletion(self, request, obj, object_repr):\n949         \"\"\"\n950         Log that an object will be deleted. Note that this method must be\n951         called before the deletion.\n952 \n953         The default implementation creates an admin LogEntry object.\n954         \"\"\"\n955         from django.contrib.admin.models import DELETION, LogEntry\n956 \n957         return LogEntry.objects.log_action(\n958             user_id=request.user.pk,\n959             content_type_id=get_content_type_for_model(obj).pk,\n960             object_id=obj.pk,\n961             object_repr=object_repr,\n962             action_flag=DELETION,\n963         )\n964 \n965     @display(description=mark_safe('<input type=\"checkbox\" id=\"action-toggle\">'))\n966     def action_checkbox(self, obj):\n967         \"\"\"\n968         A list_display column containing a checkbox widget.\n969         \"\"\"\n970         return helpers.checkbox.render(helpers.ACTION_CHECKBOX_NAME, str(obj.pk))\n971 \n972     @staticmethod\n973     def _get_action_description(func, name):\n974         return getattr(func, \"short_description\", capfirst(name.replace(\"_\", \" \")))\n975 \n976     def _get_base_actions(self):\n977         \"\"\"Return the list of actions, prior to any request-based filtering.\"\"\"\n978         actions = []\n979         base_actions = (self.get_action(action) for action in self.actions or [])\n980         # get_action might have returned None, so filter any of those out.\n981         base_actions = [action for action in base_actions if action]\n982         base_action_names = {name for _, name, _ in base_actions}\n983 \n984         # Gather actions from the admin site first\n985         for name, func in self.admin_site.actions:\n986             if name in base_action_names:\n987                 continue\n988             description = self._get_action_description(func, name)\n989             actions.append((func, name, description))\n990         # Add actions from this ModelAdmin.\n991         actions.extend(base_actions)\n992         return actions\n993 \n994     def _filter_actions_by_permissions(self, request, actions):\n995         \"\"\"Filter out any actions that the user doesn't have access to.\"\"\"\n996         filtered_actions = []\n997         for action in actions:\n998             callable = action[0]\n999             if not hasattr(callable, \"allowed_permissions\"):\n1000                 filtered_actions.append(action)\n1001                 continue\n1002             permission_checks = (\n1003                 getattr(self, \"has_%s_permission\" % permission)\n1004                 for permission in callable.allowed_permissions\n1005             )\n1006             if any(has_permission(request) for has_permission in permission_checks):\n1007                 filtered_actions.append(action)\n1008         return filtered_actions\n1009 \n1010     def get_actions(self, request):\n1011         \"\"\"\n1012         Return a dictionary mapping the names of all actions for this\n1013         ModelAdmin to a tuple of (callable, name, description) for each action.\n1014         \"\"\"\n1015         # If self.actions is set to None that means actions are disabled on\n1016         # this page.\n1017         if self.actions is None or IS_POPUP_VAR in request.GET:\n1018             return {}\n1019         actions = self._filter_actions_by_permissions(request, self._get_base_actions())\n1020         return {name: (func, name, desc) for func, name, desc in actions}\n1021 \n1022     def get_action_choices(self, request, default_choices=models.BLANK_CHOICE_DASH):\n1023         \"\"\"\n1024         Return a list of choices for use in a form object.  Each choice is a\n1025         tuple (name, description).\n1026         \"\"\"\n1027         choices = [] + default_choices\n1028         for func, name, description in self.get_actions(request).values():\n1029             choice = (name, description % model_format_dict(self.opts))\n1030             choices.append(choice)\n1031         return choices\n1032 \n1033     def get_action(self, action):\n1034         \"\"\"\n1035         Return a given action from a parameter, which can either be a callable,\n1036         or the name of a method on the ModelAdmin.  Return is a tuple of\n1037         (callable, name, description).\n1038         \"\"\"\n1039         # If the action is a callable, just use it.\n1040         if callable(action):\n1041             func = action\n1042             action = action.__name__\n1043 \n1044         # Next, look for a method. Grab it off self.__class__ to get an unbound\n1045         # method instead of a bound one; this ensures that the calling\n1046         # conventions are the same for functions and methods.\n1047         elif hasattr(self.__class__, action):\n1048             func = getattr(self.__class__, action)\n1049 \n1050         # Finally, look for a named method on the admin site\n1051         else:\n1052             try:\n1053                 func = self.admin_site.get_action(action)\n1054             except KeyError:\n1055                 return None\n1056 \n1057         description = self._get_action_description(func, action)\n1058         return func, action, description\n1059 \n1060     def get_list_display(self, request):\n1061         \"\"\"\n1062         Return a sequence containing the fields to be displayed on the\n1063         changelist.\n1064         \"\"\"\n1065         return self.list_display\n1066 \n1067     def get_list_display_links(self, request, list_display):\n1068         \"\"\"\n1069         Return a sequence containing the fields to be displayed as links\n1070         on the changelist. The list_display parameter is the list of fields\n1071         returned by get_list_display().\n1072         \"\"\"\n1073         if (\n1074             self.list_display_links\n1075             or self.list_display_links is None\n1076             or not list_display\n1077         ):\n1078             return self.list_display_links\n1079         else:\n1080             # Use only the first item in list_display as link\n1081             return list(list_display)[:1]\n1082 \n1083     def get_list_filter(self, request):\n1084         \"\"\"\n1085         Return a sequence containing the fields to be displayed as filters in\n1086         the right sidebar of the changelist page.\n1087         \"\"\"\n1088         return self.list_filter\n1089 \n1090     def get_list_select_related(self, request):\n1091         \"\"\"\n1092         Return a list of fields to add to the select_related() part of the\n1093         changelist items query.\n1094         \"\"\"\n1095         return self.list_select_related\n1096 \n1097     def get_search_fields(self, request):\n1098         \"\"\"\n1099         Return a sequence containing the fields to be searched whenever\n1100         somebody submits a search query.\n1101         \"\"\"\n1102         return self.search_fields\n1103 \n1104     def get_search_results(self, request, queryset, search_term):\n1105         \"\"\"\n1106         Return a tuple containing a queryset to implement the search\n1107         and a boolean indicating if the results may contain duplicates.\n1108         \"\"\"\n1109 \n1110         # Apply keyword searches.\n1111         def construct_search(field_name):\n1112             if field_name.startswith(\"^\"):\n1113                 return \"%s__istartswith\" % field_name.removeprefix(\"^\")\n1114             elif field_name.startswith(\"=\"):\n1115                 return \"%s__iexact\" % field_name.removeprefix(\"=\")\n1116             elif field_name.startswith(\"@\"):\n1117                 return \"%s__search\" % field_name.removeprefix(\"@\")\n1118             # Use field_name if it includes a lookup.\n1119             opts = queryset.model._meta\n1120             lookup_fields = field_name.split(LOOKUP_SEP)\n1121             # Go through the fields, following all relations.\n1122             prev_field = None\n1123             for path_part in lookup_fields:\n1124                 if path_part == \"pk\":\n1125                     path_part = opts.pk.name\n1126                 try:\n1127                     field = opts.get_field(path_part)\n1128                 except FieldDoesNotExist:\n1129                     # Use valid query lookups.\n1130                     if prev_field and prev_field.get_lookup(path_part):\n1131                         return field_name\n1132                 else:\n1133                     prev_field = field\n1134                     if hasattr(field, \"path_infos\"):\n1135                         # Update opts to follow the relation.\n1136                         opts = field.path_infos[-1].to_opts\n1137             # Otherwise, use the field with icontains.\n1138             return \"%s__icontains\" % field_name\n1139 \n1140         may_have_duplicates = False\n1141         search_fields = self.get_search_fields(request)\n1142         if search_fields and search_term:\n1143             orm_lookups = [\n1144                 construct_search(str(search_field)) for search_field in search_fields\n1145             ]\n1146             term_queries = []\n1147             for bit in smart_split(search_term):\n1148                 if bit.startswith(('\"', \"'\")) and bit[0] == bit[-1]:\n1149                     bit = unescape_string_literal(bit)\n1150                 or_queries = models.Q.create(\n1151                     [(orm_lookup, bit) for orm_lookup in orm_lookups],\n1152                     connector=models.Q.OR,\n1153                 )\n1154                 term_queries.append(or_queries)\n1155             queryset = queryset.filter(models.Q.create(term_queries))\n1156             may_have_duplicates |= any(\n1157                 lookup_spawns_duplicates(self.opts, search_spec)\n1158                 for search_spec in orm_lookups\n1159             )\n1160         return queryset, may_have_duplicates\n1161 \n1162     def get_preserved_filters(self, request):\n1163         \"\"\"\n1164         Return the preserved filters querystring.\n1165         \"\"\"\n1166         match = request.resolver_match\n1167         if self.preserve_filters and match:\n1168             current_url = \"%s:%s\" % (match.app_name, match.url_name)\n1169             changelist_url = \"admin:%s_%s_changelist\" % (\n1170                 self.opts.app_label,\n1171                 self.opts.model_name,\n1172             )\n1173             if current_url == changelist_url:\n1174                 preserved_filters = request.GET.urlencode()\n1175             else:\n1176                 preserved_filters = request.GET.get(\"_changelist_filters\")\n1177 \n1178             if preserved_filters:\n1179                 return urlencode({\"_changelist_filters\": preserved_filters})\n1180         return \"\"\n1181 \n1182     def construct_change_message(self, request, form, formsets, add=False):\n1183         \"\"\"\n1184         Construct a JSON structure describing changes from a changed object.\n1185         \"\"\"\n1186         return construct_change_message(form, formsets, add)\n1187 \n1188     def message_user(\n1189         self, request, message, level=messages.INFO, extra_tags=\"\", fail_silently=False\n1190     ):\n1191         \"\"\"\n1192         Send a message to the user. The default implementation\n1193         posts a message using the django.contrib.messages backend.\n1194 \n1195         Exposes almost the same API as messages.add_message(), but accepts the\n1196         positional arguments in a different order to maintain backwards\n1197         compatibility. For convenience, it accepts the `level` argument as\n1198         a string rather than the usual level number.\n1199         \"\"\"\n1200         if not isinstance(level, int):\n1201             # attempt to get the level if passed a string\n1202             try:\n1203                 level = getattr(messages.constants, level.upper())\n1204             except AttributeError:\n1205                 levels = messages.constants.DEFAULT_TAGS.values()\n1206                 levels_repr = \", \".join(\"`%s`\" % level for level in levels)\n1207                 raise ValueError(\n1208                     \"Bad message level string: `%s`. Possible values are: %s\"\n1209                     % (level, levels_repr)\n1210                 )\n1211 \n1212         messages.add_message(\n1213             request, level, message, extra_tags=extra_tags, fail_silently=fail_silently\n1214         )\n1215 \n1216     def save_form(self, request, form, change):\n1217         \"\"\"\n1218         Given a ModelForm return an unsaved instance. ``change`` is True if\n1219         the object is being changed, and False if it's being added.\n1220         \"\"\"\n1221         return form.save(commit=False)\n1222 \n1223     def save_model(self, request, obj, form, change):\n1224         \"\"\"\n1225         Given a model instance save it to the database.\n1226         \"\"\"\n1227         obj.save()\n1228 \n1229     def delete_model(self, request, obj):\n1230         \"\"\"\n1231         Given a model instance delete it from the database.\n1232         \"\"\"\n1233         obj.delete()\n1234 \n1235     def delete_queryset(self, request, queryset):\n1236         \"\"\"Given a queryset, delete it from the database.\"\"\"\n1237         queryset.delete()\n1238 \n1239     def save_formset(self, request, form, formset, change):\n1240         \"\"\"\n1241         Given an inline formset save it to the database.\n1242         \"\"\"\n1243         formset.save()\n1244 \n1245     def save_related(self, request, form, formsets, change):\n1246         \"\"\"\n1247         Given the ``HttpRequest``, the parent ``ModelForm`` instance, the\n1248         list of inline formsets and a boolean value based on whether the\n1249         parent is being added or changed, save the related objects to the\n1250         database. Note that at this point save_form() and save_model() have\n1251         already been called.\n1252         \"\"\"\n1253         form.save_m2m()\n1254         for formset in formsets:\n1255             self.save_formset(request, form, formset, change=change)\n1256 \n1257     def render_change_form(\n1258         self, request, context, add=False, change=False, form_url=\"\", obj=None\n1259     ):\n1260         app_label = self.opts.app_label\n1261         preserved_filters = self.get_preserved_filters(request)\n1262         form_url = add_preserved_filters(\n1263             {\"preserved_filters\": preserved_filters, \"opts\": self.opts}, form_url\n1264         )\n1265         view_on_site_url = self.get_view_on_site_url(obj)\n1266         has_editable_inline_admin_formsets = False\n1267         for inline in context[\"inline_admin_formsets\"]:\n1268             if (\n1269                 inline.has_add_permission\n1270                 or inline.has_change_permission\n1271                 or inline.has_delete_permission\n1272             ):\n1273                 has_editable_inline_admin_formsets = True\n1274                 break\n1275         context.update(\n1276             {\n1277                 \"add\": add,\n1278                 \"change\": change,\n1279                 \"has_view_permission\": self.has_view_permission(request, obj),\n1280                 \"has_add_permission\": self.has_add_permission(request),\n1281                 \"has_change_permission\": self.has_change_permission(request, obj),\n1282                 \"has_delete_permission\": self.has_delete_permission(request, obj),\n1283                 \"has_editable_inline_admin_formsets\": (\n1284                     has_editable_inline_admin_formsets\n1285                 ),\n1286                 \"has_file_field\": context[\"adminform\"].form.is_multipart()\n1287                 or any(\n1288                     admin_formset.formset.is_multipart()\n1289                     for admin_formset in context[\"inline_admin_formsets\"]\n1290                 ),\n1291                 \"has_absolute_url\": view_on_site_url is not None,\n1292                 \"absolute_url\": view_on_site_url,\n1293                 \"form_url\": form_url,\n1294                 \"opts\": self.opts,\n1295                 \"content_type_id\": get_content_type_for_model(self.model).pk,\n1296                 \"save_as\": self.save_as,\n1297                 \"save_on_top\": self.save_on_top,\n1298                 \"to_field_var\": TO_FIELD_VAR,\n1299                 \"is_popup_var\": IS_POPUP_VAR,\n1300                 \"app_label\": app_label,\n1301             }\n1302         )\n1303         if add and self.add_form_template is not None:\n1304             form_template = self.add_form_template\n1305         else:\n1306             form_template = self.change_form_template\n1307 \n1308         request.current_app = self.admin_site.name\n1309 \n1310         return TemplateResponse(\n1311             request,\n1312             form_template\n1313             or [\n1314                 \"admin/%s/%s/change_form.html\" % (app_label, self.opts.model_name),\n1315                 \"admin/%s/change_form.html\" % app_label,\n1316                 \"admin/change_form.html\",\n1317             ],\n1318             context,\n1319         )\n1320 \n1321     def response_add(self, request, obj, post_url_continue=None):\n1322         \"\"\"\n1323         Determine the HttpResponse for the add_view stage.\n1324         \"\"\"\n1325         opts = obj._meta\n1326         preserved_filters = self.get_preserved_filters(request)\n1327         obj_url = reverse(\n1328             \"admin:%s_%s_change\" % (opts.app_label, opts.model_name),\n1329             args=(quote(obj.pk),),\n1330             current_app=self.admin_site.name,\n1331         )\n1332         # Add a link to the object's change form if the user can edit the obj.\n1333         if self.has_change_permission(request, obj):\n1334             obj_repr = format_html('<a href=\"{}\">{}</a>', urlquote(obj_url), obj)\n1335         else:\n1336             obj_repr = str(obj)\n1337         msg_dict = {\n1338             \"name\": opts.verbose_name,\n1339             \"obj\": obj_repr,\n1340         }\n1341         # Here, we distinguish between different save types by checking for\n1342         # the presence of keys in request.POST.\n1343 \n1344         if IS_POPUP_VAR in request.POST:\n1345             to_field = request.POST.get(TO_FIELD_VAR)\n1346             if to_field:\n1347                 attr = str(to_field)\n1348             else:\n1349                 attr = obj._meta.pk.attname\n1350             value = obj.serializable_value(attr)\n1351             popup_response_data = json.dumps(\n1352                 {\n1353                     \"value\": str(value),\n1354                     \"obj\": str(obj),\n1355                 }\n1356             )\n1357             return TemplateResponse(\n1358                 request,\n1359                 self.popup_response_template\n1360                 or [\n1361                     \"admin/%s/%s/popup_response.html\"\n1362                     % (opts.app_label, opts.model_name),\n1363                     \"admin/%s/popup_response.html\" % opts.app_label,\n1364                     \"admin/popup_response.html\",\n1365                 ],\n1366                 {\n1367                     \"popup_response_data\": popup_response_data,\n1368                 },\n1369             )\n1370 \n1371         elif \"_continue\" in request.POST or (\n1372             # Redirecting after \"Save as new\".\n1373             \"_saveasnew\" in request.POST\n1374             and self.save_as_continue\n1375             and self.has_change_permission(request, obj)\n1376         ):\n1377             msg = _(\"The {name} \u201c{obj}\u201d was added successfully.\")\n1378             if self.has_change_permission(request, obj):\n1379                 msg += \" \" + _(\"You may edit it again below.\")\n1380             self.message_user(request, format_html(msg, **msg_dict), messages.SUCCESS)\n1381             if post_url_continue is None:\n1382                 post_url_continue = obj_url\n1383             post_url_continue = add_preserved_filters(\n1384                 {\"preserved_filters\": preserved_filters, \"opts\": opts},\n1385                 post_url_continue,\n1386             )\n1387             return HttpResponseRedirect(post_url_continue)\n1388 \n1389         elif \"_addanother\" in request.POST:\n1390             msg = format_html(\n1391                 _(\n1392                     \"The {name} \u201c{obj}\u201d was added successfully. You may add another \"\n1393                     \"{name} below.\"\n1394                 ),\n1395                 **msg_dict,\n1396             )\n1397             self.message_user(request, msg, messages.SUCCESS)\n1398             redirect_url = request.path\n1399             redirect_url = add_preserved_filters(\n1400                 {\"preserved_filters\": preserved_filters, \"opts\": opts}, redirect_url\n1401             )\n1402             return HttpResponseRedirect(redirect_url)\n1403 \n1404         else:\n1405             msg = format_html(\n1406                 _(\"The {name} \u201c{obj}\u201d was added successfully.\"), **msg_dict\n1407             )\n1408             self.message_user(request, msg, messages.SUCCESS)\n1409             return self.response_post_save_add(request, obj)\n1410 \n1411     def response_change(self, request, obj):\n1412         \"\"\"\n1413         Determine the HttpResponse for the change_view stage.\n1414         \"\"\"\n1415 \n1416         if IS_POPUP_VAR in request.POST:\n1417             opts = obj._meta\n1418             to_field = request.POST.get(TO_FIELD_VAR)\n1419             attr = str(to_field) if to_field else opts.pk.attname\n1420             value = request.resolver_match.kwargs[\"object_id\"]\n1421             new_value = obj.serializable_value(attr)\n1422             popup_response_data = json.dumps(\n1423                 {\n1424                     \"action\": \"change\",\n1425                     \"value\": str(value),\n1426                     \"obj\": str(obj),\n1427                     \"new_value\": str(new_value),\n1428                 }\n1429             )\n1430             return TemplateResponse(\n1431                 request,\n1432                 self.popup_response_template\n1433                 or [\n1434                     \"admin/%s/%s/popup_response.html\"\n1435                     % (opts.app_label, opts.model_name),\n1436                     \"admin/%s/popup_response.html\" % opts.app_label,\n1437                     \"admin/popup_response.html\",\n1438                 ],\n1439                 {\n1440                     \"popup_response_data\": popup_response_data,\n1441                 },\n1442             )\n1443 \n1444         opts = self.opts\n1445         preserved_filters = self.get_preserved_filters(request)\n1446 \n1447         msg_dict = {\n1448             \"name\": opts.verbose_name,\n1449             \"obj\": format_html('<a href=\"{}\">{}</a>', urlquote(request.path), obj),\n1450         }\n1451         if \"_continue\" in request.POST:\n1452             msg = format_html(\n1453                 _(\n1454                     \"The {name} \u201c{obj}\u201d was changed successfully. You may edit it \"\n1455                     \"again below.\"\n1456                 ),\n1457                 **msg_dict,\n1458             )\n1459             self.message_user(request, msg, messages.SUCCESS)\n1460             redirect_url = request.path\n1461             redirect_url = add_preserved_filters(\n1462                 {\"preserved_filters\": preserved_filters, \"opts\": opts}, redirect_url\n1463             )\n1464             return HttpResponseRedirect(redirect_url)\n1465 \n1466         elif \"_saveasnew\" in request.POST:\n1467             msg = format_html(\n1468                 _(\n1469                     \"The {name} \u201c{obj}\u201d was added successfully. You may edit it again \"\n1470                     \"below.\"\n1471                 ),\n1472                 **msg_dict,\n1473             )\n1474             self.message_user(request, msg, messages.SUCCESS)\n1475             redirect_url = reverse(\n1476                 \"admin:%s_%s_change\" % (opts.app_label, opts.model_name),\n1477                 args=(obj.pk,),\n1478                 current_app=self.admin_site.name,\n1479             )\n1480             redirect_url = add_preserved_filters(\n1481                 {\"preserved_filters\": preserved_filters, \"opts\": opts}, redirect_url\n1482             )\n1483             return HttpResponseRedirect(redirect_url)\n1484 \n1485         elif \"_addanother\" in request.POST:\n1486             msg = format_html(\n1487                 _(\n1488                     \"The {name} \u201c{obj}\u201d was changed successfully. You may add another \"\n1489                     \"{name} below.\"\n1490                 ),\n1491                 **msg_dict,\n1492             )\n1493             self.message_user(request, msg, messages.SUCCESS)\n1494             redirect_url = reverse(\n1495                 \"admin:%s_%s_add\" % (opts.app_label, opts.model_name),\n1496                 current_app=self.admin_site.name,\n1497             )\n1498             redirect_url = add_preserved_filters(\n1499                 {\"preserved_filters\": preserved_filters, \"opts\": opts}, redirect_url\n1500             )\n1501             return HttpResponseRedirect(redirect_url)\n1502 \n1503         else:\n1504             msg = format_html(\n1505                 _(\"The {name} \u201c{obj}\u201d was changed successfully.\"), **msg_dict\n1506             )\n1507             self.message_user(request, msg, messages.SUCCESS)\n1508             return self.response_post_save_change(request, obj)\n1509 \n1510     def _response_post_save(self, request, obj):\n1511         if self.has_view_or_change_permission(request):\n1512             post_url = reverse(\n1513                 \"admin:%s_%s_changelist\" % (self.opts.app_label, self.opts.model_name),\n1514                 current_app=self.admin_site.name,\n1515             )\n1516             preserved_filters = self.get_preserved_filters(request)\n1517             post_url = add_preserved_filters(\n1518                 {\"preserved_filters\": preserved_filters, \"opts\": self.opts}, post_url\n1519             )\n1520         else:\n1521             post_url = reverse(\"admin:index\", current_app=self.admin_site.name)\n1522         return HttpResponseRedirect(post_url)\n1523 \n1524     def response_post_save_add(self, request, obj):\n1525         \"\"\"\n1526         Figure out where to redirect after the 'Save' button has been pressed\n1527         when adding a new object.\n1528         \"\"\"\n1529         return self._response_post_save(request, obj)\n1530 \n1531     def response_post_save_change(self, request, obj):\n1532         \"\"\"\n1533         Figure out where to redirect after the 'Save' button has been pressed\n1534         when editing an existing object.\n1535         \"\"\"\n1536         return self._response_post_save(request, obj)\n1537 \n1538     def response_action(self, request, queryset):\n1539         \"\"\"\n1540         Handle an admin action. This is called if a request is POSTed to the\n1541         changelist; it returns an HttpResponse if the action was handled, and\n1542         None otherwise.\n1543         \"\"\"\n1544 \n1545         # There can be multiple action forms on the page (at the top\n1546         # and bottom of the change list, for example). Get the action\n1547         # whose button was pushed.\n1548         try:\n1549             action_index = int(request.POST.get(\"index\", 0))\n1550         except ValueError:\n1551             action_index = 0\n1552 \n1553         # Construct the action form.\n1554         data = request.POST.copy()\n1555         data.pop(helpers.ACTION_CHECKBOX_NAME, None)\n1556         data.pop(\"index\", None)\n1557 \n1558         # Use the action whose button was pushed\n1559         try:\n1560             data.update({\"action\": data.getlist(\"action\")[action_index]})\n1561         except IndexError:\n1562             # If we didn't get an action from the chosen form that's invalid\n1563             # POST data, so by deleting action it'll fail the validation check\n1564             # below. So no need to do anything here\n1565             pass\n1566 \n1567         action_form = self.action_form(data, auto_id=None)\n1568         action_form.fields[\"action\"].choices = self.get_action_choices(request)\n1569 \n1570         # If the form's valid we can handle the action.\n1571         if action_form.is_valid():\n1572             action = action_form.cleaned_data[\"action\"]\n1573             select_across = action_form.cleaned_data[\"select_across\"]\n1574             func = self.get_actions(request)[action][0]\n1575 \n1576             # Get the list of selected PKs. If nothing's selected, we can't\n1577             # perform an action on it, so bail. Except we want to perform\n1578             # the action explicitly on all objects.\n1579             selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)\n1580             if not selected and not select_across:\n1581                 # Reminder that something needs to be selected or nothing will happen\n1582                 msg = _(\n1583                     \"Items must be selected in order to perform \"\n1584                     \"actions on them. No items have been changed.\"\n1585                 )\n1586                 self.message_user(request, msg, messages.WARNING)\n1587                 return None\n1588 \n1589             if not select_across:\n1590                 # Perform the action only on the selected objects\n1591                 queryset = queryset.filter(pk__in=selected)\n1592 \n1593             response = func(self, request, queryset)\n1594 \n1595             # Actions may return an HttpResponse-like object, which will be\n1596             # used as the response from the POST. If not, we'll be a good\n1597             # little HTTP citizen and redirect back to the changelist page.\n1598             if isinstance(response, HttpResponseBase):\n1599                 return response\n1600             else:\n1601                 return HttpResponseRedirect(request.get_full_path())\n1602         else:\n1603             msg = _(\"No action selected.\")\n1604             self.message_user(request, msg, messages.WARNING)\n1605             return None\n1606 \n1607     def response_delete(self, request, obj_display, obj_id):\n1608         \"\"\"\n1609         Determine the HttpResponse for the delete_view stage.\n1610         \"\"\"\n1611         if IS_POPUP_VAR in request.POST:\n1612             popup_response_data = json.dumps(\n1613                 {\n1614                     \"action\": \"delete\",\n1615                     \"value\": str(obj_id),\n1616                 }\n1617             )\n1618             return TemplateResponse(\n1619                 request,\n1620                 self.popup_response_template\n1621                 or [\n1622                     \"admin/%s/%s/popup_response.html\"\n1623                     % (self.opts.app_label, self.opts.model_name),\n1624                     \"admin/%s/popup_response.html\" % self.opts.app_label,\n1625                     \"admin/popup_response.html\",\n1626                 ],\n1627                 {\n1628                     \"popup_response_data\": popup_response_data,\n1629                 },\n1630             )\n1631 \n1632         self.message_user(\n1633             request,\n1634             _(\"The %(name)s \u201c%(obj)s\u201d was deleted successfully.\")\n1635             % {\n1636                 \"name\": self.opts.verbose_name,\n1637                 \"obj\": obj_display,\n1638             },\n1639             messages.SUCCESS,\n1640         )\n1641 \n1642         if self.has_change_permission(request, None):\n1643             post_url = reverse(\n1644                 \"admin:%s_%s_changelist\" % (self.opts.app_label, self.opts.model_name),\n1645                 current_app=self.admin_site.name,\n1646             )\n1647             preserved_filters = self.get_preserved_filters(request)\n1648             post_url = add_preserved_filters(\n1649                 {\"preserved_filters\": preserved_filters, \"opts\": self.opts}, post_url\n1650             )\n1651         else:\n1652             post_url = reverse(\"admin:index\", current_app=self.admin_site.name)\n1653         return HttpResponseRedirect(post_url)\n1654 \n1655     def render_delete_form(self, request, context):\n1656         app_label = self.opts.app_label\n1657 \n1658         request.current_app = self.admin_site.name\n1659         context.update(\n1660             to_field_var=TO_FIELD_VAR,\n1661             is_popup_var=IS_POPUP_VAR,\n1662             media=self.media,\n1663         )\n1664 \n1665         return TemplateResponse(\n1666             request,\n1667             self.delete_confirmation_template\n1668             or [\n1669                 \"admin/{}/{}/delete_confirmation.html\".format(\n1670                     app_label, self.opts.model_name\n1671                 ),\n1672                 \"admin/{}/delete_confirmation.html\".format(app_label),\n1673                 \"admin/delete_confirmation.html\",\n1674             ],\n1675             context,\n1676         )\n1677 \n1678     def get_inline_formsets(self, request, formsets, inline_instances, obj=None):\n1679         # Edit permissions on parent model are required for editable inlines.\n1680         can_edit_parent = (\n1681             self.has_change_permission(request, obj)\n1682             if obj\n1683             else self.has_add_permission(request)\n1684         )\n1685         inline_admin_formsets = []\n1686         for inline, formset in zip(inline_instances, formsets):\n1687             fieldsets = list(inline.get_fieldsets(request, obj))\n1688             readonly = list(inline.get_readonly_fields(request, obj))\n1689             if can_edit_parent:\n1690                 has_add_permission = inline.has_add_permission(request, obj)\n1691                 has_change_permission = inline.has_change_permission(request, obj)\n1692                 has_delete_permission = inline.has_delete_permission(request, obj)\n1693             else:\n1694                 # Disable all edit-permissions, and override formset settings.\n1695                 has_add_permission = (\n1696                     has_change_permission\n1697                 ) = has_delete_permission = False\n1698                 formset.extra = formset.max_num = 0\n1699             has_view_permission = inline.has_view_permission(request, obj)\n1700             prepopulated = dict(inline.get_prepopulated_fields(request, obj))\n1701             inline_admin_formset = helpers.InlineAdminFormSet(\n1702                 inline,\n1703                 formset,\n1704                 fieldsets,\n1705                 prepopulated,\n1706                 readonly,\n1707                 model_admin=self,\n1708                 has_add_permission=has_add_permission,\n1709                 has_change_permission=has_change_permission,\n1710                 has_delete_permission=has_delete_permission,\n1711                 has_view_permission=has_view_permission,\n1712             )\n1713             inline_admin_formsets.append(inline_admin_formset)\n1714         return inline_admin_formsets\n1715 \n1716     def get_changeform_initial_data(self, request):\n1717         \"\"\"\n1718         Get the initial form data from the request's GET params.\n1719         \"\"\"\n1720         initial = dict(request.GET.items())\n1721         for k in initial:\n1722             try:\n1723                 f = self.opts.get_field(k)\n1724             except FieldDoesNotExist:\n1725                 continue\n1726             # We have to special-case M2Ms as a list of comma-separated PKs.\n1727             if isinstance(f, models.ManyToManyField):\n1728                 initial[k] = initial[k].split(\",\")\n1729         return initial\n1730 \n1731     def _get_obj_does_not_exist_redirect(self, request, opts, object_id):\n1732         \"\"\"\n1733         Create a message informing the user that the object doesn't exist\n1734         and return a redirect to the admin index page.\n1735         \"\"\"\n1736         msg = _(\"%(name)s with ID \u201c%(key)s\u201d doesn\u2019t exist. Perhaps it was deleted?\") % {\n1737             \"name\": opts.verbose_name,\n1738             \"key\": unquote(object_id),\n1739         }\n1740         self.message_user(request, msg, messages.WARNING)\n1741         url = reverse(\"admin:index\", current_app=self.admin_site.name)\n1742         return HttpResponseRedirect(url)\n1743 \n1744     @csrf_protect_m\n1745     def changeform_view(self, request, object_id=None, form_url=\"\", extra_context=None):\n1746         with transaction.atomic(using=router.db_for_write(self.model)):\n1747             return self._changeform_view(request, object_id, form_url, extra_context)\n1748 \n1749     def _changeform_view(self, request, object_id, form_url, extra_context):\n1750         to_field = request.POST.get(TO_FIELD_VAR, request.GET.get(TO_FIELD_VAR))\n1751         if to_field and not self.to_field_allowed(request, to_field):\n1752             raise DisallowedModelAdminToField(\n1753                 \"The field %s cannot be referenced.\" % to_field\n1754             )\n1755 \n1756         if request.method == \"POST\" and \"_saveasnew\" in request.POST:\n1757             object_id = None\n1758 \n1759         add = object_id is None\n1760 \n1761         if add:\n1762             if not self.has_add_permission(request):\n1763                 raise PermissionDenied\n1764             obj = None\n1765 \n1766         else:\n1767             obj = self.get_object(request, unquote(object_id), to_field)\n1768 \n1769             if request.method == \"POST\":\n1770                 if not self.has_change_permission(request, obj):\n1771                     raise PermissionDenied\n1772             else:\n1773                 if not self.has_view_or_change_permission(request, obj):\n1774                     raise PermissionDenied\n1775 \n1776             if obj is None:\n1777                 return self._get_obj_does_not_exist_redirect(\n1778                     request, self.opts, object_id\n1779                 )\n1780 \n1781         fieldsets = self.get_fieldsets(request, obj)\n1782         ModelForm = self.get_form(\n1783             request, obj, change=not add, fields=flatten_fieldsets(fieldsets)\n1784         )\n1785         if request.method == \"POST\":\n1786             form = ModelForm(request.POST, request.FILES, instance=obj)\n1787             formsets, inline_instances = self._create_formsets(\n1788                 request,\n1789                 form.instance,\n1790                 change=not add,\n1791             )\n1792             form_validated = form.is_valid()\n1793             if form_validated:\n1794                 new_object = self.save_form(request, form, change=not add)\n1795             else:\n1796                 new_object = form.instance\n1797             if all_valid(formsets) and form_validated:\n1798                 self.save_model(request, new_object, form, not add)\n1799                 self.save_related(request, form, formsets, not add)\n1800                 change_message = self.construct_change_message(\n1801                     request, form, formsets, add\n1802                 )\n1803                 if add:\n1804                     self.log_addition(request, new_object, change_message)\n1805                     return self.response_add(request, new_object)\n1806                 else:\n1807                     self.log_change(request, new_object, change_message)\n1808                     return self.response_change(request, new_object)\n1809             else:\n1810                 form_validated = False\n1811         else:\n1812             if add:\n1813                 initial = self.get_changeform_initial_data(request)\n1814                 form = ModelForm(initial=initial)\n1815                 formsets, inline_instances = self._create_formsets(\n1816                     request, form.instance, change=False\n1817                 )\n1818             else:\n1819                 form = ModelForm(instance=obj)\n1820                 formsets, inline_instances = self._create_formsets(\n1821                     request, obj, change=True\n1822                 )\n1823 \n1824         if not add and not self.has_change_permission(request, obj):\n1825             readonly_fields = flatten_fieldsets(fieldsets)\n1826         else:\n1827             readonly_fields = self.get_readonly_fields(request, obj)\n1828         admin_form = helpers.AdminForm(\n1829             form,\n1830             list(fieldsets),\n1831             # Clear prepopulated fields on a view-only form to avoid a crash.\n1832             self.get_prepopulated_fields(request, obj)\n1833             if add or self.has_change_permission(request, obj)\n1834             else {},\n1835             readonly_fields,\n1836             model_admin=self,\n1837         )\n1838         media = self.media + admin_form.media\n1839 \n1840         inline_formsets = self.get_inline_formsets(\n1841             request, formsets, inline_instances, obj\n1842         )\n1843         for inline_formset in inline_formsets:\n1844             media += inline_formset.media\n1845 \n1846         if add:\n1847             title = _(\"Add %s\")\n1848         elif self.has_change_permission(request, obj):\n1849             title = _(\"Change %s\")\n1850         else:\n1851             title = _(\"View %s\")\n1852         context = {\n1853             **self.admin_site.each_context(request),\n1854             \"title\": title % self.opts.verbose_name,\n1855             \"subtitle\": str(obj) if obj else None,\n1856             \"adminform\": admin_form,\n1857             \"object_id\": object_id,\n1858             \"original\": obj,\n1859             \"is_popup\": IS_POPUP_VAR in request.POST or IS_POPUP_VAR in request.GET,\n1860             \"to_field\": to_field,\n1861             \"media\": media,\n1862             \"inline_admin_formsets\": inline_formsets,\n1863             \"errors\": helpers.AdminErrorList(form, formsets),\n1864             \"preserved_filters\": self.get_preserved_filters(request),\n1865         }\n1866 \n1867         # Hide the \"Save\" and \"Save and continue\" buttons if \"Save as New\" was\n1868         # previously chosen to prevent the interface from getting confusing.\n1869         if (\n1870             request.method == \"POST\"\n1871             and not form_validated\n1872             and \"_saveasnew\" in request.POST\n1873         ):\n1874             context[\"show_save\"] = False\n1875             context[\"show_save_and_continue\"] = False\n1876             # Use the change template instead of the add template.\n1877             add = False\n1878 \n1879         context.update(extra_context or {})\n1880 \n1881         return self.render_change_form(\n1882             request, context, add=add, change=not add, obj=obj, form_url=form_url\n1883         )\n1884 \n1885     def add_view(self, request, form_url=\"\", extra_context=None):\n1886         return self.changeform_view(request, None, form_url, extra_context)\n1887 \n1888     def change_view(self, request, object_id, form_url=\"\", extra_context=None):\n1889         return self.changeform_view(request, object_id, form_url, extra_context)\n1890 \n1891     def _get_edited_object_pks(self, request, prefix):\n1892         \"\"\"Return POST data values of list_editable primary keys.\"\"\"\n1893         pk_pattern = re.compile(\n1894             r\"{}-\\d+-{}$\".format(re.escape(prefix), self.opts.pk.name)\n1895         )\n1896         return [value for key, value in request.POST.items() if pk_pattern.match(key)]\n1897 \n1898     def _get_list_editable_queryset(self, request, prefix):\n1899         \"\"\"\n1900         Based on POST data, return a queryset of the objects that were edited\n1901         via list_editable.\n1902         \"\"\"\n1903         object_pks = self._get_edited_object_pks(request, prefix)\n1904         queryset = self.get_queryset(request)\n1905         validate = queryset.model._meta.pk.to_python\n1906         try:\n1907             for pk in object_pks:\n1908                 validate(pk)\n1909         except ValidationError:\n1910             # Disable the optimization if the POST data was tampered with.\n1911             return queryset\n1912         return queryset.filter(pk__in=object_pks)\n1913 \n1914     @csrf_protect_m\n1915     def changelist_view(self, request, extra_context=None):\n1916         \"\"\"\n1917         The 'change list' admin view for this model.\n1918         \"\"\"\n1919         from django.contrib.admin.views.main import ERROR_FLAG\n1920 \n1921         app_label = self.opts.app_label\n1922         if not self.has_view_or_change_permission(request):\n1923             raise PermissionDenied\n1924 \n1925         try:\n1926             cl = self.get_changelist_instance(request)\n1927         except IncorrectLookupParameters:\n1928             # Wacky lookup parameters were given, so redirect to the main\n1929             # changelist page, without parameters, and pass an 'invalid=1'\n1930             # parameter via the query string. If wacky parameters were given\n1931             # and the 'invalid=1' parameter was already in the query string,\n1932             # something is screwed up with the database, so display an error\n1933             # page.\n1934             if ERROR_FLAG in request.GET:\n1935                 return SimpleTemplateResponse(\n1936                     \"admin/invalid_setup.html\",\n1937                     {\n1938                         \"title\": _(\"Database error\"),\n1939                     },\n1940                 )\n1941             return HttpResponseRedirect(request.path + \"?\" + ERROR_FLAG + \"=1\")\n1942 \n1943         # If the request was POSTed, this might be a bulk action or a bulk\n1944         # edit. Try to look up an action or confirmation first, but if this\n1945         # isn't an action the POST will fall through to the bulk edit check,\n1946         # below.\n1947         action_failed = False\n1948         selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)\n1949 \n1950         actions = self.get_actions(request)\n1951         # Actions with no confirmation\n1952         if (\n1953             actions\n1954             and request.method == \"POST\"\n1955             and \"index\" in request.POST\n1956             and \"_save\" not in request.POST\n1957         ):\n1958             if selected:\n1959                 response = self.response_action(\n1960                     request, queryset=cl.get_queryset(request)\n1961                 )\n1962                 if response:\n1963                     return response\n1964                 else:\n1965                     action_failed = True\n1966             else:\n1967                 msg = _(\n1968                     \"Items must be selected in order to perform \"\n1969                     \"actions on them. No items have been changed.\"\n1970                 )\n1971                 self.message_user(request, msg, messages.WARNING)\n1972                 action_failed = True\n1973 \n1974         # Actions with confirmation\n1975         if (\n1976             actions\n1977             and request.method == \"POST\"\n1978             and helpers.ACTION_CHECKBOX_NAME in request.POST\n1979             and \"index\" not in request.POST\n1980             and \"_save\" not in request.POST\n1981         ):\n1982             if selected:\n1983                 response = self.response_action(\n1984                     request, queryset=cl.get_queryset(request)\n1985                 )\n1986                 if response:\n1987                     return response\n1988                 else:\n1989                     action_failed = True\n1990 \n1991         if action_failed:\n1992             # Redirect back to the changelist page to avoid resubmitting the\n1993             # form if the user refreshes the browser or uses the \"No, take\n1994             # me back\" button on the action confirmation page.\n1995             return HttpResponseRedirect(request.get_full_path())\n1996 \n1997         # If we're allowing changelist editing, we need to construct a formset\n1998         # for the changelist given all the fields to be edited. Then we'll\n1999         # use the formset to validate/process POSTed data.\n2000         formset = cl.formset = None\n2001 \n2002         # Handle POSTed bulk-edit data.\n2003         if request.method == \"POST\" and cl.list_editable and \"_save\" in request.POST:\n2004             if not self.has_change_permission(request):\n2005                 raise PermissionDenied\n2006             FormSet = self.get_changelist_formset(request)\n2007             modified_objects = self._get_list_editable_queryset(\n2008                 request, FormSet.get_default_prefix()\n2009             )\n2010             formset = cl.formset = FormSet(\n2011                 request.POST, request.FILES, queryset=modified_objects\n2012             )\n2013             if formset.is_valid():\n2014                 changecount = 0\n2015                 with transaction.atomic(using=router.db_for_write(self.model)):\n2016                     for form in formset.forms:\n2017                         if form.has_changed():\n2018                             obj = self.save_form(request, form, change=True)\n2019                             self.save_model(request, obj, form, change=True)\n2020                             self.save_related(request, form, formsets=[], change=True)\n2021                             change_msg = self.construct_change_message(\n2022                                 request, form, None\n2023                             )\n2024                             self.log_change(request, obj, change_msg)\n2025                             changecount += 1\n2026                 if changecount:\n2027                     msg = ngettext(\n2028                         \"%(count)s %(name)s was changed successfully.\",\n2029                         \"%(count)s %(name)s were changed successfully.\",\n2030                         changecount,\n2031                     ) % {\n2032                         \"count\": changecount,\n2033                         \"name\": model_ngettext(self.opts, changecount),\n2034                     }\n2035                     self.message_user(request, msg, messages.SUCCESS)\n2036 \n2037                 return HttpResponseRedirect(request.get_full_path())\n2038 \n2039         # Handle GET -- construct a formset for display.\n2040         elif cl.list_editable and self.has_change_permission(request):\n2041             FormSet = self.get_changelist_formset(request)\n2042             formset = cl.formset = FormSet(queryset=cl.result_list)\n2043 \n2044         # Build the list of media to be used by the formset.\n2045         if formset:\n2046             media = self.media + formset.media\n2047         else:\n2048             media = self.media\n2049 \n2050         # Build the action form and populate it with available actions.\n2051         if actions:\n2052             action_form = self.action_form(auto_id=None)\n2053             action_form.fields[\"action\"].choices = self.get_action_choices(request)\n2054             media += action_form.media\n2055         else:\n2056             action_form = None\n2057 \n2058         selection_note_all = ngettext(\n2059             \"%(total_count)s selected\", \"All %(total_count)s selected\", cl.result_count\n2060         )\n2061 \n2062         context = {\n2063             **self.admin_site.each_context(request),\n2064             \"module_name\": str(self.opts.verbose_name_plural),\n2065             \"selection_note\": _(\"0 of %(cnt)s selected\") % {\"cnt\": len(cl.result_list)},\n2066             \"selection_note_all\": selection_note_all % {\"total_count\": cl.result_count},\n2067             \"title\": cl.title,\n2068             \"subtitle\": None,\n2069             \"is_popup\": cl.is_popup,\n2070             \"to_field\": cl.to_field,\n2071             \"cl\": cl,\n2072             \"media\": media,\n2073             \"has_add_permission\": self.has_add_permission(request),\n2074             \"opts\": cl.opts,\n2075             \"action_form\": action_form,\n2076             \"actions_on_top\": self.actions_on_top,\n2077             \"actions_on_bottom\": self.actions_on_bottom,\n2078             \"actions_selection_counter\": self.actions_selection_counter,\n2079             \"preserved_filters\": self.get_preserved_filters(request),\n2080             **(extra_context or {}),\n2081         }\n2082 \n2083         request.current_app = self.admin_site.name\n2084 \n2085         return TemplateResponse(\n2086             request,\n2087             self.change_list_template\n2088             or [\n2089                 \"admin/%s/%s/change_list.html\" % (app_label, self.opts.model_name),\n2090                 \"admin/%s/change_list.html\" % app_label,\n2091                 \"admin/change_list.html\",\n2092             ],\n2093             context,\n2094         )\n2095 \n2096     def get_deleted_objects(self, objs, request):\n2097         \"\"\"\n2098         Hook for customizing the delete process for the delete view and the\n2099         \"delete selected\" action.\n2100         \"\"\"\n2101         return get_deleted_objects(objs, request, self.admin_site)\n2102 \n2103     @csrf_protect_m\n2104     def delete_view(self, request, object_id, extra_context=None):\n2105         with transaction.atomic(using=router.db_for_write(self.model)):\n2106             return self._delete_view(request, object_id, extra_context)\n2107 \n2108     def _delete_view(self, request, object_id, extra_context):\n2109         \"The 'delete' admin view for this model.\"\n2110         app_label = self.opts.app_label\n2111 \n2112         to_field = request.POST.get(TO_FIELD_VAR, request.GET.get(TO_FIELD_VAR))\n2113         if to_field and not self.to_field_allowed(request, to_field):\n2114             raise DisallowedModelAdminToField(\n2115                 \"The field %s cannot be referenced.\" % to_field\n2116             )\n2117 \n2118         obj = self.get_object(request, unquote(object_id), to_field)\n2119 \n2120         if not self.has_delete_permission(request, obj):\n2121             raise PermissionDenied\n2122 \n2123         if obj is None:\n2124             return self._get_obj_does_not_exist_redirect(request, self.opts, object_id)\n2125 \n2126         # Populate deleted_objects, a data structure of all related objects that\n2127         # will also be deleted.\n2128         (\n2129             deleted_objects,\n2130             model_count,\n2131             perms_needed,\n2132             protected,\n2133         ) = self.get_deleted_objects([obj], request)\n2134 \n2135         if request.POST and not protected:  # The user has confirmed the deletion.\n2136             if perms_needed:\n2137                 raise PermissionDenied\n2138             obj_display = str(obj)\n2139             attr = str(to_field) if to_field else self.opts.pk.attname\n2140             obj_id = obj.serializable_value(attr)\n2141             self.log_deletion(request, obj, obj_display)\n2142             self.delete_model(request, obj)\n2143 \n2144             return self.response_delete(request, obj_display, obj_id)\n2145 \n2146         object_name = str(self.opts.verbose_name)\n2147 \n2148         if perms_needed or protected:\n2149             title = _(\"Cannot delete %(name)s\") % {\"name\": object_name}\n2150         else:\n2151             title = _(\"Are you sure?\")\n2152 \n2153         context = {\n2154             **self.admin_site.each_context(request),\n2155             \"title\": title,\n2156             \"subtitle\": None,\n2157             \"object_name\": object_name,\n2158             \"object\": obj,\n2159             \"deleted_objects\": deleted_objects,\n2160             \"model_count\": dict(model_count).items(),\n2161             \"perms_lacking\": perms_needed,\n2162             \"protected\": protected,\n2163             \"opts\": self.opts,\n2164             \"app_label\": app_label,\n2165             \"preserved_filters\": self.get_preserved_filters(request),\n2166             \"is_popup\": IS_POPUP_VAR in request.POST or IS_POPUP_VAR in request.GET,\n2167             \"to_field\": to_field,\n2168             **(extra_context or {}),\n2169         }\n2170 \n2171         return self.render_delete_form(request, context)\n2172 \n2173     def history_view(self, request, object_id, extra_context=None):\n2174         \"The 'history' admin view for this model.\"\n2175         from django.contrib.admin.models import LogEntry\n2176         from django.contrib.admin.views.main import PAGE_VAR\n2177 \n2178         # First check if the user can see this history.\n2179         model = self.model\n2180         obj = self.get_object(request, unquote(object_id))\n2181         if obj is None:\n2182             return self._get_obj_does_not_exist_redirect(\n2183                 request, model._meta, object_id\n2184             )\n2185 \n2186         if not self.has_view_or_change_permission(request, obj):\n2187             raise PermissionDenied\n2188 \n2189         # Then get the history for this object.\n2190         app_label = self.opts.app_label\n2191         action_list = (\n2192             LogEntry.objects.filter(\n2193                 object_id=unquote(object_id),\n2194                 content_type=get_content_type_for_model(model),\n2195             )\n2196             .select_related()\n2197             .order_by(\"action_time\")\n2198         )\n2199 \n2200         paginator = self.get_paginator(request, action_list, 100)\n2201         page_number = request.GET.get(PAGE_VAR, 1)\n2202         page_obj = paginator.get_page(page_number)\n2203         page_range = paginator.get_elided_page_range(page_obj.number)\n2204 \n2205         context = {\n2206             **self.admin_site.each_context(request),\n2207             \"title\": _(\"Change history: %s\") % obj,\n2208             \"subtitle\": None,\n2209             \"action_list\": page_obj,\n2210             \"page_range\": page_range,\n2211             \"page_var\": PAGE_VAR,\n2212             \"pagination_required\": paginator.count > 100,\n2213             \"module_name\": str(capfirst(self.opts.verbose_name_plural)),\n2214             \"object\": obj,\n2215             \"opts\": self.opts,\n2216             \"preserved_filters\": self.get_preserved_filters(request),\n2217             **(extra_context or {}),\n2218         }\n2219 \n2220         request.current_app = self.admin_site.name\n2221 \n2222         return TemplateResponse(\n2223             request,\n2224             self.object_history_template\n2225             or [\n2226                 \"admin/%s/%s/object_history.html\" % (app_label, self.opts.model_name),\n2227                 \"admin/%s/object_history.html\" % app_label,\n2228                 \"admin/object_history.html\",\n2229             ],\n2230             context,\n2231         )\n2232 \n2233     def get_formset_kwargs(self, request, obj, inline, prefix):\n2234         formset_params = {\n2235             \"instance\": obj,\n2236             \"prefix\": prefix,\n2237             \"queryset\": inline.get_queryset(request),\n2238         }\n2239         if request.method == \"POST\":\n2240             formset_params.update(\n2241                 {\n2242                     \"data\": request.POST.copy(),\n2243                     \"files\": request.FILES,\n2244                     \"save_as_new\": \"_saveasnew\" in request.POST,\n2245                 }\n2246             )\n2247         return formset_params\n2248 \n2249     def _create_formsets(self, request, obj, change):\n2250         \"Helper function to generate formsets for add/change_view.\"\n2251         formsets = []\n2252         inline_instances = []\n2253         prefixes = {}\n2254         get_formsets_args = [request]\n2255         if change:\n2256             get_formsets_args.append(obj)\n2257         for FormSet, inline in self.get_formsets_with_inlines(*get_formsets_args):\n2258             prefix = FormSet.get_default_prefix()\n2259             prefixes[prefix] = prefixes.get(prefix, 0) + 1\n2260             if prefixes[prefix] != 1 or not prefix:\n2261                 prefix = \"%s-%s\" % (prefix, prefixes[prefix])\n2262             formset_params = self.get_formset_kwargs(request, obj, inline, prefix)\n2263             formset = FormSet(**formset_params)\n2264 \n2265             def user_deleted_form(request, obj, formset, index, inline):\n2266                 \"\"\"Return whether or not the user deleted the form.\"\"\"\n2267                 return (\n2268                     inline.has_delete_permission(request, obj)\n2269                     and \"{}-{}-DELETE\".format(formset.prefix, index) in request.POST\n2270                 )\n2271 \n2272             # Bypass validation of each view-only inline form (since the form's\n2273             # data won't be in request.POST), unless the form was deleted.\n2274             if not inline.has_change_permission(request, obj if change else None):\n2275                 for index, form in enumerate(formset.initial_forms):\n2276                     if user_deleted_form(request, obj, formset, index, inline):\n2277                         continue\n2278                     form._errors = {}\n2279                     form.cleaned_data = form.initial\n2280             formsets.append(formset)\n2281             inline_instances.append(inline)\n2282         return formsets, inline_instances\n",
        "intended_behavior": "This class provides additional context to the issue."
    }
]