julia_code generates invalid Julia code
The [documentation for `julia_code`](https://docs.sympy.org/latest/modules/printing.html?highlight=julia_code#sympy.printing.julia.julia_code) shows a pretty simple example of generating Julia code:
```python
>>> julia_code(x**2*y*A**3)
'(x.^2.*y)*A^3'
```
Unfortunately, that snippet will produce an error if you actually try to use it in Julia:
```
syntax: invalid syntax "2.*"; add space(s) to clarify
```
The problem is an unfortunate ambiguity in Julia's syntax (which will not be changed).  The reason is that `2.` is one thing (the floating-point number 2), and `.*` is another thing (broadcasting — aka Hadamard — multiplication), and julia can't tell which one you mean, so it results in an error.

In this case, the correct code needs at least one extra space, between the `2` and the `.*`:
```julia
(x.^2 .*y)*A^3
```
I don't know if it's worth looking for just this case of a literal integer followed by a `.`, but a simple and robust alternative would be to emit code that is *closer* to most code styles anyway, and just put spaces around binary operators by default, like this:
```julia
(x .^ 2 .* y) * A ^ 3
```
Of course, most code styles also make an exception for `^`, and suggest that no spaces need to be used — but leave the door open for using them.  But here, it's much safer to include them, in case you have an expression like `2.^x`, which would result in a similar error.
