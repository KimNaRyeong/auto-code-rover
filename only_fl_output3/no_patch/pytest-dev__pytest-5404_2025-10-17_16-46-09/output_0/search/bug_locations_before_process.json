[
    {
        "file": "src/_pytest/doctest.py",
        "class": "",
        "method": "_patch_unwrap_mock_aware",
        "intended_behavior": "The `_patch_unwrap_mock_aware` function is intended to patch the `inspect.unwrap` function to prevent infinite recursion on mock objects by providing a custom stop condition that recognizes mocks. The function tries to handle unwrapping in a way that does not trip on mock objects, which Python\u2019s standard `inspect.unwrap` might not handle correctly, causing unexpected behavior or errors. To resolve the issue, the intended behavior should include additional logic to gracefully handle cases where an object does not have the `__wrapped__` attribute, explicitly checking for the existence of this attribute before attempting to access or manipulate it. This addition ensures that the patch remains compatible with all objects, whether they are mocks, wrapped functions, or have other custom behaviors not originally anticipated. This would prevent the `KeyError: '__wrapped__'` observed when running under tox or pytest by ensuring the custom unwrap logic only applies to objects it was designed to handle, thus preserving the existing functionality while enhancing reliability."
    }
]