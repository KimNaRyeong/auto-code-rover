[
    {
        "rel_file_path": "django/contrib/auth/migrations/0011_update_proxy_permissions.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.1/django/contrib/auth/migrations/0011_update_proxy_permissions.py",
        "start": 18,
        "end": 50,
        "class_name": null,
        "method_name": "update_proxy_model_permissions",
        "code": "18 def update_proxy_model_permissions(apps, schema_editor, reverse=False):\n19     \"\"\"\n20     Update the content_type of proxy model permissions to use the ContentType\n21     of the proxy model.\n22     \"\"\"\n23     style = color_style()\n24     Permission = apps.get_model('auth', 'Permission')\n25     ContentType = apps.get_model('contenttypes', 'ContentType')\n26     for Model in apps.get_models():\n27         opts = Model._meta\n28         if not opts.proxy:\n29             continue\n30         proxy_default_permissions_codenames = [\n31             '%s_%s' % (action, opts.model_name)\n32             for action in opts.default_permissions\n33         ]\n34         permissions_query = Q(codename__in=proxy_default_permissions_codenames)\n35         for codename, name in opts.permissions:\n36             permissions_query = permissions_query | Q(codename=codename, name=name)\n37         concrete_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=True)\n38         proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)\n39         old_content_type = proxy_content_type if reverse else concrete_content_type\n40         new_content_type = concrete_content_type if reverse else proxy_content_type\n41         try:\n42             with transaction.atomic():\n43                 Permission.objects.filter(\n44                     permissions_query,\n45                     content_type=old_content_type,\n46                 ).update(content_type=new_content_type)\n47         except IntegrityError:\n48             old = '{}_{}'.format(old_content_type.app_label, old_content_type.model)\n49             new = '{}_{}'.format(new_content_type.app_label, new_content_type.model)\n50             sys.stdout.write(style.WARNING(WARNING.format(old=old, new=new, query=permissions_query)))\n",
        "intended_behavior": "This function should ensure that it operates within the context of the correct database when Django is configured with multiple databases, and possibly no default database set explicitly. The update operation wrapped within the `transaction.atomic()` should explicitly specify the database to use based on Django\u2019s database routing or migration's target database settings, rather than defaulting implicitly. This would prevent the `ImproperlyConfigured` exception from being raised due to the absence of a default database or misconfiguration. To preserve existing functionality while resolving the issue, the function could be modified to:\n\n- Determine the appropriate database for executing the migration script, either from the `using` argument passed to migration operations or by consulting the application's database routing configuration.\n- Apply this database selection when calling `transaction.atomic(using=<appropriate_database_alias>)` and when querying or modifying `Permission` objects, ensuring that all database operations are routed to the intended database.\n\nThis approach will maintain the integrity and intention of the migration while making it compatible with environments where the default database is not set, thus adhering to Django\u2019s documentation and support for multiple databases without requiring a default."
    }
]