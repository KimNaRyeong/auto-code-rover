[
    {
        "rel_file_path": "django/db/models/functions/text.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__5.0/django/db/models/functions/text.py",
        "start": 42,
        "end": 64,
        "class_name": "Chr",
        "method_name": null,
        "code": "42 class Chr(Transform):\n43     function = \"CHR\"\n44     lookup_name = \"chr\"\n45 \n46     def as_mysql(self, compiler, connection, **extra_context):\n47         return super().as_sql(\n48             compiler,\n49             connection,\n50             function=\"CHAR\",\n51             template=\"%(function)s(%(expressions)s USING utf16)\",\n52             **extra_context,\n53         )\n54 \n55     def as_oracle(self, compiler, connection, **extra_context):\n56         return super().as_sql(\n57             compiler,\n58             connection,\n59             template=\"%(function)s(%(expressions)s USING NCHAR_CS)\",\n60             **extra_context,\n61         )\n62 \n63     def as_sqlite(self, compiler, connection, **extra_context):\n64         return super().as_sql(compiler, connection, function=\"CHAR\", **extra_context)\n",
        "intended_behavior": "The `Chr` class should be capable of handling character input directly or ensuring it correctly interprets and converts provided values into the appropriate database expression. To resolve the issue, the class needs to be either adjusted or extended to set its `output_field` explicitly to `CharField()` when initialized or when preparing the value. This change would enable it to handle string literals without attempting to convert them to integers, thus preserving its functionality while preventing the `ValueError`."
    }
]