[
    {
        "rel_file_path": "django/template/backends/django.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/template/backends/django.py",
        "start": 14,
        "end": 45,
        "class_name": "DjangoTemplates",
        "method_name": null,
        "code": "14 class DjangoTemplates(BaseEngine):\n15 \n16     app_dirname = 'templates'\n17 \n18     def __init__(self, params):\n19         params = params.copy()\n20         options = params.pop('OPTIONS').copy()\n21         options.setdefault('autoescape', True)\n22         options.setdefault('debug', settings.DEBUG)\n23         options.setdefault('file_charset', 'utf-8')\n24         libraries = options.get('libraries', {})\n25         options['libraries'] = self.get_templatetag_libraries(libraries)\n26         super().__init__(params)\n27         self.engine = Engine(self.dirs, self.app_dirs, **options)\n28 \n29     def from_string(self, template_code):\n30         return Template(self.engine.from_string(template_code), self)\n31 \n32     def get_template(self, template_name):\n33         try:\n34             return Template(self.engine.get_template(template_name), self)\n35         except TemplateDoesNotExist as exc:\n36             reraise(exc, self)\n37 \n38     def get_templatetag_libraries(self, custom_libraries):\n39         \"\"\"\n40         Return a collation of template tag libraries from installed\n41         applications and the supplied custom_libraries argument.\n42         \"\"\"\n43         libraries = get_installed_libraries()\n44         libraries.update(custom_libraries)\n45         return libraries\n",
        "intended_behavior": "This location should include logic to check if the 'autoreload' option is enabled in the template settings (perhaps under 'OPTIONS'). If `autoreload` is `True`, the class should ensure templates are reloaded on change without needing to restart the server. This might involve checking template modification times before serving a cached version, or integrating with Django's existing autoreload mechanism, ensuring caching does not interfere with development changes. The existing functionality for template loading and rendering must be preserved, with the caching feature augmenting rather than replacing current capabilities."
    },
    {
        "rel_file_path": "django/conf/global_settings.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/conf/global_settings.py",
        "start": 1,
        "end": 651,
        "class_name": null,
        "method_name": null,
        "code": "1 \"\"\"\n2 Default Django settings. Override these with settings in the module pointed to\n3 by the DJANGO_SETTINGS_MODULE environment variable.\n4 \"\"\"\n5 \n6 \n7 # This is defined here as a do-nothing function because we can't import\n8 # django.utils.translation -- that module depends on the settings.\n9 def gettext_noop(s):\n10     return s\n11 \n12 \n13 ####################\n14 # CORE             #\n15 ####################\n16 \n17 DEBUG = False\n18 \n19 # Whether the framework should propagate raw exceptions rather than catching\n20 # them. This is useful under some testing situations and should never be used\n21 # on a live site.\n22 DEBUG_PROPAGATE_EXCEPTIONS = False\n23 \n24 # People who get code error notifications.\n25 # In the format [('Full Name', 'email@example.com'), ('Full Name', 'anotheremail@example.com')]\n26 ADMINS = []\n27 \n28 # List of IP addresses, as strings, that:\n29 #   * See debug comments, when DEBUG is true\n30 #   * Receive x-headers\n31 INTERNAL_IPS = []\n32 \n33 # Hosts/domain names that are valid for this site.\n34 # \"*\" matches anything, \".example.com\" matches example.com and all subdomains\n35 ALLOWED_HOSTS = []\n36 \n37 # Local time zone for this installation. All choices can be found here:\n38 # https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all\n39 # systems may support all possibilities). When USE_TZ is True, this is\n40 # interpreted as the default user time zone.\n41 TIME_ZONE = 'America/Chicago'\n42 \n43 # If you set this to True, Django will use timezone-aware datetimes.\n44 USE_TZ = False\n45 \n46 # Language code for this installation. All choices can be found here:\n47 # http://www.i18nguy.com/unicode/language-identifiers.html\n48 LANGUAGE_CODE = 'en-us'\n49 \n50 # Languages we provide translations for, out of the box.\n51 LANGUAGES = [\n52     ('af', gettext_noop('Afrikaans')),\n53     ('ar', gettext_noop('Arabic')),\n54     ('ar-dz', gettext_noop('Algerian Arabic')),\n55     ('ast', gettext_noop('Asturian')),\n56     ('az', gettext_noop('Azerbaijani')),\n57     ('bg', gettext_noop('Bulgarian')),\n58     ('be', gettext_noop('Belarusian')),\n59     ('bn', gettext_noop('Bengali')),\n60     ('br', gettext_noop('Breton')),\n61     ('bs', gettext_noop('Bosnian')),\n62     ('ca', gettext_noop('Catalan')),\n63     ('cs', gettext_noop('Czech')),\n64     ('cy', gettext_noop('Welsh')),\n65     ('da', gettext_noop('Danish')),\n66     ('de', gettext_noop('German')),\n67     ('dsb', gettext_noop('Lower Sorbian')),\n68     ('el', gettext_noop('Greek')),\n69     ('en', gettext_noop('English')),\n70     ('en-au', gettext_noop('Australian English')),\n71     ('en-gb', gettext_noop('British English')),\n72     ('eo', gettext_noop('Esperanto')),\n73     ('es', gettext_noop('Spanish')),\n74     ('es-ar', gettext_noop('Argentinian Spanish')),\n75     ('es-co', gettext_noop('Colombian Spanish')),\n76     ('es-mx', gettext_noop('Mexican Spanish')),\n77     ('es-ni', gettext_noop('Nicaraguan Spanish')),\n78     ('es-ve', gettext_noop('Venezuelan Spanish')),\n79     ('et', gettext_noop('Estonian')),\n80     ('eu', gettext_noop('Basque')),\n81     ('fa', gettext_noop('Persian')),\n82     ('fi', gettext_noop('Finnish')),\n83     ('fr', gettext_noop('French')),\n84     ('fy', gettext_noop('Frisian')),\n85     ('ga', gettext_noop('Irish')),\n86     ('gd', gettext_noop('Scottish Gaelic')),\n87     ('gl', gettext_noop('Galician')),\n88     ('he', gettext_noop('Hebrew')),\n89     ('hi', gettext_noop('Hindi')),\n90     ('hr', gettext_noop('Croatian')),\n91     ('hsb', gettext_noop('Upper Sorbian')),\n92     ('hu', gettext_noop('Hungarian')),\n93     ('hy', gettext_noop('Armenian')),\n94     ('ia', gettext_noop('Interlingua')),\n95     ('id', gettext_noop('Indonesian')),\n96     ('ig', gettext_noop('Igbo')),\n97     ('io', gettext_noop('Ido')),\n98     ('is', gettext_noop('Icelandic')),\n99     ('it', gettext_noop('Italian')),\n100     ('ja', gettext_noop('Japanese')),\n101     ('ka', gettext_noop('Georgian')),\n102     ('kab', gettext_noop('Kabyle')),\n103     ('kk', gettext_noop('Kazakh')),\n104     ('km', gettext_noop('Khmer')),\n105     ('kn', gettext_noop('Kannada')),\n106     ('ko', gettext_noop('Korean')),\n107     ('ky', gettext_noop('Kyrgyz')),\n108     ('lb', gettext_noop('Luxembourgish')),\n109     ('lt', gettext_noop('Lithuanian')),\n110     ('lv', gettext_noop('Latvian')),\n111     ('mk', gettext_noop('Macedonian')),\n112     ('ml', gettext_noop('Malayalam')),\n113     ('mn', gettext_noop('Mongolian')),\n114     ('mr', gettext_noop('Marathi')),\n115     ('my', gettext_noop('Burmese')),\n116     ('nb', gettext_noop('Norwegian Bokm\u00e5l')),\n117     ('ne', gettext_noop('Nepali')),\n118     ('nl', gettext_noop('Dutch')),\n119     ('nn', gettext_noop('Norwegian Nynorsk')),\n120     ('os', gettext_noop('Ossetic')),\n121     ('pa', gettext_noop('Punjabi')),\n122     ('pl', gettext_noop('Polish')),\n123     ('pt', gettext_noop('Portuguese')),\n124     ('pt-br', gettext_noop('Brazilian Portuguese')),\n125     ('ro', gettext_noop('Romanian')),\n126     ('ru', gettext_noop('Russian')),\n127     ('sk', gettext_noop('Slovak')),\n128     ('sl', gettext_noop('Slovenian')),\n129     ('sq', gettext_noop('Albanian')),\n130     ('sr', gettext_noop('Serbian')),\n131     ('sr-latn', gettext_noop('Serbian Latin')),\n132     ('sv', gettext_noop('Swedish')),\n133     ('sw', gettext_noop('Swahili')),\n134     ('ta', gettext_noop('Tamil')),\n135     ('te', gettext_noop('Telugu')),\n136     ('tg', gettext_noop('Tajik')),\n137     ('th', gettext_noop('Thai')),\n138     ('tk', gettext_noop('Turkmen')),\n139     ('tr', gettext_noop('Turkish')),\n140     ('tt', gettext_noop('Tatar')),\n141     ('udm', gettext_noop('Udmurt')),\n142     ('uk', gettext_noop('Ukrainian')),\n143     ('ur', gettext_noop('Urdu')),\n144     ('uz', gettext_noop('Uzbek')),\n145     ('vi', gettext_noop('Vietnamese')),\n146     ('zh-hans', gettext_noop('Simplified Chinese')),\n147     ('zh-hant', gettext_noop('Traditional Chinese')),\n148 ]\n149 \n150 # Languages using BiDi (right-to-left) layout\n151 LANGUAGES_BIDI = [\"he\", \"ar\", \"ar-dz\", \"fa\", \"ur\"]\n152 \n153 # If you set this to False, Django will make some optimizations so as not\n154 # to load the internationalization machinery.\n155 USE_I18N = True\n156 LOCALE_PATHS = []\n157 \n158 # Settings for language cookie\n159 LANGUAGE_COOKIE_NAME = 'django_language'\n160 LANGUAGE_COOKIE_AGE = None\n161 LANGUAGE_COOKIE_DOMAIN = None\n162 LANGUAGE_COOKIE_PATH = '/'\n163 LANGUAGE_COOKIE_SECURE = False\n164 LANGUAGE_COOKIE_HTTPONLY = False\n165 LANGUAGE_COOKIE_SAMESITE = None\n166 \n167 \n168 # If you set this to True, Django will format dates, numbers and calendars\n169 # according to user current locale.\n170 USE_L10N = False\n171 \n172 # Not-necessarily-technical managers of the site. They get broken link\n173 # notifications and other various emails.\n174 MANAGERS = ADMINS\n175 \n176 # Default charset to use for all HttpResponse objects, if a MIME type isn't\n177 # manually specified. It's used to construct the Content-Type header.\n178 DEFAULT_CHARSET = 'utf-8'\n179 \n180 # Email address that error messages come from.\n181 SERVER_EMAIL = 'root@localhost'\n182 \n183 # Database connection info. If left empty, will default to the dummy backend.\n184 DATABASES = {}\n185 \n186 # Classes used to implement DB routing behavior.\n187 DATABASE_ROUTERS = []\n188 \n189 # The email backend to use. For possible shortcuts see django.core.mail.\n190 # The default is to use the SMTP backend.\n191 # Third-party backends can be specified by providing a Python path\n192 # to a module that defines an EmailBackend class.\n193 EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n194 \n195 # Host for sending email.\n196 EMAIL_HOST = 'localhost'\n197 \n198 # Port for sending email.\n199 EMAIL_PORT = 25\n200 \n201 # Whether to send SMTP 'Date' header in the local time zone or in UTC.\n202 EMAIL_USE_LOCALTIME = False\n203 \n204 # Optional SMTP authentication information for EMAIL_HOST.\n205 EMAIL_HOST_USER = ''\n206 EMAIL_HOST_PASSWORD = ''\n207 EMAIL_USE_TLS = False\n208 EMAIL_USE_SSL = False\n209 EMAIL_SSL_CERTFILE = None\n210 EMAIL_SSL_KEYFILE = None\n211 EMAIL_TIMEOUT = None\n212 \n213 # List of strings representing installed apps.\n214 INSTALLED_APPS = []\n215 \n216 TEMPLATES = []\n217 \n218 # Default form rendering class.\n219 FORM_RENDERER = 'django.forms.renderers.DjangoTemplates'\n220 \n221 # Default email address to use for various automated correspondence from\n222 # the site managers.\n223 DEFAULT_FROM_EMAIL = 'webmaster@localhost'\n224 \n225 # Subject-line prefix for email messages send with django.core.mail.mail_admins\n226 # or ...mail_managers.  Make sure to include the trailing space.\n227 EMAIL_SUBJECT_PREFIX = '[Django] '\n228 \n229 # Whether to append trailing slashes to URLs.\n230 APPEND_SLASH = True\n231 \n232 # Whether to prepend the \"www.\" subdomain to URLs that don't have it.\n233 PREPEND_WWW = False\n234 \n235 # Override the server-derived value of SCRIPT_NAME\n236 FORCE_SCRIPT_NAME = None\n237 \n238 # List of compiled regular expression objects representing User-Agent strings\n239 # that are not allowed to visit any page, systemwide. Use this for bad\n240 # robots/crawlers. Here are a few examples:\n241 #     import re\n242 #     DISALLOWED_USER_AGENTS = [\n243 #         re.compile(r'^NaverBot.*'),\n244 #         re.compile(r'^EmailSiphon.*'),\n245 #         re.compile(r'^SiteSucker.*'),\n246 #         re.compile(r'^sohu-search'),\n247 #     ]\n248 DISALLOWED_USER_AGENTS = []\n249 \n250 ABSOLUTE_URL_OVERRIDES = {}\n251 \n252 # List of compiled regular expression objects representing URLs that need not\n253 # be reported by BrokenLinkEmailsMiddleware. Here are a few examples:\n254 #    import re\n255 #    IGNORABLE_404_URLS = [\n256 #        re.compile(r'^/apple-touch-icon.*\\.png$'),\n257 #        re.compile(r'^/favicon.ico$'),\n258 #        re.compile(r'^/robots.txt$'),\n259 #        re.compile(r'^/phpmyadmin/'),\n260 #        re.compile(r'\\.(cgi|php|pl)$'),\n261 #    ]\n262 IGNORABLE_404_URLS = []\n263 \n264 # A secret key for this particular Django installation. Used in secret-key\n265 # hashing algorithms. Set this in your settings, or Django will complain\n266 # loudly.\n267 SECRET_KEY = ''\n268 \n269 # Default file storage mechanism that holds media.\n270 DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\n271 \n272 # Absolute filesystem path to the directory that will hold user-uploaded files.\n273 # Example: \"/var/www/example.com/media/\"\n274 MEDIA_ROOT = ''\n275 \n276 # URL that handles the media served from MEDIA_ROOT.\n277 # Examples: \"http://example.com/media/\", \"http://media.example.com/\"\n278 MEDIA_URL = ''\n279 \n280 # Absolute path to the directory static files should be collected to.\n281 # Example: \"/var/www/example.com/static/\"\n282 STATIC_ROOT = None\n283 \n284 # URL that handles the static files served from STATIC_ROOT.\n285 # Example: \"http://example.com/static/\", \"http://static.example.com/\"\n286 STATIC_URL = None\n287 \n288 # List of upload handler classes to be applied in order.\n289 FILE_UPLOAD_HANDLERS = [\n290     'django.core.files.uploadhandler.MemoryFileUploadHandler',\n291     'django.core.files.uploadhandler.TemporaryFileUploadHandler',\n292 ]\n293 \n294 # Maximum size, in bytes, of a request before it will be streamed to the\n295 # file system instead of into memory.\n296 FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n297 \n298 # Maximum size in bytes of request data (excluding file uploads) that will be\n299 # read before a SuspiciousOperation (RequestDataTooBig) is raised.\n300 DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n301 \n302 # Maximum number of GET/POST parameters that will be read before a\n303 # SuspiciousOperation (TooManyFieldsSent) is raised.\n304 DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n305 \n306 # Directory in which upload streamed files will be temporarily saved. A value of\n307 # `None` will make Django use the operating system's default temporary directory\n308 # (i.e. \"/tmp\" on *nix systems).\n309 FILE_UPLOAD_TEMP_DIR = None\n310 \n311 # The numeric mode to set newly-uploaded files to. The value should be a mode\n312 # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n313 FILE_UPLOAD_PERMISSIONS = 0o644\n314 \n315 # The numeric mode to assign to newly-created directories, when uploading files.\n316 # The value should be a mode as you'd pass to os.chmod;\n317 # see https://docs.python.org/library/os.html#files-and-directories.\n318 FILE_UPLOAD_DIRECTORY_PERMISSIONS = None\n319 \n320 # Python module path where user will place custom format definition.\n321 # The directory where this setting is pointing should contain subdirectories\n322 # named as the locales, containing a formats.py file\n323 # (i.e. \"myproject.locale\" for myproject/locale/en/formats.py etc. use)\n324 FORMAT_MODULE_PATH = None\n325 \n326 # Default formatting for date objects. See all available format strings here:\n327 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n328 DATE_FORMAT = 'N j, Y'\n329 \n330 # Default formatting for datetime objects. See all available format strings here:\n331 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n332 DATETIME_FORMAT = 'N j, Y, P'\n333 \n334 # Default formatting for time objects. See all available format strings here:\n335 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n336 TIME_FORMAT = 'P'\n337 \n338 # Default formatting for date objects when only the year and month are relevant.\n339 # See all available format strings here:\n340 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n341 YEAR_MONTH_FORMAT = 'F Y'\n342 \n343 # Default formatting for date objects when only the month and day are relevant.\n344 # See all available format strings here:\n345 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n346 MONTH_DAY_FORMAT = 'F j'\n347 \n348 # Default short formatting for date objects. See all available format strings here:\n349 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n350 SHORT_DATE_FORMAT = 'm/d/Y'\n351 \n352 # Default short formatting for datetime objects.\n353 # See all available format strings here:\n354 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n355 SHORT_DATETIME_FORMAT = 'm/d/Y P'\n356 \n357 # Default formats to be used when parsing dates from input boxes, in order\n358 # See all available format string here:\n359 # https://docs.python.org/library/datetime.html#strftime-behavior\n360 # * Note that these format strings are different from the ones to display dates\n361 DATE_INPUT_FORMATS = [\n362     '%Y-%m-%d', '%m/%d/%Y', '%m/%d/%y',  # '2006-10-25', '10/25/2006', '10/25/06'\n363     '%b %d %Y', '%b %d, %Y',             # 'Oct 25 2006', 'Oct 25, 2006'\n364     '%d %b %Y', '%d %b, %Y',             # '25 Oct 2006', '25 Oct, 2006'\n365     '%B %d %Y', '%B %d, %Y',             # 'October 25 2006', 'October 25, 2006'\n366     '%d %B %Y', '%d %B, %Y',             # '25 October 2006', '25 October, 2006'\n367 ]\n368 \n369 # Default formats to be used when parsing times from input boxes, in order\n370 # See all available format string here:\n371 # https://docs.python.org/library/datetime.html#strftime-behavior\n372 # * Note that these format strings are different from the ones to display dates\n373 TIME_INPUT_FORMATS = [\n374     '%H:%M:%S',     # '14:30:59'\n375     '%H:%M:%S.%f',  # '14:30:59.000200'\n376     '%H:%M',        # '14:30'\n377 ]\n378 \n379 # Default formats to be used when parsing dates and times from input boxes,\n380 # in order\n381 # See all available format string here:\n382 # https://docs.python.org/library/datetime.html#strftime-behavior\n383 # * Note that these format strings are different from the ones to display dates\n384 DATETIME_INPUT_FORMATS = [\n385     '%Y-%m-%d %H:%M:%S',     # '2006-10-25 14:30:59'\n386     '%Y-%m-%d %H:%M:%S.%f',  # '2006-10-25 14:30:59.000200'\n387     '%Y-%m-%d %H:%M',        # '2006-10-25 14:30'\n388     '%m/%d/%Y %H:%M:%S',     # '10/25/2006 14:30:59'\n389     '%m/%d/%Y %H:%M:%S.%f',  # '10/25/2006 14:30:59.000200'\n390     '%m/%d/%Y %H:%M',        # '10/25/2006 14:30'\n391     '%m/%d/%y %H:%M:%S',     # '10/25/06 14:30:59'\n392     '%m/%d/%y %H:%M:%S.%f',  # '10/25/06 14:30:59.000200'\n393     '%m/%d/%y %H:%M',        # '10/25/06 14:30'\n394 ]\n395 \n396 # First day of week, to be used on calendars\n397 # 0 means Sunday, 1 means Monday...\n398 FIRST_DAY_OF_WEEK = 0\n399 \n400 # Decimal separator symbol\n401 DECIMAL_SEPARATOR = '.'\n402 \n403 # Boolean that sets whether to add thousand separator when formatting numbers\n404 USE_THOUSAND_SEPARATOR = False\n405 \n406 # Number of digits that will be together, when splitting them by\n407 # THOUSAND_SEPARATOR. 0 means no grouping, 3 means splitting by thousands...\n408 NUMBER_GROUPING = 0\n409 \n410 # Thousand separator symbol\n411 THOUSAND_SEPARATOR = ','\n412 \n413 # The tablespaces to use for each model when not specified otherwise.\n414 DEFAULT_TABLESPACE = ''\n415 DEFAULT_INDEX_TABLESPACE = ''\n416 \n417 # Default X-Frame-Options header value\n418 X_FRAME_OPTIONS = 'DENY'\n419 \n420 USE_X_FORWARDED_HOST = False\n421 USE_X_FORWARDED_PORT = False\n422 \n423 # The Python dotted path to the WSGI application that Django's internal server\n424 # (runserver) will use. If `None`, the return value of\n425 # 'django.core.wsgi.get_wsgi_application' is used, thus preserving the same\n426 # behavior as previous versions of Django. Otherwise this should point to an\n427 # actual WSGI application object.\n428 WSGI_APPLICATION = None\n429 \n430 # If your Django app is behind a proxy that sets a header to specify secure\n431 # connections, AND that proxy ensures that user-submitted headers with the\n432 # same name are ignored (so that people can't spoof it), set this value to\n433 # a tuple of (header_name, header_value). For any requests that come in with\n434 # that header/value, request.is_secure() will return True.\n435 # WARNING! Only set this if you fully understand what you're doing. Otherwise,\n436 # you may be opening yourself up to a security risk.\n437 SECURE_PROXY_SSL_HEADER = None\n438 \n439 # Default hashing algorithm to use for encoding cookies, password reset tokens\n440 # in the admin site, user sessions, and signatures. It's a transitional setting\n441 # helpful in migrating multiple instance of the same project to Django 3.1+.\n442 # Algorithm must be 'sha1' or 'sha256'.\n443 DEFAULT_HASHING_ALGORITHM = 'sha256'\n444 \n445 ##############\n446 # MIDDLEWARE #\n447 ##############\n448 \n449 # List of middleware to use. Order is important; in the request phase, these\n450 # middleware will be applied in the order given, and in the response\n451 # phase the middleware will be applied in reverse order.\n452 MIDDLEWARE = []\n453 \n454 ############\n455 # SESSIONS #\n456 ############\n457 \n458 # Cache to store session data if using the cache session backend.\n459 SESSION_CACHE_ALIAS = 'default'\n460 # Cookie name. This can be whatever you want.\n461 SESSION_COOKIE_NAME = 'sessionid'\n462 # Age of cookie, in seconds (default: 2 weeks).\n463 SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2\n464 # A string like \"example.com\", or None for standard domain cookie.\n465 SESSION_COOKIE_DOMAIN = None\n466 # Whether the session cookie should be secure (https:// only).\n467 SESSION_COOKIE_SECURE = False\n468 # The path of the session cookie.\n469 SESSION_COOKIE_PATH = '/'\n470 # Whether to use the HttpOnly flag.\n471 SESSION_COOKIE_HTTPONLY = True\n472 # Whether to set the flag restricting cookie leaks on cross-site requests.\n473 # This can be 'Lax', 'Strict', 'None', or False to disable the flag.\n474 SESSION_COOKIE_SAMESITE = 'Lax'\n475 # Whether to save the session data on every request.\n476 SESSION_SAVE_EVERY_REQUEST = False\n477 # Whether a user's session cookie expires when the Web browser is closed.\n478 SESSION_EXPIRE_AT_BROWSER_CLOSE = False\n479 # The module to store session data\n480 SESSION_ENGINE = 'django.contrib.sessions.backends.db'\n481 # Directory to store session files if using the file session module. If None,\n482 # the backend will use a sensible default.\n483 SESSION_FILE_PATH = None\n484 # class to serialize session data\n485 SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'\n486 \n487 #########\n488 # CACHE #\n489 #########\n490 \n491 # The cache backends to use.\n492 CACHES = {\n493     'default': {\n494         'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n495     }\n496 }\n497 CACHE_MIDDLEWARE_KEY_PREFIX = ''\n498 CACHE_MIDDLEWARE_SECONDS = 600\n499 CACHE_MIDDLEWARE_ALIAS = 'default'\n500 \n501 ##################\n502 # AUTHENTICATION #\n503 ##################\n504 \n505 AUTH_USER_MODEL = 'auth.User'\n506 \n507 AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend']\n508 \n509 LOGIN_URL = '/accounts/login/'\n510 \n511 LOGIN_REDIRECT_URL = '/accounts/profile/'\n512 \n513 LOGOUT_REDIRECT_URL = None\n514 \n515 # The number of days a password reset link is valid for\n516 PASSWORD_RESET_TIMEOUT_DAYS = 3\n517 \n518 # The number of seconds a password reset link is valid for (default: 3 days).\n519 PASSWORD_RESET_TIMEOUT = 60 * 60 * 24 * 3\n520 \n521 # the first hasher in this list is the preferred algorithm.  any\n522 # password using different algorithms will be converted automatically\n523 # upon login\n524 PASSWORD_HASHERS = [\n525     'django.contrib.auth.hashers.PBKDF2PasswordHasher',\n526     'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',\n527     'django.contrib.auth.hashers.Argon2PasswordHasher',\n528     'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',\n529 ]\n530 \n531 AUTH_PASSWORD_VALIDATORS = []\n532 \n533 ###########\n534 # SIGNING #\n535 ###########\n536 \n537 SIGNING_BACKEND = 'django.core.signing.TimestampSigner'\n538 \n539 ########\n540 # CSRF #\n541 ########\n542 \n543 # Dotted path to callable to be used as view when a request is\n544 # rejected by the CSRF middleware.\n545 CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'\n546 \n547 # Settings for CSRF cookie.\n548 CSRF_COOKIE_NAME = 'csrftoken'\n549 CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52\n550 CSRF_COOKIE_DOMAIN = None\n551 CSRF_COOKIE_PATH = '/'\n552 CSRF_COOKIE_SECURE = False\n553 CSRF_COOKIE_HTTPONLY = False\n554 CSRF_COOKIE_SAMESITE = 'Lax'\n555 CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'\n556 CSRF_TRUSTED_ORIGINS = []\n557 CSRF_USE_SESSIONS = False\n558 \n559 ############\n560 # MESSAGES #\n561 ############\n562 \n563 # Class to use as messages backend\n564 MESSAGE_STORAGE = 'django.contrib.messages.storage.fallback.FallbackStorage'\n565 \n566 # Default values of MESSAGE_LEVEL and MESSAGE_TAGS are defined within\n567 # django.contrib.messages to avoid imports in this settings file.\n568 \n569 ###########\n570 # LOGGING #\n571 ###########\n572 \n573 # The callable to use to configure logging\n574 LOGGING_CONFIG = 'logging.config.dictConfig'\n575 \n576 # Custom logging configuration.\n577 LOGGING = {}\n578 \n579 # Default exception reporter class used in case none has been\n580 # specifically assigned to the HttpRequest instance.\n581 DEFAULT_EXCEPTION_REPORTER = 'django.views.debug.ExceptionReporter'\n582 \n583 # Default exception reporter filter class used in case none has been\n584 # specifically assigned to the HttpRequest instance.\n585 DEFAULT_EXCEPTION_REPORTER_FILTER = 'django.views.debug.SafeExceptionReporterFilter'\n586 \n587 ###########\n588 # TESTING #\n589 ###########\n590 \n591 # The name of the class to use to run the test suite\n592 TEST_RUNNER = 'django.test.runner.DiscoverRunner'\n593 \n594 # Apps that don't need to be serialized at test database creation time\n595 # (only apps with migrations are to start with)\n596 TEST_NON_SERIALIZED_APPS = []\n597 \n598 ############\n599 # FIXTURES #\n600 ############\n601 \n602 # The list of directories to search for fixtures\n603 FIXTURE_DIRS = []\n604 \n605 ###############\n606 # STATICFILES #\n607 ###############\n608 \n609 # A list of locations of additional static files\n610 STATICFILES_DIRS = []\n611 \n612 # The default file storage backend used during the build process\n613 STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'\n614 \n615 # List of finder classes that know how to find static files in\n616 # various locations.\n617 STATICFILES_FINDERS = [\n618     'django.contrib.staticfiles.finders.FileSystemFinder',\n619     'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n620     # 'django.contrib.staticfiles.finders.DefaultStorageFinder',\n621 ]\n622 \n623 ##############\n624 # MIGRATIONS #\n625 ##############\n626 \n627 # Migration module overrides for apps, by app label.\n628 MIGRATION_MODULES = {}\n629 \n630 #################\n631 # SYSTEM CHECKS #\n632 #################\n633 \n634 # List of all issues generated by system checks that should be silenced. Light\n635 # issues like warnings, infos or debugs will not generate a message. Silencing\n636 # serious issues like errors and criticals does not result in hiding the\n637 # message, but Django will not stop you from e.g. running server.\n638 SILENCED_SYSTEM_CHECKS = []\n639 \n640 #######################\n641 # SECURITY MIDDLEWARE #\n642 #######################\n643 SECURE_BROWSER_XSS_FILTER = False\n644 SECURE_CONTENT_TYPE_NOSNIFF = True\n645 SECURE_HSTS_INCLUDE_SUBDOMAINS = False\n646 SECURE_HSTS_PRELOAD = False\n647 SECURE_HSTS_SECONDS = 0\n648 SECURE_REDIRECT_EXEMPT = []\n649 SECURE_REFERRER_POLICY = 'same-origin'\n650 SECURE_SSL_HOST = None\n651 SECURE_SSL_REDIRECT = False\n",
        "intended_behavior": "Ensure the documentation or template settings comments reflect the ability to configure 'autoreload' for cached templates. This may not involve changing the code per se but ensuring that developers are aware of how to use the new feature within their `TEMPLATES` setting."
    }
]