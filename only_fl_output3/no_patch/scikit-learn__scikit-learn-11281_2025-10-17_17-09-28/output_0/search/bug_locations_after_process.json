[
    {
        "rel_file_path": "sklearn/mixture/base.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/scikit-learn__scikit-learn/setup_scikit-learn__scikit-learn__0.20/sklearn/mixture/base.py",
        "start": 67,
        "end": 503,
        "class_name": "BaseMixture",
        "method_name": null,
        "code": "67 class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n68     \"\"\"Base class for mixture models.\n69 \n70     This abstract class specifies an interface for all mixture classes and\n71     provides basic common methods for mixture models.\n72     \"\"\"\n73 \n74     def __init__(self, n_components, tol, reg_covar,\n75                  max_iter, n_init, init_params, random_state, warm_start,\n76                  verbose, verbose_interval):\n77         self.n_components = n_components\n78         self.tol = tol\n79         self.reg_covar = reg_covar\n80         self.max_iter = max_iter\n81         self.n_init = n_init\n82         self.init_params = init_params\n83         self.random_state = random_state\n84         self.warm_start = warm_start\n85         self.verbose = verbose\n86         self.verbose_interval = verbose_interval\n87 \n88     def _check_initial_parameters(self, X):\n89         \"\"\"Check values of the basic parameters.\n90 \n91         Parameters\n92         ----------\n93         X : array-like, shape (n_samples, n_features)\n94         \"\"\"\n95         if self.n_components < 1:\n96             raise ValueError(\"Invalid value for 'n_components': %d \"\n97                              \"Estimation requires at least one component\"\n98                              % self.n_components)\n99 \n100         if self.tol < 0.:\n101             raise ValueError(\"Invalid value for 'tol': %.5f \"\n102                              \"Tolerance used by the EM must be non-negative\"\n103                              % self.tol)\n104 \n105         if self.n_init < 1:\n106             raise ValueError(\"Invalid value for 'n_init': %d \"\n107                              \"Estimation requires at least one run\"\n108                              % self.n_init)\n109 \n110         if self.max_iter < 1:\n111             raise ValueError(\"Invalid value for 'max_iter': %d \"\n112                              \"Estimation requires at least one iteration\"\n113                              % self.max_iter)\n114 \n115         if self.reg_covar < 0.:\n116             raise ValueError(\"Invalid value for 'reg_covar': %.5f \"\n117                              \"regularization on covariance must be \"\n118                              \"non-negative\"\n119                              % self.reg_covar)\n120 \n121         # Check all the parameters values of the derived class\n122         self._check_parameters(X)\n123 \n124     @abstractmethod\n125     def _check_parameters(self, X):\n126         \"\"\"Check initial parameters of the derived class.\n127 \n128         Parameters\n129         ----------\n130         X : array-like, shape  (n_samples, n_features)\n131         \"\"\"\n132         pass\n133 \n134     def _initialize_parameters(self, X, random_state):\n135         \"\"\"Initialize the model parameters.\n136 \n137         Parameters\n138         ----------\n139         X : array-like, shape  (n_samples, n_features)\n140 \n141         random_state : RandomState\n142             A random number generator instance.\n143         \"\"\"\n144         n_samples, _ = X.shape\n145 \n146         if self.init_params == 'kmeans':\n147             resp = np.zeros((n_samples, self.n_components))\n148             label = cluster.KMeans(n_clusters=self.n_components, n_init=1,\n149                                    random_state=random_state).fit(X).labels_\n150             resp[np.arange(n_samples), label] = 1\n151         elif self.init_params == 'random':\n152             resp = random_state.rand(n_samples, self.n_components)\n153             resp /= resp.sum(axis=1)[:, np.newaxis]\n154         else:\n155             raise ValueError(\"Unimplemented initialization method '%s'\"\n156                              % self.init_params)\n157 \n158         self._initialize(X, resp)\n159 \n160     @abstractmethod\n161     def _initialize(self, X, resp):\n162         \"\"\"Initialize the model parameters of the derived class.\n163 \n164         Parameters\n165         ----------\n166         X : array-like, shape  (n_samples, n_features)\n167 \n168         resp : array-like, shape (n_samples, n_components)\n169         \"\"\"\n170         pass\n171 \n172     def fit(self, X, y=None):\n173         \"\"\"Estimate model parameters with the EM algorithm.\n174 \n175         The method fit the model `n_init` times and set the parameters with\n176         which the model has the largest likelihood or lower bound. Within each\n177         trial, the method iterates between E-step and M-step for `max_iter`\n178         times until the change of likelihood or lower bound is less than\n179         `tol`, otherwise, a `ConvergenceWarning` is raised.\n180 \n181         Parameters\n182         ----------\n183         X : array-like, shape (n_samples, n_features)\n184             List of n_features-dimensional data points. Each row\n185             corresponds to a single data point.\n186 \n187         Returns\n188         -------\n189         self\n190         \"\"\"\n191         X = _check_X(X, self.n_components, ensure_min_samples=2)\n192         self._check_initial_parameters(X)\n193 \n194         # if we enable warm_start, we will have a unique initialisation\n195         do_init = not(self.warm_start and hasattr(self, 'converged_'))\n196         n_init = self.n_init if do_init else 1\n197 \n198         max_lower_bound = -np.infty\n199         self.converged_ = False\n200 \n201         random_state = check_random_state(self.random_state)\n202 \n203         n_samples, _ = X.shape\n204         for init in range(n_init):\n205             self._print_verbose_msg_init_beg(init)\n206 \n207             if do_init:\n208                 self._initialize_parameters(X, random_state)\n209                 self.lower_bound_ = -np.infty\n210 \n211             for n_iter in range(1, self.max_iter + 1):\n212                 prev_lower_bound = self.lower_bound_\n213 \n214                 log_prob_norm, log_resp = self._e_step(X)\n215                 self._m_step(X, log_resp)\n216                 self.lower_bound_ = self._compute_lower_bound(\n217                     log_resp, log_prob_norm)\n218 \n219                 change = self.lower_bound_ - prev_lower_bound\n220                 self._print_verbose_msg_iter_end(n_iter, change)\n221 \n222                 if abs(change) < self.tol:\n223                     self.converged_ = True\n224                     break\n225 \n226             self._print_verbose_msg_init_end(self.lower_bound_)\n227 \n228             if self.lower_bound_ > max_lower_bound:\n229                 max_lower_bound = self.lower_bound_\n230                 best_params = self._get_parameters()\n231                 best_n_iter = n_iter\n232 \n233         if not self.converged_:\n234             warnings.warn('Initialization %d did not converge. '\n235                           'Try different init parameters, '\n236                           'or increase max_iter, tol '\n237                           'or check for degenerate data.'\n238                           % (init + 1), ConvergenceWarning)\n239 \n240         self._set_parameters(best_params)\n241         self.n_iter_ = best_n_iter\n242 \n243         return self\n244 \n245     def _e_step(self, X):\n246         \"\"\"E step.\n247 \n248         Parameters\n249         ----------\n250         X : array-like, shape (n_samples, n_features)\n251 \n252         Returns\n253         -------\n254         log_prob_norm : float\n255             Mean of the logarithms of the probabilities of each sample in X\n256 \n257         log_responsibility : array, shape (n_samples, n_components)\n258             Logarithm of the posterior probabilities (or responsibilities) of\n259             the point of each sample in X.\n260         \"\"\"\n261         log_prob_norm, log_resp = self._estimate_log_prob_resp(X)\n262         return np.mean(log_prob_norm), log_resp\n263 \n264     @abstractmethod\n265     def _m_step(self, X, log_resp):\n266         \"\"\"M step.\n267 \n268         Parameters\n269         ----------\n270         X : array-like, shape (n_samples, n_features)\n271 \n272         log_resp : array-like, shape (n_samples, n_components)\n273             Logarithm of the posterior probabilities (or responsibilities) of\n274             the point of each sample in X.\n275         \"\"\"\n276         pass\n277 \n278     @abstractmethod\n279     def _check_is_fitted(self):\n280         pass\n281 \n282     @abstractmethod\n283     def _get_parameters(self):\n284         pass\n285 \n286     @abstractmethod\n287     def _set_parameters(self, params):\n288         pass\n289 \n290     def score_samples(self, X):\n291         \"\"\"Compute the weighted log probabilities for each sample.\n292 \n293         Parameters\n294         ----------\n295         X : array-like, shape (n_samples, n_features)\n296             List of n_features-dimensional data points. Each row\n297             corresponds to a single data point.\n298 \n299         Returns\n300         -------\n301         log_prob : array, shape (n_samples,)\n302             Log probabilities of each data point in X.\n303         \"\"\"\n304         self._check_is_fitted()\n305         X = _check_X(X, None, self.means_.shape[1])\n306 \n307         return logsumexp(self._estimate_weighted_log_prob(X), axis=1)\n308 \n309     def score(self, X, y=None):\n310         \"\"\"Compute the per-sample average log-likelihood of the given data X.\n311 \n312         Parameters\n313         ----------\n314         X : array-like, shape (n_samples, n_dimensions)\n315             List of n_features-dimensional data points. Each row\n316             corresponds to a single data point.\n317 \n318         Returns\n319         -------\n320         log_likelihood : float\n321             Log likelihood of the Gaussian mixture given X.\n322         \"\"\"\n323         return self.score_samples(X).mean()\n324 \n325     def predict(self, X):\n326         \"\"\"Predict the labels for the data samples in X using trained model.\n327 \n328         Parameters\n329         ----------\n330         X : array-like, shape (n_samples, n_features)\n331             List of n_features-dimensional data points. Each row\n332             corresponds to a single data point.\n333 \n334         Returns\n335         -------\n336         labels : array, shape (n_samples,)\n337             Component labels.\n338         \"\"\"\n339         self._check_is_fitted()\n340         X = _check_X(X, None, self.means_.shape[1])\n341         return self._estimate_weighted_log_prob(X).argmax(axis=1)\n342 \n343     def predict_proba(self, X):\n344         \"\"\"Predict posterior probability of each component given the data.\n345 \n346         Parameters\n347         ----------\n348         X : array-like, shape (n_samples, n_features)\n349             List of n_features-dimensional data points. Each row\n350             corresponds to a single data point.\n351 \n352         Returns\n353         -------\n354         resp : array, shape (n_samples, n_components)\n355             Returns the probability each Gaussian (state) in\n356             the model given each sample.\n357         \"\"\"\n358         self._check_is_fitted()\n359         X = _check_X(X, None, self.means_.shape[1])\n360         _, log_resp = self._estimate_log_prob_resp(X)\n361         return np.exp(log_resp)\n362 \n363     def sample(self, n_samples=1):\n364         \"\"\"Generate random samples from the fitted Gaussian distribution.\n365 \n366         Parameters\n367         ----------\n368         n_samples : int, optional\n369             Number of samples to generate. Defaults to 1.\n370 \n371         Returns\n372         -------\n373         X : array, shape (n_samples, n_features)\n374             Randomly generated sample\n375 \n376         y : array, shape (nsamples,)\n377             Component labels\n378 \n379         \"\"\"\n380         self._check_is_fitted()\n381 \n382         if n_samples < 1:\n383             raise ValueError(\n384                 \"Invalid value for 'n_samples': %d . The sampling requires at \"\n385                 \"least one sample.\" % (self.n_components))\n386 \n387         _, n_features = self.means_.shape\n388         rng = check_random_state(self.random_state)\n389         n_samples_comp = rng.multinomial(n_samples, self.weights_)\n390 \n391         if self.covariance_type == 'full':\n392             X = np.vstack([\n393                 rng.multivariate_normal(mean, covariance, int(sample))\n394                 for (mean, covariance, sample) in zip(\n395                     self.means_, self.covariances_, n_samples_comp)])\n396         elif self.covariance_type == \"tied\":\n397             X = np.vstack([\n398                 rng.multivariate_normal(mean, self.covariances_, int(sample))\n399                 for (mean, sample) in zip(\n400                     self.means_, n_samples_comp)])\n401         else:\n402             X = np.vstack([\n403                 mean + rng.randn(sample, n_features) * np.sqrt(covariance)\n404                 for (mean, covariance, sample) in zip(\n405                     self.means_, self.covariances_, n_samples_comp)])\n406 \n407         y = np.concatenate([j * np.ones(sample, dtype=int)\n408                            for j, sample in enumerate(n_samples_comp)])\n409 \n410         return (X, y)\n411 \n412     def _estimate_weighted_log_prob(self, X):\n413         \"\"\"Estimate the weighted log-probabilities, log P(X | Z) + log weights.\n414 \n415         Parameters\n416         ----------\n417         X : array-like, shape (n_samples, n_features)\n418 \n419         Returns\n420         -------\n421         weighted_log_prob : array, shape (n_samples, n_component)\n422         \"\"\"\n423         return self._estimate_log_prob(X) + self._estimate_log_weights()\n424 \n425     @abstractmethod\n426     def _estimate_log_weights(self):\n427         \"\"\"Estimate log-weights in EM algorithm, E[ log pi ] in VB algorithm.\n428 \n429         Returns\n430         -------\n431         log_weight : array, shape (n_components, )\n432         \"\"\"\n433         pass\n434 \n435     @abstractmethod\n436     def _estimate_log_prob(self, X):\n437         \"\"\"Estimate the log-probabilities log P(X | Z).\n438 \n439         Compute the log-probabilities per each component for each sample.\n440 \n441         Parameters\n442         ----------\n443         X : array-like, shape (n_samples, n_features)\n444 \n445         Returns\n446         -------\n447         log_prob : array, shape (n_samples, n_component)\n448         \"\"\"\n449         pass\n450 \n451     def _estimate_log_prob_resp(self, X):\n452         \"\"\"Estimate log probabilities and responsibilities for each sample.\n453 \n454         Compute the log probabilities, weighted log probabilities per\n455         component and responsibilities for each sample in X with respect to\n456         the current state of the model.\n457 \n458         Parameters\n459         ----------\n460         X : array-like, shape (n_samples, n_features)\n461 \n462         Returns\n463         -------\n464         log_prob_norm : array, shape (n_samples,)\n465             log p(X)\n466 \n467         log_responsibilities : array, shape (n_samples, n_components)\n468             logarithm of the responsibilities\n469         \"\"\"\n470         weighted_log_prob = self._estimate_weighted_log_prob(X)\n471         log_prob_norm = logsumexp(weighted_log_prob, axis=1)\n472         with np.errstate(under='ignore'):\n473             # ignore underflow\n474             log_resp = weighted_log_prob - log_prob_norm[:, np.newaxis]\n475         return log_prob_norm, log_resp\n476 \n477     def _print_verbose_msg_init_beg(self, n_init):\n478         \"\"\"Print verbose message on initialization.\"\"\"\n479         if self.verbose == 1:\n480             print(\"Initialization %d\" % n_init)\n481         elif self.verbose >= 2:\n482             print(\"Initialization %d\" % n_init)\n483             self._init_prev_time = time()\n484             self._iter_prev_time = self._init_prev_time\n485 \n486     def _print_verbose_msg_iter_end(self, n_iter, diff_ll):\n487         \"\"\"Print verbose message on initialization.\"\"\"\n488         if n_iter % self.verbose_interval == 0:\n489             if self.verbose == 1:\n490                 print(\"  Iteration %d\" % n_iter)\n491             elif self.verbose >= 2:\n492                 cur_time = time()\n493                 print(\"  Iteration %d\\t time lapse %.5fs\\t ll change %.5f\" % (\n494                     n_iter, cur_time - self._iter_prev_time, diff_ll))\n495                 self._iter_prev_time = cur_time\n496 \n497     def _print_verbose_msg_init_end(self, ll):\n498         \"\"\"Print verbose message on the end of iteration.\"\"\"\n499         if self.verbose == 1:\n500             print(\"Initialization converged: %s\" % self.converged_)\n501         elif self.verbose >= 2:\n502             print(\"Initialization converged: %s\\t time lapse %.5fs\\t ll %.5f\" %\n503                   (self.converged_, time() - self._init_prev_time, ll))\n",
        "intended_behavior": "To align mixture models more closely with clusterer interfaces, the `BaseMixture` class should explicitly include or ensure access to the `labels_` attribute after fitting. This attribute should store the cluster assignments for each sample in the training data, based on the highest posterior probability akin to how `predict` determines the closest component. This would require storing `labels_` as an attribute following the fitting process, enhancing interpretability and utility for inductive learning."
    },
    {
        "rel_file_path": "sklearn/mixture/base.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/scikit-learn__scikit-learn/setup_scikit-learn__scikit-learn__0.20/sklearn/mixture/base.py",
        "start": 67,
        "end": 503,
        "class_name": "BaseMixture",
        "method_name": null,
        "code": "67 class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n68     \"\"\"Base class for mixture models.\n69 \n70     This abstract class specifies an interface for all mixture classes and\n71     provides basic common methods for mixture models.\n72     \"\"\"\n73 \n74     def __init__(self, n_components, tol, reg_covar,\n75                  max_iter, n_init, init_params, random_state, warm_start,\n76                  verbose, verbose_interval):\n77         self.n_components = n_components\n78         self.tol = tol\n79         self.reg_covar = reg_covar\n80         self.max_iter = max_iter\n81         self.n_init = n_init\n82         self.init_params = init_params\n83         self.random_state = random_state\n84         self.warm_start = warm_start\n85         self.verbose = verbose\n86         self.verbose_interval = verbose_interval\n87 \n88     def _check_initial_parameters(self, X):\n89         \"\"\"Check values of the basic parameters.\n90 \n91         Parameters\n92         ----------\n93         X : array-like, shape (n_samples, n_features)\n94         \"\"\"\n95         if self.n_components < 1:\n96             raise ValueError(\"Invalid value for 'n_components': %d \"\n97                              \"Estimation requires at least one component\"\n98                              % self.n_components)\n99 \n100         if self.tol < 0.:\n101             raise ValueError(\"Invalid value for 'tol': %.5f \"\n102                              \"Tolerance used by the EM must be non-negative\"\n103                              % self.tol)\n104 \n105         if self.n_init < 1:\n106             raise ValueError(\"Invalid value for 'n_init': %d \"\n107                              \"Estimation requires at least one run\"\n108                              % self.n_init)\n109 \n110         if self.max_iter < 1:\n111             raise ValueError(\"Invalid value for 'max_iter': %d \"\n112                              \"Estimation requires at least one iteration\"\n113                              % self.max_iter)\n114 \n115         if self.reg_covar < 0.:\n116             raise ValueError(\"Invalid value for 'reg_covar': %.5f \"\n117                              \"regularization on covariance must be \"\n118                              \"non-negative\"\n119                              % self.reg_covar)\n120 \n121         # Check all the parameters values of the derived class\n122         self._check_parameters(X)\n123 \n124     @abstractmethod\n125     def _check_parameters(self, X):\n126         \"\"\"Check initial parameters of the derived class.\n127 \n128         Parameters\n129         ----------\n130         X : array-like, shape  (n_samples, n_features)\n131         \"\"\"\n132         pass\n133 \n134     def _initialize_parameters(self, X, random_state):\n135         \"\"\"Initialize the model parameters.\n136 \n137         Parameters\n138         ----------\n139         X : array-like, shape  (n_samples, n_features)\n140 \n141         random_state : RandomState\n142             A random number generator instance.\n143         \"\"\"\n144         n_samples, _ = X.shape\n145 \n146         if self.init_params == 'kmeans':\n147             resp = np.zeros((n_samples, self.n_components))\n148             label = cluster.KMeans(n_clusters=self.n_components, n_init=1,\n149                                    random_state=random_state).fit(X).labels_\n150             resp[np.arange(n_samples), label] = 1\n151         elif self.init_params == 'random':\n152             resp = random_state.rand(n_samples, self.n_components)\n153             resp /= resp.sum(axis=1)[:, np.newaxis]\n154         else:\n155             raise ValueError(\"Unimplemented initialization method '%s'\"\n156                              % self.init_params)\n157 \n158         self._initialize(X, resp)\n159 \n160     @abstractmethod\n161     def _initialize(self, X, resp):\n162         \"\"\"Initialize the model parameters of the derived class.\n163 \n164         Parameters\n165         ----------\n166         X : array-like, shape  (n_samples, n_features)\n167 \n168         resp : array-like, shape (n_samples, n_components)\n169         \"\"\"\n170         pass\n171 \n172     def fit(self, X, y=None):\n173         \"\"\"Estimate model parameters with the EM algorithm.\n174 \n175         The method fit the model `n_init` times and set the parameters with\n176         which the model has the largest likelihood or lower bound. Within each\n177         trial, the method iterates between E-step and M-step for `max_iter`\n178         times until the change of likelihood or lower bound is less than\n179         `tol`, otherwise, a `ConvergenceWarning` is raised.\n180 \n181         Parameters\n182         ----------\n183         X : array-like, shape (n_samples, n_features)\n184             List of n_features-dimensional data points. Each row\n185             corresponds to a single data point.\n186 \n187         Returns\n188         -------\n189         self\n190         \"\"\"\n191         X = _check_X(X, self.n_components, ensure_min_samples=2)\n192         self._check_initial_parameters(X)\n193 \n194         # if we enable warm_start, we will have a unique initialisation\n195         do_init = not(self.warm_start and hasattr(self, 'converged_'))\n196         n_init = self.n_init if do_init else 1\n197 \n198         max_lower_bound = -np.infty\n199         self.converged_ = False\n200 \n201         random_state = check_random_state(self.random_state)\n202 \n203         n_samples, _ = X.shape\n204         for init in range(n_init):\n205             self._print_verbose_msg_init_beg(init)\n206 \n207             if do_init:\n208                 self._initialize_parameters(X, random_state)\n209                 self.lower_bound_ = -np.infty\n210 \n211             for n_iter in range(1, self.max_iter + 1):\n212                 prev_lower_bound = self.lower_bound_\n213 \n214                 log_prob_norm, log_resp = self._e_step(X)\n215                 self._m_step(X, log_resp)\n216                 self.lower_bound_ = self._compute_lower_bound(\n217                     log_resp, log_prob_norm)\n218 \n219                 change = self.lower_bound_ - prev_lower_bound\n220                 self._print_verbose_msg_iter_end(n_iter, change)\n221 \n222                 if abs(change) < self.tol:\n223                     self.converged_ = True\n224                     break\n225 \n226             self._print_verbose_msg_init_end(self.lower_bound_)\n227 \n228             if self.lower_bound_ > max_lower_bound:\n229                 max_lower_bound = self.lower_bound_\n230                 best_params = self._get_parameters()\n231                 best_n_iter = n_iter\n232 \n233         if not self.converged_:\n234             warnings.warn('Initialization %d did not converge. '\n235                           'Try different init parameters, '\n236                           'or increase max_iter, tol '\n237                           'or check for degenerate data.'\n238                           % (init + 1), ConvergenceWarning)\n239 \n240         self._set_parameters(best_params)\n241         self.n_iter_ = best_n_iter\n242 \n243         return self\n244 \n245     def _e_step(self, X):\n246         \"\"\"E step.\n247 \n248         Parameters\n249         ----------\n250         X : array-like, shape (n_samples, n_features)\n251 \n252         Returns\n253         -------\n254         log_prob_norm : float\n255             Mean of the logarithms of the probabilities of each sample in X\n256 \n257         log_responsibility : array, shape (n_samples, n_components)\n258             Logarithm of the posterior probabilities (or responsibilities) of\n259             the point of each sample in X.\n260         \"\"\"\n261         log_prob_norm, log_resp = self._estimate_log_prob_resp(X)\n262         return np.mean(log_prob_norm), log_resp\n263 \n264     @abstractmethod\n265     def _m_step(self, X, log_resp):\n266         \"\"\"M step.\n267 \n268         Parameters\n269         ----------\n270         X : array-like, shape (n_samples, n_features)\n271 \n272         log_resp : array-like, shape (n_samples, n_components)\n273             Logarithm of the posterior probabilities (or responsibilities) of\n274             the point of each sample in X.\n275         \"\"\"\n276         pass\n277 \n278     @abstractmethod\n279     def _check_is_fitted(self):\n280         pass\n281 \n282     @abstractmethod\n283     def _get_parameters(self):\n284         pass\n285 \n286     @abstractmethod\n287     def _set_parameters(self, params):\n288         pass\n289 \n290     def score_samples(self, X):\n291         \"\"\"Compute the weighted log probabilities for each sample.\n292 \n293         Parameters\n294         ----------\n295         X : array-like, shape (n_samples, n_features)\n296             List of n_features-dimensional data points. Each row\n297             corresponds to a single data point.\n298 \n299         Returns\n300         -------\n301         log_prob : array, shape (n_samples,)\n302             Log probabilities of each data point in X.\n303         \"\"\"\n304         self._check_is_fitted()\n305         X = _check_X(X, None, self.means_.shape[1])\n306 \n307         return logsumexp(self._estimate_weighted_log_prob(X), axis=1)\n308 \n309     def score(self, X, y=None):\n310         \"\"\"Compute the per-sample average log-likelihood of the given data X.\n311 \n312         Parameters\n313         ----------\n314         X : array-like, shape (n_samples, n_dimensions)\n315             List of n_features-dimensional data points. Each row\n316             corresponds to a single data point.\n317 \n318         Returns\n319         -------\n320         log_likelihood : float\n321             Log likelihood of the Gaussian mixture given X.\n322         \"\"\"\n323         return self.score_samples(X).mean()\n324 \n325     def predict(self, X):\n326         \"\"\"Predict the labels for the data samples in X using trained model.\n327 \n328         Parameters\n329         ----------\n330         X : array-like, shape (n_samples, n_features)\n331             List of n_features-dimensional data points. Each row\n332             corresponds to a single data point.\n333 \n334         Returns\n335         -------\n336         labels : array, shape (n_samples,)\n337             Component labels.\n338         \"\"\"\n339         self._check_is_fitted()\n340         X = _check_X(X, None, self.means_.shape[1])\n341         return self._estimate_weighted_log_prob(X).argmax(axis=1)\n342 \n343     def predict_proba(self, X):\n344         \"\"\"Predict posterior probability of each component given the data.\n345 \n346         Parameters\n347         ----------\n348         X : array-like, shape (n_samples, n_features)\n349             List of n_features-dimensional data points. Each row\n350             corresponds to a single data point.\n351 \n352         Returns\n353         -------\n354         resp : array, shape (n_samples, n_components)\n355             Returns the probability each Gaussian (state) in\n356             the model given each sample.\n357         \"\"\"\n358         self._check_is_fitted()\n359         X = _check_X(X, None, self.means_.shape[1])\n360         _, log_resp = self._estimate_log_prob_resp(X)\n361         return np.exp(log_resp)\n362 \n363     def sample(self, n_samples=1):\n364         \"\"\"Generate random samples from the fitted Gaussian distribution.\n365 \n366         Parameters\n367         ----------\n368         n_samples : int, optional\n369             Number of samples to generate. Defaults to 1.\n370 \n371         Returns\n372         -------\n373         X : array, shape (n_samples, n_features)\n374             Randomly generated sample\n375 \n376         y : array, shape (nsamples,)\n377             Component labels\n378 \n379         \"\"\"\n380         self._check_is_fitted()\n381 \n382         if n_samples < 1:\n383             raise ValueError(\n384                 \"Invalid value for 'n_samples': %d . The sampling requires at \"\n385                 \"least one sample.\" % (self.n_components))\n386 \n387         _, n_features = self.means_.shape\n388         rng = check_random_state(self.random_state)\n389         n_samples_comp = rng.multinomial(n_samples, self.weights_)\n390 \n391         if self.covariance_type == 'full':\n392             X = np.vstack([\n393                 rng.multivariate_normal(mean, covariance, int(sample))\n394                 for (mean, covariance, sample) in zip(\n395                     self.means_, self.covariances_, n_samples_comp)])\n396         elif self.covariance_type == \"tied\":\n397             X = np.vstack([\n398                 rng.multivariate_normal(mean, self.covariances_, int(sample))\n399                 for (mean, sample) in zip(\n400                     self.means_, n_samples_comp)])\n401         else:\n402             X = np.vstack([\n403                 mean + rng.randn(sample, n_features) * np.sqrt(covariance)\n404                 for (mean, covariance, sample) in zip(\n405                     self.means_, self.covariances_, n_samples_comp)])\n406 \n407         y = np.concatenate([j * np.ones(sample, dtype=int)\n408                            for j, sample in enumerate(n_samples_comp)])\n409 \n410         return (X, y)\n411 \n412     def _estimate_weighted_log_prob(self, X):\n413         \"\"\"Estimate the weighted log-probabilities, log P(X | Z) + log weights.\n414 \n415         Parameters\n416         ----------\n417         X : array-like, shape (n_samples, n_features)\n418 \n419         Returns\n420         -------\n421         weighted_log_prob : array, shape (n_samples, n_component)\n422         \"\"\"\n423         return self._estimate_log_prob(X) + self._estimate_log_weights()\n424 \n425     @abstractmethod\n426     def _estimate_log_weights(self):\n427         \"\"\"Estimate log-weights in EM algorithm, E[ log pi ] in VB algorithm.\n428 \n429         Returns\n430         -------\n431         log_weight : array, shape (n_components, )\n432         \"\"\"\n433         pass\n434 \n435     @abstractmethod\n436     def _estimate_log_prob(self, X):\n437         \"\"\"Estimate the log-probabilities log P(X | Z).\n438 \n439         Compute the log-probabilities per each component for each sample.\n440 \n441         Parameters\n442         ----------\n443         X : array-like, shape (n_samples, n_features)\n444 \n445         Returns\n446         -------\n447         log_prob : array, shape (n_samples, n_component)\n448         \"\"\"\n449         pass\n450 \n451     def _estimate_log_prob_resp(self, X):\n452         \"\"\"Estimate log probabilities and responsibilities for each sample.\n453 \n454         Compute the log probabilities, weighted log probabilities per\n455         component and responsibilities for each sample in X with respect to\n456         the current state of the model.\n457 \n458         Parameters\n459         ----------\n460         X : array-like, shape (n_samples, n_features)\n461 \n462         Returns\n463         -------\n464         log_prob_norm : array, shape (n_samples,)\n465             log p(X)\n466 \n467         log_responsibilities : array, shape (n_samples, n_components)\n468             logarithm of the responsibilities\n469         \"\"\"\n470         weighted_log_prob = self._estimate_weighted_log_prob(X)\n471         log_prob_norm = logsumexp(weighted_log_prob, axis=1)\n472         with np.errstate(under='ignore'):\n473             # ignore underflow\n474             log_resp = weighted_log_prob - log_prob_norm[:, np.newaxis]\n475         return log_prob_norm, log_resp\n476 \n477     def _print_verbose_msg_init_beg(self, n_init):\n478         \"\"\"Print verbose message on initialization.\"\"\"\n479         if self.verbose == 1:\n480             print(\"Initialization %d\" % n_init)\n481         elif self.verbose >= 2:\n482             print(\"Initialization %d\" % n_init)\n483             self._init_prev_time = time()\n484             self._iter_prev_time = self._init_prev_time\n485 \n486     def _print_verbose_msg_iter_end(self, n_iter, diff_ll):\n487         \"\"\"Print verbose message on initialization.\"\"\"\n488         if n_iter % self.verbose_interval == 0:\n489             if self.verbose == 1:\n490                 print(\"  Iteration %d\" % n_iter)\n491             elif self.verbose >= 2:\n492                 cur_time = time()\n493                 print(\"  Iteration %d\\t time lapse %.5fs\\t ll change %.5f\" % (\n494                     n_iter, cur_time - self._iter_prev_time, diff_ll))\n495                 self._iter_prev_time = cur_time\n496 \n497     def _print_verbose_msg_init_end(self, ll):\n498         \"\"\"Print verbose message on the end of iteration.\"\"\"\n499         if self.verbose == 1:\n500             print(\"Initialization converged: %s\" % self.converged_)\n501         elif self.verbose >= 2:\n502             print(\"Initialization converged: %s\\t time lapse %.5fs\\t ll %.5f\" %\n503                   (self.converged_, time() - self._init_prev_time, ll))\n",
        "intended_behavior": "Add a `fit_predict` method that performs both fitting to the data and returning the cluster labels (or component assignments for mixture models). This method should fit the model on the data and then return the labels for each sample in the fitting data, calculated as per the current `predict` method's logic. This addition will enhance the workflow efficiency, allowing users to fit the model and obtain cluster assignments in one step, aligning with the conventional clusterer interface."
    }
]