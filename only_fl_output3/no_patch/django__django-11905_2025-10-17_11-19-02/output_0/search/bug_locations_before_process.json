[
    {
        "file": "django/db/models/sql/query.py",
        "class": "Query",
        "method": "build_filter",
        "intended_behavior": "Inside the `build_filter` method, after resolving the lookup type and before finalizing the construction of the filter clause, introduce a validation step for `isnull` lookups. If the lookup type is determined to be `isnull` (as indicated by the variable `lookup_type` at line 1310), the method should verify that the `value` (or `rhs` in other contexts) is strictly of a boolean type. If the value is not a boolean, the method should raise a `ValueError` with a message indicating that only boolean values are valid for `isnull` lookups. This additional validation step ensures that developers are immediately notified of misuse, maintaining the integrity of query construction and avoiding undesired behavior or confusing results stemming from improper use of the `__isnull` lookup."
    },
    {
        "file": "django/db/models/lookups.py",
        "class": "Lookup",
        "method": "",
        "intended_behavior": "In the context of the `Lookup` class, particularly for an `IsnullLookup` subclass (which might need to be located or explicitly defined if not already separate from the generic `Lookup`), override or adjust the method responsible for processing the `rhs` value. This method should include a conditional check to confirm if the lookup name is `isnull`, and if so, validate that the `rhs` value is boolean. If the validation fails, the method should raise an appropriate error signalizing the invalid use of non-boolean values with the `isnull` lookup. Implementing this behavior ensures that all `isnull` lookups, regardless of their point of origin in the codebase, are subjected to this boolean-only validation, thus unifying the treatment of `isnull` lookups across the Django ORM layer."
    }
]