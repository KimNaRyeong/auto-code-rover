diff --git a/django/contrib/auth/management/commands/changepassword.py b/django/contrib/auth/management/commands/changepassword.py
--- a/django/contrib/auth/management/commands/changepassword.py
+++ b/django/contrib/auth/management/commands/changepassword.py
@@ -12,7 +12,7 @@
 class Command(BaseCommand):
     help = "Change a user's password for django.contrib.auth."
     requires_migrations_checks = True
-    requires_system_checks = False
+    requires_system_checks = []
 
     def _get_pass(self, prompt="Password: "):
         p = getpass.getpass(prompt=prompt)
diff --git a/django/contrib/gis/management/commands/ogrinspect.py b/django/contrib/gis/management/commands/ogrinspect.py
--- a/django/contrib/gis/management/commands/ogrinspect.py
+++ b/django/contrib/gis/management/commands/ogrinspect.py
@@ -37,7 +37,7 @@ class Command(BaseCommand):
         ' ./manage.py ogrinspect zipcode.shp Zipcode'
     )
 
-    requires_system_checks = False
+    requires_system_checks = []
 
     def add_arguments(self, parser):
         parser.add_argument('data_source', help='Path to the data source.')
diff --git a/django/contrib/staticfiles/management/commands/collectstatic.py b/django/contrib/staticfiles/management/commands/collectstatic.py
--- a/django/contrib/staticfiles/management/commands/collectstatic.py
+++ b/django/contrib/staticfiles/management/commands/collectstatic.py
@@ -16,7 +16,7 @@ class Command(BaseCommand):
     settings.STATIC_ROOT.
     """
     help = "Collect static files in a single location."
-    requires_system_checks = False
+    requires_system_checks = [Tags.staticfiles]
 
     def __init__(self, *args, **kwargs):
         super().__init__(*args, **kwargs)
@@ -36,10 +36,6 @@ def local(self):
         return True
 
     def add_arguments(self, parser):
-        parser.add_argument(
-            '--skip-checks', action='store_true',
-            help='Skip system checks.',
-        )
         parser.add_argument(
             '--noinput', '--no-input', action='store_false', dest='interactive',
             help="Do NOT prompt the user for input of any kind.",
@@ -151,9 +147,6 @@ def collect(self):
 
     def handle(self, **options):
         self.set_options(**options)
-        if not options['skip_checks']:
-            self.check(tags=[Tags.staticfiles])
-
         message = ['\n']
         if self.dry_run:
             message.append(
diff --git a/django/core/management/base.py b/django/core/management/base.py
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -4,6 +4,7 @@
 """
 import os
 import sys
+import warnings
 from argparse import ArgumentParser, HelpFormatter
 from io import TextIOBase
 
@@ -12,6 +13,9 @@
 from django.core.exceptions import ImproperlyConfigured
 from django.core.management.color import color_style, no_style
 from django.db import DEFAULT_DB_ALIAS, connections
+from django.utils.deprecation import RemovedInDjango41Warning
+
+ALL_CHECKS = '__all__'
 
 
 class CommandError(Exception):
@@ -203,8 +207,11 @@ class BaseCommand:
         migrations on disk don't match the migrations in the database.
 
     ``requires_system_checks``
-        A boolean; if ``True``, entire Django project will be checked for errors
-        prior to executing the command. Default value is ``True``.
+        A list or tuple of tags, e.g. [Tags.staticfiles, Tags.models]. System
+        checks registered in the chosen tags will be checked for errors prior
+        to executing the command. The value '__all__' can be used to specify
+        that all system checks should be performed. Default value is '__all__'.
+
         To validate an individual application's models
         rather than all applications' models, call
         ``self.check(app_configs)`` from ``handle()``, where ``app_configs``
@@ -222,7 +229,7 @@ class BaseCommand:
     _called_from_command_line = False
     output_transaction = False  # Whether to wrap the output in a "BEGIN; COMMIT;"
     requires_migrations_checks = False
-    requires_system_checks = True
+    requires_system_checks = '__all__'
     # Arguments, common to all commands, which aren't defined by the argument
     # parser.
     base_stealth_options = ('stderr', 'stdout')
@@ -239,6 +246,19 @@ def __init__(self, stdout=None, stderr=None, no_color=False, force_color=False):
         else:
             self.style = color_style(force_color)
             self.stderr.style_func = self.style.ERROR
+        if self.requires_system_checks in [False, True]:
+            warnings.warn(
+                "Using a boolean value for requires_system_checks is "
+                "deprecated. Use '__all__' instead of True, and [] (an empty "
+                "list) instead of False.",
+                RemovedInDjango41Warning,
+            )
+            self.requires_system_checks = ALL_CHECKS if self.requires_system_checks else []
+        if (
+            not isinstance(self.requires_system_checks, (list, tuple)) and
+            self.requires_system_checks != ALL_CHECKS
+        ):
+            raise TypeError('requires_system_checks must be a list or tuple.')
 
     def get_version(self):
         """
@@ -365,7 +385,10 @@ def execute(self, *args, **options):
             self.stderr = OutputWrapper(options['stderr'])
 
         if self.requires_system_checks and not options['skip_checks']:
-            self.check()
+            if self.requires_system_checks == ALL_CHECKS:
+                self.check()
+            else:
+                self.check(tags=self.requires_system_checks)
         if self.requires_migrations_checks:
             self.check_migrations()
         output = self.handle(*args, **options)
diff --git a/django/core/management/commands/check.py b/django/core/management/commands/check.py
--- a/django/core/management/commands/check.py
+++ b/django/core/management/commands/check.py
@@ -7,7 +7,7 @@
 class Command(BaseCommand):
     help = "Checks the entire Django project for potential problems."
 
-    requires_system_checks = False
+    requires_system_checks = []
 
     def add_arguments(self, parser):
         parser.add_argument('args', metavar='app_label', nargs='*')
diff --git a/django/core/management/commands/compilemessages.py b/django/core/management/commands/compilemessages.py
--- a/django/core/management/commands/compilemessages.py
+++ b/django/core/management/commands/compilemessages.py
@@ -29,7 +29,7 @@ def is_writable(path):
 class Command(BaseCommand):
     help = 'Compiles .po files to .mo files for use with builtin gettext support.'
 
-    requires_system_checks = False
+    requires_system_checks = []
 
     program = 'msgfmt'
     program_options = ['--check-format']
diff --git a/django/core/management/commands/createcachetable.py b/django/core/management/commands/createcachetable.py
--- a/django/core/management/commands/createcachetable.py
+++ b/django/core/management/commands/createcachetable.py
@@ -10,7 +10,7 @@
 class Command(BaseCommand):
     help = "Creates the tables needed to use the SQL cache backend."
 
-    requires_system_checks = False
+    requires_system_checks = []
 
     def add_arguments(self, parser):
         parser.add_argument(
diff --git a/django/core/management/commands/dbshell.py b/django/core/management/commands/dbshell.py
--- a/django/core/management/commands/dbshell.py
+++ b/django/core/management/commands/dbshell.py
@@ -10,7 +10,7 @@ class Command(BaseCommand):
         "default database if none is provided."
     )
 
-    requires_system_checks = False
+    requires_system_checks = []
 
     def add_arguments(self, parser):
         parser.add_argument(
diff --git a/django/core/management/commands/diffsettings.py b/django/core/management/commands/diffsettings.py
--- a/django/core/management/commands/diffsettings.py
+++ b/django/core/management/commands/diffsettings.py
@@ -10,7 +10,7 @@ class Command(BaseCommand):
     help = """Displays differences between the current settings.py and Django's
     default settings."""
 
-    requires_system_checks = False
+    requires_system_checks = []
 
     def add_arguments(self, parser):
         parser.add_argument(
diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py
--- a/django/core/management/commands/inspectdb.py
+++ b/django/core/management/commands/inspectdb.py
@@ -8,7 +8,7 @@
 
 class Command(BaseCommand):
     help = "Introspects the database tables in the given database and outputs a Django model module."
-    requires_system_checks = False
+    requires_system_checks = []
     stealth_options = ('table_name_filter',)
     db_module = 'django.db'
 
diff --git a/django/core/management/commands/makemessages.py b/django/core/management/commands/makemessages.py
--- a/django/core/management/commands/makemessages.py
+++ b/django/core/management/commands/makemessages.py
@@ -206,7 +206,7 @@ class Command(BaseCommand):
     translatable_file_class = TranslatableFile
     build_file_class = BuildFile
 
-    requires_system_checks = False
+    requires_system_checks = []
 
     msgmerge_options = ['-q', '--previous']
     msguniq_options = ['--to-code=utf-8']
diff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py
--- a/django/core/management/commands/migrate.py
+++ b/django/core/management/commands/migrate.py
@@ -20,7 +20,7 @@
 
 class Command(BaseCommand):
     help = "Updates database schema. Manages both apps with migrations and those without."
-    requires_system_checks = False
+    requires_system_checks = []
 
     def add_arguments(self, parser):
         parser.add_argument(
diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -25,7 +25,7 @@ class Command(BaseCommand):
     help = "Starts a lightweight Web server for development."
 
     # Validation is called explicitly each time the server is reloaded.
-    requires_system_checks = False
+    requires_system_checks = []
     stealth_options = ('shutdown_message',)
 
     default_addr = '127.0.0.1'
diff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py
--- a/django/core/management/commands/shell.py
+++ b/django/core/management/commands/shell.py
@@ -14,7 +14,7 @@ class Command(BaseCommand):
         "as code."
     )
 
-    requires_system_checks = False
+    requires_system_checks = []
     shells = ['ipython', 'bpython', 'python']
 
     def add_arguments(self, parser):
diff --git a/django/core/management/commands/testserver.py b/django/core/management/commands/testserver.py
--- a/django/core/management/commands/testserver.py
+++ b/django/core/management/commands/testserver.py
@@ -6,7 +6,7 @@
 class Command(BaseCommand):
     help = 'Runs a development server with data from the given fixture(s).'
 
-    requires_system_checks = False
+    requires_system_checks = []
 
     def add_arguments(self, parser):
         parser.add_argument(
diff --git a/django/core/management/templates.py b/django/core/management/templates.py
--- a/django/core/management/templates.py
+++ b/django/core/management/templates.py
@@ -28,7 +28,7 @@ class TemplateCommand(BaseCommand):
     :param directory: The directory to which the template should be copied.
     :param options: The additional variables passed to project or app templates
     """
-    requires_system_checks = False
+    requires_system_checks = []
     # The supported URL schemes
     url_schemes = ['http', 'https', 'ftp']
     # Rewrite the following suffixes when determining the target filename.
