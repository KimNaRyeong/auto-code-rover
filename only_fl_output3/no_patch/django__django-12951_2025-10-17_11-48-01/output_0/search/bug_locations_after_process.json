[
    {
        "rel_file_path": "django/db/models/expressions.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/db/models/expressions.py",
        "start": 878,
        "end": 890,
        "class_name": "When",
        "method_name": "__init__",
        "code": "878     def __init__(self, condition=None, then=None, **lookups):\n879         if lookups and condition is None:\n880             condition, lookups = Q(**lookups), None\n881         if condition is None or not getattr(condition, 'conditional', False) or lookups:\n882             raise TypeError(\n883                 'When() supports a Q object, a boolean expression, or lookups '\n884                 'as a condition.'\n885             )\n886         if isinstance(condition, Q) and not condition:\n887             raise ValueError(\"An empty Q() can't be used as a When() condition.\")\n888         super().__init__(output_field=None)\n889         self.condition = condition\n890         self.result = self._parse_expressions(then)[0]\n",
        "intended_behavior": "The `__init__` method of the `When` class should be modified to support directly using an `Exists` expression alongside keyword arguments, without the need for explicitly wrapping it in a `Q` object. This involves adjusting the conditional verification process within the method to allow `Exists` as a valid condition even when keyword arguments are present. The modification must ensure that this change does not impact the existing functionality of the `When` class, especially its ability to handle `Q` objects, boolean expressions, or simple lookup conditions. This includes preserving type checking and raising errors for truly unsupported types or conditions. The intended behavior aims to make the usage of `When` with `Exists` more intuitive, aligning it with how developers can use conditions in `filter()` calls, thereby enhancing consistency across the Django ORM API."
    },
    {
        "rel_file_path": "django/db/models/expressions.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/db/models/expressions.py",
        "start": 873,
        "end": 934,
        "class_name": "When",
        "method_name": null,
        "code": "873 class When(Expression):\n874     template = 'WHEN %(condition)s THEN %(result)s'\n875     # This isn't a complete conditional expression, must be used in Case().\n876     conditional = False\n877 \n878     def __init__(self, condition=None, then=None, **lookups):\n879         if lookups and condition is None:\n880             condition, lookups = Q(**lookups), None\n881         if condition is None or not getattr(condition, 'conditional', False) or lookups:\n882             raise TypeError(\n883                 'When() supports a Q object, a boolean expression, or lookups '\n884                 'as a condition.'\n885             )\n886         if isinstance(condition, Q) and not condition:\n887             raise ValueError(\"An empty Q() can't be used as a When() condition.\")\n888         super().__init__(output_field=None)\n889         self.condition = condition\n890         self.result = self._parse_expressions(then)[0]\n891 \n892     def __str__(self):\n893         return \"WHEN %r THEN %r\" % (self.condition, self.result)\n894 \n895     def __repr__(self):\n896         return \"<%s: %s>\" % (self.__class__.__name__, self)\n897 \n898     def get_source_expressions(self):\n899         return [self.condition, self.result]\n900 \n901     def set_source_expressions(self, exprs):\n902         self.condition, self.result = exprs\n903 \n904     def get_source_fields(self):\n905         # We're only interested in the fields of the result expressions.\n906         return [self.result._output_field_or_none]\n907 \n908     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):\n909         c = self.copy()\n910         c.is_summary = summarize\n911         if hasattr(c.condition, 'resolve_expression'):\n912             c.condition = c.condition.resolve_expression(query, allow_joins, reuse, summarize, False)\n913         c.result = c.result.resolve_expression(query, allow_joins, reuse, summarize, for_save)\n914         return c\n915 \n916     def as_sql(self, compiler, connection, template=None, **extra_context):\n917         connection.ops.check_expression_support(self)\n918         template_params = extra_context\n919         sql_params = []\n920         condition_sql, condition_params = compiler.compile(self.condition)\n921         template_params['condition'] = condition_sql\n922         sql_params.extend(condition_params)\n923         result_sql, result_params = compiler.compile(self.result)\n924         template_params['result'] = result_sql\n925         sql_params.extend(result_params)\n926         template = template or self.template\n927         return template % template_params, sql_params\n928 \n929     def get_group_by_cols(self, alias=None):\n930         # This is not a complete expression and cannot be used in GROUP BY.\n931         cols = []\n932         for source in self.get_source_expressions():\n933             cols.extend(source.get_group_by_cols())\n934         return cols\n",
        "intended_behavior": "This class provides additional context to the issue."
    }
]