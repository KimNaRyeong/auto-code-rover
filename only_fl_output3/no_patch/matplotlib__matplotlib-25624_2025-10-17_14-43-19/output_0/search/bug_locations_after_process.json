[
    {
        "rel_file_path": "lib/matplotlib/figure.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.7/lib/matplotlib/figure.py",
        "start": 3480,
        "end": 3518,
        "class_name": null,
        "method_name": "tight_layout",
        "code": "3480     def tight_layout(self, *, pad=1.08, h_pad=None, w_pad=None, rect=None):\n3481         \"\"\"\n3482         Adjust the padding between and around subplots.\n3483 \n3484         To exclude an artist on the Axes from the bounding box calculation\n3485         that determines the subplot parameters (i.e. legend, or annotation),\n3486         set ``a.set_in_layout(False)`` for that artist.\n3487 \n3488         Parameters\n3489         ----------\n3490         pad : float, default: 1.08\n3491             Padding between the figure edge and the edges of subplots,\n3492             as a fraction of the font size.\n3493         h_pad, w_pad : float, default: *pad*\n3494             Padding (height/width) between edges of adjacent subplots,\n3495             as a fraction of the font size.\n3496         rect : tuple (left, bottom, right, top), default: (0, 0, 1, 1)\n3497             A rectangle in normalized figure coordinates into which the whole\n3498             subplots area (including labels) will fit.\n3499 \n3500         See Also\n3501         --------\n3502         .Figure.set_layout_engine\n3503         .pyplot.tight_layout\n3504         \"\"\"\n3505         # note that here we do not permanently set the figures engine to\n3506         # tight_layout but rather just perform the layout in place and remove\n3507         # any previous engines.\n3508         engine = TightLayoutEngine(pad=pad, h_pad=h_pad, w_pad=w_pad,\n3509                                    rect=rect)\n3510         try:\n3511             previous_engine = self.get_layout_engine()\n3512             self.set_layout_engine(engine)\n3513             engine.execute(self)\n3514             if not isinstance(previous_engine, TightLayoutEngine) \\\n3515                     and previous_engine is not None:\n3516                 _api.warn_external('The figure layout has changed to tight')\n3517         finally:\n3518             self.set_layout_engine(None)\n",
        "intended_behavior": "The `tight_layout` method should be adjusted to check if `figure.autolayout` is `True` and still apply `kwargs` pertaining to padding (`pad`, `w_pad`, `h_pad`) or any other layout constraints explicitly defined by the user. This means ensuring that even when `figure.autolayout` is enabled, user specifications via `tight_layout` are prioritized or melded with the automatic layout adjustments. The intended behavior is to allow the explicit `tight_layout` configurations provided by the user to coexist with or override the `figure.autolayout` settings when necessary, without disabling `autolayout` globally. The code changes should ensure that explicit `kwargs` provided to `tight_layout` are respected and applied to the layout computation."
    },
    {
        "rel_file_path": "lib/matplotlib/figure.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.7/lib/matplotlib/figure.py",
        "start": 3480,
        "end": 3518,
        "class_name": "Figure",
        "method_name": "tight_layout",
        "code": "3480     def tight_layout(self, *, pad=1.08, h_pad=None, w_pad=None, rect=None):\n3481         \"\"\"\n3482         Adjust the padding between and around subplots.\n3483 \n3484         To exclude an artist on the Axes from the bounding box calculation\n3485         that determines the subplot parameters (i.e. legend, or annotation),\n3486         set ``a.set_in_layout(False)`` for that artist.\n3487 \n3488         Parameters\n3489         ----------\n3490         pad : float, default: 1.08\n3491             Padding between the figure edge and the edges of subplots,\n3492             as a fraction of the font size.\n3493         h_pad, w_pad : float, default: *pad*\n3494             Padding (height/width) between edges of adjacent subplots,\n3495             as a fraction of the font size.\n3496         rect : tuple (left, bottom, right, top), default: (0, 0, 1, 1)\n3497             A rectangle in normalized figure coordinates into which the whole\n3498             subplots area (including labels) will fit.\n3499 \n3500         See Also\n3501         --------\n3502         .Figure.set_layout_engine\n3503         .pyplot.tight_layout\n3504         \"\"\"\n3505         # note that here we do not permanently set the figures engine to\n3506         # tight_layout but rather just perform the layout in place and remove\n3507         # any previous engines.\n3508         engine = TightLayoutEngine(pad=pad, h_pad=h_pad, w_pad=w_pad,\n3509                                    rect=rect)\n3510         try:\n3511             previous_engine = self.get_layout_engine()\n3512             self.set_layout_engine(engine)\n3513             engine.execute(self)\n3514             if not isinstance(previous_engine, TightLayoutEngine) \\\n3515                     and previous_engine is not None:\n3516                 _api.warn_external('The figure layout has changed to tight')\n3517         finally:\n3518             self.set_layout_engine(None)\n",
        "intended_behavior": "The `tight_layout` method should be adjusted to check if `figure.autolayout` is `True` and still apply `kwargs` pertaining to padding (`pad`, `w_pad`, `h_pad`) or any other layout constraints explicitly defined by the user. This means ensuring that even when `figure.autolayout` is enabled, user specifications via `tight_layout` are prioritized or melded with the automatic layout adjustments. The intended behavior is to allow the explicit `tight_layout` configurations provided by the user to coexist with or override the `figure.autolayout` settings when necessary, without disabling `autolayout` globally. The code changes should ensure that explicit `kwargs` provided to `tight_layout` are respected and applied to the layout computation."
    }
]