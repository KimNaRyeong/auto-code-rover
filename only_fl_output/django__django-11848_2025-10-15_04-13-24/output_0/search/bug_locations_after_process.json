[
    {
        "rel_file_path": "django/utils/http.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.1/django/utils/http.py",
        "start": 158,
        "end": 191,
        "class_name": null,
        "method_name": "parse_http_date",
        "code": "158 def parse_http_date(date):\n159     \"\"\"\n160     Parse a date format as specified by HTTP RFC7231 section 7.1.1.1.\n161 \n162     The three formats allowed by the RFC are accepted, even if only the first\n163     one is still in widespread use.\n164 \n165     Return an integer expressed in seconds since the epoch, in UTC.\n166     \"\"\"\n167     # email.utils.parsedate() does the job for RFC1123 dates; unfortunately\n168     # RFC7231 makes it mandatory to support RFC850 dates too. So we roll\n169     # our own RFC-compliant parsing.\n170     for regex in RFC1123_DATE, RFC850_DATE, ASCTIME_DATE:\n171         m = regex.match(date)\n172         if m is not None:\n173             break\n174     else:\n175         raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n176     try:\n177         year = int(m.group('year'))\n178         if year < 100:\n179             if year < 70:\n180                 year += 2000\n181             else:\n182                 year += 1900\n183         month = MONTHS.index(m.group('mon').lower()) + 1\n184         day = int(m.group('day'))\n185         hour = int(m.group('hour'))\n186         min = int(m.group('min'))\n187         sec = int(m.group('sec'))\n188         result = datetime.datetime(year, month, day, hour, min, sec)\n189         return calendar.timegm(result.utctimetuple())\n190     except Exception as exc:\n191         raise ValueError(\"%r is not a valid date\" % date) from exc\n",
        "intended_behavior": "The `parse_http_date` method should adjust its handling of two-digit years to dynamically determine whether a year should be considered to belong to the 20th or 21st century, based on a comparison with the current year, rather than a static cutoff. This change aims to align with RFC 7231's guidance which states that a two-digit year \"that appears to be more than 50 years in the future\" should be interpreted as \"representing the most recent year in the past that had the same last two digits.\" Specifically, the code within the method that currently reads: `if year < 100: if year < 70: year += 2000 else: year += 1900` should be replaced or supplemented with a dynamic calculation. This calculation must take into consideration the current year and interpret two-digit years in such a way that if they are \"more than 50 years in the future,\" they are adjusted to the \"most recent year in the past\" as per the mentioned RFCs. A simplified approach might involve: - Calculating the current year (e.g., using `datetime.datetime.now().year`). - Establishing a threshold year based on the current year minus 50 years for the past and adding 50 years for the future threshold. - Adjusting the two-digit year to fall within the derived threshold, ensuring it is treated correctly as either 20th or 21st century. This approach ensures the function's date parsing remains compliant with modern standards and can dynamically adapt as time progresses, without needing further adjustments as we move further into the 21st century."
    }
]