[
    {
        "rel_file_path": "sphinx/io.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sphinx-doc__sphinx/setup_sphinx-doc__sphinx__4.0/sphinx/io.py",
        "start": 1,
        "end": 189,
        "class_name": null,
        "method_name": null,
        "code": "1 \"\"\"\n2     sphinx.io\n3     ~~~~~~~~~\n4 \n5     Input/Output files\n6 \n7     :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n8     :license: BSD, see LICENSE for details.\n9 \"\"\"\n10 import codecs\n11 from typing import TYPE_CHECKING, Any, List, Type\n12 \n13 from docutils import nodes\n14 from docutils.core import Publisher\n15 from docutils.frontend import Values\n16 from docutils.io import FileInput, Input, NullOutput\n17 from docutils.parsers import Parser\n18 from docutils.parsers.rst import Parser as RSTParser\n19 from docutils.readers import standalone\n20 from docutils.transforms import Transform\n21 from docutils.transforms.references import DanglingReferences\n22 from docutils.writers import UnfilteredWriter\n23 \n24 from sphinx import addnodes\n25 from sphinx.environment import BuildEnvironment\n26 from sphinx.transforms import (AutoIndexUpgrader, DoctreeReadEvent, FigureAligner,\n27                                SphinxTransformer)\n28 from sphinx.transforms.i18n import (Locale, PreserveTranslatableMessages,\n29                                     RemoveTranslatableInline)\n30 from sphinx.transforms.references import SphinxDomains\n31 from sphinx.util import UnicodeDecodeErrorHandler, get_filetype, logging\n32 from sphinx.util.docutils import LoggingReporter\n33 from sphinx.versioning import UIDTransform\n34 \n35 if TYPE_CHECKING:\n36     from sphinx.application import Sphinx\n37 \n38 \n39 logger = logging.getLogger(__name__)\n40 \n41 \n42 class SphinxBaseReader(standalone.Reader):\n43     \"\"\"\n44     A base class of readers for Sphinx.\n45 \n46     This replaces reporter by Sphinx's on generating document.\n47     \"\"\"\n48 \n49     transforms: List[Type[Transform]] = []\n50 \n51     def __init__(self, *args: Any, **kwargs: Any) -> None:\n52         from sphinx.application import Sphinx\n53         if len(args) > 0 and isinstance(args[0], Sphinx):\n54             self._app = args[0]\n55             self._env = self._app.env\n56             args = args[1:]\n57 \n58         super().__init__(*args, **kwargs)\n59 \n60     def setup(self, app: \"Sphinx\") -> None:\n61         self._app = app      # hold application object only for compatibility\n62         self._env = app.env\n63 \n64     def get_transforms(self) -> List[Type[Transform]]:\n65         transforms = super().get_transforms() + self.transforms\n66 \n67         # remove transforms which is not needed for Sphinx\n68         unused = [DanglingReferences]\n69         for transform in unused:\n70             if transform in transforms:\n71                 transforms.remove(transform)\n72 \n73         return transforms\n74 \n75     def new_document(self) -> nodes.document:\n76         \"\"\"Creates a new document object which having a special reporter object good\n77         for logging.\n78         \"\"\"\n79         document = super().new_document()\n80         document.__class__ = addnodes.document  # replace the class with patched version\n81 \n82         # substitute transformer\n83         document.transformer = SphinxTransformer(document)\n84         document.transformer.set_environment(self.settings.env)\n85 \n86         # substitute reporter\n87         reporter = document.reporter\n88         document.reporter = LoggingReporter.from_reporter(reporter)\n89 \n90         return document\n91 \n92 \n93 class SphinxStandaloneReader(SphinxBaseReader):\n94     \"\"\"\n95     A basic document reader for Sphinx.\n96     \"\"\"\n97 \n98     def setup(self, app: \"Sphinx\") -> None:\n99         self.transforms = self.transforms + app.registry.get_transforms()\n100         super().setup(app)\n101 \n102     def read(self, source: Input, parser: Parser, settings: Values) -> nodes.document:\n103         self.source = source\n104         if not self.parser:\n105             self.parser = parser\n106         self.settings = settings\n107         self.input = self.read_source(settings.env)\n108         self.parse()\n109         return self.document\n110 \n111     def read_source(self, env: BuildEnvironment) -> str:\n112         \"\"\"Read content from source and do post-process.\"\"\"\n113         content = self.source.read()\n114 \n115         # emit \"source-read\" event\n116         arg = [content]\n117         env.events.emit('source-read', env.docname, arg)\n118         return arg[0]\n119 \n120 \n121 class SphinxI18nReader(SphinxBaseReader):\n122     \"\"\"\n123     A document reader for i18n.\n124 \n125     This returns the source line number of original text as current source line number\n126     to let users know where the error happened.\n127     Because the translated texts are partial and they don't have correct line numbers.\n128     \"\"\"\n129 \n130     def setup(self, app: \"Sphinx\") -> None:\n131         super().setup(app)\n132 \n133         self.transforms = self.transforms + app.registry.get_transforms()\n134         unused = [PreserveTranslatableMessages, Locale, RemoveTranslatableInline,\n135                   AutoIndexUpgrader, FigureAligner, SphinxDomains, DoctreeReadEvent,\n136                   UIDTransform]\n137         for transform in unused:\n138             if transform in self.transforms:\n139                 self.transforms.remove(transform)\n140 \n141 \n142 class SphinxDummyWriter(UnfilteredWriter):\n143     \"\"\"Dummy writer module used for generating doctree.\"\"\"\n144 \n145     supported = ('html',)  # needed to keep \"meta\" nodes\n146 \n147     def translate(self) -> None:\n148         pass\n149 \n150 \n151 def SphinxDummySourceClass(source: Any, *args: Any, **kwargs: Any) -> Any:\n152     \"\"\"Bypass source object as is to cheat Publisher.\"\"\"\n153     return source\n154 \n155 \n156 class SphinxFileInput(FileInput):\n157     \"\"\"A basic FileInput for Sphinx.\"\"\"\n158     def __init__(self, *args: Any, **kwargs: Any) -> None:\n159         kwargs['error_handler'] = 'sphinx'\n160         super().__init__(*args, **kwargs)\n161 \n162 \n163 def read_doc(app: \"Sphinx\", env: BuildEnvironment, filename: str) -> nodes.document:\n164     \"\"\"Parse a document and convert to doctree.\"\"\"\n165     # set up error_handler for the target document\n166     error_handler = UnicodeDecodeErrorHandler(env.docname)\n167     codecs.register_error('sphinx', error_handler)  # type: ignore\n168 \n169     reader = SphinxStandaloneReader()\n170     reader.setup(app)\n171     filetype = get_filetype(app.config.source_suffix, filename)\n172     parser = app.registry.create_source_parser(app, filetype)\n173     if parser.__class__.__name__ == 'CommonMarkParser' and parser.settings_spec == ():\n174         # a workaround for recommonmark\n175         #   If recommonmark.AutoStrictify is enabled, the parser invokes reST parser\n176         #   internally.  But recommonmark-0.4.0 does not provide settings_spec for reST\n177         #   parser.  As a workaround, this copies settings_spec for RSTParser to the\n178         #   CommonMarkParser.\n179         parser.settings_spec = RSTParser.settings_spec\n180 \n181     pub = Publisher(reader=reader,\n182                     parser=parser,\n183                     writer=SphinxDummyWriter(),\n184                     source_class=SphinxFileInput,\n185                     destination=NullOutput())\n186     pub.process_programmatic_settings(None, env.settings, None)\n187     pub.set_source(source_path=filename)\n188     pub.publish()\n189     return pub.document\n",
        "intended_behavior": "Ensure that the usage of Publisher and related docutils components in sphinx/io.py remains compatible with docutils-0.17b1. This involves verifying that any changes in docutils APIs are reflected in how Sphinx utilizes the Publisher, ensuring that Sphinx can correctly process input documents into various output formats without errors. Adaptations may include updating method calls, handling method deprecations, or adjusting to altered method signatures present in the new docutils version. The code should continue to support previous functionalities with potential enhancements provided by the new version of docutils."
    }
]