[
    {
        "rel_file_path": "django/core/management/commands/runserver.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.0/django/core/management/commands/runserver.py",
        "start": 23,
        "end": 157,
        "class_name": "Command",
        "method_name": null,
        "code": "23 class Command(BaseCommand):\n24     help = \"Starts a lightweight Web server for development.\"\n25 \n26     # Validation is called explicitly each time the server is reloaded.\n27     requires_system_checks = False\n28     stealth_options = ('shutdown_message',)\n29 \n30     default_addr = '127.0.0.1'\n31     default_addr_ipv6 = '::1'\n32     default_port = '8000'\n33     protocol = 'http'\n34     server_cls = WSGIServer\n35 \n36     def add_arguments(self, parser):\n37         parser.add_argument(\n38             'addrport', nargs='?',\n39             help='Optional port number, or ipaddr:port'\n40         )\n41         parser.add_argument(\n42             '--ipv6', '-6', action='store_true', dest='use_ipv6',\n43             help='Tells Django to use an IPv6 address.',\n44         )\n45         parser.add_argument(\n46             '--nothreading', action='store_false', dest='use_threading',\n47             help='Tells Django to NOT use threading.',\n48         )\n49         parser.add_argument(\n50             '--noreload', action='store_false', dest='use_reloader',\n51             help='Tells Django to NOT use the auto-reloader.',\n52         )\n53 \n54     def execute(self, *args, **options):\n55         if options['no_color']:\n56             # We rely on the environment because it's currently the only\n57             # way to reach WSGIRequestHandler. This seems an acceptable\n58             # compromise considering `runserver` runs indefinitely.\n59             os.environ[\"DJANGO_COLORS\"] = \"nocolor\"\n60         super().execute(*args, **options)\n61 \n62     def get_handler(self, *args, **options):\n63         \"\"\"Return the default WSGI handler for the runner.\"\"\"\n64         return get_internal_wsgi_application()\n65 \n66     def handle(self, *args, **options):\n67         if not settings.DEBUG and not settings.ALLOWED_HOSTS:\n68             raise CommandError('You must set settings.ALLOWED_HOSTS if DEBUG is False.')\n69 \n70         self.use_ipv6 = options['use_ipv6']\n71         if self.use_ipv6 and not socket.has_ipv6:\n72             raise CommandError('Your Python does not support IPv6.')\n73         self._raw_ipv6 = False\n74         if not options['addrport']:\n75             self.addr = ''\n76             self.port = self.default_port\n77         else:\n78             m = re.match(naiveip_re, options['addrport'])\n79             if m is None:\n80                 raise CommandError('\"%s\" is not a valid port number '\n81                                    'or address:port pair.' % options['addrport'])\n82             self.addr, _ipv4, _ipv6, _fqdn, self.port = m.groups()\n83             if not self.port.isdigit():\n84                 raise CommandError(\"%r is not a valid port number.\" % self.port)\n85             if self.addr:\n86                 if _ipv6:\n87                     self.addr = self.addr[1:-1]\n88                     self.use_ipv6 = True\n89                     self._raw_ipv6 = True\n90                 elif self.use_ipv6 and not _fqdn:\n91                     raise CommandError('\"%s\" is not a valid IPv6 address.' % self.addr)\n92         if not self.addr:\n93             self.addr = self.default_addr_ipv6 if self.use_ipv6 else self.default_addr\n94             self._raw_ipv6 = self.use_ipv6\n95         self.run(**options)\n96 \n97     def run(self, **options):\n98         \"\"\"Run the server, using the autoreloader if needed.\"\"\"\n99         use_reloader = options['use_reloader']\n100 \n101         if use_reloader:\n102             autoreload.run_with_reloader(self.inner_run, **options)\n103         else:\n104             self.inner_run(None, **options)\n105 \n106     def inner_run(self, *args, **options):\n107         # If an exception was silenced in ManagementUtility.execute in order\n108         # to be raised in the child process, raise it now.\n109         autoreload.raise_last_exception()\n110 \n111         threading = options['use_threading']\n112         # 'shutdown_message' is a stealth option.\n113         shutdown_message = options.get('shutdown_message', '')\n114         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'\n115 \n116         self.stdout.write(\"Performing system checks...\\n\\n\")\n117         self.check(display_num_errors=True)\n118         # Need to check migrations here, so can't use the\n119         # requires_migrations_check attribute.\n120         self.check_migrations()\n121         now = datetime.now().strftime('%B %d, %Y - %X')\n122         self.stdout.write(now)\n123         self.stdout.write((\n124             \"Django version %(version)s, using settings %(settings)r\\n\"\n125             \"Starting development server at %(protocol)s://%(addr)s:%(port)s/\\n\"\n126             \"Quit the server with %(quit_command)s.\\n\"\n127         ) % {\n128             \"version\": self.get_version(),\n129             \"settings\": settings.SETTINGS_MODULE,\n130             \"protocol\": self.protocol,\n131             \"addr\": '[%s]' % self.addr if self._raw_ipv6 else self.addr,\n132             \"port\": self.port,\n133             \"quit_command\": quit_command,\n134         })\n135 \n136         try:\n137             handler = self.get_handler(*args, **options)\n138             run(self.addr, int(self.port), handler,\n139                 ipv6=self.use_ipv6, threading=threading, server_cls=self.server_cls)\n140         except OSError as e:\n141             # Use helpful error messages instead of ugly tracebacks.\n142             ERRORS = {\n143                 errno.EACCES: \"You don't have permission to access that port.\",\n144                 errno.EADDRINUSE: \"That port is already in use.\",\n145                 errno.EADDRNOTAVAIL: \"That IP address can't be assigned to.\",\n146             }\n147             try:\n148                 error_text = ERRORS[e.errno]\n149             except KeyError:\n150                 error_text = e\n151             self.stderr.write(\"Error: %s\" % error_text)\n152             # Need to use an OS exit because sys.exit doesn't work in a thread\n153             os._exit(1)\n154         except KeyboardInterrupt:\n155             if shutdown_message:\n156                 self.stdout.write(shutdown_message)\n157             sys.exit(0)\n",
        "intended_behavior": "The `Command` class within `runserver.py`, particularly around the argument parsing and server initialization logic, should ensure that when the `--nothreading` flag is used, the server gracefully handles multiple connections with `Connection: keep-alive`. This might involve implementing a mechanism that either properly closes such connections after handling a request (despite the client's request to keep them alive) or effectively manages such connections in a non-blocking way despite threading being disabled. The fix should ensure that the server remains responsive to new incoming connections even when previous ones are in a keep-alive state. This adjustment should preserve the server's ability to run without threading for debugging reasons or whatever purpose the `--nothreading` option serves, without causing it to hang due to unhandled keep-alive connections."
    }
]