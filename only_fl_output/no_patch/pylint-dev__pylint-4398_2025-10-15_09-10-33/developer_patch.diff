diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py
--- a/pylint/lint/pylinter.py
+++ b/pylint/lint/pylinter.py
@@ -264,6 +264,17 @@ def make_options():
                     "help": "Specify a score threshold to be exceeded before program exits with error.",
                 },
             ),
+            (
+                "fail-on",
+                {
+                    "default": "",
+                    "type": "csv",
+                    "metavar": "<msg ids>",
+                    "help": "Return non-zero exit code if any of these messages/categories are detected,"
+                    " even if score is above --fail-under value. Syntax same as enable."
+                    " Messages specified are enabled, while categories only check already-enabled messages.",
+                },
+            ),
             (
                 "confidence",
                 {
@@ -450,6 +461,7 @@ def __init__(self, options=(), reporter=None, option_groups=(), pylintrc=None):
         self.current_name = None
         self.current_file = None
         self.stats = None
+        self.fail_on_symbols = []
         # init options
         self._external_opts = options
         self.options = options + PyLinter.make_options()
@@ -609,6 +621,40 @@ def register_checker(self, checker):
         if not getattr(checker, "enabled", True):
             self.disable(checker.name)
 
+    def enable_fail_on_messages(self):
+        """enable 'fail on' msgs
+
+        Convert values in config.fail_on (which might be msg category, msg id,
+        or symbol) to specific msgs, then enable and flag them for later.
+        """
+        fail_on_vals = self.config.fail_on
+        if not fail_on_vals:
+            return
+
+        fail_on_cats = set()
+        fail_on_msgs = set()
+        for val in fail_on_vals:
+            # If value is a cateogry, add category, else add message
+            if val in MSG_TYPES:
+                fail_on_cats.add(val)
+            else:
+                fail_on_msgs.add(val)
+
+        # For every message in every checker, if cat or msg flagged, enable check
+        for all_checkers in self._checkers.values():
+            for checker in all_checkers:
+                for msg in checker.messages:
+                    if msg.msgid in fail_on_msgs or msg.symbol in fail_on_msgs:
+                        # message id/symbol matched, enable and flag it
+                        self.enable(msg.msgid)
+                        self.fail_on_symbols.append(msg.symbol)
+                    elif msg.msgid[0] in fail_on_cats:
+                        # message starts with a cateogry value, flag (but do not enable) it
+                        self.fail_on_symbols.append(msg.symbol)
+
+    def any_fail_on_issues(self):
+        return any(x in self.fail_on_symbols for x in self.stats["by_msg"])
+
     def disable_noerror_messages(self):
         for msgcat, msgids in self.msgs_store._msgs_by_category.items():
             # enable only messages with 'error' severity and above ('fatal')
diff --git a/pylint/lint/run.py b/pylint/lint/run.py
--- a/pylint/lint/run.py
+++ b/pylint/lint/run.py
@@ -368,6 +368,9 @@ def __init__(
         # load plugin specific configuration.
         linter.load_plugin_configuration()
 
+        # Now that plugins are loaded, get list of all fail_on messages, and enable them
+        linter.enable_fail_on_messages()
+
         if self._output:
             try:
                 with open(self._output, "w") as output:
@@ -392,7 +395,12 @@ def __init__(
             if linter.config.exit_zero:
                 sys.exit(0)
             else:
-                if score_value and score_value >= linter.config.fail_under:
+                if (
+                    score_value
+                    and score_value >= linter.config.fail_under
+                    # detected messages flagged by --fail-on prevent non-zero exit code
+                    and not linter.any_fail_on_issues()
+                ):
                     sys.exit(0)
                 sys.exit(self.linter.msg_status)
 
