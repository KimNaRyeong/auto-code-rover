2025-10-15 15:01:11.495 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-15 15:01:20.973 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=332, output_tokens=12, cost=0.003680
2025-10-15 15:01:30.344 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=512, output_tokens=307, cost=0.014330
2025-10-15 15:01:31.794 | INFO     | registered non reproducing test 0
2025-10-15 15:01:46.674 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1506, output_tokens=651, cost=0.034590
2025-10-15 15:01:47.634 | INFO     | registered non reproducing test 1
2025-10-15 15:02:07.386 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1483, output_tokens=495, cost=0.029680
2025-10-15 15:02:08.737 | INFO     | registered non reproducing test 2
2025-10-15 15:02:08.737 | WARNING  | Failed to write a reproducer test; skipping reproducer tracing
2025-10-15 15:02:08.744 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 15:02:20.064 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=638, output_tokens=357, cost=0.017090
2025-10-15 15:02:20.071 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 15:02:22.494 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=711, output_tokens=59, cost=0.008880
2025-10-15 15:02:22.495 | INFO     | Refactored invocation argument parsing gives different result on 'search_code("\\\\frac")': old result is ['\\\\frac'], new result  is ['\\frac']
2025-10-15 15:02:22.496 | DEBUG    | Extracted a valid json.
2025-10-15 15:02:22.496 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_class(\"Latex\")",
        "search_method(\"parse_latex\")",
        "search_code(\"\\\\frac\")",
        "search_method_in_class(\"simplify\", \"Latex\")"
    ],
    "bug_locations": []
}
2025-10-15 15:02:22.500 | INFO     | Refactored invocation argument parsing gives different result on 'search_code("\\\\frac")': old result is ['\\\\frac'], new result  is ['\\frac']
2025-10-15 15:02:22.646 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-15 15:02:22.646 | DEBUG    | <Agent search> Analyzing search results.
2025-10-15 15:02:50.226 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1924, output_tokens=882, cost=0.045700
2025-10-15 15:02:50.235 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 15:02:58.313 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3022, output_tokens=347, cost=0.040630
2025-10-15 15:02:58.321 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 15:03:13.144 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=701, output_tokens=358, cost=0.017750
2025-10-15 15:03:13.145 | INFO     | Refactored invocation argument parsing gives different result on 'search_code_in_file("\\\\frac", "sympy/parsing/latex/_antlr/latexparser.py")': old result is ['\\\\frac', 'sympy/parsing/latex/_antlr/latexparser.py'], new result  is ['\\frac', 'sympy/parsing/latex/_antlr/latexparser.py']
2025-10-15 15:03:13.147 | DEBUG    | Extracted a valid json.
2025-10-15 15:03:13.147 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_code_in_file(\"\\\\frac\", \"sympy/parsing/latex/_antlr/latexparser.py\")",
        "search_method_in_file(\"convert_relation\", \"sympy/parsing/latex/_parse_latex_antlr.py\")"
    ],
    "bug_locations":[
        {
            "file": "sympy/parsing/latex/_parse_latex_antlr.py",
            "class": "",
            "method": "convert_relation",
            "intended_behavior": "The `convert_relation` method should ensure that when parsing nested fractions (`\\frac`), the entire denominator and numerator are correctly grouped into a single SymPy expression. This means adjusting the parsing logic to recognize the structure of nested fractions and maintain their order of operations as per mathematical standards. The intended fix should ensure that parsing LaTeX fractions like `\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\"` results in `((a**3 + b)/c)/(1/(c**2))` to preserve the correct division operation hierarchy."
        },
        {
            "file": "sympy/parsing/latex/_antlr/latexparser.py",
            "class": "",
            "method": "",
            "intended_behavior": "This file should accurately parse LaTeX expressions containing `\\frac` to account for the entire expression that makes up the numerator and the denominator, especially in cases of nested fractions. The parser rules might need adjustment to ensure that fractions are fully encapsulated as a single unit before being operated upon or used as part of larger expressions. The adjustment would prevent errors like the one described, ensuring mathematical accuracy in the parsed output."
        }
    ]
}
2025-10-15 15:03:13.152 | INFO     | Refactored invocation argument parsing gives different result on 'search_code_in_file("\\\\frac", "sympy/parsing/latex/_antlr/latexparser.py")': old result is ['\\\\frac', 'sympy/parsing/latex/_antlr/latexparser.py'], new result  is ['\\frac', 'sympy/parsing/latex/_antlr/latexparser.py']
2025-10-15 15:03:13.181 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-15 15:03:13.182 | DEBUG    | <Agent search> Analyzing search results.
2025-10-15 15:03:32.141 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3997, output_tokens=694, cost=0.060790
2025-10-15 15:03:32.154 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 15:03:50.413 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=4907, output_tokens=419, cost=0.061640
2025-10-15 15:03:50.421 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 15:03:56.971 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=773, output_tokens=211, cost=0.014060
2025-10-15 15:03:56.972 | DEBUG    | Extracted a valid json.
2025-10-15 15:03:56.972 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations":[
        {
            "file": "sympy/parsing/latex/_parse_latex_antlr.py",
            "class": "",
            "method": "convert_relation",
            "intended_behavior": "The method should ensure that when it receives fractions, the mathematical integrity, especially the hierarchy of operations in nested fractions, is preserved. Adjustments may be needed in how expressions are converted before reaching or within `convert_relation`, ensuring that nested fractions are grouped correctly in the conversion process to SymPy expressions."
        },
        {
            "file": "sympy/parsing/latex/_antlr/latexparser.py",
            "class": "",
            "method": "",
            "intended_behavior": "The intended behavior is to adjust the parsing rules or the subsequent handling of parsed fractions to ensure that nested fractions are correctly translated into their equivalent SymPy structure. This might involve ensuring that the parser groups nested fractions as singular entities, which are then translated accurately."
        }
    ]
}
2025-10-15 15:03:56.983 | DEBUG    | Bug location extracted successfully: [<file>sympy/parsing/latex/_parse_latex_antlr.py</file>
<class>None</class>
<method>convert_relation</method>
<code>
90 def convert_relation(rel):
91     if rel.expr():
92         return convert_expr(rel.expr())
93 
94     lh = convert_relation(rel.relation(0))
95     rh = convert_relation(rel.relation(1))
96     if rel.LT():
97         return sympy.StrictLessThan(lh, rh)
98     elif rel.LTE():
99         return sympy.LessThan(lh, rh)
100     elif rel.GT():
101         return sympy.StrictGreaterThan(lh, rh)
102     elif rel.GTE():
103         return sympy.GreaterThan(lh, rh)
104     elif rel.EQUAL():
105         return sympy.Eq(lh, rh)
106     elif rel.NEQ():
107         return sympy.Ne(lh, rh)

</code><intended_behavior>The method should ensure that when it receives fractions, the mathematical integrity, especially the hierarchy of operations in nested fractions, is preserved. Adjustments may be needed in how expressions are converted before reaching or within `convert_relation`, ensuring that nested fractions are grouped correctly in the conversion process to SymPy expressions.</intended_behavior>, <file>sympy/parsing/latex/_antlr/latexparser.py</file>
<class>None</class>
<method>None</method>
<code>
1 
2 # encoding: utf-8
3 
4 # *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***
5 #
6 # Generated from ../LaTeX.g4, derived from latex2sympy
7 #     latex2sympy is licensed under the MIT license
8 #     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt
9 #
10 # Generated with antlr4
11 #    antlr4 is licensed under the BSD-3-Clause License
12 #    https://github.com/antlr/antlr4/blob/master/LICENSE.txt
13 from __future__ import print_function
14 from antlr4 import *
15 from io import StringIO
16 import sys
17 
18 
19 def serializedATN():
20     with StringIO() as buf:
21         buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
22         buf.write(u"Z\u01d5\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t")
23         buf.write(u"\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
24         buf.write(u"\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4")
25         buf.write(u"\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30")
26         buf.write(u"\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t")
27         buf.write(u"\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$")
28         buf.write(u"\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\3\2\3\2\3\3\3\3\3")
29         buf.write(u"\3\3\3\3\3\3\3\7\3[\n\3\f\3\16\3^\13\3\3\4\3\4\3\4\3")
30         buf.write(u"\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\7\6l\n\6\f\6\16\6")
31         buf.write(u"o\13\6\3\7\3\7\3\7\3\7\3\7\3\7\7\7w\n\7\f\7\16\7z\13")
32         buf.write(u"\7\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0082\n\b\f\b\16\b\u0085")
33         buf.write(u"\13\b\3\t\3\t\3\t\6\t\u008a\n\t\r\t\16\t\u008b\5\t\u008e")
34         buf.write(u"\n\t\3\n\3\n\3\n\3\n\7\n\u0094\n\n\f\n\16\n\u0097\13")
35         buf.write(u"\n\5\n\u0099\n\n\3\13\3\13\7\13\u009d\n\13\f\13\16\13")
36         buf.write(u"\u00a0\13\13\3\f\3\f\7\f\u00a4\n\f\f\f\16\f\u00a7\13")
37         buf.write(u"\f\3\r\3\r\5\r\u00ab\n\r\3\16\3\16\3\16\3\16\3\16\3\16")
38         buf.write(u"\5\16\u00b3\n\16\3\17\3\17\3\17\3\17\5\17\u00b9\n\17")
39         buf.write(u"\3\17\3\17\3\20\3\20\3\20\3\20\5\20\u00c1\n\20\3\20\3")
40         buf.write(u"\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
41         buf.write(u"\5\21\u00cf\n\21\3\21\5\21\u00d2\n\21\7\21\u00d4\n\21")
42         buf.write(u"\f\21\16\21\u00d7\13\21\3\22\3\22\3\22\3\22\3\22\3\22")
43         buf.write(u"\3\22\3\22\3\22\3\22\5\22\u00e3\n\22\3\22\5\22\u00e6")
44         buf.write(u"\n\22\7\22\u00e8\n\22\f\22\16\22\u00eb\13\22\3\23\3\23")
45         buf.write(u"\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u00f5\n\23\3\24\3")
46         buf.write(u"\24\3\24\3\24\3\24\3\24\3\24\5\24\u00fe\n\24\3\25\3\25")
47         buf.write(u"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3")
48         buf.write(u"\25\3\25\3\25\3\25\5\25\u0110\n\25\3\26\3\26\3\26\3\26")
49         buf.write(u"\3\27\3\27\5\27\u0118\n\27\3\27\3\27\3\27\3\27\3\27\5")
50         buf.write(u"\27\u011f\n\27\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31")
51         buf.write(u"\3\32\3\32\3\32\3\32\3\32\3\33\7\33\u012f\n\33\f\33\16")
52         buf.write(u"\33\u0132\13\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3")
53         buf.write(u"\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36")
54         buf.write(u"\3\36\3\36\3\37\3\37\3\37\3\37\3 \3 \3!\3!\5!\u0150\n")
55         buf.write(u"!\3!\5!\u0153\n!\3!\5!\u0156\n!\3!\5!\u0159\n!\5!\u015b")
56         buf.write(u"\n!\3!\3!\3!\3!\3!\5!\u0162\n!\3!\3!\5!\u0166\n!\3!\3")
57         buf.write(u"!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u0173\n!\3!\5!\u0176")
58         buf.write(u"\n!\3!\3!\3!\5!\u017b\n!\3!\3!\3!\3!\3!\5!\u0182\n!\3")
59         buf.write(u"!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u0194")
60         buf.write(u"\n!\3!\3!\3!\3!\3!\3!\5!\u019c\n!\3\"\3\"\3\"\3\"\3\"")
61         buf.write(u"\5\"\u01a3\n\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u01ae\n")
62         buf.write(u"#\3#\3#\3$\3$\3$\3$\3$\5$\u01b7\n$\3%\3%\3&\3&\3&\3&")
63         buf.write(u"\3&\3&\5&\u01c1\n&\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u01c9")
64         buf.write(u"\n\'\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\2\b\4\n\f\16 \"")
65         buf.write(u"*\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60")
66         buf.write(u"\62\64\668:<>@BDFHJLNP\2\13\4\2ORUV\3\2\20\21\5\2\22")
67         buf.write(u"\23ACKK\4\2MMZZ\3\2\34\35\4\2\34\34\36\36\3\2EG\3\2&")
68         buf.write(u":\3\2$%\2\u01f1\2R\3\2\2\2\4T\3\2\2\2\6_\3\2\2\2\bc\3")
69         buf.write(u"\2\2\2\ne\3\2\2\2\fp\3\2\2\2\16{\3\2\2\2\20\u008d\3\2")
70         buf.write(u"\2\2\22\u0098\3\2\2\2\24\u009a\3\2\2\2\26\u00a1\3\2\2")
71         buf.write(u"\2\30\u00aa\3\2\2\2\32\u00ac\3\2\2\2\34\u00b4\3\2\2\2")
72         buf.write(u"\36\u00bc\3\2\2\2 \u00c4\3\2\2\2\"\u00d8\3\2\2\2$\u00f4")
73         buf.write(u"\3\2\2\2&\u00fd\3\2\2\2(\u010f\3\2\2\2*\u0111\3\2\2\2")
74         buf.write(u",\u011e\3\2\2\2.\u0120\3\2\2\2\60\u0124\3\2\2\2\62\u0128")
75         buf.write(u"\3\2\2\2\64\u0130\3\2\2\2\66\u0133\3\2\2\28\u013b\3\2")
76         buf.write(u"\2\2:\u0143\3\2\2\2<\u0147\3\2\2\2>\u014b\3\2\2\2@\u019b")
77         buf.write(u"\3\2\2\2B\u01a2\3\2\2\2D\u01a4\3\2\2\2F\u01b6\3\2\2\2")
78         buf.write(u"H\u01b8\3\2\2\2J\u01ba\3\2\2\2L\u01c2\3\2\2\2N\u01ca")
79         buf.write(u"\3\2\2\2P\u01cf\3\2\2\2RS\5\4\3\2S\3\3\2\2\2TU\b\3\1")
80         buf.write(u"\2UV\5\b\5\2V\\\3\2\2\2WX\f\4\2\2XY\t\2\2\2Y[\5\4\3\5")
81         buf.write(u"ZW\3\2\2\2[^\3\2\2\2\\Z\3\2\2\2\\]\3\2\2\2]\5\3\2\2\2")
82         buf.write(u"^\\\3\2\2\2_`\5\b\5\2`a\7O\2\2ab\5\b\5\2b\7\3\2\2\2c")
83         buf.write(u"d\5\n\6\2d\t\3\2\2\2ef\b\6\1\2fg\5\f\7\2gm\3\2\2\2hi")
84         buf.write(u"\f\4\2\2ij\t\3\2\2jl\5\n\6\5kh\3\2\2\2lo\3\2\2\2mk\3")
85         buf.write(u"\2\2\2mn\3\2\2\2n\13\3\2\2\2om\3\2\2\2pq\b\7\1\2qr\5")
86         buf.write(u"\20\t\2rx\3\2\2\2st\f\4\2\2tu\t\4\2\2uw\5\f\7\5vs\3\2")
87         buf.write(u"\2\2wz\3\2\2\2xv\3\2\2\2xy\3\2\2\2y\r\3\2\2\2zx\3\2\2")
88         buf.write(u"\2{|\b\b\1\2|}\5\22\n\2}\u0083\3\2\2\2~\177\f\4\2\2\177")
89         buf.write(u"\u0080\t\4\2\2\u0080\u0082\5\16\b\5\u0081~\3\2\2\2\u0082")
90         buf.write(u"\u0085\3\2\2\2\u0083\u0081\3\2\2\2\u0083\u0084\3\2\2")
91         buf.write(u"\2\u0084\17\3\2\2\2\u0085\u0083\3\2\2\2\u0086\u0087\t")
92         buf.write(u"\3\2\2\u0087\u008e\5\20\t\2\u0088\u008a\5\24\13\2\u0089")
93         buf.write(u"\u0088\3\2\2\2\u008a\u008b\3\2\2\2\u008b\u0089\3\2\2")
94         buf.write(u"\2\u008b\u008c\3\2\2\2\u008c\u008e\3\2\2\2\u008d\u0086")
95         buf.write(u"\3\2\2\2\u008d\u0089\3\2\2\2\u008e\21\3\2\2\2\u008f\u0090")
96         buf.write(u"\t\3\2\2\u0090\u0099\5\22\n\2\u0091\u0095\5\24\13\2\u0092")
97         buf.write(u"\u0094\5\26\f\2\u0093\u0092\3\2\2\2\u0094\u0097\3\2\2")
98         buf.write(u"\2\u0095\u0093\3\2\2\2\u0095\u0096\3\2\2\2\u0096\u0099")
99         buf.write(u"\3\2\2\2\u0097\u0095\3\2\2\2\u0098\u008f\3\2\2\2\u0098")
100         buf.write(u"\u0091\3\2\2\2\u0099\23\3\2\2\2\u009a\u009e\5 \21\2\u009b")
101         buf.write(u"\u009d\5\30\r\2\u009c\u009b\3\2\2\2\u009d\u00a0\3\2\2")
102         buf.write(u"\2\u009e\u009c\3\2\2\2\u009e\u009f\3\2\2\2\u009f\25\3")
103         buf.write(u"\2\2\2\u00a0\u009e\3\2\2\2\u00a1\u00a5\5\"\22\2\u00a2")
104         buf.write(u"\u00a4\5\30\r\2\u00a3\u00a2\3\2\2\2\u00a4\u00a7\3\2\2")
105         buf.write(u"\2\u00a5\u00a3\3\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\27\3")
106         buf.write(u"\2\2\2\u00a7\u00a5\3\2\2\2\u00a8\u00ab\7Y\2\2\u00a9\u00ab")
107         buf.write(u"\5\32\16\2\u00aa\u00a8\3\2\2\2\u00aa\u00a9\3\2\2\2\u00ab")
108         buf.write(u"\31\3\2\2\2\u00ac\u00b2\7\34\2\2\u00ad\u00b3\5\36\20")
109         buf.write(u"\2\u00ae\u00b3\5\34\17\2\u00af\u00b0\5\36\20\2\u00b0")
110         buf.write(u"\u00b1\5\34\17\2\u00b1\u00b3\3\2\2\2\u00b2\u00ad\3\2")
111         buf.write(u"\2\2\u00b2\u00ae\3\2\2\2\u00b2\u00af\3\2\2\2\u00b3\33")
112         buf.write(u"\3\2\2\2\u00b4\u00b5\7I\2\2\u00b5\u00b8\7\26\2\2\u00b6")
113         buf.write(u"\u00b9\5\b\5\2\u00b7\u00b9\5\6\4\2\u00b8\u00b6\3\2\2")
114         buf.write(u"\2\u00b8\u00b7\3\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00bb")
115         buf.write(u"\7\27\2\2\u00bb\35\3\2\2\2\u00bc\u00bd\7J\2\2\u00bd\u00c0")
116         buf.write(u"\7\26\2\2\u00be\u00c1\5\b\5\2\u00bf\u00c1\5\6\4\2\u00c0")
117         buf.write(u"\u00be\3\2\2\2\u00c0\u00bf\3\2\2\2\u00c1\u00c2\3\2\2")
118         buf.write(u"\2\u00c2\u00c3\7\27\2\2\u00c3\37\3\2\2\2\u00c4\u00c5")
119         buf.write(u"\b\21\1\2\u00c5\u00c6\5$\23\2\u00c6\u00d5\3\2\2\2\u00c7")
120         buf.write(u"\u00c8\f\4\2\2\u00c8\u00ce\7J\2\2\u00c9\u00cf\5,\27\2")
121         buf.write(u"\u00ca\u00cb\7\26\2\2\u00cb\u00cc\5\b\5\2\u00cc\u00cd")
122         buf.write(u"\7\27\2\2\u00cd\u00cf\3\2\2\2\u00ce\u00c9\3\2\2\2\u00ce")
123         buf.write(u"\u00ca\3\2\2\2\u00cf\u00d1\3\2\2\2\u00d0\u00d2\5J&\2")
124         buf.write(u"\u00d1\u00d0\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d4")
125         buf.write(u"\3\2\2\2\u00d3\u00c7\3\2\2\2\u00d4\u00d7\3\2\2\2\u00d5")
126         buf.write(u"\u00d3\3\2\2\2\u00d5\u00d6\3\2\2\2\u00d6!\3\2\2\2\u00d7")
127         buf.write(u"\u00d5\3\2\2\2\u00d8\u00d9\b\22\1\2\u00d9\u00da\5&\24")
128         buf.write(u"\2\u00da\u00e9\3\2\2\2\u00db\u00dc\f\4\2\2\u00dc\u00e2")
129         buf.write(u"\7J\2\2\u00dd\u00e3\5,\27\2\u00de\u00df\7\26\2\2\u00df")
130         buf.write(u"\u00e0\5\b\5\2\u00e0\u00e1\7\27\2\2\u00e1\u00e3\3\2\2")
131         buf.write(u"\2\u00e2\u00dd\3\2\2\2\u00e2\u00de\3\2\2\2\u00e3\u00e5")
132         buf.write(u"\3\2\2\2\u00e4\u00e6\5J&\2\u00e5\u00e4\3\2\2\2\u00e5")
133         buf.write(u"\u00e6\3\2\2\2\u00e6\u00e8\3\2\2\2\u00e7\u00db\3\2\2")
134         buf.write(u"\2\u00e8\u00eb\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9\u00ea")
135         buf.write(u"\3\2\2\2\u00ea#\3\2\2\2\u00eb\u00e9\3\2\2\2\u00ec\u00f5")
136         buf.write(u"\5(\25\2\u00ed\u00f5\5*\26\2\u00ee\u00f5\5@!\2\u00ef")
137         buf.write(u"\u00f5\5,\27\2\u00f0\u00f5\5\66\34\2\u00f1\u00f5\58\35")
138         buf.write(u"\2\u00f2\u00f5\5:\36\2\u00f3\u00f5\5<\37\2\u00f4\u00ec")
139         buf.write(u"\3\2\2\2\u00f4\u00ed\3\2\2\2\u00f4\u00ee\3\2\2\2\u00f4")
140         buf.write(u"\u00ef\3\2\2\2\u00f4\u00f0\3\2\2\2\u00f4\u00f1\3\2\2")
141         buf.write(u"\2\u00f4\u00f2\3\2\2\2\u00f4\u00f3\3\2\2\2\u00f5%\3\2")
142         buf.write(u"\2\2\u00f6\u00fe\5(\25\2\u00f7\u00fe\5*\26\2\u00f8\u00fe")
143         buf.write(u"\5,\27\2\u00f9\u00fe\5\66\34\2\u00fa\u00fe\58\35\2\u00fb")
144         buf.write(u"\u00fe\5:\36\2\u00fc\u00fe\5<\37\2\u00fd\u00f6\3\2\2")
145         buf.write(u"\2\u00fd\u00f7\3\2\2\2\u00fd\u00f8\3\2\2\2\u00fd\u00f9")
146         buf.write(u"\3\2\2\2\u00fd\u00fa\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fd")
147         buf.write(u"\u00fc\3\2\2\2\u00fe\'\3\2\2\2\u00ff\u0100\7\24\2\2\u0100")
148         buf.write(u"\u0101\5\b\5\2\u0101\u0102\7\25\2\2\u0102\u0110\3\2\2")
149         buf.write(u"\2\u0103\u0104\7\32\2\2\u0104\u0105\5\b\5\2\u0105\u0106")
150         buf.write(u"\7\33\2\2\u0106\u0110\3\2\2\2\u0107\u0108\7\26\2\2\u0108")
151         buf.write(u"\u0109\5\b\5\2\u0109\u010a\7\27\2\2\u010a\u0110\3\2\2")
152         buf.write(u"\2\u010b\u010c\7\30\2\2\u010c\u010d\5\b\5\2\u010d\u010e")
153         buf.write(u"\7\31\2\2\u010e\u0110\3\2\2\2\u010f\u00ff\3\2\2\2\u010f")
154         buf.write(u"\u0103\3\2\2\2\u010f\u0107\3\2\2\2\u010f\u010b\3\2\2")
155         buf.write(u"\2\u0110)\3\2\2\2\u0111\u0112\7\34\2\2\u0112\u0113\5")
156         buf.write(u"\b\5\2\u0113\u0114\7\34\2\2\u0114+\3\2\2\2\u0115\u0117")
157         buf.write(u"\t\5\2\2\u0116\u0118\5J&\2\u0117\u0116\3\2\2\2\u0117")
158         buf.write(u"\u0118\3\2\2\2\u0118\u011f\3\2\2\2\u0119\u011f\7N\2\2")
159         buf.write(u"\u011a\u011f\7L\2\2\u011b\u011f\5\62\32\2\u011c\u011f")
160         buf.write(u"\5.\30\2\u011d\u011f\5\60\31\2\u011e\u0115\3\2\2\2\u011e")
161         buf.write(u"\u0119\3\2\2\2\u011e\u011a\3\2\2\2\u011e\u011b\3\2\2")
162         buf.write(u"\2\u011e\u011c\3\2\2\2\u011e\u011d\3\2\2\2\u011f-\3\2")
163         buf.write(u"\2\2\u0120\u0121\7\37\2\2\u0121\u0122\5\b\5\2\u0122\u0123")
164         buf.write(u"\t\6\2\2\u0123/\3\2\2\2\u0124\u0125\t\7\2\2\u0125\u0126")
165         buf.write(u"\5\b\5\2\u0126\u0127\7 \2\2\u0127\61\3\2\2\2\u0128\u0129")
166         buf.write(u"\7H\2\2\u0129\u012a\7\26\2\2\u012a\u012b\5\64\33\2\u012b")
167         buf.write(u"\u012c\7\27\2\2\u012c\63\3\2\2\2\u012d\u012f\7M\2\2\u012e")
168         buf.write(u"\u012d\3\2\2\2\u012f\u0132\3\2\2\2\u0130\u012e\3\2\2")
169         buf.write(u"\2\u0130\u0131\3\2\2\2\u0131\65\3\2\2\2\u0132\u0130\3")
170         buf.write(u"\2\2\2\u0133\u0134\7D\2\2\u0134\u0135\7\26\2\2\u0135")
171         buf.write(u"\u0136\5\b\5\2\u0136\u0137\7\27\2\2\u0137\u0138\7\26")
172         buf.write(u"\2\2\u0138\u0139\5\b\5\2\u0139\u013a\7\27\2\2\u013a\67")
173         buf.write(u"\3\2\2\2\u013b\u013c\t\b\2\2\u013c\u013d\7\26\2\2\u013d")
174         buf.write(u"\u013e\5\b\5\2\u013e\u013f\7\27\2\2\u013f\u0140\7\26")
175         buf.write(u"\2\2\u0140\u0141\5\b\5\2\u0141\u0142\7\27\2\2\u01429")
176         buf.write(u"\3\2\2\2\u0143\u0144\7;\2\2\u0144\u0145\5\b\5\2\u0145")
177         buf.write(u"\u0146\7<\2\2\u0146;\3\2\2\2\u0147\u0148\7=\2\2\u0148")
178         buf.write(u"\u0149\5\b\5\2\u0149\u014a\7>\2\2\u014a=\3\2\2\2\u014b")
179         buf.write(u"\u014c\t\t\2\2\u014c?\3\2\2\2\u014d\u015a\5> \2\u014e")
180         buf.write(u"\u0150\5J&\2\u014f\u014e\3\2\2\2\u014f\u0150\3\2\2\2")
181         buf.write(u"\u0150\u0152\3\2\2\2\u0151\u0153\5L\'\2\u0152\u0151\3")
182         buf.write(u"\2\2\2\u0152\u0153\3\2\2\2\u0153\u015b\3\2\2\2\u0154")
183         buf.write(u"\u0156\5L\'\2\u0155\u0154\3\2\2\2\u0155\u0156\3\2\2\2")
184         buf.write(u"\u0156\u0158\3\2\2\2\u0157\u0159\5J&\2\u0158\u0157\3")
185         buf.write(u"\2\2\2\u0158\u0159\3\2\2\2\u0159\u015b\3\2\2\2\u015a")
186         buf.write(u"\u014f\3\2\2\2\u015a\u0155\3\2\2\2\u015b\u0161\3\2\2")
187         buf.write(u"\2\u015c\u015d\7\24\2\2\u015d\u015e\5F$\2\u015e\u015f")
188         buf.write(u"\7\25\2\2\u015f\u0162\3\2\2\2\u0160\u0162\5H%\2\u0161")
189         buf.write(u"\u015c\3\2\2\2\u0161\u0160\3\2\2\2\u0162\u019c\3\2\2")
190         buf.write(u"\2\u0163\u0165\t\5\2\2\u0164\u0166\5J&\2\u0165\u0164")
191         buf.write(u"\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0167\3\2\2\2\u0167")
192         buf.write(u"\u0168\7\24\2\2\u0168\u0169\5B\"\2\u0169\u016a\7\25\2")
193         buf.write(u"\2\u016a\u019c\3\2\2\2\u016b\u0172\7#\2\2\u016c\u016d")
194         buf.write(u"\5J&\2\u016d\u016e\5L\'\2\u016e\u0173\3\2\2\2\u016f\u0170")
195         buf.write(u"\5L\'\2\u0170\u0171\5J&\2\u0171\u0173\3\2\2\2\u0172\u016c")
196         buf.write(u"\3\2\2\2\u0172\u016f\3\2\2\2\u0172\u0173\3\2\2\2\u0173")
197         buf.write(u"\u017a\3\2\2\2\u0174\u0176\5\n\6\2\u0175\u0174\3\2\2")
198         buf.write(u"\2\u0175\u0176\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u017b")
199         buf.write(u"\7L\2\2\u0178\u017b\5\66\34\2\u0179\u017b\5\n\6\2\u017a")
200         buf.write(u"\u0175\3\2\2\2\u017a\u0178\3\2\2\2\u017a\u0179\3\2\2")
201         buf.write(u"\2\u017b\u019c\3\2\2\2\u017c\u0181\7?\2\2\u017d\u017e")
202         buf.write(u"\7\32\2\2\u017e\u017f\5\b\5\2\u017f\u0180\7\33\2\2\u0180")
203         buf.write(u"\u0182\3\2\2\2\u0181\u017d\3\2\2\2\u0181\u0182\3\2\2")
204         buf.write(u"\2\u0182\u0183\3\2\2\2\u0183\u0184\7\26\2\2\u0184\u0185")
205         buf.write(u"\5\b\5\2\u0185\u0186\7\27\2\2\u0186\u019c\3\2\2\2\u0187")
206         buf.write(u"\u0188\7@\2\2\u0188\u0189\7\26\2\2\u0189\u018a\5\b\5")
207         buf.write(u"\2\u018a\u018b\7\27\2\2\u018b\u019c\3\2\2\2\u018c\u0193")
208         buf.write(u"\t\n\2\2\u018d\u018e\5N(\2\u018e\u018f\5L\'\2\u018f\u0194")
209         buf.write(u"\3\2\2\2\u0190\u0191\5L\'\2\u0191\u0192\5N(\2\u0192\u0194")
210         buf.write(u"\3\2\2\2\u0193\u018d\3\2\2\2\u0193\u0190\3\2\2\2\u0194")
211         buf.write(u"\u0195\3\2\2\2\u0195\u0196\5\f\7\2\u0196\u019c\3\2\2")
212         buf.write(u"\2\u0197\u0198\7!\2\2\u0198\u0199\5D#\2\u0199\u019a\5")
213         buf.write(u"\f\7\2\u019a\u019c\3\2\2\2\u019b\u014d\3\2\2\2\u019b")
214         buf.write(u"\u0163\3\2\2\2\u019b\u016b\3\2\2\2\u019b\u017c\3\2\2")
215         buf.write(u"\2\u019b\u0187\3\2\2\2\u019b\u018c\3\2\2\2\u019b\u0197")
216         buf.write(u"\3\2\2\2\u019cA\3\2\2\2\u019d\u019e\5\b\5\2\u019e\u019f")
217         buf.write(u"\7\3\2\2\u019f\u01a0\5B\"\2\u01a0\u01a3\3\2\2\2\u01a1")
218         buf.write(u"\u01a3\5\b\5\2\u01a2\u019d\3\2\2\2\u01a2\u01a1\3\2\2")
219         buf.write(u"\2\u01a3C\3\2\2\2\u01a4\u01a5\7I\2\2\u01a5\u01a6\7\26")
220         buf.write(u"\2\2\u01a6\u01a7\t\5\2\2\u01a7\u01a8\7\"\2\2\u01a8\u01ad")
221         buf.write(u"\5\b\5\2\u01a9\u01aa\7J\2\2\u01aa\u01ab\7\26\2\2\u01ab")
222         buf.write(u"\u01ac\t\3\2\2\u01ac\u01ae\7\27\2\2\u01ad\u01a9\3\2\2")
223         buf.write(u"\2\u01ad\u01ae\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b0")
224         buf.write(u"\7\27\2\2\u01b0E\3\2\2\2\u01b1\u01b7\5\b\5\2\u01b2\u01b3")
225         buf.write(u"\5\b\5\2\u01b3\u01b4\7\3\2\2\u01b4\u01b5\5F$\2\u01b5")
226         buf.write(u"\u01b7\3\2\2\2\u01b6\u01b1\3\2\2\2\u01b6\u01b2\3\2\2")
227         buf.write(u"\2\u01b7G\3\2\2\2\u01b8\u01b9\5\16\b\2\u01b9I\3\2\2\2")
228         buf.write(u"\u01ba\u01c0\7I\2\2\u01bb\u01c1\5,\27\2\u01bc\u01bd\7")
229         buf.write(u"\26\2\2\u01bd\u01be\5\b\5\2\u01be\u01bf\7\27\2\2\u01bf")
230         buf.write(u"\u01c1\3\2\2\2\u01c0\u01bb\3\2\2\2\u01c0\u01bc\3\2\2")
231         buf.write(u"\2\u01c1K\3\2\2\2\u01c2\u01c8\7J\2\2\u01c3\u01c9\5,\27")
232         buf.write(u"\2\u01c4\u01c5\7\26\2\2\u01c5\u01c6\5\b\5\2\u01c6\u01c7")
233         buf.write(u"\7\27\2\2\u01c7\u01c9\3\2\2\2\u01c8\u01c3\3\2\2\2\u01c8")
234         buf.write(u"\u01c4\3\2\2\2\u01c9M\3\2\2\2\u01ca\u01cb\7I\2\2\u01cb")
235         buf.write(u"\u01cc\7\26\2\2\u01cc\u01cd\5\6\4\2\u01cd\u01ce\7\27")
236         buf.write(u"\2\2\u01ceO\3\2\2\2\u01cf\u01d0\7I\2\2\u01d0\u01d1\7")
237         buf.write(u"\26\2\2\u01d1\u01d2\5\6\4\2\u01d2\u01d3\7\27\2\2\u01d3")
238         buf.write(u"Q\3\2\2\2.\\mx\u0083\u008b\u008d\u0095\u0098\u009e\u00a5")
239         buf.write(u"\u00aa\u00b2\u00b8\u00c0\u00ce\u00d1\u00d5\u00e2\u00e5")
240         buf.write(u"\u00e9\u00f4\u00fd\u010f\u0117\u011e\u0130\u014f\u0152")
241         buf.write(u"\u0155\u0158\u015a\u0161\u0165\u0172\u0175\u017a\u0181")
242         buf.write(u"\u0193\u019b\u01a2\u01ad\u01b6\u01c0\u01c8")
243         return buf.getvalue()
244 
245 
246 class LaTeXParser ( Parser ):
247 
248     grammarFileName = "LaTeX.g4"
249 
250     atn = ATNDeserializer().deserialize(serializedATN())
251 
252     decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]
253 
254     sharedContextCache = PredictionContextCache()
255 
256     literalNames = [ u"<INVALID>", u"','", u"<INVALID>", u"<INVALID>", u"<INVALID>",
257                      u"<INVALID>", u"'\\quad'", u"'\\qquad'", u"<INVALID>",
258                      u"'\\negmedspace'", u"'\\negthickspace'", u"'\\left'",
259                      u"'\\right'", u"<INVALID>", u"'+'", u"'-'", u"'*'",
260                      u"'/'", u"'('", u"')'", u"'{'", u"'}'", u"'\\{'", u"'\\}'",
261                      u"'['", u"']'", u"'|'", u"'\\right|'", u"'\\left|'",
262                      u"'\\langle'", u"'\\rangle'", u"'\\lim'", u"<INVALID>",
263                      u"'\\int'", u"'\\sum'", u"'\\prod'", u"'\\exp'", u"'\\log'",
264                      u"'\\ln'", u"'\\sin'", u"'\\cos'", u"'\\tan'", u"'\\csc'",
265                      u"'\\sec'", u"'\\cot'", u"'\\arcsin'", u"'\\arccos'",
266                      u"'\\arctan'", u"'\\arccsc'", u"'\\arcsec'", u"'\\arccot'",
267                      u"'\\sinh'", u"'\\cosh'", u"'\\tanh'", u"'\\arsinh'",
268                      u"'\\arcosh'", u"'\\artanh'", u"'\\lfloor'", u"'\\rfloor'",
269                      u"'\\lceil'", u"'\\rceil'", u"'\\sqrt'", u"'\\overline'",
270                      u"'\\times'", u"'\\cdot'", u"'\\div'", u"'\\frac'",
271                      u"'\\binom'", u"'\\dbinom'", u"'\\tbinom'", u"'\\mathit'",
272                      u"'_'", u"'^'", u"':'", u"<INVALID>", u"<INVALID>",
273                      u"<INVALID>", u"<INVALID>", u"'\\neq'", u"'<'", u"<INVALID>",
274                      u"'\\leqq'", u"'\\leqslant'", u"'>'", u"<INVALID>",
275                      u"'\\geqq'", u"'\\geqslant'", u"'!'" ]
276 
277     symbolicNames = [ u"<INVALID>", u"<INVALID>", u"WS", u"THINSPACE", u"MEDSPACE",
278                       u"THICKSPACE", u"QUAD", u"QQUAD", u"NEGTHINSPACE",
279                       u"NEGMEDSPACE", u"NEGTHICKSPACE", u"CMD_LEFT", u"CMD_RIGHT",
280                       u"IGNORE", u"ADD", u"SUB", u"MUL", u"DIV", u"L_PAREN",
281                       u"R_PAREN", u"L_BRACE", u"R_BRACE", u"L_BRACE_LITERAL",
282                       u"R_BRACE_LITERAL", u"L_BRACKET", u"R_BRACKET", u"BAR",
283                       u"R_BAR", u"L_BAR", u"L_ANGLE", u"R_ANGLE", u"FUNC_LIM",
284                       u"LIM_APPROACH_SYM", u"FUNC_INT", u"FUNC_SUM", u"FUNC_PROD",
285                       u"FUNC_EXP", u"FUNC_LOG", u"FUNC_LN", u"FUNC_SIN",
286                       u"FUNC_COS", u"FUNC_TAN", u"FUNC_CSC", u"FUNC_SEC",
287                       u"FUNC_COT", u"FUNC_ARCSIN", u"FUNC_ARCCOS", u"FUNC_ARCTAN",
288                       u"FUNC_ARCCSC", u"FUNC_ARCSEC", u"FUNC_ARCCOT", u"FUNC_SINH",
289                       u"FUNC_COSH", u"FUNC_TANH", u"FUNC_ARSINH", u"FUNC_ARCOSH",
290                       u"FUNC_ARTANH", u"L_FLOOR", u"R_FLOOR", u"L_CEIL",
291                       u"R_CEIL", u"FUNC_SQRT", u"FUNC_OVERLINE", u"CMD_TIMES",
292                       u"CMD_CDOT", u"CMD_DIV", u"CMD_FRAC", u"CMD_BINOM",
293                       u"CMD_DBINOM", u"CMD_TBINOM", u"CMD_MATHIT", u"UNDERSCORE",
294                       u"CARET", u"COLON", u"DIFFERENTIAL", u"LETTER", u"NUMBER",
295                       u"EQUAL", u"NEQ", u"LT", u"LTE", u"LTE_Q", u"LTE_S",
296                       u"GT", u"GTE", u"GTE_Q", u"GTE_S", u"BANG", u"SYMBOL" ]
297 
298     RULE_math = 0
299     RULE_relation = 1
300     RULE_equality = 2
301     RULE_expr = 3
302     RULE_additive = 4
303     RULE_mp = 5
304     RULE_mp_nofunc = 6
305     RULE_unary = 7
306     RULE_unary_nofunc = 8
307     RULE_postfix = 9
308     RULE_postfix_nofunc = 10
309     RULE_postfix_op = 11
310     RULE_eval_at = 12
311     RULE_eval_at_sub = 13
312     RULE_eval_at_sup = 14
313     RULE_exp = 15
314     RULE_exp_nofunc = 16
315     RULE_comp = 17
316     RULE_comp_nofunc = 18
317     RULE_group = 19
318     RULE_abs_group = 20
319     RULE_atom = 21
320     RULE_bra = 22
321     RULE_ket = 23
322     RULE_mathit = 24
323     RULE_mathit_text = 25
324     RULE_frac = 26
325     RULE_binom = 27
326     RULE_floor = 28
327     RULE_ceil = 29
328     RULE_func_normal = 30
329     RULE_func = 31
330     RULE_args = 32
331     RULE_limit_sub = 33
332     RULE_func_arg = 34
333     RULE_func_arg_noparens = 35
334     RULE_subexpr = 36
335     RULE_supexpr = 37
336     RULE_subeq = 38
337     RULE_supeq = 39
338 
339     ruleNames =  [ u"math", u"relation", u"equality", u"expr", u"additive",
340                    u"mp", u"mp_nofunc", u"unary", u"unary_nofunc", u"postfix",
341                    u"postfix_nofunc", u"postfix_op", u"eval_at", u"eval_at_sub",
342                    u"eval_at_sup", u"exp", u"exp_nofunc", u"comp", u"comp_nofunc",
343                    u"group", u"abs_group", u"atom", u"bra", u"ket", u"mathit",
344                    u"mathit_text", u"frac", u"binom", u"floor", u"ceil",
345                    u"func_normal", u"func", u"args", u"limit_sub", u"func_arg",
346                    u"func_arg_noparens", u"subexpr", u"supexpr", u"subeq",
347                    u"supeq" ]
348 
349     EOF = Token.EOF
350     T__0=1
351     WS=2
352     THINSPACE=3
353     MEDSPACE=4
354     THICKSPACE=5
355     QUAD=6
356     QQUAD=7
357     NEGTHINSPACE=8
358     NEGMEDSPACE=9
359     NEGTHICKSPACE=10
360     CMD_LEFT=11
361     CMD_RIGHT=12
362     IGNORE=13
363     ADD=14
364     SUB=15
365     MUL=16
366     DIV=17
367     L_PAREN=18
368     R_PAREN=19
369     L_BRACE=20
370     R_BRACE=21
371     L_BRACE_LITERAL=22
372     R_BRACE_LITERAL=23
373     L_BRACKET=24
374     R_BRACKET=25
375     BAR=26
376     R_BAR=27
377     L_BAR=28
378     L_ANGLE=29
379     R_ANGLE=30
380     FUNC_LIM=31
381     LIM_APPROACH_SYM=32
382     FUNC_INT=33
383     FUNC_SUM=34
384     FUNC_PROD=35
385     FUNC_EXP=36
386     FUNC_LOG=37
387     FUNC_LN=38
388     FUNC_SIN=39
389     FUNC_COS=40
390     FUNC_TAN=41
391     FUNC_CSC=42
392     FUNC_SEC=43
393     FUNC_COT=44
394     FUNC_ARCSIN=45
395     FUNC_ARCCOS=46
396     FUNC_ARCTAN=47
397     FUNC_ARCCSC=48
398     FUNC_ARCSEC=49
399     FUNC_ARCCOT=50
400     FUNC_SINH=51
401     FUNC_COSH=52
402     FUNC_TANH=53
403     FUNC_ARSINH=54
404     FUNC_ARCOSH=55
405     FUNC_ARTANH=56
406     L_FLOOR=57
407     R_FLOOR=58
408     L_CEIL=59
409     R_CEIL=60
410     FUNC_SQRT=61
411     FUNC_OVERLINE=62
412     CMD_TIMES=63
413     CMD_CDOT=64
414     CMD_DIV=65
415     CMD_FRAC=66
416     CMD_BINOM=67
417     CMD_DBINOM=68
418     CMD_TBINOM=69
419     CMD_MATHIT=70
420     UNDERSCORE=71
421     CARET=72
422     COLON=73
423     DIFFERENTIAL=74
424     LETTER=75
425     NUMBER=76
426     EQUAL=77
427     NEQ=78
428     LT=79
429     LTE=80
430     LTE_Q=81
431     LTE_S=82
432     GT=83
433     GTE=84
434     GTE_Q=85
435     GTE_S=86
436     BANG=87
437     SYMBOL=88
438 
439     def __init__(self, input, output=sys.stdout):
440         super(LaTeXParser, self).__init__(input, output=output)
441         self.checkVersion("4.7.2")
442         self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
443         self._predicates = None
444 
445 
446 
447 
448     class MathContext(ParserRuleContext):
449 
450         def __init__(self, parser, parent=None, invokingState=-1):
451             super(LaTeXParser.MathContext, self).__init__(parent, invokingState)
452             self.parser = parser
453 
454         def relation(self):
455             return self.getTypedRuleContext(LaTeXParser.RelationContext,0)
456 
457 
458         def getRuleIndex(self):
459             return LaTeXParser.RULE_math
460 
461 
462 
463 
464     def math(self):
465 
466         localctx = LaTeXParser.MathContext(self, self._ctx, self.state)
467         self.enterRule(localctx, 0, self.RULE_math)
468         try:
469             self.enterOuterAlt(localctx, 1)
470             self.state = 80
471             self.relation(0)
472         except RecognitionException as re:
473             localctx.exception = re
474             self._errHandler.reportError(self, re)
475             self._errHandler.recover(self, re)
476         finally:
477             self.exitRule()
478         return localctx
479 
480 
481     class RelationContext(ParserRuleContext):
482 
483         def __init__(self, parser, parent=None, invokingState=-1):
484             super(LaTeXParser.RelationContext, self).__init__(parent, invokingState)
485             self.parser = parser
486 
487         def expr(self):
488             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
489 
490 
491         def relation(self, i=None):
492             if i is None:
493                 return self.getTypedRuleContexts(LaTeXParser.RelationContext)
494             else:
495                 return self.getTypedRuleContext(LaTeXParser.RelationContext,i)
496 
497 
498         def EQUAL(self):
499             return self.getToken(LaTeXParser.EQUAL, 0)
500 
501         def LT(self):
502             return self.getToken(LaTeXParser.LT, 0)
503 
504         def LTE(self):
505             return self.getToken(LaTeXParser.LTE, 0)
506 
507         def GT(self):
508             return self.getToken(LaTeXParser.GT, 0)
509 
510         def GTE(self):
511             return self.getToken(LaTeXParser.GTE, 0)
512 
513         def NEQ(self):
514             return self.getToken(LaTeXParser.NEQ, 0)
515 
516         def getRuleIndex(self):
517             return LaTeXParser.RULE_relation
518 
519 
520 
521     def relation(self, _p=0):
522         _parentctx = self._ctx
523         _parentState = self.state
524         localctx = LaTeXParser.RelationContext(self, self._ctx, _parentState)
525         _prevctx = localctx
526         _startState = 2
527         self.enterRecursionRule(localctx, 2, self.RULE_relation, _p)
528         self._la = 0 # Token type
529         try:
530             self.enterOuterAlt(localctx, 1)
531             self.state = 83
532             self.expr()
533             self._ctx.stop = self._input.LT(-1)
534             self.state = 90
535             self._errHandler.sync(self)
536             _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
537             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
538                 if _alt==1:
539                     if self._parseListeners is not None:
540                         self.triggerExitRuleEvent()
541                     _prevctx = localctx
542                     localctx = LaTeXParser.RelationContext(self, _parentctx, _parentState)
543                     self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
544                     self.state = 85
545                     if not self.precpred(self._ctx, 2):
546                         from antlr4.error.Errors import FailedPredicateException
547                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
548                     self.state = 86
549                     _la = self._input.LA(1)
550                     if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (LaTeXParser.EQUAL - 77)) | (1 << (LaTeXParser.NEQ - 77)) | (1 << (LaTeXParser.LT - 77)) | (1 << (LaTeXParser.LTE - 77)) | (1 << (LaTeXParser.GT - 77)) | (1 << (LaTeXParser.GTE - 77)))) != 0)):
551                         self._errHandler.recoverInline(self)
552                     else:
553                         self._errHandler.reportMatch(self)
554                         self.consume()
555                     self.state = 87
556                     self.relation(3)
557                 self.state = 92
558                 self._errHandler.sync(self)
559                 _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
560 
561         except RecognitionException as re:
562             localctx.exception = re
563             self._errHandler.reportError(self, re)
564             self._errHandler.recover(self, re)
565         finally:
566             self.unrollRecursionContexts(_parentctx)
567         return localctx
568 
569 
570     class EqualityContext(ParserRuleContext):
571 
572         def __init__(self, parser, parent=None, invokingState=-1):
573             super(LaTeXParser.EqualityContext, self).__init__(parent, invokingState)
574             self.parser = parser
575 
576         def expr(self, i=None):
577             if i is None:
578                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
579             else:
580                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
581 
582 
583         def EQUAL(self):
584             return self.getToken(LaTeXParser.EQUAL, 0)
585 
586         def getRuleIndex(self):
587             return LaTeXParser.RULE_equality
588 
589 
590 
591 
592     def equality(self):
593 
594         localctx = LaTeXParser.EqualityContext(self, self._ctx, self.state)
595         self.enterRule(localctx, 4, self.RULE_equality)
596         try:
597             self.enterOuterAlt(localctx, 1)
598             self.state = 93
599             self.expr()
600             self.state = 94
601             self.match(LaTeXParser.EQUAL)
602             self.state = 95
603             self.expr()
604         except RecognitionException as re:
605             localctx.exception = re
606             self._errHandler.reportError(self, re)
607             self._errHandler.recover(self, re)
608         finally:
609             self.exitRule()
610         return localctx
611 
612 
613     class ExprContext(ParserRuleContext):
614 
615         def __init__(self, parser, parent=None, invokingState=-1):
616             super(LaTeXParser.ExprContext, self).__init__(parent, invokingState)
617             self.parser = parser
618 
619         def additive(self):
620             return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)
621 
622 
623         def getRuleIndex(self):
624             return LaTeXParser.RULE_expr
625 
626 
627 
628 
629     def expr(self):
630 
631         localctx = LaTeXParser.ExprContext(self, self._ctx, self.state)
632         self.enterRule(localctx, 6, self.RULE_expr)
633         try:
634             self.enterOuterAlt(localctx, 1)
635             self.state = 97
636             self.additive(0)
637         except RecognitionException as re:
638             localctx.exception = re
639             self._errHandler.reportError(self, re)
640             self._errHandler.recover(self, re)
641         finally:
642             self.exitRule()
643         return localctx
644 
645 
646     class AdditiveContext(ParserRuleContext):
647 
648         def __init__(self, parser, parent=None, invokingState=-1):
649             super(LaTeXParser.AdditiveContext, self).__init__(parent, invokingState)
650             self.parser = parser
651 
652         def mp(self):
653             return self.getTypedRuleContext(LaTeXParser.MpContext,0)
654 
655 
656         def additive(self, i=None):
657             if i is None:
658                 return self.getTypedRuleContexts(LaTeXParser.AdditiveContext)
659             else:
660                 return self.getTypedRuleContext(LaTeXParser.AdditiveContext,i)
661 
662 
663         def ADD(self):
664             return self.getToken(LaTeXParser.ADD, 0)
665 
666         def SUB(self):
667             return self.getToken(LaTeXParser.SUB, 0)
668 
669         def getRuleIndex(self):
670             return LaTeXParser.RULE_additive
671 
672 
673 
674     def additive(self, _p=0):
675         _parentctx = self._ctx
676         _parentState = self.state
677         localctx = LaTeXParser.AdditiveContext(self, self._ctx, _parentState)
678         _prevctx = localctx
679         _startState = 8
680         self.enterRecursionRule(localctx, 8, self.RULE_additive, _p)
681         self._la = 0 # Token type
682         try:
683             self.enterOuterAlt(localctx, 1)
684             self.state = 100
685             self.mp(0)
686             self._ctx.stop = self._input.LT(-1)
687             self.state = 107
688             self._errHandler.sync(self)
689             _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
690             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
691                 if _alt==1:
692                     if self._parseListeners is not None:
693                         self.triggerExitRuleEvent()
694                     _prevctx = localctx
695                     localctx = LaTeXParser.AdditiveContext(self, _parentctx, _parentState)
696                     self.pushNewRecursionContext(localctx, _startState, self.RULE_additive)
697                     self.state = 102
698                     if not self.precpred(self._ctx, 2):
699                         from antlr4.error.Errors import FailedPredicateException
700                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
701                     self.state = 103
702                     _la = self._input.LA(1)
703                     if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
704                         self._errHandler.recoverInline(self)
705                     else:
706                         self._errHandler.reportMatch(self)
707                         self.consume()
708                     self.state = 104
709                     self.additive(3)
710                 self.state = 109
711                 self._errHandler.sync(self)
712                 _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
713 
714         except RecognitionException as re:
715             localctx.exception = re
716             self._errHandler.reportError(self, re)
717             self._errHandler.recover(self, re)
718         finally:
719             self.unrollRecursionContexts(_parentctx)
720         return localctx
721 
722 
723     class MpContext(ParserRuleContext):
724 
725         def __init__(self, parser, parent=None, invokingState=-1):
726             super(LaTeXParser.MpContext, self).__init__(parent, invokingState)
727             self.parser = parser
728 
729         def unary(self):
730             return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)
731 
732 
733         def mp(self, i=None):
734             if i is None:
735                 return self.getTypedRuleContexts(LaTeXParser.MpContext)
736             else:
737                 return self.getTypedRuleContext(LaTeXParser.MpContext,i)
738 
739 
740         def MUL(self):
741             return self.getToken(LaTeXParser.MUL, 0)
742 
743         def CMD_TIMES(self):
744             return self.getToken(LaTeXParser.CMD_TIMES, 0)
745 
746         def CMD_CDOT(self):
747             return self.getToken(LaTeXParser.CMD_CDOT, 0)
748 
749         def DIV(self):
750             return self.getToken(LaTeXParser.DIV, 0)
751 
752         def CMD_DIV(self):
753             return self.getToken(LaTeXParser.CMD_DIV, 0)
754 
755         def COLON(self):
756             return self.getToken(LaTeXParser.COLON, 0)
757 
758         def getRuleIndex(self):
759             return LaTeXParser.RULE_mp
760 
761 
762 
763     def mp(self, _p=0):
764         _parentctx = self._ctx
765         _parentState = self.state
766         localctx = LaTeXParser.MpContext(self, self._ctx, _parentState)
767         _prevctx = localctx
768         _startState = 10
769         self.enterRecursionRule(localctx, 10, self.RULE_mp, _p)
770         self._la = 0 # Token type
771         try:
772             self.enterOuterAlt(localctx, 1)
773             self.state = 111
774             self.unary()
775             self._ctx.stop = self._input.LT(-1)
776             self.state = 118
777             self._errHandler.sync(self)
778             _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
779             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
780                 if _alt==1:
781                     if self._parseListeners is not None:
782                         self.triggerExitRuleEvent()
783                     _prevctx = localctx
784                     localctx = LaTeXParser.MpContext(self, _parentctx, _parentState)
785                     self.pushNewRecursionContext(localctx, _startState, self.RULE_mp)
786                     self.state = 113
787                     if not self.precpred(self._ctx, 2):
788                         from antlr4.error.Errors import FailedPredicateException
789                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
790                     self.state = 114
791                     _la = self._input.LA(1)
792                     if not(((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & ((1 << (LaTeXParser.MUL - 16)) | (1 << (LaTeXParser.DIV - 16)) | (1 << (LaTeXParser.CMD_TIMES - 16)) | (1 << (LaTeXParser.CMD_CDOT - 16)) | (1 << (LaTeXParser.CMD_DIV - 16)) | (1 << (LaTeXParser.COLON - 16)))) != 0)):
793                         self._errHandler.recoverInline(self)
794                     else:
795                         self._errHandler.reportMatch(self)
796                         self.consume()
797                     self.state = 115
798                     self.mp(3)
799                 self.state = 120
800                 self._errHandler.sync(self)
801                 _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
802 
803         except RecognitionException as re:
804             localctx.exception = re
805             self._errHandler.reportError(self, re)
806             self._errHandler.recover(self, re)
807         finally:
808             self.unrollRecursionContexts(_parentctx)
809         return localctx
810 
811 
812     class Mp_nofuncContext(ParserRuleContext):
813 
814         def __init__(self, parser, parent=None, invokingState=-1):
815             super(LaTeXParser.Mp_nofuncContext, self).__init__(parent, invokingState)
816             self.parser = parser
817 
818         def unary_nofunc(self):
819             return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)
820 
821 
822         def mp_nofunc(self, i=None):
823             if i is None:
824                 return self.getTypedRuleContexts(LaTeXParser.Mp_nofuncContext)
825             else:
826                 return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,i)
827 
828 
829         def MUL(self):
830             return self.getToken(LaTeXParser.MUL, 0)
831 
832         def CMD_TIMES(self):
833             return self.getToken(LaTeXParser.CMD_TIMES, 0)
834 
835         def CMD_CDOT(self):
836             return self.getToken(LaTeXParser.CMD_CDOT, 0)
837 
838         def DIV(self):
839             return self.getToken(LaTeXParser.DIV, 0)
840 
841         def CMD_DIV(self):
842             return self.getToken(LaTeXParser.CMD_DIV, 0)
843 
844         def COLON(self):
845             return self.getToken(LaTeXParser.COLON, 0)
846 
847         def getRuleIndex(self):
848             return LaTeXParser.RULE_mp_nofunc
849 
850 
851 
852     def mp_nofunc(self, _p=0):
853         _parentctx = self._ctx
854         _parentState = self.state
855         localctx = LaTeXParser.Mp_nofuncContext(self, self._ctx, _parentState)
856         _prevctx = localctx
857         _startState = 12
858         self.enterRecursionRule(localctx, 12, self.RULE_mp_nofunc, _p)
859         self._la = 0 # Token type
860         try:
861             self.enterOuterAlt(localctx, 1)
862             self.state = 122
863             self.unary_nofunc()
864             self._ctx.stop = self._input.LT(-1)
865             self.state = 129
866             self._errHandler.sync(self)
867             _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
868             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
869                 if _alt==1:
870                     if self._parseListeners is not None:
871                         self.triggerExitRuleEvent()
872                     _prevctx = localctx
873                     localctx = LaTeXParser.Mp_nofuncContext(self, _parentctx, _parentState)
874                     self.pushNewRecursionContext(localctx, _startState, self.RULE_mp_nofunc)
875                     self.state = 124
876                     if not self.precpred(self._ctx, 2):
877                         from antlr4.error.Errors import FailedPredicateException
878                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
879                     self.state = 125
880                     _la = self._input.LA(1)
881                     if not(((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & ((1 << (LaTeXParser.MUL - 16)) | (1 << (LaTeXParser.DIV - 16)) | (1 << (LaTeXParser.CMD_TIMES - 16)) | (1 << (LaTeXParser.CMD_CDOT - 16)) | (1 << (LaTeXParser.CMD_DIV - 16)) | (1 << (LaTeXParser.COLON - 16)))) != 0)):
882                         self._errHandler.recoverInline(self)
883                     else:
884                         self._errHandler.reportMatch(self)
885                         self.consume()
886                     self.state = 126
887                     self.mp_nofunc(3)
888                 self.state = 131
889                 self._errHandler.sync(self)
890                 _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
891 
892         except RecognitionException as re:
893             localctx.exception = re
894             self._errHandler.reportError(self, re)
895             self._errHandler.recover(self, re)
896         finally:
897             self.unrollRecursionContexts(_parentctx)
898         return localctx
899 
900 
901     class UnaryContext(ParserRuleContext):
902 
903         def __init__(self, parser, parent=None, invokingState=-1):
904             super(LaTeXParser.UnaryContext, self).__init__(parent, invokingState)
905             self.parser = parser
906 
907         def unary(self):
908             return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)
909 
910 
911         def ADD(self):
912             return self.getToken(LaTeXParser.ADD, 0)
913 
914         def SUB(self):
915             return self.getToken(LaTeXParser.SUB, 0)
916 
917         def postfix(self, i=None):
918             if i is None:
919                 return self.getTypedRuleContexts(LaTeXParser.PostfixContext)
920             else:
921                 return self.getTypedRuleContext(LaTeXParser.PostfixContext,i)
922 
923 
924         def getRuleIndex(self):
925             return LaTeXParser.RULE_unary
926 
927 
928 
929 
930     def unary(self):
931 
932         localctx = LaTeXParser.UnaryContext(self, self._ctx, self.state)
933         self.enterRule(localctx, 14, self.RULE_unary)
934         self._la = 0 # Token type
935         try:
936             self.state = 139
937             self._errHandler.sync(self)
938             token = self._input.LA(1)
939             if token in [LaTeXParser.ADD, LaTeXParser.SUB]:
940                 self.enterOuterAlt(localctx, 1)
941                 self.state = 132
942                 _la = self._input.LA(1)
943                 if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
944                     self._errHandler.recoverInline(self)
945                 else:
946                     self._errHandler.reportMatch(self)
947                     self.consume()
948                 self.state = 133
949                 self.unary()
950                 pass
951             elif token in [LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACE_LITERAL, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_EXP, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.L_FLOOR, LaTeXParser.L_CEIL, LaTeXParser.FUNC_SQRT, LaTeXParser.FUNC_OVERLINE, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_BINOM, LaTeXParser.CMD_DBINOM, LaTeXParser.CMD_TBINOM, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
952                 self.enterOuterAlt(localctx, 2)
953                 self.state = 135
954                 self._errHandler.sync(self)
955                 _alt = 1
956                 while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
957                     if _alt == 1:
958                         self.state = 134
959                         self.postfix()
960 
961                     else:
962                         raise NoViableAltException(self)
963                     self.state = 137
964                     self._errHandler.sync(self)
965                     _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
966 
967                 pass
968             else:
969                 raise NoViableAltException(self)
970 
971         except RecognitionException as re:
972             localctx.exception = re
973             self._errHandler.reportError(self, re)
974             self._errHandler.recover(self, re)
975         finally:
976             self.exitRule()
977         return localctx
978 
979 
980     class Unary_nofuncContext(ParserRuleContext):
981 
982         def __init__(self, parser, parent=None, invokingState=-1):
983             super(LaTeXParser.Unary_nofuncContext, self).__init__(parent, invokingState)
984             self.parser = parser
985 
986         def unary_nofunc(self):
987             return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)
988 
989 
990         def ADD(self):
991             return self.getToken(LaTeXParser.ADD, 0)
992 
993         def SUB(self):
994             return self.getToken(LaTeXParser.SUB, 0)
995 
996         def postfix(self):
997             return self.getTypedRuleContext(LaTeXParser.PostfixContext,0)
998 
999 
1000         def postfix_nofunc(self, i=None):
1001             if i is None:
1002                 return self.getTypedRuleContexts(LaTeXParser.Postfix_nofuncContext)
1003             else:
1004                 return self.getTypedRuleContext(LaTeXParser.Postfix_nofuncContext,i)
1005 
1006 
1007         def getRuleIndex(self):
1008             return LaTeXParser.RULE_unary_nofunc
1009 
1010 
1011 
1012 
1013     def unary_nofunc(self):
1014 
1015         localctx = LaTeXParser.Unary_nofuncContext(self, self._ctx, self.state)
1016         self.enterRule(localctx, 16, self.RULE_unary_nofunc)
1017         self._la = 0 # Token type
1018         try:
1019             self.state = 150
1020             self._errHandler.sync(self)
1021             token = self._input.LA(1)
1022             if token in [LaTeXParser.ADD, LaTeXParser.SUB]:
1023                 self.enterOuterAlt(localctx, 1)
1024                 self.state = 141
1025                 _la = self._input.LA(1)
1026                 if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
1027                     self._errHandler.recoverInline(self)
1028                 else:
1029                     self._errHandler.reportMatch(self)
1030                     self.consume()
1031                 self.state = 142
1032                 self.unary_nofunc()
1033                 pass
1034             elif token in [LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACE_LITERAL, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_EXP, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.L_FLOOR, LaTeXParser.L_CEIL, LaTeXParser.FUNC_SQRT, LaTeXParser.FUNC_OVERLINE, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_BINOM, LaTeXParser.CMD_DBINOM, LaTeXParser.CMD_TBINOM, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
1035                 self.enterOuterAlt(localctx, 2)
1036                 self.state = 143
1037                 self.postfix()
1038                 self.state = 147
1039                 self._errHandler.sync(self)
1040                 _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
1041                 while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1042                     if _alt==1:
1043                         self.state = 144
1044                         self.postfix_nofunc()
1045                     self.state = 149
1046                     self._errHandler.sync(self)
1047                     _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
1048 
1049                 pass
1050             else:
1051                 raise NoViableAltException(self)
1052 
1053         except RecognitionException as re:
1054             localctx.exception = re
1055             self._errHandler.reportError(self, re)
1056             self._errHandler.recover(self, re)
1057         finally:
1058             self.exitRule()
1059         return localctx
1060 
1061 
1062     class PostfixContext(ParserRuleContext):
1063 
1064         def __init__(self, parser, parent=None, invokingState=-1):
1065             super(LaTeXParser.PostfixContext, self).__init__(parent, invokingState)
1066             self.parser = parser
1067 
1068         def exp(self):
1069             return self.getTypedRuleContext(LaTeXParser.ExpContext,0)
1070 
1071 
1072         def postfix_op(self, i=None):
1073             if i is None:
1074                 return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
1075             else:
1076                 return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)
1077 
1078 
1079         def getRuleIndex(self):
1080             return LaTeXParser.RULE_postfix
1081 
1082 
1083 
1084 
1085     def postfix(self):
1086 
1087         localctx = LaTeXParser.PostfixContext(self, self._ctx, self.state)
1088         self.enterRule(localctx, 18, self.RULE_postfix)
1089         try:
1090             self.enterOuterAlt(localctx, 1)
1091             self.state = 152
1092             self.exp(0)
1093             self.state = 156
1094             self._errHandler.sync(self)
1095             _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
1096             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1097                 if _alt==1:
1098                     self.state = 153
1099                     self.postfix_op()
1100                 self.state = 158
1101                 self._errHandler.sync(self)
1102                 _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
1103 
1104         except RecognitionException as re:
1105             localctx.exception = re
1106             self._errHandler.reportError(self, re)
1107             self._errHandler.recover(self, re)
1108         finally:
1109             self.exitRule()
1110         return localctx
1111 
1112 
1113     class Postfix_nofuncContext(ParserRuleContext):
1114 
1115         def __init__(self, parser, parent=None, invokingState=-1):
1116             super(LaTeXParser.Postfix_nofuncContext, self).__init__(parent, invokingState)
1117             self.parser = parser
1118 
1119         def exp_nofunc(self):
1120             return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)
1121 
1122 
1123         def postfix_op(self, i=None):
1124             if i is None:
1125                 return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
1126             else:
1127                 return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)
1128 
1129 
1130         def getRuleIndex(self):
1131             return LaTeXParser.RULE_postfix_nofunc
1132 
1133 
1134 
1135 
1136     def postfix_nofunc(self):
1137 
1138         localctx = LaTeXParser.Postfix_nofuncContext(self, self._ctx, self.state)
1139         self.enterRule(localctx, 20, self.RULE_postfix_nofunc)
1140         try:
1141             self.enterOuterAlt(localctx, 1)
1142             self.state = 159
1143             self.exp_nofunc(0)
1144             self.state = 163
1145             self._errHandler.sync(self)
1146             _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
1147             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1148                 if _alt==1:
1149                     self.state = 160
1150                     self.postfix_op()
1151                 self.state = 165
1152                 self._errHandler.sync(self)
1153                 _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
1154 
1155         except RecognitionException as re:
1156             localctx.exception = re
1157             self._errHandler.reportError(self, re)
1158             self._errHandler.recover(self, re)
1159         finally:
1160             self.exitRule()
1161         return localctx
1162 
1163 
1164     class Postfix_opContext(ParserRuleContext):
1165 
1166         def __init__(self, parser, parent=None, invokingState=-1):
1167             super(LaTeXParser.Postfix_opContext, self).__init__(parent, invokingState)
1168             self.parser = parser
1169 
1170         def BANG(self):
1171             return self.getToken(LaTeXParser.BANG, 0)
1172 
1173         def eval_at(self):
1174             return self.getTypedRuleContext(LaTeXParser.Eval_atContext,0)
1175 
1176 
1177         def getRuleIndex(self):
1178             return LaTeXParser.RULE_postfix_op
1179 
1180 
1181 
1182 
1183     def postfix_op(self):
1184 
1185         localctx = LaTeXParser.Postfix_opContext(self, self._ctx, self.state)
1186         self.enterRule(localctx, 22, self.RULE_postfix_op)
1187         try:
1188             self.state = 168
1189             self._errHandler.sync(self)
1190             token = self._input.LA(1)
1191             if token in [LaTeXParser.BANG]:
1192                 self.enterOuterAlt(localctx, 1)
1193                 self.state = 166
1194                 self.match(LaTeXParser.BANG)
1195                 pass
1196             elif token in [LaTeXParser.BAR]:
1197                 self.enterOuterAlt(localctx, 2)
1198                 self.state = 167
1199                 self.eval_at()
1200                 pass
1201             else:
1202                 raise NoViableAltException(self)
1203 
1204         except RecognitionException as re:
1205             localctx.exception = re
1206             self._errHandler.reportError(self, re)
1207             self._errHandler.recover(self, re)
1208         finally:
1209             self.exitRule()
1210         return localctx
1211 
1212 
1213     class Eval_atContext(ParserRuleContext):
1214 
1215         def __init__(self, parser, parent=None, invokingState=-1):
1216             super(LaTeXParser.Eval_atContext, self).__init__(parent, invokingState)
1217             self.parser = parser
1218 
1219         def BAR(self):
1220             return self.getToken(LaTeXParser.BAR, 0)
1221 
1222         def eval_at_sup(self):
1223             return self.getTypedRuleContext(LaTeXParser.Eval_at_supContext,0)
1224 
1225 
1226         def eval_at_sub(self):
1227             return self.getTypedRuleContext(LaTeXParser.Eval_at_subContext,0)
1228 
1229 
1230         def getRuleIndex(self):
1231             return LaTeXParser.RULE_eval_at
1232 
1233 
1234 
1235 
1236     def eval_at(self):
1237 
1238         localctx = LaTeXParser.Eval_atContext(self, self._ctx, self.state)
1239         self.enterRule(localctx, 24, self.RULE_eval_at)
1240         try:
1241             self.enterOuterAlt(localctx, 1)
1242             self.state = 170
1243             self.match(LaTeXParser.BAR)
1244             self.state = 176
1245             self._errHandler.sync(self)
1246             la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
1247             if la_ == 1:
1248                 self.state = 171
1249                 self.eval_at_sup()
1250                 pass
1251 
1252             elif la_ == 2:
1253                 self.state = 172
1254                 self.eval_at_sub()
1255                 pass
1256 
1257             elif la_ == 3:
1258                 self.state = 173
1259                 self.eval_at_sup()
1260                 self.state = 174
1261                 self.eval_at_sub()
1262                 pass
1263 
1264 
1265         except RecognitionException as re:
1266             localctx.exception = re
1267             self._errHandler.reportError(self, re)
1268             self._errHandler.recover(self, re)
1269         finally:
1270             self.exitRule()
1271         return localctx
1272 
1273 
1274     class Eval_at_subContext(ParserRuleContext):
1275 
1276         def __init__(self, parser, parent=None, invokingState=-1):
1277             super(LaTeXParser.Eval_at_subContext, self).__init__(parent, invokingState)
1278             self.parser = parser
1279 
1280         def UNDERSCORE(self):
1281             return self.getToken(LaTeXParser.UNDERSCORE, 0)
1282 
1283         def L_BRACE(self):
1284             return self.getToken(LaTeXParser.L_BRACE, 0)
1285 
1286         def R_BRACE(self):
1287             return self.getToken(LaTeXParser.R_BRACE, 0)
1288 
1289         def expr(self):
1290             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1291 
1292 
1293         def equality(self):
1294             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
1295 
1296 
1297         def getRuleIndex(self):
1298             return LaTeXParser.RULE_eval_at_sub
1299 
1300 
1301 
1302 
1303     def eval_at_sub(self):
1304 
1305         localctx = LaTeXParser.Eval_at_subContext(self, self._ctx, self.state)
1306         self.enterRule(localctx, 26, self.RULE_eval_at_sub)
1307         try:
1308             self.enterOuterAlt(localctx, 1)
1309             self.state = 178
1310             self.match(LaTeXParser.UNDERSCORE)
1311             self.state = 179
1312             self.match(LaTeXParser.L_BRACE)
1313             self.state = 182
1314             self._errHandler.sync(self)
1315             la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
1316             if la_ == 1:
1317                 self.state = 180
1318                 self.expr()
1319                 pass
1320 
1321             elif la_ == 2:
1322                 self.state = 181
1323                 self.equality()
1324                 pass
1325 
1326 
1327             self.state = 184
1328             self.match(LaTeXParser.R_BRACE)
1329         except RecognitionException as re:
1330             localctx.exception = re
1331             self._errHandler.reportError(self, re)
1332             self._errHandler.recover(self, re)
1333         finally:
1334             self.exitRule()
1335         return localctx
1336 
1337 
1338     class Eval_at_supContext(ParserRuleContext):
1339 
1340         def __init__(self, parser, parent=None, invokingState=-1):
1341             super(LaTeXParser.Eval_at_supContext, self).__init__(parent, invokingState)
1342             self.parser = parser
1343 
1344         def CARET(self):
1345             return self.getToken(LaTeXParser.CARET, 0)
1346 
1347         def L_BRACE(self):
1348             return self.getToken(LaTeXParser.L_BRACE, 0)
1349 
1350         def R_BRACE(self):
1351             return self.getToken(LaTeXParser.R_BRACE, 0)
1352 
1353         def expr(self):
1354             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1355 
1356 
1357         def equality(self):
1358             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
1359 
1360 
1361         def getRuleIndex(self):
1362             return LaTeXParser.RULE_eval_at_sup
1363 
1364 
1365 
1366 
1367     def eval_at_sup(self):
1368 
1369         localctx = LaTeXParser.Eval_at_supContext(self, self._ctx, self.state)
1370         self.enterRule(localctx, 28, self.RULE_eval_at_sup)
1371         try:
1372             self.enterOuterAlt(localctx, 1)
1373             self.state = 186
1374             self.match(LaTeXParser.CARET)
1375             self.state = 187
1376             self.match(LaTeXParser.L_BRACE)
1377             self.state = 190
1378             self._errHandler.sync(self)
1379             la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
1380             if la_ == 1:
1381                 self.state = 188
1382                 self.expr()
1383                 pass
1384 
1385             elif la_ == 2:
1386                 self.state = 189
1387                 self.equality()
1388                 pass
1389 
1390 
1391             self.state = 192
1392             self.match(LaTeXParser.R_BRACE)
1393         except RecognitionException as re:
1394             localctx.exception = re
1395             self._errHandler.reportError(self, re)
1396             self._errHandler.recover(self, re)
1397         finally:
1398             self.exitRule()
1399         return localctx
1400 
1401 
1402     class ExpContext(ParserRuleContext):
1403 
1404         def __init__(self, parser, parent=None, invokingState=-1):
1405             super(LaTeXParser.ExpContext, self).__init__(parent, invokingState)
1406             self.parser = parser
1407 
1408         def comp(self):
1409             return self.getTypedRuleContext(LaTeXParser.CompContext,0)
1410 
1411 
1412         def exp(self):
1413             return self.getTypedRuleContext(LaTeXParser.ExpContext,0)
1414 
1415 
1416         def CARET(self):
1417             return self.getToken(LaTeXParser.CARET, 0)
1418 
1419         def atom(self):
1420             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
1421 
1422 
1423         def L_BRACE(self):
1424             return self.getToken(LaTeXParser.L_BRACE, 0)
1425 
1426         def expr(self):
1427             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1428 
1429 
1430         def R_BRACE(self):
1431             return self.getToken(LaTeXParser.R_BRACE, 0)
1432 
1433         def subexpr(self):
1434             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
1435 
1436 
1437         def getRuleIndex(self):
1438             return LaTeXParser.RULE_exp
1439 
1440 
1441 
1442     def exp(self, _p=0):
1443         _parentctx = self._ctx
1444         _parentState = self.state
1445         localctx = LaTeXParser.ExpContext(self, self._ctx, _parentState)
1446         _prevctx = localctx
1447         _startState = 30
1448         self.enterRecursionRule(localctx, 30, self.RULE_exp, _p)
1449         try:
1450             self.enterOuterAlt(localctx, 1)
1451             self.state = 195
1452             self.comp()
1453             self._ctx.stop = self._input.LT(-1)
1454             self.state = 211
1455             self._errHandler.sync(self)
1456             _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
1457             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1458                 if _alt==1:
1459                     if self._parseListeners is not None:
1460                         self.triggerExitRuleEvent()
1461                     _prevctx = localctx
1462                     localctx = LaTeXParser.ExpContext(self, _parentctx, _parentState)
1463                     self.pushNewRecursionContext(localctx, _startState, self.RULE_exp)
1464                     self.state = 197
1465                     if not self.precpred(self._ctx, 2):
1466                         from antlr4.error.Errors import FailedPredicateException
1467                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
1468                     self.state = 198
1469                     self.match(LaTeXParser.CARET)
1470                     self.state = 204
1471                     self._errHandler.sync(self)
1472                     token = self._input.LA(1)
1473                     if token in [LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
1474                         self.state = 199
1475                         self.atom()
1476                         pass
1477                     elif token in [LaTeXParser.L_BRACE]:
1478                         self.state = 200
1479                         self.match(LaTeXParser.L_BRACE)
1480                         self.state = 201
1481                         self.expr()
1482                         self.state = 202
1483                         self.match(LaTeXParser.R_BRACE)
1484                         pass
1485                     else:
1486                         raise NoViableAltException(self)
1487 
1488                     self.state = 207
1489                     self._errHandler.sync(self)
1490                     la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
1491                     if la_ == 1:
1492                         self.state = 206
1493                         self.subexpr()
1494 
1495 
1496                 self.state = 213
1497                 self._errHandler.sync(self)
1498                 _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
1499 
1500         except RecognitionException as re:
1501             localctx.exception = re
1502             self._errHandler.reportError(self, re)
1503             self._errHandler.recover(self, re)
1504         finally:
1505             self.unrollRecursionContexts(_parentctx)
1506         return localctx
1507 
1508 
1509     class Exp_nofuncContext(ParserRuleContext):
1510 
1511         def __init__(self, parser, parent=None, invokingState=-1):
1512             super(LaTeXParser.Exp_nofuncContext, self).__init__(parent, invokingState)
1513             self.parser = parser
1514 
1515         def comp_nofunc(self):
1516             return self.getTypedRuleContext(LaTeXParser.Comp_nofuncContext,0)
1517 
1518 
1519         def exp_nofunc(self):
1520             return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)
1521 
1522 
1523         def CARET(self):
1524             return self.getToken(LaTeXParser.CARET, 0)
1525 
1526         def atom(self):
1527             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
1528 
1529 
1530         def L_BRACE(self):
1531             return self.getToken(LaTeXParser.L_BRACE, 0)
1532 
1533         def expr(self):
1534             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1535 
1536 
1537         def R_BRACE(self):
1538             return self.getToken(LaTeXParser.R_BRACE, 0)
1539 
1540         def subexpr(self):
1541             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
1542 
1543 
1544         def getRuleIndex(self):
1545             return LaTeXParser.RULE_exp_nofunc
1546 
1547 
1548 
1549     def exp_nofunc(self, _p=0):
1550         _parentctx = self._ctx
1551         _parentState = self.state
1552         localctx = LaTeXParser.Exp_nofuncContext(self, self._ctx, _parentState)
1553         _prevctx = localctx
1554         _startState = 32
1555         self.enterRecursionRule(localctx, 32, self.RULE_exp_nofunc, _p)
1556         try:
1557             self.enterOuterAlt(localctx, 1)
1558             self.state = 215
1559             self.comp_nofunc()
1560             self._ctx.stop = self._input.LT(-1)
1561             self.state = 231
1562             self._errHandler.sync(self)
1563             _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
1564             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1565                 if _alt==1:
1566                     if self._parseListeners is not None:
1567                         self.triggerExitRuleEvent()
1568                     _prevctx = localctx
1569                     localctx = LaTeXParser.Exp_nofuncContext(self, _parentctx, _parentState)
1570                     self.pushNewRecursionContext(localctx, _startState, self.RULE_exp_nofunc)
1571                     self.state = 217
1572                     if not self.precpred(self._ctx, 2):
1573                         from antlr4.error.Errors import FailedPredicateException
1574                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
1575                     self.state = 218
1576                     self.match(LaTeXParser.CARET)
1577                     self.state = 224
1578                     self._errHandler.sync(self)
1579                     token = self._input.LA(1)
1580                     if token in [LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
1581                         self.state = 219
1582                         self.atom()
1583                         pass
1584                     elif token in [LaTeXParser.L_BRACE]:
1585                         self.state = 220
1586                         self.match(LaTeXParser.L_BRACE)
1587                         self.state = 221
1588                         self.expr()
1589                         self.state = 222
1590                         self.match(LaTeXParser.R_BRACE)
1591                         pass
1592                     else:
1593                         raise NoViableAltException(self)
1594 
1595                     self.state = 227
1596                     self._errHandler.sync(self)
1597                     la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
1598                     if la_ == 1:
1599                         self.state = 226
1600                         self.subexpr()
1601 
1602 
1603                 self.state = 233
1604                 self._errHandler.sync(self)
1605                 _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
1606 
1607         except RecognitionException as re:
1608             localctx.exception = re
1609             self._errHandler.reportError(self, re)
1610             self._errHandler.recover(self, re)
1611         finally:
1612             self.unrollRecursionContexts(_parentctx)
1613         return localctx
1614 
1615 
1616     class CompContext(ParserRuleContext):
1617 
1618         def __init__(self, parser, parent=None, invokingState=-1):
1619             super(LaTeXParser.CompContext, self).__init__(parent, invokingState)
1620             self.parser = parser
1621 
1622         def group(self):
1623             return self.getTypedRuleContext(LaTeXParser.GroupContext,0)
1624 
1625 
1626         def abs_group(self):
1627             return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)
1628 
1629 
1630         def func(self):
1631             return self.getTypedRuleContext(LaTeXParser.FuncContext,0)
1632 
1633 
1634         def atom(self):
1635             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
1636 
1637 
1638         def frac(self):
1639             return self.getTypedRuleContext(LaTeXParser.FracContext,0)
1640 
1641 
1642         def binom(self):
1643             return self.getTypedRuleContext(LaTeXParser.BinomContext,0)
1644 
1645 
1646         def floor(self):
1647             return self.getTypedRuleContext(LaTeXParser.FloorContext,0)
1648 
1649 
1650         def ceil(self):
1651             return self.getTypedRuleContext(LaTeXParser.CeilContext,0)
1652 
1653 
1654         def getRuleIndex(self):
1655             return LaTeXParser.RULE_comp
1656 
1657 
1658 
1659 
1660     def comp(self):
1661 
1662         localctx = LaTeXParser.CompContext(self, self._ctx, self.state)
1663         self.enterRule(localctx, 34, self.RULE_comp)
1664         try:
1665             self.state = 242
1666             self._errHandler.sync(self)
1667             la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
1668             if la_ == 1:
1669                 self.enterOuterAlt(localctx, 1)
1670                 self.state = 234
1671                 self.group()
1672                 pass
1673 
1674             elif la_ == 2:
1675                 self.enterOuterAlt(localctx, 2)
1676                 self.state = 235
1677                 self.abs_group()
1678                 pass
1679 
1680             elif la_ == 3:
1681                 self.enterOuterAlt(localctx, 3)
1682                 self.state = 236
1683                 self.func()
1684                 pass
1685 
1686             elif la_ == 4:
1687                 self.enterOuterAlt(localctx, 4)
1688                 self.state = 237
1689                 self.atom()
1690                 pass
1691 
1692             elif la_ == 5:
1693                 self.enterOuterAlt(localctx, 5)
1694                 self.state = 238
1695                 self.frac()
1696                 pass
1697 
1698             elif la_ == 6:
1699                 self.enterOuterAlt(localctx, 6)
1700                 self.state = 239
1701                 self.binom()
1702                 pass
1703 
1704             elif la_ == 7:
1705                 self.enterOuterAlt(localctx, 7)
1706                 self.state = 240
1707                 self.floor()
1708                 pass
1709 
1710             elif la_ == 8:
1711                 self.enterOuterAlt(localctx, 8)
1712                 self.state = 241
1713                 self.ceil()
1714                 pass
1715 
1716 
1717         except RecognitionException as re:
1718             localctx.exception = re
1719             self._errHandler.reportError(self, re)
1720             self._errHandler.recover(self, re)
1721         finally:
1722             self.exitRule()
1723         return localctx
1724 
1725 
1726     class Comp_nofuncContext(ParserRuleContext):
1727 
1728         def __init__(self, parser, parent=None, invokingState=-1):
1729             super(LaTeXParser.Comp_nofuncContext, self).__init__(parent, invokingState)
1730             self.parser = parser
1731 
1732         def group(self):
1733             return self.getTypedRuleContext(LaTeXParser.GroupContext,0)
1734 
1735 
1736         def abs_group(self):
1737             return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)
1738 
1739 
1740         def atom(self):
1741             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
1742 
1743 
1744         def frac(self):
1745             return self.getTypedRuleContext(LaTeXParser.FracContext,0)
1746 
1747 
1748         def binom(self):
1749             return self.getTypedRuleContext(LaTeXParser.BinomContext,0)
1750 
1751 
1752         def floor(self):
1753             return self.getTypedRuleContext(LaTeXParser.FloorContext,0)
1754 
1755 
1756         def ceil(self):
1757             return self.getTypedRuleContext(LaTeXParser.CeilContext,0)
1758 
1759 
1760         def getRuleIndex(self):
1761             return LaTeXParser.RULE_comp_nofunc
1762 
1763 
1764 
1765 
1766     def comp_nofunc(self):
1767 
1768         localctx = LaTeXParser.Comp_nofuncContext(self, self._ctx, self.state)
1769         self.enterRule(localctx, 36, self.RULE_comp_nofunc)
1770         try:
1771             self.state = 251
1772             self._errHandler.sync(self)
1773             la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
1774             if la_ == 1:
1775                 self.enterOuterAlt(localctx, 1)
1776                 self.state = 244
1777                 self.group()
1778                 pass
1779 
1780             elif la_ == 2:
1781                 self.enterOuterAlt(localctx, 2)
1782                 self.state = 245
1783                 self.abs_group()
1784                 pass
1785 
1786             elif la_ == 3:
1787                 self.enterOuterAlt(localctx, 3)
1788                 self.state = 246
1789                 self.atom()
1790                 pass
1791 
1792             elif la_ == 4:
1793                 self.enterOuterAlt(localctx, 4)
1794                 self.state = 247
1795                 self.frac()
1796                 pass
1797 
1798             elif la_ == 5:
1799                 self.enterOuterAlt(localctx, 5)
1800                 self.state = 248
1801                 self.binom()
1802                 pass
1803 
1804             elif la_ == 6:
1805                 self.enterOuterAlt(localctx, 6)
1806                 self.state = 249
1807                 self.floor()
1808                 pass
1809 
1810             elif la_ == 7:
1811                 self.enterOuterAlt(localctx, 7)
1812                 self.state = 250
1813                 self.ceil()
1814                 pass
1815 
1816 
1817         except RecognitionException as re:
1818             localctx.exception = re
1819             self._errHandler.reportError(self, re)
1820             self._errHandler.recover(self, re)
1821         finally:
1822             self.exitRule()
1823         return localctx
1824 
1825 
1826     class GroupContext(ParserRuleContext):
1827 
1828         def __init__(self, parser, parent=None, invokingState=-1):
1829             super(LaTeXParser.GroupContext, self).__init__(parent, invokingState)
1830             self.parser = parser
1831 
1832         def L_PAREN(self):
1833             return self.getToken(LaTeXParser.L_PAREN, 0)
1834 
1835         def expr(self):
1836             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1837 
1838 
1839         def R_PAREN(self):
1840             return self.getToken(LaTeXParser.R_PAREN, 0)
1841 
1842         def L_BRACKET(self):
1843             return self.getToken(LaTeXParser.L_BRACKET, 0)
1844 
1845         def R_BRACKET(self):
1846             return self.getToken(LaTeXParser.R_BRACKET, 0)
1847 
1848         def L_BRACE(self):
1849             return self.getToken(LaTeXParser.L_BRACE, 0)
1850 
1851         def R_BRACE(self):
1852             return self.getToken(LaTeXParser.R_BRACE, 0)
1853 
1854         def L_BRACE_LITERAL(self):
1855             return self.getToken(LaTeXParser.L_BRACE_LITERAL, 0)
1856 
1857         def R_BRACE_LITERAL(self):
1858             return self.getToken(LaTeXParser.R_BRACE_LITERAL, 0)
1859 
1860         def getRuleIndex(self):
1861             return LaTeXParser.RULE_group
1862 
1863 
1864 
1865 
1866     def group(self):
1867 
1868         localctx = LaTeXParser.GroupContext(self, self._ctx, self.state)
1869         self.enterRule(localctx, 38, self.RULE_group)
1870         try:
1871             self.state = 269
1872             self._errHandler.sync(self)
1873             token = self._input.LA(1)
1874             if token in [LaTeXParser.L_PAREN]:
1875                 self.enterOuterAlt(localctx, 1)
1876                 self.state = 253
1877                 self.match(LaTeXParser.L_PAREN)
1878                 self.state = 254
1879                 self.expr()
1880                 self.state = 255
1881                 self.match(LaTeXParser.R_PAREN)
1882                 pass
1883             elif token in [LaTeXParser.L_BRACKET]:
1884                 self.enterOuterAlt(localctx, 2)
1885                 self.state = 257
1886                 self.match(LaTeXParser.L_BRACKET)
1887                 self.state = 258
1888                 self.expr()
1889                 self.state = 259
1890                 self.match(LaTeXParser.R_BRACKET)
1891                 pass
1892             elif token in [LaTeXParser.L_BRACE]:
1893                 self.enterOuterAlt(localctx, 3)
1894                 self.state = 261
1895                 self.match(LaTeXParser.L_BRACE)
1896                 self.state = 262
1897                 self.expr()
1898                 self.state = 263
1899                 self.match(LaTeXParser.R_BRACE)
1900                 pass
1901             elif token in [LaTeXParser.L_BRACE_LITERAL]:
1902                 self.enterOuterAlt(localctx, 4)
1903                 self.state = 265
1904                 self.match(LaTeXParser.L_BRACE_LITERAL)
1905                 self.state = 266
1906                 self.expr()
1907                 self.state = 267
1908                 self.match(LaTeXParser.R_BRACE_LITERAL)
1909                 pass
1910             else:
1911                 raise NoViableAltException(self)
1912 
1913         except RecognitionException as re:
1914             localctx.exception = re
1915             self._errHandler.reportError(self, re)
1916             self._errHandler.recover(self, re)
1917         finally:
1918             self.exitRule()
1919         return localctx
1920 
1921 
1922     class Abs_groupContext(ParserRuleContext):
1923 
1924         def __init__(self, parser, parent=None, invokingState=-1):
1925             super(LaTeXParser.Abs_groupContext, self).__init__(parent, invokingState)
1926             self.parser = parser
1927 
1928         def BAR(self, i=None):
1929             if i is None:
1930                 return self.getTokens(LaTeXParser.BAR)
1931             else:
1932                 return self.getToken(LaTeXParser.BAR, i)
1933 
1934         def expr(self):
1935             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1936 
1937 
1938         def getRuleIndex(self):
1939             return LaTeXParser.RULE_abs_group
1940 
1941 
1942 
1943 
1944     def abs_group(self):
1945 
1946         localctx = LaTeXParser.Abs_groupContext(self, self._ctx, self.state)
1947         self.enterRule(localctx, 40, self.RULE_abs_group)
1948         try:
1949             self.enterOuterAlt(localctx, 1)
1950             self.state = 271
1951             self.match(LaTeXParser.BAR)
1952             self.state = 272
1953             self.expr()
1954             self.state = 273
1955             self.match(LaTeXParser.BAR)
1956         except RecognitionException as re:
1957             localctx.exception = re
1958             self._errHandler.reportError(self, re)
1959             self._errHandler.recover(self, re)
1960         finally:
1961             self.exitRule()
1962         return localctx
1963 
1964 
1965     class AtomContext(ParserRuleContext):
1966 
1967         def __init__(self, parser, parent=None, invokingState=-1):
1968             super(LaTeXParser.AtomContext, self).__init__(parent, invokingState)
1969             self.parser = parser
1970 
1971         def LETTER(self):
1972             return self.getToken(LaTeXParser.LETTER, 0)
1973 
1974         def SYMBOL(self):
1975             return self.getToken(LaTeXParser.SYMBOL, 0)
1976 
1977         def subexpr(self):
1978             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
1979 
1980 
1981         def NUMBER(self):
1982             return self.getToken(LaTeXParser.NUMBER, 0)
1983 
1984         def DIFFERENTIAL(self):
1985             return self.getToken(LaTeXParser.DIFFERENTIAL, 0)
1986 
1987         def mathit(self):
1988             return self.getTypedRuleContext(LaTeXParser.MathitContext,0)
1989 
1990 
1991         def bra(self):
1992             return self.getTypedRuleContext(LaTeXParser.BraContext,0)
1993 
1994 
1995         def ket(self):
1996             return self.getTypedRuleContext(LaTeXParser.KetContext,0)
1997 
1998 
1999         def getRuleIndex(self):
2000             return LaTeXParser.RULE_atom
2001 
2002 
2003 
2004 
2005     def atom(self):
2006 
2007         localctx = LaTeXParser.AtomContext(self, self._ctx, self.state)
2008         self.enterRule(localctx, 42, self.RULE_atom)
2009         self._la = 0 # Token type
2010         try:
2011             self.state = 284
2012             self._errHandler.sync(self)
2013             token = self._input.LA(1)
2014             if token in [LaTeXParser.LETTER, LaTeXParser.SYMBOL]:
2015                 self.enterOuterAlt(localctx, 1)
2016                 self.state = 275
2017                 _la = self._input.LA(1)
2018                 if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
2019                     self._errHandler.recoverInline(self)
2020                 else:
2021                     self._errHandler.reportMatch(self)
2022                     self.consume()
2023                 self.state = 277
2024                 self._errHandler.sync(self)
2025                 la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
2026                 if la_ == 1:
2027                     self.state = 276
2028                     self.subexpr()
2029 
2030 
2031                 pass
2032             elif token in [LaTeXParser.NUMBER]:
2033                 self.enterOuterAlt(localctx, 2)
2034                 self.state = 279
2035                 self.match(LaTeXParser.NUMBER)
2036                 pass
2037             elif token in [LaTeXParser.DIFFERENTIAL]:
2038                 self.enterOuterAlt(localctx, 3)
2039                 self.state = 280
2040                 self.match(LaTeXParser.DIFFERENTIAL)
2041                 pass
2042             elif token in [LaTeXParser.CMD_MATHIT]:
2043                 self.enterOuterAlt(localctx, 4)
2044                 self.state = 281
2045                 self.mathit()
2046                 pass
2047             elif token in [LaTeXParser.L_ANGLE]:
2048                 self.enterOuterAlt(localctx, 5)
2049                 self.state = 282
2050                 self.bra()
2051                 pass
2052             elif token in [LaTeXParser.BAR, LaTeXParser.L_BAR]:
2053                 self.enterOuterAlt(localctx, 6)
2054                 self.state = 283
2055                 self.ket()
2056                 pass
2057             else:
2058                 raise NoViableAltException(self)
2059 
2060         except RecognitionException as re:
2061             localctx.exception = re
2062             self._errHandler.reportError(self, re)
2063             self._errHandler.recover(self, re)
2064         finally:
2065             self.exitRule()
2066         return localctx
2067 
2068 
2069     class BraContext(ParserRuleContext):
2070 
2071         def __init__(self, parser, parent=None, invokingState=-1):
2072             super(LaTeXParser.BraContext, self).__init__(parent, invokingState)
2073             self.parser = parser
2074 
2075         def L_ANGLE(self):
2076             return self.getToken(LaTeXParser.L_ANGLE, 0)
2077 
2078         def expr(self):
2079             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2080 
2081 
2082         def R_BAR(self):
2083             return self.getToken(LaTeXParser.R_BAR, 0)
2084 
2085         def BAR(self):
2086             return self.getToken(LaTeXParser.BAR, 0)
2087 
2088         def getRuleIndex(self):
2089             return LaTeXParser.RULE_bra
2090 
2091 
2092 
2093 
2094     def bra(self):
2095 
2096         localctx = LaTeXParser.BraContext(self, self._ctx, self.state)
2097         self.enterRule(localctx, 44, self.RULE_bra)
2098         self._la = 0 # Token type
2099         try:
2100             self.enterOuterAlt(localctx, 1)
2101             self.state = 286
2102             self.match(LaTeXParser.L_ANGLE)
2103             self.state = 287
2104             self.expr()
2105             self.state = 288
2106             _la = self._input.LA(1)
2107             if not(_la==LaTeXParser.BAR or _la==LaTeXParser.R_BAR):
2108                 self._errHandler.recoverInline(self)
2109             else:
2110                 self._errHandler.reportMatch(self)
2111                 self.consume()
2112         except RecognitionException as re:
2113             localctx.exception = re
2114             self._errHandler.reportError(self, re)
2115             self._errHandler.recover(self, re)
2116         finally:
2117             self.exitRule()
2118         return localctx
2119 
2120 
2121     class KetContext(ParserRuleContext):
2122 
2123         def __init__(self, parser, parent=None, invokingState=-1):
2124             super(LaTeXParser.KetContext, self).__init__(parent, invokingState)
2125             self.parser = parser
2126 
2127         def expr(self):
2128             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2129 
2130 
2131         def R_ANGLE(self):
2132             return self.getToken(LaTeXParser.R_ANGLE, 0)
2133 
2134         def L_BAR(self):
2135             return self.getToken(LaTeXParser.L_BAR, 0)
2136 
2137         def BAR(self):
2138             return self.getToken(LaTeXParser.BAR, 0)
2139 
2140         def getRuleIndex(self):
2141             return LaTeXParser.RULE_ket
2142 
2143 
2144 
2145 
2146     def ket(self):
2147 
2148         localctx = LaTeXParser.KetContext(self, self._ctx, self.state)
2149         self.enterRule(localctx, 46, self.RULE_ket)
2150         self._la = 0 # Token type
2151         try:
2152             self.enterOuterAlt(localctx, 1)
2153             self.state = 290
2154             _la = self._input.LA(1)
2155             if not(_la==LaTeXParser.BAR or _la==LaTeXParser.L_BAR):
2156                 self._errHandler.recoverInline(self)
2157             else:
2158                 self._errHandler.reportMatch(self)
2159                 self.consume()
2160             self.state = 291
2161             self.expr()
2162             self.state = 292
2163             self.match(LaTeXParser.R_ANGLE)
2164         except RecognitionException as re:
2165             localctx.exception = re
2166             self._errHandler.reportError(self, re)
2167             self._errHandler.recover(self, re)
2168         finally:
2169             self.exitRule()
2170         return localctx
2171 
2172 
2173     class MathitContext(ParserRuleContext):
2174 
2175         def __init__(self, parser, parent=None, invokingState=-1):
2176             super(LaTeXParser.MathitContext, self).__init__(parent, invokingState)
2177             self.parser = parser
2178 
2179         def CMD_MATHIT(self):
2180             return self.getToken(LaTeXParser.CMD_MATHIT, 0)
2181 
2182         def L_BRACE(self):
2183             return self.getToken(LaTeXParser.L_BRACE, 0)
2184 
2185         def mathit_text(self):
2186             return self.getTypedRuleContext(LaTeXParser.Mathit_textContext,0)
2187 
2188 
2189         def R_BRACE(self):
2190             return self.getToken(LaTeXParser.R_BRACE, 0)
2191 
2192         def getRuleIndex(self):
2193             return LaTeXParser.RULE_mathit
2194 
2195 
2196 
2197 
2198     def mathit(self):
2199 
2200         localctx = LaTeXParser.MathitContext(self, self._ctx, self.state)
2201         self.enterRule(localctx, 48, self.RULE_mathit)
2202         try:
2203             self.enterOuterAlt(localctx, 1)
2204             self.state = 294
2205             self.match(LaTeXParser.CMD_MATHIT)
2206             self.state = 295
2207             self.match(LaTeXParser.L_BRACE)
2208             self.state = 296
2209             self.mathit_text()
2210             self.state = 297
2211             self.match(LaTeXParser.R_BRACE)
2212         except RecognitionException as re:
2213             localctx.exception = re
2214             self._errHandler.reportError(self, re)
2215             self._errHandler.recover(self, re)
2216         finally:
2217             self.exitRule()
2218         return localctx
2219 
2220 
2221     class Mathit_textContext(ParserRuleContext):
2222 
2223         def __init__(self, parser, parent=None, invokingState=-1):
2224             super(LaTeXParser.Mathit_textContext, self).__init__(parent, invokingState)
2225             self.parser = parser
2226 
2227         def LETTER(self, i=None):
2228             if i is None:
2229                 return self.getTokens(LaTeXParser.LETTER)
2230             else:
2231                 return self.getToken(LaTeXParser.LETTER, i)
2232 
2233         def getRuleIndex(self):
2234             return LaTeXParser.RULE_mathit_text
2235 
2236 
2237 
2238 
2239     def mathit_text(self):
2240 
2241         localctx = LaTeXParser.Mathit_textContext(self, self._ctx, self.state)
2242         self.enterRule(localctx, 50, self.RULE_mathit_text)
2243         self._la = 0 # Token type
2244         try:
2245             self.enterOuterAlt(localctx, 1)
2246             self.state = 302
2247             self._errHandler.sync(self)
2248             _la = self._input.LA(1)
2249             while _la==LaTeXParser.LETTER:
2250                 self.state = 299
2251                 self.match(LaTeXParser.LETTER)
2252                 self.state = 304
2253                 self._errHandler.sync(self)
2254                 _la = self._input.LA(1)
2255 
2256         except RecognitionException as re:
2257             localctx.exception = re
2258             self._errHandler.reportError(self, re)
2259             self._errHandler.recover(self, re)
2260         finally:
2261             self.exitRule()
2262         return localctx
2263 
2264 
2265     class FracContext(ParserRuleContext):
2266 
2267         def __init__(self, parser, parent=None, invokingState=-1):
2268             super(LaTeXParser.FracContext, self).__init__(parent, invokingState)
2269             self.parser = parser
2270             self.upper = None # ExprContext
2271             self.lower = None # ExprContext
2272 
2273         def CMD_FRAC(self):
2274             return self.getToken(LaTeXParser.CMD_FRAC, 0)
2275 
2276         def L_BRACE(self, i=None):
2277             if i is None:
2278                 return self.getTokens(LaTeXParser.L_BRACE)
2279             else:
2280                 return self.getToken(LaTeXParser.L_BRACE, i)
2281 
2282         def R_BRACE(self, i=None):
2283             if i is None:
2284                 return self.getTokens(LaTeXParser.R_BRACE)
2285             else:
2286                 return self.getToken(LaTeXParser.R_BRACE, i)
2287 
2288         def expr(self, i=None):
2289             if i is None:
2290                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
2291             else:
2292                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
2293 
2294 
2295         def getRuleIndex(self):
2296             return LaTeXParser.RULE_frac
2297 
2298 
2299 
2300 
2301     def frac(self):
2302 
2303         localctx = LaTeXParser.FracContext(self, self._ctx, self.state)
2304         self.enterRule(localctx, 52, self.RULE_frac)
2305         try:
2306             self.enterOuterAlt(localctx, 1)
2307             self.state = 305
2308             self.match(LaTeXParser.CMD_FRAC)
2309             self.state = 306
2310             self.match(LaTeXParser.L_BRACE)
2311             self.state = 307
2312             localctx.upper = self.expr()
2313             self.state = 308
2314             self.match(LaTeXParser.R_BRACE)
2315             self.state = 309
2316             self.match(LaTeXParser.L_BRACE)
2317             self.state = 310
2318             localctx.lower = self.expr()
2319             self.state = 311
2320             self.match(LaTeXParser.R_BRACE)
2321         except RecognitionException as re:
2322             localctx.exception = re
2323             self._errHandler.reportError(self, re)
2324             self._errHandler.recover(self, re)
2325         finally:
2326             self.exitRule()
2327         return localctx
2328 
2329 
2330     class BinomContext(ParserRuleContext):
2331 
2332         def __init__(self, parser, parent=None, invokingState=-1):
2333             super(LaTeXParser.BinomContext, self).__init__(parent, invokingState)
2334             self.parser = parser
2335             self.n = None # ExprContext
2336             self.k = None # ExprContext
2337 
2338         def L_BRACE(self, i=None):
2339             if i is None:
2340                 return self.getTokens(LaTeXParser.L_BRACE)
2341             else:
2342                 return self.getToken(LaTeXParser.L_BRACE, i)
2343 
2344         def R_BRACE(self, i=None):
2345             if i is None:
2346                 return self.getTokens(LaTeXParser.R_BRACE)
2347             else:
2348                 return self.getToken(LaTeXParser.R_BRACE, i)
2349 
2350         def CMD_BINOM(self):
2351             return self.getToken(LaTeXParser.CMD_BINOM, 0)
2352 
2353         def CMD_DBINOM(self):
2354             return self.getToken(LaTeXParser.CMD_DBINOM, 0)
2355 
2356         def CMD_TBINOM(self):
2357             return self.getToken(LaTeXParser.CMD_TBINOM, 0)
2358 
2359         def expr(self, i=None):
2360             if i is None:
2361                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
2362             else:
2363                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
2364 
2365 
2366         def getRuleIndex(self):
2367             return LaTeXParser.RULE_binom
2368 
2369 
2370 
2371 
2372     def binom(self):
2373 
2374         localctx = LaTeXParser.BinomContext(self, self._ctx, self.state)
2375         self.enterRule(localctx, 54, self.RULE_binom)
2376         self._la = 0 # Token type
2377         try:
2378             self.enterOuterAlt(localctx, 1)
2379             self.state = 313
2380             _la = self._input.LA(1)
2381             if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (LaTeXParser.CMD_BINOM - 67)) | (1 << (LaTeXParser.CMD_DBINOM - 67)) | (1 << (LaTeXParser.CMD_TBINOM - 67)))) != 0)):
2382                 self._errHandler.recoverInline(self)
2383             else:
2384                 self._errHandler.reportMatch(self)
2385                 self.consume()
2386             self.state = 314
2387             self.match(LaTeXParser.L_BRACE)
2388             self.state = 315
2389             localctx.n = self.expr()
2390             self.state = 316
2391             self.match(LaTeXParser.R_BRACE)
2392             self.state = 317
2393             self.match(LaTeXParser.L_BRACE)
2394             self.state = 318
2395             localctx.k = self.expr()
2396             self.state = 319
2397             self.match(LaTeXParser.R_BRACE)
2398         except RecognitionException as re:
2399             localctx.exception = re
2400             self._errHandler.reportError(self, re)
2401             self._errHandler.recover(self, re)
2402         finally:
2403             self.exitRule()
2404         return localctx
2405 
2406 
2407     class FloorContext(ParserRuleContext):
2408 
2409         def __init__(self, parser, parent=None, invokingState=-1):
2410             super(LaTeXParser.FloorContext, self).__init__(parent, invokingState)
2411             self.parser = parser
2412             self.val = None # ExprContext
2413 
2414         def L_FLOOR(self):
2415             return self.getToken(LaTeXParser.L_FLOOR, 0)
2416 
2417         def R_FLOOR(self):
2418             return self.getToken(LaTeXParser.R_FLOOR, 0)
2419 
2420         def expr(self):
2421             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2422 
2423 
2424         def getRuleIndex(self):
2425             return LaTeXParser.RULE_floor
2426 
2427 
2428 
2429 
2430     def floor(self):
2431 
2432         localctx = LaTeXParser.FloorContext(self, self._ctx, self.state)
2433         self.enterRule(localctx, 56, self.RULE_floor)
2434         try:
2435             self.enterOuterAlt(localctx, 1)
2436             self.state = 321
2437             self.match(LaTeXParser.L_FLOOR)
2438             self.state = 322
2439             localctx.val = self.expr()
2440             self.state = 323
2441             self.match(LaTeXParser.R_FLOOR)
2442         except RecognitionException as re:
2443             localctx.exception = re
2444             self._errHandler.reportError(self, re)
2445             self._errHandler.recover(self, re)
2446         finally:
2447             self.exitRule()
2448         return localctx
2449 
2450 
2451     class CeilContext(ParserRuleContext):
2452 
2453         def __init__(self, parser, parent=None, invokingState=-1):
2454             super(LaTeXParser.CeilContext, self).__init__(parent, invokingState)
2455             self.parser = parser
2456             self.val = None # ExprContext
2457 
2458         def L_CEIL(self):
2459             return self.getToken(LaTeXParser.L_CEIL, 0)
2460 
2461         def R_CEIL(self):
2462             return self.getToken(LaTeXParser.R_CEIL, 0)
2463 
2464         def expr(self):
2465             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2466 
2467 
2468         def getRuleIndex(self):
2469             return LaTeXParser.RULE_ceil
2470 
2471 
2472 
2473 
2474     def ceil(self):
2475 
2476         localctx = LaTeXParser.CeilContext(self, self._ctx, self.state)
2477         self.enterRule(localctx, 58, self.RULE_ceil)
2478         try:
2479             self.enterOuterAlt(localctx, 1)
2480             self.state = 325
2481             self.match(LaTeXParser.L_CEIL)
2482             self.state = 326
2483             localctx.val = self.expr()
2484             self.state = 327
2485             self.match(LaTeXParser.R_CEIL)
2486         except RecognitionException as re:
2487             localctx.exception = re
2488             self._errHandler.reportError(self, re)
2489             self._errHandler.recover(self, re)
2490         finally:
2491             self.exitRule()
2492         return localctx
2493 
2494 
2495     class Func_normalContext(ParserRuleContext):
2496 
2497         def __init__(self, parser, parent=None, invokingState=-1):
2498             super(LaTeXParser.Func_normalContext, self).__init__(parent, invokingState)
2499             self.parser = parser
2500 
2501         def FUNC_EXP(self):
2502             return self.getToken(LaTeXParser.FUNC_EXP, 0)
2503 
2504         def FUNC_LOG(self):
2505             return self.getToken(LaTeXParser.FUNC_LOG, 0)
2506 
2507         def FUNC_LN(self):
2508             return self.getToken(LaTeXParser.FUNC_LN, 0)
2509 
2510         def FUNC_SIN(self):
2511             return self.getToken(LaTeXParser.FUNC_SIN, 0)
2512 
2513         def FUNC_COS(self):
2514             return self.getToken(LaTeXParser.FUNC_COS, 0)
2515 
2516         def FUNC_TAN(self):
2517             return self.getToken(LaTeXParser.FUNC_TAN, 0)
2518 
2519         def FUNC_CSC(self):
2520             return self.getToken(LaTeXParser.FUNC_CSC, 0)
2521 
2522         def FUNC_SEC(self):
2523             return self.getToken(LaTeXParser.FUNC_SEC, 0)
2524 
2525         def FUNC_COT(self):
2526             return self.getToken(LaTeXParser.FUNC_COT, 0)
2527 
2528         def FUNC_ARCSIN(self):
2529             return self.getToken(LaTeXParser.FUNC_ARCSIN, 0)
2530 
2531         def FUNC_ARCCOS(self):
2532             return self.getToken(LaTeXParser.FUNC_ARCCOS, 0)
2533 
2534         def FUNC_ARCTAN(self):
2535             return self.getToken(LaTeXParser.FUNC_ARCTAN, 0)
2536 
2537         def FUNC_ARCCSC(self):
2538             return self.getToken(LaTeXParser.FUNC_ARCCSC, 0)
2539 
2540         def FUNC_ARCSEC(self):
2541             return self.getToken(LaTeXParser.FUNC_ARCSEC, 0)
2542 
2543         def FUNC_ARCCOT(self):
2544             return self.getToken(LaTeXParser.FUNC_ARCCOT, 0)
2545 
2546         def FUNC_SINH(self):
2547             return self.getToken(LaTeXParser.FUNC_SINH, 0)
2548 
2549         def FUNC_COSH(self):
2550             return self.getToken(LaTeXParser.FUNC_COSH, 0)
2551 
2552         def FUNC_TANH(self):
2553             return self.getToken(LaTeXParser.FUNC_TANH, 0)
2554 
2555         def FUNC_ARSINH(self):
2556             return self.getToken(LaTeXParser.FUNC_ARSINH, 0)
2557 
2558         def FUNC_ARCOSH(self):
2559             return self.getToken(LaTeXParser.FUNC_ARCOSH, 0)
2560 
2561         def FUNC_ARTANH(self):
2562             return self.getToken(LaTeXParser.FUNC_ARTANH, 0)
2563 
2564         def getRuleIndex(self):
2565             return LaTeXParser.RULE_func_normal
2566 
2567 
2568 
2569 
2570     def func_normal(self):
2571 
2572         localctx = LaTeXParser.Func_normalContext(self, self._ctx, self.state)
2573         self.enterRule(localctx, 60, self.RULE_func_normal)
2574         self._la = 0 # Token type
2575         try:
2576             self.enterOuterAlt(localctx, 1)
2577             self.state = 329
2578             _la = self._input.LA(1)
2579             if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.FUNC_EXP) | (1 << LaTeXParser.FUNC_LOG) | (1 << LaTeXParser.FUNC_LN) | (1 << LaTeXParser.FUNC_SIN) | (1 << LaTeXParser.FUNC_COS) | (1 << LaTeXParser.FUNC_TAN) | (1 << LaTeXParser.FUNC_CSC) | (1 << LaTeXParser.FUNC_SEC) | (1 << LaTeXParser.FUNC_COT) | (1 << LaTeXParser.FUNC_ARCSIN) | (1 << LaTeXParser.FUNC_ARCCOS) | (1 << LaTeXParser.FUNC_ARCTAN) | (1 << LaTeXParser.FUNC_ARCCSC) | (1 << LaTeXParser.FUNC_ARCSEC) | (1 << LaTeXParser.FUNC_ARCCOT) | (1 << LaTeXParser.FUNC_SINH) | (1 << LaTeXParser.FUNC_COSH) | (1 << LaTeXParser.FUNC_TANH) | (1 << LaTeXParser.FUNC_ARSINH) | (1 << LaTeXParser.FUNC_ARCOSH) | (1 << LaTeXParser.FUNC_ARTANH))) != 0)):
2580                 self._errHandler.recoverInline(self)
2581             else:
2582                 self._errHandler.reportMatch(self)
2583                 self.consume()
2584         except RecognitionException as re:
2585             localctx.exception = re
2586             self._errHandler.reportError(self, re)
2587             self._errHandler.recover(self, re)
2588         finally:
2589             self.exitRule()
2590         return localctx
2591 
2592 
2593     class FuncContext(ParserRuleContext):
2594 
2595         def __init__(self, parser, parent=None, invokingState=-1):
2596             super(LaTeXParser.FuncContext, self).__init__(parent, invokingState)
2597             self.parser = parser
2598             self.root = None # ExprContext
2599             self.base = None # ExprContext
2600 
2601         def func_normal(self):
2602             return self.getTypedRuleContext(LaTeXParser.Func_normalContext,0)
2603 
2604 
2605         def L_PAREN(self):
2606             return self.getToken(LaTeXParser.L_PAREN, 0)
2607 
2608         def func_arg(self):
2609             return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)
2610 
2611 
2612         def R_PAREN(self):
2613             return self.getToken(LaTeXParser.R_PAREN, 0)
2614 
2615         def func_arg_noparens(self):
2616             return self.getTypedRuleContext(LaTeXParser.Func_arg_noparensContext,0)
2617 
2618 
2619         def subexpr(self):
2620             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
2621 
2622 
2623         def supexpr(self):
2624             return self.getTypedRuleContext(LaTeXParser.SupexprContext,0)
2625 
2626 
2627         def args(self):
2628             return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)
2629 
2630 
2631         def LETTER(self):
2632             return self.getToken(LaTeXParser.LETTER, 0)
2633 
2634         def SYMBOL(self):
2635             return self.getToken(LaTeXParser.SYMBOL, 0)
2636 
2637         def FUNC_INT(self):
2638             return self.getToken(LaTeXParser.FUNC_INT, 0)
2639 
2640         def DIFFERENTIAL(self):
2641             return self.getToken(LaTeXParser.DIFFERENTIAL, 0)
2642 
2643         def frac(self):
2644             return self.getTypedRuleContext(LaTeXParser.FracContext,0)
2645 
2646 
2647         def additive(self):
2648             return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)
2649 
2650 
2651         def FUNC_SQRT(self):
2652             return self.getToken(LaTeXParser.FUNC_SQRT, 0)
2653 
2654         def L_BRACE(self):
2655             return self.getToken(LaTeXParser.L_BRACE, 0)
2656 
2657         def R_BRACE(self):
2658             return self.getToken(LaTeXParser.R_BRACE, 0)
2659 
2660         def expr(self, i=None):
2661             if i is None:
2662                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
2663             else:
2664                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
2665 
2666 
2667         def L_BRACKET(self):
2668             return self.getToken(LaTeXParser.L_BRACKET, 0)
2669 
2670         def R_BRACKET(self):
2671             return self.getToken(LaTeXParser.R_BRACKET, 0)
2672 
2673         def FUNC_OVERLINE(self):
2674             return self.getToken(LaTeXParser.FUNC_OVERLINE, 0)
2675 
2676         def mp(self):
2677             return self.getTypedRuleContext(LaTeXParser.MpContext,0)
2678 
2679 
2680         def FUNC_SUM(self):
2681             return self.getToken(LaTeXParser.FUNC_SUM, 0)
2682 
2683         def FUNC_PROD(self):
2684             return self.getToken(LaTeXParser.FUNC_PROD, 0)
2685 
2686         def subeq(self):
2687             return self.getTypedRuleContext(LaTeXParser.SubeqContext,0)
2688 
2689 
2690         def FUNC_LIM(self):
2691             return self.getToken(LaTeXParser.FUNC_LIM, 0)
2692 
2693         def limit_sub(self):
2694             return self.getTypedRuleContext(LaTeXParser.Limit_subContext,0)
2695 
2696 
2697         def getRuleIndex(self):
2698             return LaTeXParser.RULE_func
2699 
2700 
2701 
2702 
2703     def func(self):
2704 
2705         localctx = LaTeXParser.FuncContext(self, self._ctx, self.state)
2706         self.enterRule(localctx, 62, self.RULE_func)
2707         self._la = 0 # Token type
2708         try:
2709             self.state = 409
2710             self._errHandler.sync(self)
2711             token = self._input.LA(1)
2712             if token in [LaTeXParser.FUNC_EXP, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH]:
2713                 self.enterOuterAlt(localctx, 1)
2714                 self.state = 331
2715                 self.func_normal()
2716                 self.state = 344
2717                 self._errHandler.sync(self)
2718                 la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
2719                 if la_ == 1:
2720                     self.state = 333
2721                     self._errHandler.sync(self)
2722                     _la = self._input.LA(1)
2723                     if _la==LaTeXParser.UNDERSCORE:
2724                         self.state = 332
2725                         self.subexpr()
2726 
2727 
2728                     self.state = 336
2729                     self._errHandler.sync(self)
2730                     _la = self._input.LA(1)
2731                     if _la==LaTeXParser.CARET:
2732                         self.state = 335
2733                         self.supexpr()
2734 
2735 
2736                     pass
2737 
2738                 elif la_ == 2:
2739                     self.state = 339
2740                     self._errHandler.sync(self)
2741                     _la = self._input.LA(1)
2742                     if _la==LaTeXParser.CARET:
2743                         self.state = 338
2744                         self.supexpr()
2745 
2746 
2747                     self.state = 342
2748                     self._errHandler.sync(self)
2749                     _la = self._input.LA(1)
2750                     if _la==LaTeXParser.UNDERSCORE:
2751                         self.state = 341
2752                         self.subexpr()
2753 
2754 
2755                     pass
2756 
2757 
2758                 self.state = 351
2759                 self._errHandler.sync(self)
2760                 la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
2761                 if la_ == 1:
2762                     self.state = 346
2763                     self.match(LaTeXParser.L_PAREN)
2764                     self.state = 347
2765                     self.func_arg()
2766                     self.state = 348
2767                     self.match(LaTeXParser.R_PAREN)
2768                     pass
2769 
2770                 elif la_ == 2:
2771                     self.state = 350
2772                     self.func_arg_noparens()
2773                     pass
2774 
2775 
2776                 pass
2777             elif token in [LaTeXParser.LETTER, LaTeXParser.SYMBOL]:
2778                 self.enterOuterAlt(localctx, 2)
2779                 self.state = 353
2780                 _la = self._input.LA(1)
2781                 if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
2782                     self._errHandler.recoverInline(self)
2783                 else:
2784                     self._errHandler.reportMatch(self)
2785                     self.consume()
2786                 self.state = 355
2787                 self._errHandler.sync(self)
2788                 _la = self._input.LA(1)
2789                 if _la==LaTeXParser.UNDERSCORE:
2790                     self.state = 354
2791                     self.subexpr()
2792 
2793 
2794                 self.state = 357
2795                 self.match(LaTeXParser.L_PAREN)
2796                 self.state = 358
2797                 self.args()
2798                 self.state = 359
2799                 self.match(LaTeXParser.R_PAREN)
2800                 pass
2801             elif token in [LaTeXParser.FUNC_INT]:
2802                 self.enterOuterAlt(localctx, 3)
2803                 self.state = 361
2804                 self.match(LaTeXParser.FUNC_INT)
2805                 self.state = 368
2806                 self._errHandler.sync(self)
2807                 token = self._input.LA(1)
2808                 if token in [LaTeXParser.UNDERSCORE]:
2809                     self.state = 362
2810                     self.subexpr()
2811                     self.state = 363
2812                     self.supexpr()
2813                     pass
2814                 elif token in [LaTeXParser.CARET]:
2815                     self.state = 365
2816                     self.supexpr()
2817                     self.state = 366
2818                     self.subexpr()
2819                     pass
2820                 elif token in [LaTeXParser.ADD, LaTeXParser.SUB, LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACE_LITERAL, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_EXP, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.L_FLOOR, LaTeXParser.L_CEIL, LaTeXParser.FUNC_SQRT, LaTeXParser.FUNC_OVERLINE, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_BINOM, LaTeXParser.CMD_DBINOM, LaTeXParser.CMD_TBINOM, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
2821                     pass
2822                 else:
2823                     pass
2824                 self.state = 376
2825                 self._errHandler.sync(self)
2826                 la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
2827                 if la_ == 1:
2828                     self.state = 371
2829                     self._errHandler.sync(self)
2830                     la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
2831                     if la_ == 1:
2832                         self.state = 370
2833                         self.additive(0)
2834 
2835 
2836                     self.state = 373
2837                     self.match(LaTeXParser.DIFFERENTIAL)
2838                     pass
2839 
2840                 elif la_ == 2:
2841                     self.state = 374
2842                     self.frac()
2843                     pass
2844 
2845                 elif la_ == 3:
2846                     self.state = 375
2847                     self.additive(0)
2848                     pass
2849 
2850 
2851                 pass
2852             elif token in [LaTeXParser.FUNC_SQRT]:
2853                 self.enterOuterAlt(localctx, 4)
2854                 self.state = 378
2855                 self.match(LaTeXParser.FUNC_SQRT)
2856                 self.state = 383
2857                 self._errHandler.sync(self)
2858                 _la = self._input.LA(1)
2859                 if _la==LaTeXParser.L_BRACKET:
2860                     self.state = 379
2861                     self.match(LaTeXParser.L_BRACKET)
2862                     self.state = 380
2863                     localctx.root = self.expr()
2864                     self.state = 381
2865                     self.match(LaTeXParser.R_BRACKET)
2866 
2867 
2868                 self.state = 385
2869                 self.match(LaTeXParser.L_BRACE)
2870                 self.state = 386
2871                 localctx.base = self.expr()
2872                 self.state = 387
2873                 self.match(LaTeXParser.R_BRACE)
2874                 pass
2875             elif token in [LaTeXParser.FUNC_OVERLINE]:
2876                 self.enterOuterAlt(localctx, 5)
2877                 self.state = 389
2878                 self.match(LaTeXParser.FUNC_OVERLINE)
2879                 self.state = 390
2880                 self.match(LaTeXParser.L_BRACE)
2881                 self.state = 391
2882                 localctx.base = self.expr()
2883                 self.state = 392
2884                 self.match(LaTeXParser.R_BRACE)
2885                 pass
2886             elif token in [LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD]:
2887                 self.enterOuterAlt(localctx, 6)
2888                 self.state = 394
2889                 _la = self._input.LA(1)
2890                 if not(_la==LaTeXParser.FUNC_SUM or _la==LaTeXParser.FUNC_PROD):
2891                     self._errHandler.recoverInline(self)
2892                 else:
2893                     self._errHandler.reportMatch(self)
2894                     self.consume()
2895                 self.state = 401
2896                 self._errHandler.sync(self)
2897                 token = self._input.LA(1)
2898                 if token in [LaTeXParser.UNDERSCORE]:
2899                     self.state = 395
2900                     self.subeq()
2901                     self.state = 396
2902                     self.supexpr()
2903                     pass
2904                 elif token in [LaTeXParser.CARET]:
2905                     self.state = 398
2906                     self.supexpr()
2907                     self.state = 399
2908                     self.subeq()
2909                     pass
2910                 else:
2911                     raise NoViableAltException(self)
2912 
2913                 self.state = 403
2914                 self.mp(0)
2915                 pass
2916             elif token in [LaTeXParser.FUNC_LIM]:
2917                 self.enterOuterAlt(localctx, 7)
2918                 self.state = 405
2919                 self.match(LaTeXParser.FUNC_LIM)
2920                 self.state = 406
2921                 self.limit_sub()
2922                 self.state = 407
2923                 self.mp(0)
2924                 pass
2925             else:
2926                 raise NoViableAltException(self)
2927 
2928         except RecognitionException as re:
2929             localctx.exception = re
2930             self._errHandler.reportError(self, re)
2931             self._errHandler.recover(self, re)
2932         finally:
2933             self.exitRule()
2934         return localctx
2935 
2936 
2937     class ArgsContext(ParserRuleContext):
2938 
2939         def __init__(self, parser, parent=None, invokingState=-1):
2940             super(LaTeXParser.ArgsContext, self).__init__(parent, invokingState)
2941             self.parser = parser
2942 
2943         def expr(self):
2944             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2945 
2946 
2947         def args(self):
2948             return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)
2949 
2950 
2951         def getRuleIndex(self):
2952             return LaTeXParser.RULE_args
2953 
2954 
2955 
2956 
2957     def args(self):
2958 
2959         localctx = LaTeXParser.ArgsContext(self, self._ctx, self.state)
2960         self.enterRule(localctx, 64, self.RULE_args)
2961         try:
2962             self.state = 416
2963             self._errHandler.sync(self)
2964             la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
2965             if la_ == 1:
2966                 self.enterOuterAlt(localctx, 1)
2967                 self.state = 411
2968                 self.expr()
2969                 self.state = 412
2970                 self.match(LaTeXParser.T__0)
2971                 self.state = 413
2972                 self.args()
2973                 pass
2974 
2975             elif la_ == 2:
2976                 self.enterOuterAlt(localctx, 2)
2977                 self.state = 415
2978                 self.expr()
2979                 pass
2980 
2981 
2982         except RecognitionException as re:
2983             localctx.exception = re
2984             self._errHandler.reportError(self, re)
2985             self._errHandler.recover(self, re)
2986         finally:
2987             self.exitRule()
2988         return localctx
2989 
2990 
2991     class Limit_subContext(ParserRuleContext):
2992 
2993         def __init__(self, parser, parent=None, invokingState=-1):
2994             super(LaTeXParser.Limit_subContext, self).__init__(parent, invokingState)
2995             self.parser = parser
2996 
2997         def UNDERSCORE(self):
2998             return self.getToken(LaTeXParser.UNDERSCORE, 0)
2999 
3000         def L_BRACE(self, i=None):
3001             if i is None:
3002                 return self.getTokens(LaTeXParser.L_BRACE)
3003             else:
3004                 return self.getToken(LaTeXParser.L_BRACE, i)
3005 
3006         def LIM_APPROACH_SYM(self):
3007             return self.getToken(LaTeXParser.LIM_APPROACH_SYM, 0)
3008 
3009         def expr(self):
3010             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
3011 
3012 
3013         def R_BRACE(self, i=None):
3014             if i is None:
3015                 return self.getTokens(LaTeXParser.R_BRACE)
3016             else:
3017                 return self.getToken(LaTeXParser.R_BRACE, i)
3018 
3019         def LETTER(self):
3020             return self.getToken(LaTeXParser.LETTER, 0)
3021 
3022         def SYMBOL(self):
3023             return self.getToken(LaTeXParser.SYMBOL, 0)
3024 
3025         def CARET(self):
3026             return self.getToken(LaTeXParser.CARET, 0)
3027 
3028         def ADD(self):
3029             return self.getToken(LaTeXParser.ADD, 0)
3030 
3031         def SUB(self):
3032             return self.getToken(LaTeXParser.SUB, 0)
3033 
3034         def getRuleIndex(self):
3035             return LaTeXParser.RULE_limit_sub
3036 
3037 
3038 
3039 
3040     def limit_sub(self):
3041 
3042         localctx = LaTeXParser.Limit_subContext(self, self._ctx, self.state)
3043         self.enterRule(localctx, 66, self.RULE_limit_sub)
3044         self._la = 0 # Token type
3045         try:
3046             self.enterOuterAlt(localctx, 1)
3047             self.state = 418
3048             self.match(LaTeXParser.UNDERSCORE)
3049             self.state = 419
3050             self.match(LaTeXParser.L_BRACE)
3051             self.state = 420
3052             _la = self._input.LA(1)
3053             if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
3054                 self._errHandler.recoverInline(self)
3055             else:
3056                 self._errHandler.reportMatch(self)
3057                 self.consume()
3058             self.state = 421
3059             self.match(LaTeXParser.LIM_APPROACH_SYM)
3060             self.state = 422
3061             self.expr()
3062             self.state = 427
3063             self._errHandler.sync(self)
3064             _la = self._input.LA(1)
3065             if _la==LaTeXParser.CARET:
3066                 self.state = 423
3067                 self.match(LaTeXParser.CARET)
3068                 self.state = 424
3069                 self.match(LaTeXParser.L_BRACE)
3070                 self.state = 425
3071                 _la = self._input.LA(1)
3072                 if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
3073                     self._errHandler.recoverInline(self)
3074                 else:
3075                     self._errHandler.reportMatch(self)
3076                     self.consume()
3077                 self.state = 426
3078                 self.match(LaTeXParser.R_BRACE)
3079 
3080 
3081             self.state = 429
3082             self.match(LaTeXParser.R_BRACE)
3083         except RecognitionException as re:
3084             localctx.exception = re
3085             self._errHandler.reportError(self, re)
3086             self._errHandler.recover(self, re)
3087         finally:
3088             self.exitRule()
3089         return localctx
3090 
3091 
3092     class Func_argContext(ParserRuleContext):
3093 
3094         def __init__(self, parser, parent=None, invokingState=-1):
3095             super(LaTeXParser.Func_argContext, self).__init__(parent, invokingState)
3096             self.parser = parser
3097 
3098         def expr(self):
3099             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
3100 
3101 
3102         def func_arg(self):
3103             return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)
3104 
3105 
3106         def getRuleIndex(self):
3107             return LaTeXParser.RULE_func_arg
3108 
3109 
3110 
3111 
3112     def func_arg(self):
3113 
3114         localctx = LaTeXParser.Func_argContext(self, self._ctx, self.state)
3115         self.enterRule(localctx, 68, self.RULE_func_arg)
3116         try:
3117             self.state = 436
3118             self._errHandler.sync(self)
3119             la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
3120             if la_ == 1:
3121                 self.enterOuterAlt(localctx, 1)
3122                 self.state = 431
3123                 self.expr()
3124                 pass
3125 
3126             elif la_ == 2:
3127                 self.enterOuterAlt(localctx, 2)
3128                 self.state = 432
3129                 self.expr()
3130                 self.state = 433
3131                 self.match(LaTeXParser.T__0)
3132                 self.state = 434
3133                 self.func_arg()
3134                 pass
3135 
3136 
3137         except RecognitionException as re:
3138             localctx.exception = re
3139             self._errHandler.reportError(self, re)
3140             self._errHandler.recover(self, re)
3141         finally:
3142             self.exitRule()
3143         return localctx
3144 
3145 
3146     class Func_arg_noparensContext(ParserRuleContext):
3147 
3148         def __init__(self, parser, parent=None, invokingState=-1):
3149             super(LaTeXParser.Func_arg_noparensContext, self).__init__(parent, invokingState)
3150             self.parser = parser
3151 
3152         def mp_nofunc(self):
3153             return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,0)
3154 
3155 
3156         def getRuleIndex(self):
3157             return LaTeXParser.RULE_func_arg_noparens
3158 
3159 
3160 
3161 
3162     def func_arg_noparens(self):
3163 
3164         localctx = LaTeXParser.Func_arg_noparensContext(self, self._ctx, self.state)
3165         self.enterRule(localctx, 70, self.RULE_func_arg_noparens)
3166         try:
3167             self.enterOuterAlt(localctx, 1)
3168             self.state = 438
3169             self.mp_nofunc(0)
3170         except RecognitionException as re:
3171             localctx.exception = re
3172             self._errHandler.reportError(self, re)
3173             self._errHandler.recover(self, re)
3174         finally:
3175             self.exitRule()
3176         return localctx
3177 
3178 
3179     class SubexprContext(ParserRuleContext):
3180 
3181         def __init__(self, parser, parent=None, invokingState=-1):
3182             super(LaTeXParser.SubexprContext, self).__init__(parent, invokingState)
3183             self.parser = parser
3184 
3185         def UNDERSCORE(self):
3186             return self.getToken(LaTeXParser.UNDERSCORE, 0)
3187 
3188         def atom(self):
3189             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
3190 
3191 
3192         def L_BRACE(self):
3193             return self.getToken(LaTeXParser.L_BRACE, 0)
3194 
3195         def expr(self):
3196             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
3197 
3198 
3199         def R_BRACE(self):
3200             return self.getToken(LaTeXParser.R_BRACE, 0)
3201 
3202         def getRuleIndex(self):
3203             return LaTeXParser.RULE_subexpr
3204 
3205 
3206 
3207 
3208     def subexpr(self):
3209 
3210         localctx = LaTeXParser.SubexprContext(self, self._ctx, self.state)
3211         self.enterRule(localctx, 72, self.RULE_subexpr)
3212         try:
3213             self.enterOuterAlt(localctx, 1)
3214             self.state = 440
3215             self.match(LaTeXParser.UNDERSCORE)
3216             self.state = 446
3217             self._errHandler.sync(self)
3218             token = self._input.LA(1)
3219             if token in [LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
3220                 self.state = 441
3221                 self.atom()
3222                 pass
3223             elif token in [LaTeXParser.L_BRACE]:
3224                 self.state = 442
3225                 self.match(LaTeXParser.L_BRACE)
3226                 self.state = 443
3227                 self.expr()
3228                 self.state = 444
3229                 self.match(LaTeXParser.R_BRACE)
3230                 pass
3231             else:
3232                 raise NoViableAltException(self)
3233 
3234         except RecognitionException as re:
3235             localctx.exception = re
3236             self._errHandler.reportError(self, re)
3237             self._errHandler.recover(self, re)
3238         finally:
3239             self.exitRule()
3240         return localctx
3241 
3242 
3243     class SupexprContext(ParserRuleContext):
3244 
3245         def __init__(self, parser, parent=None, invokingState=-1):
3246             super(LaTeXParser.SupexprContext, self).__init__(parent, invokingState)
3247             self.parser = parser
3248 
3249         def CARET(self):
3250             return self.getToken(LaTeXParser.CARET, 0)
3251 
3252         def atom(self):
3253             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
3254 
3255 
3256         def L_BRACE(self):
3257             return self.getToken(LaTeXParser.L_BRACE, 0)
3258 
3259         def expr(self):
3260             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
3261 
3262 
3263         def R_BRACE(self):
3264             return self.getToken(LaTeXParser.R_BRACE, 0)
3265 
3266         def getRuleIndex(self):
3267             return LaTeXParser.RULE_supexpr
3268 
3269 
3270 
3271 
3272     def supexpr(self):
3273 
3274         localctx = LaTeXParser.SupexprContext(self, self._ctx, self.state)
3275         self.enterRule(localctx, 74, self.RULE_supexpr)
3276         try:
3277             self.enterOuterAlt(localctx, 1)
3278             self.state = 448
3279             self.match(LaTeXParser.CARET)
3280             self.state = 454
3281             self._errHandler.sync(self)
3282             token = self._input.LA(1)
3283             if token in [LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
3284                 self.state = 449
3285                 self.atom()
3286                 pass
3287             elif token in [LaTeXParser.L_BRACE]:
3288                 self.state = 450
3289                 self.match(LaTeXParser.L_BRACE)
3290                 self.state = 451
3291                 self.expr()
3292                 self.state = 452
3293                 self.match(LaTeXParser.R_BRACE)
3294                 pass
3295             else:
3296                 raise NoViableAltException(self)
3297 
3298         except RecognitionException as re:
3299             localctx.exception = re
3300             self._errHandler.reportError(self, re)
3301             self._errHandler.recover(self, re)
3302         finally:
3303             self.exitRule()
3304         return localctx
3305 
3306 
3307     class SubeqContext(ParserRuleContext):
3308 
3309         def __init__(self, parser, parent=None, invokingState=-1):
3310             super(LaTeXParser.SubeqContext, self).__init__(parent, invokingState)
3311             self.parser = parser
3312 
3313         def UNDERSCORE(self):
3314             return self.getToken(LaTeXParser.UNDERSCORE, 0)
3315 
3316         def L_BRACE(self):
3317             return self.getToken(LaTeXParser.L_BRACE, 0)
3318 
3319         def equality(self):
3320             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
3321 
3322 
3323         def R_BRACE(self):
3324             return self.getToken(LaTeXParser.R_BRACE, 0)
3325 
3326         def getRuleIndex(self):
3327             return LaTeXParser.RULE_subeq
3328 
3329 
3330 
3331 
3332     def subeq(self):
3333 
3334         localctx = LaTeXParser.SubeqContext(self, self._ctx, self.state)
3335         self.enterRule(localctx, 76, self.RULE_subeq)
3336         try:
3337             self.enterOuterAlt(localctx, 1)
3338             self.state = 456
3339             self.match(LaTeXParser.UNDERSCORE)
3340             self.state = 457
3341             self.match(LaTeXParser.L_BRACE)
3342             self.state = 458
3343             self.equality()
3344             self.state = 459
3345             self.match(LaTeXParser.R_BRACE)
3346         except RecognitionException as re:
3347             localctx.exception = re
3348             self._errHandler.reportError(self, re)
3349             self._errHandler.recover(self, re)
3350         finally:
3351             self.exitRule()
3352         return localctx
3353 
3354 
3355     class SupeqContext(ParserRuleContext):
3356 
3357         def __init__(self, parser, parent=None, invokingState=-1):
3358             super(LaTeXParser.SupeqContext, self).__init__(parent, invokingState)
3359             self.parser = parser
3360 
3361         def UNDERSCORE(self):
3362             return self.getToken(LaTeXParser.UNDERSCORE, 0)
3363 
3364         def L_BRACE(self):
3365             return self.getToken(LaTeXParser.L_BRACE, 0)
3366 
3367         def equality(self):
3368             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
3369 
3370 
3371         def R_BRACE(self):
3372             return self.getToken(LaTeXParser.R_BRACE, 0)
3373 
3374         def getRuleIndex(self):
3375             return LaTeXParser.RULE_supeq
3376 
3377 
3378 
3379 
3380     def supeq(self):
3381 
3382         localctx = LaTeXParser.SupeqContext(self, self._ctx, self.state)
3383         self.enterRule(localctx, 78, self.RULE_supeq)
3384         try:
3385             self.enterOuterAlt(localctx, 1)
3386             self.state = 461
3387             self.match(LaTeXParser.UNDERSCORE)
3388             self.state = 462
3389             self.match(LaTeXParser.L_BRACE)
3390             self.state = 463
3391             self.equality()
3392             self.state = 464
3393             self.match(LaTeXParser.R_BRACE)
3394         except RecognitionException as re:
3395             localctx.exception = re
3396             self._errHandler.reportError(self, re)
3397             self._errHandler.recover(self, re)
3398         finally:
3399             self.exitRule()
3400         return localctx
3401 
3402 
3403 
3404     def sempred(self, localctx, ruleIndex, predIndex):
3405         if self._predicates == None:
3406             self._predicates = dict()
3407         self._predicates[1] = self.relation_sempred
3408         self._predicates[4] = self.additive_sempred
3409         self._predicates[5] = self.mp_sempred
3410         self._predicates[6] = self.mp_nofunc_sempred
3411         self._predicates[15] = self.exp_sempred
3412         self._predicates[16] = self.exp_nofunc_sempred
3413         pred = self._predicates.get(ruleIndex, None)
3414         if pred is None:
3415             raise Exception("No predicate with index:" + str(ruleIndex))
3416         else:
3417             return pred(localctx, predIndex)
3418 
3419     def relation_sempred(self, localctx, predIndex):
3420             if predIndex == 0:
3421                 return self.precpred(self._ctx, 2)
3422 
3423 
3424     def additive_sempred(self, localctx, predIndex):
3425             if predIndex == 1:
3426                 return self.precpred(self._ctx, 2)
3427 
3428 
3429     def mp_sempred(self, localctx, predIndex):
3430             if predIndex == 2:
3431                 return self.precpred(self._ctx, 2)
3432 
3433 
3434     def mp_nofunc_sempred(self, localctx, predIndex):
3435             if predIndex == 3:
3436                 return self.precpred(self._ctx, 2)
3437 
3438 
3439     def exp_sempred(self, localctx, predIndex):
3440             if predIndex == 4:
3441                 return self.precpred(self._ctx, 2)
3442 
3443 
3444     def exp_nofunc_sempred(self, localctx, predIndex):
3445             if predIndex == 5:
3446                 return self.precpred(self._ctx, 2)
3447 
3448 
3449 
3450 
3451 

</code><intended_behavior>The intended behavior is to adjust the parsing rules or the subsequent handling of parsed fractions to ensure that nested fractions are correctly translated into their equivalent SymPy structure. This might involve ensuring that the parser groups nested fractions as singular entities, which are then translated accurately.</intended_behavior>]
2025-10-15 15:03:56.983 | INFO     | Search completed. Bug locations: [<file>sympy/parsing/latex/_parse_latex_antlr.py</file>
<class>None</class>
<method>convert_relation</method>
<code>
90 def convert_relation(rel):
91     if rel.expr():
92         return convert_expr(rel.expr())
93 
94     lh = convert_relation(rel.relation(0))
95     rh = convert_relation(rel.relation(1))
96     if rel.LT():
97         return sympy.StrictLessThan(lh, rh)
98     elif rel.LTE():
99         return sympy.LessThan(lh, rh)
100     elif rel.GT():
101         return sympy.StrictGreaterThan(lh, rh)
102     elif rel.GTE():
103         return sympy.GreaterThan(lh, rh)
104     elif rel.EQUAL():
105         return sympy.Eq(lh, rh)
106     elif rel.NEQ():
107         return sympy.Ne(lh, rh)

</code><intended_behavior>The method should ensure that when it receives fractions, the mathematical integrity, especially the hierarchy of operations in nested fractions, is preserved. Adjustments may be needed in how expressions are converted before reaching or within `convert_relation`, ensuring that nested fractions are grouped correctly in the conversion process to SymPy expressions.</intended_behavior>, <file>sympy/parsing/latex/_antlr/latexparser.py</file>
<class>None</class>
<method>None</method>
<code>
1 
2 # encoding: utf-8
3 
4 # *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***
5 #
6 # Generated from ../LaTeX.g4, derived from latex2sympy
7 #     latex2sympy is licensed under the MIT license
8 #     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt
9 #
10 # Generated with antlr4
11 #    antlr4 is licensed under the BSD-3-Clause License
12 #    https://github.com/antlr/antlr4/blob/master/LICENSE.txt
13 from __future__ import print_function
14 from antlr4 import *
15 from io import StringIO
16 import sys
17 
18 
19 def serializedATN():
20     with StringIO() as buf:
21         buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
22         buf.write(u"Z\u01d5\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t")
23         buf.write(u"\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
24         buf.write(u"\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4")
25         buf.write(u"\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30")
26         buf.write(u"\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t")
27         buf.write(u"\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$")
28         buf.write(u"\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\3\2\3\2\3\3\3\3\3")
29         buf.write(u"\3\3\3\3\3\3\3\7\3[\n\3\f\3\16\3^\13\3\3\4\3\4\3\4\3")
30         buf.write(u"\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\7\6l\n\6\f\6\16\6")
31         buf.write(u"o\13\6\3\7\3\7\3\7\3\7\3\7\3\7\7\7w\n\7\f\7\16\7z\13")
32         buf.write(u"\7\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0082\n\b\f\b\16\b\u0085")
33         buf.write(u"\13\b\3\t\3\t\3\t\6\t\u008a\n\t\r\t\16\t\u008b\5\t\u008e")
34         buf.write(u"\n\t\3\n\3\n\3\n\3\n\7\n\u0094\n\n\f\n\16\n\u0097\13")
35         buf.write(u"\n\5\n\u0099\n\n\3\13\3\13\7\13\u009d\n\13\f\13\16\13")
36         buf.write(u"\u00a0\13\13\3\f\3\f\7\f\u00a4\n\f\f\f\16\f\u00a7\13")
37         buf.write(u"\f\3\r\3\r\5\r\u00ab\n\r\3\16\3\16\3\16\3\16\3\16\3\16")
38         buf.write(u"\5\16\u00b3\n\16\3\17\3\17\3\17\3\17\5\17\u00b9\n\17")
39         buf.write(u"\3\17\3\17\3\20\3\20\3\20\3\20\5\20\u00c1\n\20\3\20\3")
40         buf.write(u"\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
41         buf.write(u"\5\21\u00cf\n\21\3\21\5\21\u00d2\n\21\7\21\u00d4\n\21")
42         buf.write(u"\f\21\16\21\u00d7\13\21\3\22\3\22\3\22\3\22\3\22\3\22")
43         buf.write(u"\3\22\3\22\3\22\3\22\5\22\u00e3\n\22\3\22\5\22\u00e6")
44         buf.write(u"\n\22\7\22\u00e8\n\22\f\22\16\22\u00eb\13\22\3\23\3\23")
45         buf.write(u"\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u00f5\n\23\3\24\3")
46         buf.write(u"\24\3\24\3\24\3\24\3\24\3\24\5\24\u00fe\n\24\3\25\3\25")
47         buf.write(u"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3")
48         buf.write(u"\25\3\25\3\25\3\25\5\25\u0110\n\25\3\26\3\26\3\26\3\26")
49         buf.write(u"\3\27\3\27\5\27\u0118\n\27\3\27\3\27\3\27\3\27\3\27\5")
50         buf.write(u"\27\u011f\n\27\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31")
51         buf.write(u"\3\32\3\32\3\32\3\32\3\32\3\33\7\33\u012f\n\33\f\33\16")
52         buf.write(u"\33\u0132\13\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3")
53         buf.write(u"\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36")
54         buf.write(u"\3\36\3\36\3\37\3\37\3\37\3\37\3 \3 \3!\3!\5!\u0150\n")
55         buf.write(u"!\3!\5!\u0153\n!\3!\5!\u0156\n!\3!\5!\u0159\n!\5!\u015b")
56         buf.write(u"\n!\3!\3!\3!\3!\3!\5!\u0162\n!\3!\3!\5!\u0166\n!\3!\3")
57         buf.write(u"!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u0173\n!\3!\5!\u0176")
58         buf.write(u"\n!\3!\3!\3!\5!\u017b\n!\3!\3!\3!\3!\3!\5!\u0182\n!\3")
59         buf.write(u"!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u0194")
60         buf.write(u"\n!\3!\3!\3!\3!\3!\3!\5!\u019c\n!\3\"\3\"\3\"\3\"\3\"")
61         buf.write(u"\5\"\u01a3\n\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u01ae\n")
62         buf.write(u"#\3#\3#\3$\3$\3$\3$\3$\5$\u01b7\n$\3%\3%\3&\3&\3&\3&")
63         buf.write(u"\3&\3&\5&\u01c1\n&\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u01c9")
64         buf.write(u"\n\'\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\2\b\4\n\f\16 \"")
65         buf.write(u"*\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60")
66         buf.write(u"\62\64\668:<>@BDFHJLNP\2\13\4\2ORUV\3\2\20\21\5\2\22")
67         buf.write(u"\23ACKK\4\2MMZZ\3\2\34\35\4\2\34\34\36\36\3\2EG\3\2&")
68         buf.write(u":\3\2$%\2\u01f1\2R\3\2\2\2\4T\3\2\2\2\6_\3\2\2\2\bc\3")
69         buf.write(u"\2\2\2\ne\3\2\2\2\fp\3\2\2\2\16{\3\2\2\2\20\u008d\3\2")
70         buf.write(u"\2\2\22\u0098\3\2\2\2\24\u009a\3\2\2\2\26\u00a1\3\2\2")
71         buf.write(u"\2\30\u00aa\3\2\2\2\32\u00ac\3\2\2\2\34\u00b4\3\2\2\2")
72         buf.write(u"\36\u00bc\3\2\2\2 \u00c4\3\2\2\2\"\u00d8\3\2\2\2$\u00f4")
73         buf.write(u"\3\2\2\2&\u00fd\3\2\2\2(\u010f\3\2\2\2*\u0111\3\2\2\2")
74         buf.write(u",\u011e\3\2\2\2.\u0120\3\2\2\2\60\u0124\3\2\2\2\62\u0128")
75         buf.write(u"\3\2\2\2\64\u0130\3\2\2\2\66\u0133\3\2\2\28\u013b\3\2")
76         buf.write(u"\2\2:\u0143\3\2\2\2<\u0147\3\2\2\2>\u014b\3\2\2\2@\u019b")
77         buf.write(u"\3\2\2\2B\u01a2\3\2\2\2D\u01a4\3\2\2\2F\u01b6\3\2\2\2")
78         buf.write(u"H\u01b8\3\2\2\2J\u01ba\3\2\2\2L\u01c2\3\2\2\2N\u01ca")
79         buf.write(u"\3\2\2\2P\u01cf\3\2\2\2RS\5\4\3\2S\3\3\2\2\2TU\b\3\1")
80         buf.write(u"\2UV\5\b\5\2V\\\3\2\2\2WX\f\4\2\2XY\t\2\2\2Y[\5\4\3\5")
81         buf.write(u"ZW\3\2\2\2[^\3\2\2\2\\Z\3\2\2\2\\]\3\2\2\2]\5\3\2\2\2")
82         buf.write(u"^\\\3\2\2\2_`\5\b\5\2`a\7O\2\2ab\5\b\5\2b\7\3\2\2\2c")
83         buf.write(u"d\5\n\6\2d\t\3\2\2\2ef\b\6\1\2fg\5\f\7\2gm\3\2\2\2hi")
84         buf.write(u"\f\4\2\2ij\t\3\2\2jl\5\n\6\5kh\3\2\2\2lo\3\2\2\2mk\3")
85         buf.write(u"\2\2\2mn\3\2\2\2n\13\3\2\2\2om\3\2\2\2pq\b\7\1\2qr\5")
86         buf.write(u"\20\t\2rx\3\2\2\2st\f\4\2\2tu\t\4\2\2uw\5\f\7\5vs\3\2")
87         buf.write(u"\2\2wz\3\2\2\2xv\3\2\2\2xy\3\2\2\2y\r\3\2\2\2zx\3\2\2")
88         buf.write(u"\2{|\b\b\1\2|}\5\22\n\2}\u0083\3\2\2\2~\177\f\4\2\2\177")
89         buf.write(u"\u0080\t\4\2\2\u0080\u0082\5\16\b\5\u0081~\3\2\2\2\u0082")
90         buf.write(u"\u0085\3\2\2\2\u0083\u0081\3\2\2\2\u0083\u0084\3\2\2")
91         buf.write(u"\2\u0084\17\3\2\2\2\u0085\u0083\3\2\2\2\u0086\u0087\t")
92         buf.write(u"\3\2\2\u0087\u008e\5\20\t\2\u0088\u008a\5\24\13\2\u0089")
93         buf.write(u"\u0088\3\2\2\2\u008a\u008b\3\2\2\2\u008b\u0089\3\2\2")
94         buf.write(u"\2\u008b\u008c\3\2\2\2\u008c\u008e\3\2\2\2\u008d\u0086")
95         buf.write(u"\3\2\2\2\u008d\u0089\3\2\2\2\u008e\21\3\2\2\2\u008f\u0090")
96         buf.write(u"\t\3\2\2\u0090\u0099\5\22\n\2\u0091\u0095\5\24\13\2\u0092")
97         buf.write(u"\u0094\5\26\f\2\u0093\u0092\3\2\2\2\u0094\u0097\3\2\2")
98         buf.write(u"\2\u0095\u0093\3\2\2\2\u0095\u0096\3\2\2\2\u0096\u0099")
99         buf.write(u"\3\2\2\2\u0097\u0095\3\2\2\2\u0098\u008f\3\2\2\2\u0098")
100         buf.write(u"\u0091\3\2\2\2\u0099\23\3\2\2\2\u009a\u009e\5 \21\2\u009b")
101         buf.write(u"\u009d\5\30\r\2\u009c\u009b\3\2\2\2\u009d\u00a0\3\2\2")
102         buf.write(u"\2\u009e\u009c\3\2\2\2\u009e\u009f\3\2\2\2\u009f\25\3")
103         buf.write(u"\2\2\2\u00a0\u009e\3\2\2\2\u00a1\u00a5\5\"\22\2\u00a2")
104         buf.write(u"\u00a4\5\30\r\2\u00a3\u00a2\3\2\2\2\u00a4\u00a7\3\2\2")
105         buf.write(u"\2\u00a5\u00a3\3\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\27\3")
106         buf.write(u"\2\2\2\u00a7\u00a5\3\2\2\2\u00a8\u00ab\7Y\2\2\u00a9\u00ab")
107         buf.write(u"\5\32\16\2\u00aa\u00a8\3\2\2\2\u00aa\u00a9\3\2\2\2\u00ab")
108         buf.write(u"\31\3\2\2\2\u00ac\u00b2\7\34\2\2\u00ad\u00b3\5\36\20")
109         buf.write(u"\2\u00ae\u00b3\5\34\17\2\u00af\u00b0\5\36\20\2\u00b0")
110         buf.write(u"\u00b1\5\34\17\2\u00b1\u00b3\3\2\2\2\u00b2\u00ad\3\2")
111         buf.write(u"\2\2\u00b2\u00ae\3\2\2\2\u00b2\u00af\3\2\2\2\u00b3\33")
112         buf.write(u"\3\2\2\2\u00b4\u00b5\7I\2\2\u00b5\u00b8\7\26\2\2\u00b6")
113         buf.write(u"\u00b9\5\b\5\2\u00b7\u00b9\5\6\4\2\u00b8\u00b6\3\2\2")
114         buf.write(u"\2\u00b8\u00b7\3\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00bb")
115         buf.write(u"\7\27\2\2\u00bb\35\3\2\2\2\u00bc\u00bd\7J\2\2\u00bd\u00c0")
116         buf.write(u"\7\26\2\2\u00be\u00c1\5\b\5\2\u00bf\u00c1\5\6\4\2\u00c0")
117         buf.write(u"\u00be\3\2\2\2\u00c0\u00bf\3\2\2\2\u00c1\u00c2\3\2\2")
118         buf.write(u"\2\u00c2\u00c3\7\27\2\2\u00c3\37\3\2\2\2\u00c4\u00c5")
119         buf.write(u"\b\21\1\2\u00c5\u00c6\5$\23\2\u00c6\u00d5\3\2\2\2\u00c7")
120         buf.write(u"\u00c8\f\4\2\2\u00c8\u00ce\7J\2\2\u00c9\u00cf\5,\27\2")
121         buf.write(u"\u00ca\u00cb\7\26\2\2\u00cb\u00cc\5\b\5\2\u00cc\u00cd")
122         buf.write(u"\7\27\2\2\u00cd\u00cf\3\2\2\2\u00ce\u00c9\3\2\2\2\u00ce")
123         buf.write(u"\u00ca\3\2\2\2\u00cf\u00d1\3\2\2\2\u00d0\u00d2\5J&\2")
124         buf.write(u"\u00d1\u00d0\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d4")
125         buf.write(u"\3\2\2\2\u00d3\u00c7\3\2\2\2\u00d4\u00d7\3\2\2\2\u00d5")
126         buf.write(u"\u00d3\3\2\2\2\u00d5\u00d6\3\2\2\2\u00d6!\3\2\2\2\u00d7")
127         buf.write(u"\u00d5\3\2\2\2\u00d8\u00d9\b\22\1\2\u00d9\u00da\5&\24")
128         buf.write(u"\2\u00da\u00e9\3\2\2\2\u00db\u00dc\f\4\2\2\u00dc\u00e2")
129         buf.write(u"\7J\2\2\u00dd\u00e3\5,\27\2\u00de\u00df\7\26\2\2\u00df")
130         buf.write(u"\u00e0\5\b\5\2\u00e0\u00e1\7\27\2\2\u00e1\u00e3\3\2\2")
131         buf.write(u"\2\u00e2\u00dd\3\2\2\2\u00e2\u00de\3\2\2\2\u00e3\u00e5")
132         buf.write(u"\3\2\2\2\u00e4\u00e6\5J&\2\u00e5\u00e4\3\2\2\2\u00e5")
133         buf.write(u"\u00e6\3\2\2\2\u00e6\u00e8\3\2\2\2\u00e7\u00db\3\2\2")
134         buf.write(u"\2\u00e8\u00eb\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9\u00ea")
135         buf.write(u"\3\2\2\2\u00ea#\3\2\2\2\u00eb\u00e9\3\2\2\2\u00ec\u00f5")
136         buf.write(u"\5(\25\2\u00ed\u00f5\5*\26\2\u00ee\u00f5\5@!\2\u00ef")
137         buf.write(u"\u00f5\5,\27\2\u00f0\u00f5\5\66\34\2\u00f1\u00f5\58\35")
138         buf.write(u"\2\u00f2\u00f5\5:\36\2\u00f3\u00f5\5<\37\2\u00f4\u00ec")
139         buf.write(u"\3\2\2\2\u00f4\u00ed\3\2\2\2\u00f4\u00ee\3\2\2\2\u00f4")
140         buf.write(u"\u00ef\3\2\2\2\u00f4\u00f0\3\2\2\2\u00f4\u00f1\3\2\2")
141         buf.write(u"\2\u00f4\u00f2\3\2\2\2\u00f4\u00f3\3\2\2\2\u00f5%\3\2")
142         buf.write(u"\2\2\u00f6\u00fe\5(\25\2\u00f7\u00fe\5*\26\2\u00f8\u00fe")
143         buf.write(u"\5,\27\2\u00f9\u00fe\5\66\34\2\u00fa\u00fe\58\35\2\u00fb")
144         buf.write(u"\u00fe\5:\36\2\u00fc\u00fe\5<\37\2\u00fd\u00f6\3\2\2")
145         buf.write(u"\2\u00fd\u00f7\3\2\2\2\u00fd\u00f8\3\2\2\2\u00fd\u00f9")
146         buf.write(u"\3\2\2\2\u00fd\u00fa\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fd")
147         buf.write(u"\u00fc\3\2\2\2\u00fe\'\3\2\2\2\u00ff\u0100\7\24\2\2\u0100")
148         buf.write(u"\u0101\5\b\5\2\u0101\u0102\7\25\2\2\u0102\u0110\3\2\2")
149         buf.write(u"\2\u0103\u0104\7\32\2\2\u0104\u0105\5\b\5\2\u0105\u0106")
150         buf.write(u"\7\33\2\2\u0106\u0110\3\2\2\2\u0107\u0108\7\26\2\2\u0108")
151         buf.write(u"\u0109\5\b\5\2\u0109\u010a\7\27\2\2\u010a\u0110\3\2\2")
152         buf.write(u"\2\u010b\u010c\7\30\2\2\u010c\u010d\5\b\5\2\u010d\u010e")
153         buf.write(u"\7\31\2\2\u010e\u0110\3\2\2\2\u010f\u00ff\3\2\2\2\u010f")
154         buf.write(u"\u0103\3\2\2\2\u010f\u0107\3\2\2\2\u010f\u010b\3\2\2")
155         buf.write(u"\2\u0110)\3\2\2\2\u0111\u0112\7\34\2\2\u0112\u0113\5")
156         buf.write(u"\b\5\2\u0113\u0114\7\34\2\2\u0114+\3\2\2\2\u0115\u0117")
157         buf.write(u"\t\5\2\2\u0116\u0118\5J&\2\u0117\u0116\3\2\2\2\u0117")
158         buf.write(u"\u0118\3\2\2\2\u0118\u011f\3\2\2\2\u0119\u011f\7N\2\2")
159         buf.write(u"\u011a\u011f\7L\2\2\u011b\u011f\5\62\32\2\u011c\u011f")
160         buf.write(u"\5.\30\2\u011d\u011f\5\60\31\2\u011e\u0115\3\2\2\2\u011e")
161         buf.write(u"\u0119\3\2\2\2\u011e\u011a\3\2\2\2\u011e\u011b\3\2\2")
162         buf.write(u"\2\u011e\u011c\3\2\2\2\u011e\u011d\3\2\2\2\u011f-\3\2")
163         buf.write(u"\2\2\u0120\u0121\7\37\2\2\u0121\u0122\5\b\5\2\u0122\u0123")
164         buf.write(u"\t\6\2\2\u0123/\3\2\2\2\u0124\u0125\t\7\2\2\u0125\u0126")
165         buf.write(u"\5\b\5\2\u0126\u0127\7 \2\2\u0127\61\3\2\2\2\u0128\u0129")
166         buf.write(u"\7H\2\2\u0129\u012a\7\26\2\2\u012a\u012b\5\64\33\2\u012b")
167         buf.write(u"\u012c\7\27\2\2\u012c\63\3\2\2\2\u012d\u012f\7M\2\2\u012e")
168         buf.write(u"\u012d\3\2\2\2\u012f\u0132\3\2\2\2\u0130\u012e\3\2\2")
169         buf.write(u"\2\u0130\u0131\3\2\2\2\u0131\65\3\2\2\2\u0132\u0130\3")
170         buf.write(u"\2\2\2\u0133\u0134\7D\2\2\u0134\u0135\7\26\2\2\u0135")
171         buf.write(u"\u0136\5\b\5\2\u0136\u0137\7\27\2\2\u0137\u0138\7\26")
172         buf.write(u"\2\2\u0138\u0139\5\b\5\2\u0139\u013a\7\27\2\2\u013a\67")
173         buf.write(u"\3\2\2\2\u013b\u013c\t\b\2\2\u013c\u013d\7\26\2\2\u013d")
174         buf.write(u"\u013e\5\b\5\2\u013e\u013f\7\27\2\2\u013f\u0140\7\26")
175         buf.write(u"\2\2\u0140\u0141\5\b\5\2\u0141\u0142\7\27\2\2\u01429")
176         buf.write(u"\3\2\2\2\u0143\u0144\7;\2\2\u0144\u0145\5\b\5\2\u0145")
177         buf.write(u"\u0146\7<\2\2\u0146;\3\2\2\2\u0147\u0148\7=\2\2\u0148")
178         buf.write(u"\u0149\5\b\5\2\u0149\u014a\7>\2\2\u014a=\3\2\2\2\u014b")
179         buf.write(u"\u014c\t\t\2\2\u014c?\3\2\2\2\u014d\u015a\5> \2\u014e")
180         buf.write(u"\u0150\5J&\2\u014f\u014e\3\2\2\2\u014f\u0150\3\2\2\2")
181         buf.write(u"\u0150\u0152\3\2\2\2\u0151\u0153\5L\'\2\u0152\u0151\3")
182         buf.write(u"\2\2\2\u0152\u0153\3\2\2\2\u0153\u015b\3\2\2\2\u0154")
183         buf.write(u"\u0156\5L\'\2\u0155\u0154\3\2\2\2\u0155\u0156\3\2\2\2")
184         buf.write(u"\u0156\u0158\3\2\2\2\u0157\u0159\5J&\2\u0158\u0157\3")
185         buf.write(u"\2\2\2\u0158\u0159\3\2\2\2\u0159\u015b\3\2\2\2\u015a")
186         buf.write(u"\u014f\3\2\2\2\u015a\u0155\3\2\2\2\u015b\u0161\3\2\2")
187         buf.write(u"\2\u015c\u015d\7\24\2\2\u015d\u015e\5F$\2\u015e\u015f")
188         buf.write(u"\7\25\2\2\u015f\u0162\3\2\2\2\u0160\u0162\5H%\2\u0161")
189         buf.write(u"\u015c\3\2\2\2\u0161\u0160\3\2\2\2\u0162\u019c\3\2\2")
190         buf.write(u"\2\u0163\u0165\t\5\2\2\u0164\u0166\5J&\2\u0165\u0164")
191         buf.write(u"\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0167\3\2\2\2\u0167")
192         buf.write(u"\u0168\7\24\2\2\u0168\u0169\5B\"\2\u0169\u016a\7\25\2")
193         buf.write(u"\2\u016a\u019c\3\2\2\2\u016b\u0172\7#\2\2\u016c\u016d")
194         buf.write(u"\5J&\2\u016d\u016e\5L\'\2\u016e\u0173\3\2\2\2\u016f\u0170")
195         buf.write(u"\5L\'\2\u0170\u0171\5J&\2\u0171\u0173\3\2\2\2\u0172\u016c")
196         buf.write(u"\3\2\2\2\u0172\u016f\3\2\2\2\u0172\u0173\3\2\2\2\u0173")
197         buf.write(u"\u017a\3\2\2\2\u0174\u0176\5\n\6\2\u0175\u0174\3\2\2")
198         buf.write(u"\2\u0175\u0176\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u017b")
199         buf.write(u"\7L\2\2\u0178\u017b\5\66\34\2\u0179\u017b\5\n\6\2\u017a")
200         buf.write(u"\u0175\3\2\2\2\u017a\u0178\3\2\2\2\u017a\u0179\3\2\2")
201         buf.write(u"\2\u017b\u019c\3\2\2\2\u017c\u0181\7?\2\2\u017d\u017e")
202         buf.write(u"\7\32\2\2\u017e\u017f\5\b\5\2\u017f\u0180\7\33\2\2\u0180")
203         buf.write(u"\u0182\3\2\2\2\u0181\u017d\3\2\2\2\u0181\u0182\3\2\2")
204         buf.write(u"\2\u0182\u0183\3\2\2\2\u0183\u0184\7\26\2\2\u0184\u0185")
205         buf.write(u"\5\b\5\2\u0185\u0186\7\27\2\2\u0186\u019c\3\2\2\2\u0187")
206         buf.write(u"\u0188\7@\2\2\u0188\u0189\7\26\2\2\u0189\u018a\5\b\5")
207         buf.write(u"\2\u018a\u018b\7\27\2\2\u018b\u019c\3\2\2\2\u018c\u0193")
208         buf.write(u"\t\n\2\2\u018d\u018e\5N(\2\u018e\u018f\5L\'\2\u018f\u0194")
209         buf.write(u"\3\2\2\2\u0190\u0191\5L\'\2\u0191\u0192\5N(\2\u0192\u0194")
210         buf.write(u"\3\2\2\2\u0193\u018d\3\2\2\2\u0193\u0190\3\2\2\2\u0194")
211         buf.write(u"\u0195\3\2\2\2\u0195\u0196\5\f\7\2\u0196\u019c\3\2\2")
212         buf.write(u"\2\u0197\u0198\7!\2\2\u0198\u0199\5D#\2\u0199\u019a\5")
213         buf.write(u"\f\7\2\u019a\u019c\3\2\2\2\u019b\u014d\3\2\2\2\u019b")
214         buf.write(u"\u0163\3\2\2\2\u019b\u016b\3\2\2\2\u019b\u017c\3\2\2")
215         buf.write(u"\2\u019b\u0187\3\2\2\2\u019b\u018c\3\2\2\2\u019b\u0197")
216         buf.write(u"\3\2\2\2\u019cA\3\2\2\2\u019d\u019e\5\b\5\2\u019e\u019f")
217         buf.write(u"\7\3\2\2\u019f\u01a0\5B\"\2\u01a0\u01a3\3\2\2\2\u01a1")
218         buf.write(u"\u01a3\5\b\5\2\u01a2\u019d\3\2\2\2\u01a2\u01a1\3\2\2")
219         buf.write(u"\2\u01a3C\3\2\2\2\u01a4\u01a5\7I\2\2\u01a5\u01a6\7\26")
220         buf.write(u"\2\2\u01a6\u01a7\t\5\2\2\u01a7\u01a8\7\"\2\2\u01a8\u01ad")
221         buf.write(u"\5\b\5\2\u01a9\u01aa\7J\2\2\u01aa\u01ab\7\26\2\2\u01ab")
222         buf.write(u"\u01ac\t\3\2\2\u01ac\u01ae\7\27\2\2\u01ad\u01a9\3\2\2")
223         buf.write(u"\2\u01ad\u01ae\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b0")
224         buf.write(u"\7\27\2\2\u01b0E\3\2\2\2\u01b1\u01b7\5\b\5\2\u01b2\u01b3")
225         buf.write(u"\5\b\5\2\u01b3\u01b4\7\3\2\2\u01b4\u01b5\5F$\2\u01b5")
226         buf.write(u"\u01b7\3\2\2\2\u01b6\u01b1\3\2\2\2\u01b6\u01b2\3\2\2")
227         buf.write(u"\2\u01b7G\3\2\2\2\u01b8\u01b9\5\16\b\2\u01b9I\3\2\2\2")
228         buf.write(u"\u01ba\u01c0\7I\2\2\u01bb\u01c1\5,\27\2\u01bc\u01bd\7")
229         buf.write(u"\26\2\2\u01bd\u01be\5\b\5\2\u01be\u01bf\7\27\2\2\u01bf")
230         buf.write(u"\u01c1\3\2\2\2\u01c0\u01bb\3\2\2\2\u01c0\u01bc\3\2\2")
231         buf.write(u"\2\u01c1K\3\2\2\2\u01c2\u01c8\7J\2\2\u01c3\u01c9\5,\27")
232         buf.write(u"\2\u01c4\u01c5\7\26\2\2\u01c5\u01c6\5\b\5\2\u01c6\u01c7")
233         buf.write(u"\7\27\2\2\u01c7\u01c9\3\2\2\2\u01c8\u01c3\3\2\2\2\u01c8")
234         buf.write(u"\u01c4\3\2\2\2\u01c9M\3\2\2\2\u01ca\u01cb\7I\2\2\u01cb")
235         buf.write(u"\u01cc\7\26\2\2\u01cc\u01cd\5\6\4\2\u01cd\u01ce\7\27")
236         buf.write(u"\2\2\u01ceO\3\2\2\2\u01cf\u01d0\7I\2\2\u01d0\u01d1\7")
237         buf.write(u"\26\2\2\u01d1\u01d2\5\6\4\2\u01d2\u01d3\7\27\2\2\u01d3")
238         buf.write(u"Q\3\2\2\2.\\mx\u0083\u008b\u008d\u0095\u0098\u009e\u00a5")
239         buf.write(u"\u00aa\u00b2\u00b8\u00c0\u00ce\u00d1\u00d5\u00e2\u00e5")
240         buf.write(u"\u00e9\u00f4\u00fd\u010f\u0117\u011e\u0130\u014f\u0152")
241         buf.write(u"\u0155\u0158\u015a\u0161\u0165\u0172\u0175\u017a\u0181")
242         buf.write(u"\u0193\u019b\u01a2\u01ad\u01b6\u01c0\u01c8")
243         return buf.getvalue()
244 
245 
246 class LaTeXParser ( Parser ):
247 
248     grammarFileName = "LaTeX.g4"
249 
250     atn = ATNDeserializer().deserialize(serializedATN())
251 
252     decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]
253 
254     sharedContextCache = PredictionContextCache()
255 
256     literalNames = [ u"<INVALID>", u"','", u"<INVALID>", u"<INVALID>", u"<INVALID>",
257                      u"<INVALID>", u"'\\quad'", u"'\\qquad'", u"<INVALID>",
258                      u"'\\negmedspace'", u"'\\negthickspace'", u"'\\left'",
259                      u"'\\right'", u"<INVALID>", u"'+'", u"'-'", u"'*'",
260                      u"'/'", u"'('", u"')'", u"'{'", u"'}'", u"'\\{'", u"'\\}'",
261                      u"'['", u"']'", u"'|'", u"'\\right|'", u"'\\left|'",
262                      u"'\\langle'", u"'\\rangle'", u"'\\lim'", u"<INVALID>",
263                      u"'\\int'", u"'\\sum'", u"'\\prod'", u"'\\exp'", u"'\\log'",
264                      u"'\\ln'", u"'\\sin'", u"'\\cos'", u"'\\tan'", u"'\\csc'",
265                      u"'\\sec'", u"'\\cot'", u"'\\arcsin'", u"'\\arccos'",
266                      u"'\\arctan'", u"'\\arccsc'", u"'\\arcsec'", u"'\\arccot'",
267                      u"'\\sinh'", u"'\\cosh'", u"'\\tanh'", u"'\\arsinh'",
268                      u"'\\arcosh'", u"'\\artanh'", u"'\\lfloor'", u"'\\rfloor'",
269                      u"'\\lceil'", u"'\\rceil'", u"'\\sqrt'", u"'\\overline'",
270                      u"'\\times'", u"'\\cdot'", u"'\\div'", u"'\\frac'",
271                      u"'\\binom'", u"'\\dbinom'", u"'\\tbinom'", u"'\\mathit'",
272                      u"'_'", u"'^'", u"':'", u"<INVALID>", u"<INVALID>",
273                      u"<INVALID>", u"<INVALID>", u"'\\neq'", u"'<'", u"<INVALID>",
274                      u"'\\leqq'", u"'\\leqslant'", u"'>'", u"<INVALID>",
275                      u"'\\geqq'", u"'\\geqslant'", u"'!'" ]
276 
277     symbolicNames = [ u"<INVALID>", u"<INVALID>", u"WS", u"THINSPACE", u"MEDSPACE",
278                       u"THICKSPACE", u"QUAD", u"QQUAD", u"NEGTHINSPACE",
279                       u"NEGMEDSPACE", u"NEGTHICKSPACE", u"CMD_LEFT", u"CMD_RIGHT",
280                       u"IGNORE", u"ADD", u"SUB", u"MUL", u"DIV", u"L_PAREN",
281                       u"R_PAREN", u"L_BRACE", u"R_BRACE", u"L_BRACE_LITERAL",
282                       u"R_BRACE_LITERAL", u"L_BRACKET", u"R_BRACKET", u"BAR",
283                       u"R_BAR", u"L_BAR", u"L_ANGLE", u"R_ANGLE", u"FUNC_LIM",
284                       u"LIM_APPROACH_SYM", u"FUNC_INT", u"FUNC_SUM", u"FUNC_PROD",
285                       u"FUNC_EXP", u"FUNC_LOG", u"FUNC_LN", u"FUNC_SIN",
286                       u"FUNC_COS", u"FUNC_TAN", u"FUNC_CSC", u"FUNC_SEC",
287                       u"FUNC_COT", u"FUNC_ARCSIN", u"FUNC_ARCCOS", u"FUNC_ARCTAN",
288                       u"FUNC_ARCCSC", u"FUNC_ARCSEC", u"FUNC_ARCCOT", u"FUNC_SINH",
289                       u"FUNC_COSH", u"FUNC_TANH", u"FUNC_ARSINH", u"FUNC_ARCOSH",
290                       u"FUNC_ARTANH", u"L_FLOOR", u"R_FLOOR", u"L_CEIL",
291                       u"R_CEIL", u"FUNC_SQRT", u"FUNC_OVERLINE", u"CMD_TIMES",
292                       u"CMD_CDOT", u"CMD_DIV", u"CMD_FRAC", u"CMD_BINOM",
293                       u"CMD_DBINOM", u"CMD_TBINOM", u"CMD_MATHIT", u"UNDERSCORE",
294                       u"CARET", u"COLON", u"DIFFERENTIAL", u"LETTER", u"NUMBER",
295                       u"EQUAL", u"NEQ", u"LT", u"LTE", u"LTE_Q", u"LTE_S",
296                       u"GT", u"GTE", u"GTE_Q", u"GTE_S", u"BANG", u"SYMBOL" ]
297 
298     RULE_math = 0
299     RULE_relation = 1
300     RULE_equality = 2
301     RULE_expr = 3
302     RULE_additive = 4
303     RULE_mp = 5
304     RULE_mp_nofunc = 6
305     RULE_unary = 7
306     RULE_unary_nofunc = 8
307     RULE_postfix = 9
308     RULE_postfix_nofunc = 10
309     RULE_postfix_op = 11
310     RULE_eval_at = 12
311     RULE_eval_at_sub = 13
312     RULE_eval_at_sup = 14
313     RULE_exp = 15
314     RULE_exp_nofunc = 16
315     RULE_comp = 17
316     RULE_comp_nofunc = 18
317     RULE_group = 19
318     RULE_abs_group = 20
319     RULE_atom = 21
320     RULE_bra = 22
321     RULE_ket = 23
322     RULE_mathit = 24
323     RULE_mathit_text = 25
324     RULE_frac = 26
325     RULE_binom = 27
326     RULE_floor = 28
327     RULE_ceil = 29
328     RULE_func_normal = 30
329     RULE_func = 31
330     RULE_args = 32
331     RULE_limit_sub = 33
332     RULE_func_arg = 34
333     RULE_func_arg_noparens = 35
334     RULE_subexpr = 36
335     RULE_supexpr = 37
336     RULE_subeq = 38
337     RULE_supeq = 39
338 
339     ruleNames =  [ u"math", u"relation", u"equality", u"expr", u"additive",
340                    u"mp", u"mp_nofunc", u"unary", u"unary_nofunc", u"postfix",
341                    u"postfix_nofunc", u"postfix_op", u"eval_at", u"eval_at_sub",
342                    u"eval_at_sup", u"exp", u"exp_nofunc", u"comp", u"comp_nofunc",
343                    u"group", u"abs_group", u"atom", u"bra", u"ket", u"mathit",
344                    u"mathit_text", u"frac", u"binom", u"floor", u"ceil",
345                    u"func_normal", u"func", u"args", u"limit_sub", u"func_arg",
346                    u"func_arg_noparens", u"subexpr", u"supexpr", u"subeq",
347                    u"supeq" ]
348 
349     EOF = Token.EOF
350     T__0=1
351     WS=2
352     THINSPACE=3
353     MEDSPACE=4
354     THICKSPACE=5
355     QUAD=6
356     QQUAD=7
357     NEGTHINSPACE=8
358     NEGMEDSPACE=9
359     NEGTHICKSPACE=10
360     CMD_LEFT=11
361     CMD_RIGHT=12
362     IGNORE=13
363     ADD=14
364     SUB=15
365     MUL=16
366     DIV=17
367     L_PAREN=18
368     R_PAREN=19
369     L_BRACE=20
370     R_BRACE=21
371     L_BRACE_LITERAL=22
372     R_BRACE_LITERAL=23
373     L_BRACKET=24
374     R_BRACKET=25
375     BAR=26
376     R_BAR=27
377     L_BAR=28
378     L_ANGLE=29
379     R_ANGLE=30
380     FUNC_LIM=31
381     LIM_APPROACH_SYM=32
382     FUNC_INT=33
383     FUNC_SUM=34
384     FUNC_PROD=35
385     FUNC_EXP=36
386     FUNC_LOG=37
387     FUNC_LN=38
388     FUNC_SIN=39
389     FUNC_COS=40
390     FUNC_TAN=41
391     FUNC_CSC=42
392     FUNC_SEC=43
393     FUNC_COT=44
394     FUNC_ARCSIN=45
395     FUNC_ARCCOS=46
396     FUNC_ARCTAN=47
397     FUNC_ARCCSC=48
398     FUNC_ARCSEC=49
399     FUNC_ARCCOT=50
400     FUNC_SINH=51
401     FUNC_COSH=52
402     FUNC_TANH=53
403     FUNC_ARSINH=54
404     FUNC_ARCOSH=55
405     FUNC_ARTANH=56
406     L_FLOOR=57
407     R_FLOOR=58
408     L_CEIL=59
409     R_CEIL=60
410     FUNC_SQRT=61
411     FUNC_OVERLINE=62
412     CMD_TIMES=63
413     CMD_CDOT=64
414     CMD_DIV=65
415     CMD_FRAC=66
416     CMD_BINOM=67
417     CMD_DBINOM=68
418     CMD_TBINOM=69
419     CMD_MATHIT=70
420     UNDERSCORE=71
421     CARET=72
422     COLON=73
423     DIFFERENTIAL=74
424     LETTER=75
425     NUMBER=76
426     EQUAL=77
427     NEQ=78
428     LT=79
429     LTE=80
430     LTE_Q=81
431     LTE_S=82
432     GT=83
433     GTE=84
434     GTE_Q=85
435     GTE_S=86
436     BANG=87
437     SYMBOL=88
438 
439     def __init__(self, input, output=sys.stdout):
440         super(LaTeXParser, self).__init__(input, output=output)
441         self.checkVersion("4.7.2")
442         self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
443         self._predicates = None
444 
445 
446 
447 
448     class MathContext(ParserRuleContext):
449 
450         def __init__(self, parser, parent=None, invokingState=-1):
451             super(LaTeXParser.MathContext, self).__init__(parent, invokingState)
452             self.parser = parser
453 
454         def relation(self):
455             return self.getTypedRuleContext(LaTeXParser.RelationContext,0)
456 
457 
458         def getRuleIndex(self):
459             return LaTeXParser.RULE_math
460 
461 
462 
463 
464     def math(self):
465 
466         localctx = LaTeXParser.MathContext(self, self._ctx, self.state)
467         self.enterRule(localctx, 0, self.RULE_math)
468         try:
469             self.enterOuterAlt(localctx, 1)
470             self.state = 80
471             self.relation(0)
472         except RecognitionException as re:
473             localctx.exception = re
474             self._errHandler.reportError(self, re)
475             self._errHandler.recover(self, re)
476         finally:
477             self.exitRule()
478         return localctx
479 
480 
481     class RelationContext(ParserRuleContext):
482 
483         def __init__(self, parser, parent=None, invokingState=-1):
484             super(LaTeXParser.RelationContext, self).__init__(parent, invokingState)
485             self.parser = parser
486 
487         def expr(self):
488             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
489 
490 
491         def relation(self, i=None):
492             if i is None:
493                 return self.getTypedRuleContexts(LaTeXParser.RelationContext)
494             else:
495                 return self.getTypedRuleContext(LaTeXParser.RelationContext,i)
496 
497 
498         def EQUAL(self):
499             return self.getToken(LaTeXParser.EQUAL, 0)
500 
501         def LT(self):
502             return self.getToken(LaTeXParser.LT, 0)
503 
504         def LTE(self):
505             return self.getToken(LaTeXParser.LTE, 0)
506 
507         def GT(self):
508             return self.getToken(LaTeXParser.GT, 0)
509 
510         def GTE(self):
511             return self.getToken(LaTeXParser.GTE, 0)
512 
513         def NEQ(self):
514             return self.getToken(LaTeXParser.NEQ, 0)
515 
516         def getRuleIndex(self):
517             return LaTeXParser.RULE_relation
518 
519 
520 
521     def relation(self, _p=0):
522         _parentctx = self._ctx
523         _parentState = self.state
524         localctx = LaTeXParser.RelationContext(self, self._ctx, _parentState)
525         _prevctx = localctx
526         _startState = 2
527         self.enterRecursionRule(localctx, 2, self.RULE_relation, _p)
528         self._la = 0 # Token type
529         try:
530             self.enterOuterAlt(localctx, 1)
531             self.state = 83
532             self.expr()
533             self._ctx.stop = self._input.LT(-1)
534             self.state = 90
535             self._errHandler.sync(self)
536             _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
537             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
538                 if _alt==1:
539                     if self._parseListeners is not None:
540                         self.triggerExitRuleEvent()
541                     _prevctx = localctx
542                     localctx = LaTeXParser.RelationContext(self, _parentctx, _parentState)
543                     self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
544                     self.state = 85
545                     if not self.precpred(self._ctx, 2):
546                         from antlr4.error.Errors import FailedPredicateException
547                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
548                     self.state = 86
549                     _la = self._input.LA(1)
550                     if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (LaTeXParser.EQUAL - 77)) | (1 << (LaTeXParser.NEQ - 77)) | (1 << (LaTeXParser.LT - 77)) | (1 << (LaTeXParser.LTE - 77)) | (1 << (LaTeXParser.GT - 77)) | (1 << (LaTeXParser.GTE - 77)))) != 0)):
551                         self._errHandler.recoverInline(self)
552                     else:
553                         self._errHandler.reportMatch(self)
554                         self.consume()
555                     self.state = 87
556                     self.relation(3)
557                 self.state = 92
558                 self._errHandler.sync(self)
559                 _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
560 
561         except RecognitionException as re:
562             localctx.exception = re
563             self._errHandler.reportError(self, re)
564             self._errHandler.recover(self, re)
565         finally:
566             self.unrollRecursionContexts(_parentctx)
567         return localctx
568 
569 
570     class EqualityContext(ParserRuleContext):
571 
572         def __init__(self, parser, parent=None, invokingState=-1):
573             super(LaTeXParser.EqualityContext, self).__init__(parent, invokingState)
574             self.parser = parser
575 
576         def expr(self, i=None):
577             if i is None:
578                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
579             else:
580                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
581 
582 
583         def EQUAL(self):
584             return self.getToken(LaTeXParser.EQUAL, 0)
585 
586         def getRuleIndex(self):
587             return LaTeXParser.RULE_equality
588 
589 
590 
591 
592     def equality(self):
593 
594         localctx = LaTeXParser.EqualityContext(self, self._ctx, self.state)
595         self.enterRule(localctx, 4, self.RULE_equality)
596         try:
597             self.enterOuterAlt(localctx, 1)
598             self.state = 93
599             self.expr()
600             self.state = 94
601             self.match(LaTeXParser.EQUAL)
602             self.state = 95
603             self.expr()
604         except RecognitionException as re:
605             localctx.exception = re
606             self._errHandler.reportError(self, re)
607             self._errHandler.recover(self, re)
608         finally:
609             self.exitRule()
610         return localctx
611 
612 
613     class ExprContext(ParserRuleContext):
614 
615         def __init__(self, parser, parent=None, invokingState=-1):
616             super(LaTeXParser.ExprContext, self).__init__(parent, invokingState)
617             self.parser = parser
618 
619         def additive(self):
620             return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)
621 
622 
623         def getRuleIndex(self):
624             return LaTeXParser.RULE_expr
625 
626 
627 
628 
629     def expr(self):
630 
631         localctx = LaTeXParser.ExprContext(self, self._ctx, self.state)
632         self.enterRule(localctx, 6, self.RULE_expr)
633         try:
634             self.enterOuterAlt(localctx, 1)
635             self.state = 97
636             self.additive(0)
637         except RecognitionException as re:
638             localctx.exception = re
639             self._errHandler.reportError(self, re)
640             self._errHandler.recover(self, re)
641         finally:
642             self.exitRule()
643         return localctx
644 
645 
646     class AdditiveContext(ParserRuleContext):
647 
648         def __init__(self, parser, parent=None, invokingState=-1):
649             super(LaTeXParser.AdditiveContext, self).__init__(parent, invokingState)
650             self.parser = parser
651 
652         def mp(self):
653             return self.getTypedRuleContext(LaTeXParser.MpContext,0)
654 
655 
656         def additive(self, i=None):
657             if i is None:
658                 return self.getTypedRuleContexts(LaTeXParser.AdditiveContext)
659             else:
660                 return self.getTypedRuleContext(LaTeXParser.AdditiveContext,i)
661 
662 
663         def ADD(self):
664             return self.getToken(LaTeXParser.ADD, 0)
665 
666         def SUB(self):
667             return self.getToken(LaTeXParser.SUB, 0)
668 
669         def getRuleIndex(self):
670             return LaTeXParser.RULE_additive
671 
672 
673 
674     def additive(self, _p=0):
675         _parentctx = self._ctx
676         _parentState = self.state
677         localctx = LaTeXParser.AdditiveContext(self, self._ctx, _parentState)
678         _prevctx = localctx
679         _startState = 8
680         self.enterRecursionRule(localctx, 8, self.RULE_additive, _p)
681         self._la = 0 # Token type
682         try:
683             self.enterOuterAlt(localctx, 1)
684             self.state = 100
685             self.mp(0)
686             self._ctx.stop = self._input.LT(-1)
687             self.state = 107
688             self._errHandler.sync(self)
689             _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
690             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
691                 if _alt==1:
692                     if self._parseListeners is not None:
693                         self.triggerExitRuleEvent()
694                     _prevctx = localctx
695                     localctx = LaTeXParser.AdditiveContext(self, _parentctx, _parentState)
696                     self.pushNewRecursionContext(localctx, _startState, self.RULE_additive)
697                     self.state = 102
698                     if not self.precpred(self._ctx, 2):
699                         from antlr4.error.Errors import FailedPredicateException
700                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
701                     self.state = 103
702                     _la = self._input.LA(1)
703                     if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
704                         self._errHandler.recoverInline(self)
705                     else:
706                         self._errHandler.reportMatch(self)
707                         self.consume()
708                     self.state = 104
709                     self.additive(3)
710                 self.state = 109
711                 self._errHandler.sync(self)
712                 _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
713 
714         except RecognitionException as re:
715             localctx.exception = re
716             self._errHandler.reportError(self, re)
717             self._errHandler.recover(self, re)
718         finally:
719             self.unrollRecursionContexts(_parentctx)
720         return localctx
721 
722 
723     class MpContext(ParserRuleContext):
724 
725         def __init__(self, parser, parent=None, invokingState=-1):
726             super(LaTeXParser.MpContext, self).__init__(parent, invokingState)
727             self.parser = parser
728 
729         def unary(self):
730             return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)
731 
732 
733         def mp(self, i=None):
734             if i is None:
735                 return self.getTypedRuleContexts(LaTeXParser.MpContext)
736             else:
737                 return self.getTypedRuleContext(LaTeXParser.MpContext,i)
738 
739 
740         def MUL(self):
741             return self.getToken(LaTeXParser.MUL, 0)
742 
743         def CMD_TIMES(self):
744             return self.getToken(LaTeXParser.CMD_TIMES, 0)
745 
746         def CMD_CDOT(self):
747             return self.getToken(LaTeXParser.CMD_CDOT, 0)
748 
749         def DIV(self):
750             return self.getToken(LaTeXParser.DIV, 0)
751 
752         def CMD_DIV(self):
753             return self.getToken(LaTeXParser.CMD_DIV, 0)
754 
755         def COLON(self):
756             return self.getToken(LaTeXParser.COLON, 0)
757 
758         def getRuleIndex(self):
759             return LaTeXParser.RULE_mp
760 
761 
762 
763     def mp(self, _p=0):
764         _parentctx = self._ctx
765         _parentState = self.state
766         localctx = LaTeXParser.MpContext(self, self._ctx, _parentState)
767         _prevctx = localctx
768         _startState = 10
769         self.enterRecursionRule(localctx, 10, self.RULE_mp, _p)
770         self._la = 0 # Token type
771         try:
772             self.enterOuterAlt(localctx, 1)
773             self.state = 111
774             self.unary()
775             self._ctx.stop = self._input.LT(-1)
776             self.state = 118
777             self._errHandler.sync(self)
778             _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
779             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
780                 if _alt==1:
781                     if self._parseListeners is not None:
782                         self.triggerExitRuleEvent()
783                     _prevctx = localctx
784                     localctx = LaTeXParser.MpContext(self, _parentctx, _parentState)
785                     self.pushNewRecursionContext(localctx, _startState, self.RULE_mp)
786                     self.state = 113
787                     if not self.precpred(self._ctx, 2):
788                         from antlr4.error.Errors import FailedPredicateException
789                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
790                     self.state = 114
791                     _la = self._input.LA(1)
792                     if not(((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & ((1 << (LaTeXParser.MUL - 16)) | (1 << (LaTeXParser.DIV - 16)) | (1 << (LaTeXParser.CMD_TIMES - 16)) | (1 << (LaTeXParser.CMD_CDOT - 16)) | (1 << (LaTeXParser.CMD_DIV - 16)) | (1 << (LaTeXParser.COLON - 16)))) != 0)):
793                         self._errHandler.recoverInline(self)
794                     else:
795                         self._errHandler.reportMatch(self)
796                         self.consume()
797                     self.state = 115
798                     self.mp(3)
799                 self.state = 120
800                 self._errHandler.sync(self)
801                 _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
802 
803         except RecognitionException as re:
804             localctx.exception = re
805             self._errHandler.reportError(self, re)
806             self._errHandler.recover(self, re)
807         finally:
808             self.unrollRecursionContexts(_parentctx)
809         return localctx
810 
811 
812     class Mp_nofuncContext(ParserRuleContext):
813 
814         def __init__(self, parser, parent=None, invokingState=-1):
815             super(LaTeXParser.Mp_nofuncContext, self).__init__(parent, invokingState)
816             self.parser = parser
817 
818         def unary_nofunc(self):
819             return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)
820 
821 
822         def mp_nofunc(self, i=None):
823             if i is None:
824                 return self.getTypedRuleContexts(LaTeXParser.Mp_nofuncContext)
825             else:
826                 return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,i)
827 
828 
829         def MUL(self):
830             return self.getToken(LaTeXParser.MUL, 0)
831 
832         def CMD_TIMES(self):
833             return self.getToken(LaTeXParser.CMD_TIMES, 0)
834 
835         def CMD_CDOT(self):
836             return self.getToken(LaTeXParser.CMD_CDOT, 0)
837 
838         def DIV(self):
839             return self.getToken(LaTeXParser.DIV, 0)
840 
841         def CMD_DIV(self):
842             return self.getToken(LaTeXParser.CMD_DIV, 0)
843 
844         def COLON(self):
845             return self.getToken(LaTeXParser.COLON, 0)
846 
847         def getRuleIndex(self):
848             return LaTeXParser.RULE_mp_nofunc
849 
850 
851 
852     def mp_nofunc(self, _p=0):
853         _parentctx = self._ctx
854         _parentState = self.state
855         localctx = LaTeXParser.Mp_nofuncContext(self, self._ctx, _parentState)
856         _prevctx = localctx
857         _startState = 12
858         self.enterRecursionRule(localctx, 12, self.RULE_mp_nofunc, _p)
859         self._la = 0 # Token type
860         try:
861             self.enterOuterAlt(localctx, 1)
862             self.state = 122
863             self.unary_nofunc()
864             self._ctx.stop = self._input.LT(-1)
865             self.state = 129
866             self._errHandler.sync(self)
867             _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
868             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
869                 if _alt==1:
870                     if self._parseListeners is not None:
871                         self.triggerExitRuleEvent()
872                     _prevctx = localctx
873                     localctx = LaTeXParser.Mp_nofuncContext(self, _parentctx, _parentState)
874                     self.pushNewRecursionContext(localctx, _startState, self.RULE_mp_nofunc)
875                     self.state = 124
876                     if not self.precpred(self._ctx, 2):
877                         from antlr4.error.Errors import FailedPredicateException
878                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
879                     self.state = 125
880                     _la = self._input.LA(1)
881                     if not(((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & ((1 << (LaTeXParser.MUL - 16)) | (1 << (LaTeXParser.DIV - 16)) | (1 << (LaTeXParser.CMD_TIMES - 16)) | (1 << (LaTeXParser.CMD_CDOT - 16)) | (1 << (LaTeXParser.CMD_DIV - 16)) | (1 << (LaTeXParser.COLON - 16)))) != 0)):
882                         self._errHandler.recoverInline(self)
883                     else:
884                         self._errHandler.reportMatch(self)
885                         self.consume()
886                     self.state = 126
887                     self.mp_nofunc(3)
888                 self.state = 131
889                 self._errHandler.sync(self)
890                 _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
891 
892         except RecognitionException as re:
893             localctx.exception = re
894             self._errHandler.reportError(self, re)
895             self._errHandler.recover(self, re)
896         finally:
897             self.unrollRecursionContexts(_parentctx)
898         return localctx
899 
900 
901     class UnaryContext(ParserRuleContext):
902 
903         def __init__(self, parser, parent=None, invokingState=-1):
904             super(LaTeXParser.UnaryContext, self).__init__(parent, invokingState)
905             self.parser = parser
906 
907         def unary(self):
908             return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)
909 
910 
911         def ADD(self):
912             return self.getToken(LaTeXParser.ADD, 0)
913 
914         def SUB(self):
915             return self.getToken(LaTeXParser.SUB, 0)
916 
917         def postfix(self, i=None):
918             if i is None:
919                 return self.getTypedRuleContexts(LaTeXParser.PostfixContext)
920             else:
921                 return self.getTypedRuleContext(LaTeXParser.PostfixContext,i)
922 
923 
924         def getRuleIndex(self):
925             return LaTeXParser.RULE_unary
926 
927 
928 
929 
930     def unary(self):
931 
932         localctx = LaTeXParser.UnaryContext(self, self._ctx, self.state)
933         self.enterRule(localctx, 14, self.RULE_unary)
934         self._la = 0 # Token type
935         try:
936             self.state = 139
937             self._errHandler.sync(self)
938             token = self._input.LA(1)
939             if token in [LaTeXParser.ADD, LaTeXParser.SUB]:
940                 self.enterOuterAlt(localctx, 1)
941                 self.state = 132
942                 _la = self._input.LA(1)
943                 if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
944                     self._errHandler.recoverInline(self)
945                 else:
946                     self._errHandler.reportMatch(self)
947                     self.consume()
948                 self.state = 133
949                 self.unary()
950                 pass
951             elif token in [LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACE_LITERAL, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_EXP, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.L_FLOOR, LaTeXParser.L_CEIL, LaTeXParser.FUNC_SQRT, LaTeXParser.FUNC_OVERLINE, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_BINOM, LaTeXParser.CMD_DBINOM, LaTeXParser.CMD_TBINOM, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
952                 self.enterOuterAlt(localctx, 2)
953                 self.state = 135
954                 self._errHandler.sync(self)
955                 _alt = 1
956                 while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
957                     if _alt == 1:
958                         self.state = 134
959                         self.postfix()
960 
961                     else:
962                         raise NoViableAltException(self)
963                     self.state = 137
964                     self._errHandler.sync(self)
965                     _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
966 
967                 pass
968             else:
969                 raise NoViableAltException(self)
970 
971         except RecognitionException as re:
972             localctx.exception = re
973             self._errHandler.reportError(self, re)
974             self._errHandler.recover(self, re)
975         finally:
976             self.exitRule()
977         return localctx
978 
979 
980     class Unary_nofuncContext(ParserRuleContext):
981 
982         def __init__(self, parser, parent=None, invokingState=-1):
983             super(LaTeXParser.Unary_nofuncContext, self).__init__(parent, invokingState)
984             self.parser = parser
985 
986         def unary_nofunc(self):
987             return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)
988 
989 
990         def ADD(self):
991             return self.getToken(LaTeXParser.ADD, 0)
992 
993         def SUB(self):
994             return self.getToken(LaTeXParser.SUB, 0)
995 
996         def postfix(self):
997             return self.getTypedRuleContext(LaTeXParser.PostfixContext,0)
998 
999 
1000         def postfix_nofunc(self, i=None):
1001             if i is None:
1002                 return self.getTypedRuleContexts(LaTeXParser.Postfix_nofuncContext)
1003             else:
1004                 return self.getTypedRuleContext(LaTeXParser.Postfix_nofuncContext,i)
1005 
1006 
1007         def getRuleIndex(self):
1008             return LaTeXParser.RULE_unary_nofunc
1009 
1010 
1011 
1012 
1013     def unary_nofunc(self):
1014 
1015         localctx = LaTeXParser.Unary_nofuncContext(self, self._ctx, self.state)
1016         self.enterRule(localctx, 16, self.RULE_unary_nofunc)
1017         self._la = 0 # Token type
1018         try:
1019             self.state = 150
1020             self._errHandler.sync(self)
1021             token = self._input.LA(1)
1022             if token in [LaTeXParser.ADD, LaTeXParser.SUB]:
1023                 self.enterOuterAlt(localctx, 1)
1024                 self.state = 141
1025                 _la = self._input.LA(1)
1026                 if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
1027                     self._errHandler.recoverInline(self)
1028                 else:
1029                     self._errHandler.reportMatch(self)
1030                     self.consume()
1031                 self.state = 142
1032                 self.unary_nofunc()
1033                 pass
1034             elif token in [LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACE_LITERAL, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_EXP, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.L_FLOOR, LaTeXParser.L_CEIL, LaTeXParser.FUNC_SQRT, LaTeXParser.FUNC_OVERLINE, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_BINOM, LaTeXParser.CMD_DBINOM, LaTeXParser.CMD_TBINOM, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
1035                 self.enterOuterAlt(localctx, 2)
1036                 self.state = 143
1037                 self.postfix()
1038                 self.state = 147
1039                 self._errHandler.sync(self)
1040                 _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
1041                 while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1042                     if _alt==1:
1043                         self.state = 144
1044                         self.postfix_nofunc()
1045                     self.state = 149
1046                     self._errHandler.sync(self)
1047                     _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
1048 
1049                 pass
1050             else:
1051                 raise NoViableAltException(self)
1052 
1053         except RecognitionException as re:
1054             localctx.exception = re
1055             self._errHandler.reportError(self, re)
1056             self._errHandler.recover(self, re)
1057         finally:
1058             self.exitRule()
1059         return localctx
1060 
1061 
1062     class PostfixContext(ParserRuleContext):
1063 
1064         def __init__(self, parser, parent=None, invokingState=-1):
1065             super(LaTeXParser.PostfixContext, self).__init__(parent, invokingState)
1066             self.parser = parser
1067 
1068         def exp(self):
1069             return self.getTypedRuleContext(LaTeXParser.ExpContext,0)
1070 
1071 
1072         def postfix_op(self, i=None):
1073             if i is None:
1074                 return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
1075             else:
1076                 return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)
1077 
1078 
1079         def getRuleIndex(self):
1080             return LaTeXParser.RULE_postfix
1081 
1082 
1083 
1084 
1085     def postfix(self):
1086 
1087         localctx = LaTeXParser.PostfixContext(self, self._ctx, self.state)
1088         self.enterRule(localctx, 18, self.RULE_postfix)
1089         try:
1090             self.enterOuterAlt(localctx, 1)
1091             self.state = 152
1092             self.exp(0)
1093             self.state = 156
1094             self._errHandler.sync(self)
1095             _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
1096             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1097                 if _alt==1:
1098                     self.state = 153
1099                     self.postfix_op()
1100                 self.state = 158
1101                 self._errHandler.sync(self)
1102                 _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
1103 
1104         except RecognitionException as re:
1105             localctx.exception = re
1106             self._errHandler.reportError(self, re)
1107             self._errHandler.recover(self, re)
1108         finally:
1109             self.exitRule()
1110         return localctx
1111 
1112 
1113     class Postfix_nofuncContext(ParserRuleContext):
1114 
1115         def __init__(self, parser, parent=None, invokingState=-1):
1116             super(LaTeXParser.Postfix_nofuncContext, self).__init__(parent, invokingState)
1117             self.parser = parser
1118 
1119         def exp_nofunc(self):
1120             return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)
1121 
1122 
1123         def postfix_op(self, i=None):
1124             if i is None:
1125                 return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
1126             else:
1127                 return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)
1128 
1129 
1130         def getRuleIndex(self):
1131             return LaTeXParser.RULE_postfix_nofunc
1132 
1133 
1134 
1135 
1136     def postfix_nofunc(self):
1137 
1138         localctx = LaTeXParser.Postfix_nofuncContext(self, self._ctx, self.state)
1139         self.enterRule(localctx, 20, self.RULE_postfix_nofunc)
1140         try:
1141             self.enterOuterAlt(localctx, 1)
1142             self.state = 159
1143             self.exp_nofunc(0)
1144             self.state = 163
1145             self._errHandler.sync(self)
1146             _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
1147             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1148                 if _alt==1:
1149                     self.state = 160
1150                     self.postfix_op()
1151                 self.state = 165
1152                 self._errHandler.sync(self)
1153                 _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
1154 
1155         except RecognitionException as re:
1156             localctx.exception = re
1157             self._errHandler.reportError(self, re)
1158             self._errHandler.recover(self, re)
1159         finally:
1160             self.exitRule()
1161         return localctx
1162 
1163 
1164     class Postfix_opContext(ParserRuleContext):
1165 
1166         def __init__(self, parser, parent=None, invokingState=-1):
1167             super(LaTeXParser.Postfix_opContext, self).__init__(parent, invokingState)
1168             self.parser = parser
1169 
1170         def BANG(self):
1171             return self.getToken(LaTeXParser.BANG, 0)
1172 
1173         def eval_at(self):
1174             return self.getTypedRuleContext(LaTeXParser.Eval_atContext,0)
1175 
1176 
1177         def getRuleIndex(self):
1178             return LaTeXParser.RULE_postfix_op
1179 
1180 
1181 
1182 
1183     def postfix_op(self):
1184 
1185         localctx = LaTeXParser.Postfix_opContext(self, self._ctx, self.state)
1186         self.enterRule(localctx, 22, self.RULE_postfix_op)
1187         try:
1188             self.state = 168
1189             self._errHandler.sync(self)
1190             token = self._input.LA(1)
1191             if token in [LaTeXParser.BANG]:
1192                 self.enterOuterAlt(localctx, 1)
1193                 self.state = 166
1194                 self.match(LaTeXParser.BANG)
1195                 pass
1196             elif token in [LaTeXParser.BAR]:
1197                 self.enterOuterAlt(localctx, 2)
1198                 self.state = 167
1199                 self.eval_at()
1200                 pass
1201             else:
1202                 raise NoViableAltException(self)
1203 
1204         except RecognitionException as re:
1205             localctx.exception = re
1206             self._errHandler.reportError(self, re)
1207             self._errHandler.recover(self, re)
1208         finally:
1209             self.exitRule()
1210         return localctx
1211 
1212 
1213     class Eval_atContext(ParserRuleContext):
1214 
1215         def __init__(self, parser, parent=None, invokingState=-1):
1216             super(LaTeXParser.Eval_atContext, self).__init__(parent, invokingState)
1217             self.parser = parser
1218 
1219         def BAR(self):
1220             return self.getToken(LaTeXParser.BAR, 0)
1221 
1222         def eval_at_sup(self):
1223             return self.getTypedRuleContext(LaTeXParser.Eval_at_supContext,0)
1224 
1225 
1226         def eval_at_sub(self):
1227             return self.getTypedRuleContext(LaTeXParser.Eval_at_subContext,0)
1228 
1229 
1230         def getRuleIndex(self):
1231             return LaTeXParser.RULE_eval_at
1232 
1233 
1234 
1235 
1236     def eval_at(self):
1237 
1238         localctx = LaTeXParser.Eval_atContext(self, self._ctx, self.state)
1239         self.enterRule(localctx, 24, self.RULE_eval_at)
1240         try:
1241             self.enterOuterAlt(localctx, 1)
1242             self.state = 170
1243             self.match(LaTeXParser.BAR)
1244             self.state = 176
1245             self._errHandler.sync(self)
1246             la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
1247             if la_ == 1:
1248                 self.state = 171
1249                 self.eval_at_sup()
1250                 pass
1251 
1252             elif la_ == 2:
1253                 self.state = 172
1254                 self.eval_at_sub()
1255                 pass
1256 
1257             elif la_ == 3:
1258                 self.state = 173
1259                 self.eval_at_sup()
1260                 self.state = 174
1261                 self.eval_at_sub()
1262                 pass
1263 
1264 
1265         except RecognitionException as re:
1266             localctx.exception = re
1267             self._errHandler.reportError(self, re)
1268             self._errHandler.recover(self, re)
1269         finally:
1270             self.exitRule()
1271         return localctx
1272 
1273 
1274     class Eval_at_subContext(ParserRuleContext):
1275 
1276         def __init__(self, parser, parent=None, invokingState=-1):
1277             super(LaTeXParser.Eval_at_subContext, self).__init__(parent, invokingState)
1278             self.parser = parser
1279 
1280         def UNDERSCORE(self):
1281             return self.getToken(LaTeXParser.UNDERSCORE, 0)
1282 
1283         def L_BRACE(self):
1284             return self.getToken(LaTeXParser.L_BRACE, 0)
1285 
1286         def R_BRACE(self):
1287             return self.getToken(LaTeXParser.R_BRACE, 0)
1288 
1289         def expr(self):
1290             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1291 
1292 
1293         def equality(self):
1294             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
1295 
1296 
1297         def getRuleIndex(self):
1298             return LaTeXParser.RULE_eval_at_sub
1299 
1300 
1301 
1302 
1303     def eval_at_sub(self):
1304 
1305         localctx = LaTeXParser.Eval_at_subContext(self, self._ctx, self.state)
1306         self.enterRule(localctx, 26, self.RULE_eval_at_sub)
1307         try:
1308             self.enterOuterAlt(localctx, 1)
1309             self.state = 178
1310             self.match(LaTeXParser.UNDERSCORE)
1311             self.state = 179
1312             self.match(LaTeXParser.L_BRACE)
1313             self.state = 182
1314             self._errHandler.sync(self)
1315             la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
1316             if la_ == 1:
1317                 self.state = 180
1318                 self.expr()
1319                 pass
1320 
1321             elif la_ == 2:
1322                 self.state = 181
1323                 self.equality()
1324                 pass
1325 
1326 
1327             self.state = 184
1328             self.match(LaTeXParser.R_BRACE)
1329         except RecognitionException as re:
1330             localctx.exception = re
1331             self._errHandler.reportError(self, re)
1332             self._errHandler.recover(self, re)
1333         finally:
1334             self.exitRule()
1335         return localctx
1336 
1337 
1338     class Eval_at_supContext(ParserRuleContext):
1339 
1340         def __init__(self, parser, parent=None, invokingState=-1):
1341             super(LaTeXParser.Eval_at_supContext, self).__init__(parent, invokingState)
1342             self.parser = parser
1343 
1344         def CARET(self):
1345             return self.getToken(LaTeXParser.CARET, 0)
1346 
1347         def L_BRACE(self):
1348             return self.getToken(LaTeXParser.L_BRACE, 0)
1349 
1350         def R_BRACE(self):
1351             return self.getToken(LaTeXParser.R_BRACE, 0)
1352 
1353         def expr(self):
1354             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1355 
1356 
1357         def equality(self):
1358             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
1359 
1360 
1361         def getRuleIndex(self):
1362             return LaTeXParser.RULE_eval_at_sup
1363 
1364 
1365 
1366 
1367     def eval_at_sup(self):
1368 
1369         localctx = LaTeXParser.Eval_at_supContext(self, self._ctx, self.state)
1370         self.enterRule(localctx, 28, self.RULE_eval_at_sup)
1371         try:
1372             self.enterOuterAlt(localctx, 1)
1373             self.state = 186
1374             self.match(LaTeXParser.CARET)
1375             self.state = 187
1376             self.match(LaTeXParser.L_BRACE)
1377             self.state = 190
1378             self._errHandler.sync(self)
1379             la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
1380             if la_ == 1:
1381                 self.state = 188
1382                 self.expr()
1383                 pass
1384 
1385             elif la_ == 2:
1386                 self.state = 189
1387                 self.equality()
1388                 pass
1389 
1390 
1391             self.state = 192
1392             self.match(LaTeXParser.R_BRACE)
1393         except RecognitionException as re:
1394             localctx.exception = re
1395             self._errHandler.reportError(self, re)
1396             self._errHandler.recover(self, re)
1397         finally:
1398             self.exitRule()
1399         return localctx
1400 
1401 
1402     class ExpContext(ParserRuleContext):
1403 
1404         def __init__(self, parser, parent=None, invokingState=-1):
1405             super(LaTeXParser.ExpContext, self).__init__(parent, invokingState)
1406             self.parser = parser
1407 
1408         def comp(self):
1409             return self.getTypedRuleContext(LaTeXParser.CompContext,0)
1410 
1411 
1412         def exp(self):
1413             return self.getTypedRuleContext(LaTeXParser.ExpContext,0)
1414 
1415 
1416         def CARET(self):
1417             return self.getToken(LaTeXParser.CARET, 0)
1418 
1419         def atom(self):
1420             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
1421 
1422 
1423         def L_BRACE(self):
1424             return self.getToken(LaTeXParser.L_BRACE, 0)
1425 
1426         def expr(self):
1427             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1428 
1429 
1430         def R_BRACE(self):
1431             return self.getToken(LaTeXParser.R_BRACE, 0)
1432 
1433         def subexpr(self):
1434             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
1435 
1436 
1437         def getRuleIndex(self):
1438             return LaTeXParser.RULE_exp
1439 
1440 
1441 
1442     def exp(self, _p=0):
1443         _parentctx = self._ctx
1444         _parentState = self.state
1445         localctx = LaTeXParser.ExpContext(self, self._ctx, _parentState)
1446         _prevctx = localctx
1447         _startState = 30
1448         self.enterRecursionRule(localctx, 30, self.RULE_exp, _p)
1449         try:
1450             self.enterOuterAlt(localctx, 1)
1451             self.state = 195
1452             self.comp()
1453             self._ctx.stop = self._input.LT(-1)
1454             self.state = 211
1455             self._errHandler.sync(self)
1456             _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
1457             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1458                 if _alt==1:
1459                     if self._parseListeners is not None:
1460                         self.triggerExitRuleEvent()
1461                     _prevctx = localctx
1462                     localctx = LaTeXParser.ExpContext(self, _parentctx, _parentState)
1463                     self.pushNewRecursionContext(localctx, _startState, self.RULE_exp)
1464                     self.state = 197
1465                     if not self.precpred(self._ctx, 2):
1466                         from antlr4.error.Errors import FailedPredicateException
1467                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
1468                     self.state = 198
1469                     self.match(LaTeXParser.CARET)
1470                     self.state = 204
1471                     self._errHandler.sync(self)
1472                     token = self._input.LA(1)
1473                     if token in [LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
1474                         self.state = 199
1475                         self.atom()
1476                         pass
1477                     elif token in [LaTeXParser.L_BRACE]:
1478                         self.state = 200
1479                         self.match(LaTeXParser.L_BRACE)
1480                         self.state = 201
1481                         self.expr()
1482                         self.state = 202
1483                         self.match(LaTeXParser.R_BRACE)
1484                         pass
1485                     else:
1486                         raise NoViableAltException(self)
1487 
1488                     self.state = 207
1489                     self._errHandler.sync(self)
1490                     la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
1491                     if la_ == 1:
1492                         self.state = 206
1493                         self.subexpr()
1494 
1495 
1496                 self.state = 213
1497                 self._errHandler.sync(self)
1498                 _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
1499 
1500         except RecognitionException as re:
1501             localctx.exception = re
1502             self._errHandler.reportError(self, re)
1503             self._errHandler.recover(self, re)
1504         finally:
1505             self.unrollRecursionContexts(_parentctx)
1506         return localctx
1507 
1508 
1509     class Exp_nofuncContext(ParserRuleContext):
1510 
1511         def __init__(self, parser, parent=None, invokingState=-1):
1512             super(LaTeXParser.Exp_nofuncContext, self).__init__(parent, invokingState)
1513             self.parser = parser
1514 
1515         def comp_nofunc(self):
1516             return self.getTypedRuleContext(LaTeXParser.Comp_nofuncContext,0)
1517 
1518 
1519         def exp_nofunc(self):
1520             return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)
1521 
1522 
1523         def CARET(self):
1524             return self.getToken(LaTeXParser.CARET, 0)
1525 
1526         def atom(self):
1527             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
1528 
1529 
1530         def L_BRACE(self):
1531             return self.getToken(LaTeXParser.L_BRACE, 0)
1532 
1533         def expr(self):
1534             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1535 
1536 
1537         def R_BRACE(self):
1538             return self.getToken(LaTeXParser.R_BRACE, 0)
1539 
1540         def subexpr(self):
1541             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
1542 
1543 
1544         def getRuleIndex(self):
1545             return LaTeXParser.RULE_exp_nofunc
1546 
1547 
1548 
1549     def exp_nofunc(self, _p=0):
1550         _parentctx = self._ctx
1551         _parentState = self.state
1552         localctx = LaTeXParser.Exp_nofuncContext(self, self._ctx, _parentState)
1553         _prevctx = localctx
1554         _startState = 32
1555         self.enterRecursionRule(localctx, 32, self.RULE_exp_nofunc, _p)
1556         try:
1557             self.enterOuterAlt(localctx, 1)
1558             self.state = 215
1559             self.comp_nofunc()
1560             self._ctx.stop = self._input.LT(-1)
1561             self.state = 231
1562             self._errHandler.sync(self)
1563             _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
1564             while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
1565                 if _alt==1:
1566                     if self._parseListeners is not None:
1567                         self.triggerExitRuleEvent()
1568                     _prevctx = localctx
1569                     localctx = LaTeXParser.Exp_nofuncContext(self, _parentctx, _parentState)
1570                     self.pushNewRecursionContext(localctx, _startState, self.RULE_exp_nofunc)
1571                     self.state = 217
1572                     if not self.precpred(self._ctx, 2):
1573                         from antlr4.error.Errors import FailedPredicateException
1574                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
1575                     self.state = 218
1576                     self.match(LaTeXParser.CARET)
1577                     self.state = 224
1578                     self._errHandler.sync(self)
1579                     token = self._input.LA(1)
1580                     if token in [LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
1581                         self.state = 219
1582                         self.atom()
1583                         pass
1584                     elif token in [LaTeXParser.L_BRACE]:
1585                         self.state = 220
1586                         self.match(LaTeXParser.L_BRACE)
1587                         self.state = 221
1588                         self.expr()
1589                         self.state = 222
1590                         self.match(LaTeXParser.R_BRACE)
1591                         pass
1592                     else:
1593                         raise NoViableAltException(self)
1594 
1595                     self.state = 227
1596                     self._errHandler.sync(self)
1597                     la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
1598                     if la_ == 1:
1599                         self.state = 226
1600                         self.subexpr()
1601 
1602 
1603                 self.state = 233
1604                 self._errHandler.sync(self)
1605                 _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
1606 
1607         except RecognitionException as re:
1608             localctx.exception = re
1609             self._errHandler.reportError(self, re)
1610             self._errHandler.recover(self, re)
1611         finally:
1612             self.unrollRecursionContexts(_parentctx)
1613         return localctx
1614 
1615 
1616     class CompContext(ParserRuleContext):
1617 
1618         def __init__(self, parser, parent=None, invokingState=-1):
1619             super(LaTeXParser.CompContext, self).__init__(parent, invokingState)
1620             self.parser = parser
1621 
1622         def group(self):
1623             return self.getTypedRuleContext(LaTeXParser.GroupContext,0)
1624 
1625 
1626         def abs_group(self):
1627             return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)
1628 
1629 
1630         def func(self):
1631             return self.getTypedRuleContext(LaTeXParser.FuncContext,0)
1632 
1633 
1634         def atom(self):
1635             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
1636 
1637 
1638         def frac(self):
1639             return self.getTypedRuleContext(LaTeXParser.FracContext,0)
1640 
1641 
1642         def binom(self):
1643             return self.getTypedRuleContext(LaTeXParser.BinomContext,0)
1644 
1645 
1646         def floor(self):
1647             return self.getTypedRuleContext(LaTeXParser.FloorContext,0)
1648 
1649 
1650         def ceil(self):
1651             return self.getTypedRuleContext(LaTeXParser.CeilContext,0)
1652 
1653 
1654         def getRuleIndex(self):
1655             return LaTeXParser.RULE_comp
1656 
1657 
1658 
1659 
1660     def comp(self):
1661 
1662         localctx = LaTeXParser.CompContext(self, self._ctx, self.state)
1663         self.enterRule(localctx, 34, self.RULE_comp)
1664         try:
1665             self.state = 242
1666             self._errHandler.sync(self)
1667             la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
1668             if la_ == 1:
1669                 self.enterOuterAlt(localctx, 1)
1670                 self.state = 234
1671                 self.group()
1672                 pass
1673 
1674             elif la_ == 2:
1675                 self.enterOuterAlt(localctx, 2)
1676                 self.state = 235
1677                 self.abs_group()
1678                 pass
1679 
1680             elif la_ == 3:
1681                 self.enterOuterAlt(localctx, 3)
1682                 self.state = 236
1683                 self.func()
1684                 pass
1685 
1686             elif la_ == 4:
1687                 self.enterOuterAlt(localctx, 4)
1688                 self.state = 237
1689                 self.atom()
1690                 pass
1691 
1692             elif la_ == 5:
1693                 self.enterOuterAlt(localctx, 5)
1694                 self.state = 238
1695                 self.frac()
1696                 pass
1697 
1698             elif la_ == 6:
1699                 self.enterOuterAlt(localctx, 6)
1700                 self.state = 239
1701                 self.binom()
1702                 pass
1703 
1704             elif la_ == 7:
1705                 self.enterOuterAlt(localctx, 7)
1706                 self.state = 240
1707                 self.floor()
1708                 pass
1709 
1710             elif la_ == 8:
1711                 self.enterOuterAlt(localctx, 8)
1712                 self.state = 241
1713                 self.ceil()
1714                 pass
1715 
1716 
1717         except RecognitionException as re:
1718             localctx.exception = re
1719             self._errHandler.reportError(self, re)
1720             self._errHandler.recover(self, re)
1721         finally:
1722             self.exitRule()
1723         return localctx
1724 
1725 
1726     class Comp_nofuncContext(ParserRuleContext):
1727 
1728         def __init__(self, parser, parent=None, invokingState=-1):
1729             super(LaTeXParser.Comp_nofuncContext, self).__init__(parent, invokingState)
1730             self.parser = parser
1731 
1732         def group(self):
1733             return self.getTypedRuleContext(LaTeXParser.GroupContext,0)
1734 
1735 
1736         def abs_group(self):
1737             return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)
1738 
1739 
1740         def atom(self):
1741             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
1742 
1743 
1744         def frac(self):
1745             return self.getTypedRuleContext(LaTeXParser.FracContext,0)
1746 
1747 
1748         def binom(self):
1749             return self.getTypedRuleContext(LaTeXParser.BinomContext,0)
1750 
1751 
1752         def floor(self):
1753             return self.getTypedRuleContext(LaTeXParser.FloorContext,0)
1754 
1755 
1756         def ceil(self):
1757             return self.getTypedRuleContext(LaTeXParser.CeilContext,0)
1758 
1759 
1760         def getRuleIndex(self):
1761             return LaTeXParser.RULE_comp_nofunc
1762 
1763 
1764 
1765 
1766     def comp_nofunc(self):
1767 
1768         localctx = LaTeXParser.Comp_nofuncContext(self, self._ctx, self.state)
1769         self.enterRule(localctx, 36, self.RULE_comp_nofunc)
1770         try:
1771             self.state = 251
1772             self._errHandler.sync(self)
1773             la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
1774             if la_ == 1:
1775                 self.enterOuterAlt(localctx, 1)
1776                 self.state = 244
1777                 self.group()
1778                 pass
1779 
1780             elif la_ == 2:
1781                 self.enterOuterAlt(localctx, 2)
1782                 self.state = 245
1783                 self.abs_group()
1784                 pass
1785 
1786             elif la_ == 3:
1787                 self.enterOuterAlt(localctx, 3)
1788                 self.state = 246
1789                 self.atom()
1790                 pass
1791 
1792             elif la_ == 4:
1793                 self.enterOuterAlt(localctx, 4)
1794                 self.state = 247
1795                 self.frac()
1796                 pass
1797 
1798             elif la_ == 5:
1799                 self.enterOuterAlt(localctx, 5)
1800                 self.state = 248
1801                 self.binom()
1802                 pass
1803 
1804             elif la_ == 6:
1805                 self.enterOuterAlt(localctx, 6)
1806                 self.state = 249
1807                 self.floor()
1808                 pass
1809 
1810             elif la_ == 7:
1811                 self.enterOuterAlt(localctx, 7)
1812                 self.state = 250
1813                 self.ceil()
1814                 pass
1815 
1816 
1817         except RecognitionException as re:
1818             localctx.exception = re
1819             self._errHandler.reportError(self, re)
1820             self._errHandler.recover(self, re)
1821         finally:
1822             self.exitRule()
1823         return localctx
1824 
1825 
1826     class GroupContext(ParserRuleContext):
1827 
1828         def __init__(self, parser, parent=None, invokingState=-1):
1829             super(LaTeXParser.GroupContext, self).__init__(parent, invokingState)
1830             self.parser = parser
1831 
1832         def L_PAREN(self):
1833             return self.getToken(LaTeXParser.L_PAREN, 0)
1834 
1835         def expr(self):
1836             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1837 
1838 
1839         def R_PAREN(self):
1840             return self.getToken(LaTeXParser.R_PAREN, 0)
1841 
1842         def L_BRACKET(self):
1843             return self.getToken(LaTeXParser.L_BRACKET, 0)
1844 
1845         def R_BRACKET(self):
1846             return self.getToken(LaTeXParser.R_BRACKET, 0)
1847 
1848         def L_BRACE(self):
1849             return self.getToken(LaTeXParser.L_BRACE, 0)
1850 
1851         def R_BRACE(self):
1852             return self.getToken(LaTeXParser.R_BRACE, 0)
1853 
1854         def L_BRACE_LITERAL(self):
1855             return self.getToken(LaTeXParser.L_BRACE_LITERAL, 0)
1856 
1857         def R_BRACE_LITERAL(self):
1858             return self.getToken(LaTeXParser.R_BRACE_LITERAL, 0)
1859 
1860         def getRuleIndex(self):
1861             return LaTeXParser.RULE_group
1862 
1863 
1864 
1865 
1866     def group(self):
1867 
1868         localctx = LaTeXParser.GroupContext(self, self._ctx, self.state)
1869         self.enterRule(localctx, 38, self.RULE_group)
1870         try:
1871             self.state = 269
1872             self._errHandler.sync(self)
1873             token = self._input.LA(1)
1874             if token in [LaTeXParser.L_PAREN]:
1875                 self.enterOuterAlt(localctx, 1)
1876                 self.state = 253
1877                 self.match(LaTeXParser.L_PAREN)
1878                 self.state = 254
1879                 self.expr()
1880                 self.state = 255
1881                 self.match(LaTeXParser.R_PAREN)
1882                 pass
1883             elif token in [LaTeXParser.L_BRACKET]:
1884                 self.enterOuterAlt(localctx, 2)
1885                 self.state = 257
1886                 self.match(LaTeXParser.L_BRACKET)
1887                 self.state = 258
1888                 self.expr()
1889                 self.state = 259
1890                 self.match(LaTeXParser.R_BRACKET)
1891                 pass
1892             elif token in [LaTeXParser.L_BRACE]:
1893                 self.enterOuterAlt(localctx, 3)
1894                 self.state = 261
1895                 self.match(LaTeXParser.L_BRACE)
1896                 self.state = 262
1897                 self.expr()
1898                 self.state = 263
1899                 self.match(LaTeXParser.R_BRACE)
1900                 pass
1901             elif token in [LaTeXParser.L_BRACE_LITERAL]:
1902                 self.enterOuterAlt(localctx, 4)
1903                 self.state = 265
1904                 self.match(LaTeXParser.L_BRACE_LITERAL)
1905                 self.state = 266
1906                 self.expr()
1907                 self.state = 267
1908                 self.match(LaTeXParser.R_BRACE_LITERAL)
1909                 pass
1910             else:
1911                 raise NoViableAltException(self)
1912 
1913         except RecognitionException as re:
1914             localctx.exception = re
1915             self._errHandler.reportError(self, re)
1916             self._errHandler.recover(self, re)
1917         finally:
1918             self.exitRule()
1919         return localctx
1920 
1921 
1922     class Abs_groupContext(ParserRuleContext):
1923 
1924         def __init__(self, parser, parent=None, invokingState=-1):
1925             super(LaTeXParser.Abs_groupContext, self).__init__(parent, invokingState)
1926             self.parser = parser
1927 
1928         def BAR(self, i=None):
1929             if i is None:
1930                 return self.getTokens(LaTeXParser.BAR)
1931             else:
1932                 return self.getToken(LaTeXParser.BAR, i)
1933 
1934         def expr(self):
1935             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
1936 
1937 
1938         def getRuleIndex(self):
1939             return LaTeXParser.RULE_abs_group
1940 
1941 
1942 
1943 
1944     def abs_group(self):
1945 
1946         localctx = LaTeXParser.Abs_groupContext(self, self._ctx, self.state)
1947         self.enterRule(localctx, 40, self.RULE_abs_group)
1948         try:
1949             self.enterOuterAlt(localctx, 1)
1950             self.state = 271
1951             self.match(LaTeXParser.BAR)
1952             self.state = 272
1953             self.expr()
1954             self.state = 273
1955             self.match(LaTeXParser.BAR)
1956         except RecognitionException as re:
1957             localctx.exception = re
1958             self._errHandler.reportError(self, re)
1959             self._errHandler.recover(self, re)
1960         finally:
1961             self.exitRule()
1962         return localctx
1963 
1964 
1965     class AtomContext(ParserRuleContext):
1966 
1967         def __init__(self, parser, parent=None, invokingState=-1):
1968             super(LaTeXParser.AtomContext, self).__init__(parent, invokingState)
1969             self.parser = parser
1970 
1971         def LETTER(self):
1972             return self.getToken(LaTeXParser.LETTER, 0)
1973 
1974         def SYMBOL(self):
1975             return self.getToken(LaTeXParser.SYMBOL, 0)
1976 
1977         def subexpr(self):
1978             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
1979 
1980 
1981         def NUMBER(self):
1982             return self.getToken(LaTeXParser.NUMBER, 0)
1983 
1984         def DIFFERENTIAL(self):
1985             return self.getToken(LaTeXParser.DIFFERENTIAL, 0)
1986 
1987         def mathit(self):
1988             return self.getTypedRuleContext(LaTeXParser.MathitContext,0)
1989 
1990 
1991         def bra(self):
1992             return self.getTypedRuleContext(LaTeXParser.BraContext,0)
1993 
1994 
1995         def ket(self):
1996             return self.getTypedRuleContext(LaTeXParser.KetContext,0)
1997 
1998 
1999         def getRuleIndex(self):
2000             return LaTeXParser.RULE_atom
2001 
2002 
2003 
2004 
2005     def atom(self):
2006 
2007         localctx = LaTeXParser.AtomContext(self, self._ctx, self.state)
2008         self.enterRule(localctx, 42, self.RULE_atom)
2009         self._la = 0 # Token type
2010         try:
2011             self.state = 284
2012             self._errHandler.sync(self)
2013             token = self._input.LA(1)
2014             if token in [LaTeXParser.LETTER, LaTeXParser.SYMBOL]:
2015                 self.enterOuterAlt(localctx, 1)
2016                 self.state = 275
2017                 _la = self._input.LA(1)
2018                 if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
2019                     self._errHandler.recoverInline(self)
2020                 else:
2021                     self._errHandler.reportMatch(self)
2022                     self.consume()
2023                 self.state = 277
2024                 self._errHandler.sync(self)
2025                 la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
2026                 if la_ == 1:
2027                     self.state = 276
2028                     self.subexpr()
2029 
2030 
2031                 pass
2032             elif token in [LaTeXParser.NUMBER]:
2033                 self.enterOuterAlt(localctx, 2)
2034                 self.state = 279
2035                 self.match(LaTeXParser.NUMBER)
2036                 pass
2037             elif token in [LaTeXParser.DIFFERENTIAL]:
2038                 self.enterOuterAlt(localctx, 3)
2039                 self.state = 280
2040                 self.match(LaTeXParser.DIFFERENTIAL)
2041                 pass
2042             elif token in [LaTeXParser.CMD_MATHIT]:
2043                 self.enterOuterAlt(localctx, 4)
2044                 self.state = 281
2045                 self.mathit()
2046                 pass
2047             elif token in [LaTeXParser.L_ANGLE]:
2048                 self.enterOuterAlt(localctx, 5)
2049                 self.state = 282
2050                 self.bra()
2051                 pass
2052             elif token in [LaTeXParser.BAR, LaTeXParser.L_BAR]:
2053                 self.enterOuterAlt(localctx, 6)
2054                 self.state = 283
2055                 self.ket()
2056                 pass
2057             else:
2058                 raise NoViableAltException(self)
2059 
2060         except RecognitionException as re:
2061             localctx.exception = re
2062             self._errHandler.reportError(self, re)
2063             self._errHandler.recover(self, re)
2064         finally:
2065             self.exitRule()
2066         return localctx
2067 
2068 
2069     class BraContext(ParserRuleContext):
2070 
2071         def __init__(self, parser, parent=None, invokingState=-1):
2072             super(LaTeXParser.BraContext, self).__init__(parent, invokingState)
2073             self.parser = parser
2074 
2075         def L_ANGLE(self):
2076             return self.getToken(LaTeXParser.L_ANGLE, 0)
2077 
2078         def expr(self):
2079             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2080 
2081 
2082         def R_BAR(self):
2083             return self.getToken(LaTeXParser.R_BAR, 0)
2084 
2085         def BAR(self):
2086             return self.getToken(LaTeXParser.BAR, 0)
2087 
2088         def getRuleIndex(self):
2089             return LaTeXParser.RULE_bra
2090 
2091 
2092 
2093 
2094     def bra(self):
2095 
2096         localctx = LaTeXParser.BraContext(self, self._ctx, self.state)
2097         self.enterRule(localctx, 44, self.RULE_bra)
2098         self._la = 0 # Token type
2099         try:
2100             self.enterOuterAlt(localctx, 1)
2101             self.state = 286
2102             self.match(LaTeXParser.L_ANGLE)
2103             self.state = 287
2104             self.expr()
2105             self.state = 288
2106             _la = self._input.LA(1)
2107             if not(_la==LaTeXParser.BAR or _la==LaTeXParser.R_BAR):
2108                 self._errHandler.recoverInline(self)
2109             else:
2110                 self._errHandler.reportMatch(self)
2111                 self.consume()
2112         except RecognitionException as re:
2113             localctx.exception = re
2114             self._errHandler.reportError(self, re)
2115             self._errHandler.recover(self, re)
2116         finally:
2117             self.exitRule()
2118         return localctx
2119 
2120 
2121     class KetContext(ParserRuleContext):
2122 
2123         def __init__(self, parser, parent=None, invokingState=-1):
2124             super(LaTeXParser.KetContext, self).__init__(parent, invokingState)
2125             self.parser = parser
2126 
2127         def expr(self):
2128             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2129 
2130 
2131         def R_ANGLE(self):
2132             return self.getToken(LaTeXParser.R_ANGLE, 0)
2133 
2134         def L_BAR(self):
2135             return self.getToken(LaTeXParser.L_BAR, 0)
2136 
2137         def BAR(self):
2138             return self.getToken(LaTeXParser.BAR, 0)
2139 
2140         def getRuleIndex(self):
2141             return LaTeXParser.RULE_ket
2142 
2143 
2144 
2145 
2146     def ket(self):
2147 
2148         localctx = LaTeXParser.KetContext(self, self._ctx, self.state)
2149         self.enterRule(localctx, 46, self.RULE_ket)
2150         self._la = 0 # Token type
2151         try:
2152             self.enterOuterAlt(localctx, 1)
2153             self.state = 290
2154             _la = self._input.LA(1)
2155             if not(_la==LaTeXParser.BAR or _la==LaTeXParser.L_BAR):
2156                 self._errHandler.recoverInline(self)
2157             else:
2158                 self._errHandler.reportMatch(self)
2159                 self.consume()
2160             self.state = 291
2161             self.expr()
2162             self.state = 292
2163             self.match(LaTeXParser.R_ANGLE)
2164         except RecognitionException as re:
2165             localctx.exception = re
2166             self._errHandler.reportError(self, re)
2167             self._errHandler.recover(self, re)
2168         finally:
2169             self.exitRule()
2170         return localctx
2171 
2172 
2173     class MathitContext(ParserRuleContext):
2174 
2175         def __init__(self, parser, parent=None, invokingState=-1):
2176             super(LaTeXParser.MathitContext, self).__init__(parent, invokingState)
2177             self.parser = parser
2178 
2179         def CMD_MATHIT(self):
2180             return self.getToken(LaTeXParser.CMD_MATHIT, 0)
2181 
2182         def L_BRACE(self):
2183             return self.getToken(LaTeXParser.L_BRACE, 0)
2184 
2185         def mathit_text(self):
2186             return self.getTypedRuleContext(LaTeXParser.Mathit_textContext,0)
2187 
2188 
2189         def R_BRACE(self):
2190             return self.getToken(LaTeXParser.R_BRACE, 0)
2191 
2192         def getRuleIndex(self):
2193             return LaTeXParser.RULE_mathit
2194 
2195 
2196 
2197 
2198     def mathit(self):
2199 
2200         localctx = LaTeXParser.MathitContext(self, self._ctx, self.state)
2201         self.enterRule(localctx, 48, self.RULE_mathit)
2202         try:
2203             self.enterOuterAlt(localctx, 1)
2204             self.state = 294
2205             self.match(LaTeXParser.CMD_MATHIT)
2206             self.state = 295
2207             self.match(LaTeXParser.L_BRACE)
2208             self.state = 296
2209             self.mathit_text()
2210             self.state = 297
2211             self.match(LaTeXParser.R_BRACE)
2212         except RecognitionException as re:
2213             localctx.exception = re
2214             self._errHandler.reportError(self, re)
2215             self._errHandler.recover(self, re)
2216         finally:
2217             self.exitRule()
2218         return localctx
2219 
2220 
2221     class Mathit_textContext(ParserRuleContext):
2222 
2223         def __init__(self, parser, parent=None, invokingState=-1):
2224             super(LaTeXParser.Mathit_textContext, self).__init__(parent, invokingState)
2225             self.parser = parser
2226 
2227         def LETTER(self, i=None):
2228             if i is None:
2229                 return self.getTokens(LaTeXParser.LETTER)
2230             else:
2231                 return self.getToken(LaTeXParser.LETTER, i)
2232 
2233         def getRuleIndex(self):
2234             return LaTeXParser.RULE_mathit_text
2235 
2236 
2237 
2238 
2239     def mathit_text(self):
2240 
2241         localctx = LaTeXParser.Mathit_textContext(self, self._ctx, self.state)
2242         self.enterRule(localctx, 50, self.RULE_mathit_text)
2243         self._la = 0 # Token type
2244         try:
2245             self.enterOuterAlt(localctx, 1)
2246             self.state = 302
2247             self._errHandler.sync(self)
2248             _la = self._input.LA(1)
2249             while _la==LaTeXParser.LETTER:
2250                 self.state = 299
2251                 self.match(LaTeXParser.LETTER)
2252                 self.state = 304
2253                 self._errHandler.sync(self)
2254                 _la = self._input.LA(1)
2255 
2256         except RecognitionException as re:
2257             localctx.exception = re
2258             self._errHandler.reportError(self, re)
2259             self._errHandler.recover(self, re)
2260         finally:
2261             self.exitRule()
2262         return localctx
2263 
2264 
2265     class FracContext(ParserRuleContext):
2266 
2267         def __init__(self, parser, parent=None, invokingState=-1):
2268             super(LaTeXParser.FracContext, self).__init__(parent, invokingState)
2269             self.parser = parser
2270             self.upper = None # ExprContext
2271             self.lower = None # ExprContext
2272 
2273         def CMD_FRAC(self):
2274             return self.getToken(LaTeXParser.CMD_FRAC, 0)
2275 
2276         def L_BRACE(self, i=None):
2277             if i is None:
2278                 return self.getTokens(LaTeXParser.L_BRACE)
2279             else:
2280                 return self.getToken(LaTeXParser.L_BRACE, i)
2281 
2282         def R_BRACE(self, i=None):
2283             if i is None:
2284                 return self.getTokens(LaTeXParser.R_BRACE)
2285             else:
2286                 return self.getToken(LaTeXParser.R_BRACE, i)
2287 
2288         def expr(self, i=None):
2289             if i is None:
2290                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
2291             else:
2292                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
2293 
2294 
2295         def getRuleIndex(self):
2296             return LaTeXParser.RULE_frac
2297 
2298 
2299 
2300 
2301     def frac(self):
2302 
2303         localctx = LaTeXParser.FracContext(self, self._ctx, self.state)
2304         self.enterRule(localctx, 52, self.RULE_frac)
2305         try:
2306             self.enterOuterAlt(localctx, 1)
2307             self.state = 305
2308             self.match(LaTeXParser.CMD_FRAC)
2309             self.state = 306
2310             self.match(LaTeXParser.L_BRACE)
2311             self.state = 307
2312             localctx.upper = self.expr()
2313             self.state = 308
2314             self.match(LaTeXParser.R_BRACE)
2315             self.state = 309
2316             self.match(LaTeXParser.L_BRACE)
2317             self.state = 310
2318             localctx.lower = self.expr()
2319             self.state = 311
2320             self.match(LaTeXParser.R_BRACE)
2321         except RecognitionException as re:
2322             localctx.exception = re
2323             self._errHandler.reportError(self, re)
2324             self._errHandler.recover(self, re)
2325         finally:
2326             self.exitRule()
2327         return localctx
2328 
2329 
2330     class BinomContext(ParserRuleContext):
2331 
2332         def __init__(self, parser, parent=None, invokingState=-1):
2333             super(LaTeXParser.BinomContext, self).__init__(parent, invokingState)
2334             self.parser = parser
2335             self.n = None # ExprContext
2336             self.k = None # ExprContext
2337 
2338         def L_BRACE(self, i=None):
2339             if i is None:
2340                 return self.getTokens(LaTeXParser.L_BRACE)
2341             else:
2342                 return self.getToken(LaTeXParser.L_BRACE, i)
2343 
2344         def R_BRACE(self, i=None):
2345             if i is None:
2346                 return self.getTokens(LaTeXParser.R_BRACE)
2347             else:
2348                 return self.getToken(LaTeXParser.R_BRACE, i)
2349 
2350         def CMD_BINOM(self):
2351             return self.getToken(LaTeXParser.CMD_BINOM, 0)
2352 
2353         def CMD_DBINOM(self):
2354             return self.getToken(LaTeXParser.CMD_DBINOM, 0)
2355 
2356         def CMD_TBINOM(self):
2357             return self.getToken(LaTeXParser.CMD_TBINOM, 0)
2358 
2359         def expr(self, i=None):
2360             if i is None:
2361                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
2362             else:
2363                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
2364 
2365 
2366         def getRuleIndex(self):
2367             return LaTeXParser.RULE_binom
2368 
2369 
2370 
2371 
2372     def binom(self):
2373 
2374         localctx = LaTeXParser.BinomContext(self, self._ctx, self.state)
2375         self.enterRule(localctx, 54, self.RULE_binom)
2376         self._la = 0 # Token type
2377         try:
2378             self.enterOuterAlt(localctx, 1)
2379             self.state = 313
2380             _la = self._input.LA(1)
2381             if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (LaTeXParser.CMD_BINOM - 67)) | (1 << (LaTeXParser.CMD_DBINOM - 67)) | (1 << (LaTeXParser.CMD_TBINOM - 67)))) != 0)):
2382                 self._errHandler.recoverInline(self)
2383             else:
2384                 self._errHandler.reportMatch(self)
2385                 self.consume()
2386             self.state = 314
2387             self.match(LaTeXParser.L_BRACE)
2388             self.state = 315
2389             localctx.n = self.expr()
2390             self.state = 316
2391             self.match(LaTeXParser.R_BRACE)
2392             self.state = 317
2393             self.match(LaTeXParser.L_BRACE)
2394             self.state = 318
2395             localctx.k = self.expr()
2396             self.state = 319
2397             self.match(LaTeXParser.R_BRACE)
2398         except RecognitionException as re:
2399             localctx.exception = re
2400             self._errHandler.reportError(self, re)
2401             self._errHandler.recover(self, re)
2402         finally:
2403             self.exitRule()
2404         return localctx
2405 
2406 
2407     class FloorContext(ParserRuleContext):
2408 
2409         def __init__(self, parser, parent=None, invokingState=-1):
2410             super(LaTeXParser.FloorContext, self).__init__(parent, invokingState)
2411             self.parser = parser
2412             self.val = None # ExprContext
2413 
2414         def L_FLOOR(self):
2415             return self.getToken(LaTeXParser.L_FLOOR, 0)
2416 
2417         def R_FLOOR(self):
2418             return self.getToken(LaTeXParser.R_FLOOR, 0)
2419 
2420         def expr(self):
2421             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2422 
2423 
2424         def getRuleIndex(self):
2425             return LaTeXParser.RULE_floor
2426 
2427 
2428 
2429 
2430     def floor(self):
2431 
2432         localctx = LaTeXParser.FloorContext(self, self._ctx, self.state)
2433         self.enterRule(localctx, 56, self.RULE_floor)
2434         try:
2435             self.enterOuterAlt(localctx, 1)
2436             self.state = 321
2437             self.match(LaTeXParser.L_FLOOR)
2438             self.state = 322
2439             localctx.val = self.expr()
2440             self.state = 323
2441             self.match(LaTeXParser.R_FLOOR)
2442         except RecognitionException as re:
2443             localctx.exception = re
2444             self._errHandler.reportError(self, re)
2445             self._errHandler.recover(self, re)
2446         finally:
2447             self.exitRule()
2448         return localctx
2449 
2450 
2451     class CeilContext(ParserRuleContext):
2452 
2453         def __init__(self, parser, parent=None, invokingState=-1):
2454             super(LaTeXParser.CeilContext, self).__init__(parent, invokingState)
2455             self.parser = parser
2456             self.val = None # ExprContext
2457 
2458         def L_CEIL(self):
2459             return self.getToken(LaTeXParser.L_CEIL, 0)
2460 
2461         def R_CEIL(self):
2462             return self.getToken(LaTeXParser.R_CEIL, 0)
2463 
2464         def expr(self):
2465             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2466 
2467 
2468         def getRuleIndex(self):
2469             return LaTeXParser.RULE_ceil
2470 
2471 
2472 
2473 
2474     def ceil(self):
2475 
2476         localctx = LaTeXParser.CeilContext(self, self._ctx, self.state)
2477         self.enterRule(localctx, 58, self.RULE_ceil)
2478         try:
2479             self.enterOuterAlt(localctx, 1)
2480             self.state = 325
2481             self.match(LaTeXParser.L_CEIL)
2482             self.state = 326
2483             localctx.val = self.expr()
2484             self.state = 327
2485             self.match(LaTeXParser.R_CEIL)
2486         except RecognitionException as re:
2487             localctx.exception = re
2488             self._errHandler.reportError(self, re)
2489             self._errHandler.recover(self, re)
2490         finally:
2491             self.exitRule()
2492         return localctx
2493 
2494 
2495     class Func_normalContext(ParserRuleContext):
2496 
2497         def __init__(self, parser, parent=None, invokingState=-1):
2498             super(LaTeXParser.Func_normalContext, self).__init__(parent, invokingState)
2499             self.parser = parser
2500 
2501         def FUNC_EXP(self):
2502             return self.getToken(LaTeXParser.FUNC_EXP, 0)
2503 
2504         def FUNC_LOG(self):
2505             return self.getToken(LaTeXParser.FUNC_LOG, 0)
2506 
2507         def FUNC_LN(self):
2508             return self.getToken(LaTeXParser.FUNC_LN, 0)
2509 
2510         def FUNC_SIN(self):
2511             return self.getToken(LaTeXParser.FUNC_SIN, 0)
2512 
2513         def FUNC_COS(self):
2514             return self.getToken(LaTeXParser.FUNC_COS, 0)
2515 
2516         def FUNC_TAN(self):
2517             return self.getToken(LaTeXParser.FUNC_TAN, 0)
2518 
2519         def FUNC_CSC(self):
2520             return self.getToken(LaTeXParser.FUNC_CSC, 0)
2521 
2522         def FUNC_SEC(self):
2523             return self.getToken(LaTeXParser.FUNC_SEC, 0)
2524 
2525         def FUNC_COT(self):
2526             return self.getToken(LaTeXParser.FUNC_COT, 0)
2527 
2528         def FUNC_ARCSIN(self):
2529             return self.getToken(LaTeXParser.FUNC_ARCSIN, 0)
2530 
2531         def FUNC_ARCCOS(self):
2532             return self.getToken(LaTeXParser.FUNC_ARCCOS, 0)
2533 
2534         def FUNC_ARCTAN(self):
2535             return self.getToken(LaTeXParser.FUNC_ARCTAN, 0)
2536 
2537         def FUNC_ARCCSC(self):
2538             return self.getToken(LaTeXParser.FUNC_ARCCSC, 0)
2539 
2540         def FUNC_ARCSEC(self):
2541             return self.getToken(LaTeXParser.FUNC_ARCSEC, 0)
2542 
2543         def FUNC_ARCCOT(self):
2544             return self.getToken(LaTeXParser.FUNC_ARCCOT, 0)
2545 
2546         def FUNC_SINH(self):
2547             return self.getToken(LaTeXParser.FUNC_SINH, 0)
2548 
2549         def FUNC_COSH(self):
2550             return self.getToken(LaTeXParser.FUNC_COSH, 0)
2551 
2552         def FUNC_TANH(self):
2553             return self.getToken(LaTeXParser.FUNC_TANH, 0)
2554 
2555         def FUNC_ARSINH(self):
2556             return self.getToken(LaTeXParser.FUNC_ARSINH, 0)
2557 
2558         def FUNC_ARCOSH(self):
2559             return self.getToken(LaTeXParser.FUNC_ARCOSH, 0)
2560 
2561         def FUNC_ARTANH(self):
2562             return self.getToken(LaTeXParser.FUNC_ARTANH, 0)
2563 
2564         def getRuleIndex(self):
2565             return LaTeXParser.RULE_func_normal
2566 
2567 
2568 
2569 
2570     def func_normal(self):
2571 
2572         localctx = LaTeXParser.Func_normalContext(self, self._ctx, self.state)
2573         self.enterRule(localctx, 60, self.RULE_func_normal)
2574         self._la = 0 # Token type
2575         try:
2576             self.enterOuterAlt(localctx, 1)
2577             self.state = 329
2578             _la = self._input.LA(1)
2579             if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.FUNC_EXP) | (1 << LaTeXParser.FUNC_LOG) | (1 << LaTeXParser.FUNC_LN) | (1 << LaTeXParser.FUNC_SIN) | (1 << LaTeXParser.FUNC_COS) | (1 << LaTeXParser.FUNC_TAN) | (1 << LaTeXParser.FUNC_CSC) | (1 << LaTeXParser.FUNC_SEC) | (1 << LaTeXParser.FUNC_COT) | (1 << LaTeXParser.FUNC_ARCSIN) | (1 << LaTeXParser.FUNC_ARCCOS) | (1 << LaTeXParser.FUNC_ARCTAN) | (1 << LaTeXParser.FUNC_ARCCSC) | (1 << LaTeXParser.FUNC_ARCSEC) | (1 << LaTeXParser.FUNC_ARCCOT) | (1 << LaTeXParser.FUNC_SINH) | (1 << LaTeXParser.FUNC_COSH) | (1 << LaTeXParser.FUNC_TANH) | (1 << LaTeXParser.FUNC_ARSINH) | (1 << LaTeXParser.FUNC_ARCOSH) | (1 << LaTeXParser.FUNC_ARTANH))) != 0)):
2580                 self._errHandler.recoverInline(self)
2581             else:
2582                 self._errHandler.reportMatch(self)
2583                 self.consume()
2584         except RecognitionException as re:
2585             localctx.exception = re
2586             self._errHandler.reportError(self, re)
2587             self._errHandler.recover(self, re)
2588         finally:
2589             self.exitRule()
2590         return localctx
2591 
2592 
2593     class FuncContext(ParserRuleContext):
2594 
2595         def __init__(self, parser, parent=None, invokingState=-1):
2596             super(LaTeXParser.FuncContext, self).__init__(parent, invokingState)
2597             self.parser = parser
2598             self.root = None # ExprContext
2599             self.base = None # ExprContext
2600 
2601         def func_normal(self):
2602             return self.getTypedRuleContext(LaTeXParser.Func_normalContext,0)
2603 
2604 
2605         def L_PAREN(self):
2606             return self.getToken(LaTeXParser.L_PAREN, 0)
2607 
2608         def func_arg(self):
2609             return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)
2610 
2611 
2612         def R_PAREN(self):
2613             return self.getToken(LaTeXParser.R_PAREN, 0)
2614 
2615         def func_arg_noparens(self):
2616             return self.getTypedRuleContext(LaTeXParser.Func_arg_noparensContext,0)
2617 
2618 
2619         def subexpr(self):
2620             return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
2621 
2622 
2623         def supexpr(self):
2624             return self.getTypedRuleContext(LaTeXParser.SupexprContext,0)
2625 
2626 
2627         def args(self):
2628             return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)
2629 
2630 
2631         def LETTER(self):
2632             return self.getToken(LaTeXParser.LETTER, 0)
2633 
2634         def SYMBOL(self):
2635             return self.getToken(LaTeXParser.SYMBOL, 0)
2636 
2637         def FUNC_INT(self):
2638             return self.getToken(LaTeXParser.FUNC_INT, 0)
2639 
2640         def DIFFERENTIAL(self):
2641             return self.getToken(LaTeXParser.DIFFERENTIAL, 0)
2642 
2643         def frac(self):
2644             return self.getTypedRuleContext(LaTeXParser.FracContext,0)
2645 
2646 
2647         def additive(self):
2648             return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)
2649 
2650 
2651         def FUNC_SQRT(self):
2652             return self.getToken(LaTeXParser.FUNC_SQRT, 0)
2653 
2654         def L_BRACE(self):
2655             return self.getToken(LaTeXParser.L_BRACE, 0)
2656 
2657         def R_BRACE(self):
2658             return self.getToken(LaTeXParser.R_BRACE, 0)
2659 
2660         def expr(self, i=None):
2661             if i is None:
2662                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
2663             else:
2664                 return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
2665 
2666 
2667         def L_BRACKET(self):
2668             return self.getToken(LaTeXParser.L_BRACKET, 0)
2669 
2670         def R_BRACKET(self):
2671             return self.getToken(LaTeXParser.R_BRACKET, 0)
2672 
2673         def FUNC_OVERLINE(self):
2674             return self.getToken(LaTeXParser.FUNC_OVERLINE, 0)
2675 
2676         def mp(self):
2677             return self.getTypedRuleContext(LaTeXParser.MpContext,0)
2678 
2679 
2680         def FUNC_SUM(self):
2681             return self.getToken(LaTeXParser.FUNC_SUM, 0)
2682 
2683         def FUNC_PROD(self):
2684             return self.getToken(LaTeXParser.FUNC_PROD, 0)
2685 
2686         def subeq(self):
2687             return self.getTypedRuleContext(LaTeXParser.SubeqContext,0)
2688 
2689 
2690         def FUNC_LIM(self):
2691             return self.getToken(LaTeXParser.FUNC_LIM, 0)
2692 
2693         def limit_sub(self):
2694             return self.getTypedRuleContext(LaTeXParser.Limit_subContext,0)
2695 
2696 
2697         def getRuleIndex(self):
2698             return LaTeXParser.RULE_func
2699 
2700 
2701 
2702 
2703     def func(self):
2704 
2705         localctx = LaTeXParser.FuncContext(self, self._ctx, self.state)
2706         self.enterRule(localctx, 62, self.RULE_func)
2707         self._la = 0 # Token type
2708         try:
2709             self.state = 409
2710             self._errHandler.sync(self)
2711             token = self._input.LA(1)
2712             if token in [LaTeXParser.FUNC_EXP, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH]:
2713                 self.enterOuterAlt(localctx, 1)
2714                 self.state = 331
2715                 self.func_normal()
2716                 self.state = 344
2717                 self._errHandler.sync(self)
2718                 la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
2719                 if la_ == 1:
2720                     self.state = 333
2721                     self._errHandler.sync(self)
2722                     _la = self._input.LA(1)
2723                     if _la==LaTeXParser.UNDERSCORE:
2724                         self.state = 332
2725                         self.subexpr()
2726 
2727 
2728                     self.state = 336
2729                     self._errHandler.sync(self)
2730                     _la = self._input.LA(1)
2731                     if _la==LaTeXParser.CARET:
2732                         self.state = 335
2733                         self.supexpr()
2734 
2735 
2736                     pass
2737 
2738                 elif la_ == 2:
2739                     self.state = 339
2740                     self._errHandler.sync(self)
2741                     _la = self._input.LA(1)
2742                     if _la==LaTeXParser.CARET:
2743                         self.state = 338
2744                         self.supexpr()
2745 
2746 
2747                     self.state = 342
2748                     self._errHandler.sync(self)
2749                     _la = self._input.LA(1)
2750                     if _la==LaTeXParser.UNDERSCORE:
2751                         self.state = 341
2752                         self.subexpr()
2753 
2754 
2755                     pass
2756 
2757 
2758                 self.state = 351
2759                 self._errHandler.sync(self)
2760                 la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
2761                 if la_ == 1:
2762                     self.state = 346
2763                     self.match(LaTeXParser.L_PAREN)
2764                     self.state = 347
2765                     self.func_arg()
2766                     self.state = 348
2767                     self.match(LaTeXParser.R_PAREN)
2768                     pass
2769 
2770                 elif la_ == 2:
2771                     self.state = 350
2772                     self.func_arg_noparens()
2773                     pass
2774 
2775 
2776                 pass
2777             elif token in [LaTeXParser.LETTER, LaTeXParser.SYMBOL]:
2778                 self.enterOuterAlt(localctx, 2)
2779                 self.state = 353
2780                 _la = self._input.LA(1)
2781                 if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
2782                     self._errHandler.recoverInline(self)
2783                 else:
2784                     self._errHandler.reportMatch(self)
2785                     self.consume()
2786                 self.state = 355
2787                 self._errHandler.sync(self)
2788                 _la = self._input.LA(1)
2789                 if _la==LaTeXParser.UNDERSCORE:
2790                     self.state = 354
2791                     self.subexpr()
2792 
2793 
2794                 self.state = 357
2795                 self.match(LaTeXParser.L_PAREN)
2796                 self.state = 358
2797                 self.args()
2798                 self.state = 359
2799                 self.match(LaTeXParser.R_PAREN)
2800                 pass
2801             elif token in [LaTeXParser.FUNC_INT]:
2802                 self.enterOuterAlt(localctx, 3)
2803                 self.state = 361
2804                 self.match(LaTeXParser.FUNC_INT)
2805                 self.state = 368
2806                 self._errHandler.sync(self)
2807                 token = self._input.LA(1)
2808                 if token in [LaTeXParser.UNDERSCORE]:
2809                     self.state = 362
2810                     self.subexpr()
2811                     self.state = 363
2812                     self.supexpr()
2813                     pass
2814                 elif token in [LaTeXParser.CARET]:
2815                     self.state = 365
2816                     self.supexpr()
2817                     self.state = 366
2818                     self.subexpr()
2819                     pass
2820                 elif token in [LaTeXParser.ADD, LaTeXParser.SUB, LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACE_LITERAL, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_EXP, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.L_FLOOR, LaTeXParser.L_CEIL, LaTeXParser.FUNC_SQRT, LaTeXParser.FUNC_OVERLINE, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_BINOM, LaTeXParser.CMD_DBINOM, LaTeXParser.CMD_TBINOM, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
2821                     pass
2822                 else:
2823                     pass
2824                 self.state = 376
2825                 self._errHandler.sync(self)
2826                 la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
2827                 if la_ == 1:
2828                     self.state = 371
2829                     self._errHandler.sync(self)
2830                     la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
2831                     if la_ == 1:
2832                         self.state = 370
2833                         self.additive(0)
2834 
2835 
2836                     self.state = 373
2837                     self.match(LaTeXParser.DIFFERENTIAL)
2838                     pass
2839 
2840                 elif la_ == 2:
2841                     self.state = 374
2842                     self.frac()
2843                     pass
2844 
2845                 elif la_ == 3:
2846                     self.state = 375
2847                     self.additive(0)
2848                     pass
2849 
2850 
2851                 pass
2852             elif token in [LaTeXParser.FUNC_SQRT]:
2853                 self.enterOuterAlt(localctx, 4)
2854                 self.state = 378
2855                 self.match(LaTeXParser.FUNC_SQRT)
2856                 self.state = 383
2857                 self._errHandler.sync(self)
2858                 _la = self._input.LA(1)
2859                 if _la==LaTeXParser.L_BRACKET:
2860                     self.state = 379
2861                     self.match(LaTeXParser.L_BRACKET)
2862                     self.state = 380
2863                     localctx.root = self.expr()
2864                     self.state = 381
2865                     self.match(LaTeXParser.R_BRACKET)
2866 
2867 
2868                 self.state = 385
2869                 self.match(LaTeXParser.L_BRACE)
2870                 self.state = 386
2871                 localctx.base = self.expr()
2872                 self.state = 387
2873                 self.match(LaTeXParser.R_BRACE)
2874                 pass
2875             elif token in [LaTeXParser.FUNC_OVERLINE]:
2876                 self.enterOuterAlt(localctx, 5)
2877                 self.state = 389
2878                 self.match(LaTeXParser.FUNC_OVERLINE)
2879                 self.state = 390
2880                 self.match(LaTeXParser.L_BRACE)
2881                 self.state = 391
2882                 localctx.base = self.expr()
2883                 self.state = 392
2884                 self.match(LaTeXParser.R_BRACE)
2885                 pass
2886             elif token in [LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD]:
2887                 self.enterOuterAlt(localctx, 6)
2888                 self.state = 394
2889                 _la = self._input.LA(1)
2890                 if not(_la==LaTeXParser.FUNC_SUM or _la==LaTeXParser.FUNC_PROD):
2891                     self._errHandler.recoverInline(self)
2892                 else:
2893                     self._errHandler.reportMatch(self)
2894                     self.consume()
2895                 self.state = 401
2896                 self._errHandler.sync(self)
2897                 token = self._input.LA(1)
2898                 if token in [LaTeXParser.UNDERSCORE]:
2899                     self.state = 395
2900                     self.subeq()
2901                     self.state = 396
2902                     self.supexpr()
2903                     pass
2904                 elif token in [LaTeXParser.CARET]:
2905                     self.state = 398
2906                     self.supexpr()
2907                     self.state = 399
2908                     self.subeq()
2909                     pass
2910                 else:
2911                     raise NoViableAltException(self)
2912 
2913                 self.state = 403
2914                 self.mp(0)
2915                 pass
2916             elif token in [LaTeXParser.FUNC_LIM]:
2917                 self.enterOuterAlt(localctx, 7)
2918                 self.state = 405
2919                 self.match(LaTeXParser.FUNC_LIM)
2920                 self.state = 406
2921                 self.limit_sub()
2922                 self.state = 407
2923                 self.mp(0)
2924                 pass
2925             else:
2926                 raise NoViableAltException(self)
2927 
2928         except RecognitionException as re:
2929             localctx.exception = re
2930             self._errHandler.reportError(self, re)
2931             self._errHandler.recover(self, re)
2932         finally:
2933             self.exitRule()
2934         return localctx
2935 
2936 
2937     class ArgsContext(ParserRuleContext):
2938 
2939         def __init__(self, parser, parent=None, invokingState=-1):
2940             super(LaTeXParser.ArgsContext, self).__init__(parent, invokingState)
2941             self.parser = parser
2942 
2943         def expr(self):
2944             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
2945 
2946 
2947         def args(self):
2948             return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)
2949 
2950 
2951         def getRuleIndex(self):
2952             return LaTeXParser.RULE_args
2953 
2954 
2955 
2956 
2957     def args(self):
2958 
2959         localctx = LaTeXParser.ArgsContext(self, self._ctx, self.state)
2960         self.enterRule(localctx, 64, self.RULE_args)
2961         try:
2962             self.state = 416
2963             self._errHandler.sync(self)
2964             la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
2965             if la_ == 1:
2966                 self.enterOuterAlt(localctx, 1)
2967                 self.state = 411
2968                 self.expr()
2969                 self.state = 412
2970                 self.match(LaTeXParser.T__0)
2971                 self.state = 413
2972                 self.args()
2973                 pass
2974 
2975             elif la_ == 2:
2976                 self.enterOuterAlt(localctx, 2)
2977                 self.state = 415
2978                 self.expr()
2979                 pass
2980 
2981 
2982         except RecognitionException as re:
2983             localctx.exception = re
2984             self._errHandler.reportError(self, re)
2985             self._errHandler.recover(self, re)
2986         finally:
2987             self.exitRule()
2988         return localctx
2989 
2990 
2991     class Limit_subContext(ParserRuleContext):
2992 
2993         def __init__(self, parser, parent=None, invokingState=-1):
2994             super(LaTeXParser.Limit_subContext, self).__init__(parent, invokingState)
2995             self.parser = parser
2996 
2997         def UNDERSCORE(self):
2998             return self.getToken(LaTeXParser.UNDERSCORE, 0)
2999 
3000         def L_BRACE(self, i=None):
3001             if i is None:
3002                 return self.getTokens(LaTeXParser.L_BRACE)
3003             else:
3004                 return self.getToken(LaTeXParser.L_BRACE, i)
3005 
3006         def LIM_APPROACH_SYM(self):
3007             return self.getToken(LaTeXParser.LIM_APPROACH_SYM, 0)
3008 
3009         def expr(self):
3010             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
3011 
3012 
3013         def R_BRACE(self, i=None):
3014             if i is None:
3015                 return self.getTokens(LaTeXParser.R_BRACE)
3016             else:
3017                 return self.getToken(LaTeXParser.R_BRACE, i)
3018 
3019         def LETTER(self):
3020             return self.getToken(LaTeXParser.LETTER, 0)
3021 
3022         def SYMBOL(self):
3023             return self.getToken(LaTeXParser.SYMBOL, 0)
3024 
3025         def CARET(self):
3026             return self.getToken(LaTeXParser.CARET, 0)
3027 
3028         def ADD(self):
3029             return self.getToken(LaTeXParser.ADD, 0)
3030 
3031         def SUB(self):
3032             return self.getToken(LaTeXParser.SUB, 0)
3033 
3034         def getRuleIndex(self):
3035             return LaTeXParser.RULE_limit_sub
3036 
3037 
3038 
3039 
3040     def limit_sub(self):
3041 
3042         localctx = LaTeXParser.Limit_subContext(self, self._ctx, self.state)
3043         self.enterRule(localctx, 66, self.RULE_limit_sub)
3044         self._la = 0 # Token type
3045         try:
3046             self.enterOuterAlt(localctx, 1)
3047             self.state = 418
3048             self.match(LaTeXParser.UNDERSCORE)
3049             self.state = 419
3050             self.match(LaTeXParser.L_BRACE)
3051             self.state = 420
3052             _la = self._input.LA(1)
3053             if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
3054                 self._errHandler.recoverInline(self)
3055             else:
3056                 self._errHandler.reportMatch(self)
3057                 self.consume()
3058             self.state = 421
3059             self.match(LaTeXParser.LIM_APPROACH_SYM)
3060             self.state = 422
3061             self.expr()
3062             self.state = 427
3063             self._errHandler.sync(self)
3064             _la = self._input.LA(1)
3065             if _la==LaTeXParser.CARET:
3066                 self.state = 423
3067                 self.match(LaTeXParser.CARET)
3068                 self.state = 424
3069                 self.match(LaTeXParser.L_BRACE)
3070                 self.state = 425
3071                 _la = self._input.LA(1)
3072                 if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
3073                     self._errHandler.recoverInline(self)
3074                 else:
3075                     self._errHandler.reportMatch(self)
3076                     self.consume()
3077                 self.state = 426
3078                 self.match(LaTeXParser.R_BRACE)
3079 
3080 
3081             self.state = 429
3082             self.match(LaTeXParser.R_BRACE)
3083         except RecognitionException as re:
3084             localctx.exception = re
3085             self._errHandler.reportError(self, re)
3086             self._errHandler.recover(self, re)
3087         finally:
3088             self.exitRule()
3089         return localctx
3090 
3091 
3092     class Func_argContext(ParserRuleContext):
3093 
3094         def __init__(self, parser, parent=None, invokingState=-1):
3095             super(LaTeXParser.Func_argContext, self).__init__(parent, invokingState)
3096             self.parser = parser
3097 
3098         def expr(self):
3099             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
3100 
3101 
3102         def func_arg(self):
3103             return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)
3104 
3105 
3106         def getRuleIndex(self):
3107             return LaTeXParser.RULE_func_arg
3108 
3109 
3110 
3111 
3112     def func_arg(self):
3113 
3114         localctx = LaTeXParser.Func_argContext(self, self._ctx, self.state)
3115         self.enterRule(localctx, 68, self.RULE_func_arg)
3116         try:
3117             self.state = 436
3118             self._errHandler.sync(self)
3119             la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
3120             if la_ == 1:
3121                 self.enterOuterAlt(localctx, 1)
3122                 self.state = 431
3123                 self.expr()
3124                 pass
3125 
3126             elif la_ == 2:
3127                 self.enterOuterAlt(localctx, 2)
3128                 self.state = 432
3129                 self.expr()
3130                 self.state = 433
3131                 self.match(LaTeXParser.T__0)
3132                 self.state = 434
3133                 self.func_arg()
3134                 pass
3135 
3136 
3137         except RecognitionException as re:
3138             localctx.exception = re
3139             self._errHandler.reportError(self, re)
3140             self._errHandler.recover(self, re)
3141         finally:
3142             self.exitRule()
3143         return localctx
3144 
3145 
3146     class Func_arg_noparensContext(ParserRuleContext):
3147 
3148         def __init__(self, parser, parent=None, invokingState=-1):
3149             super(LaTeXParser.Func_arg_noparensContext, self).__init__(parent, invokingState)
3150             self.parser = parser
3151 
3152         def mp_nofunc(self):
3153             return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,0)
3154 
3155 
3156         def getRuleIndex(self):
3157             return LaTeXParser.RULE_func_arg_noparens
3158 
3159 
3160 
3161 
3162     def func_arg_noparens(self):
3163 
3164         localctx = LaTeXParser.Func_arg_noparensContext(self, self._ctx, self.state)
3165         self.enterRule(localctx, 70, self.RULE_func_arg_noparens)
3166         try:
3167             self.enterOuterAlt(localctx, 1)
3168             self.state = 438
3169             self.mp_nofunc(0)
3170         except RecognitionException as re:
3171             localctx.exception = re
3172             self._errHandler.reportError(self, re)
3173             self._errHandler.recover(self, re)
3174         finally:
3175             self.exitRule()
3176         return localctx
3177 
3178 
3179     class SubexprContext(ParserRuleContext):
3180 
3181         def __init__(self, parser, parent=None, invokingState=-1):
3182             super(LaTeXParser.SubexprContext, self).__init__(parent, invokingState)
3183             self.parser = parser
3184 
3185         def UNDERSCORE(self):
3186             return self.getToken(LaTeXParser.UNDERSCORE, 0)
3187 
3188         def atom(self):
3189             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
3190 
3191 
3192         def L_BRACE(self):
3193             return self.getToken(LaTeXParser.L_BRACE, 0)
3194 
3195         def expr(self):
3196             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
3197 
3198 
3199         def R_BRACE(self):
3200             return self.getToken(LaTeXParser.R_BRACE, 0)
3201 
3202         def getRuleIndex(self):
3203             return LaTeXParser.RULE_subexpr
3204 
3205 
3206 
3207 
3208     def subexpr(self):
3209 
3210         localctx = LaTeXParser.SubexprContext(self, self._ctx, self.state)
3211         self.enterRule(localctx, 72, self.RULE_subexpr)
3212         try:
3213             self.enterOuterAlt(localctx, 1)
3214             self.state = 440
3215             self.match(LaTeXParser.UNDERSCORE)
3216             self.state = 446
3217             self._errHandler.sync(self)
3218             token = self._input.LA(1)
3219             if token in [LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
3220                 self.state = 441
3221                 self.atom()
3222                 pass
3223             elif token in [LaTeXParser.L_BRACE]:
3224                 self.state = 442
3225                 self.match(LaTeXParser.L_BRACE)
3226                 self.state = 443
3227                 self.expr()
3228                 self.state = 444
3229                 self.match(LaTeXParser.R_BRACE)
3230                 pass
3231             else:
3232                 raise NoViableAltException(self)
3233 
3234         except RecognitionException as re:
3235             localctx.exception = re
3236             self._errHandler.reportError(self, re)
3237             self._errHandler.recover(self, re)
3238         finally:
3239             self.exitRule()
3240         return localctx
3241 
3242 
3243     class SupexprContext(ParserRuleContext):
3244 
3245         def __init__(self, parser, parent=None, invokingState=-1):
3246             super(LaTeXParser.SupexprContext, self).__init__(parent, invokingState)
3247             self.parser = parser
3248 
3249         def CARET(self):
3250             return self.getToken(LaTeXParser.CARET, 0)
3251 
3252         def atom(self):
3253             return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
3254 
3255 
3256         def L_BRACE(self):
3257             return self.getToken(LaTeXParser.L_BRACE, 0)
3258 
3259         def expr(self):
3260             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
3261 
3262 
3263         def R_BRACE(self):
3264             return self.getToken(LaTeXParser.R_BRACE, 0)
3265 
3266         def getRuleIndex(self):
3267             return LaTeXParser.RULE_supexpr
3268 
3269 
3270 
3271 
3272     def supexpr(self):
3273 
3274         localctx = LaTeXParser.SupexprContext(self, self._ctx, self.state)
3275         self.enterRule(localctx, 74, self.RULE_supexpr)
3276         try:
3277             self.enterOuterAlt(localctx, 1)
3278             self.state = 448
3279             self.match(LaTeXParser.CARET)
3280             self.state = 454
3281             self._errHandler.sync(self)
3282             token = self._input.LA(1)
3283             if token in [LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
3284                 self.state = 449
3285                 self.atom()
3286                 pass
3287             elif token in [LaTeXParser.L_BRACE]:
3288                 self.state = 450
3289                 self.match(LaTeXParser.L_BRACE)
3290                 self.state = 451
3291                 self.expr()
3292                 self.state = 452
3293                 self.match(LaTeXParser.R_BRACE)
3294                 pass
3295             else:
3296                 raise NoViableAltException(self)
3297 
3298         except RecognitionException as re:
3299             localctx.exception = re
3300             self._errHandler.reportError(self, re)
3301             self._errHandler.recover(self, re)
3302         finally:
3303             self.exitRule()
3304         return localctx
3305 
3306 
3307     class SubeqContext(ParserRuleContext):
3308 
3309         def __init__(self, parser, parent=None, invokingState=-1):
3310             super(LaTeXParser.SubeqContext, self).__init__(parent, invokingState)
3311             self.parser = parser
3312 
3313         def UNDERSCORE(self):
3314             return self.getToken(LaTeXParser.UNDERSCORE, 0)
3315 
3316         def L_BRACE(self):
3317             return self.getToken(LaTeXParser.L_BRACE, 0)
3318 
3319         def equality(self):
3320             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
3321 
3322 
3323         def R_BRACE(self):
3324             return self.getToken(LaTeXParser.R_BRACE, 0)
3325 
3326         def getRuleIndex(self):
3327             return LaTeXParser.RULE_subeq
3328 
3329 
3330 
3331 
3332     def subeq(self):
3333 
3334         localctx = LaTeXParser.SubeqContext(self, self._ctx, self.state)
3335         self.enterRule(localctx, 76, self.RULE_subeq)
3336         try:
3337             self.enterOuterAlt(localctx, 1)
3338             self.state = 456
3339             self.match(LaTeXParser.UNDERSCORE)
3340             self.state = 457
3341             self.match(LaTeXParser.L_BRACE)
3342             self.state = 458
3343             self.equality()
3344             self.state = 459
3345             self.match(LaTeXParser.R_BRACE)
3346         except RecognitionException as re:
3347             localctx.exception = re
3348             self._errHandler.reportError(self, re)
3349             self._errHandler.recover(self, re)
3350         finally:
3351             self.exitRule()
3352         return localctx
3353 
3354 
3355     class SupeqContext(ParserRuleContext):
3356 
3357         def __init__(self, parser, parent=None, invokingState=-1):
3358             super(LaTeXParser.SupeqContext, self).__init__(parent, invokingState)
3359             self.parser = parser
3360 
3361         def UNDERSCORE(self):
3362             return self.getToken(LaTeXParser.UNDERSCORE, 0)
3363 
3364         def L_BRACE(self):
3365             return self.getToken(LaTeXParser.L_BRACE, 0)
3366 
3367         def equality(self):
3368             return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
3369 
3370 
3371         def R_BRACE(self):
3372             return self.getToken(LaTeXParser.R_BRACE, 0)
3373 
3374         def getRuleIndex(self):
3375             return LaTeXParser.RULE_supeq
3376 
3377 
3378 
3379 
3380     def supeq(self):
3381 
3382         localctx = LaTeXParser.SupeqContext(self, self._ctx, self.state)
3383         self.enterRule(localctx, 78, self.RULE_supeq)
3384         try:
3385             self.enterOuterAlt(localctx, 1)
3386             self.state = 461
3387             self.match(LaTeXParser.UNDERSCORE)
3388             self.state = 462
3389             self.match(LaTeXParser.L_BRACE)
3390             self.state = 463
3391             self.equality()
3392             self.state = 464
3393             self.match(LaTeXParser.R_BRACE)
3394         except RecognitionException as re:
3395             localctx.exception = re
3396             self._errHandler.reportError(self, re)
3397             self._errHandler.recover(self, re)
3398         finally:
3399             self.exitRule()
3400         return localctx
3401 
3402 
3403 
3404     def sempred(self, localctx, ruleIndex, predIndex):
3405         if self._predicates == None:
3406             self._predicates = dict()
3407         self._predicates[1] = self.relation_sempred
3408         self._predicates[4] = self.additive_sempred
3409         self._predicates[5] = self.mp_sempred
3410         self._predicates[6] = self.mp_nofunc_sempred
3411         self._predicates[15] = self.exp_sempred
3412         self._predicates[16] = self.exp_nofunc_sempred
3413         pred = self._predicates.get(ruleIndex, None)
3414         if pred is None:
3415             raise Exception("No predicate with index:" + str(ruleIndex))
3416         else:
3417             return pred(localctx, predIndex)
3418 
3419     def relation_sempred(self, localctx, predIndex):
3420             if predIndex == 0:
3421                 return self.precpred(self._ctx, 2)
3422 
3423 
3424     def additive_sempred(self, localctx, predIndex):
3425             if predIndex == 1:
3426                 return self.precpred(self._ctx, 2)
3427 
3428 
3429     def mp_sempred(self, localctx, predIndex):
3430             if predIndex == 2:
3431                 return self.precpred(self._ctx, 2)
3432 
3433 
3434     def mp_nofunc_sempred(self, localctx, predIndex):
3435             if predIndex == 3:
3436                 return self.precpred(self._ctx, 2)
3437 
3438 
3439     def exp_sempred(self, localctx, predIndex):
3440             if predIndex == 4:
3441                 return self.precpred(self._ctx, 2)
3442 
3443 
3444     def exp_nofunc_sempred(self, localctx, predIndex):
3445             if predIndex == 5:
3446                 return self.precpred(self._ctx, 2)
3447 
3448 
3449 
3450 
3451 

</code><intended_behavior>The intended behavior is to adjust the parsing rules or the subsequent handling of parsed fractions to ensure that nested fractions are correctly translated into their equivalent SymPy structure. This might involve ensuring that the parser groups nested fractions as singular entities, which are then translated accurately.</intended_behavior>]
2025-10-15 15:03:56.984 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-15 15:03:56.984 | INFO     | Search-only: skipping patch selection
2025-10-15 15:03:57.063 | INFO     | Task sympy__sympy-21612 completed successfully.
2025-10-15 15:03:57.064 | INFO     | No patch generated. You can try running ACR again.
