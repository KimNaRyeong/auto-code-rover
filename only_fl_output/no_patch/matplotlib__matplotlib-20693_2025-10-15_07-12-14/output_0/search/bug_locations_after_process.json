[
    {
        "rel_file_path": "lib/matplotlib/patches.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.4/lib/matplotlib/patches.py",
        "start": 687,
        "end": 850,
        "class_name": "Rectangle",
        "method_name": null,
        "code": "687 class Rectangle(Patch):\n688     \"\"\"\n689     A rectangle defined via an anchor point *xy* and its *width* and *height*.\n690 \n691     The rectangle extends from ``xy[0]`` to ``xy[0] + width`` in x-direction\n692     and from ``xy[1]`` to ``xy[1] + height`` in y-direction. ::\n693 \n694       :                +------------------+\n695       :                |                  |\n696       :              height               |\n697       :                |                  |\n698       :               (xy)---- width -----+\n699 \n700     One may picture *xy* as the bottom left corner, but which corner *xy* is\n701     actually depends on the direction of the axis and the sign of *width*\n702     and *height*; e.g. *xy* would be the bottom right corner if the x-axis\n703     was inverted or if *width* was negative.\n704     \"\"\"\n705 \n706     def __str__(self):\n707         pars = self._x0, self._y0, self._width, self._height, self.angle\n708         fmt = \"Rectangle(xy=(%g, %g), width=%g, height=%g, angle=%g)\"\n709         return fmt % pars\n710 \n711     @docstring.dedent_interpd\n712     def __init__(self, xy, width, height, angle=0.0, **kwargs):\n713         \"\"\"\n714         Parameters\n715         ----------\n716         xy : (float, float)\n717             The anchor point.\n718         width : float\n719             Rectangle width.\n720         height : float\n721             Rectangle height.\n722         angle : float, default: 0\n723             Rotation in degrees anti-clockwise about *xy*.\n724 \n725         Other Parameters\n726         ----------------\n727         **kwargs : `.Patch` properties\n728             %(Patch:kwdoc)s\n729         \"\"\"\n730         super().__init__(**kwargs)\n731         self._x0 = xy[0]\n732         self._y0 = xy[1]\n733         self._width = width\n734         self._height = height\n735         self.angle = float(angle)\n736         self._convert_units()  # Validate the inputs.\n737 \n738     def get_path(self):\n739         \"\"\"Return the vertices of the rectangle.\"\"\"\n740         return Path.unit_rectangle()\n741 \n742     def _convert_units(self):\n743         \"\"\"Convert bounds of the rectangle.\"\"\"\n744         x0 = self.convert_xunits(self._x0)\n745         y0 = self.convert_yunits(self._y0)\n746         x1 = self.convert_xunits(self._x0 + self._width)\n747         y1 = self.convert_yunits(self._y0 + self._height)\n748         return x0, y0, x1, y1\n749 \n750     def get_patch_transform(self):\n751         # Note: This cannot be called until after this has been added to\n752         # an Axes, otherwise unit conversion will fail. This makes it very\n753         # important to call the accessor method and not directly access the\n754         # transformation member variable.\n755         bbox = self.get_bbox()\n756         return (transforms.BboxTransformTo(bbox)\n757                 + transforms.Affine2D().rotate_deg_around(\n758                     bbox.x0, bbox.y0, self.angle))\n759 \n760     def get_x(self):\n761         \"\"\"Return the left coordinate of the rectangle.\"\"\"\n762         return self._x0\n763 \n764     def get_y(self):\n765         \"\"\"Return the bottom coordinate of the rectangle.\"\"\"\n766         return self._y0\n767 \n768     def get_xy(self):\n769         \"\"\"Return the left and bottom coords of the rectangle as a tuple.\"\"\"\n770         return self._x0, self._y0\n771 \n772     def get_width(self):\n773         \"\"\"Return the width of the rectangle.\"\"\"\n774         return self._width\n775 \n776     def get_height(self):\n777         \"\"\"Return the height of the rectangle.\"\"\"\n778         return self._height\n779 \n780     def get_angle(self):\n781         \"\"\"Get the rotation angle in degrees.\"\"\"\n782         return self.angle\n783 \n784     def set_x(self, x):\n785         \"\"\"Set the left coordinate of the rectangle.\"\"\"\n786         self._x0 = x\n787         self.stale = True\n788 \n789     def set_y(self, y):\n790         \"\"\"Set the bottom coordinate of the rectangle.\"\"\"\n791         self._y0 = y\n792         self.stale = True\n793 \n794     def set_angle(self, angle):\n795         \"\"\"\n796         Set the rotation angle in degrees.\n797 \n798         The rotation is performed anti-clockwise around *xy*.\n799         \"\"\"\n800         self.angle = angle\n801         self.stale = True\n802 \n803     def set_xy(self, xy):\n804         \"\"\"\n805         Set the left and bottom coordinates of the rectangle.\n806 \n807         Parameters\n808         ----------\n809         xy : (float, float)\n810         \"\"\"\n811         self._x0, self._y0 = xy\n812         self.stale = True\n813 \n814     def set_width(self, w):\n815         \"\"\"Set the width of the rectangle.\"\"\"\n816         self._width = w\n817         self.stale = True\n818 \n819     def set_height(self, h):\n820         \"\"\"Set the height of the rectangle.\"\"\"\n821         self._height = h\n822         self.stale = True\n823 \n824     def set_bounds(self, *args):\n825         \"\"\"\n826         Set the bounds of the rectangle as *left*, *bottom*, *width*, *height*.\n827 \n828         The values may be passed as separate parameters or as a tuple::\n829 \n830             set_bounds(left, bottom, width, height)\n831             set_bounds((left, bottom, width, height))\n832 \n833         .. ACCEPTS: (left, bottom, width, height)\n834         \"\"\"\n835         if len(args) == 1:\n836             l, b, w, h = args[0]\n837         else:\n838             l, b, w, h = args\n839         self._x0 = l\n840         self._y0 = b\n841         self._width = w\n842         self._height = h\n843         self.stale = True\n844 \n845     def get_bbox(self):\n846         \"\"\"Return the `.Bbox`.\"\"\"\n847         x0, y0, x1, y1 = self._convert_units()\n848         return transforms.Bbox.from_extents(x0, y0, x1, y1)\n849 \n850     xy = property(get_xy, set_xy)\n",
        "intended_behavior": "Replace direct calls to rect.set_color(color) and rectprops.update(dict(facecolor=color)) with rect.set_facecolor(color). Ensure that all property updates follow the current best practices as documented in Matplotlib."
    }
]