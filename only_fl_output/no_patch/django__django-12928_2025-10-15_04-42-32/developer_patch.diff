diff --git a/django/template/__init__.py b/django/template/__init__.py
--- a/django/template/__init__.py
+++ b/django/template/__init__.py
@@ -64,5 +64,8 @@
 # Library management
 from .library import Library                                            # NOQA isort:skip
 
+# Import the .autoreload module to trigger the registrations of signals.
+from . import autoreload                                                # NOQA isort:skip
+
 
 __all__ += ('Template', 'Context', 'RequestContext')
diff --git a/django/template/autoreload.py b/django/template/autoreload.py
new file mode 100644
--- /dev/null
+++ b/django/template/autoreload.py
@@ -0,0 +1,50 @@
+from django.dispatch import receiver
+from django.template import engines
+from django.template.backends.django import DjangoTemplates
+from django.utils.autoreload import (
+    autoreload_started, file_changed, is_django_path,
+)
+
+
+def get_template_directories():
+    # Iterate through each template backend and find
+    # any template_loader that has a 'get_dirs' method.
+    # Collect the directories, filtering out Django templates.
+    items = set()
+    for backend in engines.all():
+        if not isinstance(backend, DjangoTemplates):
+            continue
+
+        items.update(backend.engine.dirs)
+
+        for loader in backend.engine.template_loaders:
+            if not hasattr(loader, 'get_dirs'):
+                continue
+            items.update(
+                directory
+                for directory in loader.get_dirs()
+                if not is_django_path(directory)
+            )
+    return items
+
+
+def reset_loaders():
+    for backend in engines.all():
+        if not isinstance(backend, DjangoTemplates):
+            continue
+        for loader in backend.engine.template_loaders:
+            loader.reset()
+
+
+@receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')
+def watch_for_template_changes(sender, **kwargs):
+    for directory in get_template_directories():
+        sender.watch_dir(directory, '**/*')
+
+
+@receiver(file_changed, dispatch_uid='template_loaders_file_changed')
+def template_changed(sender, file_path, **kwargs):
+    for template_dir in get_template_directories():
+        if template_dir in file_path.parents:
+            reset_loaders()
+            return True
diff --git a/django/template/loaders/cached.py b/django/template/loaders/cached.py
--- a/django/template/loaders/cached.py
+++ b/django/template/loaders/cached.py
@@ -18,6 +18,11 @@ def __init__(self, engine, loaders):
         self.loaders = engine.get_template_loaders(loaders)
         super().__init__(engine)
 
+    def get_dirs(self):
+        for loader in self.loaders:
+            if hasattr(loader, "get_dirs"):
+                yield from loader.get_dirs()
+
     def get_contents(self, origin):
         return origin.loader.get_contents(origin)
 
diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -14,6 +14,7 @@
 from types import ModuleType
 from zipimport import zipimporter
 
+import django
 from django.apps import apps
 from django.core.signals import request_finished
 from django.dispatch import Signal
@@ -45,6 +46,16 @@
     pywatchman = None
 
 
+def is_django_module(module):
+    """Return True if the given module is nested under Django."""
+    return module.__name__.startswith('django.')
+
+
+def is_django_path(path):
+    """Return True if the given file path is nested under Django."""
+    return Path(django.__file__).parent in Path(path).parents
+
+
 def check_errors(fn):
     @functools.wraps(fn)
     def wrapper(*args, **kwargs):
@@ -431,8 +442,15 @@ def _get_clock(self, root):
 
     def _subscribe(self, directory, name, expression):
         root, rel_path = self._watch_root(directory)
+        # Only receive notifications of files changing, filtering out other types
+        # like special files: https://facebook.github.io/watchman/docs/type
+        only_files_expression = [
+            'allof',
+            ['anyof', ['type', 'f'], ['type', 'l']],
+            expression
+        ]
         query = {
-            'expression': expression,
+            'expression': only_files_expression,
             'fields': ['name'],
             'since': self._get_clock(root),
             'dedup_results': True,
diff --git a/django/utils/translation/reloader.py b/django/utils/translation/reloader.py
--- a/django/utils/translation/reloader.py
+++ b/django/utils/translation/reloader.py
@@ -3,11 +3,7 @@
 from asgiref.local import Local
 
 from django.apps import apps
-
-
-def _is_django_module(module):
-    """Return True if the given module is nested under Django."""
-    return module.__name__.startswith('django.')
+from django.utils.autoreload import is_django_module
 
 
 def watch_for_translation_changes(sender, **kwargs):
@@ -19,7 +15,7 @@ def watch_for_translation_changes(sender, **kwargs):
         directories.extend(
             Path(config.path) / 'locale'
             for config in apps.get_app_configs()
-            if not _is_django_module(config.module)
+            if not is_django_module(config.module)
         )
         directories.extend(Path(p) for p in settings.LOCALE_PATHS)
         for path in directories:
