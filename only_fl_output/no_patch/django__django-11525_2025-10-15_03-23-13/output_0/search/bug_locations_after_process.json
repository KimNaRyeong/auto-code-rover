[
    {
        "rel_file_path": "django/core/mail/__init__.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.0/django/core/mail/__init__.py",
        "start": 89,
        "end": 101,
        "class_name": null,
        "method_name": "mail_admins",
        "code": "89 def mail_admins(subject, message, fail_silently=False, connection=None,\n90                 html_message=None):\n91     \"\"\"Send a message to the admins, as defined by the ADMINS setting.\"\"\"\n92     if not settings.ADMINS:\n93         return\n94     mail = EmailMultiAlternatives(\n95         '%s%s' % (settings.EMAIL_SUBJECT_PREFIX, subject), message,\n96         settings.SERVER_EMAIL, [a[1] for a in settings.ADMINS],\n97         connection=connection,\n98     )\n99     if html_message:\n100         mail.attach_alternative(html_message, 'text/html')\n101     mail.send(fail_silently=fail_silently)\n",
        "intended_behavior": "To resolve the issue, the `mail_admins` method should include a validation step to ensure each entry in `settings.ADMINS` conforms to the expected tuple format `(name, email)`, where `email` should also be validated for proper email formatting. If any entry does not meet this criterion, a descriptive exception should be raised. This change ensures that configuration errors are caught early, preserving the method's functionality to send emails to all listed administrators without encountering runtime errors due to format issues."
    },
    {
        "rel_file_path": "django/core/mail/__init__.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.0/django/core/mail/__init__.py",
        "start": 104,
        "end": 116,
        "class_name": null,
        "method_name": "mail_managers",
        "code": "104 def mail_managers(subject, message, fail_silently=False, connection=None,\n105                   html_message=None):\n106     \"\"\"Send a message to the managers, as defined by the MANAGERS setting.\"\"\"\n107     if not settings.MANAGERS:\n108         return\n109     mail = EmailMultiAlternatives(\n110         '%s%s' % (settings.EMAIL_SUBJECT_PREFIX, subject), message,\n111         settings.SERVER_EMAIL, [a[1] for a in settings.MANAGERS],\n112         connection=connection,\n113     )\n114     if html_message:\n115         mail.attach_alternative(html_message, 'text/html')\n116     mail.send(fail_silently=fail_silently)\n",
        "intended_behavior": "Similarly, the `mail_managers` method should validate the `settings.MANAGERS` entries to make sure they adhere to the expected tuple format `(name, email)`, including a proper format check for emails. If the validation fails, a clear and descriptive exception should be thrown, articulating the expected format. This validation step will prevent runtime errors like `smtplib.SMTPRecipientsRefused` when the email system encounters improperly formatted recipient details due to configuration issues, thereby ensuring that emails are only attempted to be sent to properly configured managers."
    }
]