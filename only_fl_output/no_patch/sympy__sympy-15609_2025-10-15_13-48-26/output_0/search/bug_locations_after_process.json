[
    {
        "rel_file_path": "sympy/printing/latex.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.4/sympy/printing/latex.py",
        "start": 2266,
        "end": 2449,
        "class_name": null,
        "method_name": "latex",
        "code": "2266 def latex(expr, fold_frac_powers=False, fold_func_brackets=False,\n2267     fold_short_frac=None, inv_trig_style=\"abbreviated\",\n2268     itex=False, ln_notation=False, long_frac_ratio=None,\n2269     mat_delim=\"[\", mat_str=None, mode=\"plain\", mul_symbol=None,\n2270     order=None, symbol_names=None):\n2271     r\"\"\"Convert the given expression to LaTeX string representation.\n2272 \n2273     Parameters\n2274     ==========\n2275     fold_frac_powers : boolean, optional\n2276         Emit ``^{p/q}`` instead of ``^{\\frac{p}{q}}`` for fractional powers.\n2277     fold_func_brackets : boolean, optional\n2278         Fold function brackets where applicable.\n2279     fold_short_frac : boolean, optional\n2280         Emit ``p / q`` instead of ``\\frac{p}{q}`` when the denominator is\n2281         simple enough (at most two terms and no powers). The default value is\n2282         ``True`` for inline mode, ``False`` otherwise.\n2283     inv_trig_style : string, optional\n2284         How inverse trig functions should be displayed. Can be one of\n2285         ``abbreviated``, ``full``, or ``power``. Defaults to ``abbreviated``.\n2286     itex : boolean, optional\n2287         Specifies if itex-specific syntax is used, including emitting\n2288         ``$$...$$``.\n2289     ln_notation : boolean, optional\n2290         If set to ``True``, ``\\ln`` is used instead of default ``\\log``.\n2291     long_frac_ratio : float or None, optional\n2292         The allowed ratio of the width of the numerator to the width of the\n2293         denominator before the printer breaks off long fractions. If ``None``\n2294         (the default value), long fractions are not broken up.\n2295     mat_delim : string, optional\n2296         The delimiter to wrap around matrices. Can be one of ``[``, ``(``, or\n2297         the empty string. Defaults to ``[``.\n2298     mat_str : string, optional\n2299         Which matrix environment string to emit. ``smallmatrix``, ``matrix``,\n2300         ``array``, etc. Defaults to ``smallmatrix`` for inline mode, ``matrix``\n2301         for matrices of no more than 10 columns, and ``array`` otherwise.\n2302     mode: string, optional\n2303         Specifies how the generated code will be delimited. ``mode`` can be one\n2304         of ``plain``, ``inline``, ``equation`` or ``equation*``.  If ``mode``\n2305         is set to ``plain``, then the resulting code will not be delimited at\n2306         all (this is the default). If ``mode`` is set to ``inline`` then inline\n2307         LaTeX ``$...$`` will be used. If ``mode`` is set to ``equation`` or\n2308         ``equation*``, the resulting code will be enclosed in the ``equation``\n2309         or ``equation*`` environment (remember to import ``amsmath`` for\n2310         ``equation*``), unless the ``itex`` option is set. In the latter case,\n2311         the ``$$...$$`` syntax is used.\n2312     mul_symbol : string or None, optional\n2313         The symbol to use for multiplication. Can be one of ``None``, ``ldot``,\n2314         ``dot``, or ``times``.\n2315     order: string, optional\n2316         Any of the supported monomial orderings (currently ``lex``, ``grlex``,\n2317         or ``grevlex``), ``old``, and ``none``. This parameter does nothing for\n2318         Mul objects. Setting order to ``old`` uses the compatibility ordering\n2319         for Add defined in Printer. For very large expressions, set the\n2320         ``order`` keyword to ``none`` if speed is a concern.\n2321     symbol_names : dictionary of strings mapped to symbols, optional\n2322         Dictionary of symbols and the custom strings they should be emitted as.\n2323 \n2324     Notes\n2325     =====\n2326 \n2327     Not using a print statement for printing, results in double backslashes for\n2328     latex commands since that's the way Python escapes backslashes in strings.\n2329 \n2330     >>> from sympy import latex, Rational\n2331     >>> from sympy.abc import tau\n2332     >>> latex((2*tau)**Rational(7,2))\n2333     '8 \\\\sqrt{2} \\\\tau^{\\\\frac{7}{2}}'\n2334     >>> print(latex((2*tau)**Rational(7,2)))\n2335     8 \\sqrt{2} \\tau^{\\frac{7}{2}}\n2336 \n2337     Examples\n2338     ========\n2339 \n2340     >>> from sympy import latex, pi, sin, asin, Integral, Matrix, Rational, log\n2341     >>> from sympy.abc import x, y, mu, r, tau\n2342 \n2343     Basic usage:\n2344 \n2345     >>> print(latex((2*tau)**Rational(7,2)))\n2346     8 \\sqrt{2} \\tau^{\\frac{7}{2}}\n2347 \n2348     ``mode`` and ``itex`` options:\n2349 \n2350     >>> print(latex((2*mu)**Rational(7,2), mode='plain'))\n2351     8 \\sqrt{2} \\mu^{\\frac{7}{2}}\n2352     >>> print(latex((2*tau)**Rational(7,2), mode='inline'))\n2353     $8 \\sqrt{2} \\tau^{7 / 2}$\n2354     >>> print(latex((2*mu)**Rational(7,2), mode='equation*'))\n2355     \\begin{equation*}8 \\sqrt{2} \\mu^{\\frac{7}{2}}\\end{equation*}\n2356     >>> print(latex((2*mu)**Rational(7,2), mode='equation'))\n2357     \\begin{equation}8 \\sqrt{2} \\mu^{\\frac{7}{2}}\\end{equation}\n2358     >>> print(latex((2*mu)**Rational(7,2), mode='equation', itex=True))\n2359     $$8 \\sqrt{2} \\mu^{\\frac{7}{2}}$$\n2360     >>> print(latex((2*mu)**Rational(7,2), mode='plain'))\n2361     8 \\sqrt{2} \\mu^{\\frac{7}{2}}\n2362     >>> print(latex((2*tau)**Rational(7,2), mode='inline'))\n2363     $8 \\sqrt{2} \\tau^{7 / 2}$\n2364     >>> print(latex((2*mu)**Rational(7,2), mode='equation*'))\n2365     \\begin{equation*}8 \\sqrt{2} \\mu^{\\frac{7}{2}}\\end{equation*}\n2366     >>> print(latex((2*mu)**Rational(7,2), mode='equation'))\n2367     \\begin{equation}8 \\sqrt{2} \\mu^{\\frac{7}{2}}\\end{equation}\n2368     >>> print(latex((2*mu)**Rational(7,2), mode='equation', itex=True))\n2369     $$8 \\sqrt{2} \\mu^{\\frac{7}{2}}$$\n2370 \n2371     Fraction options:\n2372 \n2373     >>> print(latex((2*tau)**Rational(7,2), fold_frac_powers=True))\n2374     8 \\sqrt{2} \\tau^{7/2}\n2375     >>> print(latex((2*tau)**sin(Rational(7,2))))\n2376     \\left(2 \\tau\\right)^{\\sin{\\left (\\frac{7}{2} \\right )}}\n2377     >>> print(latex((2*tau)**sin(Rational(7,2)), fold_func_brackets=True))\n2378     \\left(2 \\tau\\right)^{\\sin {\\frac{7}{2}}}\n2379     >>> print(latex(3*x**2/y))\n2380     \\frac{3 x^{2}}{y}\n2381     >>> print(latex(3*x**2/y, fold_short_frac=True))\n2382     3 x^{2} / y\n2383     >>> print(latex(Integral(r, r)/2/pi, long_frac_ratio=2))\n2384     \\frac{\\int r\\, dr}{2 \\pi}\n2385     >>> print(latex(Integral(r, r)/2/pi, long_frac_ratio=0))\n2386     \\frac{1}{2 \\pi} \\int r\\, dr\n2387 \n2388     Multiplication options:\n2389 \n2390     >>> print(latex((2*tau)**sin(Rational(7,2)), mul_symbol=\"times\"))\n2391     \\left(2 \\times \\tau\\right)^{\\sin{\\left (\\frac{7}{2} \\right )}}\n2392 \n2393     Trig options:\n2394 \n2395     >>> print(latex(asin(Rational(7,2))))\n2396     \\operatorname{asin}{\\left (\\frac{7}{2} \\right )}\n2397     >>> print(latex(asin(Rational(7,2)), inv_trig_style=\"full\"))\n2398     \\arcsin{\\left (\\frac{7}{2} \\right )}\n2399     >>> print(latex(asin(Rational(7,2)), inv_trig_style=\"power\"))\n2400     \\sin^{-1}{\\left (\\frac{7}{2} \\right )}\n2401 \n2402     Matrix options:\n2403 \n2404     >>> print(latex(Matrix(2, 1, [x, y])))\n2405     \\left[\\begin{matrix}x\\\\y\\end{matrix}\\right]\n2406     >>> print(latex(Matrix(2, 1, [x, y]), mat_str = \"array\"))\n2407     \\left[\\begin{array}{c}x\\\\y\\end{array}\\right]\n2408     >>> print(latex(Matrix(2, 1, [x, y]), mat_delim=\"(\"))\n2409     \\left(\\begin{matrix}x\\\\y\\end{matrix}\\right)\n2410 \n2411     Custom printing of symbols:\n2412 \n2413     >>> print(latex(x**2, symbol_names={x: 'x_i'}))\n2414     x_i^{2}\n2415 \n2416     Logarithms:\n2417 \n2418     >>> print(latex(log(10)))\n2419     \\log{\\left (10 \\right )}\n2420     >>> print(latex(log(10), ln_notation=True))\n2421     \\ln{\\left (10 \\right )}\n2422 \n2423     ``latex()`` also supports the builtin container types list, tuple, and\n2424     dictionary.\n2425 \n2426     >>> print(latex([2/x, y], mode='inline'))\n2427     $\\left [ 2 / x, \\quad y\\right ]$\n2428 \n2429     \"\"\"\n2430     if symbol_names is None:\n2431         symbol_names = {}\n2432 \n2433     settings = {\n2434         'fold_frac_powers' : fold_frac_powers,\n2435         'fold_func_brackets' : fold_func_brackets,\n2436         'fold_short_frac' : fold_short_frac,\n2437         'inv_trig_style' : inv_trig_style,\n2438         'itex' : itex,\n2439         'ln_notation' : ln_notation,\n2440         'long_frac_ratio' : long_frac_ratio,\n2441         'mat_delim' : mat_delim,\n2442         'mat_str' : mat_str,\n2443         'mode' : mode,\n2444         'mul_symbol' : mul_symbol,\n2445         'order' : order,\n2446         'symbol_names' : symbol_names,\n2447     }\n2448 \n2449     return LatexPrinter(settings).doprint(expr)\n",
        "intended_behavior": "The `latex` function needs to handle indexed matrix expressions in a way that correctly formats subscripts and avoids the creation of double or improperly nested subscripts when generating LaTeX code. This means ensuring that when producing LaTeX code for indexed expressions, especially for products of `MatrixSymbol` elements, it properly groups or orders subscripts to prevent LaTeX compilation errors. Particularly, for the case of matrix multiplication followed by indexing, the function should generate subscript notation that LaTeX and MathJax can render without issues. The specific code responsible for rendering the LaTeX representation of expressions involving indices should check for potential double subscript scenarios and apply the necessary adjustments (e.g., enclosing subscripts in braces when needed) to maintain valid LaTeX syntax."
    },
    {
        "rel_file_path": "sympy/matrices/expressions/matexpr.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.4/sympy/matrices/expressions/matexpr.py",
        "start": 649,
        "end": 709,
        "class_name": "MatrixSymbol",
        "method_name": null,
        "code": "649 class MatrixSymbol(MatrixExpr):\n650     \"\"\"Symbolic representation of a Matrix object\n651 \n652     Creates a SymPy Symbol to represent a Matrix. This matrix has a shape and\n653     can be included in Matrix Expressions\n654 \n655     Examples\n656     ========\n657 \n658     >>> from sympy import MatrixSymbol, Identity\n659     >>> A = MatrixSymbol('A', 3, 4) # A 3 by 4 Matrix\n660     >>> B = MatrixSymbol('B', 4, 3) # A 4 by 3 Matrix\n661     >>> A.shape\n662     (3, 4)\n663     >>> 2*A*B + Identity(3)\n664     I + 2*A*B\n665     \"\"\"\n666     is_commutative = False\n667     is_symbol = True\n668     _diff_wrt = True\n669 \n670     def __new__(cls, name, n, m):\n671         n, m = sympify(n), sympify(m)\n672         obj = Basic.__new__(cls, name, n, m)\n673         return obj\n674 \n675     def _hashable_content(self):\n676         return (self.name, self.shape)\n677 \n678     @property\n679     def shape(self):\n680         return self.args[1:3]\n681 \n682     @property\n683     def name(self):\n684         return self.args[0]\n685 \n686     def _eval_subs(self, old, new):\n687         # only do substitutions in shape\n688         shape = Tuple(*self.shape)._subs(old, new)\n689         return MatrixSymbol(self.name, *shape)\n690 \n691     def __call__(self, *args):\n692         raise TypeError(\"%s object is not callable\" % self.__class__)\n693 \n694     def _entry(self, i, j, **kwargs):\n695         return MatrixElement(self, i, j)\n696 \n697     @property\n698     def free_symbols(self):\n699         return set((self,))\n700 \n701     def doit(self, **hints):\n702         if hints.get('deep', True):\n703             return type(self)(self.name, self.args[1].doit(**hints),\n704                     self.args[2].doit(**hints))\n705         else:\n706             return self\n707 \n708     def _eval_simplify(self, **kwargs):\n709         return self\n",
        "intended_behavior": "While the issue is primarily related to how LaTeX representations are generated, if there's a specific way `MatrixSymbol` instances are represented or a certain interaction between `MatrixSymbol` indexing and the `latex` function causing the bug, this interaction should be reviewed and possibly modified to ensure it aligns with a correct LaTeX syntax output. This might involve adjusting how the `_entry` method (responsible for indexing) represents entries when they are passed to the `latex` function for conversion. Ensuring that the interaction between the indexed `MatrixSymbol` and the `latex` function does not lead to syntactically incorrect LaTeX output would be the goal here. However, based on the current analysis, the primary issue seems to be closely tied with the `latex` method's handling of such expressions rather than the `MatrixSymbol` class itself."
    }
]