[
    {
        "rel_file_path": "lib/matplotlib/cm.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.7/lib/matplotlib/cm.py",
        "start": 223,
        "end": 263,
        "class_name": null,
        "method_name": "register_cmap",
        "code": "223 def register_cmap(name=None, cmap=None, *, override_builtin=False):\n224     \"\"\"\n225     Add a colormap to the set recognized by :func:`get_cmap`.\n226 \n227     Register a new colormap to be accessed by name ::\n228 \n229         LinearSegmentedColormap('swirly', data, lut)\n230         register_cmap(cmap=swirly_cmap)\n231 \n232     Parameters\n233     ----------\n234     name : str, optional\n235        The name that can be used in :func:`get_cmap` or :rc:`image.cmap`\n236 \n237        If absent, the name will be the :attr:`~matplotlib.colors.Colormap.name`\n238        attribute of the *cmap*.\n239 \n240     cmap : matplotlib.colors.Colormap\n241        Despite being the second argument and having a default value, this\n242        is a required argument.\n243 \n244     override_builtin : bool\n245 \n246         Allow built-in colormaps to be overridden by a user-supplied\n247         colormap.\n248 \n249         Please do not use this unless you are sure you need it.\n250     \"\"\"\n251     _api.check_isinstance((str, None), name=name)\n252     if name is None:\n253         try:\n254             name = cmap.name\n255         except AttributeError as err:\n256             raise ValueError(\"Arguments must include a name or a \"\n257                              \"Colormap\") from err\n258     # override_builtin is allowed here for backward compatibility\n259     # this is just a shim to enable that to work privately in\n260     # the global ColormapRegistry\n261     _colormaps._allow_override_builtin = override_builtin\n262     _colormaps.register(cmap, name=name, force=override_builtin)\n263     _colormaps._allow_override_builtin = False\n",
        "intended_behavior": "The `register_cmap` function must ensure that a colormap, once registered with a specified name, is accessible under that name through any subsequent call to `get_cmap` or when used in plotting functions like `imshow`. This method should validate or enforce that the registered name takes precedence over the intrinsic name of the colormap object for all retrievals and uses within matplotlib. This adjustment ensures that user-defined names for colormaps are consistently recognized across the library without causing confusion or errors due to name mismatches."
    },
    {
        "rel_file_path": "lib/matplotlib/cm.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.7/lib/matplotlib/cm.py",
        "start": 182,
        "end": 212,
        "class_name": null,
        "method_name": "get_cmap",
        "code": "182     def get_cmap(self, cmap):\n183         \"\"\"\n184         Return a color map specified through *cmap*.\n185 \n186         Parameters\n187         ----------\n188         cmap : str or `~matplotlib.colors.Colormap` or None\n189 \n190             - if a `.Colormap`, return it\n191             - if a string, look it up in ``mpl.colormaps``\n192             - if None, return the Colormap defined in :rc:`image.cmap`\n193 \n194         Returns\n195         -------\n196         Colormap\n197         \"\"\"\n198         # get the default color map\n199         if cmap is None:\n200             return self[mpl.rcParams[\"image.cmap\"]]\n201 \n202         # if the user passed in a Colormap, simply return it\n203         if isinstance(cmap, colors.Colormap):\n204             return cmap\n205         if isinstance(cmap, str):\n206             _api.check_in_list(sorted(_colormaps), cmap=cmap)\n207             # otherwise, it must be a string so look it up\n208             return self[cmap]\n209         raise TypeError(\n210             'get_cmap expects None or an instance of a str or Colormap . ' +\n211             f'you passed {cmap!r} of type {type(cmap)}'\n212         )\n",
        "intended_behavior": "The `get_cmap` function should be adjusted to accurately retrieve colormaps by their registered names, prioritizing these over the intrinsic names given to colormap objects upon their creation. If a colormap has been registered with a custom name, `get_cmap` must resolve this name to the correct colormap object, ensuring that the colormap can be utilized in functions like `imshow` seamlessly. This enhancement assures that the registration name fully supersedes the original name for all practical purposes inside the matplotlib framework."
    },
    {
        "rel_file_path": "lib/matplotlib/cm.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.7/lib/matplotlib/cm.py",
        "start": 528,
        "end": 530,
        "class_name": null,
        "method_name": "get_cmap",
        "code": "528     def get_cmap(self):\n529         \"\"\"Return the `.Colormap` instance.\"\"\"\n530         return self.cmap\n",
        "intended_behavior": "The `get_cmap` function should be adjusted to accurately retrieve colormaps by their registered names, prioritizing these over the intrinsic names given to colormap objects upon their creation. If a colormap has been registered with a custom name, `get_cmap` must resolve this name to the correct colormap object, ensuring that the colormap can be utilized in functions like `imshow` seamlessly. This enhancement assures that the registration name fully supersedes the original name for all practical purposes inside the matplotlib framework."
    },
    {
        "rel_file_path": "lib/matplotlib/cm.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.7/lib/matplotlib/cm.py",
        "start": 182,
        "end": 212,
        "class_name": "ColormapRegistry",
        "method_name": "get_cmap",
        "code": "182     def get_cmap(self, cmap):\n183         \"\"\"\n184         Return a color map specified through *cmap*.\n185 \n186         Parameters\n187         ----------\n188         cmap : str or `~matplotlib.colors.Colormap` or None\n189 \n190             - if a `.Colormap`, return it\n191             - if a string, look it up in ``mpl.colormaps``\n192             - if None, return the Colormap defined in :rc:`image.cmap`\n193 \n194         Returns\n195         -------\n196         Colormap\n197         \"\"\"\n198         # get the default color map\n199         if cmap is None:\n200             return self[mpl.rcParams[\"image.cmap\"]]\n201 \n202         # if the user passed in a Colormap, simply return it\n203         if isinstance(cmap, colors.Colormap):\n204             return cmap\n205         if isinstance(cmap, str):\n206             _api.check_in_list(sorted(_colormaps), cmap=cmap)\n207             # otherwise, it must be a string so look it up\n208             return self[cmap]\n209         raise TypeError(\n210             'get_cmap expects None or an instance of a str or Colormap . ' +\n211             f'you passed {cmap!r} of type {type(cmap)}'\n212         )\n",
        "intended_behavior": "The `get_cmap` function should be adjusted to accurately retrieve colormaps by their registered names, prioritizing these over the intrinsic names given to colormap objects upon their creation. If a colormap has been registered with a custom name, `get_cmap` must resolve this name to the correct colormap object, ensuring that the colormap can be utilized in functions like `imshow` seamlessly. This enhancement assures that the registration name fully supersedes the original name for all practical purposes inside the matplotlib framework."
    },
    {
        "rel_file_path": "lib/matplotlib/cm.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.7/lib/matplotlib/cm.py",
        "start": 528,
        "end": 530,
        "class_name": "ScalarMappable",
        "method_name": "get_cmap",
        "code": "528     def get_cmap(self):\n529         \"\"\"Return the `.Colormap` instance.\"\"\"\n530         return self.cmap\n",
        "intended_behavior": "The `get_cmap` function should be adjusted to accurately retrieve colormaps by their registered names, prioritizing these over the intrinsic names given to colormap objects upon their creation. If a colormap has been registered with a custom name, `get_cmap` must resolve this name to the correct colormap object, ensuring that the colormap can be utilized in functions like `imshow` seamlessly. This enhancement assures that the registration name fully supersedes the original name for all practical purposes inside the matplotlib framework."
    }
]