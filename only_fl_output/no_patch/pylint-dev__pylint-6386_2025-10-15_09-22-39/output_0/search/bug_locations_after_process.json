[
    {
        "rel_file_path": "pylint/config/argument.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/pylint-dev__pylint/setup_pylint-dev__pylint__2.14/pylint/config/argument.py",
        "start": 1,
        "end": 469,
        "class_name": null,
        "method_name": null,
        "code": "1 # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n2 # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n3 # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n4 \n5 \"\"\"Definition of an Argument class and transformers for various argument types.\n6 \n7 An Argument instance represents a pylint option to be handled by an argparse.ArgumentParser\n8 \"\"\"\n9 \n10 from __future__ import annotations\n11 \n12 import argparse\n13 import pathlib\n14 import re\n15 import sys\n16 from collections.abc import Callable\n17 from typing import Any, Pattern, Sequence, Tuple, Union\n18 \n19 from pylint import interfaces\n20 from pylint import utils as pylint_utils\n21 from pylint.config.callback_actions import _CallbackAction, _ExtendAction\n22 from pylint.config.deprecation_actions import _NewNamesAction, _OldNamesAction\n23 from pylint.constants import PY38_PLUS\n24 \n25 if sys.version_info >= (3, 8):\n26     from typing import Literal\n27 else:\n28     from typing_extensions import Literal\n29 \n30 \n31 _ArgumentTypes = Union[\n32     str,\n33     int,\n34     float,\n35     bool,\n36     Pattern[str],\n37     Sequence[str],\n38     Sequence[Pattern[str]],\n39     Tuple[int, ...],\n40 ]\n41 \"\"\"List of possible argument types.\"\"\"\n42 \n43 \n44 def _confidence_transformer(value: str) -> Sequence[str]:\n45     \"\"\"Transforms a comma separated string of confidence values.\"\"\"\n46     values = pylint_utils._check_csv(value)\n47     for confidence in values:\n48         if confidence not in interfaces.CONFIDENCE_LEVEL_NAMES:\n49             raise argparse.ArgumentTypeError(\n50                 f\"{value} should be in {*interfaces.CONFIDENCE_LEVEL_NAMES,}\"\n51             )\n52     return values\n53 \n54 \n55 def _csv_transformer(value: str) -> Sequence[str]:\n56     \"\"\"Transforms a comma separated string.\"\"\"\n57     return pylint_utils._check_csv(value)\n58 \n59 \n60 YES_VALUES = {\"y\", \"yes\", \"true\"}\n61 NO_VALUES = {\"n\", \"no\", \"false\"}\n62 \n63 \n64 def _yn_transformer(value: str) -> bool:\n65     \"\"\"Transforms a yes/no or stringified bool into a bool.\"\"\"\n66     value = value.lower()\n67     if value in YES_VALUES:\n68         return True\n69     if value in NO_VALUES:\n70         return False\n71     raise argparse.ArgumentTypeError(\n72         None, f\"Invalid yn value '{value}', should be in {*YES_VALUES, *NO_VALUES}\"\n73     )\n74 \n75 \n76 def _non_empty_string_transformer(value: str) -> str:\n77     \"\"\"Check that a string is not empty and remove quotes.\"\"\"\n78     if not value:\n79         raise argparse.ArgumentTypeError(\"Option cannot be an empty string.\")\n80     return pylint_utils._unquote(value)\n81 \n82 \n83 def _py_version_transformer(value: str) -> tuple[int, ...]:\n84     \"\"\"Transforms a version string into a version tuple.\"\"\"\n85     try:\n86         version = tuple(int(val) for val in value.replace(\",\", \".\").split(\".\"))\n87     except ValueError:\n88         raise argparse.ArgumentTypeError(\n89             f\"{value} has an invalid format, should be a version string. E.g., '3.8'\"\n90         ) from None\n91     return version\n92 \n93 \n94 def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n95     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n96     patterns: list[Pattern[str]] = []\n97     for pattern in _csv_transformer(value):\n98         patterns.append(re.compile(pattern))\n99     return patterns\n100 \n101 \n102 def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n103     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n104     patterns: list[Pattern[str]] = []\n105     for pattern in _csv_transformer(value):\n106         patterns.append(\n107             re.compile(\n108                 str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n109                 + \"|\"\n110                 + pathlib.PureWindowsPath(pattern).as_posix()\n111             )\n112         )\n113     return patterns\n114 \n115 \n116 _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n117     \"choice\": str,\n118     \"csv\": _csv_transformer,\n119     \"float\": float,\n120     \"int\": int,\n121     \"confidence\": _confidence_transformer,\n122     \"non_empty_string\": _non_empty_string_transformer,\n123     \"py_version\": _py_version_transformer,\n124     \"regexp\": re.compile,\n125     \"regexp_csv\": _regexp_csv_transfomer,\n126     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n127     \"string\": pylint_utils._unquote,\n128     \"yn\": _yn_transformer,\n129 }\n130 \"\"\"Type transformers for all argument types.\n131 \n132 A transformer should accept a string and return one of the supported\n133 Argument types. It will only be called when parsing 1) command-line,\n134 2) configuration files and 3) a string default value.\n135 Non-string default values are assumed to be of the correct type.\n136 \"\"\"\n137 \n138 \n139 class _Argument:\n140     \"\"\"Class representing an argument to be parsed by an argparse.ArgumentsParser.\n141 \n142     This is based on the parameters passed to argparse.ArgumentsParser.add_message.\n143     See:\n144     https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument\n145     \"\"\"\n146 \n147     def __init__(\n148         self,\n149         *,\n150         flags: list[str],\n151         arg_help: str,\n152         hide_help: bool,\n153         section: str | None,\n154     ) -> None:\n155         self.flags = flags\n156         \"\"\"The name of the argument.\"\"\"\n157 \n158         self.hide_help = hide_help\n159         \"\"\"Whether to hide this argument in the help message.\"\"\"\n160 \n161         # argparse uses % formatting on help strings, so a % needs to be escaped\n162         self.help = arg_help.replace(\"%\", \"%%\")\n163         \"\"\"The description of the argument.\"\"\"\n164 \n165         if hide_help:\n166             self.help = argparse.SUPPRESS\n167 \n168         self.section = section\n169         \"\"\"The section to add this argument to.\"\"\"\n170 \n171 \n172 class _BaseStoreArgument(_Argument):\n173     \"\"\"Base class for store arguments to be parsed by an argparse.ArgumentsParser.\n174 \n175     This is based on the parameters passed to argparse.ArgumentsParser.add_message.\n176     See:\n177     https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument\n178     \"\"\"\n179 \n180     def __init__(\n181         self,\n182         *,\n183         flags: list[str],\n184         action: str,\n185         default: _ArgumentTypes,\n186         arg_help: str,\n187         hide_help: bool,\n188         section: str | None,\n189     ) -> None:\n190         super().__init__(\n191             flags=flags, arg_help=arg_help, hide_help=hide_help, section=section\n192         )\n193 \n194         self.action = action\n195         \"\"\"The action to perform with the argument.\"\"\"\n196 \n197         self.default = default\n198         \"\"\"The default value of the argument.\"\"\"\n199 \n200 \n201 class _StoreArgument(_BaseStoreArgument):\n202     \"\"\"Class representing a store argument to be parsed by an argparse.ArgumentsParser.\n203 \n204     This is based on the parameters passed to argparse.ArgumentsParser.add_message.\n205     See:\n206     https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument\n207     \"\"\"\n208 \n209     def __init__(\n210         self,\n211         *,\n212         flags: list[str],\n213         action: str,\n214         default: _ArgumentTypes,\n215         arg_type: str,\n216         choices: list[str] | None,\n217         arg_help: str,\n218         metavar: str,\n219         hide_help: bool,\n220         section: str | None,\n221     ) -> None:\n222         super().__init__(\n223             flags=flags,\n224             action=action,\n225             default=default,\n226             arg_help=arg_help,\n227             hide_help=hide_help,\n228             section=section,\n229         )\n230 \n231         self.type = _TYPE_TRANSFORMERS[arg_type]\n232         \"\"\"A transformer function that returns a transformed type of the argument.\"\"\"\n233 \n234         self.choices = choices\n235         \"\"\"A list of possible choices for the argument.\n236 \n237         None if there are no restrictions.\n238         \"\"\"\n239 \n240         self.metavar = metavar\n241         \"\"\"The metavar of the argument.\n242 \n243         See:\n244         https://docs.python.org/3/library/argparse.html#metavar\n245         \"\"\"\n246 \n247 \n248 class _StoreTrueArgument(_BaseStoreArgument):\n249     \"\"\"Class representing a 'store_true' argument to be parsed by an argparse.ArgumentsParser.\n250 \n251     This is based on the parameters passed to argparse.ArgumentsParser.add_message.\n252     See:\n253     https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument\n254     \"\"\"\n255 \n256     # pylint: disable-next=useless-super-delegation # We narrow down the type of action\n257     def __init__(\n258         self,\n259         *,\n260         flags: list[str],\n261         action: Literal[\"store_true\"],\n262         default: _ArgumentTypes,\n263         arg_help: str,\n264         hide_help: bool,\n265         section: str | None,\n266     ) -> None:\n267         super().__init__(\n268             flags=flags,\n269             action=action,\n270             default=default,\n271             arg_help=arg_help,\n272             hide_help=hide_help,\n273             section=section,\n274         )\n275 \n276 \n277 class _DeprecationArgument(_Argument):\n278     \"\"\"Store arguments while also handling deprecation warnings for old and new names.\n279 \n280     This is based on the parameters passed to argparse.ArgumentsParser.add_message.\n281     See:\n282     https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument\n283     \"\"\"\n284 \n285     def __init__(\n286         self,\n287         *,\n288         flags: list[str],\n289         action: type[argparse.Action],\n290         default: _ArgumentTypes,\n291         arg_type: str,\n292         choices: list[str] | None,\n293         arg_help: str,\n294         metavar: str,\n295         hide_help: bool,\n296         section: str | None,\n297     ) -> None:\n298         super().__init__(\n299             flags=flags, arg_help=arg_help, hide_help=hide_help, section=section\n300         )\n301 \n302         self.action = action\n303         \"\"\"The action to perform with the argument.\"\"\"\n304 \n305         self.default = default\n306         \"\"\"The default value of the argument.\"\"\"\n307 \n308         self.type = _TYPE_TRANSFORMERS[arg_type]\n309         \"\"\"A transformer function that returns a transformed type of the argument.\"\"\"\n310 \n311         self.choices = choices\n312         \"\"\"A list of possible choices for the argument.\n313 \n314         None if there are no restrictions.\n315         \"\"\"\n316 \n317         self.metavar = metavar\n318         \"\"\"The metavar of the argument.\n319 \n320         See:\n321         https://docs.python.org/3/library/argparse.html#metavar\n322         \"\"\"\n323 \n324 \n325 class _ExtendArgument(_DeprecationArgument):\n326     \"\"\"Class for extend arguments to be parsed by an argparse.ArgumentsParser.\n327 \n328     This is based on the parameters passed to argparse.ArgumentsParser.add_message.\n329     See:\n330     https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument\n331     \"\"\"\n332 \n333     def __init__(\n334         self,\n335         *,\n336         flags: list[str],\n337         action: Literal[\"extend\"],\n338         default: _ArgumentTypes,\n339         arg_type: str,\n340         metavar: str,\n341         arg_help: str,\n342         hide_help: bool,\n343         section: str | None,\n344         choices: list[str] | None,\n345         dest: str | None,\n346     ) -> None:\n347         # The extend action is included in the stdlib from 3.8+\n348         if PY38_PLUS:\n349             action_class = argparse._ExtendAction  # type: ignore[attr-defined]\n350         else:\n351             action_class = _ExtendAction\n352 \n353         self.dest = dest\n354         \"\"\"The destination of the argument.\"\"\"\n355 \n356         super().__init__(\n357             flags=flags,\n358             action=action_class,\n359             default=default,\n360             arg_type=arg_type,\n361             choices=choices,\n362             arg_help=arg_help,\n363             metavar=metavar,\n364             hide_help=hide_help,\n365             section=section,\n366         )\n367 \n368 \n369 class _StoreOldNamesArgument(_DeprecationArgument):\n370     \"\"\"Store arguments while also handling old names.\n371 \n372     This is based on the parameters passed to argparse.ArgumentsParser.add_message.\n373     See:\n374     https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument\n375     \"\"\"\n376 \n377     def __init__(\n378         self,\n379         *,\n380         flags: list[str],\n381         default: _ArgumentTypes,\n382         arg_type: str,\n383         choices: list[str] | None,\n384         arg_help: str,\n385         metavar: str,\n386         hide_help: bool,\n387         kwargs: dict[str, Any],\n388         section: str | None,\n389     ) -> None:\n390         super().__init__(\n391             flags=flags,\n392             action=_OldNamesAction,\n393             default=default,\n394             arg_type=arg_type,\n395             choices=choices,\n396             arg_help=arg_help,\n397             metavar=metavar,\n398             hide_help=hide_help,\n399             section=section,\n400         )\n401 \n402         self.kwargs = kwargs\n403         \"\"\"Any additional arguments passed to the action.\"\"\"\n404 \n405 \n406 class _StoreNewNamesArgument(_DeprecationArgument):\n407     \"\"\"Store arguments while also emitting deprecation warnings.\n408 \n409     This is based on the parameters passed to argparse.ArgumentsParser.add_message.\n410     See:\n411     https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument\n412     \"\"\"\n413 \n414     def __init__(\n415         self,\n416         *,\n417         flags: list[str],\n418         default: _ArgumentTypes,\n419         arg_type: str,\n420         choices: list[str] | None,\n421         arg_help: str,\n422         metavar: str,\n423         hide_help: bool,\n424         kwargs: dict[str, Any],\n425         section: str | None,\n426     ) -> None:\n427         super().__init__(\n428             flags=flags,\n429             action=_NewNamesAction,\n430             default=default,\n431             arg_type=arg_type,\n432             choices=choices,\n433             arg_help=arg_help,\n434             metavar=metavar,\n435             hide_help=hide_help,\n436             section=section,\n437         )\n438 \n439         self.kwargs = kwargs\n440         \"\"\"Any additional arguments passed to the action.\"\"\"\n441 \n442 \n443 class _CallableArgument(_Argument):\n444     \"\"\"Class representing an callable argument to be parsed by an argparse.ArgumentsParser.\n445 \n446     This is based on the parameters passed to argparse.ArgumentsParser.add_message.\n447     See:\n448     https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument\n449     \"\"\"\n450 \n451     def __init__(\n452         self,\n453         *,\n454         flags: list[str],\n455         action: type[_CallbackAction],\n456         arg_help: str,\n457         kwargs: dict[str, Any],\n458         hide_help: bool,\n459         section: str | None,\n460     ) -> None:\n461         super().__init__(\n462             flags=flags, arg_help=arg_help, hide_help=hide_help, section=section\n463         )\n464 \n465         self.action = action\n466         \"\"\"The action to perform with the argument.\"\"\"\n467 \n468         self.kwargs = kwargs\n469         \"\"\"Any additional arguments passed to the action.\"\"\"\n",
        "intended_behavior": "The update should ensure that the '-v' or '--verbose' option does not require any arguments, maintaining consistency across its usage. This likely involves ensuring the option is configured with the appropriate action, possibly changing from something like 'store_true' (for boolean flags) to having no expectation of an accompanying value."
    }
]