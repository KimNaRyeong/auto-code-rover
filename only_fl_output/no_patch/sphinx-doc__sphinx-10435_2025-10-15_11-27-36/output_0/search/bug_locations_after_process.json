[
    {
        "rel_file_path": "sphinx/writers/latex.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sphinx-doc__sphinx/setup_sphinx-doc__sphinx__5.0/sphinx/writers/latex.py",
        "start": 1695,
        "end": 1718,
        "class_name": null,
        "method_name": "visit_literal",
        "code": "1695     def visit_literal(self, node: Element) -> None:\n1696         if self.in_title:\n1697             self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n1698             return\n1699         elif 'kbd' in node['classes']:\n1700             self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n1701             return\n1702         lang = node.get(\"language\", None)\n1703         if 'code' not in node['classes'] or not lang:\n1704             self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n1705             return\n1706 \n1707         opts = self.config.highlight_options.get(lang, {})\n1708         hlcode = self.highlighter.highlight_block(\n1709             node.astext(), lang, opts=opts, location=node)\n1710         # TODO: Use nowrap option once LaTeX formatter supports it\n1711         # https://github.com/pygments/pygments/pull/1343\n1712         hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n1713                                 r'\\sphinxcode{\\sphinxupquote{')\n1714         # get consistent trailer\n1715         hlcode = hlcode.rstrip()[:-14]  # strip \\end{Verbatim}\n1716         self.body.append(hlcode)\n1717         self.body.append('}}')\n1718         raise nodes.SkipNode\n",
        "intended_behavior": "This method should precisely convert inline code elements to their LaTeX equivalent without introducing additional spaces before and after the inline code. The adjustment should ensure that any leading or trailing spaces are only included if they are part of the original text. This might necessitate examining how text is processed and trimmed during conversion, ensuring that unintentional space characters are not added to the LaTeX output."
    },
    {
        "rel_file_path": "sphinx/writers/latex.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sphinx-doc__sphinx/setup_sphinx-doc__sphinx__5.0/sphinx/writers/latex.py",
        "start": 1695,
        "end": 1718,
        "class_name": "LaTeXTranslator",
        "method_name": "visit_literal",
        "code": "1695     def visit_literal(self, node: Element) -> None:\n1696         if self.in_title:\n1697             self.body.append(r'\\sphinxstyleliteralintitle{\\sphinxupquote{')\n1698             return\n1699         elif 'kbd' in node['classes']:\n1700             self.body.append(r'\\sphinxkeyboard{\\sphinxupquote{')\n1701             return\n1702         lang = node.get(\"language\", None)\n1703         if 'code' not in node['classes'] or not lang:\n1704             self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n1705             return\n1706 \n1707         opts = self.config.highlight_options.get(lang, {})\n1708         hlcode = self.highlighter.highlight_block(\n1709             node.astext(), lang, opts=opts, location=node)\n1710         # TODO: Use nowrap option once LaTeX formatter supports it\n1711         # https://github.com/pygments/pygments/pull/1343\n1712         hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n1713                                 r'\\sphinxcode{\\sphinxupquote{')\n1714         # get consistent trailer\n1715         hlcode = hlcode.rstrip()[:-14]  # strip \\end{Verbatim}\n1716         self.body.append(hlcode)\n1717         self.body.append('}}')\n1718         raise nodes.SkipNode\n",
        "intended_behavior": "This method should precisely convert inline code elements to their LaTeX equivalent without introducing additional spaces before and after the inline code. The adjustment should ensure that any leading or trailing spaces are only included if they are part of the original text. This might necessitate examining how text is processed and trimmed during conversion, ensuring that unintentional space characters are not added to the LaTeX output."
    },
    {
        "rel_file_path": "sphinx/writers/latex.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sphinx-doc__sphinx/setup_sphinx-doc__sphinx__5.0/sphinx/writers/latex.py",
        "start": 1749,
        "end": 1798,
        "class_name": null,
        "method_name": "visit_literal_block",
        "code": "1749     def visit_literal_block(self, node: Element) -> None:\n1750         if node.rawsource != node.astext():\n1751             # most probably a parsed-literal block -- don't highlight\n1752             self.in_parsed_literal += 1\n1753             self.body.append(r'\\begin{sphinxalltt}' + CR)\n1754         else:\n1755             labels = self.hypertarget_to(node)\n1756             if isinstance(node.parent, captioned_literal_block):\n1757                 labels += self.hypertarget_to(node.parent)\n1758             if labels and not self.in_footnote:\n1759                 self.body.append(CR + r'\\def\\sphinxLiteralBlockLabel{' + labels + '}')\n1760 \n1761             lang = node.get('language', 'default')\n1762             linenos = node.get('linenos', False)\n1763             highlight_args = node.get('highlight_args', {})\n1764             highlight_args['force'] = node.get('force', False)\n1765             opts = self.config.highlight_options.get(lang, {})\n1766 \n1767             hlcode = self.highlighter.highlight_block(\n1768                 node.rawsource, lang, opts=opts, linenos=linenos,\n1769                 location=node, **highlight_args\n1770             )\n1771             if self.in_footnote:\n1772                 self.body.append(CR + r'\\sphinxSetupCodeBlockInFootnote')\n1773                 hlcode = hlcode.replace(r'\\begin{Verbatim}',\n1774                                         r'\\begin{sphinxVerbatim}')\n1775             # if in table raise verbatim flag to avoid \"tabulary\" environment\n1776             # and opt for sphinxVerbatimintable to handle caption & long lines\n1777             elif self.table:\n1778                 self.table.has_problematic = True\n1779                 self.table.has_verbatim = True\n1780                 hlcode = hlcode.replace(r'\\begin{Verbatim}',\n1781                                         r'\\begin{sphinxVerbatimintable}')\n1782             else:\n1783                 hlcode = hlcode.replace(r'\\begin{Verbatim}',\n1784                                         r'\\begin{sphinxVerbatim}')\n1785             # get consistent trailer\n1786             hlcode = hlcode.rstrip()[:-14]  # strip \\end{Verbatim}\n1787             if self.table and not self.in_footnote:\n1788                 hlcode += r'\\end{sphinxVerbatimintable}'\n1789             else:\n1790                 hlcode += r'\\end{sphinxVerbatim}'\n1791 \n1792             hllines = str(highlight_args.get('hl_lines', []))[1:-1]\n1793             if hllines:\n1794                 self.body.append(CR + r'\\fvset{hllines={, %s,}}%%' % hllines)\n1795             self.body.append(CR + hlcode + CR)\n1796             if hllines:\n1797                 self.body.append(r'\\sphinxresetverbatimhllines' + CR)\n1798             raise nodes.SkipNode\n",
        "intended_behavior": "Similarly, for block codes, this method should ensure that the conversion process does not alter the spacing around the code block, specifically not adding extra spaces at the beginning or end of the code block in the LaTeX output. Changes to this method should focus on preserving the exact format of the source code block as it appears in the Sphinx document, without unintended formatting alterations."
    },
    {
        "rel_file_path": "sphinx/writers/latex.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sphinx-doc__sphinx/setup_sphinx-doc__sphinx__5.0/sphinx/writers/latex.py",
        "start": 1749,
        "end": 1798,
        "class_name": "LaTeXTranslator",
        "method_name": "visit_literal_block",
        "code": "1749     def visit_literal_block(self, node: Element) -> None:\n1750         if node.rawsource != node.astext():\n1751             # most probably a parsed-literal block -- don't highlight\n1752             self.in_parsed_literal += 1\n1753             self.body.append(r'\\begin{sphinxalltt}' + CR)\n1754         else:\n1755             labels = self.hypertarget_to(node)\n1756             if isinstance(node.parent, captioned_literal_block):\n1757                 labels += self.hypertarget_to(node.parent)\n1758             if labels and not self.in_footnote:\n1759                 self.body.append(CR + r'\\def\\sphinxLiteralBlockLabel{' + labels + '}')\n1760 \n1761             lang = node.get('language', 'default')\n1762             linenos = node.get('linenos', False)\n1763             highlight_args = node.get('highlight_args', {})\n1764             highlight_args['force'] = node.get('force', False)\n1765             opts = self.config.highlight_options.get(lang, {})\n1766 \n1767             hlcode = self.highlighter.highlight_block(\n1768                 node.rawsource, lang, opts=opts, linenos=linenos,\n1769                 location=node, **highlight_args\n1770             )\n1771             if self.in_footnote:\n1772                 self.body.append(CR + r'\\sphinxSetupCodeBlockInFootnote')\n1773                 hlcode = hlcode.replace(r'\\begin{Verbatim}',\n1774                                         r'\\begin{sphinxVerbatim}')\n1775             # if in table raise verbatim flag to avoid \"tabulary\" environment\n1776             # and opt for sphinxVerbatimintable to handle caption & long lines\n1777             elif self.table:\n1778                 self.table.has_problematic = True\n1779                 self.table.has_verbatim = True\n1780                 hlcode = hlcode.replace(r'\\begin{Verbatim}',\n1781                                         r'\\begin{sphinxVerbatimintable}')\n1782             else:\n1783                 hlcode = hlcode.replace(r'\\begin{Verbatim}',\n1784                                         r'\\begin{sphinxVerbatim}')\n1785             # get consistent trailer\n1786             hlcode = hlcode.rstrip()[:-14]  # strip \\end{Verbatim}\n1787             if self.table and not self.in_footnote:\n1788                 hlcode += r'\\end{sphinxVerbatimintable}'\n1789             else:\n1790                 hlcode += r'\\end{sphinxVerbatim}'\n1791 \n1792             hllines = str(highlight_args.get('hl_lines', []))[1:-1]\n1793             if hllines:\n1794                 self.body.append(CR + r'\\fvset{hllines={, %s,}}%%' % hllines)\n1795             self.body.append(CR + hlcode + CR)\n1796             if hllines:\n1797                 self.body.append(r'\\sphinxresetverbatimhllines' + CR)\n1798             raise nodes.SkipNode\n",
        "intended_behavior": "Similarly, for block codes, this method should ensure that the conversion process does not alter the spacing around the code block, specifically not adding extra spaces at the beginning or end of the code block in the LaTeX output. Changes to this method should focus on preserving the exact format of the source code block as it appears in the Sphinx document, without unintended formatting alterations."
    }
]