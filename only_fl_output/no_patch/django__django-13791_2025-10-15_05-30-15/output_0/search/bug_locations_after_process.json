[
    {
        "rel_file_path": "django/utils/dateparse.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/utils/dateparse.py",
        "start": 125,
        "end": 147,
        "class_name": null,
        "method_name": "parse_duration",
        "code": "125 def parse_duration(value):\n126     \"\"\"Parse a duration string and return a datetime.timedelta.\n127 \n128     The preferred format for durations in Django is '%d %H:%M:%S.%f'.\n129 \n130     Also supports ISO 8601 representation and PostgreSQL's day-time interval\n131     format.\n132     \"\"\"\n133     match = (\n134         standard_duration_re.match(value) or\n135         iso8601_duration_re.match(value) or\n136         postgres_interval_re.match(value)\n137     )\n138     if match:\n139         kw = match.groupdict()\n140         sign = -1 if kw.pop('sign', '+') == '-' else 1\n141         if kw.get('microseconds'):\n142             kw['microseconds'] = kw['microseconds'].ljust(6, '0')\n143         if kw.get('seconds') and kw.get('microseconds') and kw['seconds'].startswith('-'):\n144             kw['microseconds'] = '-' + kw['microseconds']\n145         kw = {k: float(v.replace(',', '.')) for k, v in kw.items() if v is not None}\n146         days = datetime.timedelta(kw.pop('days', .0) or .0)\n147         return days + sign * datetime.timedelta(**kw)\n",
        "intended_behavior": "The `parse_duration` method needs to be modified to ensure that the sign is correctly applied to durations that only consist of days. To achieve this, the calculation handling the final return value, specifically the line `return days + sign * datetime.timedelta(**kw)`, should be adjusted. This adjustment must ensure that the sign is incorporated into the `days` `datetime.timedelta` object before or during its creation, rather than relying on the final combination step, which does not work when `kw` results in a timedelta of zero duration. The change must preserve the existing functionality for all other cases (e.g., durations including hours, minutes, seconds, and/or microseconds, in addition to or instead of days) while correctly handling the sign for durations consisting solely of days. Essentially, the sign should directly influence the `days` timedelta, ensuring negative durations are properly represented even when only days are specified, without altering the method's behavior for parsing other components of the duration string."
    }
]