diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -20,6 +20,9 @@
 
 
 def get_view_name(view_func):
+    if hasattr(view_func, 'view_class'):
+        klass = view_func.view_class
+        return f'{klass.__module__}.{klass.__qualname__}'
     mod_name = view_func.__module__
     view_name = getattr(view_func, '__qualname__', view_func.__class__.__name__)
     return mod_name + '.' + view_name
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -378,7 +378,9 @@ def lookup_str(self):
         callback = self.callback
         if isinstance(callback, functools.partial):
             callback = callback.func
-        if not hasattr(callback, '__name__'):
+        if hasattr(callback, 'view_class'):
+            callback = callback.view_class
+        elif not hasattr(callback, '__name__'):
             return callback.__module__ + "." + callback.__class__.__name__
         return callback.__module__ + "." + callback.__qualname__
 
diff --git a/django/views/debug.py b/django/views/debug.py
--- a/django/views/debug.py
+++ b/django/views/debug.py
@@ -517,7 +517,9 @@ def technical_404_response(request, exception):
     else:
         obj = resolver_match.func
 
-        if hasattr(obj, '__name__'):
+        if hasattr(obj, 'view_class'):
+            caller = obj.view_class
+        elif hasattr(obj, '__name__'):
             caller = obj.__name__
         elif hasattr(obj, '__class__') and hasattr(obj.__class__, '__name__'):
             caller = obj.__class__.__name__
diff --git a/django/views/generic/base.py b/django/views/generic/base.py
--- a/django/views/generic/base.py
+++ b/django/views/generic/base.py
@@ -1,5 +1,4 @@
 import logging
-from functools import update_wrapper
 
 from django.core.exceptions import ImproperlyConfigured
 from django.http import (
@@ -71,12 +70,16 @@ def view(request, *args, **kwargs):
         view.view_class = cls
         view.view_initkwargs = initkwargs
 
-        # take name and docstring from class
-        update_wrapper(view, cls, updated=())
+        # __name__ and __qualname__ are intentionally left unchanged as
+        # view_class should be used to robustly determine the name of the view
+        # instead.
+        view.__doc__ = cls.__doc__
+        view.__module__ = cls.__module__
+        view.__annotations__ = cls.dispatch.__annotations__
+        # Copy possible attributes set by decorators, e.g. @csrf_exempt, from
+        # the dispatch method.
+        view.__dict__.update(cls.dispatch.__dict__)
 
-        # and possible attributes set by decorators
-        # like csrf_exempt from dispatch
-        update_wrapper(view, cls.dispatch, assigned=())
         return view
 
     def setup(self, request, *args, **kwargs):
