[
    {
        "rel_file_path": "sympy/printing/latex.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.4/sympy/printing/latex.py",
        "start": 2269,
        "end": 2452,
        "class_name": null,
        "method_name": "latex",
        "code": "2269 def latex(expr, fold_frac_powers=False, fold_func_brackets=False,\n2270     fold_short_frac=None, inv_trig_style=\"abbreviated\",\n2271     itex=False, ln_notation=False, long_frac_ratio=None,\n2272     mat_delim=\"[\", mat_str=None, mode=\"plain\", mul_symbol=None,\n2273     order=None, symbol_names=None):\n2274     r\"\"\"Convert the given expression to LaTeX string representation.\n2275 \n2276     Parameters\n2277     ==========\n2278     fold_frac_powers : boolean, optional\n2279         Emit ``^{p/q}`` instead of ``^{\\frac{p}{q}}`` for fractional powers.\n2280     fold_func_brackets : boolean, optional\n2281         Fold function brackets where applicable.\n2282     fold_short_frac : boolean, optional\n2283         Emit ``p / q`` instead of ``\\frac{p}{q}`` when the denominator is\n2284         simple enough (at most two terms and no powers). The default value is\n2285         ``True`` for inline mode, ``False`` otherwise.\n2286     inv_trig_style : string, optional\n2287         How inverse trig functions should be displayed. Can be one of\n2288         ``abbreviated``, ``full``, or ``power``. Defaults to ``abbreviated``.\n2289     itex : boolean, optional\n2290         Specifies if itex-specific syntax is used, including emitting\n2291         ``$$...$$``.\n2292     ln_notation : boolean, optional\n2293         If set to ``True``, ``\\ln`` is used instead of default ``\\log``.\n2294     long_frac_ratio : float or None, optional\n2295         The allowed ratio of the width of the numerator to the width of the\n2296         denominator before the printer breaks off long fractions. If ``None``\n2297         (the default value), long fractions are not broken up.\n2298     mat_delim : string, optional\n2299         The delimiter to wrap around matrices. Can be one of ``[``, ``(``, or\n2300         the empty string. Defaults to ``[``.\n2301     mat_str : string, optional\n2302         Which matrix environment string to emit. ``smallmatrix``, ``matrix``,\n2303         ``array``, etc. Defaults to ``smallmatrix`` for inline mode, ``matrix``\n2304         for matrices of no more than 10 columns, and ``array`` otherwise.\n2305     mode: string, optional\n2306         Specifies how the generated code will be delimited. ``mode`` can be one\n2307         of ``plain``, ``inline``, ``equation`` or ``equation*``.  If ``mode``\n2308         is set to ``plain``, then the resulting code will not be delimited at\n2309         all (this is the default). If ``mode`` is set to ``inline`` then inline\n2310         LaTeX ``$...$`` will be used. If ``mode`` is set to ``equation`` or\n2311         ``equation*``, the resulting code will be enclosed in the ``equation``\n2312         or ``equation*`` environment (remember to import ``amsmath`` for\n2313         ``equation*``), unless the ``itex`` option is set. In the latter case,\n2314         the ``$$...$$`` syntax is used.\n2315     mul_symbol : string or None, optional\n2316         The symbol to use for multiplication. Can be one of ``None``, ``ldot``,\n2317         ``dot``, or ``times``.\n2318     order: string, optional\n2319         Any of the supported monomial orderings (currently ``lex``, ``grlex``,\n2320         or ``grevlex``), ``old``, and ``none``. This parameter does nothing for\n2321         Mul objects. Setting order to ``old`` uses the compatibility ordering\n2322         for Add defined in Printer. For very large expressions, set the\n2323         ``order`` keyword to ``none`` if speed is a concern.\n2324     symbol_names : dictionary of strings mapped to symbols, optional\n2325         Dictionary of symbols and the custom strings they should be emitted as.\n2326 \n2327     Notes\n2328     =====\n2329 \n2330     Not using a print statement for printing, results in double backslashes for\n2331     latex commands since that's the way Python escapes backslashes in strings.\n2332 \n2333     >>> from sympy import latex, Rational\n2334     >>> from sympy.abc import tau\n2335     >>> latex((2*tau)**Rational(7,2))\n2336     '8 \\\\sqrt{2} \\\\tau^{\\\\frac{7}{2}}'\n2337     >>> print(latex((2*tau)**Rational(7,2)))\n2338     8 \\sqrt{2} \\tau^{\\frac{7}{2}}\n2339 \n2340     Examples\n2341     ========\n2342 \n2343     >>> from sympy import latex, pi, sin, asin, Integral, Matrix, Rational, log\n2344     >>> from sympy.abc import x, y, mu, r, tau\n2345 \n2346     Basic usage:\n2347 \n2348     >>> print(latex((2*tau)**Rational(7,2)))\n2349     8 \\sqrt{2} \\tau^{\\frac{7}{2}}\n2350 \n2351     ``mode`` and ``itex`` options:\n2352 \n2353     >>> print(latex((2*mu)**Rational(7,2), mode='plain'))\n2354     8 \\sqrt{2} \\mu^{\\frac{7}{2}}\n2355     >>> print(latex((2*tau)**Rational(7,2), mode='inline'))\n2356     $8 \\sqrt{2} \\tau^{7 / 2}$\n2357     >>> print(latex((2*mu)**Rational(7,2), mode='equation*'))\n2358     \\begin{equation*}8 \\sqrt{2} \\mu^{\\frac{7}{2}}\\end{equation*}\n2359     >>> print(latex((2*mu)**Rational(7,2), mode='equation'))\n2360     \\begin{equation}8 \\sqrt{2} \\mu^{\\frac{7}{2}}\\end{equation}\n2361     >>> print(latex((2*mu)**Rational(7,2), mode='equation', itex=True))\n2362     $$8 \\sqrt{2} \\mu^{\\frac{7}{2}}$$\n2363     >>> print(latex((2*mu)**Rational(7,2), mode='plain'))\n2364     8 \\sqrt{2} \\mu^{\\frac{7}{2}}\n2365     >>> print(latex((2*tau)**Rational(7,2), mode='inline'))\n2366     $8 \\sqrt{2} \\tau^{7 / 2}$\n2367     >>> print(latex((2*mu)**Rational(7,2), mode='equation*'))\n2368     \\begin{equation*}8 \\sqrt{2} \\mu^{\\frac{7}{2}}\\end{equation*}\n2369     >>> print(latex((2*mu)**Rational(7,2), mode='equation'))\n2370     \\begin{equation}8 \\sqrt{2} \\mu^{\\frac{7}{2}}\\end{equation}\n2371     >>> print(latex((2*mu)**Rational(7,2), mode='equation', itex=True))\n2372     $$8 \\sqrt{2} \\mu^{\\frac{7}{2}}$$\n2373 \n2374     Fraction options:\n2375 \n2376     >>> print(latex((2*tau)**Rational(7,2), fold_frac_powers=True))\n2377     8 \\sqrt{2} \\tau^{7/2}\n2378     >>> print(latex((2*tau)**sin(Rational(7,2))))\n2379     \\left(2 \\tau\\right)^{\\sin{\\left (\\frac{7}{2} \\right )}}\n2380     >>> print(latex((2*tau)**sin(Rational(7,2)), fold_func_brackets=True))\n2381     \\left(2 \\tau\\right)^{\\sin {\\frac{7}{2}}}\n2382     >>> print(latex(3*x**2/y))\n2383     \\frac{3 x^{2}}{y}\n2384     >>> print(latex(3*x**2/y, fold_short_frac=True))\n2385     3 x^{2} / y\n2386     >>> print(latex(Integral(r, r)/2/pi, long_frac_ratio=2))\n2387     \\frac{\\int r\\, dr}{2 \\pi}\n2388     >>> print(latex(Integral(r, r)/2/pi, long_frac_ratio=0))\n2389     \\frac{1}{2 \\pi} \\int r\\, dr\n2390 \n2391     Multiplication options:\n2392 \n2393     >>> print(latex((2*tau)**sin(Rational(7,2)), mul_symbol=\"times\"))\n2394     \\left(2 \\times \\tau\\right)^{\\sin{\\left (\\frac{7}{2} \\right )}}\n2395 \n2396     Trig options:\n2397 \n2398     >>> print(latex(asin(Rational(7,2))))\n2399     \\operatorname{asin}{\\left (\\frac{7}{2} \\right )}\n2400     >>> print(latex(asin(Rational(7,2)), inv_trig_style=\"full\"))\n2401     \\arcsin{\\left (\\frac{7}{2} \\right )}\n2402     >>> print(latex(asin(Rational(7,2)), inv_trig_style=\"power\"))\n2403     \\sin^{-1}{\\left (\\frac{7}{2} \\right )}\n2404 \n2405     Matrix options:\n2406 \n2407     >>> print(latex(Matrix(2, 1, [x, y])))\n2408     \\left[\\begin{matrix}x\\\\y\\end{matrix}\\right]\n2409     >>> print(latex(Matrix(2, 1, [x, y]), mat_str = \"array\"))\n2410     \\left[\\begin{array}{c}x\\\\y\\end{array}\\right]\n2411     >>> print(latex(Matrix(2, 1, [x, y]), mat_delim=\"(\"))\n2412     \\left(\\begin{matrix}x\\\\y\\end{matrix}\\right)\n2413 \n2414     Custom printing of symbols:\n2415 \n2416     >>> print(latex(x**2, symbol_names={x: 'x_i'}))\n2417     x_i^{2}\n2418 \n2419     Logarithms:\n2420 \n2421     >>> print(latex(log(10)))\n2422     \\log{\\left (10 \\right )}\n2423     >>> print(latex(log(10), ln_notation=True))\n2424     \\ln{\\left (10 \\right )}\n2425 \n2426     ``latex()`` also supports the builtin container types list, tuple, and\n2427     dictionary.\n2428 \n2429     >>> print(latex([2/x, y], mode='inline'))\n2430     $\\left [ 2 / x, \\quad y\\right ]$\n2431 \n2432     \"\"\"\n2433     if symbol_names is None:\n2434         symbol_names = {}\n2435 \n2436     settings = {\n2437         'fold_frac_powers' : fold_frac_powers,\n2438         'fold_func_brackets' : fold_func_brackets,\n2439         'fold_short_frac' : fold_short_frac,\n2440         'inv_trig_style' : inv_trig_style,\n2441         'itex' : itex,\n2442         'ln_notation' : ln_notation,\n2443         'long_frac_ratio' : long_frac_ratio,\n2444         'mat_delim' : mat_delim,\n2445         'mat_str' : mat_str,\n2446         'mode' : mode,\n2447         'mul_symbol' : mul_symbol,\n2448         'order' : order,\n2449         'symbol_names' : symbol_names,\n2450     }\n2451 \n2452     return LatexPrinter(settings).doprint(expr)\n",
        "intended_behavior": "The `latex` method should correctly handle the output formatting in `equation` or `equation*` mode without wrapping it with additional `$$` symbols when it is unnecessary. The `mode` parameter's handling needs to ensure that when expressions are set to be displayed in these modes, they are treated as being in LaTeX math mode by default and thus do not require the additional `$$` wrapping. This adjustment should preserve the method's current functionality while fixing the LaTeX output issue when converting Jupyter notebooks to LaTeX or PDF formats. Specifically, the check surrounding the usage of `$$` (related to the `itex` flag or when setting the `mode`) should be refined to exclude cases where the expression is already meant to be in a math environment (`equation` or `equation*` modes). This ensures that the output LaTeX is valid and can be processed without errors by LaTeX compilers."
    }
]