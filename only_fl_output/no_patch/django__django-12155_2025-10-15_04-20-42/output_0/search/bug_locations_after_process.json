[
    {
        "rel_file_path": "django/contrib/admindocs/utils.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.1/django/contrib/admindocs/utils.py",
        "start": 27,
        "end": 39,
        "class_name": null,
        "method_name": "trim_docstring",
        "code": "27 def trim_docstring(docstring):\n28     \"\"\"\n29     Uniformly trim leading/trailing whitespace from docstrings.\n30 \n31     Based on https://www.python.org/dev/peps/pep-0257/#handling-docstring-indentation\n32     \"\"\"\n33     if not docstring or not docstring.strip():\n34         return ''\n35     # Convert tabs to spaces and split into lines\n36     lines = docstring.expandtabs().splitlines()\n37     indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())\n38     trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]\n39     return \"\\n\".join(trimmed).strip()\n",
        "intended_behavior": "The `trim_docstring` method should preserve its functionality of uniformly trimming leading/trailing whitespace from docstrings. However, to resolve the issue, it should adjust the way it calculates indentation to exclude the first line from the indentation calculation. This ensures that docstrings with text starting from the first line are handled correctly. The intended behavior is to modify the `indent` calculation line to:\n```python\nindent = min(len(line) - len(line.lstrip()) for line in lines[1:] if line.lstrip())\n```\nThis change will calculate the minimum indentation level based on lines other than the first, addressing the issue while maintaining the method's overall purpose of trimming docstring indentation uniformly."
    }
]