Structured column serialization round-trip fails with field name of "name"
<!-- This comments are hidden when you submit the issue,
so you do not need to remove them! -->

<!-- Please be sure to check out our contributing guidelines,
https://github.com/astropy/astropy/blob/main/CONTRIBUTING.md .
Please be sure to check out our code of conduct,
https://github.com/astropy/astropy/blob/main/CODE_OF_CONDUCT.md . -->

<!-- Please have a search on our GitHub repository to see if a similar
issue has already been posted.
If a similar issue is closed, have a quick look to see if you are satisfied
by the resolution.
If not please go ahead and open an issue! -->

<!-- Please check that the development version still produces the same bug.
You can install development version with
pip install git+https://github.com/astropy/astropy
command. -->

### Description
<!-- Provide a general description of the bug. -->
A structured column with a field name of `name` cannot be round-tripped through ECSV. Along with #13231 this suggests a tweak to the serialization format is needed. Perhaps:

```
#       data: !astropy.table.SerializedColumn
#         - {name:z:, data:!astropy.table.SerializedColumn {name: c.z}}
#         - {name:name, data:!astropy.table.SerializedColumn {name: c.name}}
#         - {name:y, data:!astropy.table.SerializedColumn {name: c.y}}
```
cc: @mhvk 

### Expected behavior
<!-- What did you expect to happen. -->
It should work!

### Steps to Reproduce
<!-- Ideally a code example could be provided so we can run it ourselves. -->
<!-- If you are pasting code, use triple backticks (```) around
your code snippet. -->
<!-- If necessary, sanitize your screen output to be pasted so you do not
reveal secrets like tokens and passwords. -->

Code:
```python
import io
import numpy as np
from astropy.table import Table, Column
dtype = np.dtype([('z', 'f8'), ('name', 'f8'), ('y', 'i4')])
t = Table()
t['c'] = Column([(1, 2, 3), (4, 5, 6)], dtype=dtype)
out = io.StringIO()
t.write(out, format='ascii.ecsv')
print(out.getvalue())
t2 = Table.read(out.getvalue(), format='ascii.ecsv')
```
Output:
```
# %ECSV 1.0
# ---
# datatype:
# - {name: c.z, datatype: float64}
# - {name: c.name, datatype: float64}
# - {name: c.y, datatype: int32}
# meta: !!omap
# - __serialized_columns__:
#     c:
#       __class__: astropy.table.column.Column
#       data: !astropy.table.SerializedColumn
#         name: !astropy.table.SerializedColumn {name: c.name}
#         y: !astropy.table.SerializedColumn {name: c.y}
#         z: !astropy.table.SerializedColumn {name: c.z}
# schema: astropy-2.0
c.z c.name c.y
1.0 2.0 3
4.0 5.0 6

Traceback (most recent call last):
  File ~/git/astropy/go2.py:10 in <module>
    t2 = Table.read(out.getvalue(), format='ascii.ecsv')
  File ~/git/astropy/astropy/table/connect.py:62 in __call__
    out = self.registry.read(cls, *args, **kwargs)
  File ~/git/astropy/astropy/io/registry/core.py:212 in read
    data = reader(*args, **kwargs)
  File ~/git/astropy/astropy/io/ascii/connect.py:18 in io_read
    return read(filename, **kwargs)
  File ~/git/astropy/astropy/io/ascii/ui.py:396 in read
    dat = reader.read(table)
  File ~/git/astropy/astropy/io/ascii/core.py:1403 in read
    table = self.outputter(self.header.cols, self.meta)
  File ~/git/astropy/astropy/io/ascii/ecsv.py:232 in __call__
    out = serialize._construct_mixins_from_columns(out)
  File ~/git/astropy/astropy/table/serialize.py:398 in _construct_mixins_from_columns
    _construct_mixin_from_columns(new_name, obj_attrs, out)
  File ~/git/astropy/astropy/table/serialize.py:346 in _construct_mixin_from_columns
    data_attrs_map[val['name']] = name
TypeError: unhashable type: 'SerializedColumn'
```

### System Details
<!-- Even if you do not think this is necessary, it is useful information for the maintainers.
Please run the following snippet and paste the output below:
import platform; print(platform.platform())
import sys; print("Python", sys.version)
import numpy; print("Numpy", numpy.__version__)
import erfa; print("pyerfa", erfa.__version__)
import astropy; print("astropy", astropy.__version__)
import scipy; print("Scipy", scipy.__version__)
import matplotlib; print("Matplotlib", matplotlib.__version__)
-->
```
macOS-10.16-x86_64-i386-64bit
Python 3.8.12 (default, Oct 12 2021, 06:23:56) 
[Clang 10.0.0 ]
Numpy 1.22.2
pyerfa 2.0.0.1
astropy 5.1.dev956+g1d10de9d45.d20220422
Scipy 1.8.0
Matplotlib 3.5.1
```

