[
    {
        "rel_file_path": "astropy/stats/biweight.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/astropy__astropy/setup_astropy__astropy__1.3/astropy/stats/biweight.py",
        "start": 19,
        "end": 114,
        "class_name": null,
        "method_name": "biweight_location",
        "code": "19 def biweight_location(data, c=6.0, M=None, axis=None):\n20     r\"\"\"\n21     Compute the biweight location.\n22 \n23     The biweight location is a robust statistic for determining the\n24     central location of a distribution.  It is given by:\n25 \n26     .. math::\n27 \n28         \\zeta_{biloc}= M + \\frac{\\Sigma_{|u_i|<1} \\ (x_i - M) (1 - u_i^2)^2}\n29             {\\Sigma_{|u_i|<1} \\ (1 - u_i^2)^2}\n30 \n31     where :math:`x` is the input data, :math:`M` is the sample median\n32     (or the input initial location guess) and :math:`u_i` is given by:\n33 \n34     .. math::\n35 \n36         u_{i} = \\frac{(x_i - M)}{c * MAD}\n37 \n38     where :math:`c` is the tuning constant and :math:`MAD` is the\n39     `median absolute deviation\n40     <https://en.wikipedia.org/wiki/Median_absolute_deviation>`_.  The\n41     biweight location tuning constant ``c`` is typically 6.0 (the\n42     default).\n43 \n44     Parameters\n45     ----------\n46     data : array-like\n47         Input array or object that can be converted to an array.\n48     c : float, optional\n49         Tuning constant for the biweight estimator (default = 6.0).\n50     M : float or array-like, optional\n51         Initial guess for the location.  If ``M`` is a scalar value,\n52         then its value will be used for the entire array (or along each\n53         ``axis``, if specified).  If ``M`` is an array, then its must be\n54         an array containing the initial location estimate along each\n55         ``axis`` of the input array.  If `None` (default), then the\n56         median of the input array will be used (or along each ``axis``,\n57         if specified).\n58     axis : int, optional\n59         The axis along which the biweight locations are computed.  If\n60         `None` (default), then the biweight location of the flattened\n61         input array will be computed.\n62 \n63     Returns\n64     -------\n65     biweight_location : float or `~numpy.ndarray`\n66         The biweight location of the input data.  If ``axis`` is `None`\n67         then a scalar will be returned, otherwise a `~numpy.ndarray`\n68         will be returned.\n69 \n70     See Also\n71     --------\n72     biweight_scale, biweight_midvariance, biweight_midcovariance\n73 \n74     References\n75     ----------\n76     .. [1] Beers, Flynn, and Gebhardt (1990; AJ 100, 32) (http://adsabs.harvard.edu/abs/1990AJ....100...32B)\n77 \n78     .. [2] http://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/biwloc.htm\n79 \n80     Examples\n81     --------\n82     Generate random variates from a Gaussian distribution and return the\n83     biweight location of the distribution:\n84 \n85     >>> import numpy as np\n86     >>> from astropy.stats import biweight_location\n87     >>> rand = np.random.RandomState(12345)\n88     >>> biloc = biweight_location(rand.randn(1000))\n89     >>> print(biloc)    # doctest: +FLOAT_CMP\n90     -0.0175741540445\n91     \"\"\"\n92 \n93     data = np.asanyarray(data).astype(np.float64)\n94 \n95     if M is None:\n96         M = np.median(data, axis=axis)\n97     if axis is not None:\n98         M = np.expand_dims(M, axis=axis)\n99 \n100     # set up the differences\n101     d = data - M\n102 \n103     # set up the weighting\n104     mad = median_absolute_deviation(data, axis=axis)\n105     if axis is not None:\n106         mad = np.expand_dims(mad, axis=axis)\n107     u = d / (c * mad)\n108 \n109     # now remove the outlier points\n110     mask = (np.abs(u) >= 1)\n111     u = (1 - u ** 2) ** 2\n112     u[mask] = 0\n113 \n114     return M.squeeze() + (d * u).sum(axis=axis) / u.sum(axis=axis)\n",
        "intended_behavior": "The `biweight_location` function needs to be modified to explicitly handle the scenario where the median absolute deviation (MAD) calculates to zero. This situation indicates that all data points are identical (or there is insufficient variation to calculate a meaningful biweight location), and therefore, the function should return the median of the data directly, bypassing any further calculations that involve division by zero. This adjustment ensures that the function returns a meaningful and accurate measure of central tendency, even for data with zero variance, thereby preserving the expected behavior of the function in such edge cases."
    }
]