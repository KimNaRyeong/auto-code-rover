[
    {
        "rel_file_path": "testing/test_config.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/pytest-dev__pytest/setup_pytest-dev__pytest__8.0/testing/test_config.py",
        "start": 1,
        "end": 2172,
        "class_name": null,
        "method_name": null,
        "code": "1 import dataclasses\n2 import importlib.metadata\n3 import os\n4 import re\n5 import sys\n6 import textwrap\n7 from pathlib import Path\n8 from typing import Dict\n9 from typing import List\n10 from typing import Sequence\n11 from typing import Tuple\n12 from typing import Type\n13 from typing import Union\n14 \n15 import _pytest._code\n16 import pytest\n17 from _pytest.config import _get_plugin_specs_as_list\n18 from _pytest.config import _iter_rewritable_modules\n19 from _pytest.config import _strtobool\n20 from _pytest.config import Config\n21 from _pytest.config import ConftestImportFailure\n22 from _pytest.config import ExitCode\n23 from _pytest.config import parse_warning_filter\n24 from _pytest.config.exceptions import UsageError\n25 from _pytest.config.findpaths import determine_setup\n26 from _pytest.config.findpaths import get_common_ancestor\n27 from _pytest.config.findpaths import locate_config\n28 from _pytest.monkeypatch import MonkeyPatch\n29 from _pytest.pathlib import absolutepath\n30 from _pytest.pytester import Pytester\n31 \n32 \n33 class TestParseIni:\n34     @pytest.mark.parametrize(\n35         \"section, filename\", [(\"pytest\", \"pytest.ini\"), (\"tool:pytest\", \"setup.cfg\")]\n36     )\n37     def test_getcfg_and_config(\n38         self,\n39         pytester: Pytester,\n40         tmp_path: Path,\n41         section: str,\n42         filename: str,\n43         monkeypatch: MonkeyPatch,\n44     ) -> None:\n45         sub = tmp_path / \"sub\"\n46         sub.mkdir()\n47         monkeypatch.chdir(sub)\n48         (tmp_path / filename).write_text(\n49             textwrap.dedent(\n50                 \"\"\"\\\n51                 [{section}]\n52                 name = value\n53                 \"\"\".format(\n54                     section=section\n55                 )\n56             ),\n57             encoding=\"utf-8\",\n58         )\n59         _, _, cfg = locate_config([sub])\n60         assert cfg[\"name\"] == \"value\"\n61         config = pytester.parseconfigure(str(sub))\n62         assert config.inicfg[\"name\"] == \"value\"\n63 \n64     def test_setupcfg_uses_toolpytest_with_pytest(self, pytester: Pytester) -> None:\n65         p1 = pytester.makepyfile(\"def test(): pass\")\n66         pytester.makefile(\n67             \".cfg\",\n68             setup=\"\"\"\n69                 [tool:pytest]\n70                 testpaths=%s\n71                 [pytest]\n72                 testpaths=ignored\n73         \"\"\"\n74             % p1.name,\n75         )\n76         result = pytester.runpytest()\n77         result.stdout.fnmatch_lines([\"configfile: setup.cfg\", \"* 1 passed in *\"])\n78         assert result.ret == 0\n79 \n80     def test_append_parse_args(\n81         self, pytester: Pytester, tmp_path: Path, monkeypatch: MonkeyPatch\n82     ) -> None:\n83         monkeypatch.setenv(\"PYTEST_ADDOPTS\", '--color no -rs --tb=\"short\"')\n84         tmp_path.joinpath(\"pytest.ini\").write_text(\n85             textwrap.dedent(\n86                 \"\"\"\\\n87                 [pytest]\n88                 addopts = --verbose\n89                 \"\"\"\n90             ),\n91             encoding=\"utf-8\",\n92         )\n93         config = pytester.parseconfig(tmp_path)\n94         assert config.option.color == \"no\"\n95         assert config.option.reportchars == \"s\"\n96         assert config.option.tbstyle == \"short\"\n97         assert config.option.verbose\n98 \n99     def test_tox_ini_wrong_version(self, pytester: Pytester) -> None:\n100         pytester.makefile(\n101             \".ini\",\n102             tox=\"\"\"\n103             [pytest]\n104             minversion=999.0\n105         \"\"\",\n106         )\n107         result = pytester.runpytest()\n108         assert result.ret != 0\n109         result.stderr.fnmatch_lines(\n110             [\"*tox.ini: 'minversion' requires pytest-999.0, actual pytest-*\"]\n111         )\n112 \n113     @pytest.mark.parametrize(\n114         \"section, name\",\n115         [\n116             (\"tool:pytest\", \"setup.cfg\"),\n117             (\"pytest\", \"tox.ini\"),\n118             (\"pytest\", \"pytest.ini\"),\n119             (\"pytest\", \".pytest.ini\"),\n120         ],\n121     )\n122     def test_ini_names(self, pytester: Pytester, name, section) -> None:\n123         pytester.path.joinpath(name).write_text(\n124             textwrap.dedent(\n125                 \"\"\"\n126             [{section}]\n127             minversion = 3.36\n128         \"\"\".format(\n129                     section=section\n130                 )\n131             ),\n132             encoding=\"utf-8\",\n133         )\n134         config = pytester.parseconfig()\n135         assert config.getini(\"minversion\") == \"3.36\"\n136 \n137     def test_pyproject_toml(self, pytester: Pytester) -> None:\n138         pytester.makepyprojecttoml(\n139             \"\"\"\n140             [tool.pytest.ini_options]\n141             minversion = \"1.0\"\n142         \"\"\"\n143         )\n144         config = pytester.parseconfig()\n145         assert config.getini(\"minversion\") == \"1.0\"\n146 \n147     def test_toxini_before_lower_pytestini(self, pytester: Pytester) -> None:\n148         sub = pytester.mkdir(\"sub\")\n149         sub.joinpath(\"tox.ini\").write_text(\n150             textwrap.dedent(\n151                 \"\"\"\n152             [pytest]\n153             minversion = 2.0\n154         \"\"\"\n155             ),\n156             encoding=\"utf-8\",\n157         )\n158         pytester.path.joinpath(\"pytest.ini\").write_text(\n159             textwrap.dedent(\n160                 \"\"\"\n161             [pytest]\n162             minversion = 1.5\n163         \"\"\"\n164             ),\n165             encoding=\"utf-8\",\n166         )\n167         config = pytester.parseconfigure(sub)\n168         assert config.getini(\"minversion\") == \"2.0\"\n169 \n170     def test_ini_parse_error(self, pytester: Pytester) -> None:\n171         pytester.path.joinpath(\"pytest.ini\").write_text(\n172             \"addopts = -x\", encoding=\"utf-8\"\n173         )\n174         result = pytester.runpytest()\n175         assert result.ret != 0\n176         result.stderr.fnmatch_lines(\"ERROR: *pytest.ini:1: no section header defined\")\n177 \n178     def test_toml_parse_error(self, pytester: Pytester) -> None:\n179         pytester.makepyprojecttoml(\n180             \"\"\"\n181             \\\\\"\n182             \"\"\"\n183         )\n184         result = pytester.runpytest()\n185         assert result.ret != 0\n186         result.stderr.fnmatch_lines(\"ERROR: *pyproject.toml: Invalid statement*\")\n187 \n188     def test_confcutdir_default_without_configfile(self, pytester: Pytester) -> None:\n189         # If --confcutdir is not specified, and there is no configfile, default\n190         # to the roothpath.\n191         sub = pytester.mkdir(\"sub\")\n192         os.chdir(sub)\n193         config = pytester.parseconfigure()\n194         assert config.pluginmanager._confcutdir == sub\n195 \n196     def test_confcutdir_default_with_configfile(self, pytester: Pytester) -> None:\n197         # If --confcutdir is not specified, and there is a configfile, default\n198         # to the configfile's directory.\n199         pytester.makeini(\"[pytest]\")\n200         sub = pytester.mkdir(\"sub\")\n201         os.chdir(sub)\n202         config = pytester.parseconfigure()\n203         assert config.pluginmanager._confcutdir == pytester.path\n204 \n205     @pytest.mark.xfail(reason=\"probably not needed\")\n206     def test_confcutdir(self, pytester: Pytester) -> None:\n207         sub = pytester.mkdir(\"sub\")\n208         os.chdir(sub)\n209         pytester.makeini(\n210             \"\"\"\n211             [pytest]\n212             addopts = --qwe\n213         \"\"\"\n214         )\n215         result = pytester.inline_run(\"--confcutdir=.\")\n216         assert result.ret == 0\n217 \n218     @pytest.mark.parametrize(\n219         \"ini_file_text, invalid_keys, warning_output, exception_text\",\n220         [\n221             pytest.param(\n222                 \"\"\"\n223                 [pytest]\n224                 unknown_ini = value1\n225                 another_unknown_ini = value2\n226                 \"\"\",\n227                 [\"unknown_ini\", \"another_unknown_ini\"],\n228                 [\n229                     \"=*= warnings summary =*=\",\n230                     \"*PytestConfigWarning:*Unknown config option: another_unknown_ini\",\n231                     \"*PytestConfigWarning:*Unknown config option: unknown_ini\",\n232                 ],\n233                 \"Unknown config option: another_unknown_ini\",\n234                 id=\"2-unknowns\",\n235             ),\n236             pytest.param(\n237                 \"\"\"\n238                 [pytest]\n239                 unknown_ini = value1\n240                 minversion = 5.0.0\n241                 \"\"\",\n242                 [\"unknown_ini\"],\n243                 [\n244                     \"=*= warnings summary =*=\",\n245                     \"*PytestConfigWarning:*Unknown config option: unknown_ini\",\n246                 ],\n247                 \"Unknown config option: unknown_ini\",\n248                 id=\"1-unknown\",\n249             ),\n250             pytest.param(\n251                 \"\"\"\n252                 [some_other_header]\n253                 unknown_ini = value1\n254                 [pytest]\n255                 minversion = 5.0.0\n256                 \"\"\",\n257                 [],\n258                 [],\n259                 \"\",\n260                 id=\"unknown-in-other-header\",\n261             ),\n262             pytest.param(\n263                 \"\"\"\n264                 [pytest]\n265                 minversion = 5.0.0\n266                 \"\"\",\n267                 [],\n268                 [],\n269                 \"\",\n270                 id=\"no-unknowns\",\n271             ),\n272             pytest.param(\n273                 \"\"\"\n274                 [pytest]\n275                 conftest_ini_key = 1\n276                 \"\"\",\n277                 [],\n278                 [],\n279                 \"\",\n280                 id=\"1-known\",\n281             ),\n282         ],\n283     )\n284     @pytest.mark.filterwarnings(\"default\")\n285     def test_invalid_config_options(\n286         self,\n287         pytester: Pytester,\n288         ini_file_text,\n289         invalid_keys,\n290         warning_output,\n291         exception_text,\n292     ) -> None:\n293         pytester.makeconftest(\n294             \"\"\"\n295             def pytest_addoption(parser):\n296                 parser.addini(\"conftest_ini_key\", \"\")\n297             \"\"\"\n298         )\n299         pytester.makepyfile(\"def test(): pass\")\n300         pytester.makeini(ini_file_text)\n301 \n302         config = pytester.parseconfig()\n303         assert sorted(config._get_unknown_ini_keys()) == sorted(invalid_keys)\n304 \n305         result = pytester.runpytest()\n306         result.stdout.fnmatch_lines(warning_output)\n307 \n308         result = pytester.runpytest(\"--strict-config\")\n309         if exception_text:\n310             result.stderr.fnmatch_lines(\"ERROR: \" + exception_text)\n311             assert result.ret == pytest.ExitCode.USAGE_ERROR\n312         else:\n313             result.stderr.no_fnmatch_line(exception_text)\n314             assert result.ret == pytest.ExitCode.OK\n315 \n316     @pytest.mark.filterwarnings(\"default\")\n317     def test_silence_unknown_key_warning(self, pytester: Pytester) -> None:\n318         \"\"\"Unknown config key warnings can be silenced using filterwarnings (#7620)\"\"\"\n319         pytester.makeini(\n320             \"\"\"\n321             [pytest]\n322             filterwarnings =\n323                 ignore:Unknown config option:pytest.PytestConfigWarning\n324             foobar=1\n325         \"\"\"\n326         )\n327         result = pytester.runpytest()\n328         result.stdout.no_fnmatch_line(\"*PytestConfigWarning*\")\n329 \n330     @pytest.mark.filterwarnings(\"default::pytest.PytestConfigWarning\")\n331     def test_disable_warnings_plugin_disables_config_warnings(\n332         self, pytester: Pytester\n333     ) -> None:\n334         \"\"\"Disabling 'warnings' plugin also disables config time warnings\"\"\"\n335         pytester.makeconftest(\n336             \"\"\"\n337             import pytest\n338             def pytest_configure(config):\n339                 config.issue_config_time_warning(\n340                     pytest.PytestConfigWarning(\"custom config warning\"),\n341                     stacklevel=2,\n342                 )\n343         \"\"\"\n344         )\n345         result = pytester.runpytest(\"-pno:warnings\")\n346         result.stdout.no_fnmatch_line(\"*PytestConfigWarning*\")\n347 \n348     @pytest.mark.parametrize(\n349         \"ini_file_text, plugin_version, exception_text\",\n350         [\n351             pytest.param(\n352                 \"\"\"\n353                 [pytest]\n354                 required_plugins = a z\n355                 \"\"\",\n356                 \"1.5\",\n357                 \"Missing required plugins: a, z\",\n358                 id=\"2-missing\",\n359             ),\n360             pytest.param(\n361                 \"\"\"\n362                 [pytest]\n363                 required_plugins = a z myplugin\n364                 \"\"\",\n365                 \"1.5\",\n366                 \"Missing required plugins: a, z\",\n367                 id=\"2-missing-1-ok\",\n368             ),\n369             pytest.param(\n370                 \"\"\"\n371                 [pytest]\n372                 required_plugins = myplugin\n373                 \"\"\",\n374                 \"1.5\",\n375                 None,\n376                 id=\"1-ok\",\n377             ),\n378             pytest.param(\n379                 \"\"\"\n380                 [pytest]\n381                 required_plugins = myplugin==1.5\n382                 \"\"\",\n383                 \"1.5\",\n384                 None,\n385                 id=\"1-ok-pin-exact\",\n386             ),\n387             pytest.param(\n388                 \"\"\"\n389                 [pytest]\n390                 required_plugins = myplugin>1.0,<2.0\n391                 \"\"\",\n392                 \"1.5\",\n393                 None,\n394                 id=\"1-ok-pin-loose\",\n395             ),\n396             pytest.param(\n397                 \"\"\"\n398                 [pytest]\n399                 required_plugins = myplugin\n400                 \"\"\",\n401                 \"1.5a1\",\n402                 None,\n403                 id=\"1-ok-prerelease\",\n404             ),\n405             pytest.param(\n406                 \"\"\"\n407                 [pytest]\n408                 required_plugins = myplugin==1.6\n409                 \"\"\",\n410                 \"1.5\",\n411                 \"Missing required plugins: myplugin==1.6\",\n412                 id=\"missing-version\",\n413             ),\n414             pytest.param(\n415                 \"\"\"\n416                 [pytest]\n417                 required_plugins = myplugin==1.6 other==1.0\n418                 \"\"\",\n419                 \"1.5\",\n420                 \"Missing required plugins: myplugin==1.6, other==1.0\",\n421                 id=\"missing-versions\",\n422             ),\n423             pytest.param(\n424                 \"\"\"\n425                 [some_other_header]\n426                 required_plugins = won't be triggered\n427                 [pytest]\n428                 \"\"\",\n429                 \"1.5\",\n430                 None,\n431                 id=\"invalid-header\",\n432             ),\n433         ],\n434     )\n435     def test_missing_required_plugins(\n436         self,\n437         pytester: Pytester,\n438         monkeypatch: MonkeyPatch,\n439         ini_file_text: str,\n440         plugin_version: str,\n441         exception_text: str,\n442     ) -> None:\n443         \"\"\"Check 'required_plugins' option with various settings.\n444 \n445         This test installs a mock \"myplugin-1.5\" which is used in the parametrized test cases.\n446         \"\"\"\n447 \n448         @dataclasses.dataclass\n449         class DummyEntryPoint:\n450             name: str\n451             module: str\n452             group: str = \"pytest11\"\n453 \n454             def load(self):\n455                 __import__(self.module)\n456                 return sys.modules[self.module]\n457 \n458         entry_points = [\n459             DummyEntryPoint(\"myplugin1\", \"myplugin1_module\"),\n460         ]\n461 \n462         @dataclasses.dataclass\n463         class DummyDist:\n464             entry_points: object\n465             files: object = ()\n466             version: str = plugin_version\n467 \n468             @property\n469             def metadata(self):\n470                 return {\"name\": \"myplugin\"}\n471 \n472         def my_dists():\n473             return [DummyDist(entry_points)]\n474 \n475         pytester.makepyfile(myplugin1_module=\"# my plugin module\")\n476         pytester.syspathinsert()\n477 \n478         monkeypatch.setattr(importlib.metadata, \"distributions\", my_dists)\n479         monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", raising=False)\n480 \n481         pytester.makeini(ini_file_text)\n482 \n483         if exception_text:\n484             with pytest.raises(pytest.UsageError, match=exception_text):\n485                 pytester.parseconfig()\n486         else:\n487             pytester.parseconfig()\n488 \n489     def test_early_config_cmdline(\n490         self, pytester: Pytester, monkeypatch: MonkeyPatch\n491     ) -> None:\n492         \"\"\"early_config contains options registered by third-party plugins.\n493 \n494         This is a regression involving pytest-cov (and possibly others) introduced in #7700.\n495         \"\"\"\n496         pytester.makepyfile(\n497             myplugin=\"\"\"\n498             def pytest_addoption(parser):\n499                 parser.addoption('--foo', default=None, dest='foo')\n500 \n501             def pytest_load_initial_conftests(early_config, parser, args):\n502                 assert early_config.known_args_namespace.foo == \"1\"\n503             \"\"\"\n504         )\n505         monkeypatch.setenv(\"PYTEST_PLUGINS\", \"myplugin\")\n506         pytester.syspathinsert()\n507         result = pytester.runpytest(\"--foo=1\")\n508         result.stdout.fnmatch_lines(\"* no tests ran in *\")\n509 \n510 \n511 class TestConfigCmdlineParsing:\n512     def test_parsing_again_fails(self, pytester: Pytester) -> None:\n513         config = pytester.parseconfig()\n514         pytest.raises(AssertionError, lambda: config.parse([]))\n515 \n516     def test_explicitly_specified_config_file_is_loaded(\n517         self, pytester: Pytester\n518     ) -> None:\n519         pytester.makeconftest(\n520             \"\"\"\n521             def pytest_addoption(parser):\n522                 parser.addini(\"custom\", \"\")\n523         \"\"\"\n524         )\n525         pytester.makeini(\n526             \"\"\"\n527             [pytest]\n528             custom = 0\n529         \"\"\"\n530         )\n531         pytester.makefile(\n532             \".ini\",\n533             custom=\"\"\"\n534             [pytest]\n535             custom = 1\n536         \"\"\",\n537         )\n538         config = pytester.parseconfig(\"-c\", \"custom.ini\")\n539         assert config.getini(\"custom\") == \"1\"\n540         config = pytester.parseconfig(\"--config-file\", \"custom.ini\")\n541         assert config.getini(\"custom\") == \"1\"\n542 \n543         pytester.makefile(\n544             \".cfg\",\n545             custom_tool_pytest_section=\"\"\"\n546             [tool:pytest]\n547             custom = 1\n548         \"\"\",\n549         )\n550         config = pytester.parseconfig(\"-c\", \"custom_tool_pytest_section.cfg\")\n551         assert config.getini(\"custom\") == \"1\"\n552         config = pytester.parseconfig(\"--config-file\", \"custom_tool_pytest_section.cfg\")\n553         assert config.getini(\"custom\") == \"1\"\n554 \n555         pytester.makefile(\n556             \".toml\",\n557             custom=\"\"\"\n558                 [tool.pytest.ini_options]\n559                 custom = 1\n560                 value = [\n561                 ]  # this is here on purpose, as it makes this an invalid '.ini' file\n562             \"\"\",\n563         )\n564         config = pytester.parseconfig(\"-c\", \"custom.toml\")\n565         assert config.getini(\"custom\") == \"1\"\n566         config = pytester.parseconfig(\"--config-file\", \"custom.toml\")\n567         assert config.getini(\"custom\") == \"1\"\n568 \n569     def test_absolute_win32_path(self, pytester: Pytester) -> None:\n570         temp_ini_file = pytester.makefile(\n571             \".ini\",\n572             custom=\"\"\"\n573             [pytest]\n574             addopts = --version\n575         \"\"\",\n576         )\n577         from os.path import normpath\n578 \n579         temp_ini_file_norm = normpath(str(temp_ini_file))\n580         ret = pytest.main([\"-c\", temp_ini_file_norm])\n581         assert ret == ExitCode.OK\n582         ret = pytest.main([\"--config-file\", temp_ini_file_norm])\n583         assert ret == ExitCode.OK\n584 \n585 \n586 class TestConfigAPI:\n587     def test_config_trace(self, pytester: Pytester) -> None:\n588         config = pytester.parseconfig()\n589         values: List[str] = []\n590         config.trace.root.setwriter(values.append)\n591         config.trace(\"hello\")\n592         assert len(values) == 1\n593         assert values[0] == \"hello [config]\\n\"\n594 \n595     def test_config_getoption(self, pytester: Pytester) -> None:\n596         pytester.makeconftest(\n597             \"\"\"\n598             def pytest_addoption(parser):\n599                 parser.addoption(\"--hello\", \"-X\", dest=\"hello\")\n600         \"\"\"\n601         )\n602         config = pytester.parseconfig(\"--hello=this\")\n603         for x in (\"hello\", \"--hello\", \"-X\"):\n604             assert config.getoption(x) == \"this\"\n605         pytest.raises(ValueError, config.getoption, \"qweqwe\")\n606 \n607     def test_config_getoption_unicode(self, pytester: Pytester) -> None:\n608         pytester.makeconftest(\n609             \"\"\"\n610             def pytest_addoption(parser):\n611                 parser.addoption('--hello', type=str)\n612         \"\"\"\n613         )\n614         config = pytester.parseconfig(\"--hello=this\")\n615         assert config.getoption(\"hello\") == \"this\"\n616 \n617     def test_config_getvalueorskip(self, pytester: Pytester) -> None:\n618         config = pytester.parseconfig()\n619         pytest.raises(pytest.skip.Exception, config.getvalueorskip, \"hello\")\n620         verbose = config.getvalueorskip(\"verbose\")\n621         assert verbose == config.option.verbose\n622 \n623     def test_config_getvalueorskip_None(self, pytester: Pytester) -> None:\n624         pytester.makeconftest(\n625             \"\"\"\n626             def pytest_addoption(parser):\n627                 parser.addoption(\"--hello\")\n628         \"\"\"\n629         )\n630         config = pytester.parseconfig()\n631         with pytest.raises(pytest.skip.Exception):\n632             config.getvalueorskip(\"hello\")\n633 \n634     def test_getoption(self, pytester: Pytester) -> None:\n635         config = pytester.parseconfig()\n636         with pytest.raises(ValueError):\n637             config.getvalue(\"x\")\n638         assert config.getoption(\"x\", 1) == 1\n639 \n640     def test_getconftest_pathlist(self, pytester: Pytester, tmp_path: Path) -> None:\n641         somepath = tmp_path.joinpath(\"x\", \"y\", \"z\")\n642         p = tmp_path.joinpath(\"conftest.py\")\n643         p.write_text(f\"mylist = {['.', str(somepath)]}\", encoding=\"utf-8\")\n644         config = pytester.parseconfigure(p)\n645         assert (\n646             config._getconftest_pathlist(\"notexist\", path=tmp_path, rootpath=tmp_path)\n647             is None\n648         )\n649         pl = (\n650             config._getconftest_pathlist(\"mylist\", path=tmp_path, rootpath=tmp_path)\n651             or []\n652         )\n653         print(pl)\n654         assert len(pl) == 2\n655         assert pl[0] == tmp_path\n656         assert pl[1] == somepath\n657 \n658     @pytest.mark.parametrize(\"maybe_type\", [\"not passed\", \"None\", '\"string\"'])\n659     def test_addini(self, pytester: Pytester, maybe_type: str) -> None:\n660         if maybe_type == \"not passed\":\n661             type_string = \"\"\n662         else:\n663             type_string = f\", {maybe_type}\"\n664 \n665         pytester.makeconftest(\n666             f\"\"\"\n667             def pytest_addoption(parser):\n668                 parser.addini(\"myname\", \"my new ini value\"{type_string})\n669         \"\"\"\n670         )\n671         pytester.makeini(\n672             \"\"\"\n673             [pytest]\n674             myname=hello\n675         \"\"\"\n676         )\n677         config = pytester.parseconfig()\n678         val = config.getini(\"myname\")\n679         assert val == \"hello\"\n680         pytest.raises(ValueError, config.getini, \"other\")\n681 \n682     @pytest.mark.parametrize(\"config_type\", [\"ini\", \"pyproject\"])\n683     def test_addini_paths(self, pytester: Pytester, config_type: str) -> None:\n684         pytester.makeconftest(\n685             \"\"\"\n686             def pytest_addoption(parser):\n687                 parser.addini(\"paths\", \"my new ini value\", type=\"paths\")\n688                 parser.addini(\"abc\", \"abc value\")\n689         \"\"\"\n690         )\n691         if config_type == \"ini\":\n692             inipath = pytester.makeini(\n693                 \"\"\"\n694                 [pytest]\n695                 paths=hello world/sub.py\n696             \"\"\"\n697             )\n698         elif config_type == \"pyproject\":\n699             inipath = pytester.makepyprojecttoml(\n700                 \"\"\"\n701                 [tool.pytest.ini_options]\n702                 paths=[\"hello\", \"world/sub.py\"]\n703             \"\"\"\n704             )\n705         config = pytester.parseconfig()\n706         values = config.getini(\"paths\")\n707         assert len(values) == 2\n708         assert values[0] == inipath.parent.joinpath(\"hello\")\n709         assert values[1] == inipath.parent.joinpath(\"world/sub.py\")\n710         pytest.raises(ValueError, config.getini, \"other\")\n711 \n712     def make_conftest_for_args(self, pytester: Pytester) -> None:\n713         pytester.makeconftest(\n714             \"\"\"\n715             def pytest_addoption(parser):\n716                 parser.addini(\"args\", \"new args\", type=\"args\")\n717                 parser.addini(\"a2\", \"\", \"args\", default=\"1 2 3\".split())\n718         \"\"\"\n719         )\n720 \n721     def test_addini_args_ini_files(self, pytester: Pytester) -> None:\n722         self.make_conftest_for_args(pytester)\n723         pytester.makeini(\n724             \"\"\"\n725             [pytest]\n726             args=123 \"123 hello\" \"this\"\n727             \"\"\"\n728         )\n729         self.check_config_args(pytester)\n730 \n731     def test_addini_args_pyproject_toml(self, pytester: Pytester) -> None:\n732         self.make_conftest_for_args(pytester)\n733         pytester.makepyprojecttoml(\n734             \"\"\"\n735             [tool.pytest.ini_options]\n736             args = [\"123\", \"123 hello\", \"this\"]\n737             \"\"\"\n738         )\n739         self.check_config_args(pytester)\n740 \n741     def check_config_args(self, pytester: Pytester) -> None:\n742         config = pytester.parseconfig()\n743         values = config.getini(\"args\")\n744         assert values == [\"123\", \"123 hello\", \"this\"]\n745         values = config.getini(\"a2\")\n746         assert values == list(\"123\")\n747 \n748     def make_conftest_for_linelist(self, pytester: Pytester) -> None:\n749         pytester.makeconftest(\n750             \"\"\"\n751             def pytest_addoption(parser):\n752                 parser.addini(\"xy\", \"\", type=\"linelist\")\n753                 parser.addini(\"a2\", \"\", \"linelist\")\n754         \"\"\"\n755         )\n756 \n757     def test_addini_linelist_ini_files(self, pytester: Pytester) -> None:\n758         self.make_conftest_for_linelist(pytester)\n759         pytester.makeini(\n760             \"\"\"\n761             [pytest]\n762             xy= 123 345\n763                 second line\n764         \"\"\"\n765         )\n766         self.check_config_linelist(pytester)\n767 \n768     def test_addini_linelist_pprojecttoml(self, pytester: Pytester) -> None:\n769         self.make_conftest_for_linelist(pytester)\n770         pytester.makepyprojecttoml(\n771             \"\"\"\n772             [tool.pytest.ini_options]\n773             xy = [\"123 345\", \"second line\"]\n774         \"\"\"\n775         )\n776         self.check_config_linelist(pytester)\n777 \n778     def check_config_linelist(self, pytester: Pytester) -> None:\n779         config = pytester.parseconfig()\n780         values = config.getini(\"xy\")\n781         assert len(values) == 2\n782         assert values == [\"123 345\", \"second line\"]\n783         values = config.getini(\"a2\")\n784         assert values == []\n785 \n786     @pytest.mark.parametrize(\n787         \"str_val, bool_val\", [(\"True\", True), (\"no\", False), (\"no-ini\", True)]\n788     )\n789     def test_addini_bool(\n790         self, pytester: Pytester, str_val: str, bool_val: bool\n791     ) -> None:\n792         pytester.makeconftest(\n793             \"\"\"\n794             def pytest_addoption(parser):\n795                 parser.addini(\"strip\", \"\", type=\"bool\", default=True)\n796         \"\"\"\n797         )\n798         if str_val != \"no-ini\":\n799             pytester.makeini(\n800                 \"\"\"\n801                 [pytest]\n802                 strip=%s\n803             \"\"\"\n804                 % str_val\n805             )\n806         config = pytester.parseconfig()\n807         assert config.getini(\"strip\") is bool_val\n808 \n809     def test_addinivalue_line_existing(self, pytester: Pytester) -> None:\n810         pytester.makeconftest(\n811             \"\"\"\n812             def pytest_addoption(parser):\n813                 parser.addini(\"xy\", \"\", type=\"linelist\")\n814         \"\"\"\n815         )\n816         pytester.makeini(\n817             \"\"\"\n818             [pytest]\n819             xy= 123\n820         \"\"\"\n821         )\n822         config = pytester.parseconfig()\n823         values = config.getini(\"xy\")\n824         assert len(values) == 1\n825         assert values == [\"123\"]\n826         config.addinivalue_line(\"xy\", \"456\")\n827         values = config.getini(\"xy\")\n828         assert len(values) == 2\n829         assert values == [\"123\", \"456\"]\n830 \n831     def test_addinivalue_line_new(self, pytester: Pytester) -> None:\n832         pytester.makeconftest(\n833             \"\"\"\n834             def pytest_addoption(parser):\n835                 parser.addini(\"xy\", \"\", type=\"linelist\")\n836         \"\"\"\n837         )\n838         config = pytester.parseconfig()\n839         assert not config.getini(\"xy\")\n840         config.addinivalue_line(\"xy\", \"456\")\n841         values = config.getini(\"xy\")\n842         assert len(values) == 1\n843         assert values == [\"456\"]\n844         config.addinivalue_line(\"xy\", \"123\")\n845         values = config.getini(\"xy\")\n846         assert len(values) == 2\n847         assert values == [\"456\", \"123\"]\n848 \n849     def test_confcutdir_check_isdir(self, pytester: Pytester) -> None:\n850         \"\"\"Give an error if --confcutdir is not a valid directory (#2078)\"\"\"\n851         exp_match = r\"^--confcutdir must be a directory, given: \"\n852         with pytest.raises(pytest.UsageError, match=exp_match):\n853             pytester.parseconfig(\"--confcutdir\", pytester.path.joinpath(\"file\"))\n854         with pytest.raises(pytest.UsageError, match=exp_match):\n855             pytester.parseconfig(\"--confcutdir\", pytester.path.joinpath(\"nonexistent\"))\n856 \n857         p = pytester.mkdir(\"dir\")\n858         config = pytester.parseconfig(\"--confcutdir\", p)\n859         assert config.getoption(\"confcutdir\") == str(p)\n860 \n861     @pytest.mark.parametrize(\n862         \"names, expected\",\n863         [\n864             # dist-info based distributions root are files as will be put in PYTHONPATH\n865             ([\"bar.py\"], [\"bar\"]),\n866             ([\"foo/bar.py\"], [\"bar\"]),\n867             ([\"foo/bar.pyc\"], []),\n868             ([\"foo/__init__.py\"], [\"foo\"]),\n869             ([\"bar/__init__.py\", \"xz.py\"], [\"bar\", \"xz\"]),\n870             ([\"setup.py\"], []),\n871             # egg based distributions root contain the files from the dist root\n872             ([\"src/bar/__init__.py\"], [\"bar\"]),\n873             ([\"src/bar/__init__.py\", \"setup.py\"], [\"bar\"]),\n874             ([\"source/python/bar/__init__.py\", \"setup.py\"], [\"bar\"]),\n875             # editable installation finder modules\n876             ([\"__editable___xyz_finder.py\"], []),\n877             ([\"bar/__init__.py\", \"__editable___xyz_finder.py\"], [\"bar\"]),\n878         ],\n879     )\n880     def test_iter_rewritable_modules(self, names, expected) -> None:\n881         assert list(_iter_rewritable_modules(names)) == expected\n882 \n883 \n884 class TestConfigFromdictargs:\n885     def test_basic_behavior(self, _sys_snapshot) -> None:\n886         option_dict = {\"verbose\": 444, \"foo\": \"bar\", \"capture\": \"no\"}\n887         args = [\"a\", \"b\"]\n888 \n889         config = Config.fromdictargs(option_dict, args)\n890         with pytest.raises(AssertionError):\n891             config.parse([\"should refuse to parse again\"])\n892         assert config.option.verbose == 444\n893         assert config.option.foo == \"bar\"\n894         assert config.option.capture == \"no\"\n895         assert config.args == args\n896 \n897     def test_invocation_params_args(self, _sys_snapshot) -> None:\n898         \"\"\"Show that fromdictargs can handle args in their \"orig\" format\"\"\"\n899         option_dict: Dict[str, object] = {}\n900         args = [\"-vvvv\", \"-s\", \"a\", \"b\"]\n901 \n902         config = Config.fromdictargs(option_dict, args)\n903         assert config.args == [\"a\", \"b\"]\n904         assert config.invocation_params.args == tuple(args)\n905         assert config.option.verbose == 4\n906         assert config.option.capture == \"no\"\n907 \n908     def test_inifilename(self, tmp_path: Path) -> None:\n909         d1 = tmp_path.joinpath(\"foo\")\n910         d1.mkdir()\n911         p1 = d1.joinpath(\"bar.ini\")\n912         p1.touch()\n913         p1.write_text(\n914             textwrap.dedent(\n915                 \"\"\"\\\n916                 [pytest]\n917                 name = value\n918                 \"\"\"\n919             ),\n920             encoding=\"utf-8\",\n921         )\n922 \n923         inifilename = \"../../foo/bar.ini\"\n924         option_dict = {\"inifilename\": inifilename, \"capture\": \"no\"}\n925 \n926         cwd = tmp_path.joinpath(\"a/b\")\n927         cwd.mkdir(parents=True)\n928         p2 = cwd.joinpath(\"pytest.ini\")\n929         p2.touch()\n930         p2.write_text(\n931             textwrap.dedent(\n932                 \"\"\"\\\n933                 [pytest]\n934                 name = wrong-value\n935                 should_not_be_set = true\n936                 \"\"\"\n937             ),\n938             encoding=\"utf-8\",\n939         )\n940         with MonkeyPatch.context() as mp:\n941             mp.chdir(cwd)\n942             config = Config.fromdictargs(option_dict, ())\n943             inipath = absolutepath(inifilename)\n944 \n945         assert config.args == [str(cwd)]\n946         assert config.option.inifilename == inifilename\n947         assert config.option.capture == \"no\"\n948 \n949         # this indicates this is the file used for getting configuration values\n950         assert config.inipath == inipath\n951         assert config.inicfg.get(\"name\") == \"value\"\n952         assert config.inicfg.get(\"should_not_be_set\") is None\n953 \n954 \n955 def test_options_on_small_file_do_not_blow_up(pytester: Pytester) -> None:\n956     def runfiletest(opts: Sequence[str]) -> None:\n957         reprec = pytester.inline_run(*opts)\n958         passed, skipped, failed = reprec.countoutcomes()\n959         assert failed == 2\n960         assert skipped == passed == 0\n961 \n962     path = str(\n963         pytester.makepyfile(\n964             \"\"\"\n965         def test_f1(): assert 0\n966         def test_f2(): assert 0\n967     \"\"\"\n968         )\n969     )\n970 \n971     runfiletest([path])\n972     runfiletest([\"-l\", path])\n973     runfiletest([\"-s\", path])\n974     runfiletest([\"--tb=no\", path])\n975     runfiletest([\"--tb=short\", path])\n976     runfiletest([\"--tb=long\", path])\n977     runfiletest([\"--fulltrace\", path])\n978     runfiletest([\"--traceconfig\", path])\n979     runfiletest([\"-v\", path])\n980     runfiletest([\"-v\", \"-v\", path])\n981 \n982 \n983 def test_preparse_ordering_with_setuptools(\n984     pytester: Pytester, monkeypatch: MonkeyPatch\n985 ) -> None:\n986     monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", raising=False)\n987 \n988     class EntryPoint:\n989         name = \"mytestplugin\"\n990         group = \"pytest11\"\n991 \n992         def load(self):\n993             class PseudoPlugin:\n994                 x = 42\n995 \n996             return PseudoPlugin()\n997 \n998     class Dist:\n999         files = ()\n1000         metadata = {\"name\": \"foo\"}\n1001         entry_points = (EntryPoint(),)\n1002 \n1003     def my_dists():\n1004         return (Dist,)\n1005 \n1006     monkeypatch.setattr(importlib.metadata, \"distributions\", my_dists)\n1007     pytester.makeconftest(\n1008         \"\"\"\n1009         pytest_plugins = \"mytestplugin\",\n1010     \"\"\"\n1011     )\n1012     monkeypatch.setenv(\"PYTEST_PLUGINS\", \"mytestplugin\")\n1013     config = pytester.parseconfig()\n1014     plugin = config.pluginmanager.getplugin(\"mytestplugin\")\n1015     assert plugin.x == 42\n1016 \n1017 \n1018 def test_setuptools_importerror_issue1479(\n1019     pytester: Pytester, monkeypatch: MonkeyPatch\n1020 ) -> None:\n1021     monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", raising=False)\n1022 \n1023     class DummyEntryPoint:\n1024         name = \"mytestplugin\"\n1025         group = \"pytest11\"\n1026 \n1027         def load(self):\n1028             raise ImportError(\"Don't hide me!\")\n1029 \n1030     class Distribution:\n1031         version = \"1.0\"\n1032         files = (\"foo.txt\",)\n1033         metadata = {\"name\": \"foo\"}\n1034         entry_points = (DummyEntryPoint(),)\n1035 \n1036     def distributions():\n1037         return (Distribution(),)\n1038 \n1039     monkeypatch.setattr(importlib.metadata, \"distributions\", distributions)\n1040     with pytest.raises(ImportError):\n1041         pytester.parseconfig()\n1042 \n1043 \n1044 def test_importlib_metadata_broken_distribution(\n1045     pytester: Pytester, monkeypatch: MonkeyPatch\n1046 ) -> None:\n1047     \"\"\"Integration test for broken distributions with 'files' metadata being None (#5389)\"\"\"\n1048     monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", raising=False)\n1049 \n1050     class DummyEntryPoint:\n1051         name = \"mytestplugin\"\n1052         group = \"pytest11\"\n1053 \n1054         def load(self):\n1055             return object()\n1056 \n1057     class Distribution:\n1058         version = \"1.0\"\n1059         files = None\n1060         metadata = {\"name\": \"foo\"}\n1061         entry_points = (DummyEntryPoint(),)\n1062 \n1063     def distributions():\n1064         return (Distribution(),)\n1065 \n1066     monkeypatch.setattr(importlib.metadata, \"distributions\", distributions)\n1067     pytester.parseconfig()\n1068 \n1069 \n1070 @pytest.mark.parametrize(\"block_it\", [True, False])\n1071 def test_plugin_preparse_prevents_setuptools_loading(\n1072     pytester: Pytester, monkeypatch: MonkeyPatch, block_it: bool\n1073 ) -> None:\n1074     monkeypatch.delenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", raising=False)\n1075 \n1076     plugin_module_placeholder = object()\n1077 \n1078     class DummyEntryPoint:\n1079         name = \"mytestplugin\"\n1080         group = \"pytest11\"\n1081 \n1082         def load(self):\n1083             return plugin_module_placeholder\n1084 \n1085     class Distribution:\n1086         version = \"1.0\"\n1087         files = (\"foo.txt\",)\n1088         metadata = {\"name\": \"foo\"}\n1089         entry_points = (DummyEntryPoint(),)\n1090 \n1091     def distributions():\n1092         return (Distribution(),)\n1093 \n1094     monkeypatch.setattr(importlib.metadata, \"distributions\", distributions)\n1095     args = (\"-p\", \"no:mytestplugin\") if block_it else ()\n1096     config = pytester.parseconfig(*args)\n1097     config.pluginmanager.import_plugin(\"mytestplugin\")\n1098     if block_it:\n1099         assert \"mytestplugin\" not in sys.modules\n1100         assert config.pluginmanager.get_plugin(\"mytestplugin\") is None\n1101     else:\n1102         assert (\n1103             config.pluginmanager.get_plugin(\"mytestplugin\") is plugin_module_placeholder\n1104         )\n1105 \n1106 \n1107 @pytest.mark.parametrize(\n1108     \"parse_args,should_load\", [((\"-p\", \"mytestplugin\"), True), ((), False)]\n1109 )\n1110 def test_disable_plugin_autoload(\n1111     pytester: Pytester,\n1112     monkeypatch: MonkeyPatch,\n1113     parse_args: Union[Tuple[str, str], Tuple[()]],\n1114     should_load: bool,\n1115 ) -> None:\n1116     class DummyEntryPoint:\n1117         project_name = name = \"mytestplugin\"\n1118         group = \"pytest11\"\n1119         version = \"1.0\"\n1120 \n1121         def load(self):\n1122             return sys.modules[self.name]\n1123 \n1124     class Distribution:\n1125         metadata = {\"name\": \"foo\"}\n1126         entry_points = (DummyEntryPoint(),)\n1127         files = ()\n1128 \n1129     class PseudoPlugin:\n1130         x = 42\n1131 \n1132         attrs_used = []\n1133 \n1134         def __getattr__(self, name):\n1135             assert name == \"__loader__\"\n1136             self.attrs_used.append(name)\n1137             return object()\n1138 \n1139     def distributions():\n1140         return (Distribution(),)\n1141 \n1142     monkeypatch.setenv(\"PYTEST_DISABLE_PLUGIN_AUTOLOAD\", \"1\")\n1143     monkeypatch.setattr(importlib.metadata, \"distributions\", distributions)\n1144     monkeypatch.setitem(sys.modules, \"mytestplugin\", PseudoPlugin())  # type: ignore[misc]\n1145     config = pytester.parseconfig(*parse_args)\n1146     has_loaded = config.pluginmanager.get_plugin(\"mytestplugin\") is not None\n1147     assert has_loaded == should_load\n1148     if should_load:\n1149         assert PseudoPlugin.attrs_used == [\"__loader__\"]\n1150     else:\n1151         assert PseudoPlugin.attrs_used == []\n1152 \n1153 \n1154 def test_plugin_loading_order(pytester: Pytester) -> None:\n1155     \"\"\"Test order of plugin loading with `-p`.\"\"\"\n1156     p1 = pytester.makepyfile(\n1157         \"\"\"\n1158         def test_terminal_plugin(request):\n1159             import myplugin\n1160             assert myplugin.terminal_plugin == [False, True]\n1161         \"\"\",\n1162         **{\n1163             \"myplugin\": \"\"\"\n1164             terminal_plugin = []\n1165 \n1166             def pytest_configure(config):\n1167                 terminal_plugin.append(bool(config.pluginmanager.get_plugin(\"terminalreporter\")))\n1168 \n1169             def pytest_sessionstart(session):\n1170                 config = session.config\n1171                 terminal_plugin.append(bool(config.pluginmanager.get_plugin(\"terminalreporter\")))\n1172             \"\"\"\n1173         },\n1174     )\n1175     pytester.syspathinsert()\n1176     result = pytester.runpytest(\"-p\", \"myplugin\", str(p1))\n1177     assert result.ret == 0\n1178 \n1179 \n1180 def test_cmdline_processargs_simple(pytester: Pytester) -> None:\n1181     pytester.makeconftest(\n1182         \"\"\"\n1183         def pytest_cmdline_preparse(args):\n1184             args.append(\"-h\")\n1185     \"\"\"\n1186     )\n1187     result = pytester.runpytest(\"-Wignore::pytest.PytestRemovedIn8Warning\")\n1188     result.stdout.fnmatch_lines([\"*pytest*\", \"*-h*\"])\n1189 \n1190 \n1191 def test_invalid_options_show_extra_information(pytester: Pytester) -> None:\n1192     \"\"\"Display extra information when pytest exits due to unrecognized\n1193     options in the command-line.\"\"\"\n1194     pytester.makeini(\n1195         \"\"\"\n1196         [pytest]\n1197         addopts = --invalid-option\n1198     \"\"\"\n1199     )\n1200     result = pytester.runpytest()\n1201     result.stderr.fnmatch_lines(\n1202         [\n1203             \"*error: unrecognized arguments: --invalid-option*\",\n1204             \"*  inifile: %s*\" % pytester.path.joinpath(\"tox.ini\"),\n1205             \"*  rootdir: %s*\" % pytester.path,\n1206         ]\n1207     )\n1208 \n1209 \n1210 @pytest.mark.parametrize(\n1211     \"args\",\n1212     [\n1213         [\"dir1\", \"dir2\", \"-v\"],\n1214         [\"dir1\", \"-v\", \"dir2\"],\n1215         [\"dir2\", \"-v\", \"dir1\"],\n1216         [\"-v\", \"dir2\", \"dir1\"],\n1217     ],\n1218 )\n1219 def test_consider_args_after_options_for_rootdir(\n1220     pytester: Pytester, args: List[str]\n1221 ) -> None:\n1222     \"\"\"\n1223     Consider all arguments in the command-line for rootdir\n1224     discovery, even if they happen to occur after an option. #949\n1225     \"\"\"\n1226     # replace \"dir1\" and \"dir2\" from \"args\" into their real directory\n1227     root = pytester.mkdir(\"myroot\")\n1228     d1 = root.joinpath(\"dir1\")\n1229     d1.mkdir()\n1230     d2 = root.joinpath(\"dir2\")\n1231     d2.mkdir()\n1232     for i, arg in enumerate(args):\n1233         if arg == \"dir1\":\n1234             args[i] = str(d1)\n1235         elif arg == \"dir2\":\n1236             args[i] = str(d2)\n1237     with MonkeyPatch.context() as mp:\n1238         mp.chdir(root)\n1239         result = pytester.runpytest(*args)\n1240     result.stdout.fnmatch_lines([\"*rootdir: *myroot\"])\n1241 \n1242 \n1243 def test_toolongargs_issue224(pytester: Pytester) -> None:\n1244     result = pytester.runpytest(\"-m\", \"hello\" * 500)\n1245     assert result.ret == ExitCode.NO_TESTS_COLLECTED\n1246 \n1247 \n1248 def test_config_in_subdirectory_colon_command_line_issue2148(\n1249     pytester: Pytester,\n1250 ) -> None:\n1251     conftest_source = \"\"\"\n1252         def pytest_addoption(parser):\n1253             parser.addini('foo', 'foo')\n1254     \"\"\"\n1255 \n1256     pytester.makefile(\n1257         \".ini\",\n1258         **{\"pytest\": \"[pytest]\\nfoo = root\", \"subdir/pytest\": \"[pytest]\\nfoo = subdir\"},\n1259     )\n1260 \n1261     pytester.makepyfile(\n1262         **{\n1263             \"conftest\": conftest_source,\n1264             \"subdir/conftest\": conftest_source,\n1265             \"subdir/test_foo\": \"\"\"\\\n1266             def test_foo(pytestconfig):\n1267                 assert pytestconfig.getini('foo') == 'subdir'\n1268             \"\"\",\n1269         }\n1270     )\n1271 \n1272     result = pytester.runpytest(\"subdir/test_foo.py::test_foo\")\n1273     assert result.ret == 0\n1274 \n1275 \n1276 def test_notify_exception(pytester: Pytester, capfd) -> None:\n1277     config = pytester.parseconfig()\n1278     with pytest.raises(ValueError) as excinfo:\n1279         raise ValueError(1)\n1280     config.notify_exception(excinfo, config.option)\n1281     _, err = capfd.readouterr()\n1282     assert \"ValueError\" in err\n1283 \n1284     class A:\n1285         def pytest_internalerror(self):\n1286             return True\n1287 \n1288     config.pluginmanager.register(A())\n1289     config.notify_exception(excinfo, config.option)\n1290     _, err = capfd.readouterr()\n1291     assert not err\n1292 \n1293     config = pytester.parseconfig(\"-p\", \"no:terminal\")\n1294     with pytest.raises(ValueError) as excinfo:\n1295         raise ValueError(1)\n1296     config.notify_exception(excinfo, config.option)\n1297     _, err = capfd.readouterr()\n1298     assert \"ValueError\" in err\n1299 \n1300 \n1301 def test_no_terminal_discovery_error(pytester: Pytester) -> None:\n1302     pytester.makepyfile(\"raise TypeError('oops!')\")\n1303     result = pytester.runpytest(\"-p\", \"no:terminal\", \"--collect-only\")\n1304     assert result.ret == ExitCode.INTERRUPTED\n1305 \n1306 \n1307 def test_load_initial_conftest_last_ordering(_config_for_test):\n1308     pm = _config_for_test.pluginmanager\n1309 \n1310     class My:\n1311         def pytest_load_initial_conftests(self):\n1312             pass\n1313 \n1314     m = My()\n1315     pm.register(m)\n1316     hc = pm.hook.pytest_load_initial_conftests\n1317     hookimpls = [\n1318         (\n1319             hookimpl.function.__module__,\n1320             \"wrapper\" if hookimpl.hookwrapper else \"nonwrapper\",\n1321         )\n1322         for hookimpl in hc.get_hookimpls()\n1323     ]\n1324     assert hookimpls == [\n1325         (\"_pytest.config\", \"nonwrapper\"),\n1326         (m.__module__, \"nonwrapper\"),\n1327         (\"_pytest.legacypath\", \"nonwrapper\"),\n1328         (\"_pytest.python_path\", \"nonwrapper\"),\n1329         (\"_pytest.capture\", \"wrapper\"),\n1330         (\"_pytest.warnings\", \"wrapper\"),\n1331     ]\n1332 \n1333 \n1334 def test_get_plugin_specs_as_list() -> None:\n1335     def exp_match(val: object) -> str:\n1336         return (\n1337             \"Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %s\"\n1338             % re.escape(repr(val))\n1339         )\n1340 \n1341     with pytest.raises(pytest.UsageError, match=exp_match({\"foo\"})):\n1342         _get_plugin_specs_as_list({\"foo\"})  # type: ignore[arg-type]\n1343     with pytest.raises(pytest.UsageError, match=exp_match({})):\n1344         _get_plugin_specs_as_list(dict())  # type: ignore[arg-type]\n1345 \n1346     assert _get_plugin_specs_as_list(None) == []\n1347     assert _get_plugin_specs_as_list(\"\") == []\n1348     assert _get_plugin_specs_as_list(\"foo\") == [\"foo\"]\n1349     assert _get_plugin_specs_as_list(\"foo,bar\") == [\"foo\", \"bar\"]\n1350     assert _get_plugin_specs_as_list([\"foo\", \"bar\"]) == [\"foo\", \"bar\"]\n1351     assert _get_plugin_specs_as_list((\"foo\", \"bar\")) == [\"foo\", \"bar\"]\n1352 \n1353 \n1354 def test_collect_pytest_prefix_bug_integration(pytester: Pytester) -> None:\n1355     \"\"\"Integration test for issue #3775\"\"\"\n1356     p = pytester.copy_example(\"config/collect_pytest_prefix\")\n1357     result = pytester.runpytest(p)\n1358     result.stdout.fnmatch_lines([\"* 1 passed *\"])\n1359 \n1360 \n1361 def test_collect_pytest_prefix_bug(pytestconfig):\n1362     \"\"\"Ensure we collect only actual functions from conftest files (#3775)\"\"\"\n1363 \n1364     class Dummy:\n1365         class pytest_something:\n1366             pass\n1367 \n1368     pm = pytestconfig.pluginmanager\n1369     assert pm.parse_hookimpl_opts(Dummy(), \"pytest_something\") is None\n1370 \n1371 \n1372 class TestRootdir:\n1373     def test_simple_noini(self, tmp_path: Path, monkeypatch: MonkeyPatch) -> None:\n1374         assert get_common_ancestor([tmp_path]) == tmp_path\n1375         a = tmp_path / \"a\"\n1376         a.mkdir()\n1377         assert get_common_ancestor([a, tmp_path]) == tmp_path\n1378         assert get_common_ancestor([tmp_path, a]) == tmp_path\n1379         monkeypatch.chdir(tmp_path)\n1380         assert get_common_ancestor([]) == tmp_path\n1381         no_path = tmp_path / \"does-not-exist\"\n1382         assert get_common_ancestor([no_path]) == tmp_path\n1383         assert get_common_ancestor([no_path / \"a\"]) == tmp_path\n1384 \n1385     @pytest.mark.parametrize(\n1386         \"name, contents\",\n1387         [\n1388             pytest.param(\"pytest.ini\", \"[pytest]\\nx=10\", id=\"pytest.ini\"),\n1389             pytest.param(\n1390                 \"pyproject.toml\", \"[tool.pytest.ini_options]\\nx=10\", id=\"pyproject.toml\"\n1391             ),\n1392             pytest.param(\"tox.ini\", \"[pytest]\\nx=10\", id=\"tox.ini\"),\n1393             pytest.param(\"setup.cfg\", \"[tool:pytest]\\nx=10\", id=\"setup.cfg\"),\n1394         ],\n1395     )\n1396     def test_with_ini(self, tmp_path: Path, name: str, contents: str) -> None:\n1397         inipath = tmp_path / name\n1398         inipath.write_text(contents, encoding=\"utf-8\")\n1399 \n1400         a = tmp_path / \"a\"\n1401         a.mkdir()\n1402         b = a / \"b\"\n1403         b.mkdir()\n1404         for args in ([str(tmp_path)], [str(a)], [str(b)]):\n1405             rootpath, parsed_inipath, _ = determine_setup(None, args)\n1406             assert rootpath == tmp_path\n1407             assert parsed_inipath == inipath\n1408         rootpath, parsed_inipath, ini_config = determine_setup(None, [str(b), str(a)])\n1409         assert rootpath == tmp_path\n1410         assert parsed_inipath == inipath\n1411         assert ini_config == {\"x\": \"10\"}\n1412 \n1413     @pytest.mark.parametrize(\"name\", [\"setup.cfg\", \"tox.ini\"])\n1414     def test_pytestini_overrides_empty_other(self, tmp_path: Path, name: str) -> None:\n1415         inipath = tmp_path / \"pytest.ini\"\n1416         inipath.touch()\n1417         a = tmp_path / \"a\"\n1418         a.mkdir()\n1419         (a / name).touch()\n1420         rootpath, parsed_inipath, _ = determine_setup(None, [str(a)])\n1421         assert rootpath == tmp_path\n1422         assert parsed_inipath == inipath\n1423 \n1424     def test_setuppy_fallback(self, tmp_path: Path) -> None:\n1425         a = tmp_path / \"a\"\n1426         a.mkdir()\n1427         (a / \"setup.cfg\").touch()\n1428         (tmp_path / \"setup.py\").touch()\n1429         rootpath, inipath, inicfg = determine_setup(None, [str(a)])\n1430         assert rootpath == tmp_path\n1431         assert inipath is None\n1432         assert inicfg == {}\n1433 \n1434     def test_nothing(self, tmp_path: Path, monkeypatch: MonkeyPatch) -> None:\n1435         monkeypatch.chdir(tmp_path)\n1436         rootpath, inipath, inicfg = determine_setup(None, [str(tmp_path)])\n1437         assert rootpath == tmp_path\n1438         assert inipath is None\n1439         assert inicfg == {}\n1440 \n1441     @pytest.mark.parametrize(\n1442         \"name, contents\",\n1443         [\n1444             # pytest.param(\"pytest.ini\", \"[pytest]\\nx=10\", id=\"pytest.ini\"),\n1445             pytest.param(\n1446                 \"pyproject.toml\", \"[tool.pytest.ini_options]\\nx=10\", id=\"pyproject.toml\"\n1447             ),\n1448             # pytest.param(\"tox.ini\", \"[pytest]\\nx=10\", id=\"tox.ini\"),\n1449             # pytest.param(\"setup.cfg\", \"[tool:pytest]\\nx=10\", id=\"setup.cfg\"),\n1450         ],\n1451     )\n1452     def test_with_specific_inifile(\n1453         self, tmp_path: Path, name: str, contents: str\n1454     ) -> None:\n1455         p = tmp_path / name\n1456         p.touch()\n1457         p.write_text(contents, encoding=\"utf-8\")\n1458         rootpath, inipath, ini_config = determine_setup(str(p), [str(tmp_path)])\n1459         assert rootpath == tmp_path\n1460         assert inipath == p\n1461         assert ini_config == {\"x\": \"10\"}\n1462 \n1463     def test_explicit_config_file_sets_rootdir(\n1464         self, tmp_path: Path, monkeypatch: pytest.MonkeyPatch\n1465     ) -> None:\n1466         tests_dir = tmp_path / \"tests\"\n1467         tests_dir.mkdir()\n1468 \n1469         monkeypatch.chdir(tmp_path)\n1470 \n1471         # No config file is explicitly given: rootdir is determined to be cwd.\n1472         rootpath, found_inipath, *_ = determine_setup(None, [str(tests_dir)])\n1473         assert rootpath == tmp_path\n1474         assert found_inipath is None\n1475 \n1476         # Config file is explicitly given: rootdir is determined to be inifile's directory.\n1477         inipath = tmp_path / \"pytest.ini\"\n1478         inipath.touch()\n1479         rootpath, found_inipath, *_ = determine_setup(str(inipath), [str(tests_dir)])\n1480         assert rootpath == tmp_path\n1481         assert found_inipath == inipath\n1482 \n1483     def test_with_arg_outside_cwd_without_inifile(\n1484         self, tmp_path: Path, monkeypatch: MonkeyPatch\n1485     ) -> None:\n1486         monkeypatch.chdir(tmp_path)\n1487         a = tmp_path / \"a\"\n1488         a.mkdir()\n1489         b = tmp_path / \"b\"\n1490         b.mkdir()\n1491         rootpath, inifile, _ = determine_setup(None, [str(a), str(b)])\n1492         assert rootpath == tmp_path\n1493         assert inifile is None\n1494 \n1495     def test_with_arg_outside_cwd_with_inifile(self, tmp_path: Path) -> None:\n1496         a = tmp_path / \"a\"\n1497         a.mkdir()\n1498         b = tmp_path / \"b\"\n1499         b.mkdir()\n1500         inipath = a / \"pytest.ini\"\n1501         inipath.touch()\n1502         rootpath, parsed_inipath, _ = determine_setup(None, [str(a), str(b)])\n1503         assert rootpath == a\n1504         assert inipath == parsed_inipath\n1505 \n1506     @pytest.mark.parametrize(\"dirs\", ([], [\"does-not-exist\"], [\"a/does-not-exist\"]))\n1507     def test_with_non_dir_arg(\n1508         self, dirs: Sequence[str], tmp_path: Path, monkeypatch: MonkeyPatch\n1509     ) -> None:\n1510         monkeypatch.chdir(tmp_path)\n1511         rootpath, inipath, _ = determine_setup(None, dirs)\n1512         assert rootpath == tmp_path\n1513         assert inipath is None\n1514 \n1515     def test_with_existing_file_in_subdir(\n1516         self, tmp_path: Path, monkeypatch: MonkeyPatch\n1517     ) -> None:\n1518         a = tmp_path / \"a\"\n1519         a.mkdir()\n1520         (a / \"exists\").touch()\n1521         monkeypatch.chdir(tmp_path)\n1522         rootpath, inipath, _ = determine_setup(None, [\"a/exist\"])\n1523         assert rootpath == tmp_path\n1524         assert inipath is None\n1525 \n1526     def test_with_config_also_in_parent_directory(\n1527         self, tmp_path: Path, monkeypatch: MonkeyPatch\n1528     ) -> None:\n1529         \"\"\"Regression test for #7807.\"\"\"\n1530         (tmp_path / \"setup.cfg\").write_text(\"[tool:pytest]\\n\", \"utf-8\")\n1531         (tmp_path / \"myproject\").mkdir()\n1532         (tmp_path / \"myproject\" / \"setup.cfg\").write_text(\"[tool:pytest]\\n\", \"utf-8\")\n1533         (tmp_path / \"myproject\" / \"tests\").mkdir()\n1534         monkeypatch.chdir(tmp_path / \"myproject\")\n1535 \n1536         rootpath, inipath, _ = determine_setup(None, [\"tests/\"])\n1537 \n1538         assert rootpath == tmp_path / \"myproject\"\n1539         assert inipath == tmp_path / \"myproject\" / \"setup.cfg\"\n1540 \n1541 \n1542 class TestOverrideIniArgs:\n1543     @pytest.mark.parametrize(\"name\", \"setup.cfg tox.ini pytest.ini\".split())\n1544     def test_override_ini_names(self, pytester: Pytester, name: str) -> None:\n1545         section = \"[pytest]\" if name != \"setup.cfg\" else \"[tool:pytest]\"\n1546         pytester.path.joinpath(name).write_text(\n1547             textwrap.dedent(\n1548                 \"\"\"\n1549             {section}\n1550             custom = 1.0\"\"\".format(\n1551                     section=section\n1552                 )\n1553             ),\n1554             encoding=\"utf-8\",\n1555         )\n1556         pytester.makeconftest(\n1557             \"\"\"\n1558             def pytest_addoption(parser):\n1559                 parser.addini(\"custom\", \"\")\"\"\"\n1560         )\n1561         pytester.makepyfile(\n1562             \"\"\"\n1563             def test_pass(pytestconfig):\n1564                 ini_val = pytestconfig.getini(\"custom\")\n1565                 print('\\\\ncustom_option:%s\\\\n' % ini_val)\"\"\"\n1566         )\n1567 \n1568         result = pytester.runpytest(\"--override-ini\", \"custom=2.0\", \"-s\")\n1569         assert result.ret == 0\n1570         result.stdout.fnmatch_lines([\"custom_option:2.0\"])\n1571 \n1572         result = pytester.runpytest(\n1573             \"--override-ini\", \"custom=2.0\", \"--override-ini=custom=3.0\", \"-s\"\n1574         )\n1575         assert result.ret == 0\n1576         result.stdout.fnmatch_lines([\"custom_option:3.0\"])\n1577 \n1578     def test_override_ini_paths(self, pytester: Pytester) -> None:\n1579         pytester.makeconftest(\n1580             \"\"\"\n1581             def pytest_addoption(parser):\n1582                 parser.addini(\"paths\", \"my new ini value\", type=\"paths\")\"\"\"\n1583         )\n1584         pytester.makeini(\n1585             \"\"\"\n1586             [pytest]\n1587             paths=blah.py\"\"\"\n1588         )\n1589         pytester.makepyfile(\n1590             r\"\"\"\n1591             def test_overriden(pytestconfig):\n1592                 config_paths = pytestconfig.getini(\"paths\")\n1593                 print(config_paths)\n1594                 for cpf in config_paths:\n1595                     print('\\nuser_path:%s' % cpf.name)\n1596             \"\"\"\n1597         )\n1598         result = pytester.runpytest(\n1599             \"--override-ini\", \"paths=foo/bar1.py foo/bar2.py\", \"-s\"\n1600         )\n1601         result.stdout.fnmatch_lines([\"user_path:bar1.py\", \"user_path:bar2.py\"])\n1602 \n1603     def test_override_multiple_and_default(self, pytester: Pytester) -> None:\n1604         pytester.makeconftest(\n1605             \"\"\"\n1606             def pytest_addoption(parser):\n1607                 addini = parser.addini\n1608                 addini(\"custom_option_1\", \"\", default=\"o1\")\n1609                 addini(\"custom_option_2\", \"\", default=\"o2\")\n1610                 addini(\"custom_option_3\", \"\", default=False, type=\"bool\")\n1611                 addini(\"custom_option_4\", \"\", default=True, type=\"bool\")\"\"\"\n1612         )\n1613         pytester.makeini(\n1614             \"\"\"\n1615             [pytest]\n1616             custom_option_1=custom_option_1\n1617             custom_option_2=custom_option_2\n1618         \"\"\"\n1619         )\n1620         pytester.makepyfile(\n1621             \"\"\"\n1622             def test_multiple_options(pytestconfig):\n1623                 prefix = \"custom_option\"\n1624                 for x in range(1, 5):\n1625                     ini_value=pytestconfig.getini(\"%s_%d\" % (prefix, x))\n1626                     print('\\\\nini%d:%s' % (x, ini_value))\n1627         \"\"\"\n1628         )\n1629         result = pytester.runpytest(\n1630             \"--override-ini\",\n1631             \"custom_option_1=fulldir=/tmp/user1\",\n1632             \"-o\",\n1633             \"custom_option_2=url=/tmp/user2?a=b&d=e\",\n1634             \"-o\",\n1635             \"custom_option_3=True\",\n1636             \"-o\",\n1637             \"custom_option_4=no\",\n1638             \"-s\",\n1639         )\n1640         result.stdout.fnmatch_lines(\n1641             [\n1642                 \"ini1:fulldir=/tmp/user1\",\n1643                 \"ini2:url=/tmp/user2?a=b&d=e\",\n1644                 \"ini3:True\",\n1645                 \"ini4:False\",\n1646             ]\n1647         )\n1648 \n1649     def test_override_ini_usage_error_bad_style(self, pytester: Pytester) -> None:\n1650         pytester.makeini(\n1651             \"\"\"\n1652             [pytest]\n1653             xdist_strict=False\n1654         \"\"\"\n1655         )\n1656         result = pytester.runpytest(\"--override-ini\", \"xdist_strict\", \"True\")\n1657         result.stderr.fnmatch_lines(\n1658             [\n1659                 \"ERROR: -o/--override-ini expects option=value style (got: 'xdist_strict').\",\n1660             ]\n1661         )\n1662 \n1663     @pytest.mark.parametrize(\"with_ini\", [True, False])\n1664     def test_override_ini_handled_asap(\n1665         self, pytester: Pytester, with_ini: bool\n1666     ) -> None:\n1667         \"\"\"-o should be handled as soon as possible and always override what's in ini files (#2238)\"\"\"\n1668         if with_ini:\n1669             pytester.makeini(\n1670                 \"\"\"\n1671                 [pytest]\n1672                 python_files=test_*.py\n1673             \"\"\"\n1674             )\n1675         pytester.makepyfile(\n1676             unittest_ini_handle=\"\"\"\n1677             def test():\n1678                 pass\n1679         \"\"\"\n1680         )\n1681         result = pytester.runpytest(\"--override-ini\", \"python_files=unittest_*.py\")\n1682         result.stdout.fnmatch_lines([\"*1 passed in*\"])\n1683 \n1684     def test_addopts_before_initini(\n1685         self, monkeypatch: MonkeyPatch, _config_for_test, _sys_snapshot\n1686     ) -> None:\n1687         cache_dir = \".custom_cache\"\n1688         monkeypatch.setenv(\"PYTEST_ADDOPTS\", \"-o cache_dir=%s\" % cache_dir)\n1689         config = _config_for_test\n1690         config._preparse([], addopts=True)\n1691         assert config._override_ini == [\"cache_dir=%s\" % cache_dir]\n1692 \n1693     def test_addopts_from_env_not_concatenated(\n1694         self, monkeypatch: MonkeyPatch, _config_for_test\n1695     ) -> None:\n1696         \"\"\"PYTEST_ADDOPTS should not take values from normal args (#4265).\"\"\"\n1697         monkeypatch.setenv(\"PYTEST_ADDOPTS\", \"-o\")\n1698         config = _config_for_test\n1699         with pytest.raises(UsageError) as excinfo:\n1700             config._preparse([\"cache_dir=ignored\"], addopts=True)\n1701         assert (\n1702             \"error: argument -o/--override-ini: expected one argument (via PYTEST_ADDOPTS)\"\n1703             in excinfo.value.args[0]\n1704         )\n1705 \n1706     def test_addopts_from_ini_not_concatenated(self, pytester: Pytester) -> None:\n1707         \"\"\"`addopts` from ini should not take values from normal args (#4265).\"\"\"\n1708         pytester.makeini(\n1709             \"\"\"\n1710             [pytest]\n1711             addopts=-o\n1712         \"\"\"\n1713         )\n1714         result = pytester.runpytest(\"cache_dir=ignored\")\n1715         result.stderr.fnmatch_lines(\n1716             [\n1717                 \"%s: error: argument -o/--override-ini: expected one argument (via addopts config)\"\n1718                 % (pytester._request.config._parser.optparser.prog,)\n1719             ]\n1720         )\n1721         assert result.ret == _pytest.config.ExitCode.USAGE_ERROR\n1722 \n1723     def test_override_ini_does_not_contain_paths(\n1724         self, _config_for_test, _sys_snapshot\n1725     ) -> None:\n1726         \"\"\"Check that -o no longer swallows all options after it (#3103)\"\"\"\n1727         config = _config_for_test\n1728         config._preparse([\"-o\", \"cache_dir=/cache\", \"/some/test/path\"])\n1729         assert config._override_ini == [\"cache_dir=/cache\"]\n1730 \n1731     def test_multiple_override_ini_options(self, pytester: Pytester) -> None:\n1732         \"\"\"Ensure a file path following a '-o' option does not generate an error (#3103)\"\"\"\n1733         pytester.makepyfile(\n1734             **{\n1735                 \"conftest.py\": \"\"\"\n1736                 def pytest_addoption(parser):\n1737                     parser.addini('foo', default=None, help='some option')\n1738                     parser.addini('bar', default=None, help='some option')\n1739             \"\"\",\n1740                 \"test_foo.py\": \"\"\"\n1741                 def test(pytestconfig):\n1742                     assert pytestconfig.getini('foo') == '1'\n1743                     assert pytestconfig.getini('bar') == '0'\n1744             \"\"\",\n1745                 \"test_bar.py\": \"\"\"\n1746                 def test():\n1747                     assert False\n1748             \"\"\",\n1749             }\n1750         )\n1751         result = pytester.runpytest(\"-o\", \"foo=1\", \"-o\", \"bar=0\", \"test_foo.py\")\n1752         assert \"ERROR:\" not in result.stderr.str()\n1753         result.stdout.fnmatch_lines([\"collected 1 item\", \"*= 1 passed in *=\"])\n1754 \n1755 \n1756 def test_help_via_addopts(pytester: Pytester) -> None:\n1757     pytester.makeini(\n1758         \"\"\"\n1759         [pytest]\n1760         addopts = --unknown-option-should-allow-for-help --help\n1761     \"\"\"\n1762     )\n1763     result = pytester.runpytest()\n1764     assert result.ret == 0\n1765     result.stdout.fnmatch_lines(\n1766         [\n1767             \"usage: *\",\n1768             \"positional arguments:\",\n1769             # Displays full/default help.\n1770             \"to see available markers type: pytest --markers\",\n1771         ]\n1772     )\n1773 \n1774 \n1775 def test_help_and_version_after_argument_error(pytester: Pytester) -> None:\n1776     pytester.makeconftest(\n1777         \"\"\"\n1778         def validate(arg):\n1779             raise argparse.ArgumentTypeError(\"argerror\")\n1780 \n1781         def pytest_addoption(parser):\n1782             group = parser.getgroup('cov')\n1783             group.addoption(\n1784                 \"--invalid-option-should-allow-for-help\",\n1785                 type=validate,\n1786             )\n1787         \"\"\"\n1788     )\n1789     pytester.makeini(\n1790         \"\"\"\n1791         [pytest]\n1792         addopts = --invalid-option-should-allow-for-help\n1793     \"\"\"\n1794     )\n1795     result = pytester.runpytest(\"--help\")\n1796     result.stdout.fnmatch_lines(\n1797         [\n1798             \"usage: *\",\n1799             \"positional arguments:\",\n1800             \"NOTE: displaying only minimal help due to UsageError.\",\n1801         ]\n1802     )\n1803     result.stderr.fnmatch_lines(\n1804         [\n1805             \"ERROR: usage: *\",\n1806             \"%s: error: argument --invalid-option-should-allow-for-help: expected one argument\"\n1807             % (pytester._request.config._parser.optparser.prog,),\n1808         ]\n1809     )\n1810     # Does not display full/default help.\n1811     assert \"to see available markers type: pytest --markers\" not in result.stdout.lines\n1812     assert result.ret == ExitCode.USAGE_ERROR\n1813 \n1814     result = pytester.runpytest(\"--version\")\n1815     result.stdout.fnmatch_lines([f\"pytest {pytest.__version__}\"])\n1816     assert result.ret == ExitCode.USAGE_ERROR\n1817 \n1818 \n1819 def test_help_formatter_uses_py_get_terminal_width(monkeypatch: MonkeyPatch) -> None:\n1820     from _pytest.config.argparsing import DropShorterLongHelpFormatter\n1821 \n1822     monkeypatch.setenv(\"COLUMNS\", \"90\")\n1823     formatter = DropShorterLongHelpFormatter(\"prog\")\n1824     assert formatter._width == 90\n1825 \n1826     monkeypatch.setattr(\"_pytest._io.get_terminal_width\", lambda: 160)\n1827     formatter = DropShorterLongHelpFormatter(\"prog\")\n1828     assert formatter._width == 160\n1829 \n1830     formatter = DropShorterLongHelpFormatter(\"prog\", width=42)\n1831     assert formatter._width == 42\n1832 \n1833 \n1834 def test_config_does_not_load_blocked_plugin_from_args(pytester: Pytester) -> None:\n1835     \"\"\"This tests that pytest's config setup handles \"-p no:X\".\"\"\"\n1836     p = pytester.makepyfile(\"def test(capfd): pass\")\n1837     result = pytester.runpytest(str(p), \"-pno:capture\")\n1838     result.stdout.fnmatch_lines([\"E       fixture 'capfd' not found\"])\n1839     assert result.ret == ExitCode.TESTS_FAILED\n1840 \n1841     result = pytester.runpytest(str(p), \"-pno:capture\", \"-s\")\n1842     result.stderr.fnmatch_lines([\"*: error: unrecognized arguments: -s\"])\n1843     assert result.ret == ExitCode.USAGE_ERROR\n1844 \n1845     result = pytester.runpytest(str(p), \"-p no:capture\", \"-s\")\n1846     result.stderr.fnmatch_lines([\"*: error: unrecognized arguments: -s\"])\n1847     assert result.ret == ExitCode.USAGE_ERROR\n1848 \n1849 \n1850 def test_invocation_args(pytester: Pytester) -> None:\n1851     \"\"\"Ensure that Config.invocation_* arguments are correctly defined\"\"\"\n1852 \n1853     class DummyPlugin:\n1854         pass\n1855 \n1856     p = pytester.makepyfile(\"def test(): pass\")\n1857     plugin = DummyPlugin()\n1858     rec = pytester.inline_run(p, \"-v\", plugins=[plugin])\n1859     calls = rec.getcalls(\"pytest_runtest_protocol\")\n1860     assert len(calls) == 1\n1861     call = calls[0]\n1862     config = call.item.config\n1863 \n1864     assert config.invocation_params.args == (str(p), \"-v\")\n1865     assert config.invocation_params.dir == pytester.path\n1866 \n1867     plugins = config.invocation_params.plugins\n1868     assert len(plugins) == 2\n1869     assert plugins[0] is plugin\n1870     assert type(plugins[1]).__name__ == \"Collect\"  # installed by pytester.inline_run()\n1871 \n1872     # args cannot be None\n1873     with pytest.raises(TypeError):\n1874         Config.InvocationParams(args=None, plugins=None, dir=Path())  # type: ignore[arg-type]\n1875 \n1876 \n1877 @pytest.mark.parametrize(\n1878     \"plugin\",\n1879     [\n1880         x\n1881         for x in _pytest.config.default_plugins\n1882         if x not in _pytest.config.essential_plugins\n1883     ],\n1884 )\n1885 def test_config_blocked_default_plugins(pytester: Pytester, plugin: str) -> None:\n1886     if plugin == \"debugging\":\n1887         # Fixed in xdist (after 1.27.0).\n1888         # https://github.com/pytest-dev/pytest-xdist/pull/422\n1889         try:\n1890             import xdist  # noqa: F401\n1891         except ImportError:\n1892             pass\n1893         else:\n1894             pytest.skip(\"does not work with xdist currently\")\n1895 \n1896     p = pytester.makepyfile(\"def test(): pass\")\n1897     result = pytester.runpytest(str(p), \"-pno:%s\" % plugin)\n1898 \n1899     if plugin == \"python\":\n1900         assert result.ret == ExitCode.USAGE_ERROR\n1901         result.stderr.fnmatch_lines(\n1902             [\n1903                 \"ERROR: found no collectors for */test_config_blocked_default_plugins.py\",\n1904             ]\n1905         )\n1906         return\n1907 \n1908     assert result.ret == ExitCode.OK\n1909     if plugin != \"terminal\":\n1910         result.stdout.fnmatch_lines([\"* 1 passed in *\"])\n1911 \n1912     p = pytester.makepyfile(\"def test(): assert 0\")\n1913     result = pytester.runpytest(str(p), \"-pno:%s\" % plugin)\n1914     assert result.ret == ExitCode.TESTS_FAILED\n1915     if plugin != \"terminal\":\n1916         result.stdout.fnmatch_lines([\"* 1 failed in *\"])\n1917     else:\n1918         assert result.stdout.lines == []\n1919 \n1920 \n1921 class TestSetupCfg:\n1922     def test_pytest_setup_cfg_unsupported(self, pytester: Pytester) -> None:\n1923         pytester.makefile(\n1924             \".cfg\",\n1925             setup=\"\"\"\n1926             [pytest]\n1927             addopts = --verbose\n1928         \"\"\",\n1929         )\n1930         with pytest.raises(pytest.fail.Exception):\n1931             pytester.runpytest()\n1932 \n1933     def test_pytest_custom_cfg_unsupported(self, pytester: Pytester) -> None:\n1934         pytester.makefile(\n1935             \".cfg\",\n1936             custom=\"\"\"\n1937             [pytest]\n1938             addopts = --verbose\n1939         \"\"\",\n1940         )\n1941         with pytest.raises(pytest.fail.Exception):\n1942             pytester.runpytest(\"-c\", \"custom.cfg\")\n1943 \n1944         with pytest.raises(pytest.fail.Exception):\n1945             pytester.runpytest(\"--config-file\", \"custom.cfg\")\n1946 \n1947 \n1948 class TestPytestPluginsVariable:\n1949     def test_pytest_plugins_in_non_top_level_conftest_unsupported(\n1950         self, pytester: Pytester\n1951     ) -> None:\n1952         pytester.makepyfile(\n1953             **{\n1954                 \"subdirectory/conftest.py\": \"\"\"\n1955             pytest_plugins=['capture']\n1956         \"\"\"\n1957             }\n1958         )\n1959         pytester.makepyfile(\n1960             \"\"\"\n1961             def test_func():\n1962                 pass\n1963         \"\"\"\n1964         )\n1965         res = pytester.runpytest()\n1966         assert res.ret == 2\n1967         msg = \"Defining 'pytest_plugins' in a non-top-level conftest is no longer supported\"\n1968         res.stdout.fnmatch_lines([f\"*{msg}*\", f\"*subdirectory{os.sep}conftest.py*\"])\n1969 \n1970     @pytest.mark.parametrize(\"use_pyargs\", [True, False])\n1971     def test_pytest_plugins_in_non_top_level_conftest_unsupported_pyargs(\n1972         self, pytester: Pytester, use_pyargs: bool\n1973     ) -> None:\n1974         \"\"\"When using --pyargs, do not emit the warning about non-top-level conftest warnings (#4039, #4044)\"\"\"\n1975 \n1976         files = {\n1977             \"src/pkg/__init__.py\": \"\",\n1978             \"src/pkg/conftest.py\": \"\",\n1979             \"src/pkg/test_root.py\": \"def test(): pass\",\n1980             \"src/pkg/sub/__init__.py\": \"\",\n1981             \"src/pkg/sub/conftest.py\": \"pytest_plugins=['capture']\",\n1982             \"src/pkg/sub/test_bar.py\": \"def test(): pass\",\n1983         }\n1984         pytester.makepyfile(**files)\n1985         pytester.syspathinsert(pytester.path.joinpath(\"src\"))\n1986 \n1987         args = (\"--pyargs\", \"pkg\") if use_pyargs else ()\n1988         res = pytester.runpytest(*args)\n1989         assert res.ret == (0 if use_pyargs else 2)\n1990         msg = (\n1991             msg\n1992         ) = \"Defining 'pytest_plugins' in a non-top-level conftest is no longer supported\"\n1993         if use_pyargs:\n1994             assert msg not in res.stdout.str()\n1995         else:\n1996             res.stdout.fnmatch_lines([f\"*{msg}*\"])\n1997 \n1998     def test_pytest_plugins_in_non_top_level_conftest_unsupported_no_top_level_conftest(\n1999         self, pytester: Pytester\n2000     ) -> None:\n2001         subdirectory = pytester.path.joinpath(\"subdirectory\")\n2002         subdirectory.mkdir()\n2003         pytester.makeconftest(\n2004             \"\"\"\n2005             pytest_plugins=['capture']\n2006         \"\"\"\n2007         )\n2008         pytester.path.joinpath(\"conftest.py\").rename(\n2009             subdirectory.joinpath(\"conftest.py\")\n2010         )\n2011 \n2012         pytester.makepyfile(\n2013             \"\"\"\n2014             def test_func():\n2015                 pass\n2016         \"\"\"\n2017         )\n2018 \n2019         res = pytester.runpytest_subprocess()\n2020         assert res.ret == 2\n2021         msg = \"Defining 'pytest_plugins' in a non-top-level conftest is no longer supported\"\n2022         res.stdout.fnmatch_lines([f\"*{msg}*\", f\"*subdirectory{os.sep}conftest.py*\"])\n2023 \n2024     def test_pytest_plugins_in_non_top_level_conftest_unsupported_no_false_positives(\n2025         self, pytester: Pytester\n2026     ) -> None:\n2027         pytester.makepyfile(\n2028             \"def test_func(): pass\",\n2029             **{\n2030                 \"subdirectory/conftest\": \"pass\",\n2031                 \"conftest\": \"\"\"\n2032                     import warnings\n2033                     warnings.filterwarnings('always', category=DeprecationWarning)\n2034                     pytest_plugins=['capture']\n2035                     \"\"\",\n2036             },\n2037         )\n2038         res = pytester.runpytest_subprocess()\n2039         assert res.ret == 0\n2040         msg = \"Defining 'pytest_plugins' in a non-top-level conftest is no longer supported\"\n2041         assert msg not in res.stdout.str()\n2042 \n2043 \n2044 def test_conftest_import_error_repr(tmp_path: Path) -> None:\n2045     \"\"\"`ConftestImportFailure` should use a short error message and readable\n2046     path to the failed conftest.py file.\"\"\"\n2047     path = tmp_path.joinpath(\"foo/conftest.py\")\n2048     with pytest.raises(\n2049         ConftestImportFailure,\n2050         match=re.escape(f\"RuntimeError: some error (from {path})\"),\n2051     ):\n2052         try:\n2053             raise RuntimeError(\"some error\")\n2054         except Exception as exc:\n2055             assert exc.__traceback__ is not None\n2056             exc_info = (type(exc), exc, exc.__traceback__)\n2057             raise ConftestImportFailure(path, exc_info) from exc\n2058 \n2059 \n2060 def test_strtobool() -> None:\n2061     assert _strtobool(\"YES\")\n2062     assert not _strtobool(\"NO\")\n2063     with pytest.raises(ValueError):\n2064         _strtobool(\"unknown\")\n2065 \n2066 \n2067 @pytest.mark.parametrize(\n2068     \"arg, escape, expected\",\n2069     [\n2070         (\"ignore\", False, (\"ignore\", \"\", Warning, \"\", 0)),\n2071         (\n2072             \"ignore::DeprecationWarning\",\n2073             False,\n2074             (\"ignore\", \"\", DeprecationWarning, \"\", 0),\n2075         ),\n2076         (\n2077             \"ignore:some msg:DeprecationWarning\",\n2078             False,\n2079             (\"ignore\", \"some msg\", DeprecationWarning, \"\", 0),\n2080         ),\n2081         (\n2082             \"ignore::DeprecationWarning:mod\",\n2083             False,\n2084             (\"ignore\", \"\", DeprecationWarning, \"mod\", 0),\n2085         ),\n2086         (\n2087             \"ignore::DeprecationWarning:mod:42\",\n2088             False,\n2089             (\"ignore\", \"\", DeprecationWarning, \"mod\", 42),\n2090         ),\n2091         (\"error:some\\\\msg:::\", True, (\"error\", \"some\\\\\\\\msg\", Warning, \"\", 0)),\n2092         (\"error:::mod\\\\foo:\", True, (\"error\", \"\", Warning, \"mod\\\\\\\\foo\\\\Z\", 0)),\n2093     ],\n2094 )\n2095 def test_parse_warning_filter(\n2096     arg: str, escape: bool, expected: Tuple[str, str, Type[Warning], str, int]\n2097 ) -> None:\n2098     assert parse_warning_filter(arg, escape=escape) == expected\n2099 \n2100 \n2101 @pytest.mark.parametrize(\n2102     \"arg\",\n2103     [\n2104         # Too much parts.\n2105         \":\" * 5,\n2106         # Invalid action.\n2107         \"FOO::\",\n2108         # ImportError when importing the warning class.\n2109         \"::test_parse_warning_filter_failure.NonExistentClass::\",\n2110         # Class is not a Warning subclass.\n2111         \"::list::\",\n2112         # Negative line number.\n2113         \"::::-1\",\n2114         # Not a line number.\n2115         \"::::not-a-number\",\n2116     ],\n2117 )\n2118 def test_parse_warning_filter_failure(arg: str) -> None:\n2119     with pytest.raises(pytest.UsageError):\n2120         parse_warning_filter(arg, escape=True)\n2121 \n2122 \n2123 class TestDebugOptions:\n2124     def test_without_debug_does_not_write_log(self, pytester: Pytester) -> None:\n2125         result = pytester.runpytest()\n2126         result.stderr.no_fnmatch_line(\n2127             \"*writing pytest debug information to*pytestdebug.log\"\n2128         )\n2129         result.stderr.no_fnmatch_line(\n2130             \"*wrote pytest debug information to*pytestdebug.log\"\n2131         )\n2132         assert not [f.name for f in pytester.path.glob(\"**/*.log\")]\n2133 \n2134     def test_with_only_debug_writes_pytestdebug_log(self, pytester: Pytester) -> None:\n2135         result = pytester.runpytest(\"--debug\")\n2136         result.stderr.fnmatch_lines(\n2137             [\n2138                 \"*writing pytest debug information to*pytestdebug.log\",\n2139                 \"*wrote pytest debug information to*pytestdebug.log\",\n2140             ]\n2141         )\n2142         assert \"pytestdebug.log\" in [f.name for f in pytester.path.glob(\"**/*.log\")]\n2143 \n2144     def test_multiple_custom_debug_logs(self, pytester: Pytester) -> None:\n2145         result = pytester.runpytest(\"--debug\", \"bar.log\")\n2146         result.stderr.fnmatch_lines(\n2147             [\n2148                 \"*writing pytest debug information to*bar.log\",\n2149                 \"*wrote pytest debug information to*bar.log\",\n2150             ]\n2151         )\n2152         result = pytester.runpytest(\"--debug\", \"foo.log\")\n2153         result.stderr.fnmatch_lines(\n2154             [\n2155                 \"*writing pytest debug information to*foo.log\",\n2156                 \"*wrote pytest debug information to*foo.log\",\n2157             ]\n2158         )\n2159 \n2160         assert {\"bar.log\", \"foo.log\"} == {\n2161             f.name for f in pytester.path.glob(\"**/*.log\")\n2162         }\n2163 \n2164     def test_debug_help(self, pytester: Pytester) -> None:\n2165         result = pytester.runpytest(\"-h\")\n2166         result.stdout.fnmatch_lines(\n2167             [\n2168                 \"*Store internal tracing debug information in this log*\",\n2169                 \"*file. This file is opened with 'w' and truncated as a*\",\n2170                 \"*Default: pytestdebug.log.\",\n2171             ]\n2172         )\n",
        "intended_behavior": "The tests should ensure that when importlib is used to dynamically load or manipulate modules, it does so in a way that reflects and maintains the integrity of the application's module namespace. Specifically, these methods should: Confirm that dynamically loaded modules do not lead to the unintentional creation of multiple instances or versions of modules intended to be singletons or uniquely represented within the application context. Simulate the application's behavior as closely as possible in terms of module loading and namespace manipulation to detect and prevent scenarios that could lead to discrepancies between test and production environments. Include validation steps to check the uniqueness and consistency of critical modules across different parts of the application, ensuring that changes or actions performed on those modules in one context are recognized and persist across all contexts."
    }
]