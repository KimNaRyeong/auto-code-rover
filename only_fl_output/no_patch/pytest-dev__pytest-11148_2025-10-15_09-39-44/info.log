2025-10-15 09:39:44.642 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-15 09:39:47.915 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=826, output_tokens=12, cost=0.008620
2025-10-15 09:39:47.916 | INFO     | Test agent decides that the issue statement does not contain reproduction steps; skipping reproducer tracing
2025-10-15 09:39:47.920 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 09:39:52.031 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1123, output_tokens=141, cost=0.015460
2025-10-15 09:39:52.050 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 09:39:55.690 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=495, output_tokens=41, cost=0.006180
2025-10-15 09:39:55.691 | DEBUG    | Extracted a valid json.
2025-10-15 09:39:55.691 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_class(\"Logger\")",
        "search_method(\"initialize\")",
        "search_code(\"Logger.store\")"
    ],
    "bug_locations": []
}
2025-10-15 09:39:55.705 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-15 09:39:55.705 | DEBUG    | <Agent search> Analyzing search results.
2025-10-15 09:40:10.770 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1431, output_tokens=529, cost=0.030180
2025-10-15 09:40:10.798 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 09:40:24.587 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2176, output_tokens=463, cost=0.035650
2025-10-15 09:40:24.595 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 09:40:32.643 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=817, output_tokens=213, cost=0.014560
2025-10-15 09:40:32.645 | DEBUG    | Extracted a valid json.
2025-10-15 09:40:32.645 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations": [
        {
            "file": "pmxbot/logging.py",
            "class": "Logger",
            "method": "",
            "intended_behavior": "Ensure that the `Logger` class correctly initializes its `store` attribute in a way that it is universally accessible and modified by the rest of the application, including `core.initialize()`. This may involve defining the `store` attribute at the module level or using a Singleton pattern to prevent duplicate instances."
        },
        {
            "file": "pmxbot/core.py",
            "class": "",
            "method": "initialize",
            "intended_behavior": "Modify the `initialize` function to ensure it correctly interacts with `pmxbot.logging` under the `importlib` mechanism. This may involve explicitly setting up or checking the presence of `pmxbot.logging.Logger` in `sys.modules` before attempting to modify it, thus ensuring that modifications happen to the correct instance of the module/class."
        }
    ]
}
2025-10-15 09:40:32.649 | DEBUG    | Failed to retrieve code from all bug locations. Asking search agent to re-generate response.
2025-10-15 09:40:32.650 | DEBUG    | <Agent search> Downstream could not consume our last response. Will retry.
2025-10-15 09:40:32.650 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 09:40:43.696 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2673, output_tokens=294, cost=0.035550
2025-10-15 09:40:43.702 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 09:40:45.720 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=648, output_tokens=14, cost=0.006900
2025-10-15 09:40:45.721 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-15 09:40:45.721 | DEBUG    | Trying to convert API calls/bug locations into json. Try 2 of 5.
2025-10-15 09:40:47.823 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=648, output_tokens=14, cost=0.006900
2025-10-15 09:40:47.824 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-15 09:40:47.824 | DEBUG    | Trying to convert API calls/bug locations into json. Try 3 of 5.
2025-10-15 09:40:49.084 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=648, output_tokens=14, cost=0.006900
2025-10-15 09:40:49.086 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-15 09:40:49.086 | DEBUG    | Trying to convert API calls/bug locations into json. Try 4 of 5.
2025-10-15 09:40:50.878 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=648, output_tokens=14, cost=0.006900
2025-10-15 09:40:50.879 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-15 09:40:50.879 | DEBUG    | Trying to convert API calls/bug locations into json. Try 5 of 5.
2025-10-15 09:40:52.101 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=648, output_tokens=14, cost=0.006900
2025-10-15 09:40:52.102 | DEBUG    | Both API_calls and bug_locations are empty. Will retry.
2025-10-15 09:40:52.103 | DEBUG    | Agent proxy return the following json: None
2025-10-15 09:40:52.103 | DEBUG    | Could not extract API calls from agent search response, asking search agent to re-generate response.
2025-10-15 09:40:52.104 | DEBUG    | <Agent search> Downstream could not consume our last response. Will retry.
2025-10-15 09:40:52.104 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 09:41:01.338 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2994, output_tokens=327, cost=0.039750
2025-10-15 09:41:01.359 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 09:41:04.177 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=681, output_tokens=43, cost=0.008100
2025-10-15 09:41:04.178 | DEBUG    | Extracted a valid json.
2025-10-15 09:41:04.178 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_code(\"importlib\")",
        "search_code(\"def initialize\")",
        "search_code(\"class Logger\")"
    ],
    "bug_locations": []
}
2025-10-15 09:41:04.288 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-15 09:41:04.288 | DEBUG    | <Agent search> Analyzing search results.
2025-10-15 09:41:19.791 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3824, output_tokens=585, cost=0.055790
2025-10-15 09:41:19.796 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 09:41:34.227 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=4625, output_tokens=600, cost=0.064250
2025-10-15 09:41:34.247 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 09:41:41.120 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=954, output_tokens=240, cost=0.016740
2025-10-15 09:41:41.122 | DEBUG    | Extracted a valid json.
2025-10-15 09:41:41.122 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_code_in_file(\"importlib.import_module\", \"src/_pytest/config/__init__.py\")",
        "search_code_in_file(\"importlib\", \"testing/test_config.py\")"
    ],
    "bug_locations":[
        {
            "file": "src/_pytest/config/__init__.py",
            "class": "",
            "method": "",
            "intended_behavior": "Ensure cohesive and consistent import behavior throughout the application, using importlib effectively to avoid the duplication of modules in sys.modules. This might involve reviewing and potentially revising how pmxbot.logging is imported or initialized, ensuring that the same instance is accessed both in the main application and the test suite."
        },
        {
            "file": "testing/test_config.py",
            "class": "",
            "method": "",
            "intended_behavior": "Revise the test suite setup to ensure that it mirrors the main application's environment as closely as possible, particularly regarding how importlib is used to load modules. This could involve ensuring that any custom loaders or import mechanisms do not inadvertently create new instances of modules already loaded by the application."
        }
    ]
}
2025-10-15 09:41:41.143 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-15 09:41:41.144 | DEBUG    | <Agent search> Analyzing search results.
2025-10-15 09:41:55.054 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=5603, output_tokens=546, cost=0.072410
2025-10-15 09:41:55.065 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 09:42:06.401 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=6365, output_tokens=392, cost=0.075410
2025-10-15 09:42:06.410 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 09:42:14.111 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=746, output_tokens=251, cost=0.014990
2025-10-15 09:42:14.112 | DEBUG    | Extracted a valid json.
2025-10-15 09:42:14.112 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations": [
        {
            "file": "testing/test_config.py",
            "methods": [
                "test_missing_required_plugins",
                "test_preparse_ordering_with_setuptools",
                "test_setuptools_importerror_issue1479",
                "test_importlib_metadata_broken_distribution",
                "test_plugin_preparse_prevents_setuptools_loading",
                "test_disable_plugin_autoload"
            ],
            "intended_behavior": "The tests should ensure that when importlib is used to dynamically load or manipulate modules, it does so in a way that reflects and maintains the integrity of the application's module namespace. Specifically, these methods should: Confirm that dynamically loaded modules do not lead to the unintentional creation of multiple instances or versions of modules intended to be singletons or uniquely represented within the application context. Simulate the application's behavior as closely as possible in terms of module loading and namespace manipulation to detect and prevent scenarios that could lead to discrepancies between test and production environments. Include validation steps to check the uniqueness and consistency of critical modules across different parts of the application, ensuring that changes or actions performed on those modules in one context are recognized and persist across all contexts."
        }
    ]
}
2025-10-15 09:42:14.123 | DEBUG    | Bug location extracted successfully: [<file>testing/test_config.py</file>
<class>None</class>
<method>None</method>
<code>
1 import dataclasses
2 import importlib.metadata
3 import os
4 import re
5 import sys
6 import textwrap
7 from pathlib import Path
8 from typing import Dict
9 from typing import List
10 from typing import Sequence
11 from typing import Tuple
12 from typing import Type
13 from typing import Union
14 
15 import _pytest._code
16 import pytest
17 from _pytest.config import _get_plugin_specs_as_list
18 from _pytest.config import _iter_rewritable_modules
19 from _pytest.config import _strtobool
20 from _pytest.config import Config
21 from _pytest.config import ConftestImportFailure
22 from _pytest.config import ExitCode
23 from _pytest.config import parse_warning_filter
24 from _pytest.config.exceptions import UsageError
25 from _pytest.config.findpaths import determine_setup
26 from _pytest.config.findpaths import get_common_ancestor
27 from _pytest.config.findpaths import locate_config
28 from _pytest.monkeypatch import MonkeyPatch
29 from _pytest.pathlib import absolutepath
30 from _pytest.pytester import Pytester
31 
32 
33 class TestParseIni:
34     @pytest.mark.parametrize(
35         "section, filename", [("pytest", "pytest.ini"), ("tool:pytest", "setup.cfg")]
36     )
37     def test_getcfg_and_config(
38         self,
39         pytester: Pytester,
40         tmp_path: Path,
41         section: str,
42         filename: str,
43         monkeypatch: MonkeyPatch,
44     ) -> None:
45         sub = tmp_path / "sub"
46         sub.mkdir()
47         monkeypatch.chdir(sub)
48         (tmp_path / filename).write_text(
49             textwrap.dedent(
50                 """\
51                 [{section}]
52                 name = value
53                 """.format(
54                     section=section
55                 )
56             ),
57             encoding="utf-8",
58         )
59         _, _, cfg = locate_config([sub])
60         assert cfg["name"] == "value"
61         config = pytester.parseconfigure(str(sub))
62         assert config.inicfg["name"] == "value"
63 
64     def test_setupcfg_uses_toolpytest_with_pytest(self, pytester: Pytester) -> None:
65         p1 = pytester.makepyfile("def test(): pass")
66         pytester.makefile(
67             ".cfg",
68             setup="""
69                 [tool:pytest]
70                 testpaths=%s
71                 [pytest]
72                 testpaths=ignored
73         """
74             % p1.name,
75         )
76         result = pytester.runpytest()
77         result.stdout.fnmatch_lines(["configfile: setup.cfg", "* 1 passed in *"])
78         assert result.ret == 0
79 
80     def test_append_parse_args(
81         self, pytester: Pytester, tmp_path: Path, monkeypatch: MonkeyPatch
82     ) -> None:
83         monkeypatch.setenv("PYTEST_ADDOPTS", '--color no -rs --tb="short"')
84         tmp_path.joinpath("pytest.ini").write_text(
85             textwrap.dedent(
86                 """\
87                 [pytest]
88                 addopts = --verbose
89                 """
90             ),
91             encoding="utf-8",
92         )
93         config = pytester.parseconfig(tmp_path)
94         assert config.option.color == "no"
95         assert config.option.reportchars == "s"
96         assert config.option.tbstyle == "short"
97         assert config.option.verbose
98 
99     def test_tox_ini_wrong_version(self, pytester: Pytester) -> None:
100         pytester.makefile(
101             ".ini",
102             tox="""
103             [pytest]
104             minversion=999.0
105         """,
106         )
107         result = pytester.runpytest()
108         assert result.ret != 0
109         result.stderr.fnmatch_lines(
110             ["*tox.ini: 'minversion' requires pytest-999.0, actual pytest-*"]
111         )
112 
113     @pytest.mark.parametrize(
114         "section, name",
115         [
116             ("tool:pytest", "setup.cfg"),
117             ("pytest", "tox.ini"),
118             ("pytest", "pytest.ini"),
119             ("pytest", ".pytest.ini"),
120         ],
121     )
122     def test_ini_names(self, pytester: Pytester, name, section) -> None:
123         pytester.path.joinpath(name).write_text(
124             textwrap.dedent(
125                 """
126             [{section}]
127             minversion = 3.36
128         """.format(
129                     section=section
130                 )
131             ),
132             encoding="utf-8",
133         )
134         config = pytester.parseconfig()
135         assert config.getini("minversion") == "3.36"
136 
137     def test_pyproject_toml(self, pytester: Pytester) -> None:
138         pytester.makepyprojecttoml(
139             """
140             [tool.pytest.ini_options]
141             minversion = "1.0"
142         """
143         )
144         config = pytester.parseconfig()
145         assert config.getini("minversion") == "1.0"
146 
147     def test_toxini_before_lower_pytestini(self, pytester: Pytester) -> None:
148         sub = pytester.mkdir("sub")
149         sub.joinpath("tox.ini").write_text(
150             textwrap.dedent(
151                 """
152             [pytest]
153             minversion = 2.0
154         """
155             ),
156             encoding="utf-8",
157         )
158         pytester.path.joinpath("pytest.ini").write_text(
159             textwrap.dedent(
160                 """
161             [pytest]
162             minversion = 1.5
163         """
164             ),
165             encoding="utf-8",
166         )
167         config = pytester.parseconfigure(sub)
168         assert config.getini("minversion") == "2.0"
169 
170     def test_ini_parse_error(self, pytester: Pytester) -> None:
171         pytester.path.joinpath("pytest.ini").write_text(
172             "addopts = -x", encoding="utf-8"
173         )
174         result = pytester.runpytest()
175         assert result.ret != 0
176         result.stderr.fnmatch_lines("ERROR: *pytest.ini:1: no section header defined")
177 
178     def test_toml_parse_error(self, pytester: Pytester) -> None:
179         pytester.makepyprojecttoml(
180             """
181             \\"
182             """
183         )
184         result = pytester.runpytest()
185         assert result.ret != 0
186         result.stderr.fnmatch_lines("ERROR: *pyproject.toml: Invalid statement*")
187 
188     def test_confcutdir_default_without_configfile(self, pytester: Pytester) -> None:
189         # If --confcutdir is not specified, and there is no configfile, default
190         # to the roothpath.
191         sub = pytester.mkdir("sub")
192         os.chdir(sub)
193         config = pytester.parseconfigure()
194         assert config.pluginmanager._confcutdir == sub
195 
196     def test_confcutdir_default_with_configfile(self, pytester: Pytester) -> None:
197         # If --confcutdir is not specified, and there is a configfile, default
198         # to the configfile's directory.
199         pytester.makeini("[pytest]")
200         sub = pytester.mkdir("sub")
201         os.chdir(sub)
202         config = pytester.parseconfigure()
203         assert config.pluginmanager._confcutdir == pytester.path
204 
205     @pytest.mark.xfail(reason="probably not needed")
206     def test_confcutdir(self, pytester: Pytester) -> None:
207         sub = pytester.mkdir("sub")
208         os.chdir(sub)
209         pytester.makeini(
210             """
211             [pytest]
212             addopts = --qwe
213         """
214         )
215         result = pytester.inline_run("--confcutdir=.")
216         assert result.ret == 0
217 
218     @pytest.mark.parametrize(
219         "ini_file_text, invalid_keys, warning_output, exception_text",
220         [
221             pytest.param(
222                 """
223                 [pytest]
224                 unknown_ini = value1
225                 another_unknown_ini = value2
226                 """,
227                 ["unknown_ini", "another_unknown_ini"],
228                 [
229                     "=*= warnings summary =*=",
230                     "*PytestConfigWarning:*Unknown config option: another_unknown_ini",
231                     "*PytestConfigWarning:*Unknown config option: unknown_ini",
232                 ],
233                 "Unknown config option: another_unknown_ini",
234                 id="2-unknowns",
235             ),
236             pytest.param(
237                 """
238                 [pytest]
239                 unknown_ini = value1
240                 minversion = 5.0.0
241                 """,
242                 ["unknown_ini"],
243                 [
244                     "=*= warnings summary =*=",
245                     "*PytestConfigWarning:*Unknown config option: unknown_ini",
246                 ],
247                 "Unknown config option: unknown_ini",
248                 id="1-unknown",
249             ),
250             pytest.param(
251                 """
252                 [some_other_header]
253                 unknown_ini = value1
254                 [pytest]
255                 minversion = 5.0.0
256                 """,
257                 [],
258                 [],
259                 "",
260                 id="unknown-in-other-header",
261             ),
262             pytest.param(
263                 """
264                 [pytest]
265                 minversion = 5.0.0
266                 """,
267                 [],
268                 [],
269                 "",
270                 id="no-unknowns",
271             ),
272             pytest.param(
273                 """
274                 [pytest]
275                 conftest_ini_key = 1
276                 """,
277                 [],
278                 [],
279                 "",
280                 id="1-known",
281             ),
282         ],
283     )
284     @pytest.mark.filterwarnings("default")
285     def test_invalid_config_options(
286         self,
287         pytester: Pytester,
288         ini_file_text,
289         invalid_keys,
290         warning_output,
291         exception_text,
292     ) -> None:
293         pytester.makeconftest(
294             """
295             def pytest_addoption(parser):
296                 parser.addini("conftest_ini_key", "")
297             """
298         )
299         pytester.makepyfile("def test(): pass")
300         pytester.makeini(ini_file_text)
301 
302         config = pytester.parseconfig()
303         assert sorted(config._get_unknown_ini_keys()) == sorted(invalid_keys)
304 
305         result = pytester.runpytest()
306         result.stdout.fnmatch_lines(warning_output)
307 
308         result = pytester.runpytest("--strict-config")
309         if exception_text:
310             result.stderr.fnmatch_lines("ERROR: " + exception_text)
311             assert result.ret == pytest.ExitCode.USAGE_ERROR
312         else:
313             result.stderr.no_fnmatch_line(exception_text)
314             assert result.ret == pytest.ExitCode.OK
315 
316     @pytest.mark.filterwarnings("default")
317     def test_silence_unknown_key_warning(self, pytester: Pytester) -> None:
318         """Unknown config key warnings can be silenced using filterwarnings (#7620)"""
319         pytester.makeini(
320             """
321             [pytest]
322             filterwarnings =
323                 ignore:Unknown config option:pytest.PytestConfigWarning
324             foobar=1
325         """
326         )
327         result = pytester.runpytest()
328         result.stdout.no_fnmatch_line("*PytestConfigWarning*")
329 
330     @pytest.mark.filterwarnings("default::pytest.PytestConfigWarning")
331     def test_disable_warnings_plugin_disables_config_warnings(
332         self, pytester: Pytester
333     ) -> None:
334         """Disabling 'warnings' plugin also disables config time warnings"""
335         pytester.makeconftest(
336             """
337             import pytest
338             def pytest_configure(config):
339                 config.issue_config_time_warning(
340                     pytest.PytestConfigWarning("custom config warning"),
341                     stacklevel=2,
342                 )
343         """
344         )
345         result = pytester.runpytest("-pno:warnings")
346         result.stdout.no_fnmatch_line("*PytestConfigWarning*")
347 
348     @pytest.mark.parametrize(
349         "ini_file_text, plugin_version, exception_text",
350         [
351             pytest.param(
352                 """
353                 [pytest]
354                 required_plugins = a z
355                 """,
356                 "1.5",
357                 "Missing required plugins: a, z",
358                 id="2-missing",
359             ),
360             pytest.param(
361                 """
362                 [pytest]
363                 required_plugins = a z myplugin
364                 """,
365                 "1.5",
366                 "Missing required plugins: a, z",
367                 id="2-missing-1-ok",
368             ),
369             pytest.param(
370                 """
371                 [pytest]
372                 required_plugins = myplugin
373                 """,
374                 "1.5",
375                 None,
376                 id="1-ok",
377             ),
378             pytest.param(
379                 """
380                 [pytest]
381                 required_plugins = myplugin==1.5
382                 """,
383                 "1.5",
384                 None,
385                 id="1-ok-pin-exact",
386             ),
387             pytest.param(
388                 """
389                 [pytest]
390                 required_plugins = myplugin>1.0,<2.0
391                 """,
392                 "1.5",
393                 None,
394                 id="1-ok-pin-loose",
395             ),
396             pytest.param(
397                 """
398                 [pytest]
399                 required_plugins = myplugin
400                 """,
401                 "1.5a1",
402                 None,
403                 id="1-ok-prerelease",
404             ),
405             pytest.param(
406                 """
407                 [pytest]
408                 required_plugins = myplugin==1.6
409                 """,
410                 "1.5",
411                 "Missing required plugins: myplugin==1.6",
412                 id="missing-version",
413             ),
414             pytest.param(
415                 """
416                 [pytest]
417                 required_plugins = myplugin==1.6 other==1.0
418                 """,
419                 "1.5",
420                 "Missing required plugins: myplugin==1.6, other==1.0",
421                 id="missing-versions",
422             ),
423             pytest.param(
424                 """
425                 [some_other_header]
426                 required_plugins = won't be triggered
427                 [pytest]
428                 """,
429                 "1.5",
430                 None,
431                 id="invalid-header",
432             ),
433         ],
434     )
435     def test_missing_required_plugins(
436         self,
437         pytester: Pytester,
438         monkeypatch: MonkeyPatch,
439         ini_file_text: str,
440         plugin_version: str,
441         exception_text: str,
442     ) -> None:
443         """Check 'required_plugins' option with various settings.
444 
445         This test installs a mock "myplugin-1.5" which is used in the parametrized test cases.
446         """
447 
448         @dataclasses.dataclass
449         class DummyEntryPoint:
450             name: str
451             module: str
452             group: str = "pytest11"
453 
454             def load(self):
455                 __import__(self.module)
456                 return sys.modules[self.module]
457 
458         entry_points = [
459             DummyEntryPoint("myplugin1", "myplugin1_module"),
460         ]
461 
462         @dataclasses.dataclass
463         class DummyDist:
464             entry_points: object
465             files: object = ()
466             version: str = plugin_version
467 
468             @property
469             def metadata(self):
470                 return {"name": "myplugin"}
471 
472         def my_dists():
473             return [DummyDist(entry_points)]
474 
475         pytester.makepyfile(myplugin1_module="# my plugin module")
476         pytester.syspathinsert()
477 
478         monkeypatch.setattr(importlib.metadata, "distributions", my_dists)
479         monkeypatch.delenv("PYTEST_DISABLE_PLUGIN_AUTOLOAD", raising=False)
480 
481         pytester.makeini(ini_file_text)
482 
483         if exception_text:
484             with pytest.raises(pytest.UsageError, match=exception_text):
485                 pytester.parseconfig()
486         else:
487             pytester.parseconfig()
488 
489     def test_early_config_cmdline(
490         self, pytester: Pytester, monkeypatch: MonkeyPatch
491     ) -> None:
492         """early_config contains options registered by third-party plugins.
493 
494         This is a regression involving pytest-cov (and possibly others) introduced in #7700.
495         """
496         pytester.makepyfile(
497             myplugin="""
498             def pytest_addoption(parser):
499                 parser.addoption('--foo', default=None, dest='foo')
500 
501             def pytest_load_initial_conftests(early_config, parser, args):
502                 assert early_config.known_args_namespace.foo == "1"
503             """
504         )
505         monkeypatch.setenv("PYTEST_PLUGINS", "myplugin")
506         pytester.syspathinsert()
507         result = pytester.runpytest("--foo=1")
508         result.stdout.fnmatch_lines("* no tests ran in *")
509 
510 
511 class TestConfigCmdlineParsing:
512     def test_parsing_again_fails(self, pytester: Pytester) -> None:
513         config = pytester.parseconfig()
514         pytest.raises(AssertionError, lambda: config.parse([]))
515 
516     def test_explicitly_specified_config_file_is_loaded(
517         self, pytester: Pytester
518     ) -> None:
519         pytester.makeconftest(
520             """
521             def pytest_addoption(parser):
522                 parser.addini("custom", "")
523         """
524         )
525         pytester.makeini(
526             """
527             [pytest]
528             custom = 0
529         """
530         )
531         pytester.makefile(
532             ".ini",
533             custom="""
534             [pytest]
535             custom = 1
536         """,
537         )
538         config = pytester.parseconfig("-c", "custom.ini")
539         assert config.getini("custom") == "1"
540         config = pytester.parseconfig("--config-file", "custom.ini")
541         assert config.getini("custom") == "1"
542 
543         pytester.makefile(
544             ".cfg",
545             custom_tool_pytest_section="""
546             [tool:pytest]
547             custom = 1
548         """,
549         )
550         config = pytester.parseconfig("-c", "custom_tool_pytest_section.cfg")
551         assert config.getini("custom") == "1"
552         config = pytester.parseconfig("--config-file", "custom_tool_pytest_section.cfg")
553         assert config.getini("custom") == "1"
554 
555         pytester.makefile(
556             ".toml",
557             custom="""
558                 [tool.pytest.ini_options]
559                 custom = 1
560                 value = [
561                 ]  # this is here on purpose, as it makes this an invalid '.ini' file
562             """,
563         )
564         config = pytester.parseconfig("-c", "custom.toml")
565         assert config.getini("custom") == "1"
566         config = pytester.parseconfig("--config-file", "custom.toml")
567         assert config.getini("custom") == "1"
568 
569     def test_absolute_win32_path(self, pytester: Pytester) -> None:
570         temp_ini_file = pytester.makefile(
571             ".ini",
572             custom="""
573             [pytest]
574             addopts = --version
575         """,
576         )
577         from os.path import normpath
578 
579         temp_ini_file_norm = normpath(str(temp_ini_file))
580         ret = pytest.main(["-c", temp_ini_file_norm])
581         assert ret == ExitCode.OK
582         ret = pytest.main(["--config-file", temp_ini_file_norm])
583         assert ret == ExitCode.OK
584 
585 
586 class TestConfigAPI:
587     def test_config_trace(self, pytester: Pytester) -> None:
588         config = pytester.parseconfig()
589         values: List[str] = []
590         config.trace.root.setwriter(values.append)
591         config.trace("hello")
592         assert len(values) == 1
593         assert values[0] == "hello [config]\n"
594 
595     def test_config_getoption(self, pytester: Pytester) -> None:
596         pytester.makeconftest(
597             """
598             def pytest_addoption(parser):
599                 parser.addoption("--hello", "-X", dest="hello")
600         """
601         )
602         config = pytester.parseconfig("--hello=this")
603         for x in ("hello", "--hello", "-X"):
604             assert config.getoption(x) == "this"
605         pytest.raises(ValueError, config.getoption, "qweqwe")
606 
607     def test_config_getoption_unicode(self, pytester: Pytester) -> None:
608         pytester.makeconftest(
609             """
610             def pytest_addoption(parser):
611                 parser.addoption('--hello', type=str)
612         """
613         )
614         config = pytester.parseconfig("--hello=this")
615         assert config.getoption("hello") == "this"
616 
617     def test_config_getvalueorskip(self, pytester: Pytester) -> None:
618         config = pytester.parseconfig()
619         pytest.raises(pytest.skip.Exception, config.getvalueorskip, "hello")
620         verbose = config.getvalueorskip("verbose")
621         assert verbose == config.option.verbose
622 
623     def test_config_getvalueorskip_None(self, pytester: Pytester) -> None:
624         pytester.makeconftest(
625             """
626             def pytest_addoption(parser):
627                 parser.addoption("--hello")
628         """
629         )
630         config = pytester.parseconfig()
631         with pytest.raises(pytest.skip.Exception):
632             config.getvalueorskip("hello")
633 
634     def test_getoption(self, pytester: Pytester) -> None:
635         config = pytester.parseconfig()
636         with pytest.raises(ValueError):
637             config.getvalue("x")
638         assert config.getoption("x", 1) == 1
639 
640     def test_getconftest_pathlist(self, pytester: Pytester, tmp_path: Path) -> None:
641         somepath = tmp_path.joinpath("x", "y", "z")
642         p = tmp_path.joinpath("conftest.py")
643         p.write_text(f"mylist = {['.', str(somepath)]}", encoding="utf-8")
644         config = pytester.parseconfigure(p)
645         assert (
646             config._getconftest_pathlist("notexist", path=tmp_path, rootpath=tmp_path)
647             is None
648         )
649         pl = (
650             config._getconftest_pathlist("mylist", path=tmp_path, rootpath=tmp_path)
651             or []
652         )
653         print(pl)
654         assert len(pl) == 2
655         assert pl[0] == tmp_path
656         assert pl[1] == somepath
657 
658     @pytest.mark.parametrize("maybe_type", ["not passed", "None", '"string"'])
659     def test_addini(self, pytester: Pytester, maybe_type: str) -> None:
660         if maybe_type == "not passed":
661             type_string = ""
662         else:
663             type_string = f", {maybe_type}"
664 
665         pytester.makeconftest(
666             f"""
667             def pytest_addoption(parser):
668                 parser.addini("myname", "my new ini value"{type_string})
669         """
670         )
671         pytester.makeini(
672             """
673             [pytest]
674             myname=hello
675         """
676         )
677         config = pytester.parseconfig()
678         val = config.getini("myname")
679         assert val == "hello"
680         pytest.raises(ValueError, config.getini, "other")
681 
682     @pytest.mark.parametrize("config_type", ["ini", "pyproject"])
683     def test_addini_paths(self, pytester: Pytester, config_type: str) -> None:
684         pytester.makeconftest(
685             """
686             def pytest_addoption(parser):
687                 parser.addini("paths", "my new ini value", type="paths")
688                 parser.addini("abc", "abc value")
689         """
690         )
691         if config_type == "ini":
692             inipath = pytester.makeini(
693                 """
694                 [pytest]
695                 paths=hello world/sub.py
696             """
697             )
698         elif config_type == "pyproject":
699             inipath = pytester.makepyprojecttoml(
700                 """
701                 [tool.pytest.ini_options]
702                 paths=["hello", "world/sub.py"]
703             """
704             )
705         config = pytester.parseconfig()
706         values = config.getini("paths")
707         assert len(values) == 2
708         assert values[0] == inipath.parent.joinpath("hello")
709         assert values[1] == inipath.parent.joinpath("world/sub.py")
710         pytest.raises(ValueError, config.getini, "other")
711 
712     def make_conftest_for_args(self, pytester: Pytester) -> None:
713         pytester.makeconftest(
714             """
715             def pytest_addoption(parser):
716                 parser.addini("args", "new args", type="args")
717                 parser.addini("a2", "", "args", default="1 2 3".split())
718         """
719         )
720 
721     def test_addini_args_ini_files(self, pytester: Pytester) -> None:
722         self.make_conftest_for_args(pytester)
723         pytester.makeini(
724             """
725             [pytest]
726             args=123 "123 hello" "this"
727             """
728         )
729         self.check_config_args(pytester)
730 
731     def test_addini_args_pyproject_toml(self, pytester: Pytester) -> None:
732         self.make_conftest_for_args(pytester)
733         pytester.makepyprojecttoml(
734             """
735             [tool.pytest.ini_options]
736             args = ["123", "123 hello", "this"]
737             """
738         )
739         self.check_config_args(pytester)
740 
741     def check_config_args(self, pytester: Pytester) -> None:
742         config = pytester.parseconfig()
743         values = config.getini("args")
744         assert values == ["123", "123 hello", "this"]
745         values = config.getini("a2")
746         assert values == list("123")
747 
748     def make_conftest_for_linelist(self, pytester: Pytester) -> None:
749         pytester.makeconftest(
750             """
751             def pytest_addoption(parser):
752                 parser.addini("xy", "", type="linelist")
753                 parser.addini("a2", "", "linelist")
754         """
755         )
756 
757     def test_addini_linelist_ini_files(self, pytester: Pytester) -> None:
758         self.make_conftest_for_linelist(pytester)
759         pytester.makeini(
760             """
761             [pytest]
762             xy= 123 345
763                 second line
764         """
765         )
766         self.check_config_linelist(pytester)
767 
768     def test_addini_linelist_pprojecttoml(self, pytester: Pytester) -> None:
769         self.make_conftest_for_linelist(pytester)
770         pytester.makepyprojecttoml(
771             """
772             [tool.pytest.ini_options]
773             xy = ["123 345", "second line"]
774         """
775         )
776         self.check_config_linelist(pytester)
777 
778     def check_config_linelist(self, pytester: Pytester) -> None:
779         config = pytester.parseconfig()
780         values = config.getini("xy")
781         assert len(values) == 2
782         assert values == ["123 345", "second line"]
783         values = config.getini("a2")
784         assert values == []
785 
786     @pytest.mark.parametrize(
787         "str_val, bool_val", [("True", True), ("no", False), ("no-ini", True)]
788     )
789     def test_addini_bool(
790         self, pytester: Pytester, str_val: str, bool_val: bool
791     ) -> None:
792         pytester.makeconftest(
793             """
794             def pytest_addoption(parser):
795                 parser.addini("strip", "", type="bool", default=True)
796         """
797         )
798         if str_val != "no-ini":
799             pytester.makeini(
800                 """
801                 [pytest]
802                 strip=%s
803             """
804                 % str_val
805             )
806         config = pytester.parseconfig()
807         assert config.getini("strip") is bool_val
808 
809     def test_addinivalue_line_existing(self, pytester: Pytester) -> None:
810         pytester.makeconftest(
811             """
812             def pytest_addoption(parser):
813                 parser.addini("xy", "", type="linelist")
814         """
815         )
816         pytester.makeini(
817             """
818             [pytest]
819             xy= 123
820         """
821         )
822         config = pytester.parseconfig()
823         values = config.getini("xy")
824         assert len(values) == 1
825         assert values == ["123"]
826         config.addinivalue_line("xy", "456")
827         values = config.getini("xy")
828         assert len(values) == 2
829         assert values == ["123", "456"]
830 
831     def test_addinivalue_line_new(self, pytester: Pytester) -> None:
832         pytester.makeconftest(
833             """
834             def pytest_addoption(parser):
835                 parser.addini("xy", "", type="linelist")
836         """
837         )
838         config = pytester.parseconfig()
839         assert not config.getini("xy")
840         config.addinivalue_line("xy", "456")
841         values = config.getini("xy")
842         assert len(values) == 1
843         assert values == ["456"]
844         config.addinivalue_line("xy", "123")
845         values = config.getini("xy")
846         assert len(values) == 2
847         assert values == ["456", "123"]
848 
849     def test_confcutdir_check_isdir(self, pytester: Pytester) -> None:
850         """Give an error if --confcutdir is not a valid directory (#2078)"""
851         exp_match = r"^--confcutdir must be a directory, given: "
852         with pytest.raises(pytest.UsageError, match=exp_match):
853             pytester.parseconfig("--confcutdir", pytester.path.joinpath("file"))
854         with pytest.raises(pytest.UsageError, match=exp_match):
855             pytester.parseconfig("--confcutdir", pytester.path.joinpath("nonexistent"))
856 
857         p = pytester.mkdir("dir")
858         config = pytester.parseconfig("--confcutdir", p)
859         assert config.getoption("confcutdir") == str(p)
860 
861     @pytest.mark.parametrize(
862         "names, expected",
863         [
864             # dist-info based distributions root are files as will be put in PYTHONPATH
865             (["bar.py"], ["bar"]),
866             (["foo/bar.py"], ["bar"]),
867             (["foo/bar.pyc"], []),
868             (["foo/__init__.py"], ["foo"]),
869             (["bar/__init__.py", "xz.py"], ["bar", "xz"]),
870             (["setup.py"], []),
871             # egg based distributions root contain the files from the dist root
872             (["src/bar/__init__.py"], ["bar"]),
873             (["src/bar/__init__.py", "setup.py"], ["bar"]),
874             (["source/python/bar/__init__.py", "setup.py"], ["bar"]),
875             # editable installation finder modules
876             (["__editable___xyz_finder.py"], []),
877             (["bar/__init__.py", "__editable___xyz_finder.py"], ["bar"]),
878         ],
879     )
880     def test_iter_rewritable_modules(self, names, expected) -> None:
881         assert list(_iter_rewritable_modules(names)) == expected
882 
883 
884 class TestConfigFromdictargs:
885     def test_basic_behavior(self, _sys_snapshot) -> None:
886         option_dict = {"verbose": 444, "foo": "bar", "capture": "no"}
887         args = ["a", "b"]
888 
889         config = Config.fromdictargs(option_dict, args)
890         with pytest.raises(AssertionError):
891             config.parse(["should refuse to parse again"])
892         assert config.option.verbose == 444
893         assert config.option.foo == "bar"
894         assert config.option.capture == "no"
895         assert config.args == args
896 
897     def test_invocation_params_args(self, _sys_snapshot) -> None:
898         """Show that fromdictargs can handle args in their "orig" format"""
899         option_dict: Dict[str, object] = {}
900         args = ["-vvvv", "-s", "a", "b"]
901 
902         config = Config.fromdictargs(option_dict, args)
903         assert config.args == ["a", "b"]
904         assert config.invocation_params.args == tuple(args)
905         assert config.option.verbose == 4
906         assert config.option.capture == "no"
907 
908     def test_inifilename(self, tmp_path: Path) -> None:
909         d1 = tmp_path.joinpath("foo")
910         d1.mkdir()
911         p1 = d1.joinpath("bar.ini")
912         p1.touch()
913         p1.write_text(
914             textwrap.dedent(
915                 """\
916                 [pytest]
917                 name = value
918                 """
919             ),
920             encoding="utf-8",
921         )
922 
923         inifilename = "../../foo/bar.ini"
924         option_dict = {"inifilename": inifilename, "capture": "no"}
925 
926         cwd = tmp_path.joinpath("a/b")
927         cwd.mkdir(parents=True)
928         p2 = cwd.joinpath("pytest.ini")
929         p2.touch()
930         p2.write_text(
931             textwrap.dedent(
932                 """\
933                 [pytest]
934                 name = wrong-value
935                 should_not_be_set = true
936                 """
937             ),
938             encoding="utf-8",
939         )
940         with MonkeyPatch.context() as mp:
941             mp.chdir(cwd)
942             config = Config.fromdictargs(option_dict, ())
943             inipath = absolutepath(inifilename)
944 
945         assert config.args == [str(cwd)]
946         assert config.option.inifilename == inifilename
947         assert config.option.capture == "no"
948 
949         # this indicates this is the file used for getting configuration values
950         assert config.inipath == inipath
951         assert config.inicfg.get("name") == "value"
952         assert config.inicfg.get("should_not_be_set") is None
953 
954 
955 def test_options_on_small_file_do_not_blow_up(pytester: Pytester) -> None:
956     def runfiletest(opts: Sequence[str]) -> None:
957         reprec = pytester.inline_run(*opts)
958         passed, skipped, failed = reprec.countoutcomes()
959         assert failed == 2
960         assert skipped == passed == 0
961 
962     path = str(
963         pytester.makepyfile(
964             """
965         def test_f1(): assert 0
966         def test_f2(): assert 0
967     """
968         )
969     )
970 
971     runfiletest([path])
972     runfiletest(["-l", path])
973     runfiletest(["-s", path])
974     runfiletest(["--tb=no", path])
975     runfiletest(["--tb=short", path])
976     runfiletest(["--tb=long", path])
977     runfiletest(["--fulltrace", path])
978     runfiletest(["--traceconfig", path])
979     runfiletest(["-v", path])
980     runfiletest(["-v", "-v", path])
981 
982 
983 def test_preparse_ordering_with_setuptools(
984     pytester: Pytester, monkeypatch: MonkeyPatch
985 ) -> None:
986     monkeypatch.delenv("PYTEST_DISABLE_PLUGIN_AUTOLOAD", raising=False)
987 
988     class EntryPoint:
989         name = "mytestplugin"
990         group = "pytest11"
991 
992         def load(self):
993             class PseudoPlugin:
994                 x = 42
995 
996             return PseudoPlugin()
997 
998     class Dist:
999         files = ()
1000         metadata = {"name": "foo"}
1001         entry_points = (EntryPoint(),)
1002 
1003     def my_dists():
1004         return (Dist,)
1005 
1006     monkeypatch.setattr(importlib.metadata, "distributions", my_dists)
1007     pytester.makeconftest(
1008         """
1009         pytest_plugins = "mytestplugin",
1010     """
1011     )
1012     monkeypatch.setenv("PYTEST_PLUGINS", "mytestplugin")
1013     config = pytester.parseconfig()
1014     plugin = config.pluginmanager.getplugin("mytestplugin")
1015     assert plugin.x == 42
1016 
1017 
1018 def test_setuptools_importerror_issue1479(
1019     pytester: Pytester, monkeypatch: MonkeyPatch
1020 ) -> None:
1021     monkeypatch.delenv("PYTEST_DISABLE_PLUGIN_AUTOLOAD", raising=False)
1022 
1023     class DummyEntryPoint:
1024         name = "mytestplugin"
1025         group = "pytest11"
1026 
1027         def load(self):
1028             raise ImportError("Don't hide me!")
1029 
1030     class Distribution:
1031         version = "1.0"
1032         files = ("foo.txt",)
1033         metadata = {"name": "foo"}
1034         entry_points = (DummyEntryPoint(),)
1035 
1036     def distributions():
1037         return (Distribution(),)
1038 
1039     monkeypatch.setattr(importlib.metadata, "distributions", distributions)
1040     with pytest.raises(ImportError):
1041         pytester.parseconfig()
1042 
1043 
1044 def test_importlib_metadata_broken_distribution(
1045     pytester: Pytester, monkeypatch: MonkeyPatch
1046 ) -> None:
1047     """Integration test for broken distributions with 'files' metadata being None (#5389)"""
1048     monkeypatch.delenv("PYTEST_DISABLE_PLUGIN_AUTOLOAD", raising=False)
1049 
1050     class DummyEntryPoint:
1051         name = "mytestplugin"
1052         group = "pytest11"
1053 
1054         def load(self):
1055             return object()
1056 
1057     class Distribution:
1058         version = "1.0"
1059         files = None
1060         metadata = {"name": "foo"}
1061         entry_points = (DummyEntryPoint(),)
1062 
1063     def distributions():
1064         return (Distribution(),)
1065 
1066     monkeypatch.setattr(importlib.metadata, "distributions", distributions)
1067     pytester.parseconfig()
1068 
1069 
1070 @pytest.mark.parametrize("block_it", [True, False])
1071 def test_plugin_preparse_prevents_setuptools_loading(
1072     pytester: Pytester, monkeypatch: MonkeyPatch, block_it: bool
1073 ) -> None:
1074     monkeypatch.delenv("PYTEST_DISABLE_PLUGIN_AUTOLOAD", raising=False)
1075 
1076     plugin_module_placeholder = object()
1077 
1078     class DummyEntryPoint:
1079         name = "mytestplugin"
1080         group = "pytest11"
1081 
1082         def load(self):
1083             return plugin_module_placeholder
1084 
1085     class Distribution:
1086         version = "1.0"
1087         files = ("foo.txt",)
1088         metadata = {"name": "foo"}
1089         entry_points = (DummyEntryPoint(),)
1090 
1091     def distributions():
1092         return (Distribution(),)
1093 
1094     monkeypatch.setattr(importlib.metadata, "distributions", distributions)
1095     args = ("-p", "no:mytestplugin") if block_it else ()
1096     config = pytester.parseconfig(*args)
1097     config.pluginmanager.import_plugin("mytestplugin")
1098     if block_it:
1099         assert "mytestplugin" not in sys.modules
1100         assert config.pluginmanager.get_plugin("mytestplugin") is None
1101     else:
1102         assert (
1103             config.pluginmanager.get_plugin("mytestplugin") is plugin_module_placeholder
1104         )
1105 
1106 
1107 @pytest.mark.parametrize(
1108     "parse_args,should_load", [(("-p", "mytestplugin"), True), ((), False)]
1109 )
1110 def test_disable_plugin_autoload(
1111     pytester: Pytester,
1112     monkeypatch: MonkeyPatch,
1113     parse_args: Union[Tuple[str, str], Tuple[()]],
1114     should_load: bool,
1115 ) -> None:
1116     class DummyEntryPoint:
1117         project_name = name = "mytestplugin"
1118         group = "pytest11"
1119         version = "1.0"
1120 
1121         def load(self):
1122             return sys.modules[self.name]
1123 
1124     class Distribution:
1125         metadata = {"name": "foo"}
1126         entry_points = (DummyEntryPoint(),)
1127         files = ()
1128 
1129     class PseudoPlugin:
1130         x = 42
1131 
1132         attrs_used = []
1133 
1134         def __getattr__(self, name):
1135             assert name == "__loader__"
1136             self.attrs_used.append(name)
1137             return object()
1138 
1139     def distributions():
1140         return (Distribution(),)
1141 
1142     monkeypatch.setenv("PYTEST_DISABLE_PLUGIN_AUTOLOAD", "1")
1143     monkeypatch.setattr(importlib.metadata, "distributions", distributions)
1144     monkeypatch.setitem(sys.modules, "mytestplugin", PseudoPlugin())  # type: ignore[misc]
1145     config = pytester.parseconfig(*parse_args)
1146     has_loaded = config.pluginmanager.get_plugin("mytestplugin") is not None
1147     assert has_loaded == should_load
1148     if should_load:
1149         assert PseudoPlugin.attrs_used == ["__loader__"]
1150     else:
1151         assert PseudoPlugin.attrs_used == []
1152 
1153 
1154 def test_plugin_loading_order(pytester: Pytester) -> None:
1155     """Test order of plugin loading with `-p`."""
1156     p1 = pytester.makepyfile(
1157         """
1158         def test_terminal_plugin(request):
1159             import myplugin
1160             assert myplugin.terminal_plugin == [False, True]
1161         """,
1162         **{
1163             "myplugin": """
1164             terminal_plugin = []
1165 
1166             def pytest_configure(config):
1167                 terminal_plugin.append(bool(config.pluginmanager.get_plugin("terminalreporter")))
1168 
1169             def pytest_sessionstart(session):
1170                 config = session.config
1171                 terminal_plugin.append(bool(config.pluginmanager.get_plugin("terminalreporter")))
1172             """
1173         },
1174     )
1175     pytester.syspathinsert()
1176     result = pytester.runpytest("-p", "myplugin", str(p1))
1177     assert result.ret == 0
1178 
1179 
1180 def test_cmdline_processargs_simple(pytester: Pytester) -> None:
1181     pytester.makeconftest(
1182         """
1183         def pytest_cmdline_preparse(args):
1184             args.append("-h")
1185     """
1186     )
1187     result = pytester.runpytest("-Wignore::pytest.PytestRemovedIn8Warning")
1188     result.stdout.fnmatch_lines(["*pytest*", "*-h*"])
1189 
1190 
1191 def test_invalid_options_show_extra_information(pytester: Pytester) -> None:
1192     """Display extra information when pytest exits due to unrecognized
1193     options in the command-line."""
1194     pytester.makeini(
1195         """
1196         [pytest]
1197         addopts = --invalid-option
1198     """
1199     )
1200     result = pytester.runpytest()
1201     result.stderr.fnmatch_lines(
1202         [
1203             "*error: unrecognized arguments: --invalid-option*",
1204             "*  inifile: %s*" % pytester.path.joinpath("tox.ini"),
1205             "*  rootdir: %s*" % pytester.path,
1206         ]
1207     )
1208 
1209 
1210 @pytest.mark.parametrize(
1211     "args",
1212     [
1213         ["dir1", "dir2", "-v"],
1214         ["dir1", "-v", "dir2"],
1215         ["dir2", "-v", "dir1"],
1216         ["-v", "dir2", "dir1"],
1217     ],
1218 )
1219 def test_consider_args_after_options_for_rootdir(
1220     pytester: Pytester, args: List[str]
1221 ) -> None:
1222     """
1223     Consider all arguments in the command-line for rootdir
1224     discovery, even if they happen to occur after an option. #949
1225     """
1226     # replace "dir1" and "dir2" from "args" into their real directory
1227     root = pytester.mkdir("myroot")
1228     d1 = root.joinpath("dir1")
1229     d1.mkdir()
1230     d2 = root.joinpath("dir2")
1231     d2.mkdir()
1232     for i, arg in enumerate(args):
1233         if arg == "dir1":
1234             args[i] = str(d1)
1235         elif arg == "dir2":
1236             args[i] = str(d2)
1237     with MonkeyPatch.context() as mp:
1238         mp.chdir(root)
1239         result = pytester.runpytest(*args)
1240     result.stdout.fnmatch_lines(["*rootdir: *myroot"])
1241 
1242 
1243 def test_toolongargs_issue224(pytester: Pytester) -> None:
1244     result = pytester.runpytest("-m", "hello" * 500)
1245     assert result.ret == ExitCode.NO_TESTS_COLLECTED
1246 
1247 
1248 def test_config_in_subdirectory_colon_command_line_issue2148(
1249     pytester: Pytester,
1250 ) -> None:
1251     conftest_source = """
1252         def pytest_addoption(parser):
1253             parser.addini('foo', 'foo')
1254     """
1255 
1256     pytester.makefile(
1257         ".ini",
1258         **{"pytest": "[pytest]\nfoo = root", "subdir/pytest": "[pytest]\nfoo = subdir"},
1259     )
1260 
1261     pytester.makepyfile(
1262         **{
1263             "conftest": conftest_source,
1264             "subdir/conftest": conftest_source,
1265             "subdir/test_foo": """\
1266             def test_foo(pytestconfig):
1267                 assert pytestconfig.getini('foo') == 'subdir'
1268             """,
1269         }
1270     )
1271 
1272     result = pytester.runpytest("subdir/test_foo.py::test_foo")
1273     assert result.ret == 0
1274 
1275 
1276 def test_notify_exception(pytester: Pytester, capfd) -> None:
1277     config = pytester.parseconfig()
1278     with pytest.raises(ValueError) as excinfo:
1279         raise ValueError(1)
1280     config.notify_exception(excinfo, config.option)
1281     _, err = capfd.readouterr()
1282     assert "ValueError" in err
1283 
1284     class A:
1285         def pytest_internalerror(self):
1286             return True
1287 
1288     config.pluginmanager.register(A())
1289     config.notify_exception(excinfo, config.option)
1290     _, err = capfd.readouterr()
1291     assert not err
1292 
1293     config = pytester.parseconfig("-p", "no:terminal")
1294     with pytest.raises(ValueError) as excinfo:
1295         raise ValueError(1)
1296     config.notify_exception(excinfo, config.option)
1297     _, err = capfd.readouterr()
1298     assert "ValueError" in err
1299 
1300 
1301 def test_no_terminal_discovery_error(pytester: Pytester) -> None:
1302     pytester.makepyfile("raise TypeError('oops!')")
1303     result = pytester.runpytest("-p", "no:terminal", "--collect-only")
1304     assert result.ret == ExitCode.INTERRUPTED
1305 
1306 
1307 def test_load_initial_conftest_last_ordering(_config_for_test):
1308     pm = _config_for_test.pluginmanager
1309 
1310     class My:
1311         def pytest_load_initial_conftests(self):
1312             pass
1313 
1314     m = My()
1315     pm.register(m)
1316     hc = pm.hook.pytest_load_initial_conftests
1317     hookimpls = [
1318         (
1319             hookimpl.function.__module__,
1320             "wrapper" if hookimpl.hookwrapper else "nonwrapper",
1321         )
1322         for hookimpl in hc.get_hookimpls()
1323     ]
1324     assert hookimpls == [
1325         ("_pytest.config", "nonwrapper"),
1326         (m.__module__, "nonwrapper"),
1327         ("_pytest.legacypath", "nonwrapper"),
1328         ("_pytest.python_path", "nonwrapper"),
1329         ("_pytest.capture", "wrapper"),
1330         ("_pytest.warnings", "wrapper"),
1331     ]
1332 
1333 
1334 def test_get_plugin_specs_as_list() -> None:
1335     def exp_match(val: object) -> str:
1336         return (
1337             "Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %s"
1338             % re.escape(repr(val))
1339         )
1340 
1341     with pytest.raises(pytest.UsageError, match=exp_match({"foo"})):
1342         _get_plugin_specs_as_list({"foo"})  # type: ignore[arg-type]
1343     with pytest.raises(pytest.UsageError, match=exp_match({})):
1344         _get_plugin_specs_as_list(dict())  # type: ignore[arg-type]
1345 
1346     assert _get_plugin_specs_as_list(None) == []
1347     assert _get_plugin_specs_as_list("") == []
1348     assert _get_plugin_specs_as_list("foo") == ["foo"]
1349     assert _get_plugin_specs_as_list("foo,bar") == ["foo", "bar"]
1350     assert _get_plugin_specs_as_list(["foo", "bar"]) == ["foo", "bar"]
1351     assert _get_plugin_specs_as_list(("foo", "bar")) == ["foo", "bar"]
1352 
1353 
1354 def test_collect_pytest_prefix_bug_integration(pytester: Pytester) -> None:
1355     """Integration test for issue #3775"""
1356     p = pytester.copy_example("config/collect_pytest_prefix")
1357     result = pytester.runpytest(p)
1358     result.stdout.fnmatch_lines(["* 1 passed *"])
1359 
1360 
1361 def test_collect_pytest_prefix_bug(pytestconfig):
1362     """Ensure we collect only actual functions from conftest files (#3775)"""
1363 
1364     class Dummy:
1365         class pytest_something:
1366             pass
1367 
1368     pm = pytestconfig.pluginmanager
1369     assert pm.parse_hookimpl_opts(Dummy(), "pytest_something") is None
1370 
1371 
1372 class TestRootdir:
1373     def test_simple_noini(self, tmp_path: Path, monkeypatch: MonkeyPatch) -> None:
1374         assert get_common_ancestor([tmp_path]) == tmp_path
1375         a = tmp_path / "a"
1376         a.mkdir()
1377         assert get_common_ancestor([a, tmp_path]) == tmp_path
1378         assert get_common_ancestor([tmp_path, a]) == tmp_path
1379         monkeypatch.chdir(tmp_path)
1380         assert get_common_ancestor([]) == tmp_path
1381         no_path = tmp_path / "does-not-exist"
1382         assert get_common_ancestor([no_path]) == tmp_path
1383         assert get_common_ancestor([no_path / "a"]) == tmp_path
1384 
1385     @pytest.mark.parametrize(
1386         "name, contents",
1387         [
1388             pytest.param("pytest.ini", "[pytest]\nx=10", id="pytest.ini"),
1389             pytest.param(
1390                 "pyproject.toml", "[tool.pytest.ini_options]\nx=10", id="pyproject.toml"
1391             ),
1392             pytest.param("tox.ini", "[pytest]\nx=10", id="tox.ini"),
1393             pytest.param("setup.cfg", "[tool:pytest]\nx=10", id="setup.cfg"),
1394         ],
1395     )
1396     def test_with_ini(self, tmp_path: Path, name: str, contents: str) -> None:
1397         inipath = tmp_path / name
1398         inipath.write_text(contents, encoding="utf-8")
1399 
1400         a = tmp_path / "a"
1401         a.mkdir()
1402         b = a / "b"
1403         b.mkdir()
1404         for args in ([str(tmp_path)], [str(a)], [str(b)]):
1405             rootpath, parsed_inipath, _ = determine_setup(None, args)
1406             assert rootpath == tmp_path
1407             assert parsed_inipath == inipath
1408         rootpath, parsed_inipath, ini_config = determine_setup(None, [str(b), str(a)])
1409         assert rootpath == tmp_path
1410         assert parsed_inipath == inipath
1411         assert ini_config == {"x": "10"}
1412 
1413     @pytest.mark.parametrize("name", ["setup.cfg", "tox.ini"])
1414     def test_pytestini_overrides_empty_other(self, tmp_path: Path, name: str) -> None:
1415         inipath = tmp_path / "pytest.ini"
1416         inipath.touch()
1417         a = tmp_path / "a"
1418         a.mkdir()
1419         (a / name).touch()
1420         rootpath, parsed_inipath, _ = determine_setup(None, [str(a)])
1421         assert rootpath == tmp_path
1422         assert parsed_inipath == inipath
1423 
1424     def test_setuppy_fallback(self, tmp_path: Path) -> None:
1425         a = tmp_path / "a"
1426         a.mkdir()
1427         (a / "setup.cfg").touch()
1428         (tmp_path / "setup.py").touch()
1429         rootpath, inipath, inicfg = determine_setup(None, [str(a)])
1430         assert rootpath == tmp_path
1431         assert inipath is None
1432         assert inicfg == {}
1433 
1434     def test_nothing(self, tmp_path: Path, monkeypatch: MonkeyPatch) -> None:
1435         monkeypatch.chdir(tmp_path)
1436         rootpath, inipath, inicfg = determine_setup(None, [str(tmp_path)])
1437         assert rootpath == tmp_path
1438         assert inipath is None
1439         assert inicfg == {}
1440 
1441     @pytest.mark.parametrize(
1442         "name, contents",
1443         [
1444             # pytest.param("pytest.ini", "[pytest]\nx=10", id="pytest.ini"),
1445             pytest.param(
1446                 "pyproject.toml", "[tool.pytest.ini_options]\nx=10", id="pyproject.toml"
1447             ),
1448             # pytest.param("tox.ini", "[pytest]\nx=10", id="tox.ini"),
1449             # pytest.param("setup.cfg", "[tool:pytest]\nx=10", id="setup.cfg"),
1450         ],
1451     )
1452     def test_with_specific_inifile(
1453         self, tmp_path: Path, name: str, contents: str
1454     ) -> None:
1455         p = tmp_path / name
1456         p.touch()
1457         p.write_text(contents, encoding="utf-8")
1458         rootpath, inipath, ini_config = determine_setup(str(p), [str(tmp_path)])
1459         assert rootpath == tmp_path
1460         assert inipath == p
1461         assert ini_config == {"x": "10"}
1462 
1463     def test_explicit_config_file_sets_rootdir(
1464         self, tmp_path: Path, monkeypatch: pytest.MonkeyPatch
1465     ) -> None:
1466         tests_dir = tmp_path / "tests"
1467         tests_dir.mkdir()
1468 
1469         monkeypatch.chdir(tmp_path)
1470 
1471         # No config file is explicitly given: rootdir is determined to be cwd.
1472         rootpath, found_inipath, *_ = determine_setup(None, [str(tests_dir)])
1473         assert rootpath == tmp_path
1474         assert found_inipath is None
1475 
1476         # Config file is explicitly given: rootdir is determined to be inifile's directory.
1477         inipath = tmp_path / "pytest.ini"
1478         inipath.touch()
1479         rootpath, found_inipath, *_ = determine_setup(str(inipath), [str(tests_dir)])
1480         assert rootpath == tmp_path
1481         assert found_inipath == inipath
1482 
1483     def test_with_arg_outside_cwd_without_inifile(
1484         self, tmp_path: Path, monkeypatch: MonkeyPatch
1485     ) -> None:
1486         monkeypatch.chdir(tmp_path)
1487         a = tmp_path / "a"
1488         a.mkdir()
1489         b = tmp_path / "b"
1490         b.mkdir()
1491         rootpath, inifile, _ = determine_setup(None, [str(a), str(b)])
1492         assert rootpath == tmp_path
1493         assert inifile is None
1494 
1495     def test_with_arg_outside_cwd_with_inifile(self, tmp_path: Path) -> None:
1496         a = tmp_path / "a"
1497         a.mkdir()
1498         b = tmp_path / "b"
1499         b.mkdir()
1500         inipath = a / "pytest.ini"
1501         inipath.touch()
1502         rootpath, parsed_inipath, _ = determine_setup(None, [str(a), str(b)])
1503         assert rootpath == a
1504         assert inipath == parsed_inipath
1505 
1506     @pytest.mark.parametrize("dirs", ([], ["does-not-exist"], ["a/does-not-exist"]))
1507     def test_with_non_dir_arg(
1508         self, dirs: Sequence[str], tmp_path: Path, monkeypatch: MonkeyPatch
1509     ) -> None:
1510         monkeypatch.chdir(tmp_path)
1511         rootpath, inipath, _ = determine_setup(None, dirs)
1512         assert rootpath == tmp_path
1513         assert inipath is None
1514 
1515     def test_with_existing_file_in_subdir(
1516         self, tmp_path: Path, monkeypatch: MonkeyPatch
1517     ) -> None:
1518         a = tmp_path / "a"
1519         a.mkdir()
1520         (a / "exists").touch()
1521         monkeypatch.chdir(tmp_path)
1522         rootpath, inipath, _ = determine_setup(None, ["a/exist"])
1523         assert rootpath == tmp_path
1524         assert inipath is None
1525 
1526     def test_with_config_also_in_parent_directory(
1527         self, tmp_path: Path, monkeypatch: MonkeyPatch
1528     ) -> None:
1529         """Regression test for #7807."""
1530         (tmp_path / "setup.cfg").write_text("[tool:pytest]\n", "utf-8")
1531         (tmp_path / "myproject").mkdir()
1532         (tmp_path / "myproject" / "setup.cfg").write_text("[tool:pytest]\n", "utf-8")
1533         (tmp_path / "myproject" / "tests").mkdir()
1534         monkeypatch.chdir(tmp_path / "myproject")
1535 
1536         rootpath, inipath, _ = determine_setup(None, ["tests/"])
1537 
1538         assert rootpath == tmp_path / "myproject"
1539         assert inipath == tmp_path / "myproject" / "setup.cfg"
1540 
1541 
1542 class TestOverrideIniArgs:
1543     @pytest.mark.parametrize("name", "setup.cfg tox.ini pytest.ini".split())
1544     def test_override_ini_names(self, pytester: Pytester, name: str) -> None:
1545         section = "[pytest]" if name != "setup.cfg" else "[tool:pytest]"
1546         pytester.path.joinpath(name).write_text(
1547             textwrap.dedent(
1548                 """
1549             {section}
1550             custom = 1.0""".format(
1551                     section=section
1552                 )
1553             ),
1554             encoding="utf-8",
1555         )
1556         pytester.makeconftest(
1557             """
1558             def pytest_addoption(parser):
1559                 parser.addini("custom", "")"""
1560         )
1561         pytester.makepyfile(
1562             """
1563             def test_pass(pytestconfig):
1564                 ini_val = pytestconfig.getini("custom")
1565                 print('\\ncustom_option:%s\\n' % ini_val)"""
1566         )
1567 
1568         result = pytester.runpytest("--override-ini", "custom=2.0", "-s")
1569         assert result.ret == 0
1570         result.stdout.fnmatch_lines(["custom_option:2.0"])
1571 
1572         result = pytester.runpytest(
1573             "--override-ini", "custom=2.0", "--override-ini=custom=3.0", "-s"
1574         )
1575         assert result.ret == 0
1576         result.stdout.fnmatch_lines(["custom_option:3.0"])
1577 
1578     def test_override_ini_paths(self, pytester: Pytester) -> None:
1579         pytester.makeconftest(
1580             """
1581             def pytest_addoption(parser):
1582                 parser.addini("paths", "my new ini value", type="paths")"""
1583         )
1584         pytester.makeini(
1585             """
1586             [pytest]
1587             paths=blah.py"""
1588         )
1589         pytester.makepyfile(
1590             r"""
1591             def test_overriden(pytestconfig):
1592                 config_paths = pytestconfig.getini("paths")
1593                 print(config_paths)
1594                 for cpf in config_paths:
1595                     print('\nuser_path:%s' % cpf.name)
1596             """
1597         )
1598         result = pytester.runpytest(
1599             "--override-ini", "paths=foo/bar1.py foo/bar2.py", "-s"
1600         )
1601         result.stdout.fnmatch_lines(["user_path:bar1.py", "user_path:bar2.py"])
1602 
1603     def test_override_multiple_and_default(self, pytester: Pytester) -> None:
1604         pytester.makeconftest(
1605             """
1606             def pytest_addoption(parser):
1607                 addini = parser.addini
1608                 addini("custom_option_1", "", default="o1")
1609                 addini("custom_option_2", "", default="o2")
1610                 addini("custom_option_3", "", default=False, type="bool")
1611                 addini("custom_option_4", "", default=True, type="bool")"""
1612         )
1613         pytester.makeini(
1614             """
1615             [pytest]
1616             custom_option_1=custom_option_1
1617             custom_option_2=custom_option_2
1618         """
1619         )
1620         pytester.makepyfile(
1621             """
1622             def test_multiple_options(pytestconfig):
1623                 prefix = "custom_option"
1624                 for x in range(1, 5):
1625                     ini_value=pytestconfig.getini("%s_%d" % (prefix, x))
1626                     print('\\nini%d:%s' % (x, ini_value))
1627         """
1628         )
1629         result = pytester.runpytest(
1630             "--override-ini",
1631             "custom_option_1=fulldir=/tmp/user1",
1632             "-o",
1633             "custom_option_2=url=/tmp/user2?a=b&d=e",
1634             "-o",
1635             "custom_option_3=True",
1636             "-o",
1637             "custom_option_4=no",
1638             "-s",
1639         )
1640         result.stdout.fnmatch_lines(
1641             [
1642                 "ini1:fulldir=/tmp/user1",
1643                 "ini2:url=/tmp/user2?a=b&d=e",
1644                 "ini3:True",
1645                 "ini4:False",
1646             ]
1647         )
1648 
1649     def test_override_ini_usage_error_bad_style(self, pytester: Pytester) -> None:
1650         pytester.makeini(
1651             """
1652             [pytest]
1653             xdist_strict=False
1654         """
1655         )
1656         result = pytester.runpytest("--override-ini", "xdist_strict", "True")
1657         result.stderr.fnmatch_lines(
1658             [
1659                 "ERROR: -o/--override-ini expects option=value style (got: 'xdist_strict').",
1660             ]
1661         )
1662 
1663     @pytest.mark.parametrize("with_ini", [True, False])
1664     def test_override_ini_handled_asap(
1665         self, pytester: Pytester, with_ini: bool
1666     ) -> None:
1667         """-o should be handled as soon as possible and always override what's in ini files (#2238)"""
1668         if with_ini:
1669             pytester.makeini(
1670                 """
1671                 [pytest]
1672                 python_files=test_*.py
1673             """
1674             )
1675         pytester.makepyfile(
1676             unittest_ini_handle="""
1677             def test():
1678                 pass
1679         """
1680         )
1681         result = pytester.runpytest("--override-ini", "python_files=unittest_*.py")
1682         result.stdout.fnmatch_lines(["*1 passed in*"])
1683 
1684     def test_addopts_before_initini(
1685         self, monkeypatch: MonkeyPatch, _config_for_test, _sys_snapshot
1686     ) -> None:
1687         cache_dir = ".custom_cache"
1688         monkeypatch.setenv("PYTEST_ADDOPTS", "-o cache_dir=%s" % cache_dir)
1689         config = _config_for_test
1690         config._preparse([], addopts=True)
1691         assert config._override_ini == ["cache_dir=%s" % cache_dir]
1692 
1693     def test_addopts_from_env_not_concatenated(
1694         self, monkeypatch: MonkeyPatch, _config_for_test
1695     ) -> None:
1696         """PYTEST_ADDOPTS should not take values from normal args (#4265)."""
1697         monkeypatch.setenv("PYTEST_ADDOPTS", "-o")
1698         config = _config_for_test
1699         with pytest.raises(UsageError) as excinfo:
1700             config._preparse(["cache_dir=ignored"], addopts=True)
1701         assert (
1702             "error: argument -o/--override-ini: expected one argument (via PYTEST_ADDOPTS)"
1703             in excinfo.value.args[0]
1704         )
1705 
1706     def test_addopts_from_ini_not_concatenated(self, pytester: Pytester) -> None:
1707         """`addopts` from ini should not take values from normal args (#4265)."""
1708         pytester.makeini(
1709             """
1710             [pytest]
1711             addopts=-o
1712         """
1713         )
1714         result = pytester.runpytest("cache_dir=ignored")
1715         result.stderr.fnmatch_lines(
1716             [
1717                 "%s: error: argument -o/--override-ini: expected one argument (via addopts config)"
1718                 % (pytester._request.config._parser.optparser.prog,)
1719             ]
1720         )
1721         assert result.ret == _pytest.config.ExitCode.USAGE_ERROR
1722 
1723     def test_override_ini_does_not_contain_paths(
1724         self, _config_for_test, _sys_snapshot
1725     ) -> None:
1726         """Check that -o no longer swallows all options after it (#3103)"""
1727         config = _config_for_test
1728         config._preparse(["-o", "cache_dir=/cache", "/some/test/path"])
1729         assert config._override_ini == ["cache_dir=/cache"]
1730 
1731     def test_multiple_override_ini_options(self, pytester: Pytester) -> None:
1732         """Ensure a file path following a '-o' option does not generate an error (#3103)"""
1733         pytester.makepyfile(
1734             **{
1735                 "conftest.py": """
1736                 def pytest_addoption(parser):
1737                     parser.addini('foo', default=None, help='some option')
1738                     parser.addini('bar', default=None, help='some option')
1739             """,
1740                 "test_foo.py": """
1741                 def test(pytestconfig):
1742                     assert pytestconfig.getini('foo') == '1'
1743                     assert pytestconfig.getini('bar') == '0'
1744             """,
1745                 "test_bar.py": """
1746                 def test():
1747                     assert False
1748             """,
1749             }
1750         )
1751         result = pytester.runpytest("-o", "foo=1", "-o", "bar=0", "test_foo.py")
1752         assert "ERROR:" not in result.stderr.str()
1753         result.stdout.fnmatch_lines(["collected 1 item", "*= 1 passed in *="])
1754 
1755 
1756 def test_help_via_addopts(pytester: Pytester) -> None:
1757     pytester.makeini(
1758         """
1759         [pytest]
1760         addopts = --unknown-option-should-allow-for-help --help
1761     """
1762     )
1763     result = pytester.runpytest()
1764     assert result.ret == 0
1765     result.stdout.fnmatch_lines(
1766         [
1767             "usage: *",
1768             "positional arguments:",
1769             # Displays full/default help.
1770             "to see available markers type: pytest --markers",
1771         ]
1772     )
1773 
1774 
1775 def test_help_and_version_after_argument_error(pytester: Pytester) -> None:
1776     pytester.makeconftest(
1777         """
1778         def validate(arg):
1779             raise argparse.ArgumentTypeError("argerror")
1780 
1781         def pytest_addoption(parser):
1782             group = parser.getgroup('cov')
1783             group.addoption(
1784                 "--invalid-option-should-allow-for-help",
1785                 type=validate,
1786             )
1787         """
1788     )
1789     pytester.makeini(
1790         """
1791         [pytest]
1792         addopts = --invalid-option-should-allow-for-help
1793     """
1794     )
1795     result = pytester.runpytest("--help")
1796     result.stdout.fnmatch_lines(
1797         [
1798             "usage: *",
1799             "positional arguments:",
1800             "NOTE: displaying only minimal help due to UsageError.",
1801         ]
1802     )
1803     result.stderr.fnmatch_lines(
1804         [
1805             "ERROR: usage: *",
1806             "%s: error: argument --invalid-option-should-allow-for-help: expected one argument"
1807             % (pytester._request.config._parser.optparser.prog,),
1808         ]
1809     )
1810     # Does not display full/default help.
1811     assert "to see available markers type: pytest --markers" not in result.stdout.lines
1812     assert result.ret == ExitCode.USAGE_ERROR
1813 
1814     result = pytester.runpytest("--version")
1815     result.stdout.fnmatch_lines([f"pytest {pytest.__version__}"])
1816     assert result.ret == ExitCode.USAGE_ERROR
1817 
1818 
1819 def test_help_formatter_uses_py_get_terminal_width(monkeypatch: MonkeyPatch) -> None:
1820     from _pytest.config.argparsing import DropShorterLongHelpFormatter
1821 
1822     monkeypatch.setenv("COLUMNS", "90")
1823     formatter = DropShorterLongHelpFormatter("prog")
1824     assert formatter._width == 90
1825 
1826     monkeypatch.setattr("_pytest._io.get_terminal_width", lambda: 160)
1827     formatter = DropShorterLongHelpFormatter("prog")
1828     assert formatter._width == 160
1829 
1830     formatter = DropShorterLongHelpFormatter("prog", width=42)
1831     assert formatter._width == 42
1832 
1833 
1834 def test_config_does_not_load_blocked_plugin_from_args(pytester: Pytester) -> None:
1835     """This tests that pytest's config setup handles "-p no:X"."""
1836     p = pytester.makepyfile("def test(capfd): pass")
1837     result = pytester.runpytest(str(p), "-pno:capture")
1838     result.stdout.fnmatch_lines(["E       fixture 'capfd' not found"])
1839     assert result.ret == ExitCode.TESTS_FAILED
1840 
1841     result = pytester.runpytest(str(p), "-pno:capture", "-s")
1842     result.stderr.fnmatch_lines(["*: error: unrecognized arguments: -s"])
1843     assert result.ret == ExitCode.USAGE_ERROR
1844 
1845     result = pytester.runpytest(str(p), "-p no:capture", "-s")
1846     result.stderr.fnmatch_lines(["*: error: unrecognized arguments: -s"])
1847     assert result.ret == ExitCode.USAGE_ERROR
1848 
1849 
1850 def test_invocation_args(pytester: Pytester) -> None:
1851     """Ensure that Config.invocation_* arguments are correctly defined"""
1852 
1853     class DummyPlugin:
1854         pass
1855 
1856     p = pytester.makepyfile("def test(): pass")
1857     plugin = DummyPlugin()
1858     rec = pytester.inline_run(p, "-v", plugins=[plugin])
1859     calls = rec.getcalls("pytest_runtest_protocol")
1860     assert len(calls) == 1
1861     call = calls[0]
1862     config = call.item.config
1863 
1864     assert config.invocation_params.args == (str(p), "-v")
1865     assert config.invocation_params.dir == pytester.path
1866 
1867     plugins = config.invocation_params.plugins
1868     assert len(plugins) == 2
1869     assert plugins[0] is plugin
1870     assert type(plugins[1]).__name__ == "Collect"  # installed by pytester.inline_run()
1871 
1872     # args cannot be None
1873     with pytest.raises(TypeError):
1874         Config.InvocationParams(args=None, plugins=None, dir=Path())  # type: ignore[arg-type]
1875 
1876 
1877 @pytest.mark.parametrize(
1878     "plugin",
1879     [
1880         x
1881         for x in _pytest.config.default_plugins
1882         if x not in _pytest.config.essential_plugins
1883     ],
1884 )
1885 def test_config_blocked_default_plugins(pytester: Pytester, plugin: str) -> None:
1886     if plugin == "debugging":
1887         # Fixed in xdist (after 1.27.0).
1888         # https://github.com/pytest-dev/pytest-xdist/pull/422
1889         try:
1890             import xdist  # noqa: F401
1891         except ImportError:
1892             pass
1893         else:
1894             pytest.skip("does not work with xdist currently")
1895 
1896     p = pytester.makepyfile("def test(): pass")
1897     result = pytester.runpytest(str(p), "-pno:%s" % plugin)
1898 
1899     if plugin == "python":
1900         assert result.ret == ExitCode.USAGE_ERROR
1901         result.stderr.fnmatch_lines(
1902             [
1903                 "ERROR: found no collectors for */test_config_blocked_default_plugins.py",
1904             ]
1905         )
1906         return
1907 
1908     assert result.ret == ExitCode.OK
1909     if plugin != "terminal":
1910         result.stdout.fnmatch_lines(["* 1 passed in *"])
1911 
1912     p = pytester.makepyfile("def test(): assert 0")
1913     result = pytester.runpytest(str(p), "-pno:%s" % plugin)
1914     assert result.ret == ExitCode.TESTS_FAILED
1915     if plugin != "terminal":
1916         result.stdout.fnmatch_lines(["* 1 failed in *"])
1917     else:
1918         assert result.stdout.lines == []
1919 
1920 
1921 class TestSetupCfg:
1922     def test_pytest_setup_cfg_unsupported(self, pytester: Pytester) -> None:
1923         pytester.makefile(
1924             ".cfg",
1925             setup="""
1926             [pytest]
1927             addopts = --verbose
1928         """,
1929         )
1930         with pytest.raises(pytest.fail.Exception):
1931             pytester.runpytest()
1932 
1933     def test_pytest_custom_cfg_unsupported(self, pytester: Pytester) -> None:
1934         pytester.makefile(
1935             ".cfg",
1936             custom="""
1937             [pytest]
1938             addopts = --verbose
1939         """,
1940         )
1941         with pytest.raises(pytest.fail.Exception):
1942             pytester.runpytest("-c", "custom.cfg")
1943 
1944         with pytest.raises(pytest.fail.Exception):
1945             pytester.runpytest("--config-file", "custom.cfg")
1946 
1947 
1948 class TestPytestPluginsVariable:
1949     def test_pytest_plugins_in_non_top_level_conftest_unsupported(
1950         self, pytester: Pytester
1951     ) -> None:
1952         pytester.makepyfile(
1953             **{
1954                 "subdirectory/conftest.py": """
1955             pytest_plugins=['capture']
1956         """
1957             }
1958         )
1959         pytester.makepyfile(
1960             """
1961             def test_func():
1962                 pass
1963         """
1964         )
1965         res = pytester.runpytest()
1966         assert res.ret == 2
1967         msg = "Defining 'pytest_plugins' in a non-top-level conftest is no longer supported"
1968         res.stdout.fnmatch_lines([f"*{msg}*", f"*subdirectory{os.sep}conftest.py*"])
1969 
1970     @pytest.mark.parametrize("use_pyargs", [True, False])
1971     def test_pytest_plugins_in_non_top_level_conftest_unsupported_pyargs(
1972         self, pytester: Pytester, use_pyargs: bool
1973     ) -> None:
1974         """When using --pyargs, do not emit the warning about non-top-level conftest warnings (#4039, #4044)"""
1975 
1976         files = {
1977             "src/pkg/__init__.py": "",
1978             "src/pkg/conftest.py": "",
1979             "src/pkg/test_root.py": "def test(): pass",
1980             "src/pkg/sub/__init__.py": "",
1981             "src/pkg/sub/conftest.py": "pytest_plugins=['capture']",
1982             "src/pkg/sub/test_bar.py": "def test(): pass",
1983         }
1984         pytester.makepyfile(**files)
1985         pytester.syspathinsert(pytester.path.joinpath("src"))
1986 
1987         args = ("--pyargs", "pkg") if use_pyargs else ()
1988         res = pytester.runpytest(*args)
1989         assert res.ret == (0 if use_pyargs else 2)
1990         msg = (
1991             msg
1992         ) = "Defining 'pytest_plugins' in a non-top-level conftest is no longer supported"
1993         if use_pyargs:
1994             assert msg not in res.stdout.str()
1995         else:
1996             res.stdout.fnmatch_lines([f"*{msg}*"])
1997 
1998     def test_pytest_plugins_in_non_top_level_conftest_unsupported_no_top_level_conftest(
1999         self, pytester: Pytester
2000     ) -> None:
2001         subdirectory = pytester.path.joinpath("subdirectory")
2002         subdirectory.mkdir()
2003         pytester.makeconftest(
2004             """
2005             pytest_plugins=['capture']
2006         """
2007         )
2008         pytester.path.joinpath("conftest.py").rename(
2009             subdirectory.joinpath("conftest.py")
2010         )
2011 
2012         pytester.makepyfile(
2013             """
2014             def test_func():
2015                 pass
2016         """
2017         )
2018 
2019         res = pytester.runpytest_subprocess()
2020         assert res.ret == 2
2021         msg = "Defining 'pytest_plugins' in a non-top-level conftest is no longer supported"
2022         res.stdout.fnmatch_lines([f"*{msg}*", f"*subdirectory{os.sep}conftest.py*"])
2023 
2024     def test_pytest_plugins_in_non_top_level_conftest_unsupported_no_false_positives(
2025         self, pytester: Pytester
2026     ) -> None:
2027         pytester.makepyfile(
2028             "def test_func(): pass",
2029             **{
2030                 "subdirectory/conftest": "pass",
2031                 "conftest": """
2032                     import warnings
2033                     warnings.filterwarnings('always', category=DeprecationWarning)
2034                     pytest_plugins=['capture']
2035                     """,
2036             },
2037         )
2038         res = pytester.runpytest_subprocess()
2039         assert res.ret == 0
2040         msg = "Defining 'pytest_plugins' in a non-top-level conftest is no longer supported"
2041         assert msg not in res.stdout.str()
2042 
2043 
2044 def test_conftest_import_error_repr(tmp_path: Path) -> None:
2045     """`ConftestImportFailure` should use a short error message and readable
2046     path to the failed conftest.py file."""
2047     path = tmp_path.joinpath("foo/conftest.py")
2048     with pytest.raises(
2049         ConftestImportFailure,
2050         match=re.escape(f"RuntimeError: some error (from {path})"),
2051     ):
2052         try:
2053             raise RuntimeError("some error")
2054         except Exception as exc:
2055             assert exc.__traceback__ is not None
2056             exc_info = (type(exc), exc, exc.__traceback__)
2057             raise ConftestImportFailure(path, exc_info) from exc
2058 
2059 
2060 def test_strtobool() -> None:
2061     assert _strtobool("YES")
2062     assert not _strtobool("NO")
2063     with pytest.raises(ValueError):
2064         _strtobool("unknown")
2065 
2066 
2067 @pytest.mark.parametrize(
2068     "arg, escape, expected",
2069     [
2070         ("ignore", False, ("ignore", "", Warning, "", 0)),
2071         (
2072             "ignore::DeprecationWarning",
2073             False,
2074             ("ignore", "", DeprecationWarning, "", 0),
2075         ),
2076         (
2077             "ignore:some msg:DeprecationWarning",
2078             False,
2079             ("ignore", "some msg", DeprecationWarning, "", 0),
2080         ),
2081         (
2082             "ignore::DeprecationWarning:mod",
2083             False,
2084             ("ignore", "", DeprecationWarning, "mod", 0),
2085         ),
2086         (
2087             "ignore::DeprecationWarning:mod:42",
2088             False,
2089             ("ignore", "", DeprecationWarning, "mod", 42),
2090         ),
2091         ("error:some\\msg:::", True, ("error", "some\\\\msg", Warning, "", 0)),
2092         ("error:::mod\\foo:", True, ("error", "", Warning, "mod\\\\foo\\Z", 0)),
2093     ],
2094 )
2095 def test_parse_warning_filter(
2096     arg: str, escape: bool, expected: Tuple[str, str, Type[Warning], str, int]
2097 ) -> None:
2098     assert parse_warning_filter(arg, escape=escape) == expected
2099 
2100 
2101 @pytest.mark.parametrize(
2102     "arg",
2103     [
2104         # Too much parts.
2105         ":" * 5,
2106         # Invalid action.
2107         "FOO::",
2108         # ImportError when importing the warning class.
2109         "::test_parse_warning_filter_failure.NonExistentClass::",
2110         # Class is not a Warning subclass.
2111         "::list::",
2112         # Negative line number.
2113         "::::-1",
2114         # Not a line number.
2115         "::::not-a-number",
2116     ],
2117 )
2118 def test_parse_warning_filter_failure(arg: str) -> None:
2119     with pytest.raises(pytest.UsageError):
2120         parse_warning_filter(arg, escape=True)
2121 
2122 
2123 class TestDebugOptions:
2124     def test_without_debug_does_not_write_log(self, pytester: Pytester) -> None:
2125         result = pytester.runpytest()
2126         result.stderr.no_fnmatch_line(
2127             "*writing pytest debug information to*pytestdebug.log"
2128         )
2129         result.stderr.no_fnmatch_line(
2130             "*wrote pytest debug information to*pytestdebug.log"
2131         )
2132         assert not [f.name for f in pytester.path.glob("**/*.log")]
2133 
2134     def test_with_only_debug_writes_pytestdebug_log(self, pytester: Pytester) -> None:
2135         result = pytester.runpytest("--debug")
2136         result.stderr.fnmatch_lines(
2137             [
2138                 "*writing pytest debug information to*pytestdebug.log",
2139                 "*wrote pytest debug information to*pytestdebug.log",
2140             ]
2141         )
2142         assert "pytestdebug.log" in [f.name for f in pytester.path.glob("**/*.log")]
2143 
2144     def test_multiple_custom_debug_logs(self, pytester: Pytester) -> None:
2145         result = pytester.runpytest("--debug", "bar.log")
2146         result.stderr.fnmatch_lines(
2147             [
2148                 "*writing pytest debug information to*bar.log",
2149                 "*wrote pytest debug information to*bar.log",
2150             ]
2151         )
2152         result = pytester.runpytest("--debug", "foo.log")
2153         result.stderr.fnmatch_lines(
2154             [
2155                 "*writing pytest debug information to*foo.log",
2156                 "*wrote pytest debug information to*foo.log",
2157             ]
2158         )
2159 
2160         assert {"bar.log", "foo.log"} == {
2161             f.name for f in pytester.path.glob("**/*.log")
2162         }
2163 
2164     def test_debug_help(self, pytester: Pytester) -> None:
2165         result = pytester.runpytest("-h")
2166         result.stdout.fnmatch_lines(
2167             [
2168                 "*Store internal tracing debug information in this log*",
2169                 "*file. This file is opened with 'w' and truncated as a*",
2170                 "*Default: pytestdebug.log.",
2171             ]
2172         )

</code><intended_behavior>The tests should ensure that when importlib is used to dynamically load or manipulate modules, it does so in a way that reflects and maintains the integrity of the application's module namespace. Specifically, these methods should: Confirm that dynamically loaded modules do not lead to the unintentional creation of multiple instances or versions of modules intended to be singletons or uniquely represented within the application context. Simulate the application's behavior as closely as possible in terms of module loading and namespace manipulation to detect and prevent scenarios that could lead to discrepancies between test and production environments. Include validation steps to check the uniqueness and consistency of critical modules across different parts of the application, ensuring that changes or actions performed on those modules in one context are recognized and persist across all contexts.</intended_behavior>]
2025-10-15 09:42:14.124 | INFO     | Search completed. Bug locations: [<file>testing/test_config.py</file>
<class>None</class>
<method>None</method>
<code>
1 import dataclasses
2 import importlib.metadata
3 import os
4 import re
5 import sys
6 import textwrap
7 from pathlib import Path
8 from typing import Dict
9 from typing import List
10 from typing import Sequence
11 from typing import Tuple
12 from typing import Type
13 from typing import Union
14 
15 import _pytest._code
16 import pytest
17 from _pytest.config import _get_plugin_specs_as_list
18 from _pytest.config import _iter_rewritable_modules
19 from _pytest.config import _strtobool
20 from _pytest.config import Config
21 from _pytest.config import ConftestImportFailure
22 from _pytest.config import ExitCode
23 from _pytest.config import parse_warning_filter
24 from _pytest.config.exceptions import UsageError
25 from _pytest.config.findpaths import determine_setup
26 from _pytest.config.findpaths import get_common_ancestor
27 from _pytest.config.findpaths import locate_config
28 from _pytest.monkeypatch import MonkeyPatch
29 from _pytest.pathlib import absolutepath
30 from _pytest.pytester import Pytester
31 
32 
33 class TestParseIni:
34     @pytest.mark.parametrize(
35         "section, filename", [("pytest", "pytest.ini"), ("tool:pytest", "setup.cfg")]
36     )
37     def test_getcfg_and_config(
38         self,
39         pytester: Pytester,
40         tmp_path: Path,
41         section: str,
42         filename: str,
43         monkeypatch: MonkeyPatch,
44     ) -> None:
45         sub = tmp_path / "sub"
46         sub.mkdir()
47         monkeypatch.chdir(sub)
48         (tmp_path / filename).write_text(
49             textwrap.dedent(
50                 """\
51                 [{section}]
52                 name = value
53                 """.format(
54                     section=section
55                 )
56             ),
57             encoding="utf-8",
58         )
59         _, _, cfg = locate_config([sub])
60         assert cfg["name"] == "value"
61         config = pytester.parseconfigure(str(sub))
62         assert config.inicfg["name"] == "value"
63 
64     def test_setupcfg_uses_toolpytest_with_pytest(self, pytester: Pytester) -> None:
65         p1 = pytester.makepyfile("def test(): pass")
66         pytester.makefile(
67             ".cfg",
68             setup="""
69                 [tool:pytest]
70                 testpaths=%s
71                 [pytest]
72                 testpaths=ignored
73         """
74             % p1.name,
75         )
76         result = pytester.runpytest()
77         result.stdout.fnmatch_lines(["configfile: setup.cfg", "* 1 passed in *"])
78         assert result.ret == 0
79 
80     def test_append_parse_args(
81         self, pytester: Pytester, tmp_path: Path, monkeypatch: MonkeyPatch
82     ) -> None:
83         monkeypatch.setenv("PYTEST_ADDOPTS", '--color no -rs --tb="short"')
84         tmp_path.joinpath("pytest.ini").write_text(
85             textwrap.dedent(
86                 """\
87                 [pytest]
88                 addopts = --verbose
89                 """
90             ),
91             encoding="utf-8",
92         )
93         config = pytester.parseconfig(tmp_path)
94         assert config.option.color == "no"
95         assert config.option.reportchars == "s"
96         assert config.option.tbstyle == "short"
97         assert config.option.verbose
98 
99     def test_tox_ini_wrong_version(self, pytester: Pytester) -> None:
100         pytester.makefile(
101             ".ini",
102             tox="""
103             [pytest]
104             minversion=999.0
105         """,
106         )
107         result = pytester.runpytest()
108         assert result.ret != 0
109         result.stderr.fnmatch_lines(
110             ["*tox.ini: 'minversion' requires pytest-999.0, actual pytest-*"]
111         )
112 
113     @pytest.mark.parametrize(
114         "section, name",
115         [
116             ("tool:pytest", "setup.cfg"),
117             ("pytest", "tox.ini"),
118             ("pytest", "pytest.ini"),
119             ("pytest", ".pytest.ini"),
120         ],
121     )
122     def test_ini_names(self, pytester: Pytester, name, section) -> None:
123         pytester.path.joinpath(name).write_text(
124             textwrap.dedent(
125                 """
126             [{section}]
127             minversion = 3.36
128         """.format(
129                     section=section
130                 )
131             ),
132             encoding="utf-8",
133         )
134         config = pytester.parseconfig()
135         assert config.getini("minversion") == "3.36"
136 
137     def test_pyproject_toml(self, pytester: Pytester) -> None:
138         pytester.makepyprojecttoml(
139             """
140             [tool.pytest.ini_options]
141             minversion = "1.0"
142         """
143         )
144         config = pytester.parseconfig()
145         assert config.getini("minversion") == "1.0"
146 
147     def test_toxini_before_lower_pytestini(self, pytester: Pytester) -> None:
148         sub = pytester.mkdir("sub")
149         sub.joinpath("tox.ini").write_text(
150             textwrap.dedent(
151                 """
152             [pytest]
153             minversion = 2.0
154         """
155             ),
156             encoding="utf-8",
157         )
158         pytester.path.joinpath("pytest.ini").write_text(
159             textwrap.dedent(
160                 """
161             [pytest]
162             minversion = 1.5
163         """
164             ),
165             encoding="utf-8",
166         )
167         config = pytester.parseconfigure(sub)
168         assert config.getini("minversion") == "2.0"
169 
170     def test_ini_parse_error(self, pytester: Pytester) -> None:
171         pytester.path.joinpath("pytest.ini").write_text(
172             "addopts = -x", encoding="utf-8"
173         )
174         result = pytester.runpytest()
175         assert result.ret != 0
176         result.stderr.fnmatch_lines("ERROR: *pytest.ini:1: no section header defined")
177 
178     def test_toml_parse_error(self, pytester: Pytester) -> None:
179         pytester.makepyprojecttoml(
180             """
181             \\"
182             """
183         )
184         result = pytester.runpytest()
185         assert result.ret != 0
186         result.stderr.fnmatch_lines("ERROR: *pyproject.toml: Invalid statement*")
187 
188     def test_confcutdir_default_without_configfile(self, pytester: Pytester) -> None:
189         # If --confcutdir is not specified, and there is no configfile, default
190         # to the roothpath.
191         sub = pytester.mkdir("sub")
192         os.chdir(sub)
193         config = pytester.parseconfigure()
194         assert config.pluginmanager._confcutdir == sub
195 
196     def test_confcutdir_default_with_configfile(self, pytester: Pytester) -> None:
197         # If --confcutdir is not specified, and there is a configfile, default
198         # to the configfile's directory.
199         pytester.makeini("[pytest]")
200         sub = pytester.mkdir("sub")
201         os.chdir(sub)
202         config = pytester.parseconfigure()
203         assert config.pluginmanager._confcutdir == pytester.path
204 
205     @pytest.mark.xfail(reason="probably not needed")
206     def test_confcutdir(self, pytester: Pytester) -> None:
207         sub = pytester.mkdir("sub")
208         os.chdir(sub)
209         pytester.makeini(
210             """
211             [pytest]
212             addopts = --qwe
213         """
214         )
215         result = pytester.inline_run("--confcutdir=.")
216         assert result.ret == 0
217 
218     @pytest.mark.parametrize(
219         "ini_file_text, invalid_keys, warning_output, exception_text",
220         [
221             pytest.param(
222                 """
223                 [pytest]
224                 unknown_ini = value1
225                 another_unknown_ini = value2
226                 """,
227                 ["unknown_ini", "another_unknown_ini"],
228                 [
229                     "=*= warnings summary =*=",
230                     "*PytestConfigWarning:*Unknown config option: another_unknown_ini",
231                     "*PytestConfigWarning:*Unknown config option: unknown_ini",
232                 ],
233                 "Unknown config option: another_unknown_ini",
234                 id="2-unknowns",
235             ),
236             pytest.param(
237                 """
238                 [pytest]
239                 unknown_ini = value1
240                 minversion = 5.0.0
241                 """,
242                 ["unknown_ini"],
243                 [
244                     "=*= warnings summary =*=",
245                     "*PytestConfigWarning:*Unknown config option: unknown_ini",
246                 ],
247                 "Unknown config option: unknown_ini",
248                 id="1-unknown",
249             ),
250             pytest.param(
251                 """
252                 [some_other_header]
253                 unknown_ini = value1
254                 [pytest]
255                 minversion = 5.0.0
256                 """,
257                 [],
258                 [],
259                 "",
260                 id="unknown-in-other-header",
261             ),
262             pytest.param(
263                 """
264                 [pytest]
265                 minversion = 5.0.0
266                 """,
267                 [],
268                 [],
269                 "",
270                 id="no-unknowns",
271             ),
272             pytest.param(
273                 """
274                 [pytest]
275                 conftest_ini_key = 1
276                 """,
277                 [],
278                 [],
279                 "",
280                 id="1-known",
281             ),
282         ],
283     )
284     @pytest.mark.filterwarnings("default")
285     def test_invalid_config_options(
286         self,
287         pytester: Pytester,
288         ini_file_text,
289         invalid_keys,
290         warning_output,
291         exception_text,
292     ) -> None:
293         pytester.makeconftest(
294             """
295             def pytest_addoption(parser):
296                 parser.addini("conftest_ini_key", "")
297             """
298         )
299         pytester.makepyfile("def test(): pass")
300         pytester.makeini(ini_file_text)
301 
302         config = pytester.parseconfig()
303         assert sorted(config._get_unknown_ini_keys()) == sorted(invalid_keys)
304 
305         result = pytester.runpytest()
306         result.stdout.fnmatch_lines(warning_output)
307 
308         result = pytester.runpytest("--strict-config")
309         if exception_text:
310             result.stderr.fnmatch_lines("ERROR: " + exception_text)
311             assert result.ret == pytest.ExitCode.USAGE_ERROR
312         else:
313             result.stderr.no_fnmatch_line(exception_text)
314             assert result.ret == pytest.ExitCode.OK
315 
316     @pytest.mark.filterwarnings("default")
317     def test_silence_unknown_key_warning(self, pytester: Pytester) -> None:
318         """Unknown config key warnings can be silenced using filterwarnings (#7620)"""
319         pytester.makeini(
320             """
321             [pytest]
322             filterwarnings =
323                 ignore:Unknown config option:pytest.PytestConfigWarning
324             foobar=1
325         """
326         )
327         result = pytester.runpytest()
328         result.stdout.no_fnmatch_line("*PytestConfigWarning*")
329 
330     @pytest.mark.filterwarnings("default::pytest.PytestConfigWarning")
331     def test_disable_warnings_plugin_disables_config_warnings(
332         self, pytester: Pytester
333     ) -> None:
334         """Disabling 'warnings' plugin also disables config time warnings"""
335         pytester.makeconftest(
336             """
337             import pytest
338             def pytest_configure(config):
339                 config.issue_config_time_warning(
340                     pytest.PytestConfigWarning("custom config warning"),
341                     stacklevel=2,
342                 )
343         """
344         )
345         result = pytester.runpytest("-pno:warnings")
346         result.stdout.no_fnmatch_line("*PytestConfigWarning*")
347 
348     @pytest.mark.parametrize(
349         "ini_file_text, plugin_version, exception_text",
350         [
351             pytest.param(
352                 """
353                 [pytest]
354                 required_plugins = a z
355                 """,
356                 "1.5",
357                 "Missing required plugins: a, z",
358                 id="2-missing",
359             ),
360             pytest.param(
361                 """
362                 [pytest]
363                 required_plugins = a z myplugin
364                 """,
365                 "1.5",
366                 "Missing required plugins: a, z",
367                 id="2-missing-1-ok",
368             ),
369             pytest.param(
370                 """
371                 [pytest]
372                 required_plugins = myplugin
373                 """,
374                 "1.5",
375                 None,
376                 id="1-ok",
377             ),
378             pytest.param(
379                 """
380                 [pytest]
381                 required_plugins = myplugin==1.5
382                 """,
383                 "1.5",
384                 None,
385                 id="1-ok-pin-exact",
386             ),
387             pytest.param(
388                 """
389                 [pytest]
390                 required_plugins = myplugin>1.0,<2.0
391                 """,
392                 "1.5",
393                 None,
394                 id="1-ok-pin-loose",
395             ),
396             pytest.param(
397                 """
398                 [pytest]
399                 required_plugins = myplugin
400                 """,
401                 "1.5a1",
402                 None,
403                 id="1-ok-prerelease",
404             ),
405             pytest.param(
406                 """
407                 [pytest]
408                 required_plugins = myplugin==1.6
409                 """,
410                 "1.5",
411                 "Missing required plugins: myplugin==1.6",
412                 id="missing-version",
413             ),
414             pytest.param(
415                 """
416                 [pytest]
417                 required_plugins = myplugin==1.6 other==1.0
418                 """,
419                 "1.5",
420                 "Missing required plugins: myplugin==1.6, other==1.0",
421                 id="missing-versions",
422             ),
423             pytest.param(
424                 """
425                 [some_other_header]
426                 required_plugins = won't be triggered
427                 [pytest]
428                 """,
429                 "1.5",
430                 None,
431                 id="invalid-header",
432             ),
433         ],
434     )
435     def test_missing_required_plugins(
436         self,
437         pytester: Pytester,
438         monkeypatch: MonkeyPatch,
439         ini_file_text: str,
440         plugin_version: str,
441         exception_text: str,
442     ) -> None:
443         """Check 'required_plugins' option with various settings.
444 
445         This test installs a mock "myplugin-1.5" which is used in the parametrized test cases.
446         """
447 
448         @dataclasses.dataclass
449         class DummyEntryPoint:
450             name: str
451             module: str
452             group: str = "pytest11"
453 
454             def load(self):
455                 __import__(self.module)
456                 return sys.modules[self.module]
457 
458         entry_points = [
459             DummyEntryPoint("myplugin1", "myplugin1_module"),
460         ]
461 
462         @dataclasses.dataclass
463         class DummyDist:
464             entry_points: object
465             files: object = ()
466             version: str = plugin_version
467 
468             @property
469             def metadata(self):
470                 return {"name": "myplugin"}
471 
472         def my_dists():
473             return [DummyDist(entry_points)]
474 
475         pytester.makepyfile(myplugin1_module="# my plugin module")
476         pytester.syspathinsert()
477 
478         monkeypatch.setattr(importlib.metadata, "distributions", my_dists)
479         monkeypatch.delenv("PYTEST_DISABLE_PLUGIN_AUTOLOAD", raising=False)
480 
481         pytester.makeini(ini_file_text)
482 
483         if exception_text:
484             with pytest.raises(pytest.UsageError, match=exception_text):
485                 pytester.parseconfig()
486         else:
487             pytester.parseconfig()
488 
489     def test_early_config_cmdline(
490         self, pytester: Pytester, monkeypatch: MonkeyPatch
491     ) -> None:
492         """early_config contains options registered by third-party plugins.
493 
494         This is a regression involving pytest-cov (and possibly others) introduced in #7700.
495         """
496         pytester.makepyfile(
497             myplugin="""
498             def pytest_addoption(parser):
499                 parser.addoption('--foo', default=None, dest='foo')
500 
501             def pytest_load_initial_conftests(early_config, parser, args):
502                 assert early_config.known_args_namespace.foo == "1"
503             """
504         )
505         monkeypatch.setenv("PYTEST_PLUGINS", "myplugin")
506         pytester.syspathinsert()
507         result = pytester.runpytest("--foo=1")
508         result.stdout.fnmatch_lines("* no tests ran in *")
509 
510 
511 class TestConfigCmdlineParsing:
512     def test_parsing_again_fails(self, pytester: Pytester) -> None:
513         config = pytester.parseconfig()
514         pytest.raises(AssertionError, lambda: config.parse([]))
515 
516     def test_explicitly_specified_config_file_is_loaded(
517         self, pytester: Pytester
518     ) -> None:
519         pytester.makeconftest(
520             """
521             def pytest_addoption(parser):
522                 parser.addini("custom", "")
523         """
524         )
525         pytester.makeini(
526             """
527             [pytest]
528             custom = 0
529         """
530         )
531         pytester.makefile(
532             ".ini",
533             custom="""
534             [pytest]
535             custom = 1
536         """,
537         )
538         config = pytester.parseconfig("-c", "custom.ini")
539         assert config.getini("custom") == "1"
540         config = pytester.parseconfig("--config-file", "custom.ini")
541         assert config.getini("custom") == "1"
542 
543         pytester.makefile(
544             ".cfg",
545             custom_tool_pytest_section="""
546             [tool:pytest]
547             custom = 1
548         """,
549         )
550         config = pytester.parseconfig("-c", "custom_tool_pytest_section.cfg")
551         assert config.getini("custom") == "1"
552         config = pytester.parseconfig("--config-file", "custom_tool_pytest_section.cfg")
553         assert config.getini("custom") == "1"
554 
555         pytester.makefile(
556             ".toml",
557             custom="""
558                 [tool.pytest.ini_options]
559                 custom = 1
560                 value = [
561                 ]  # this is here on purpose, as it makes this an invalid '.ini' file
562             """,
563         )
564         config = pytester.parseconfig("-c", "custom.toml")
565         assert config.getini("custom") == "1"
566         config = pytester.parseconfig("--config-file", "custom.toml")
567         assert config.getini("custom") == "1"
568 
569     def test_absolute_win32_path(self, pytester: Pytester) -> None:
570         temp_ini_file = pytester.makefile(
571             ".ini",
572             custom="""
573             [pytest]
574             addopts = --version
575         """,
576         )
577         from os.path import normpath
578 
579         temp_ini_file_norm = normpath(str(temp_ini_file))
580         ret = pytest.main(["-c", temp_ini_file_norm])
581         assert ret == ExitCode.OK
582         ret = pytest.main(["--config-file", temp_ini_file_norm])
583         assert ret == ExitCode.OK
584 
585 
586 class TestConfigAPI:
587     def test_config_trace(self, pytester: Pytester) -> None:
588         config = pytester.parseconfig()
589         values: List[str] = []
590         config.trace.root.setwriter(values.append)
591         config.trace("hello")
592         assert len(values) == 1
593         assert values[0] == "hello [config]\n"
594 
595     def test_config_getoption(self, pytester: Pytester) -> None:
596         pytester.makeconftest(
597             """
598             def pytest_addoption(parser):
599                 parser.addoption("--hello", "-X", dest="hello")
600         """
601         )
602         config = pytester.parseconfig("--hello=this")
603         for x in ("hello", "--hello", "-X"):
604             assert config.getoption(x) == "this"
605         pytest.raises(ValueError, config.getoption, "qweqwe")
606 
607     def test_config_getoption_unicode(self, pytester: Pytester) -> None:
608         pytester.makeconftest(
609             """
610             def pytest_addoption(parser):
611                 parser.addoption('--hello', type=str)
612         """
613         )
614         config = pytester.parseconfig("--hello=this")
615         assert config.getoption("hello") == "this"
616 
617     def test_config_getvalueorskip(self, pytester: Pytester) -> None:
618         config = pytester.parseconfig()
619         pytest.raises(pytest.skip.Exception, config.getvalueorskip, "hello")
620         verbose = config.getvalueorskip("verbose")
621         assert verbose == config.option.verbose
622 
623     def test_config_getvalueorskip_None(self, pytester: Pytester) -> None:
624         pytester.makeconftest(
625             """
626             def pytest_addoption(parser):
627                 parser.addoption("--hello")
628         """
629         )
630         config = pytester.parseconfig()
631         with pytest.raises(pytest.skip.Exception):
632             config.getvalueorskip("hello")
633 
634     def test_getoption(self, pytester: Pytester) -> None:
635         config = pytester.parseconfig()
636         with pytest.raises(ValueError):
637             config.getvalue("x")
638         assert config.getoption("x", 1) == 1
639 
640     def test_getconftest_pathlist(self, pytester: Pytester, tmp_path: Path) -> None:
641         somepath = tmp_path.joinpath("x", "y", "z")
642         p = tmp_path.joinpath("conftest.py")
643         p.write_text(f"mylist = {['.', str(somepath)]}", encoding="utf-8")
644         config = pytester.parseconfigure(p)
645         assert (
646             config._getconftest_pathlist("notexist", path=tmp_path, rootpath=tmp_path)
647             is None
648         )
649         pl = (
650             config._getconftest_pathlist("mylist", path=tmp_path, rootpath=tmp_path)
651             or []
652         )
653         print(pl)
654         assert len(pl) == 2
655         assert pl[0] == tmp_path
656         assert pl[1] == somepath
657 
658     @pytest.mark.parametrize("maybe_type", ["not passed", "None", '"string"'])
659     def test_addini(self, pytester: Pytester, maybe_type: str) -> None:
660         if maybe_type == "not passed":
661             type_string = ""
662         else:
663             type_string = f", {maybe_type}"
664 
665         pytester.makeconftest(
666             f"""
667             def pytest_addoption(parser):
668                 parser.addini("myname", "my new ini value"{type_string})
669         """
670         )
671         pytester.makeini(
672             """
673             [pytest]
674             myname=hello
675         """
676         )
677         config = pytester.parseconfig()
678         val = config.getini("myname")
679         assert val == "hello"
680         pytest.raises(ValueError, config.getini, "other")
681 
682     @pytest.mark.parametrize("config_type", ["ini", "pyproject"])
683     def test_addini_paths(self, pytester: Pytester, config_type: str) -> None:
684         pytester.makeconftest(
685             """
686             def pytest_addoption(parser):
687                 parser.addini("paths", "my new ini value", type="paths")
688                 parser.addini("abc", "abc value")
689         """
690         )
691         if config_type == "ini":
692             inipath = pytester.makeini(
693                 """
694                 [pytest]
695                 paths=hello world/sub.py
696             """
697             )
698         elif config_type == "pyproject":
699             inipath = pytester.makepyprojecttoml(
700                 """
701                 [tool.pytest.ini_options]
702                 paths=["hello", "world/sub.py"]
703             """
704             )
705         config = pytester.parseconfig()
706         values = config.getini("paths")
707         assert len(values) == 2
708         assert values[0] == inipath.parent.joinpath("hello")
709         assert values[1] == inipath.parent.joinpath("world/sub.py")
710         pytest.raises(ValueError, config.getini, "other")
711 
712     def make_conftest_for_args(self, pytester: Pytester) -> None:
713         pytester.makeconftest(
714             """
715             def pytest_addoption(parser):
716                 parser.addini("args", "new args", type="args")
717                 parser.addini("a2", "", "args", default="1 2 3".split())
718         """
719         )
720 
721     def test_addini_args_ini_files(self, pytester: Pytester) -> None:
722         self.make_conftest_for_args(pytester)
723         pytester.makeini(
724             """
725             [pytest]
726             args=123 "123 hello" "this"
727             """
728         )
729         self.check_config_args(pytester)
730 
731     def test_addini_args_pyproject_toml(self, pytester: Pytester) -> None:
732         self.make_conftest_for_args(pytester)
733         pytester.makepyprojecttoml(
734             """
735             [tool.pytest.ini_options]
736             args = ["123", "123 hello", "this"]
737             """
738         )
739         self.check_config_args(pytester)
740 
741     def check_config_args(self, pytester: Pytester) -> None:
742         config = pytester.parseconfig()
743         values = config.getini("args")
744         assert values == ["123", "123 hello", "this"]
745         values = config.getini("a2")
746         assert values == list("123")
747 
748     def make_conftest_for_linelist(self, pytester: Pytester) -> None:
749         pytester.makeconftest(
750             """
751             def pytest_addoption(parser):
752                 parser.addini("xy", "", type="linelist")
753                 parser.addini("a2", "", "linelist")
754         """
755         )
756 
757     def test_addini_linelist_ini_files(self, pytester: Pytester) -> None:
758         self.make_conftest_for_linelist(pytester)
759         pytester.makeini(
760             """
761             [pytest]
762             xy= 123 345
763                 second line
764         """
765         )
766         self.check_config_linelist(pytester)
767 
768     def test_addini_linelist_pprojecttoml(self, pytester: Pytester) -> None:
769         self.make_conftest_for_linelist(pytester)
770         pytester.makepyprojecttoml(
771             """
772             [tool.pytest.ini_options]
773             xy = ["123 345", "second line"]
774         """
775         )
776         self.check_config_linelist(pytester)
777 
778     def check_config_linelist(self, pytester: Pytester) -> None:
779         config = pytester.parseconfig()
780         values = config.getini("xy")
781         assert len(values) == 2
782         assert values == ["123 345", "second line"]
783         values = config.getini("a2")
784         assert values == []
785 
786     @pytest.mark.parametrize(
787         "str_val, bool_val", [("True", True), ("no", False), ("no-ini", True)]
788     )
789     def test_addini_bool(
790         self, pytester: Pytester, str_val: str, bool_val: bool
791     ) -> None:
792         pytester.makeconftest(
793             """
794             def pytest_addoption(parser):
795                 parser.addini("strip", "", type="bool", default=True)
796         """
797         )
798         if str_val != "no-ini":
799             pytester.makeini(
800                 """
801                 [pytest]
802                 strip=%s
803             """
804                 % str_val
805             )
806         config = pytester.parseconfig()
807         assert config.getini("strip") is bool_val
808 
809     def test_addinivalue_line_existing(self, pytester: Pytester) -> None:
810         pytester.makeconftest(
811             """
812             def pytest_addoption(parser):
813                 parser.addini("xy", "", type="linelist")
814         """
815         )
816         pytester.makeini(
817             """
818             [pytest]
819             xy= 123
820         """
821         )
822         config = pytester.parseconfig()
823         values = config.getini("xy")
824         assert len(values) == 1
825         assert values == ["123"]
826         config.addinivalue_line("xy", "456")
827         values = config.getini("xy")
828         assert len(values) == 2
829         assert values == ["123", "456"]
830 
831     def test_addinivalue_line_new(self, pytester: Pytester) -> None:
832         pytester.makeconftest(
833             """
834             def pytest_addoption(parser):
835                 parser.addini("xy", "", type="linelist")
836         """
837         )
838         config = pytester.parseconfig()
839         assert not config.getini("xy")
840         config.addinivalue_line("xy", "456")
841         values = config.getini("xy")
842         assert len(values) == 1
843         assert values == ["456"]
844         config.addinivalue_line("xy", "123")
845         values = config.getini("xy")
846         assert len(values) == 2
847         assert values == ["456", "123"]
848 
849     def test_confcutdir_check_isdir(self, pytester: Pytester) -> None:
850         """Give an error if --confcutdir is not a valid directory (#2078)"""
851         exp_match = r"^--confcutdir must be a directory, given: "
852         with pytest.raises(pytest.UsageError, match=exp_match):
853             pytester.parseconfig("--confcutdir", pytester.path.joinpath("file"))
854         with pytest.raises(pytest.UsageError, match=exp_match):
855             pytester.parseconfig("--confcutdir", pytester.path.joinpath("nonexistent"))
856 
857         p = pytester.mkdir("dir")
858         config = pytester.parseconfig("--confcutdir", p)
859         assert config.getoption("confcutdir") == str(p)
860 
861     @pytest.mark.parametrize(
862         "names, expected",
863         [
864             # dist-info based distributions root are files as will be put in PYTHONPATH
865             (["bar.py"], ["bar"]),
866             (["foo/bar.py"], ["bar"]),
867             (["foo/bar.pyc"], []),
868             (["foo/__init__.py"], ["foo"]),
869             (["bar/__init__.py", "xz.py"], ["bar", "xz"]),
870             (["setup.py"], []),
871             # egg based distributions root contain the files from the dist root
872             (["src/bar/__init__.py"], ["bar"]),
873             (["src/bar/__init__.py", "setup.py"], ["bar"]),
874             (["source/python/bar/__init__.py", "setup.py"], ["bar"]),
875             # editable installation finder modules
876             (["__editable___xyz_finder.py"], []),
877             (["bar/__init__.py", "__editable___xyz_finder.py"], ["bar"]),
878         ],
879     )
880     def test_iter_rewritable_modules(self, names, expected) -> None:
881         assert list(_iter_rewritable_modules(names)) == expected
882 
883 
884 class TestConfigFromdictargs:
885     def test_basic_behavior(self, _sys_snapshot) -> None:
886         option_dict = {"verbose": 444, "foo": "bar", "capture": "no"}
887         args = ["a", "b"]
888 
889         config = Config.fromdictargs(option_dict, args)
890         with pytest.raises(AssertionError):
891             config.parse(["should refuse to parse again"])
892         assert config.option.verbose == 444
893         assert config.option.foo == "bar"
894         assert config.option.capture == "no"
895         assert config.args == args
896 
897     def test_invocation_params_args(self, _sys_snapshot) -> None:
898         """Show that fromdictargs can handle args in their "orig" format"""
899         option_dict: Dict[str, object] = {}
900         args = ["-vvvv", "-s", "a", "b"]
901 
902         config = Config.fromdictargs(option_dict, args)
903         assert config.args == ["a", "b"]
904         assert config.invocation_params.args == tuple(args)
905         assert config.option.verbose == 4
906         assert config.option.capture == "no"
907 
908     def test_inifilename(self, tmp_path: Path) -> None:
909         d1 = tmp_path.joinpath("foo")
910         d1.mkdir()
911         p1 = d1.joinpath("bar.ini")
912         p1.touch()
913         p1.write_text(
914             textwrap.dedent(
915                 """\
916                 [pytest]
917                 name = value
918                 """
919             ),
920             encoding="utf-8",
921         )
922 
923         inifilename = "../../foo/bar.ini"
924         option_dict = {"inifilename": inifilename, "capture": "no"}
925 
926         cwd = tmp_path.joinpath("a/b")
927         cwd.mkdir(parents=True)
928         p2 = cwd.joinpath("pytest.ini")
929         p2.touch()
930         p2.write_text(
931             textwrap.dedent(
932                 """\
933                 [pytest]
934                 name = wrong-value
935                 should_not_be_set = true
936                 """
937             ),
938             encoding="utf-8",
939         )
940         with MonkeyPatch.context() as mp:
941             mp.chdir(cwd)
942             config = Config.fromdictargs(option_dict, ())
943             inipath = absolutepath(inifilename)
944 
945         assert config.args == [str(cwd)]
946         assert config.option.inifilename == inifilename
947         assert config.option.capture == "no"
948 
949         # this indicates this is the file used for getting configuration values
950         assert config.inipath == inipath
951         assert config.inicfg.get("name") == "value"
952         assert config.inicfg.get("should_not_be_set") is None
953 
954 
955 def test_options_on_small_file_do_not_blow_up(pytester: Pytester) -> None:
956     def runfiletest(opts: Sequence[str]) -> None:
957         reprec = pytester.inline_run(*opts)
958         passed, skipped, failed = reprec.countoutcomes()
959         assert failed == 2
960         assert skipped == passed == 0
961 
962     path = str(
963         pytester.makepyfile(
964             """
965         def test_f1(): assert 0
966         def test_f2(): assert 0
967     """
968         )
969     )
970 
971     runfiletest([path])
972     runfiletest(["-l", path])
973     runfiletest(["-s", path])
974     runfiletest(["--tb=no", path])
975     runfiletest(["--tb=short", path])
976     runfiletest(["--tb=long", path])
977     runfiletest(["--fulltrace", path])
978     runfiletest(["--traceconfig", path])
979     runfiletest(["-v", path])
980     runfiletest(["-v", "-v", path])
981 
982 
983 def test_preparse_ordering_with_setuptools(
984     pytester: Pytester, monkeypatch: MonkeyPatch
985 ) -> None:
986     monkeypatch.delenv("PYTEST_DISABLE_PLUGIN_AUTOLOAD", raising=False)
987 
988     class EntryPoint:
989         name = "mytestplugin"
990         group = "pytest11"
991 
992         def load(self):
993             class PseudoPlugin:
994                 x = 42
995 
996             return PseudoPlugin()
997 
998     class Dist:
999         files = ()
1000         metadata = {"name": "foo"}
1001         entry_points = (EntryPoint(),)
1002 
1003     def my_dists():
1004         return (Dist,)
1005 
1006     monkeypatch.setattr(importlib.metadata, "distributions", my_dists)
1007     pytester.makeconftest(
1008         """
1009         pytest_plugins = "mytestplugin",
1010     """
1011     )
1012     monkeypatch.setenv("PYTEST_PLUGINS", "mytestplugin")
1013     config = pytester.parseconfig()
1014     plugin = config.pluginmanager.getplugin("mytestplugin")
1015     assert plugin.x == 42
1016 
1017 
1018 def test_setuptools_importerror_issue1479(
1019     pytester: Pytester, monkeypatch: MonkeyPatch
1020 ) -> None:
1021     monkeypatch.delenv("PYTEST_DISABLE_PLUGIN_AUTOLOAD", raising=False)
1022 
1023     class DummyEntryPoint:
1024         name = "mytestplugin"
1025         group = "pytest11"
1026 
1027         def load(self):
1028             raise ImportError("Don't hide me!")
1029 
1030     class Distribution:
1031         version = "1.0"
1032         files = ("foo.txt",)
1033         metadata = {"name": "foo"}
1034         entry_points = (DummyEntryPoint(),)
1035 
1036     def distributions():
1037         return (Distribution(),)
1038 
1039     monkeypatch.setattr(importlib.metadata, "distributions", distributions)
1040     with pytest.raises(ImportError):
1041         pytester.parseconfig()
1042 
1043 
1044 def test_importlib_metadata_broken_distribution(
1045     pytester: Pytester, monkeypatch: MonkeyPatch
1046 ) -> None:
1047     """Integration test for broken distributions with 'files' metadata being None (#5389)"""
1048     monkeypatch.delenv("PYTEST_DISABLE_PLUGIN_AUTOLOAD", raising=False)
1049 
1050     class DummyEntryPoint:
1051         name = "mytestplugin"
1052         group = "pytest11"
1053 
1054         def load(self):
1055             return object()
1056 
1057     class Distribution:
1058         version = "1.0"
1059         files = None
1060         metadata = {"name": "foo"}
1061         entry_points = (DummyEntryPoint(),)
1062 
1063     def distributions():
1064         return (Distribution(),)
1065 
1066     monkeypatch.setattr(importlib.metadata, "distributions", distributions)
1067     pytester.parseconfig()
1068 
1069 
1070 @pytest.mark.parametrize("block_it", [True, False])
1071 def test_plugin_preparse_prevents_setuptools_loading(
1072     pytester: Pytester, monkeypatch: MonkeyPatch, block_it: bool
1073 ) -> None:
1074     monkeypatch.delenv("PYTEST_DISABLE_PLUGIN_AUTOLOAD", raising=False)
1075 
1076     plugin_module_placeholder = object()
1077 
1078     class DummyEntryPoint:
1079         name = "mytestplugin"
1080         group = "pytest11"
1081 
1082         def load(self):
1083             return plugin_module_placeholder
1084 
1085     class Distribution:
1086         version = "1.0"
1087         files = ("foo.txt",)
1088         metadata = {"name": "foo"}
1089         entry_points = (DummyEntryPoint(),)
1090 
1091     def distributions():
1092         return (Distribution(),)
1093 
1094     monkeypatch.setattr(importlib.metadata, "distributions", distributions)
1095     args = ("-p", "no:mytestplugin") if block_it else ()
1096     config = pytester.parseconfig(*args)
1097     config.pluginmanager.import_plugin("mytestplugin")
1098     if block_it:
1099         assert "mytestplugin" not in sys.modules
1100         assert config.pluginmanager.get_plugin("mytestplugin") is None
1101     else:
1102         assert (
1103             config.pluginmanager.get_plugin("mytestplugin") is plugin_module_placeholder
1104         )
1105 
1106 
1107 @pytest.mark.parametrize(
1108     "parse_args,should_load", [(("-p", "mytestplugin"), True), ((), False)]
1109 )
1110 def test_disable_plugin_autoload(
1111     pytester: Pytester,
1112     monkeypatch: MonkeyPatch,
1113     parse_args: Union[Tuple[str, str], Tuple[()]],
1114     should_load: bool,
1115 ) -> None:
1116     class DummyEntryPoint:
1117         project_name = name = "mytestplugin"
1118         group = "pytest11"
1119         version = "1.0"
1120 
1121         def load(self):
1122             return sys.modules[self.name]
1123 
1124     class Distribution:
1125         metadata = {"name": "foo"}
1126         entry_points = (DummyEntryPoint(),)
1127         files = ()
1128 
1129     class PseudoPlugin:
1130         x = 42
1131 
1132         attrs_used = []
1133 
1134         def __getattr__(self, name):
1135             assert name == "__loader__"
1136             self.attrs_used.append(name)
1137             return object()
1138 
1139     def distributions():
1140         return (Distribution(),)
1141 
1142     monkeypatch.setenv("PYTEST_DISABLE_PLUGIN_AUTOLOAD", "1")
1143     monkeypatch.setattr(importlib.metadata, "distributions", distributions)
1144     monkeypatch.setitem(sys.modules, "mytestplugin", PseudoPlugin())  # type: ignore[misc]
1145     config = pytester.parseconfig(*parse_args)
1146     has_loaded = config.pluginmanager.get_plugin("mytestplugin") is not None
1147     assert has_loaded == should_load
1148     if should_load:
1149         assert PseudoPlugin.attrs_used == ["__loader__"]
1150     else:
1151         assert PseudoPlugin.attrs_used == []
1152 
1153 
1154 def test_plugin_loading_order(pytester: Pytester) -> None:
1155     """Test order of plugin loading with `-p`."""
1156     p1 = pytester.makepyfile(
1157         """
1158         def test_terminal_plugin(request):
1159             import myplugin
1160             assert myplugin.terminal_plugin == [False, True]
1161         """,
1162         **{
1163             "myplugin": """
1164             terminal_plugin = []
1165 
1166             def pytest_configure(config):
1167                 terminal_plugin.append(bool(config.pluginmanager.get_plugin("terminalreporter")))
1168 
1169             def pytest_sessionstart(session):
1170                 config = session.config
1171                 terminal_plugin.append(bool(config.pluginmanager.get_plugin("terminalreporter")))
1172             """
1173         },
1174     )
1175     pytester.syspathinsert()
1176     result = pytester.runpytest("-p", "myplugin", str(p1))
1177     assert result.ret == 0
1178 
1179 
1180 def test_cmdline_processargs_simple(pytester: Pytester) -> None:
1181     pytester.makeconftest(
1182         """
1183         def pytest_cmdline_preparse(args):
1184             args.append("-h")
1185     """
1186     )
1187     result = pytester.runpytest("-Wignore::pytest.PytestRemovedIn8Warning")
1188     result.stdout.fnmatch_lines(["*pytest*", "*-h*"])
1189 
1190 
1191 def test_invalid_options_show_extra_information(pytester: Pytester) -> None:
1192     """Display extra information when pytest exits due to unrecognized
1193     options in the command-line."""
1194     pytester.makeini(
1195         """
1196         [pytest]
1197         addopts = --invalid-option
1198     """
1199     )
1200     result = pytester.runpytest()
1201     result.stderr.fnmatch_lines(
1202         [
1203             "*error: unrecognized arguments: --invalid-option*",
1204             "*  inifile: %s*" % pytester.path.joinpath("tox.ini"),
1205             "*  rootdir: %s*" % pytester.path,
1206         ]
1207     )
1208 
1209 
1210 @pytest.mark.parametrize(
1211     "args",
1212     [
1213         ["dir1", "dir2", "-v"],
1214         ["dir1", "-v", "dir2"],
1215         ["dir2", "-v", "dir1"],
1216         ["-v", "dir2", "dir1"],
1217     ],
1218 )
1219 def test_consider_args_after_options_for_rootdir(
1220     pytester: Pytester, args: List[str]
1221 ) -> None:
1222     """
1223     Consider all arguments in the command-line for rootdir
1224     discovery, even if they happen to occur after an option. #949
1225     """
1226     # replace "dir1" and "dir2" from "args" into their real directory
1227     root = pytester.mkdir("myroot")
1228     d1 = root.joinpath("dir1")
1229     d1.mkdir()
1230     d2 = root.joinpath("dir2")
1231     d2.mkdir()
1232     for i, arg in enumerate(args):
1233         if arg == "dir1":
1234             args[i] = str(d1)
1235         elif arg == "dir2":
1236             args[i] = str(d2)
1237     with MonkeyPatch.context() as mp:
1238         mp.chdir(root)
1239         result = pytester.runpytest(*args)
1240     result.stdout.fnmatch_lines(["*rootdir: *myroot"])
1241 
1242 
1243 def test_toolongargs_issue224(pytester: Pytester) -> None:
1244     result = pytester.runpytest("-m", "hello" * 500)
1245     assert result.ret == ExitCode.NO_TESTS_COLLECTED
1246 
1247 
1248 def test_config_in_subdirectory_colon_command_line_issue2148(
1249     pytester: Pytester,
1250 ) -> None:
1251     conftest_source = """
1252         def pytest_addoption(parser):
1253             parser.addini('foo', 'foo')
1254     """
1255 
1256     pytester.makefile(
1257         ".ini",
1258         **{"pytest": "[pytest]\nfoo = root", "subdir/pytest": "[pytest]\nfoo = subdir"},
1259     )
1260 
1261     pytester.makepyfile(
1262         **{
1263             "conftest": conftest_source,
1264             "subdir/conftest": conftest_source,
1265             "subdir/test_foo": """\
1266             def test_foo(pytestconfig):
1267                 assert pytestconfig.getini('foo') == 'subdir'
1268             """,
1269         }
1270     )
1271 
1272     result = pytester.runpytest("subdir/test_foo.py::test_foo")
1273     assert result.ret == 0
1274 
1275 
1276 def test_notify_exception(pytester: Pytester, capfd) -> None:
1277     config = pytester.parseconfig()
1278     with pytest.raises(ValueError) as excinfo:
1279         raise ValueError(1)
1280     config.notify_exception(excinfo, config.option)
1281     _, err = capfd.readouterr()
1282     assert "ValueError" in err
1283 
1284     class A:
1285         def pytest_internalerror(self):
1286             return True
1287 
1288     config.pluginmanager.register(A())
1289     config.notify_exception(excinfo, config.option)
1290     _, err = capfd.readouterr()
1291     assert not err
1292 
1293     config = pytester.parseconfig("-p", "no:terminal")
1294     with pytest.raises(ValueError) as excinfo:
1295         raise ValueError(1)
1296     config.notify_exception(excinfo, config.option)
1297     _, err = capfd.readouterr()
1298     assert "ValueError" in err
1299 
1300 
1301 def test_no_terminal_discovery_error(pytester: Pytester) -> None:
1302     pytester.makepyfile("raise TypeError('oops!')")
1303     result = pytester.runpytest("-p", "no:terminal", "--collect-only")
1304     assert result.ret == ExitCode.INTERRUPTED
1305 
1306 
1307 def test_load_initial_conftest_last_ordering(_config_for_test):
1308     pm = _config_for_test.pluginmanager
1309 
1310     class My:
1311         def pytest_load_initial_conftests(self):
1312             pass
1313 
1314     m = My()
1315     pm.register(m)
1316     hc = pm.hook.pytest_load_initial_conftests
1317     hookimpls = [
1318         (
1319             hookimpl.function.__module__,
1320             "wrapper" if hookimpl.hookwrapper else "nonwrapper",
1321         )
1322         for hookimpl in hc.get_hookimpls()
1323     ]
1324     assert hookimpls == [
1325         ("_pytest.config", "nonwrapper"),
1326         (m.__module__, "nonwrapper"),
1327         ("_pytest.legacypath", "nonwrapper"),
1328         ("_pytest.python_path", "nonwrapper"),
1329         ("_pytest.capture", "wrapper"),
1330         ("_pytest.warnings", "wrapper"),
1331     ]
1332 
1333 
1334 def test_get_plugin_specs_as_list() -> None:
1335     def exp_match(val: object) -> str:
1336         return (
1337             "Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %s"
1338             % re.escape(repr(val))
1339         )
1340 
1341     with pytest.raises(pytest.UsageError, match=exp_match({"foo"})):
1342         _get_plugin_specs_as_list({"foo"})  # type: ignore[arg-type]
1343     with pytest.raises(pytest.UsageError, match=exp_match({})):
1344         _get_plugin_specs_as_list(dict())  # type: ignore[arg-type]
1345 
1346     assert _get_plugin_specs_as_list(None) == []
1347     assert _get_plugin_specs_as_list("") == []
1348     assert _get_plugin_specs_as_list("foo") == ["foo"]
1349     assert _get_plugin_specs_as_list("foo,bar") == ["foo", "bar"]
1350     assert _get_plugin_specs_as_list(["foo", "bar"]) == ["foo", "bar"]
1351     assert _get_plugin_specs_as_list(("foo", "bar")) == ["foo", "bar"]
1352 
1353 
1354 def test_collect_pytest_prefix_bug_integration(pytester: Pytester) -> None:
1355     """Integration test for issue #3775"""
1356     p = pytester.copy_example("config/collect_pytest_prefix")
1357     result = pytester.runpytest(p)
1358     result.stdout.fnmatch_lines(["* 1 passed *"])
1359 
1360 
1361 def test_collect_pytest_prefix_bug(pytestconfig):
1362     """Ensure we collect only actual functions from conftest files (#3775)"""
1363 
1364     class Dummy:
1365         class pytest_something:
1366             pass
1367 
1368     pm = pytestconfig.pluginmanager
1369     assert pm.parse_hookimpl_opts(Dummy(), "pytest_something") is None
1370 
1371 
1372 class TestRootdir:
1373     def test_simple_noini(self, tmp_path: Path, monkeypatch: MonkeyPatch) -> None:
1374         assert get_common_ancestor([tmp_path]) == tmp_path
1375         a = tmp_path / "a"
1376         a.mkdir()
1377         assert get_common_ancestor([a, tmp_path]) == tmp_path
1378         assert get_common_ancestor([tmp_path, a]) == tmp_path
1379         monkeypatch.chdir(tmp_path)
1380         assert get_common_ancestor([]) == tmp_path
1381         no_path = tmp_path / "does-not-exist"
1382         assert get_common_ancestor([no_path]) == tmp_path
1383         assert get_common_ancestor([no_path / "a"]) == tmp_path
1384 
1385     @pytest.mark.parametrize(
1386         "name, contents",
1387         [
1388             pytest.param("pytest.ini", "[pytest]\nx=10", id="pytest.ini"),
1389             pytest.param(
1390                 "pyproject.toml", "[tool.pytest.ini_options]\nx=10", id="pyproject.toml"
1391             ),
1392             pytest.param("tox.ini", "[pytest]\nx=10", id="tox.ini"),
1393             pytest.param("setup.cfg", "[tool:pytest]\nx=10", id="setup.cfg"),
1394         ],
1395     )
1396     def test_with_ini(self, tmp_path: Path, name: str, contents: str) -> None:
1397         inipath = tmp_path / name
1398         inipath.write_text(contents, encoding="utf-8")
1399 
1400         a = tmp_path / "a"
1401         a.mkdir()
1402         b = a / "b"
1403         b.mkdir()
1404         for args in ([str(tmp_path)], [str(a)], [str(b)]):
1405             rootpath, parsed_inipath, _ = determine_setup(None, args)
1406             assert rootpath == tmp_path
1407             assert parsed_inipath == inipath
1408         rootpath, parsed_inipath, ini_config = determine_setup(None, [str(b), str(a)])
1409         assert rootpath == tmp_path
1410         assert parsed_inipath == inipath
1411         assert ini_config == {"x": "10"}
1412 
1413     @pytest.mark.parametrize("name", ["setup.cfg", "tox.ini"])
1414     def test_pytestini_overrides_empty_other(self, tmp_path: Path, name: str) -> None:
1415         inipath = tmp_path / "pytest.ini"
1416         inipath.touch()
1417         a = tmp_path / "a"
1418         a.mkdir()
1419         (a / name).touch()
1420         rootpath, parsed_inipath, _ = determine_setup(None, [str(a)])
1421         assert rootpath == tmp_path
1422         assert parsed_inipath == inipath
1423 
1424     def test_setuppy_fallback(self, tmp_path: Path) -> None:
1425         a = tmp_path / "a"
1426         a.mkdir()
1427         (a / "setup.cfg").touch()
1428         (tmp_path / "setup.py").touch()
1429         rootpath, inipath, inicfg = determine_setup(None, [str(a)])
1430         assert rootpath == tmp_path
1431         assert inipath is None
1432         assert inicfg == {}
1433 
1434     def test_nothing(self, tmp_path: Path, monkeypatch: MonkeyPatch) -> None:
1435         monkeypatch.chdir(tmp_path)
1436         rootpath, inipath, inicfg = determine_setup(None, [str(tmp_path)])
1437         assert rootpath == tmp_path
1438         assert inipath is None
1439         assert inicfg == {}
1440 
1441     @pytest.mark.parametrize(
1442         "name, contents",
1443         [
1444             # pytest.param("pytest.ini", "[pytest]\nx=10", id="pytest.ini"),
1445             pytest.param(
1446                 "pyproject.toml", "[tool.pytest.ini_options]\nx=10", id="pyproject.toml"
1447             ),
1448             # pytest.param("tox.ini", "[pytest]\nx=10", id="tox.ini"),
1449             # pytest.param("setup.cfg", "[tool:pytest]\nx=10", id="setup.cfg"),
1450         ],
1451     )
1452     def test_with_specific_inifile(
1453         self, tmp_path: Path, name: str, contents: str
1454     ) -> None:
1455         p = tmp_path / name
1456         p.touch()
1457         p.write_text(contents, encoding="utf-8")
1458         rootpath, inipath, ini_config = determine_setup(str(p), [str(tmp_path)])
1459         assert rootpath == tmp_path
1460         assert inipath == p
1461         assert ini_config == {"x": "10"}
1462 
1463     def test_explicit_config_file_sets_rootdir(
1464         self, tmp_path: Path, monkeypatch: pytest.MonkeyPatch
1465     ) -> None:
1466         tests_dir = tmp_path / "tests"
1467         tests_dir.mkdir()
1468 
1469         monkeypatch.chdir(tmp_path)
1470 
1471         # No config file is explicitly given: rootdir is determined to be cwd.
1472         rootpath, found_inipath, *_ = determine_setup(None, [str(tests_dir)])
1473         assert rootpath == tmp_path
1474         assert found_inipath is None
1475 
1476         # Config file is explicitly given: rootdir is determined to be inifile's directory.
1477         inipath = tmp_path / "pytest.ini"
1478         inipath.touch()
1479         rootpath, found_inipath, *_ = determine_setup(str(inipath), [str(tests_dir)])
1480         assert rootpath == tmp_path
1481         assert found_inipath == inipath
1482 
1483     def test_with_arg_outside_cwd_without_inifile(
1484         self, tmp_path: Path, monkeypatch: MonkeyPatch
1485     ) -> None:
1486         monkeypatch.chdir(tmp_path)
1487         a = tmp_path / "a"
1488         a.mkdir()
1489         b = tmp_path / "b"
1490         b.mkdir()
1491         rootpath, inifile, _ = determine_setup(None, [str(a), str(b)])
1492         assert rootpath == tmp_path
1493         assert inifile is None
1494 
1495     def test_with_arg_outside_cwd_with_inifile(self, tmp_path: Path) -> None:
1496         a = tmp_path / "a"
1497         a.mkdir()
1498         b = tmp_path / "b"
1499         b.mkdir()
1500         inipath = a / "pytest.ini"
1501         inipath.touch()
1502         rootpath, parsed_inipath, _ = determine_setup(None, [str(a), str(b)])
1503         assert rootpath == a
1504         assert inipath == parsed_inipath
1505 
1506     @pytest.mark.parametrize("dirs", ([], ["does-not-exist"], ["a/does-not-exist"]))
1507     def test_with_non_dir_arg(
1508         self, dirs: Sequence[str], tmp_path: Path, monkeypatch: MonkeyPatch
1509     ) -> None:
1510         monkeypatch.chdir(tmp_path)
1511         rootpath, inipath, _ = determine_setup(None, dirs)
1512         assert rootpath == tmp_path
1513         assert inipath is None
1514 
1515     def test_with_existing_file_in_subdir(
1516         self, tmp_path: Path, monkeypatch: MonkeyPatch
1517     ) -> None:
1518         a = tmp_path / "a"
1519         a.mkdir()
1520         (a / "exists").touch()
1521         monkeypatch.chdir(tmp_path)
1522         rootpath, inipath, _ = determine_setup(None, ["a/exist"])
1523         assert rootpath == tmp_path
1524         assert inipath is None
1525 
1526     def test_with_config_also_in_parent_directory(
1527         self, tmp_path: Path, monkeypatch: MonkeyPatch
1528     ) -> None:
1529         """Regression test for #7807."""
1530         (tmp_path / "setup.cfg").write_text("[tool:pytest]\n", "utf-8")
1531         (tmp_path / "myproject").mkdir()
1532         (tmp_path / "myproject" / "setup.cfg").write_text("[tool:pytest]\n", "utf-8")
1533         (tmp_path / "myproject" / "tests").mkdir()
1534         monkeypatch.chdir(tmp_path / "myproject")
1535 
1536         rootpath, inipath, _ = determine_setup(None, ["tests/"])
1537 
1538         assert rootpath == tmp_path / "myproject"
1539         assert inipath == tmp_path / "myproject" / "setup.cfg"
1540 
1541 
1542 class TestOverrideIniArgs:
1543     @pytest.mark.parametrize("name", "setup.cfg tox.ini pytest.ini".split())
1544     def test_override_ini_names(self, pytester: Pytester, name: str) -> None:
1545         section = "[pytest]" if name != "setup.cfg" else "[tool:pytest]"
1546         pytester.path.joinpath(name).write_text(
1547             textwrap.dedent(
1548                 """
1549             {section}
1550             custom = 1.0""".format(
1551                     section=section
1552                 )
1553             ),
1554             encoding="utf-8",
1555         )
1556         pytester.makeconftest(
1557             """
1558             def pytest_addoption(parser):
1559                 parser.addini("custom", "")"""
1560         )
1561         pytester.makepyfile(
1562             """
1563             def test_pass(pytestconfig):
1564                 ini_val = pytestconfig.getini("custom")
1565                 print('\\ncustom_option:%s\\n' % ini_val)"""
1566         )
1567 
1568         result = pytester.runpytest("--override-ini", "custom=2.0", "-s")
1569         assert result.ret == 0
1570         result.stdout.fnmatch_lines(["custom_option:2.0"])
1571 
1572         result = pytester.runpytest(
1573             "--override-ini", "custom=2.0", "--override-ini=custom=3.0", "-s"
1574         )
1575         assert result.ret == 0
1576         result.stdout.fnmatch_lines(["custom_option:3.0"])
1577 
1578     def test_override_ini_paths(self, pytester: Pytester) -> None:
1579         pytester.makeconftest(
1580             """
1581             def pytest_addoption(parser):
1582                 parser.addini("paths", "my new ini value", type="paths")"""
1583         )
1584         pytester.makeini(
1585             """
1586             [pytest]
1587             paths=blah.py"""
1588         )
1589         pytester.makepyfile(
1590             r"""
1591             def test_overriden(pytestconfig):
1592                 config_paths = pytestconfig.getini("paths")
1593                 print(config_paths)
1594                 for cpf in config_paths:
1595                     print('\nuser_path:%s' % cpf.name)
1596             """
1597         )
1598         result = pytester.runpytest(
1599             "--override-ini", "paths=foo/bar1.py foo/bar2.py", "-s"
1600         )
1601         result.stdout.fnmatch_lines(["user_path:bar1.py", "user_path:bar2.py"])
1602 
1603     def test_override_multiple_and_default(self, pytester: Pytester) -> None:
1604         pytester.makeconftest(
1605             """
1606             def pytest_addoption(parser):
1607                 addini = parser.addini
1608                 addini("custom_option_1", "", default="o1")
1609                 addini("custom_option_2", "", default="o2")
1610                 addini("custom_option_3", "", default=False, type="bool")
1611                 addini("custom_option_4", "", default=True, type="bool")"""
1612         )
1613         pytester.makeini(
1614             """
1615             [pytest]
1616             custom_option_1=custom_option_1
1617             custom_option_2=custom_option_2
1618         """
1619         )
1620         pytester.makepyfile(
1621             """
1622             def test_multiple_options(pytestconfig):
1623                 prefix = "custom_option"
1624                 for x in range(1, 5):
1625                     ini_value=pytestconfig.getini("%s_%d" % (prefix, x))
1626                     print('\\nini%d:%s' % (x, ini_value))
1627         """
1628         )
1629         result = pytester.runpytest(
1630             "--override-ini",
1631             "custom_option_1=fulldir=/tmp/user1",
1632             "-o",
1633             "custom_option_2=url=/tmp/user2?a=b&d=e",
1634             "-o",
1635             "custom_option_3=True",
1636             "-o",
1637             "custom_option_4=no",
1638             "-s",
1639         )
1640         result.stdout.fnmatch_lines(
1641             [
1642                 "ini1:fulldir=/tmp/user1",
1643                 "ini2:url=/tmp/user2?a=b&d=e",
1644                 "ini3:True",
1645                 "ini4:False",
1646             ]
1647         )
1648 
1649     def test_override_ini_usage_error_bad_style(self, pytester: Pytester) -> None:
1650         pytester.makeini(
1651             """
1652             [pytest]
1653             xdist_strict=False
1654         """
1655         )
1656         result = pytester.runpytest("--override-ini", "xdist_strict", "True")
1657         result.stderr.fnmatch_lines(
1658             [
1659                 "ERROR: -o/--override-ini expects option=value style (got: 'xdist_strict').",
1660             ]
1661         )
1662 
1663     @pytest.mark.parametrize("with_ini", [True, False])
1664     def test_override_ini_handled_asap(
1665         self, pytester: Pytester, with_ini: bool
1666     ) -> None:
1667         """-o should be handled as soon as possible and always override what's in ini files (#2238)"""
1668         if with_ini:
1669             pytester.makeini(
1670                 """
1671                 [pytest]
1672                 python_files=test_*.py
1673             """
1674             )
1675         pytester.makepyfile(
1676             unittest_ini_handle="""
1677             def test():
1678                 pass
1679         """
1680         )
1681         result = pytester.runpytest("--override-ini", "python_files=unittest_*.py")
1682         result.stdout.fnmatch_lines(["*1 passed in*"])
1683 
1684     def test_addopts_before_initini(
1685         self, monkeypatch: MonkeyPatch, _config_for_test, _sys_snapshot
1686     ) -> None:
1687         cache_dir = ".custom_cache"
1688         monkeypatch.setenv("PYTEST_ADDOPTS", "-o cache_dir=%s" % cache_dir)
1689         config = _config_for_test
1690         config._preparse([], addopts=True)
1691         assert config._override_ini == ["cache_dir=%s" % cache_dir]
1692 
1693     def test_addopts_from_env_not_concatenated(
1694         self, monkeypatch: MonkeyPatch, _config_for_test
1695     ) -> None:
1696         """PYTEST_ADDOPTS should not take values from normal args (#4265)."""
1697         monkeypatch.setenv("PYTEST_ADDOPTS", "-o")
1698         config = _config_for_test
1699         with pytest.raises(UsageError) as excinfo:
1700             config._preparse(["cache_dir=ignored"], addopts=True)
1701         assert (
1702             "error: argument -o/--override-ini: expected one argument (via PYTEST_ADDOPTS)"
1703             in excinfo.value.args[0]
1704         )
1705 
1706     def test_addopts_from_ini_not_concatenated(self, pytester: Pytester) -> None:
1707         """`addopts` from ini should not take values from normal args (#4265)."""
1708         pytester.makeini(
1709             """
1710             [pytest]
1711             addopts=-o
1712         """
1713         )
1714         result = pytester.runpytest("cache_dir=ignored")
1715         result.stderr.fnmatch_lines(
1716             [
1717                 "%s: error: argument -o/--override-ini: expected one argument (via addopts config)"
1718                 % (pytester._request.config._parser.optparser.prog,)
1719             ]
1720         )
1721         assert result.ret == _pytest.config.ExitCode.USAGE_ERROR
1722 
1723     def test_override_ini_does_not_contain_paths(
1724         self, _config_for_test, _sys_snapshot
1725     ) -> None:
1726         """Check that -o no longer swallows all options after it (#3103)"""
1727         config = _config_for_test
1728         config._preparse(["-o", "cache_dir=/cache", "/some/test/path"])
1729         assert config._override_ini == ["cache_dir=/cache"]
1730 
1731     def test_multiple_override_ini_options(self, pytester: Pytester) -> None:
1732         """Ensure a file path following a '-o' option does not generate an error (#3103)"""
1733         pytester.makepyfile(
1734             **{
1735                 "conftest.py": """
1736                 def pytest_addoption(parser):
1737                     parser.addini('foo', default=None, help='some option')
1738                     parser.addini('bar', default=None, help='some option')
1739             """,
1740                 "test_foo.py": """
1741                 def test(pytestconfig):
1742                     assert pytestconfig.getini('foo') == '1'
1743                     assert pytestconfig.getini('bar') == '0'
1744             """,
1745                 "test_bar.py": """
1746                 def test():
1747                     assert False
1748             """,
1749             }
1750         )
1751         result = pytester.runpytest("-o", "foo=1", "-o", "bar=0", "test_foo.py")
1752         assert "ERROR:" not in result.stderr.str()
1753         result.stdout.fnmatch_lines(["collected 1 item", "*= 1 passed in *="])
1754 
1755 
1756 def test_help_via_addopts(pytester: Pytester) -> None:
1757     pytester.makeini(
1758         """
1759         [pytest]
1760         addopts = --unknown-option-should-allow-for-help --help
1761     """
1762     )
1763     result = pytester.runpytest()
1764     assert result.ret == 0
1765     result.stdout.fnmatch_lines(
1766         [
1767             "usage: *",
1768             "positional arguments:",
1769             # Displays full/default help.
1770             "to see available markers type: pytest --markers",
1771         ]
1772     )
1773 
1774 
1775 def test_help_and_version_after_argument_error(pytester: Pytester) -> None:
1776     pytester.makeconftest(
1777         """
1778         def validate(arg):
1779             raise argparse.ArgumentTypeError("argerror")
1780 
1781         def pytest_addoption(parser):
1782             group = parser.getgroup('cov')
1783             group.addoption(
1784                 "--invalid-option-should-allow-for-help",
1785                 type=validate,
1786             )
1787         """
1788     )
1789     pytester.makeini(
1790         """
1791         [pytest]
1792         addopts = --invalid-option-should-allow-for-help
1793     """
1794     )
1795     result = pytester.runpytest("--help")
1796     result.stdout.fnmatch_lines(
1797         [
1798             "usage: *",
1799             "positional arguments:",
1800             "NOTE: displaying only minimal help due to UsageError.",
1801         ]
1802     )
1803     result.stderr.fnmatch_lines(
1804         [
1805             "ERROR: usage: *",
1806             "%s: error: argument --invalid-option-should-allow-for-help: expected one argument"
1807             % (pytester._request.config._parser.optparser.prog,),
1808         ]
1809     )
1810     # Does not display full/default help.
1811     assert "to see available markers type: pytest --markers" not in result.stdout.lines
1812     assert result.ret == ExitCode.USAGE_ERROR
1813 
1814     result = pytester.runpytest("--version")
1815     result.stdout.fnmatch_lines([f"pytest {pytest.__version__}"])
1816     assert result.ret == ExitCode.USAGE_ERROR
1817 
1818 
1819 def test_help_formatter_uses_py_get_terminal_width(monkeypatch: MonkeyPatch) -> None:
1820     from _pytest.config.argparsing import DropShorterLongHelpFormatter
1821 
1822     monkeypatch.setenv("COLUMNS", "90")
1823     formatter = DropShorterLongHelpFormatter("prog")
1824     assert formatter._width == 90
1825 
1826     monkeypatch.setattr("_pytest._io.get_terminal_width", lambda: 160)
1827     formatter = DropShorterLongHelpFormatter("prog")
1828     assert formatter._width == 160
1829 
1830     formatter = DropShorterLongHelpFormatter("prog", width=42)
1831     assert formatter._width == 42
1832 
1833 
1834 def test_config_does_not_load_blocked_plugin_from_args(pytester: Pytester) -> None:
1835     """This tests that pytest's config setup handles "-p no:X"."""
1836     p = pytester.makepyfile("def test(capfd): pass")
1837     result = pytester.runpytest(str(p), "-pno:capture")
1838     result.stdout.fnmatch_lines(["E       fixture 'capfd' not found"])
1839     assert result.ret == ExitCode.TESTS_FAILED
1840 
1841     result = pytester.runpytest(str(p), "-pno:capture", "-s")
1842     result.stderr.fnmatch_lines(["*: error: unrecognized arguments: -s"])
1843     assert result.ret == ExitCode.USAGE_ERROR
1844 
1845     result = pytester.runpytest(str(p), "-p no:capture", "-s")
1846     result.stderr.fnmatch_lines(["*: error: unrecognized arguments: -s"])
1847     assert result.ret == ExitCode.USAGE_ERROR
1848 
1849 
1850 def test_invocation_args(pytester: Pytester) -> None:
1851     """Ensure that Config.invocation_* arguments are correctly defined"""
1852 
1853     class DummyPlugin:
1854         pass
1855 
1856     p = pytester.makepyfile("def test(): pass")
1857     plugin = DummyPlugin()
1858     rec = pytester.inline_run(p, "-v", plugins=[plugin])
1859     calls = rec.getcalls("pytest_runtest_protocol")
1860     assert len(calls) == 1
1861     call = calls[0]
1862     config = call.item.config
1863 
1864     assert config.invocation_params.args == (str(p), "-v")
1865     assert config.invocation_params.dir == pytester.path
1866 
1867     plugins = config.invocation_params.plugins
1868     assert len(plugins) == 2
1869     assert plugins[0] is plugin
1870     assert type(plugins[1]).__name__ == "Collect"  # installed by pytester.inline_run()
1871 
1872     # args cannot be None
1873     with pytest.raises(TypeError):
1874         Config.InvocationParams(args=None, plugins=None, dir=Path())  # type: ignore[arg-type]
1875 
1876 
1877 @pytest.mark.parametrize(
1878     "plugin",
1879     [
1880         x
1881         for x in _pytest.config.default_plugins
1882         if x not in _pytest.config.essential_plugins
1883     ],
1884 )
1885 def test_config_blocked_default_plugins(pytester: Pytester, plugin: str) -> None:
1886     if plugin == "debugging":
1887         # Fixed in xdist (after 1.27.0).
1888         # https://github.com/pytest-dev/pytest-xdist/pull/422
1889         try:
1890             import xdist  # noqa: F401
1891         except ImportError:
1892             pass
1893         else:
1894             pytest.skip("does not work with xdist currently")
1895 
1896     p = pytester.makepyfile("def test(): pass")
1897     result = pytester.runpytest(str(p), "-pno:%s" % plugin)
1898 
1899     if plugin == "python":
1900         assert result.ret == ExitCode.USAGE_ERROR
1901         result.stderr.fnmatch_lines(
1902             [
1903                 "ERROR: found no collectors for */test_config_blocked_default_plugins.py",
1904             ]
1905         )
1906         return
1907 
1908     assert result.ret == ExitCode.OK
1909     if plugin != "terminal":
1910         result.stdout.fnmatch_lines(["* 1 passed in *"])
1911 
1912     p = pytester.makepyfile("def test(): assert 0")
1913     result = pytester.runpytest(str(p), "-pno:%s" % plugin)
1914     assert result.ret == ExitCode.TESTS_FAILED
1915     if plugin != "terminal":
1916         result.stdout.fnmatch_lines(["* 1 failed in *"])
1917     else:
1918         assert result.stdout.lines == []
1919 
1920 
1921 class TestSetupCfg:
1922     def test_pytest_setup_cfg_unsupported(self, pytester: Pytester) -> None:
1923         pytester.makefile(
1924             ".cfg",
1925             setup="""
1926             [pytest]
1927             addopts = --verbose
1928         """,
1929         )
1930         with pytest.raises(pytest.fail.Exception):
1931             pytester.runpytest()
1932 
1933     def test_pytest_custom_cfg_unsupported(self, pytester: Pytester) -> None:
1934         pytester.makefile(
1935             ".cfg",
1936             custom="""
1937             [pytest]
1938             addopts = --verbose
1939         """,
1940         )
1941         with pytest.raises(pytest.fail.Exception):
1942             pytester.runpytest("-c", "custom.cfg")
1943 
1944         with pytest.raises(pytest.fail.Exception):
1945             pytester.runpytest("--config-file", "custom.cfg")
1946 
1947 
1948 class TestPytestPluginsVariable:
1949     def test_pytest_plugins_in_non_top_level_conftest_unsupported(
1950         self, pytester: Pytester
1951     ) -> None:
1952         pytester.makepyfile(
1953             **{
1954                 "subdirectory/conftest.py": """
1955             pytest_plugins=['capture']
1956         """
1957             }
1958         )
1959         pytester.makepyfile(
1960             """
1961             def test_func():
1962                 pass
1963         """
1964         )
1965         res = pytester.runpytest()
1966         assert res.ret == 2
1967         msg = "Defining 'pytest_plugins' in a non-top-level conftest is no longer supported"
1968         res.stdout.fnmatch_lines([f"*{msg}*", f"*subdirectory{os.sep}conftest.py*"])
1969 
1970     @pytest.mark.parametrize("use_pyargs", [True, False])
1971     def test_pytest_plugins_in_non_top_level_conftest_unsupported_pyargs(
1972         self, pytester: Pytester, use_pyargs: bool
1973     ) -> None:
1974         """When using --pyargs, do not emit the warning about non-top-level conftest warnings (#4039, #4044)"""
1975 
1976         files = {
1977             "src/pkg/__init__.py": "",
1978             "src/pkg/conftest.py": "",
1979             "src/pkg/test_root.py": "def test(): pass",
1980             "src/pkg/sub/__init__.py": "",
1981             "src/pkg/sub/conftest.py": "pytest_plugins=['capture']",
1982             "src/pkg/sub/test_bar.py": "def test(): pass",
1983         }
1984         pytester.makepyfile(**files)
1985         pytester.syspathinsert(pytester.path.joinpath("src"))
1986 
1987         args = ("--pyargs", "pkg") if use_pyargs else ()
1988         res = pytester.runpytest(*args)
1989         assert res.ret == (0 if use_pyargs else 2)
1990         msg = (
1991             msg
1992         ) = "Defining 'pytest_plugins' in a non-top-level conftest is no longer supported"
1993         if use_pyargs:
1994             assert msg not in res.stdout.str()
1995         else:
1996             res.stdout.fnmatch_lines([f"*{msg}*"])
1997 
1998     def test_pytest_plugins_in_non_top_level_conftest_unsupported_no_top_level_conftest(
1999         self, pytester: Pytester
2000     ) -> None:
2001         subdirectory = pytester.path.joinpath("subdirectory")
2002         subdirectory.mkdir()
2003         pytester.makeconftest(
2004             """
2005             pytest_plugins=['capture']
2006         """
2007         )
2008         pytester.path.joinpath("conftest.py").rename(
2009             subdirectory.joinpath("conftest.py")
2010         )
2011 
2012         pytester.makepyfile(
2013             """
2014             def test_func():
2015                 pass
2016         """
2017         )
2018 
2019         res = pytester.runpytest_subprocess()
2020         assert res.ret == 2
2021         msg = "Defining 'pytest_plugins' in a non-top-level conftest is no longer supported"
2022         res.stdout.fnmatch_lines([f"*{msg}*", f"*subdirectory{os.sep}conftest.py*"])
2023 
2024     def test_pytest_plugins_in_non_top_level_conftest_unsupported_no_false_positives(
2025         self, pytester: Pytester
2026     ) -> None:
2027         pytester.makepyfile(
2028             "def test_func(): pass",
2029             **{
2030                 "subdirectory/conftest": "pass",
2031                 "conftest": """
2032                     import warnings
2033                     warnings.filterwarnings('always', category=DeprecationWarning)
2034                     pytest_plugins=['capture']
2035                     """,
2036             },
2037         )
2038         res = pytester.runpytest_subprocess()
2039         assert res.ret == 0
2040         msg = "Defining 'pytest_plugins' in a non-top-level conftest is no longer supported"
2041         assert msg not in res.stdout.str()
2042 
2043 
2044 def test_conftest_import_error_repr(tmp_path: Path) -> None:
2045     """`ConftestImportFailure` should use a short error message and readable
2046     path to the failed conftest.py file."""
2047     path = tmp_path.joinpath("foo/conftest.py")
2048     with pytest.raises(
2049         ConftestImportFailure,
2050         match=re.escape(f"RuntimeError: some error (from {path})"),
2051     ):
2052         try:
2053             raise RuntimeError("some error")
2054         except Exception as exc:
2055             assert exc.__traceback__ is not None
2056             exc_info = (type(exc), exc, exc.__traceback__)
2057             raise ConftestImportFailure(path, exc_info) from exc
2058 
2059 
2060 def test_strtobool() -> None:
2061     assert _strtobool("YES")
2062     assert not _strtobool("NO")
2063     with pytest.raises(ValueError):
2064         _strtobool("unknown")
2065 
2066 
2067 @pytest.mark.parametrize(
2068     "arg, escape, expected",
2069     [
2070         ("ignore", False, ("ignore", "", Warning, "", 0)),
2071         (
2072             "ignore::DeprecationWarning",
2073             False,
2074             ("ignore", "", DeprecationWarning, "", 0),
2075         ),
2076         (
2077             "ignore:some msg:DeprecationWarning",
2078             False,
2079             ("ignore", "some msg", DeprecationWarning, "", 0),
2080         ),
2081         (
2082             "ignore::DeprecationWarning:mod",
2083             False,
2084             ("ignore", "", DeprecationWarning, "mod", 0),
2085         ),
2086         (
2087             "ignore::DeprecationWarning:mod:42",
2088             False,
2089             ("ignore", "", DeprecationWarning, "mod", 42),
2090         ),
2091         ("error:some\\msg:::", True, ("error", "some\\\\msg", Warning, "", 0)),
2092         ("error:::mod\\foo:", True, ("error", "", Warning, "mod\\\\foo\\Z", 0)),
2093     ],
2094 )
2095 def test_parse_warning_filter(
2096     arg: str, escape: bool, expected: Tuple[str, str, Type[Warning], str, int]
2097 ) -> None:
2098     assert parse_warning_filter(arg, escape=escape) == expected
2099 
2100 
2101 @pytest.mark.parametrize(
2102     "arg",
2103     [
2104         # Too much parts.
2105         ":" * 5,
2106         # Invalid action.
2107         "FOO::",
2108         # ImportError when importing the warning class.
2109         "::test_parse_warning_filter_failure.NonExistentClass::",
2110         # Class is not a Warning subclass.
2111         "::list::",
2112         # Negative line number.
2113         "::::-1",
2114         # Not a line number.
2115         "::::not-a-number",
2116     ],
2117 )
2118 def test_parse_warning_filter_failure(arg: str) -> None:
2119     with pytest.raises(pytest.UsageError):
2120         parse_warning_filter(arg, escape=True)
2121 
2122 
2123 class TestDebugOptions:
2124     def test_without_debug_does_not_write_log(self, pytester: Pytester) -> None:
2125         result = pytester.runpytest()
2126         result.stderr.no_fnmatch_line(
2127             "*writing pytest debug information to*pytestdebug.log"
2128         )
2129         result.stderr.no_fnmatch_line(
2130             "*wrote pytest debug information to*pytestdebug.log"
2131         )
2132         assert not [f.name for f in pytester.path.glob("**/*.log")]
2133 
2134     def test_with_only_debug_writes_pytestdebug_log(self, pytester: Pytester) -> None:
2135         result = pytester.runpytest("--debug")
2136         result.stderr.fnmatch_lines(
2137             [
2138                 "*writing pytest debug information to*pytestdebug.log",
2139                 "*wrote pytest debug information to*pytestdebug.log",
2140             ]
2141         )
2142         assert "pytestdebug.log" in [f.name for f in pytester.path.glob("**/*.log")]
2143 
2144     def test_multiple_custom_debug_logs(self, pytester: Pytester) -> None:
2145         result = pytester.runpytest("--debug", "bar.log")
2146         result.stderr.fnmatch_lines(
2147             [
2148                 "*writing pytest debug information to*bar.log",
2149                 "*wrote pytest debug information to*bar.log",
2150             ]
2151         )
2152         result = pytester.runpytest("--debug", "foo.log")
2153         result.stderr.fnmatch_lines(
2154             [
2155                 "*writing pytest debug information to*foo.log",
2156                 "*wrote pytest debug information to*foo.log",
2157             ]
2158         )
2159 
2160         assert {"bar.log", "foo.log"} == {
2161             f.name for f in pytester.path.glob("**/*.log")
2162         }
2163 
2164     def test_debug_help(self, pytester: Pytester) -> None:
2165         result = pytester.runpytest("-h")
2166         result.stdout.fnmatch_lines(
2167             [
2168                 "*Store internal tracing debug information in this log*",
2169                 "*file. This file is opened with 'w' and truncated as a*",
2170                 "*Default: pytestdebug.log.",
2171             ]
2172         )

</code><intended_behavior>The tests should ensure that when importlib is used to dynamically load or manipulate modules, it does so in a way that reflects and maintains the integrity of the application's module namespace. Specifically, these methods should: Confirm that dynamically loaded modules do not lead to the unintentional creation of multiple instances or versions of modules intended to be singletons or uniquely represented within the application context. Simulate the application's behavior as closely as possible in terms of module loading and namespace manipulation to detect and prevent scenarios that could lead to discrepancies between test and production environments. Include validation steps to check the uniqueness and consistency of critical modules across different parts of the application, ensuring that changes or actions performed on those modules in one context are recognized and persist across all contexts.</intended_behavior>]
2025-10-15 09:42:14.124 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-15 09:42:14.124 | INFO     | Search-only: skipping patch selection
2025-10-15 09:42:14.206 | INFO     | Task pytest-dev__pytest-11148 completed successfully.
2025-10-15 09:42:14.207 | INFO     | No patch generated. You can try running ACR again.
