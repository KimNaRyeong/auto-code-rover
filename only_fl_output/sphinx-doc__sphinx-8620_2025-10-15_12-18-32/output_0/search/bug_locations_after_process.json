[
    {
        "rel_file_path": "sphinx/builders/html/transforms.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sphinx-doc__sphinx/setup_sphinx-doc__sphinx__3.5/sphinx/builders/html/transforms.py",
        "start": 21,
        "end": 59,
        "class_name": "KeyboardTransform",
        "method_name": null,
        "code": "21 class KeyboardTransform(SphinxPostTransform):\n22     \"\"\"Transform :kbd: role to more detailed form.\n23 \n24     Before::\n25 \n26         <literal class=\"kbd\">\n27             Control-x\n28 \n29     After::\n30 \n31         <literal class=\"kbd\">\n32             <literal class=\"kbd\">\n33                 Control\n34             -\n35             <literal class=\"kbd\">\n36                 x\n37     \"\"\"\n38     default_priority = 400\n39     builders = ('html',)\n40     pattern = re.compile(r'(-|\\+|\\^|\\s+)')\n41 \n42     def run(self, **kwargs: Any) -> None:\n43         matcher = NodeMatcher(nodes.literal, classes=[\"kbd\"])\n44         for node in self.document.traverse(matcher):  # type: nodes.literal\n45             parts = self.pattern.split(node[-1].astext())\n46             if len(parts) == 1:\n47                 continue\n48 \n49             node.pop()\n50             while parts:\n51                 key = parts.pop(0)\n52                 node += nodes.literal('', key, classes=[\"kbd\"])\n53 \n54                 try:\n55                     # key separator (ex. -, +, ^)\n56                     sep = parts.pop(0)\n57                     node += nodes.Text(sep)\n58                 except IndexError:\n59                     pass\n",
        "intended_behavior": "The `KeyboardTransform` class should be enhanced to differentiate between single and compound keystrokes when generating HTML for the `:kbd:` role. Currently, it likely processes all keystrokes uniformly, hence the issue with styling compound keystrokes differently. For compound keystrokes (e.g., `Shift+X`), the parent `<kbd>` element generated by the `KeyboardTransform` class should include an additional CSS class, such as `compound`, to distinguish it from single keystrokes and other child `<kbd>` elements. This way, CSS can target compound keystroke containers specifically, allowing for different styling as required by the issue report. The existing functionality for single keystrokes must be preserved, ensuring that they continue to be rendered correctly without the additional `compound` class. Thus, the method(s) undertaking the transformation need conditional logic to check if the keystroke is compound and then, and only then, add the `compound` class to the parent `<kbd>` element. This enhancement requires logic to parse the `:kbd:` content to detect compound keystrokes (identified by the presence of a plus `+` sign or similar delimiters) and apply the modified HTML structure only in those cases."
    }
]