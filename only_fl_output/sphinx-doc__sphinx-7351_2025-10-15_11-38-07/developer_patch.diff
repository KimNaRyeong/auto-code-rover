diff --git a/sphinx/project.py b/sphinx/project.py
--- a/sphinx/project.py
+++ b/sphinx/project.py
@@ -9,6 +9,7 @@
 """
 
 import os
+from glob import glob
 
 from sphinx.locale import __
 from sphinx.util import get_matching_files
@@ -55,7 +56,13 @@ def discover(self, exclude_paths=[]):
         for filename in get_matching_files(self.srcdir, excludes):  # type: ignore
             docname = self.path2doc(filename)
             if docname:
-                if os.access(os.path.join(self.srcdir, filename), os.R_OK):
+                if docname in self.docnames:
+                    pattern = os.path.join(self.srcdir, docname) + '.*'
+                    files = [relpath(f, self.srcdir) for f in glob(pattern)]
+                    logger.warning(__('multiple files found for the document "%s": %r\n'
+                                      'Use %r for the build.'),
+                                   docname, files, self.doc2path(docname), once=True)
+                elif os.access(os.path.join(self.srcdir, filename), os.R_OK):
                     self.docnames.add(docname)
                 else:
                     logger.warning(__("document not readable. Ignored."), location=docname)
diff --git a/sphinx/util/logging.py b/sphinx/util/logging.py
--- a/sphinx/util/logging.py
+++ b/sphinx/util/logging.py
@@ -118,6 +118,7 @@ class SphinxWarningLogRecord(SphinxLogRecord):
 
 class SphinxLoggerAdapter(logging.LoggerAdapter):
     """LoggerAdapter allowing ``type`` and ``subtype`` keywords."""
+    KEYWORDS = ['type', 'subtype', 'location', 'nonl', 'color', 'once']
 
     def log(self, level: Union[int, str], msg: str, *args: Any, **kwargs: Any) -> None:
         if isinstance(level, int):
@@ -131,16 +132,9 @@ def verbose(self, msg: str, *args: Any, **kwargs: Any) -> None:
 
     def process(self, msg: str, kwargs: Dict) -> Tuple[str, Dict]:  # type: ignore
         extra = kwargs.setdefault('extra', {})
-        if 'type' in kwargs:
-            extra['type'] = kwargs.pop('type')
-        if 'subtype' in kwargs:
-            extra['subtype'] = kwargs.pop('subtype')
-        if 'location' in kwargs:
-            extra['location'] = kwargs.pop('location')
-        if 'nonl' in kwargs:
-            extra['nonl'] = kwargs.pop('nonl')
-        if 'color' in kwargs:
-            extra['color'] = kwargs.pop('color')
+        for keyword in self.KEYWORDS:
+            if keyword in kwargs:
+                extra[keyword] = kwargs.pop(keyword)
 
         return msg, kwargs
 
@@ -446,6 +440,26 @@ def filter(self, record: logging.LogRecord) -> bool:
         return True
 
 
+class OnceFilter(logging.Filter):
+    """Show the message only once."""
+
+    def __init__(self, name: str = '') -> None:
+        super().__init__(name)
+        self.messages = {}  # type: Dict[str, List]
+
+    def filter(self, record: logging.LogRecord) -> bool:
+        once = getattr(record, 'once', '')
+        if not once:
+            return True
+        else:
+            params = self.messages.setdefault(record.msg, [])
+            if record.args in params:
+                return False
+
+            params.append(record.args)
+            return True
+
+
 class SphinxLogRecordTranslator(logging.Filter):
     """Converts a log record to one Sphinx expects
 
@@ -563,6 +577,7 @@ def setup(app: "Sphinx", status: IO, warning: IO) -> None:
     warning_handler.addFilter(WarningSuppressor(app))
     warning_handler.addFilter(WarningLogRecordTranslator(app))
     warning_handler.addFilter(WarningIsErrorFilter(app))
+    warning_handler.addFilter(OnceFilter())
     warning_handler.setLevel(logging.WARNING)
     warning_handler.setFormatter(ColorizeFormatter())
 
