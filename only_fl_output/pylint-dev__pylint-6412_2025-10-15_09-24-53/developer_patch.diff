diff --git a/pylint/checkers/base_checker.py b/pylint/checkers/base_checker.py
--- a/pylint/checkers/base_checker.py
+++ b/pylint/checkers/base_checker.py
@@ -41,6 +41,13 @@ class BaseChecker(_ArgumentsProvider):
 
     def __init__(self, linter: PyLinter) -> None:
         """Checker instances should have the linter as argument."""
+        if getattr(self, "__implements__", None):
+            warnings.warn(
+                "Using the __implements__ inheritance pattern for BaseChecker is no "
+                "longer supported. Child classes should only inherit BaseChecker or any "
+                "of the other checker types from pylint.checkers.",
+                DeprecationWarning,
+            )
         if self.name is not None:
             self.name = self.name.lower()
         self.linter = linter
@@ -166,9 +173,15 @@ def create_message_definition_from_tuple(self, msgid, msg_tuple):
             warnings.filterwarnings("ignore", category=DeprecationWarning)
             if isinstance(self, (BaseTokenChecker, BaseRawFileChecker)):
                 default_scope = WarningScope.LINE
-            # TODO: Interfaces: Deprecate looking for implements here # pylint: disable=fixme
+            # TODO: 3.0: Remove deprecated if-statement # pylint: disable=fixme
             elif implements(self, (IRawChecker, ITokenChecker)):
-                default_scope = WarningScope.LINE
+                warnings.warn(  # pragma: no cover
+                    "Checkers should subclass BaseTokenChecker or BaseRawFileChecker"
+                    "instead of using the __implements__ mechanism. Use of __implements__"
+                    "will no longer be supported in pylint 3.0",
+                    DeprecationWarning,
+                )
+                default_scope = WarningScope.LINE  # pragma: no cover
             else:
                 default_scope = WarningScope.NODE
         options = {}
diff --git a/pylint/interfaces.py b/pylint/interfaces.py
--- a/pylint/interfaces.py
+++ b/pylint/interfaces.py
@@ -51,6 +51,13 @@
 class Interface:
     """Base class for interfaces."""
 
+    def __init__(self) -> None:
+        warnings.warn(
+            "Interface and all of its subclasses have been deprecated "
+            "and will be removed in pylint 3.0.",
+            DeprecationWarning,
+        )
+
     @classmethod
     def is_implemented_by(cls, instance):
         with warnings.catch_warnings():
diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py
--- a/pylint/lint/pylinter.py
+++ b/pylint/lint/pylinter.py
@@ -874,25 +874,45 @@ def _astroid_module_checker(self):
         """
         walker = ASTWalker(self)
         _checkers = self.prepare_checkers()
-        with warnings.catch_warnings():
-            warnings.filterwarnings("ignore", category=DeprecationWarning)
-            tokencheckers = [
-                c
-                for c in _checkers
+        tokencheckers = [
+            c
+            for c in _checkers
+            if isinstance(c, checkers.BaseTokenChecker) and c is not self
+        ]
+        # TODO: 3.0: Remove deprecated for-loop # pylint: disable=fixme
+        for c in _checkers:
+            with warnings.catch_warnings():
+                warnings.filterwarnings("ignore", category=DeprecationWarning)
                 if (
                     interfaces.implements(c, interfaces.ITokenChecker)
-                    or isinstance(c, checkers.BaseTokenChecker)
-                )
-                and c is not self
-            ]
-        with warnings.catch_warnings():
-            warnings.filterwarnings("ignore", category=DeprecationWarning)
-            rawcheckers = [
-                c
-                for c in _checkers
-                if interfaces.implements(c, interfaces.IRawChecker)
-                or isinstance(c, checkers.BaseRawFileChecker)
-            ]
+                    and c not in tokencheckers
+                    and c is not self
+                ):
+                    tokencheckers.append(c)  # pragma: no cover
+                    warnings.warn(  # pragma: no cover
+                        "Checkers should subclass BaseTokenChecker "
+                        "instead of using the __implements__ mechanism. Use of __implements__ "
+                        "will no longer be supported in pylint 3.0",
+                        DeprecationWarning,
+                    )
+        rawcheckers = [
+            c for c in _checkers if isinstance(c, checkers.BaseRawFileChecker)
+        ]
+        # TODO: 3.0: Remove deprecated if-statement # pylint: disable=fixme
+        for c in _checkers:
+            with warnings.catch_warnings():
+                warnings.filterwarnings("ignore", category=DeprecationWarning)
+                if (
+                    interfaces.implements(c, interfaces.IRawChecker)
+                    and c not in rawcheckers
+                ):
+                    rawcheckers.append(c)  # pragma: no cover
+                    warnings.warn(  # pragma: no cover
+                        "Checkers should subclass BaseRawFileChecker "
+                        "instead of using the __implements__ mechanism. Use of __implements__ "
+                        "will no longer be supported in pylint 3.0",
+                        DeprecationWarning,
+                    )
         # notify global begin
         for checker in _checkers:
             checker.open()
diff --git a/pylint/reporters/base_reporter.py b/pylint/reporters/base_reporter.py
--- a/pylint/reporters/base_reporter.py
+++ b/pylint/reporters/base_reporter.py
@@ -6,6 +6,7 @@
 
 import os
 import sys
+import warnings
 from typing import TYPE_CHECKING, TextIO
 from warnings import warn
 
@@ -30,6 +31,12 @@ class BaseReporter:
     """Name of the reporter."""
 
     def __init__(self, output: TextIO | None = None) -> None:
+        if getattr(self, "__implements__", None):
+            warnings.warn(
+                "Using the __implements__ inheritance pattern for BaseReporter is no "
+                "longer supported. Child classes should only inherit BaseReporter",
+                DeprecationWarning,
+            )
         self.linter: PyLinter
         self.section = 0
         self.out: TextIO = output or sys.stdout
