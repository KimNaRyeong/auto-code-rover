diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -1,3 +1,4 @@
+import warnings
 from enum import Enum
 from types import NoneType
 
@@ -9,6 +10,7 @@
 from django.db.models.query_utils import Q
 from django.db.models.sql.query import Query
 from django.db.utils import DEFAULT_DB_ALIAS
+from django.utils.deprecation import RemovedInDjango60Warning
 from django.utils.translation import gettext_lazy as _
 
 __all__ = ["BaseConstraint", "CheckConstraint", "Deferrable", "UniqueConstraint"]
@@ -18,12 +20,31 @@ class BaseConstraint:
     default_violation_error_message = _("Constraint “%(name)s” is violated.")
     violation_error_message = None
 
-    def __init__(self, name, violation_error_message=None):
+    # RemovedInDjango60Warning: When the deprecation ends, replace with:
+    # def __init__(self, *, name, violation_error_message=None):
+    def __init__(self, *args, name=None, violation_error_message=None):
+        # RemovedInDjango60Warning.
+        if name is None and not args:
+            raise TypeError(
+                f"{self.__class__.__name__}.__init__() missing 1 required keyword-only "
+                f"argument: 'name'"
+            )
         self.name = name
         if violation_error_message is not None:
             self.violation_error_message = violation_error_message
         else:
             self.violation_error_message = self.default_violation_error_message
+        # RemovedInDjango60Warning.
+        if args:
+            warnings.warn(
+                f"Passing positional arguments to {self.__class__.__name__} is "
+                f"deprecated.",
+                RemovedInDjango60Warning,
+                stacklevel=2,
+            )
+            for arg, attr in zip(args, ["name", "violation_error_message"]):
+                if arg:
+                    setattr(self, attr, arg)
 
     @property
     def contains_expressions(self):
@@ -67,7 +88,7 @@ def __init__(self, *, check, name, violation_error_message=None):
             raise TypeError(
                 "CheckConstraint.check must be a Q instance or boolean expression."
             )
-        super().__init__(name, violation_error_message=violation_error_message)
+        super().__init__(name=name, violation_error_message=violation_error_message)
 
     def _get_check_sql(self, model, schema_editor):
         query = Query(model=model, alias_cols=False)
@@ -186,7 +207,7 @@ def __init__(
             F(expression) if isinstance(expression, str) else expression
             for expression in expressions
         )
-        super().__init__(name, violation_error_message=violation_error_message)
+        super().__init__(name=name, violation_error_message=violation_error_message)
 
     @property
     def contains_expressions(self):
