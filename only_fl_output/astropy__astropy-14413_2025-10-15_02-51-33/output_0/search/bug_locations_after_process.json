[
    {
        "rel_file_path": "astropy/units/format/console.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/astropy__astropy/setup_astropy__astropy__5.1/astropy/units/format/console.py",
        "start": 1,
        "end": 102,
        "class_name": null,
        "method_name": null,
        "code": "1 # Licensed under a 3-clause BSD style license - see LICENSE.rst\n2 \n3 \"\"\"\n4 Handles the \"Console\" unit format.\n5 \"\"\"\n6 \n7 \n8 from . import base, core, utils\n9 \n10 \n11 class Console(base.Base):\n12     \"\"\"\n13     Output-only format for to display pretty formatting at the\n14     console.\n15 \n16     For example::\n17 \n18       >>> import astropy.units as u\n19       >>> print(u.Ry.decompose().to_string('console'))  # doctest: +FLOAT_CMP\n20       2.1798721*10^-18m^2 kg s^-2\n21       >>> print(u.Ry.decompose().to_string('console', inline=False))  # doctest: +FLOAT_CMP\n22                        m^2 kg\n23       2.1798721*10^-18 ------\n24                         s^2\n25     \"\"\"\n26 \n27     _times = \"*\"\n28     _line = \"-\"\n29 \n30     @classmethod\n31     def _get_unit_name(cls, unit):\n32         return unit.get_format_name(\"console\")\n33 \n34     @classmethod\n35     def _format_superscript(cls, number):\n36         return f\"^{number}\"\n37 \n38     @classmethod\n39     def _format_unit_list(cls, units):\n40         out = []\n41         for base_, power in units:\n42             if power == 1:\n43                 out.append(cls._get_unit_name(base_))\n44             else:\n45                 out.append(\n46                     cls._get_unit_name(base_)\n47                     + cls._format_superscript(utils.format_power(power))\n48                 )\n49         return \" \".join(out)\n50 \n51     @classmethod\n52     def format_exponential_notation(cls, val):\n53         m, ex = utils.split_mantissa_exponent(val)\n54 \n55         parts = []\n56         if m:\n57             parts.append(m)\n58 \n59         if ex:\n60             parts.append(f\"10{cls._format_superscript(ex)}\")\n61 \n62         return cls._times.join(parts)\n63 \n64     @classmethod\n65     def to_string(cls, unit, inline=True):\n66         if isinstance(unit, core.CompositeUnit):\n67             if unit.scale == 1:\n68                 s = \"\"\n69             else:\n70                 s = cls.format_exponential_notation(unit.scale)\n71 \n72             if len(unit.bases):\n73                 if inline:\n74                     nominator = zip(unit.bases, unit.powers)\n75                     denominator = []\n76                 else:\n77                     nominator, denominator = utils.get_grouped_by_powers(\n78                         unit.bases, unit.powers\n79                     )\n80                 if len(denominator):\n81                     if len(nominator):\n82                         nominator = cls._format_unit_list(nominator)\n83                     else:\n84                         nominator = \"1\"\n85                     denominator = cls._format_unit_list(denominator)\n86                     fraclength = max(len(nominator), len(denominator))\n87                     f = f\"{{0:^{len(s)}s}} {{1:^{fraclength}s}}\"\n88 \n89                     lines = [\n90                         f.format(\"\", nominator),\n91                         f.format(s, cls._line * fraclength),\n92                         f.format(\"\", denominator),\n93                     ]\n94 \n95                     s = \"\\n\".join(lines)\n96                 else:\n97                     nominator = cls._format_unit_list(nominator)\n98                     s += nominator\n99         elif isinstance(unit, core.NamedUnit):\n100             s = cls._get_unit_name(unit)\n101 \n102         return s\n",
        "intended_behavior": "The code should format unit strings in the `console` format without introducing extraneous spaces at the beginning of the unit representation."
    },
    {
        "rel_file_path": "astropy/units/format/unicode_format.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/astropy__astropy/setup_astropy__astropy__5.1/astropy/units/format/unicode_format.py",
        "start": 1,
        "end": 69,
        "class_name": null,
        "method_name": null,
        "code": "1 # Licensed under a 3-clause BSD style license - see LICENSE.rst\n2 \n3 \"\"\"\n4 Handles the \"Unicode\" unit format.\n5 \"\"\"\n6 \n7 \n8 from . import console, utils\n9 \n10 \n11 class Unicode(console.Console):\n12     \"\"\"\n13     Output-only format to display pretty formatting at the console\n14     using Unicode characters.\n15 \n16     For example::\n17 \n18       >>> import astropy.units as u\n19       >>> print(u.bar.decompose().to_string('unicode'))\n20       100000kg m\u207b\u00b9 s\u207b\u00b2\n21       >>> print(u.bar.decompose().to_string('unicode', inline=False))\n22               kg\n23       100000 \u2500\u2500\u2500\u2500\n24              m s\u00b2\n25     \"\"\"\n26 \n27     _times = \"\u00d7\"\n28     _line = \"\u2500\"\n29 \n30     @classmethod\n31     def _get_unit_name(cls, unit):\n32         return unit.get_format_name(\"unicode\")\n33 \n34     @classmethod\n35     def format_exponential_notation(cls, val):\n36         m, ex = utils.split_mantissa_exponent(val)\n37 \n38         parts = []\n39         if m:\n40             parts.append(m.replace(\"-\", \"\u2212\"))\n41 \n42         if ex:\n43             parts.append(f\"10{cls._format_superscript(ex)}\")\n44 \n45         return cls._times.join(parts)\n46 \n47     @classmethod\n48     def _format_superscript(cls, number):\n49         mapping = {\n50             \"0\": \"\u2070\",\n51             \"1\": \"\u00b9\",\n52             \"2\": \"\u00b2\",\n53             \"3\": \"\u00b3\",\n54             \"4\": \"\u2074\",\n55             \"5\": \"\u2075\",\n56             \"6\": \"\u2076\",\n57             \"7\": \"\u2077\",\n58             \"8\": \"\u2078\",\n59             \"9\": \"\u2079\",\n60             \"-\": \"\u207b\",\n61             \"\u2212\": \"\u207b\",\n62             # This is actually a \"raised omission bracket\", but it's\n63             # the closest thing I could find to a superscript solidus.\n64             \"/\": \"\u2e0d\",\n65         }\n66         output = []\n67         for c in number:\n68             output.append(mapping[c])\n69         return \"\".join(output)\n",
        "intended_behavior": "The code managing the `unicode` format must ensure that leading spaces are not inserted."
    }
]