2025-10-15 05:38:15.255 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-15 05:38:17.986 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=970, output_tokens=12, cost=0.010060
2025-10-15 05:38:17.987 | INFO     | Test agent decides that the issue statement does not contain reproduction steps; skipping reproducer tracing
2025-10-15 05:38:17.991 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 05:38:25.638 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1268, output_tokens=281, cost=0.021110
2025-10-15 05:38:25.643 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 05:38:27.600 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=635, output_tokens=51, cost=0.007880
2025-10-15 05:38:27.602 | DEBUG    | Extracted a valid json.
2025-10-15 05:38:27.602 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_class(\"Entity\")",
        "search_class(\"User\")",
        "search_code(\"AppConfig\")",
        "search_code(\"DEFAULT_AUTO_FIELD\")"
    ],
    "bug_locations": []
}
2025-10-15 05:38:27.742 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-15 05:38:27.742 | DEBUG    | <Agent search> Analyzing search results.
2025-10-15 05:38:45.943 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2216, output_tokens=760, cost=0.044960
2025-10-15 05:38:45.950 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 05:39:00.147 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3192, output_tokens=636, cost=0.051000
2025-10-15 05:39:00.158 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 05:39:05.178 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=990, output_tokens=180, cost=0.015300
2025-10-15 05:39:05.180 | DEBUG    | Extracted a valid json.
2025-10-15 05:39:05.180 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_code(\"class Entity\")",
        "search_code(\"DEFAULT_AUTO_FIELD =\")",
        "search_code(\"class Meta\")"
    ],
    "bug_locations": [
        {
            "file": "Files containing model definitions that inherit from `Entity`",
            "class": "User",
            "method": "",
            "intended_behavior": "Ensure the primary key defined in `Entity` is correctly inherited by all descendant models, such that Django does not attempt to auto-create a primary key."
        },
        {
            "file": "Global or App-specific settings files",
            "class": "",
            "method": "",
            "intended_behavior": "Specify a global `DEFAULT_AUTO_FIELD` in the project's settings to an appropriate field type that aligns with the project's database schema and data needs."
        }
    ]
}
2025-10-15 05:39:05.296 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-15 05:39:05.296 | DEBUG    | <Agent search> Analyzing search results.
2025-10-15 05:39:21.010 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=4416, output_tokens=667, cost=0.064170
2025-10-15 05:39:21.017 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 05:39:33.331 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=5299, output_tokens=474, cost=0.067210
2025-10-15 05:39:33.384 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 05:39:38.663 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=828, output_tokens=198, cost=0.014220
2025-10-15 05:39:38.664 | DEBUG    | Extracted a valid json.
2025-10-15 05:39:38.664 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations":[
        {
            "file": "django/conf/global_settings.py",
            "class": "",
            "method": "",
            "intended_behavior": "Update or add `DEFAULT_AUTO_FIELD` setting to `'django.db.models.BigAutoField'` in the project's settings.py file. This ensures that all models will use `BigAutoField` as the default type for auto-generated primary keys, unless overridden."
        },
        {
            "file": "",
            "class": "SomeModel",
            "method": "",
            "intended_behavior": "Inside each model class issuing a `models.W042` warning, ensure or add a `class Meta:` block that defines `default_auto_field = 'django.db.models.BigAutoField'`. This explicit definition within models overrides the global setting for `DEFAULT_AUTO_FIELD`, addressing warnings for models where a larger or different primary key type is specifically desired."
        }
    ]
}
2025-10-15 05:39:38.669 | DEBUG    | Bug location extracted successfully: [<file>django/conf/global_settings.py</file>
<class>None</class>
<method>None</method>
<code>
1 """
2 Default Django settings. Override these with settings in the module pointed to
3 by the DJANGO_SETTINGS_MODULE environment variable.
4 """
5 
6 
7 # This is defined here as a do-nothing function because we can't import
8 # django.utils.translation -- that module depends on the settings.
9 def gettext_noop(s):
10     return s
11 
12 
13 ####################
14 # CORE             #
15 ####################
16 
17 DEBUG = False
18 
19 # Whether the framework should propagate raw exceptions rather than catching
20 # them. This is useful under some testing situations and should never be used
21 # on a live site.
22 DEBUG_PROPAGATE_EXCEPTIONS = False
23 
24 # People who get code error notifications.
25 # In the format [('Full Name', 'email@example.com'), ('Full Name', 'anotheremail@example.com')]
26 ADMINS = []
27 
28 # List of IP addresses, as strings, that:
29 #   * See debug comments, when DEBUG is true
30 #   * Receive x-headers
31 INTERNAL_IPS = []
32 
33 # Hosts/domain names that are valid for this site.
34 # "*" matches anything, ".example.com" matches example.com and all subdomains
35 ALLOWED_HOSTS = []
36 
37 # Local time zone for this installation. All choices can be found here:
38 # https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all
39 # systems may support all possibilities). When USE_TZ is True, this is
40 # interpreted as the default user time zone.
41 TIME_ZONE = 'America/Chicago'
42 
43 # If you set this to True, Django will use timezone-aware datetimes.
44 USE_TZ = False
45 
46 # Language code for this installation. All choices can be found here:
47 # http://www.i18nguy.com/unicode/language-identifiers.html
48 LANGUAGE_CODE = 'en-us'
49 
50 # Languages we provide translations for, out of the box.
51 LANGUAGES = [
52     ('af', gettext_noop('Afrikaans')),
53     ('ar', gettext_noop('Arabic')),
54     ('ar-dz', gettext_noop('Algerian Arabic')),
55     ('ast', gettext_noop('Asturian')),
56     ('az', gettext_noop('Azerbaijani')),
57     ('bg', gettext_noop('Bulgarian')),
58     ('be', gettext_noop('Belarusian')),
59     ('bn', gettext_noop('Bengali')),
60     ('br', gettext_noop('Breton')),
61     ('bs', gettext_noop('Bosnian')),
62     ('ca', gettext_noop('Catalan')),
63     ('cs', gettext_noop('Czech')),
64     ('cy', gettext_noop('Welsh')),
65     ('da', gettext_noop('Danish')),
66     ('de', gettext_noop('German')),
67     ('dsb', gettext_noop('Lower Sorbian')),
68     ('el', gettext_noop('Greek')),
69     ('en', gettext_noop('English')),
70     ('en-au', gettext_noop('Australian English')),
71     ('en-gb', gettext_noop('British English')),
72     ('eo', gettext_noop('Esperanto')),
73     ('es', gettext_noop('Spanish')),
74     ('es-ar', gettext_noop('Argentinian Spanish')),
75     ('es-co', gettext_noop('Colombian Spanish')),
76     ('es-mx', gettext_noop('Mexican Spanish')),
77     ('es-ni', gettext_noop('Nicaraguan Spanish')),
78     ('es-ve', gettext_noop('Venezuelan Spanish')),
79     ('et', gettext_noop('Estonian')),
80     ('eu', gettext_noop('Basque')),
81     ('fa', gettext_noop('Persian')),
82     ('fi', gettext_noop('Finnish')),
83     ('fr', gettext_noop('French')),
84     ('fy', gettext_noop('Frisian')),
85     ('ga', gettext_noop('Irish')),
86     ('gd', gettext_noop('Scottish Gaelic')),
87     ('gl', gettext_noop('Galician')),
88     ('he', gettext_noop('Hebrew')),
89     ('hi', gettext_noop('Hindi')),
90     ('hr', gettext_noop('Croatian')),
91     ('hsb', gettext_noop('Upper Sorbian')),
92     ('hu', gettext_noop('Hungarian')),
93     ('hy', gettext_noop('Armenian')),
94     ('ia', gettext_noop('Interlingua')),
95     ('id', gettext_noop('Indonesian')),
96     ('ig', gettext_noop('Igbo')),
97     ('io', gettext_noop('Ido')),
98     ('is', gettext_noop('Icelandic')),
99     ('it', gettext_noop('Italian')),
100     ('ja', gettext_noop('Japanese')),
101     ('ka', gettext_noop('Georgian')),
102     ('kab', gettext_noop('Kabyle')),
103     ('kk', gettext_noop('Kazakh')),
104     ('km', gettext_noop('Khmer')),
105     ('kn', gettext_noop('Kannada')),
106     ('ko', gettext_noop('Korean')),
107     ('ky', gettext_noop('Kyrgyz')),
108     ('lb', gettext_noop('Luxembourgish')),
109     ('lt', gettext_noop('Lithuanian')),
110     ('lv', gettext_noop('Latvian')),
111     ('mk', gettext_noop('Macedonian')),
112     ('ml', gettext_noop('Malayalam')),
113     ('mn', gettext_noop('Mongolian')),
114     ('mr', gettext_noop('Marathi')),
115     ('my', gettext_noop('Burmese')),
116     ('nb', gettext_noop('Norwegian Bokm√•l')),
117     ('ne', gettext_noop('Nepali')),
118     ('nl', gettext_noop('Dutch')),
119     ('nn', gettext_noop('Norwegian Nynorsk')),
120     ('os', gettext_noop('Ossetic')),
121     ('pa', gettext_noop('Punjabi')),
122     ('pl', gettext_noop('Polish')),
123     ('pt', gettext_noop('Portuguese')),
124     ('pt-br', gettext_noop('Brazilian Portuguese')),
125     ('ro', gettext_noop('Romanian')),
126     ('ru', gettext_noop('Russian')),
127     ('sk', gettext_noop('Slovak')),
128     ('sl', gettext_noop('Slovenian')),
129     ('sq', gettext_noop('Albanian')),
130     ('sr', gettext_noop('Serbian')),
131     ('sr-latn', gettext_noop('Serbian Latin')),
132     ('sv', gettext_noop('Swedish')),
133     ('sw', gettext_noop('Swahili')),
134     ('ta', gettext_noop('Tamil')),
135     ('te', gettext_noop('Telugu')),
136     ('tg', gettext_noop('Tajik')),
137     ('th', gettext_noop('Thai')),
138     ('tk', gettext_noop('Turkmen')),
139     ('tr', gettext_noop('Turkish')),
140     ('tt', gettext_noop('Tatar')),
141     ('udm', gettext_noop('Udmurt')),
142     ('uk', gettext_noop('Ukrainian')),
143     ('ur', gettext_noop('Urdu')),
144     ('uz', gettext_noop('Uzbek')),
145     ('vi', gettext_noop('Vietnamese')),
146     ('zh-hans', gettext_noop('Simplified Chinese')),
147     ('zh-hant', gettext_noop('Traditional Chinese')),
148 ]
149 
150 # Languages using BiDi (right-to-left) layout
151 LANGUAGES_BIDI = ["he", "ar", "ar-dz", "fa", "ur"]
152 
153 # If you set this to False, Django will make some optimizations so as not
154 # to load the internationalization machinery.
155 USE_I18N = True
156 LOCALE_PATHS = []
157 
158 # Settings for language cookie
159 LANGUAGE_COOKIE_NAME = 'django_language'
160 LANGUAGE_COOKIE_AGE = None
161 LANGUAGE_COOKIE_DOMAIN = None
162 LANGUAGE_COOKIE_PATH = '/'
163 LANGUAGE_COOKIE_SECURE = False
164 LANGUAGE_COOKIE_HTTPONLY = False
165 LANGUAGE_COOKIE_SAMESITE = None
166 
167 
168 # If you set this to True, Django will format dates, numbers and calendars
169 # according to user current locale.
170 USE_L10N = False
171 
172 # Not-necessarily-technical managers of the site. They get broken link
173 # notifications and other various emails.
174 MANAGERS = ADMINS
175 
176 # Default charset to use for all HttpResponse objects, if a MIME type isn't
177 # manually specified. It's used to construct the Content-Type header.
178 DEFAULT_CHARSET = 'utf-8'
179 
180 # Email address that error messages come from.
181 SERVER_EMAIL = 'root@localhost'
182 
183 # Database connection info. If left empty, will default to the dummy backend.
184 DATABASES = {}
185 
186 # Classes used to implement DB routing behavior.
187 DATABASE_ROUTERS = []
188 
189 # The email backend to use. For possible shortcuts see django.core.mail.
190 # The default is to use the SMTP backend.
191 # Third-party backends can be specified by providing a Python path
192 # to a module that defines an EmailBackend class.
193 EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
194 
195 # Host for sending email.
196 EMAIL_HOST = 'localhost'
197 
198 # Port for sending email.
199 EMAIL_PORT = 25
200 
201 # Whether to send SMTP 'Date' header in the local time zone or in UTC.
202 EMAIL_USE_LOCALTIME = False
203 
204 # Optional SMTP authentication information for EMAIL_HOST.
205 EMAIL_HOST_USER = ''
206 EMAIL_HOST_PASSWORD = ''
207 EMAIL_USE_TLS = False
208 EMAIL_USE_SSL = False
209 EMAIL_SSL_CERTFILE = None
210 EMAIL_SSL_KEYFILE = None
211 EMAIL_TIMEOUT = None
212 
213 # List of strings representing installed apps.
214 INSTALLED_APPS = []
215 
216 TEMPLATES = []
217 
218 # Default form rendering class.
219 FORM_RENDERER = 'django.forms.renderers.DjangoTemplates'
220 
221 # Default email address to use for various automated correspondence from
222 # the site managers.
223 DEFAULT_FROM_EMAIL = 'webmaster@localhost'
224 
225 # Subject-line prefix for email messages send with django.core.mail.mail_admins
226 # or ...mail_managers.  Make sure to include the trailing space.
227 EMAIL_SUBJECT_PREFIX = '[Django] '
228 
229 # Whether to append trailing slashes to URLs.
230 APPEND_SLASH = True
231 
232 # Whether to prepend the "www." subdomain to URLs that don't have it.
233 PREPEND_WWW = False
234 
235 # Override the server-derived value of SCRIPT_NAME
236 FORCE_SCRIPT_NAME = None
237 
238 # List of compiled regular expression objects representing User-Agent strings
239 # that are not allowed to visit any page, systemwide. Use this for bad
240 # robots/crawlers. Here are a few examples:
241 #     import re
242 #     DISALLOWED_USER_AGENTS = [
243 #         re.compile(r'^NaverBot.*'),
244 #         re.compile(r'^EmailSiphon.*'),
245 #         re.compile(r'^SiteSucker.*'),
246 #         re.compile(r'^sohu-search'),
247 #     ]
248 DISALLOWED_USER_AGENTS = []
249 
250 ABSOLUTE_URL_OVERRIDES = {}
251 
252 # List of compiled regular expression objects representing URLs that need not
253 # be reported by BrokenLinkEmailsMiddleware. Here are a few examples:
254 #    import re
255 #    IGNORABLE_404_URLS = [
256 #        re.compile(r'^/apple-touch-icon.*\.png$'),
257 #        re.compile(r'^/favicon.ico$'),
258 #        re.compile(r'^/robots.txt$'),
259 #        re.compile(r'^/phpmyadmin/'),
260 #        re.compile(r'\.(cgi|php|pl)$'),
261 #    ]
262 IGNORABLE_404_URLS = []
263 
264 # A secret key for this particular Django installation. Used in secret-key
265 # hashing algorithms. Set this in your settings, or Django will complain
266 # loudly.
267 SECRET_KEY = ''
268 
269 # Default file storage mechanism that holds media.
270 DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
271 
272 # Absolute filesystem path to the directory that will hold user-uploaded files.
273 # Example: "/var/www/example.com/media/"
274 MEDIA_ROOT = ''
275 
276 # URL that handles the media served from MEDIA_ROOT.
277 # Examples: "http://example.com/media/", "http://media.example.com/"
278 MEDIA_URL = ''
279 
280 # Absolute path to the directory static files should be collected to.
281 # Example: "/var/www/example.com/static/"
282 STATIC_ROOT = None
283 
284 # URL that handles the static files served from STATIC_ROOT.
285 # Example: "http://example.com/static/", "http://static.example.com/"
286 STATIC_URL = None
287 
288 # List of upload handler classes to be applied in order.
289 FILE_UPLOAD_HANDLERS = [
290     'django.core.files.uploadhandler.MemoryFileUploadHandler',
291     'django.core.files.uploadhandler.TemporaryFileUploadHandler',
292 ]
293 
294 # Maximum size, in bytes, of a request before it will be streamed to the
295 # file system instead of into memory.
296 FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB
297 
298 # Maximum size in bytes of request data (excluding file uploads) that will be
299 # read before a SuspiciousOperation (RequestDataTooBig) is raised.
300 DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB
301 
302 # Maximum number of GET/POST parameters that will be read before a
303 # SuspiciousOperation (TooManyFieldsSent) is raised.
304 DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000
305 
306 # Directory in which upload streamed files will be temporarily saved. A value of
307 # `None` will make Django use the operating system's default temporary directory
308 # (i.e. "/tmp" on *nix systems).
309 FILE_UPLOAD_TEMP_DIR = None
310 
311 # The numeric mode to set newly-uploaded files to. The value should be a mode
312 # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.
313 FILE_UPLOAD_PERMISSIONS = 0o644
314 
315 # The numeric mode to assign to newly-created directories, when uploading files.
316 # The value should be a mode as you'd pass to os.chmod;
317 # see https://docs.python.org/library/os.html#files-and-directories.
318 FILE_UPLOAD_DIRECTORY_PERMISSIONS = None
319 
320 # Python module path where user will place custom format definition.
321 # The directory where this setting is pointing should contain subdirectories
322 # named as the locales, containing a formats.py file
323 # (i.e. "myproject.locale" for myproject/locale/en/formats.py etc. use)
324 FORMAT_MODULE_PATH = None
325 
326 # Default formatting for date objects. See all available format strings here:
327 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
328 DATE_FORMAT = 'N j, Y'
329 
330 # Default formatting for datetime objects. See all available format strings here:
331 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
332 DATETIME_FORMAT = 'N j, Y, P'
333 
334 # Default formatting for time objects. See all available format strings here:
335 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
336 TIME_FORMAT = 'P'
337 
338 # Default formatting for date objects when only the year and month are relevant.
339 # See all available format strings here:
340 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
341 YEAR_MONTH_FORMAT = 'F Y'
342 
343 # Default formatting for date objects when only the month and day are relevant.
344 # See all available format strings here:
345 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
346 MONTH_DAY_FORMAT = 'F j'
347 
348 # Default short formatting for date objects. See all available format strings here:
349 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
350 SHORT_DATE_FORMAT = 'm/d/Y'
351 
352 # Default short formatting for datetime objects.
353 # See all available format strings here:
354 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
355 SHORT_DATETIME_FORMAT = 'm/d/Y P'
356 
357 # Default formats to be used when parsing dates from input boxes, in order
358 # See all available format string here:
359 # https://docs.python.org/library/datetime.html#strftime-behavior
360 # * Note that these format strings are different from the ones to display dates
361 DATE_INPUT_FORMATS = [
362     '%Y-%m-%d', '%m/%d/%Y', '%m/%d/%y',  # '2006-10-25', '10/25/2006', '10/25/06'
363     '%b %d %Y', '%b %d, %Y',             # 'Oct 25 2006', 'Oct 25, 2006'
364     '%d %b %Y', '%d %b, %Y',             # '25 Oct 2006', '25 Oct, 2006'
365     '%B %d %Y', '%B %d, %Y',             # 'October 25 2006', 'October 25, 2006'
366     '%d %B %Y', '%d %B, %Y',             # '25 October 2006', '25 October, 2006'
367 ]
368 
369 # Default formats to be used when parsing times from input boxes, in order
370 # See all available format string here:
371 # https://docs.python.org/library/datetime.html#strftime-behavior
372 # * Note that these format strings are different from the ones to display dates
373 TIME_INPUT_FORMATS = [
374     '%H:%M:%S',     # '14:30:59'
375     '%H:%M:%S.%f',  # '14:30:59.000200'
376     '%H:%M',        # '14:30'
377 ]
378 
379 # Default formats to be used when parsing dates and times from input boxes,
380 # in order
381 # See all available format string here:
382 # https://docs.python.org/library/datetime.html#strftime-behavior
383 # * Note that these format strings are different from the ones to display dates
384 DATETIME_INPUT_FORMATS = [
385     '%Y-%m-%d %H:%M:%S',     # '2006-10-25 14:30:59'
386     '%Y-%m-%d %H:%M:%S.%f',  # '2006-10-25 14:30:59.000200'
387     '%Y-%m-%d %H:%M',        # '2006-10-25 14:30'
388     '%m/%d/%Y %H:%M:%S',     # '10/25/2006 14:30:59'
389     '%m/%d/%Y %H:%M:%S.%f',  # '10/25/2006 14:30:59.000200'
390     '%m/%d/%Y %H:%M',        # '10/25/2006 14:30'
391     '%m/%d/%y %H:%M:%S',     # '10/25/06 14:30:59'
392     '%m/%d/%y %H:%M:%S.%f',  # '10/25/06 14:30:59.000200'
393     '%m/%d/%y %H:%M',        # '10/25/06 14:30'
394 ]
395 
396 # First day of week, to be used on calendars
397 # 0 means Sunday, 1 means Monday...
398 FIRST_DAY_OF_WEEK = 0
399 
400 # Decimal separator symbol
401 DECIMAL_SEPARATOR = '.'
402 
403 # Boolean that sets whether to add thousand separator when formatting numbers
404 USE_THOUSAND_SEPARATOR = False
405 
406 # Number of digits that will be together, when splitting them by
407 # THOUSAND_SEPARATOR. 0 means no grouping, 3 means splitting by thousands...
408 NUMBER_GROUPING = 0
409 
410 # Thousand separator symbol
411 THOUSAND_SEPARATOR = ','
412 
413 # The tablespaces to use for each model when not specified otherwise.
414 DEFAULT_TABLESPACE = ''
415 DEFAULT_INDEX_TABLESPACE = ''
416 
417 # Default primary key field type.
418 DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
419 
420 # Default X-Frame-Options header value
421 X_FRAME_OPTIONS = 'DENY'
422 
423 USE_X_FORWARDED_HOST = False
424 USE_X_FORWARDED_PORT = False
425 
426 # The Python dotted path to the WSGI application that Django's internal server
427 # (runserver) will use. If `None`, the return value of
428 # 'django.core.wsgi.get_wsgi_application' is used, thus preserving the same
429 # behavior as previous versions of Django. Otherwise this should point to an
430 # actual WSGI application object.
431 WSGI_APPLICATION = None
432 
433 # If your Django app is behind a proxy that sets a header to specify secure
434 # connections, AND that proxy ensures that user-submitted headers with the
435 # same name are ignored (so that people can't spoof it), set this value to
436 # a tuple of (header_name, header_value). For any requests that come in with
437 # that header/value, request.is_secure() will return True.
438 # WARNING! Only set this if you fully understand what you're doing. Otherwise,
439 # you may be opening yourself up to a security risk.
440 SECURE_PROXY_SSL_HEADER = None
441 
442 ##############
443 # MIDDLEWARE #
444 ##############
445 
446 # List of middleware to use. Order is important; in the request phase, these
447 # middleware will be applied in the order given, and in the response
448 # phase the middleware will be applied in reverse order.
449 MIDDLEWARE = []
450 
451 ############
452 # SESSIONS #
453 ############
454 
455 # Cache to store session data if using the cache session backend.
456 SESSION_CACHE_ALIAS = 'default'
457 # Cookie name. This can be whatever you want.
458 SESSION_COOKIE_NAME = 'sessionid'
459 # Age of cookie, in seconds (default: 2 weeks).
460 SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2
461 # A string like "example.com", or None for standard domain cookie.
462 SESSION_COOKIE_DOMAIN = None
463 # Whether the session cookie should be secure (https:// only).
464 SESSION_COOKIE_SECURE = False
465 # The path of the session cookie.
466 SESSION_COOKIE_PATH = '/'
467 # Whether to use the HttpOnly flag.
468 SESSION_COOKIE_HTTPONLY = True
469 # Whether to set the flag restricting cookie leaks on cross-site requests.
470 # This can be 'Lax', 'Strict', 'None', or False to disable the flag.
471 SESSION_COOKIE_SAMESITE = 'Lax'
472 # Whether to save the session data on every request.
473 SESSION_SAVE_EVERY_REQUEST = False
474 # Whether a user's session cookie expires when the Web browser is closed.
475 SESSION_EXPIRE_AT_BROWSER_CLOSE = False
476 # The module to store session data
477 SESSION_ENGINE = 'django.contrib.sessions.backends.db'
478 # Directory to store session files if using the file session module. If None,
479 # the backend will use a sensible default.
480 SESSION_FILE_PATH = None
481 # class to serialize session data
482 SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'
483 
484 #########
485 # CACHE #
486 #########
487 
488 # The cache backends to use.
489 CACHES = {
490     'default': {
491         'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
492     }
493 }
494 CACHE_MIDDLEWARE_KEY_PREFIX = ''
495 CACHE_MIDDLEWARE_SECONDS = 600
496 CACHE_MIDDLEWARE_ALIAS = 'default'
497 
498 ##################
499 # AUTHENTICATION #
500 ##################
501 
502 AUTH_USER_MODEL = 'auth.User'
503 
504 AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend']
505 
506 LOGIN_URL = '/accounts/login/'
507 
508 LOGIN_REDIRECT_URL = '/accounts/profile/'
509 
510 LOGOUT_REDIRECT_URL = None
511 
512 # The number of seconds a password reset link is valid for (default: 3 days).
513 PASSWORD_RESET_TIMEOUT = 60 * 60 * 24 * 3
514 
515 # the first hasher in this list is the preferred algorithm.  any
516 # password using different algorithms will be converted automatically
517 # upon login
518 PASSWORD_HASHERS = [
519     'django.contrib.auth.hashers.PBKDF2PasswordHasher',
520     'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
521     'django.contrib.auth.hashers.Argon2PasswordHasher',
522     'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
523 ]
524 
525 AUTH_PASSWORD_VALIDATORS = []
526 
527 ###########
528 # SIGNING #
529 ###########
530 
531 SIGNING_BACKEND = 'django.core.signing.TimestampSigner'
532 
533 ########
534 # CSRF #
535 ########
536 
537 # Dotted path to callable to be used as view when a request is
538 # rejected by the CSRF middleware.
539 CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'
540 
541 # Settings for CSRF cookie.
542 CSRF_COOKIE_NAME = 'csrftoken'
543 CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52
544 CSRF_COOKIE_DOMAIN = None
545 CSRF_COOKIE_PATH = '/'
546 CSRF_COOKIE_SECURE = False
547 CSRF_COOKIE_HTTPONLY = False
548 CSRF_COOKIE_SAMESITE = 'Lax'
549 CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'
550 CSRF_TRUSTED_ORIGINS = []
551 CSRF_USE_SESSIONS = False
552 
553 ############
554 # MESSAGES #
555 ############
556 
557 # Class to use as messages backend
558 MESSAGE_STORAGE = 'django.contrib.messages.storage.fallback.FallbackStorage'
559 
560 # Default values of MESSAGE_LEVEL and MESSAGE_TAGS are defined within
561 # django.contrib.messages to avoid imports in this settings file.
562 
563 ###########
564 # LOGGING #
565 ###########
566 
567 # The callable to use to configure logging
568 LOGGING_CONFIG = 'logging.config.dictConfig'
569 
570 # Custom logging configuration.
571 LOGGING = {}
572 
573 # Default exception reporter class used in case none has been
574 # specifically assigned to the HttpRequest instance.
575 DEFAULT_EXCEPTION_REPORTER = 'django.views.debug.ExceptionReporter'
576 
577 # Default exception reporter filter class used in case none has been
578 # specifically assigned to the HttpRequest instance.
579 DEFAULT_EXCEPTION_REPORTER_FILTER = 'django.views.debug.SafeExceptionReporterFilter'
580 
581 ###########
582 # TESTING #
583 ###########
584 
585 # The name of the class to use to run the test suite
586 TEST_RUNNER = 'django.test.runner.DiscoverRunner'
587 
588 # Apps that don't need to be serialized at test database creation time
589 # (only apps with migrations are to start with)
590 TEST_NON_SERIALIZED_APPS = []
591 
592 ############
593 # FIXTURES #
594 ############
595 
596 # The list of directories to search for fixtures
597 FIXTURE_DIRS = []
598 
599 ###############
600 # STATICFILES #
601 ###############
602 
603 # A list of locations of additional static files
604 STATICFILES_DIRS = []
605 
606 # The default file storage backend used during the build process
607 STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
608 
609 # List of finder classes that know how to find static files in
610 # various locations.
611 STATICFILES_FINDERS = [
612     'django.contrib.staticfiles.finders.FileSystemFinder',
613     'django.contrib.staticfiles.finders.AppDirectoriesFinder',
614     # 'django.contrib.staticfiles.finders.DefaultStorageFinder',
615 ]
616 
617 ##############
618 # MIGRATIONS #
619 ##############
620 
621 # Migration module overrides for apps, by app label.
622 MIGRATION_MODULES = {}
623 
624 #################
625 # SYSTEM CHECKS #
626 #################
627 
628 # List of all issues generated by system checks that should be silenced. Light
629 # issues like warnings, infos or debugs will not generate a message. Silencing
630 # serious issues like errors and criticals does not result in hiding the
631 # message, but Django will not stop you from e.g. running server.
632 SILENCED_SYSTEM_CHECKS = []
633 
634 #######################
635 # SECURITY MIDDLEWARE #
636 #######################
637 SECURE_BROWSER_XSS_FILTER = False
638 SECURE_CONTENT_TYPE_NOSNIFF = True
639 SECURE_HSTS_INCLUDE_SUBDOMAINS = False
640 SECURE_HSTS_PRELOAD = False
641 SECURE_HSTS_SECONDS = 0
642 SECURE_REDIRECT_EXEMPT = []
643 SECURE_REFERRER_POLICY = 'same-origin'
644 SECURE_SSL_HOST = None
645 SECURE_SSL_REDIRECT = False

</code><intended_behavior>Update or add `DEFAULT_AUTO_FIELD` setting to `'django.db.models.BigAutoField'` in the project's settings.py file. This ensures that all models will use `BigAutoField` as the default type for auto-generated primary keys, unless overridden.</intended_behavior>]
2025-10-15 05:39:38.670 | INFO     | Search completed. Bug locations: [<file>django/conf/global_settings.py</file>
<class>None</class>
<method>None</method>
<code>
1 """
2 Default Django settings. Override these with settings in the module pointed to
3 by the DJANGO_SETTINGS_MODULE environment variable.
4 """
5 
6 
7 # This is defined here as a do-nothing function because we can't import
8 # django.utils.translation -- that module depends on the settings.
9 def gettext_noop(s):
10     return s
11 
12 
13 ####################
14 # CORE             #
15 ####################
16 
17 DEBUG = False
18 
19 # Whether the framework should propagate raw exceptions rather than catching
20 # them. This is useful under some testing situations and should never be used
21 # on a live site.
22 DEBUG_PROPAGATE_EXCEPTIONS = False
23 
24 # People who get code error notifications.
25 # In the format [('Full Name', 'email@example.com'), ('Full Name', 'anotheremail@example.com')]
26 ADMINS = []
27 
28 # List of IP addresses, as strings, that:
29 #   * See debug comments, when DEBUG is true
30 #   * Receive x-headers
31 INTERNAL_IPS = []
32 
33 # Hosts/domain names that are valid for this site.
34 # "*" matches anything, ".example.com" matches example.com and all subdomains
35 ALLOWED_HOSTS = []
36 
37 # Local time zone for this installation. All choices can be found here:
38 # https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all
39 # systems may support all possibilities). When USE_TZ is True, this is
40 # interpreted as the default user time zone.
41 TIME_ZONE = 'America/Chicago'
42 
43 # If you set this to True, Django will use timezone-aware datetimes.
44 USE_TZ = False
45 
46 # Language code for this installation. All choices can be found here:
47 # http://www.i18nguy.com/unicode/language-identifiers.html
48 LANGUAGE_CODE = 'en-us'
49 
50 # Languages we provide translations for, out of the box.
51 LANGUAGES = [
52     ('af', gettext_noop('Afrikaans')),
53     ('ar', gettext_noop('Arabic')),
54     ('ar-dz', gettext_noop('Algerian Arabic')),
55     ('ast', gettext_noop('Asturian')),
56     ('az', gettext_noop('Azerbaijani')),
57     ('bg', gettext_noop('Bulgarian')),
58     ('be', gettext_noop('Belarusian')),
59     ('bn', gettext_noop('Bengali')),
60     ('br', gettext_noop('Breton')),
61     ('bs', gettext_noop('Bosnian')),
62     ('ca', gettext_noop('Catalan')),
63     ('cs', gettext_noop('Czech')),
64     ('cy', gettext_noop('Welsh')),
65     ('da', gettext_noop('Danish')),
66     ('de', gettext_noop('German')),
67     ('dsb', gettext_noop('Lower Sorbian')),
68     ('el', gettext_noop('Greek')),
69     ('en', gettext_noop('English')),
70     ('en-au', gettext_noop('Australian English')),
71     ('en-gb', gettext_noop('British English')),
72     ('eo', gettext_noop('Esperanto')),
73     ('es', gettext_noop('Spanish')),
74     ('es-ar', gettext_noop('Argentinian Spanish')),
75     ('es-co', gettext_noop('Colombian Spanish')),
76     ('es-mx', gettext_noop('Mexican Spanish')),
77     ('es-ni', gettext_noop('Nicaraguan Spanish')),
78     ('es-ve', gettext_noop('Venezuelan Spanish')),
79     ('et', gettext_noop('Estonian')),
80     ('eu', gettext_noop('Basque')),
81     ('fa', gettext_noop('Persian')),
82     ('fi', gettext_noop('Finnish')),
83     ('fr', gettext_noop('French')),
84     ('fy', gettext_noop('Frisian')),
85     ('ga', gettext_noop('Irish')),
86     ('gd', gettext_noop('Scottish Gaelic')),
87     ('gl', gettext_noop('Galician')),
88     ('he', gettext_noop('Hebrew')),
89     ('hi', gettext_noop('Hindi')),
90     ('hr', gettext_noop('Croatian')),
91     ('hsb', gettext_noop('Upper Sorbian')),
92     ('hu', gettext_noop('Hungarian')),
93     ('hy', gettext_noop('Armenian')),
94     ('ia', gettext_noop('Interlingua')),
95     ('id', gettext_noop('Indonesian')),
96     ('ig', gettext_noop('Igbo')),
97     ('io', gettext_noop('Ido')),
98     ('is', gettext_noop('Icelandic')),
99     ('it', gettext_noop('Italian')),
100     ('ja', gettext_noop('Japanese')),
101     ('ka', gettext_noop('Georgian')),
102     ('kab', gettext_noop('Kabyle')),
103     ('kk', gettext_noop('Kazakh')),
104     ('km', gettext_noop('Khmer')),
105     ('kn', gettext_noop('Kannada')),
106     ('ko', gettext_noop('Korean')),
107     ('ky', gettext_noop('Kyrgyz')),
108     ('lb', gettext_noop('Luxembourgish')),
109     ('lt', gettext_noop('Lithuanian')),
110     ('lv', gettext_noop('Latvian')),
111     ('mk', gettext_noop('Macedonian')),
112     ('ml', gettext_noop('Malayalam')),
113     ('mn', gettext_noop('Mongolian')),
114     ('mr', gettext_noop('Marathi')),
115     ('my', gettext_noop('Burmese')),
116     ('nb', gettext_noop('Norwegian Bokm√•l')),
117     ('ne', gettext_noop('Nepali')),
118     ('nl', gettext_noop('Dutch')),
119     ('nn', gettext_noop('Norwegian Nynorsk')),
120     ('os', gettext_noop('Ossetic')),
121     ('pa', gettext_noop('Punjabi')),
122     ('pl', gettext_noop('Polish')),
123     ('pt', gettext_noop('Portuguese')),
124     ('pt-br', gettext_noop('Brazilian Portuguese')),
125     ('ro', gettext_noop('Romanian')),
126     ('ru', gettext_noop('Russian')),
127     ('sk', gettext_noop('Slovak')),
128     ('sl', gettext_noop('Slovenian')),
129     ('sq', gettext_noop('Albanian')),
130     ('sr', gettext_noop('Serbian')),
131     ('sr-latn', gettext_noop('Serbian Latin')),
132     ('sv', gettext_noop('Swedish')),
133     ('sw', gettext_noop('Swahili')),
134     ('ta', gettext_noop('Tamil')),
135     ('te', gettext_noop('Telugu')),
136     ('tg', gettext_noop('Tajik')),
137     ('th', gettext_noop('Thai')),
138     ('tk', gettext_noop('Turkmen')),
139     ('tr', gettext_noop('Turkish')),
140     ('tt', gettext_noop('Tatar')),
141     ('udm', gettext_noop('Udmurt')),
142     ('uk', gettext_noop('Ukrainian')),
143     ('ur', gettext_noop('Urdu')),
144     ('uz', gettext_noop('Uzbek')),
145     ('vi', gettext_noop('Vietnamese')),
146     ('zh-hans', gettext_noop('Simplified Chinese')),
147     ('zh-hant', gettext_noop('Traditional Chinese')),
148 ]
149 
150 # Languages using BiDi (right-to-left) layout
151 LANGUAGES_BIDI = ["he", "ar", "ar-dz", "fa", "ur"]
152 
153 # If you set this to False, Django will make some optimizations so as not
154 # to load the internationalization machinery.
155 USE_I18N = True
156 LOCALE_PATHS = []
157 
158 # Settings for language cookie
159 LANGUAGE_COOKIE_NAME = 'django_language'
160 LANGUAGE_COOKIE_AGE = None
161 LANGUAGE_COOKIE_DOMAIN = None
162 LANGUAGE_COOKIE_PATH = '/'
163 LANGUAGE_COOKIE_SECURE = False
164 LANGUAGE_COOKIE_HTTPONLY = False
165 LANGUAGE_COOKIE_SAMESITE = None
166 
167 
168 # If you set this to True, Django will format dates, numbers and calendars
169 # according to user current locale.
170 USE_L10N = False
171 
172 # Not-necessarily-technical managers of the site. They get broken link
173 # notifications and other various emails.
174 MANAGERS = ADMINS
175 
176 # Default charset to use for all HttpResponse objects, if a MIME type isn't
177 # manually specified. It's used to construct the Content-Type header.
178 DEFAULT_CHARSET = 'utf-8'
179 
180 # Email address that error messages come from.
181 SERVER_EMAIL = 'root@localhost'
182 
183 # Database connection info. If left empty, will default to the dummy backend.
184 DATABASES = {}
185 
186 # Classes used to implement DB routing behavior.
187 DATABASE_ROUTERS = []
188 
189 # The email backend to use. For possible shortcuts see django.core.mail.
190 # The default is to use the SMTP backend.
191 # Third-party backends can be specified by providing a Python path
192 # to a module that defines an EmailBackend class.
193 EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
194 
195 # Host for sending email.
196 EMAIL_HOST = 'localhost'
197 
198 # Port for sending email.
199 EMAIL_PORT = 25
200 
201 # Whether to send SMTP 'Date' header in the local time zone or in UTC.
202 EMAIL_USE_LOCALTIME = False
203 
204 # Optional SMTP authentication information for EMAIL_HOST.
205 EMAIL_HOST_USER = ''
206 EMAIL_HOST_PASSWORD = ''
207 EMAIL_USE_TLS = False
208 EMAIL_USE_SSL = False
209 EMAIL_SSL_CERTFILE = None
210 EMAIL_SSL_KEYFILE = None
211 EMAIL_TIMEOUT = None
212 
213 # List of strings representing installed apps.
214 INSTALLED_APPS = []
215 
216 TEMPLATES = []
217 
218 # Default form rendering class.
219 FORM_RENDERER = 'django.forms.renderers.DjangoTemplates'
220 
221 # Default email address to use for various automated correspondence from
222 # the site managers.
223 DEFAULT_FROM_EMAIL = 'webmaster@localhost'
224 
225 # Subject-line prefix for email messages send with django.core.mail.mail_admins
226 # or ...mail_managers.  Make sure to include the trailing space.
227 EMAIL_SUBJECT_PREFIX = '[Django] '
228 
229 # Whether to append trailing slashes to URLs.
230 APPEND_SLASH = True
231 
232 # Whether to prepend the "www." subdomain to URLs that don't have it.
233 PREPEND_WWW = False
234 
235 # Override the server-derived value of SCRIPT_NAME
236 FORCE_SCRIPT_NAME = None
237 
238 # List of compiled regular expression objects representing User-Agent strings
239 # that are not allowed to visit any page, systemwide. Use this for bad
240 # robots/crawlers. Here are a few examples:
241 #     import re
242 #     DISALLOWED_USER_AGENTS = [
243 #         re.compile(r'^NaverBot.*'),
244 #         re.compile(r'^EmailSiphon.*'),
245 #         re.compile(r'^SiteSucker.*'),
246 #         re.compile(r'^sohu-search'),
247 #     ]
248 DISALLOWED_USER_AGENTS = []
249 
250 ABSOLUTE_URL_OVERRIDES = {}
251 
252 # List of compiled regular expression objects representing URLs that need not
253 # be reported by BrokenLinkEmailsMiddleware. Here are a few examples:
254 #    import re
255 #    IGNORABLE_404_URLS = [
256 #        re.compile(r'^/apple-touch-icon.*\.png$'),
257 #        re.compile(r'^/favicon.ico$'),
258 #        re.compile(r'^/robots.txt$'),
259 #        re.compile(r'^/phpmyadmin/'),
260 #        re.compile(r'\.(cgi|php|pl)$'),
261 #    ]
262 IGNORABLE_404_URLS = []
263 
264 # A secret key for this particular Django installation. Used in secret-key
265 # hashing algorithms. Set this in your settings, or Django will complain
266 # loudly.
267 SECRET_KEY = ''
268 
269 # Default file storage mechanism that holds media.
270 DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
271 
272 # Absolute filesystem path to the directory that will hold user-uploaded files.
273 # Example: "/var/www/example.com/media/"
274 MEDIA_ROOT = ''
275 
276 # URL that handles the media served from MEDIA_ROOT.
277 # Examples: "http://example.com/media/", "http://media.example.com/"
278 MEDIA_URL = ''
279 
280 # Absolute path to the directory static files should be collected to.
281 # Example: "/var/www/example.com/static/"
282 STATIC_ROOT = None
283 
284 # URL that handles the static files served from STATIC_ROOT.
285 # Example: "http://example.com/static/", "http://static.example.com/"
286 STATIC_URL = None
287 
288 # List of upload handler classes to be applied in order.
289 FILE_UPLOAD_HANDLERS = [
290     'django.core.files.uploadhandler.MemoryFileUploadHandler',
291     'django.core.files.uploadhandler.TemporaryFileUploadHandler',
292 ]
293 
294 # Maximum size, in bytes, of a request before it will be streamed to the
295 # file system instead of into memory.
296 FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB
297 
298 # Maximum size in bytes of request data (excluding file uploads) that will be
299 # read before a SuspiciousOperation (RequestDataTooBig) is raised.
300 DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB
301 
302 # Maximum number of GET/POST parameters that will be read before a
303 # SuspiciousOperation (TooManyFieldsSent) is raised.
304 DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000
305 
306 # Directory in which upload streamed files will be temporarily saved. A value of
307 # `None` will make Django use the operating system's default temporary directory
308 # (i.e. "/tmp" on *nix systems).
309 FILE_UPLOAD_TEMP_DIR = None
310 
311 # The numeric mode to set newly-uploaded files to. The value should be a mode
312 # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.
313 FILE_UPLOAD_PERMISSIONS = 0o644
314 
315 # The numeric mode to assign to newly-created directories, when uploading files.
316 # The value should be a mode as you'd pass to os.chmod;
317 # see https://docs.python.org/library/os.html#files-and-directories.
318 FILE_UPLOAD_DIRECTORY_PERMISSIONS = None
319 
320 # Python module path where user will place custom format definition.
321 # The directory where this setting is pointing should contain subdirectories
322 # named as the locales, containing a formats.py file
323 # (i.e. "myproject.locale" for myproject/locale/en/formats.py etc. use)
324 FORMAT_MODULE_PATH = None
325 
326 # Default formatting for date objects. See all available format strings here:
327 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
328 DATE_FORMAT = 'N j, Y'
329 
330 # Default formatting for datetime objects. See all available format strings here:
331 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
332 DATETIME_FORMAT = 'N j, Y, P'
333 
334 # Default formatting for time objects. See all available format strings here:
335 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
336 TIME_FORMAT = 'P'
337 
338 # Default formatting for date objects when only the year and month are relevant.
339 # See all available format strings here:
340 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
341 YEAR_MONTH_FORMAT = 'F Y'
342 
343 # Default formatting for date objects when only the month and day are relevant.
344 # See all available format strings here:
345 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
346 MONTH_DAY_FORMAT = 'F j'
347 
348 # Default short formatting for date objects. See all available format strings here:
349 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
350 SHORT_DATE_FORMAT = 'm/d/Y'
351 
352 # Default short formatting for datetime objects.
353 # See all available format strings here:
354 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
355 SHORT_DATETIME_FORMAT = 'm/d/Y P'
356 
357 # Default formats to be used when parsing dates from input boxes, in order
358 # See all available format string here:
359 # https://docs.python.org/library/datetime.html#strftime-behavior
360 # * Note that these format strings are different from the ones to display dates
361 DATE_INPUT_FORMATS = [
362     '%Y-%m-%d', '%m/%d/%Y', '%m/%d/%y',  # '2006-10-25', '10/25/2006', '10/25/06'
363     '%b %d %Y', '%b %d, %Y',             # 'Oct 25 2006', 'Oct 25, 2006'
364     '%d %b %Y', '%d %b, %Y',             # '25 Oct 2006', '25 Oct, 2006'
365     '%B %d %Y', '%B %d, %Y',             # 'October 25 2006', 'October 25, 2006'
366     '%d %B %Y', '%d %B, %Y',             # '25 October 2006', '25 October, 2006'
367 ]
368 
369 # Default formats to be used when parsing times from input boxes, in order
370 # See all available format string here:
371 # https://docs.python.org/library/datetime.html#strftime-behavior
372 # * Note that these format strings are different from the ones to display dates
373 TIME_INPUT_FORMATS = [
374     '%H:%M:%S',     # '14:30:59'
375     '%H:%M:%S.%f',  # '14:30:59.000200'
376     '%H:%M',        # '14:30'
377 ]
378 
379 # Default formats to be used when parsing dates and times from input boxes,
380 # in order
381 # See all available format string here:
382 # https://docs.python.org/library/datetime.html#strftime-behavior
383 # * Note that these format strings are different from the ones to display dates
384 DATETIME_INPUT_FORMATS = [
385     '%Y-%m-%d %H:%M:%S',     # '2006-10-25 14:30:59'
386     '%Y-%m-%d %H:%M:%S.%f',  # '2006-10-25 14:30:59.000200'
387     '%Y-%m-%d %H:%M',        # '2006-10-25 14:30'
388     '%m/%d/%Y %H:%M:%S',     # '10/25/2006 14:30:59'
389     '%m/%d/%Y %H:%M:%S.%f',  # '10/25/2006 14:30:59.000200'
390     '%m/%d/%Y %H:%M',        # '10/25/2006 14:30'
391     '%m/%d/%y %H:%M:%S',     # '10/25/06 14:30:59'
392     '%m/%d/%y %H:%M:%S.%f',  # '10/25/06 14:30:59.000200'
393     '%m/%d/%y %H:%M',        # '10/25/06 14:30'
394 ]
395 
396 # First day of week, to be used on calendars
397 # 0 means Sunday, 1 means Monday...
398 FIRST_DAY_OF_WEEK = 0
399 
400 # Decimal separator symbol
401 DECIMAL_SEPARATOR = '.'
402 
403 # Boolean that sets whether to add thousand separator when formatting numbers
404 USE_THOUSAND_SEPARATOR = False
405 
406 # Number of digits that will be together, when splitting them by
407 # THOUSAND_SEPARATOR. 0 means no grouping, 3 means splitting by thousands...
408 NUMBER_GROUPING = 0
409 
410 # Thousand separator symbol
411 THOUSAND_SEPARATOR = ','
412 
413 # The tablespaces to use for each model when not specified otherwise.
414 DEFAULT_TABLESPACE = ''
415 DEFAULT_INDEX_TABLESPACE = ''
416 
417 # Default primary key field type.
418 DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
419 
420 # Default X-Frame-Options header value
421 X_FRAME_OPTIONS = 'DENY'
422 
423 USE_X_FORWARDED_HOST = False
424 USE_X_FORWARDED_PORT = False
425 
426 # The Python dotted path to the WSGI application that Django's internal server
427 # (runserver) will use. If `None`, the return value of
428 # 'django.core.wsgi.get_wsgi_application' is used, thus preserving the same
429 # behavior as previous versions of Django. Otherwise this should point to an
430 # actual WSGI application object.
431 WSGI_APPLICATION = None
432 
433 # If your Django app is behind a proxy that sets a header to specify secure
434 # connections, AND that proxy ensures that user-submitted headers with the
435 # same name are ignored (so that people can't spoof it), set this value to
436 # a tuple of (header_name, header_value). For any requests that come in with
437 # that header/value, request.is_secure() will return True.
438 # WARNING! Only set this if you fully understand what you're doing. Otherwise,
439 # you may be opening yourself up to a security risk.
440 SECURE_PROXY_SSL_HEADER = None
441 
442 ##############
443 # MIDDLEWARE #
444 ##############
445 
446 # List of middleware to use. Order is important; in the request phase, these
447 # middleware will be applied in the order given, and in the response
448 # phase the middleware will be applied in reverse order.
449 MIDDLEWARE = []
450 
451 ############
452 # SESSIONS #
453 ############
454 
455 # Cache to store session data if using the cache session backend.
456 SESSION_CACHE_ALIAS = 'default'
457 # Cookie name. This can be whatever you want.
458 SESSION_COOKIE_NAME = 'sessionid'
459 # Age of cookie, in seconds (default: 2 weeks).
460 SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2
461 # A string like "example.com", or None for standard domain cookie.
462 SESSION_COOKIE_DOMAIN = None
463 # Whether the session cookie should be secure (https:// only).
464 SESSION_COOKIE_SECURE = False
465 # The path of the session cookie.
466 SESSION_COOKIE_PATH = '/'
467 # Whether to use the HttpOnly flag.
468 SESSION_COOKIE_HTTPONLY = True
469 # Whether to set the flag restricting cookie leaks on cross-site requests.
470 # This can be 'Lax', 'Strict', 'None', or False to disable the flag.
471 SESSION_COOKIE_SAMESITE = 'Lax'
472 # Whether to save the session data on every request.
473 SESSION_SAVE_EVERY_REQUEST = False
474 # Whether a user's session cookie expires when the Web browser is closed.
475 SESSION_EXPIRE_AT_BROWSER_CLOSE = False
476 # The module to store session data
477 SESSION_ENGINE = 'django.contrib.sessions.backends.db'
478 # Directory to store session files if using the file session module. If None,
479 # the backend will use a sensible default.
480 SESSION_FILE_PATH = None
481 # class to serialize session data
482 SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'
483 
484 #########
485 # CACHE #
486 #########
487 
488 # The cache backends to use.
489 CACHES = {
490     'default': {
491         'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
492     }
493 }
494 CACHE_MIDDLEWARE_KEY_PREFIX = ''
495 CACHE_MIDDLEWARE_SECONDS = 600
496 CACHE_MIDDLEWARE_ALIAS = 'default'
497 
498 ##################
499 # AUTHENTICATION #
500 ##################
501 
502 AUTH_USER_MODEL = 'auth.User'
503 
504 AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend']
505 
506 LOGIN_URL = '/accounts/login/'
507 
508 LOGIN_REDIRECT_URL = '/accounts/profile/'
509 
510 LOGOUT_REDIRECT_URL = None
511 
512 # The number of seconds a password reset link is valid for (default: 3 days).
513 PASSWORD_RESET_TIMEOUT = 60 * 60 * 24 * 3
514 
515 # the first hasher in this list is the preferred algorithm.  any
516 # password using different algorithms will be converted automatically
517 # upon login
518 PASSWORD_HASHERS = [
519     'django.contrib.auth.hashers.PBKDF2PasswordHasher',
520     'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
521     'django.contrib.auth.hashers.Argon2PasswordHasher',
522     'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
523 ]
524 
525 AUTH_PASSWORD_VALIDATORS = []
526 
527 ###########
528 # SIGNING #
529 ###########
530 
531 SIGNING_BACKEND = 'django.core.signing.TimestampSigner'
532 
533 ########
534 # CSRF #
535 ########
536 
537 # Dotted path to callable to be used as view when a request is
538 # rejected by the CSRF middleware.
539 CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'
540 
541 # Settings for CSRF cookie.
542 CSRF_COOKIE_NAME = 'csrftoken'
543 CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52
544 CSRF_COOKIE_DOMAIN = None
545 CSRF_COOKIE_PATH = '/'
546 CSRF_COOKIE_SECURE = False
547 CSRF_COOKIE_HTTPONLY = False
548 CSRF_COOKIE_SAMESITE = 'Lax'
549 CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'
550 CSRF_TRUSTED_ORIGINS = []
551 CSRF_USE_SESSIONS = False
552 
553 ############
554 # MESSAGES #
555 ############
556 
557 # Class to use as messages backend
558 MESSAGE_STORAGE = 'django.contrib.messages.storage.fallback.FallbackStorage'
559 
560 # Default values of MESSAGE_LEVEL and MESSAGE_TAGS are defined within
561 # django.contrib.messages to avoid imports in this settings file.
562 
563 ###########
564 # LOGGING #
565 ###########
566 
567 # The callable to use to configure logging
568 LOGGING_CONFIG = 'logging.config.dictConfig'
569 
570 # Custom logging configuration.
571 LOGGING = {}
572 
573 # Default exception reporter class used in case none has been
574 # specifically assigned to the HttpRequest instance.
575 DEFAULT_EXCEPTION_REPORTER = 'django.views.debug.ExceptionReporter'
576 
577 # Default exception reporter filter class used in case none has been
578 # specifically assigned to the HttpRequest instance.
579 DEFAULT_EXCEPTION_REPORTER_FILTER = 'django.views.debug.SafeExceptionReporterFilter'
580 
581 ###########
582 # TESTING #
583 ###########
584 
585 # The name of the class to use to run the test suite
586 TEST_RUNNER = 'django.test.runner.DiscoverRunner'
587 
588 # Apps that don't need to be serialized at test database creation time
589 # (only apps with migrations are to start with)
590 TEST_NON_SERIALIZED_APPS = []
591 
592 ############
593 # FIXTURES #
594 ############
595 
596 # The list of directories to search for fixtures
597 FIXTURE_DIRS = []
598 
599 ###############
600 # STATICFILES #
601 ###############
602 
603 # A list of locations of additional static files
604 STATICFILES_DIRS = []
605 
606 # The default file storage backend used during the build process
607 STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
608 
609 # List of finder classes that know how to find static files in
610 # various locations.
611 STATICFILES_FINDERS = [
612     'django.contrib.staticfiles.finders.FileSystemFinder',
613     'django.contrib.staticfiles.finders.AppDirectoriesFinder',
614     # 'django.contrib.staticfiles.finders.DefaultStorageFinder',
615 ]
616 
617 ##############
618 # MIGRATIONS #
619 ##############
620 
621 # Migration module overrides for apps, by app label.
622 MIGRATION_MODULES = {}
623 
624 #################
625 # SYSTEM CHECKS #
626 #################
627 
628 # List of all issues generated by system checks that should be silenced. Light
629 # issues like warnings, infos or debugs will not generate a message. Silencing
630 # serious issues like errors and criticals does not result in hiding the
631 # message, but Django will not stop you from e.g. running server.
632 SILENCED_SYSTEM_CHECKS = []
633 
634 #######################
635 # SECURITY MIDDLEWARE #
636 #######################
637 SECURE_BROWSER_XSS_FILTER = False
638 SECURE_CONTENT_TYPE_NOSNIFF = True
639 SECURE_HSTS_INCLUDE_SUBDOMAINS = False
640 SECURE_HSTS_PRELOAD = False
641 SECURE_HSTS_SECONDS = 0
642 SECURE_REDIRECT_EXEMPT = []
643 SECURE_REFERRER_POLICY = 'same-origin'
644 SECURE_SSL_HOST = None
645 SECURE_SSL_REDIRECT = False

</code><intended_behavior>Update or add `DEFAULT_AUTO_FIELD` setting to `'django.db.models.BigAutoField'` in the project's settings.py file. This ensures that all models will use `BigAutoField` as the default type for auto-generated primary keys, unless overridden.</intended_behavior>]
2025-10-15 05:39:38.670 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-15 05:39:38.670 | INFO     | Search-only: skipping patch selection
2025-10-15 05:39:38.810 | INFO     | Task django__django-13925 completed successfully.
2025-10-15 05:39:38.810 | INFO     | No patch generated. You can try running ACR again.
