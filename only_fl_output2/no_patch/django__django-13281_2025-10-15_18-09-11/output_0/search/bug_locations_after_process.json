[
    {
        "rel_file_path": "django/db/models/fields/mixins.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/db/models/fields/mixins.py",
        "start": 1,
        "end": 56,
        "class_name": null,
        "method_name": null,
        "code": "1 from django.core import checks\n2 \n3 NOT_PROVIDED = object()\n4 \n5 \n6 class FieldCacheMixin:\n7     \"\"\"Provide an API for working with the model's fields value cache.\"\"\"\n8 \n9     def get_cache_name(self):\n10         raise NotImplementedError\n11 \n12     def get_cached_value(self, instance, default=NOT_PROVIDED):\n13         cache_name = self.get_cache_name()\n14         try:\n15             return instance._state.fields_cache[cache_name]\n16         except KeyError:\n17             if default is NOT_PROVIDED:\n18                 raise\n19             return default\n20 \n21     def is_cached(self, instance):\n22         return self.get_cache_name() in instance._state.fields_cache\n23 \n24     def set_cached_value(self, instance, value):\n25         instance._state.fields_cache[self.get_cache_name()] = value\n26 \n27     def delete_cached_value(self, instance):\n28         del instance._state.fields_cache[self.get_cache_name()]\n29 \n30 \n31 class CheckFieldDefaultMixin:\n32     _default_hint = ('<valid default>', '<invalid default>')\n33 \n34     def _check_default(self):\n35         if self.has_default() and self.default is not None and not callable(self.default):\n36             return [\n37                 checks.Warning(\n38                     \"%s default should be a callable instead of an instance \"\n39                     \"so that it's not shared between all field instances.\" % (\n40                         self.__class__.__name__,\n41                     ),\n42                     hint=(\n43                         'Use a callable instead, e.g., use `%s` instead of '\n44                         '`%s`.' % self._default_hint\n45                     ),\n46                     obj=self,\n47                     id='fields.E010',\n48                 )\n49             ]\n50         else:\n51             return []\n52 \n53     def check(self, **kwargs):\n54         errors = super().check(**kwargs)\n55         errors.extend(self._check_default())\n56         return errors\n",
        "intended_behavior": "This file likely contains mixins used by Django model fields. The code handling the caching of field values in instances, especially regarding ForeignKey fields, needs to ensure that upon copying a model instance, the field cache (`_state.fields_cache`) does not cause unintended sharing of related objects between the original and the copied instance. Specifically, the mechanism in place for caching related field objects should be adjusted or extended to clear or re-initialize the cache for copied instances, ensuring that changes to related fields on the copied instance do not affect the original instance's cached relations. This might involve modifying the mix-in to intercept copy operations and appropriately handle the fields cache."
    },
    {
        "rel_file_path": "django/db/models/query.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/db/models/query.py",
        "start": 1,
        "end": 1990,
        "class_name": null,
        "method_name": null,
        "code": "1 \"\"\"\n2 The main QuerySet implementation. This provides the public API for the ORM.\n3 \"\"\"\n4 \n5 import copy\n6 import operator\n7 import warnings\n8 from collections import namedtuple\n9 from functools import lru_cache\n10 from itertools import chain\n11 \n12 import django\n13 from django.conf import settings\n14 from django.core import exceptions\n15 from django.db import (\n16     DJANGO_VERSION_PICKLE_KEY, IntegrityError, NotSupportedError, connections,\n17     router, transaction,\n18 )\n19 from django.db.models import AutoField, DateField, DateTimeField, sql\n20 from django.db.models.constants import LOOKUP_SEP\n21 from django.db.models.deletion import Collector\n22 from django.db.models.expressions import Case, Expression, F, Value, When\n23 from django.db.models.functions import Cast, Trunc\n24 from django.db.models.query_utils import FilteredRelation, Q\n25 from django.db.models.sql.constants import CURSOR, GET_ITERATOR_CHUNK_SIZE\n26 from django.db.models.utils import resolve_callables\n27 from django.utils import timezone\n28 from django.utils.functional import cached_property, partition\n29 \n30 # The maximum number of results to fetch in a get() query.\n31 MAX_GET_RESULTS = 21\n32 \n33 # The maximum number of items to display in a QuerySet.__repr__\n34 REPR_OUTPUT_SIZE = 20\n35 \n36 \n37 class BaseIterable:\n38     def __init__(self, queryset, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE):\n39         self.queryset = queryset\n40         self.chunked_fetch = chunked_fetch\n41         self.chunk_size = chunk_size\n42 \n43 \n44 class ModelIterable(BaseIterable):\n45     \"\"\"Iterable that yields a model instance for each row.\"\"\"\n46 \n47     def __iter__(self):\n48         queryset = self.queryset\n49         db = queryset.db\n50         compiler = queryset.query.get_compiler(using=db)\n51         # Execute the query. This will also fill compiler.select, klass_info,\n52         # and annotations.\n53         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\n54         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,\n55                                                   compiler.annotation_col_map)\n56         model_cls = klass_info['model']\n57         select_fields = klass_info['select_fields']\n58         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1\n59         init_list = [f[0].target.attname\n60                      for f in select[model_fields_start:model_fields_end]]\n61         related_populators = get_related_populators(klass_info, select, db)\n62         known_related_objects = [\n63             (field, related_objs, operator.attrgetter(*[\n64                 field.attname\n65                 if from_field == 'self' else\n66                 queryset.model._meta.get_field(from_field).attname\n67                 for from_field in field.from_fields\n68             ])) for field, related_objs in queryset._known_related_objects.items()\n69         ]\n70         for row in compiler.results_iter(results):\n71             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])\n72             for rel_populator in related_populators:\n73                 rel_populator.populate(row, obj)\n74             if annotation_col_map:\n75                 for attr_name, col_pos in annotation_col_map.items():\n76                     setattr(obj, attr_name, row[col_pos])\n77 \n78             # Add the known related objects to the model.\n79             for field, rel_objs, rel_getter in known_related_objects:\n80                 # Avoid overwriting objects loaded by, e.g., select_related().\n81                 if field.is_cached(obj):\n82                     continue\n83                 rel_obj_id = rel_getter(obj)\n84                 try:\n85                     rel_obj = rel_objs[rel_obj_id]\n86                 except KeyError:\n87                     pass  # May happen in qs1 | qs2 scenarios.\n88                 else:\n89                     setattr(obj, field.name, rel_obj)\n90 \n91             yield obj\n92 \n93 \n94 class ValuesIterable(BaseIterable):\n95     \"\"\"\n96     Iterable returned by QuerySet.values() that yields a dict for each row.\n97     \"\"\"\n98 \n99     def __iter__(self):\n100         queryset = self.queryset\n101         query = queryset.query\n102         compiler = query.get_compiler(queryset.db)\n103 \n104         # extra(select=...) cols are always at the start of the row.\n105         names = [\n106             *query.extra_select,\n107             *query.values_select,\n108             *query.annotation_select,\n109         ]\n110         indexes = range(len(names))\n111         for row in compiler.results_iter(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size):\n112             yield {names[i]: row[i] for i in indexes}\n113 \n114 \n115 class ValuesListIterable(BaseIterable):\n116     \"\"\"\n117     Iterable returned by QuerySet.values_list(flat=False) that yields a tuple\n118     for each row.\n119     \"\"\"\n120 \n121     def __iter__(self):\n122         queryset = self.queryset\n123         query = queryset.query\n124         compiler = query.get_compiler(queryset.db)\n125 \n126         if queryset._fields:\n127             # extra(select=...) cols are always at the start of the row.\n128             names = [\n129                 *query.extra_select,\n130                 *query.values_select,\n131                 *query.annotation_select,\n132             ]\n133             fields = [*queryset._fields, *(f for f in query.annotation_select if f not in queryset._fields)]\n134             if fields != names:\n135                 # Reorder according to fields.\n136                 index_map = {name: idx for idx, name in enumerate(names)}\n137                 rowfactory = operator.itemgetter(*[index_map[f] for f in fields])\n138                 return map(\n139                     rowfactory,\n140                     compiler.results_iter(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\n141                 )\n142         return compiler.results_iter(tuple_expected=True, chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\n143 \n144 \n145 class NamedValuesListIterable(ValuesListIterable):\n146     \"\"\"\n147     Iterable returned by QuerySet.values_list(named=True) that yields a\n148     namedtuple for each row.\n149     \"\"\"\n150 \n151     @staticmethod\n152     @lru_cache()\n153     def create_namedtuple_class(*names):\n154         # Cache namedtuple() with @lru_cache() since it's too slow to be\n155         # called for every QuerySet evaluation.\n156         return namedtuple('Row', names)\n157 \n158     def __iter__(self):\n159         queryset = self.queryset\n160         if queryset._fields:\n161             names = queryset._fields\n162         else:\n163             query = queryset.query\n164             names = [*query.extra_select, *query.values_select, *query.annotation_select]\n165         tuple_class = self.create_namedtuple_class(*names)\n166         new = tuple.__new__\n167         for row in super().__iter__():\n168             yield new(tuple_class, row)\n169 \n170 \n171 class FlatValuesListIterable(BaseIterable):\n172     \"\"\"\n173     Iterable returned by QuerySet.values_list(flat=True) that yields single\n174     values.\n175     \"\"\"\n176 \n177     def __iter__(self):\n178         queryset = self.queryset\n179         compiler = queryset.query.get_compiler(queryset.db)\n180         for row in compiler.results_iter(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size):\n181             yield row[0]\n182 \n183 \n184 class QuerySet:\n185     \"\"\"Represent a lazy database lookup for a set of objects.\"\"\"\n186 \n187     def __init__(self, model=None, query=None, using=None, hints=None):\n188         self.model = model\n189         self._db = using\n190         self._hints = hints or {}\n191         self._query = query or sql.Query(self.model)\n192         self._result_cache = None\n193         self._sticky_filter = False\n194         self._for_write = False\n195         self._prefetch_related_lookups = ()\n196         self._prefetch_done = False\n197         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}\n198         self._iterable_class = ModelIterable\n199         self._fields = None\n200         self._defer_next_filter = False\n201         self._deferred_filter = None\n202 \n203     @property\n204     def query(self):\n205         if self._deferred_filter:\n206             negate, args, kwargs = self._deferred_filter\n207             self._filter_or_exclude_inplace(negate, args, kwargs)\n208             self._deferred_filter = None\n209         return self._query\n210 \n211     @query.setter\n212     def query(self, value):\n213         self._query = value\n214 \n215     def as_manager(cls):\n216         # Address the circular dependency between `Queryset` and `Manager`.\n217         from django.db.models.manager import Manager\n218         manager = Manager.from_queryset(cls)()\n219         manager._built_with_as_manager = True\n220         return manager\n221     as_manager.queryset_only = True\n222     as_manager = classmethod(as_manager)\n223 \n224     ########################\n225     # PYTHON MAGIC METHODS #\n226     ########################\n227 \n228     def __deepcopy__(self, memo):\n229         \"\"\"Don't populate the QuerySet's cache.\"\"\"\n230         obj = self.__class__()\n231         for k, v in self.__dict__.items():\n232             if k == '_result_cache':\n233                 obj.__dict__[k] = None\n234             else:\n235                 obj.__dict__[k] = copy.deepcopy(v, memo)\n236         return obj\n237 \n238     def __getstate__(self):\n239         # Force the cache to be fully populated.\n240         self._fetch_all()\n241         return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n242 \n243     def __setstate__(self, state):\n244         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)\n245         if pickled_version:\n246             if pickled_version != django.__version__:\n247                 warnings.warn(\n248                     \"Pickled queryset instance's Django version %s does not \"\n249                     \"match the current version %s.\"\n250                     % (pickled_version, django.__version__),\n251                     RuntimeWarning,\n252                     stacklevel=2,\n253                 )\n254         else:\n255             warnings.warn(\n256                 \"Pickled queryset instance's Django version is not specified.\",\n257                 RuntimeWarning,\n258                 stacklevel=2,\n259             )\n260         self.__dict__.update(state)\n261 \n262     def __repr__(self):\n263         data = list(self[:REPR_OUTPUT_SIZE + 1])\n264         if len(data) > REPR_OUTPUT_SIZE:\n265             data[-1] = \"...(remaining elements truncated)...\"\n266         return '<%s %r>' % (self.__class__.__name__, data)\n267 \n268     def __len__(self):\n269         self._fetch_all()\n270         return len(self._result_cache)\n271 \n272     def __iter__(self):\n273         \"\"\"\n274         The queryset iterator protocol uses three nested iterators in the\n275         default case:\n276             1. sql.compiler.execute_sql()\n277                - Returns 100 rows at time (constants.GET_ITERATOR_CHUNK_SIZE)\n278                  using cursor.fetchmany(). This part is responsible for\n279                  doing some column masking, and returning the rows in chunks.\n280             2. sql.compiler.results_iter()\n281                - Returns one row at time. At this point the rows are still just\n282                  tuples. In some cases the return values are converted to\n283                  Python values at this location.\n284             3. self.iterator()\n285                - Responsible for turning the rows into model objects.\n286         \"\"\"\n287         self._fetch_all()\n288         return iter(self._result_cache)\n289 \n290     def __bool__(self):\n291         self._fetch_all()\n292         return bool(self._result_cache)\n293 \n294     def __getitem__(self, k):\n295         \"\"\"Retrieve an item or slice from the set of results.\"\"\"\n296         if not isinstance(k, (int, slice)):\n297             raise TypeError(\n298                 'QuerySet indices must be integers or slices, not %s.'\n299                 % type(k).__name__\n300             )\n301         assert ((not isinstance(k, slice) and (k >= 0)) or\n302                 (isinstance(k, slice) and (k.start is None or k.start >= 0) and\n303                  (k.stop is None or k.stop >= 0))), \\\n304             \"Negative indexing is not supported.\"\n305 \n306         if self._result_cache is not None:\n307             return self._result_cache[k]\n308 \n309         if isinstance(k, slice):\n310             qs = self._chain()\n311             if k.start is not None:\n312                 start = int(k.start)\n313             else:\n314                 start = None\n315             if k.stop is not None:\n316                 stop = int(k.stop)\n317             else:\n318                 stop = None\n319             qs.query.set_limits(start, stop)\n320             return list(qs)[::k.step] if k.step else qs\n321 \n322         qs = self._chain()\n323         qs.query.set_limits(k, k + 1)\n324         qs._fetch_all()\n325         return qs._result_cache[0]\n326 \n327     def __class_getitem__(cls, *args, **kwargs):\n328         return cls\n329 \n330     def __and__(self, other):\n331         self._merge_sanity_check(other)\n332         if isinstance(other, EmptyQuerySet):\n333             return other\n334         if isinstance(self, EmptyQuerySet):\n335             return self\n336         combined = self._chain()\n337         combined._merge_known_related_objects(other)\n338         combined.query.combine(other.query, sql.AND)\n339         return combined\n340 \n341     def __or__(self, other):\n342         self._merge_sanity_check(other)\n343         if isinstance(self, EmptyQuerySet):\n344             return other\n345         if isinstance(other, EmptyQuerySet):\n346             return self\n347         query = self if self.query.can_filter() else self.model._base_manager.filter(pk__in=self.values('pk'))\n348         combined = query._chain()\n349         combined._merge_known_related_objects(other)\n350         if not other.query.can_filter():\n351             other = other.model._base_manager.filter(pk__in=other.values('pk'))\n352         combined.query.combine(other.query, sql.OR)\n353         return combined\n354 \n355     ####################################\n356     # METHODS THAT DO DATABASE QUERIES #\n357     ####################################\n358 \n359     def _iterator(self, use_chunked_fetch, chunk_size):\n360         yield from self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size)\n361 \n362     def iterator(self, chunk_size=2000):\n363         \"\"\"\n364         An iterator over the results from applying this QuerySet to the\n365         database.\n366         \"\"\"\n367         if chunk_size <= 0:\n368             raise ValueError('Chunk size must be strictly positive.')\n369         use_chunked_fetch = not connections[self.db].settings_dict.get('DISABLE_SERVER_SIDE_CURSORS')\n370         return self._iterator(use_chunked_fetch, chunk_size)\n371 \n372     def aggregate(self, *args, **kwargs):\n373         \"\"\"\n374         Return a dictionary containing the calculations (aggregation)\n375         over the current queryset.\n376 \n377         If args is present the expression is passed as a kwarg using\n378         the Aggregate object's default alias.\n379         \"\"\"\n380         if self.query.distinct_fields:\n381             raise NotImplementedError(\"aggregate() + distinct(fields) not implemented.\")\n382         self._validate_values_are_expressions((*args, *kwargs.values()), method_name='aggregate')\n383         for arg in args:\n384             # The default_alias property raises TypeError if default_alias\n385             # can't be set automatically or AttributeError if it isn't an\n386             # attribute.\n387             try:\n388                 arg.default_alias\n389             except (AttributeError, TypeError):\n390                 raise TypeError(\"Complex aggregates require an alias\")\n391             kwargs[arg.default_alias] = arg\n392 \n393         query = self.query.chain()\n394         for (alias, aggregate_expr) in kwargs.items():\n395             query.add_annotation(aggregate_expr, alias, is_summary=True)\n396             if not query.annotations[alias].contains_aggregate:\n397                 raise TypeError(\"%s is not an aggregate expression\" % alias)\n398         return query.get_aggregation(self.db, kwargs)\n399 \n400     def count(self):\n401         \"\"\"\n402         Perform a SELECT COUNT() and return the number of records as an\n403         integer.\n404 \n405         If the QuerySet is already fully cached, return the length of the\n406         cached results set to avoid multiple SELECT COUNT(*) calls.\n407         \"\"\"\n408         if self._result_cache is not None:\n409             return len(self._result_cache)\n410 \n411         return self.query.get_count(using=self.db)\n412 \n413     def get(self, *args, **kwargs):\n414         \"\"\"\n415         Perform the query and return a single object matching the given\n416         keyword arguments.\n417         \"\"\"\n418         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)\n419         if self.query.can_filter() and not self.query.distinct_fields:\n420             clone = clone.order_by()\n421         limit = None\n422         if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:\n423             limit = MAX_GET_RESULTS\n424             clone.query.set_limits(high=limit)\n425         num = len(clone)\n426         if num == 1:\n427             return clone._result_cache[0]\n428         if not num:\n429             raise self.model.DoesNotExist(\n430                 \"%s matching query does not exist.\" %\n431                 self.model._meta.object_name\n432             )\n433         raise self.model.MultipleObjectsReturned(\n434             'get() returned more than one %s -- it returned %s!' % (\n435                 self.model._meta.object_name,\n436                 num if not limit or num < limit else 'more than %s' % (limit - 1),\n437             )\n438         )\n439 \n440     def create(self, **kwargs):\n441         \"\"\"\n442         Create a new object with the given kwargs, saving it to the database\n443         and returning the created object.\n444         \"\"\"\n445         obj = self.model(**kwargs)\n446         self._for_write = True\n447         obj.save(force_insert=True, using=self.db)\n448         return obj\n449 \n450     def _populate_pk_values(self, objs):\n451         for obj in objs:\n452             if obj.pk is None:\n453                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)\n454 \n455     def bulk_create(self, objs, batch_size=None, ignore_conflicts=False):\n456         \"\"\"\n457         Insert each of the instances into the database. Do *not* call\n458         save() on each of the instances, do not send any pre/post_save\n459         signals, and do not set the primary key attribute if it is an\n460         autoincrement field (except if features.can_return_rows_from_bulk_insert=True).\n461         Multi-table models are not supported.\n462         \"\"\"\n463         # When you bulk insert you don't get the primary keys back (if it's an\n464         # autoincrement, except if can_return_rows_from_bulk_insert=True), so\n465         # you can't insert into the child tables which references this. There\n466         # are two workarounds:\n467         # 1) This could be implemented if you didn't have an autoincrement pk\n468         # 2) You could do it by doing O(n) normal inserts into the parent\n469         #    tables to get the primary keys back and then doing a single bulk\n470         #    insert into the childmost table.\n471         # We currently set the primary keys on the objects when using\n472         # PostgreSQL via the RETURNING ID clause. It should be possible for\n473         # Oracle as well, but the semantics for extracting the primary keys is\n474         # trickier so it's not done yet.\n475         assert batch_size is None or batch_size > 0\n476         # Check that the parents share the same concrete model with the our\n477         # model to detect the inheritance pattern ConcreteGrandParent ->\n478         # MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy\n479         # would not identify that case as involving multiple tables.\n480         for parent in self.model._meta.get_parent_list():\n481             if parent._meta.concrete_model is not self.model._meta.concrete_model:\n482                 raise ValueError(\"Can't bulk create a multi-table inherited model\")\n483         if not objs:\n484             return objs\n485         self._for_write = True\n486         connection = connections[self.db]\n487         opts = self.model._meta\n488         fields = opts.concrete_fields\n489         objs = list(objs)\n490         self._populate_pk_values(objs)\n491         with transaction.atomic(using=self.db, savepoint=False):\n492             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)\n493             if objs_with_pk:\n494                 returned_columns = self._batched_insert(\n495                     objs_with_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,\n496                 )\n497                 for obj_with_pk, results in zip(objs_with_pk, returned_columns):\n498                     for result, field in zip(results, opts.db_returning_fields):\n499                         if field != opts.pk:\n500                             setattr(obj_with_pk, field.attname, result)\n501                 for obj_with_pk in objs_with_pk:\n502                     obj_with_pk._state.adding = False\n503                     obj_with_pk._state.db = self.db\n504             if objs_without_pk:\n505                 fields = [f for f in fields if not isinstance(f, AutoField)]\n506                 returned_columns = self._batched_insert(\n507                     objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,\n508                 )\n509                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:\n510                     assert len(returned_columns) == len(objs_without_pk)\n511                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n512                     for result, field in zip(results, opts.db_returning_fields):\n513                         setattr(obj_without_pk, field.attname, result)\n514                     obj_without_pk._state.adding = False\n515                     obj_without_pk._state.db = self.db\n516 \n517         return objs\n518 \n519     def bulk_update(self, objs, fields, batch_size=None):\n520         \"\"\"\n521         Update the given fields in each of the given objects in the database.\n522         \"\"\"\n523         if batch_size is not None and batch_size < 0:\n524             raise ValueError('Batch size must be a positive integer.')\n525         if not fields:\n526             raise ValueError('Field names must be given to bulk_update().')\n527         objs = tuple(objs)\n528         if any(obj.pk is None for obj in objs):\n529             raise ValueError('All bulk_update() objects must have a primary key set.')\n530         fields = [self.model._meta.get_field(name) for name in fields]\n531         if any(not f.concrete or f.many_to_many for f in fields):\n532             raise ValueError('bulk_update() can only be used with concrete fields.')\n533         if any(f.primary_key for f in fields):\n534             raise ValueError('bulk_update() cannot be used with primary key fields.')\n535         if not objs:\n536             return\n537         # PK is used twice in the resulting update query, once in the filter\n538         # and once in the WHEN. Each field will also have one CAST.\n539         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)\n540         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size\n541         requires_casting = connections[self.db].features.requires_casted_case_in_updates\n542         batches = (objs[i:i + batch_size] for i in range(0, len(objs), batch_size))\n543         updates = []\n544         for batch_objs in batches:\n545             update_kwargs = {}\n546             for field in fields:\n547                 when_statements = []\n548                 for obj in batch_objs:\n549                     attr = getattr(obj, field.attname)\n550                     if not isinstance(attr, Expression):\n551                         attr = Value(attr, output_field=field)\n552                     when_statements.append(When(pk=obj.pk, then=attr))\n553                 case_statement = Case(*when_statements, output_field=field)\n554                 if requires_casting:\n555                     case_statement = Cast(case_statement, output_field=field)\n556                 update_kwargs[field.attname] = case_statement\n557             updates.append(([obj.pk for obj in batch_objs], update_kwargs))\n558         with transaction.atomic(using=self.db, savepoint=False):\n559             for pks, update_kwargs in updates:\n560                 self.filter(pk__in=pks).update(**update_kwargs)\n561     bulk_update.alters_data = True\n562 \n563     def get_or_create(self, defaults=None, **kwargs):\n564         \"\"\"\n565         Look up an object with the given kwargs, creating one if necessary.\n566         Return a tuple of (object, created), where created is a boolean\n567         specifying whether an object was created.\n568         \"\"\"\n569         # The get() needs to be targeted at the write database in order\n570         # to avoid potential transaction consistency problems.\n571         self._for_write = True\n572         try:\n573             return self.get(**kwargs), False\n574         except self.model.DoesNotExist:\n575             params = self._extract_model_params(defaults, **kwargs)\n576             return self._create_object_from_params(kwargs, params)\n577 \n578     def update_or_create(self, defaults=None, **kwargs):\n579         \"\"\"\n580         Look up an object with the given kwargs, updating one with defaults\n581         if it exists, otherwise create a new one.\n582         Return a tuple (object, created), where created is a boolean\n583         specifying whether an object was created.\n584         \"\"\"\n585         defaults = defaults or {}\n586         self._for_write = True\n587         with transaction.atomic(using=self.db):\n588             try:\n589                 obj = self.select_for_update().get(**kwargs)\n590             except self.model.DoesNotExist:\n591                 params = self._extract_model_params(defaults, **kwargs)\n592                 # Lock the row so that a concurrent update is blocked until\n593                 # after update_or_create() has performed its save.\n594                 obj, created = self._create_object_from_params(kwargs, params, lock=True)\n595                 if created:\n596                     return obj, created\n597             for k, v in resolve_callables(defaults):\n598                 setattr(obj, k, v)\n599             obj.save(using=self.db)\n600         return obj, False\n601 \n602     def _create_object_from_params(self, lookup, params, lock=False):\n603         \"\"\"\n604         Try to create an object using passed params. Used by get_or_create()\n605         and update_or_create().\n606         \"\"\"\n607         try:\n608             with transaction.atomic(using=self.db):\n609                 params = dict(resolve_callables(params))\n610                 obj = self.create(**params)\n611             return obj, True\n612         except IntegrityError:\n613             try:\n614                 qs = self.select_for_update() if lock else self\n615                 return qs.get(**lookup), False\n616             except self.model.DoesNotExist:\n617                 pass\n618             raise\n619 \n620     def _extract_model_params(self, defaults, **kwargs):\n621         \"\"\"\n622         Prepare `params` for creating a model instance based on the given\n623         kwargs; for use by get_or_create() and update_or_create().\n624         \"\"\"\n625         defaults = defaults or {}\n626         params = {k: v for k, v in kwargs.items() if LOOKUP_SEP not in k}\n627         params.update(defaults)\n628         property_names = self.model._meta._property_names\n629         invalid_params = []\n630         for param in params:\n631             try:\n632                 self.model._meta.get_field(param)\n633             except exceptions.FieldDoesNotExist:\n634                 # It's okay to use a model's property if it has a setter.\n635                 if not (param in property_names and getattr(self.model, param).fset):\n636                     invalid_params.append(param)\n637         if invalid_params:\n638             raise exceptions.FieldError(\n639                 \"Invalid field name(s) for model %s: '%s'.\" % (\n640                     self.model._meta.object_name,\n641                     \"', '\".join(sorted(invalid_params)),\n642                 ))\n643         return params\n644 \n645     def _earliest(self, *fields):\n646         \"\"\"\n647         Return the earliest object according to fields (if given) or by the\n648         model's Meta.get_latest_by.\n649         \"\"\"\n650         if fields:\n651             order_by = fields\n652         else:\n653             order_by = getattr(self.model._meta, 'get_latest_by')\n654             if order_by and not isinstance(order_by, (tuple, list)):\n655                 order_by = (order_by,)\n656         if order_by is None:\n657             raise ValueError(\n658                 \"earliest() and latest() require either fields as positional \"\n659                 \"arguments or 'get_latest_by' in the model's Meta.\"\n660             )\n661 \n662         assert not self.query.is_sliced, \\\n663             \"Cannot change a query once a slice has been taken.\"\n664         obj = self._chain()\n665         obj.query.set_limits(high=1)\n666         obj.query.clear_ordering(force_empty=True)\n667         obj.query.add_ordering(*order_by)\n668         return obj.get()\n669 \n670     def earliest(self, *fields):\n671         return self._earliest(*fields)\n672 \n673     def latest(self, *fields):\n674         return self.reverse()._earliest(*fields)\n675 \n676     def first(self):\n677         \"\"\"Return the first object of a query or None if no match is found.\"\"\"\n678         for obj in (self if self.ordered else self.order_by('pk'))[:1]:\n679             return obj\n680 \n681     def last(self):\n682         \"\"\"Return the last object of a query or None if no match is found.\"\"\"\n683         for obj in (self.reverse() if self.ordered else self.order_by('-pk'))[:1]:\n684             return obj\n685 \n686     def in_bulk(self, id_list=None, *, field_name='pk'):\n687         \"\"\"\n688         Return a dictionary mapping each of the given IDs to the object with\n689         that ID. If `id_list` isn't provided, evaluate the entire QuerySet.\n690         \"\"\"\n691         assert not self.query.is_sliced, \\\n692             \"Cannot use 'limit' or 'offset' with in_bulk\"\n693         opts = self.model._meta\n694         unique_fields = [\n695             constraint.fields[0]\n696             for constraint in opts.total_unique_constraints\n697             if len(constraint.fields) == 1\n698         ]\n699         if (\n700             field_name != 'pk' and\n701             not opts.get_field(field_name).unique and\n702             field_name not in unique_fields\n703         ):\n704             raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n705         if id_list is not None:\n706             if not id_list:\n707                 return {}\n708             filter_key = '{}__in'.format(field_name)\n709             batch_size = connections[self.db].features.max_query_params\n710             id_list = tuple(id_list)\n711             # If the database has a limit on the number of query parameters\n712             # (e.g. SQLite), retrieve objects in batches if necessary.\n713             if batch_size and batch_size < len(id_list):\n714                 qs = ()\n715                 for offset in range(0, len(id_list), batch_size):\n716                     batch = id_list[offset:offset + batch_size]\n717                     qs += tuple(self.filter(**{filter_key: batch}).order_by())\n718             else:\n719                 qs = self.filter(**{filter_key: id_list}).order_by()\n720         else:\n721             qs = self._chain()\n722         return {getattr(obj, field_name): obj for obj in qs}\n723 \n724     def delete(self):\n725         \"\"\"Delete the records in the current QuerySet.\"\"\"\n726         self._not_support_combined_queries('delete')\n727         assert not self.query.is_sliced, \\\n728             \"Cannot use 'limit' or 'offset' with delete.\"\n729 \n730         if self._fields is not None:\n731             raise TypeError(\"Cannot call delete() after .values() or .values_list()\")\n732 \n733         del_query = self._chain()\n734 \n735         # The delete is actually 2 queries - one to find related objects,\n736         # and one to delete. Make sure that the discovery of related\n737         # objects is performed on the same database as the deletion.\n738         del_query._for_write = True\n739 \n740         # Disable non-supported fields.\n741         del_query.query.select_for_update = False\n742         del_query.query.select_related = False\n743         del_query.query.clear_ordering(force_empty=True)\n744 \n745         collector = Collector(using=del_query.db)\n746         collector.collect(del_query)\n747         deleted, _rows_count = collector.delete()\n748 \n749         # Clear the result cache, in case this QuerySet gets reused.\n750         self._result_cache = None\n751         return deleted, _rows_count\n752 \n753     delete.alters_data = True\n754     delete.queryset_only = True\n755 \n756     def _raw_delete(self, using):\n757         \"\"\"\n758         Delete objects found from the given queryset in single direct SQL\n759         query. No signals are sent and there is no protection for cascades.\n760         \"\"\"\n761         query = self.query.clone()\n762         query.__class__ = sql.DeleteQuery\n763         cursor = query.get_compiler(using).execute_sql(CURSOR)\n764         if cursor:\n765             with cursor:\n766                 return cursor.rowcount\n767         return 0\n768     _raw_delete.alters_data = True\n769 \n770     def update(self, **kwargs):\n771         \"\"\"\n772         Update all elements in the current QuerySet, setting all the given\n773         fields to the appropriate values.\n774         \"\"\"\n775         self._not_support_combined_queries('update')\n776         assert not self.query.is_sliced, \\\n777             \"Cannot update a query once a slice has been taken.\"\n778         self._for_write = True\n779         query = self.query.chain(sql.UpdateQuery)\n780         query.add_update_values(kwargs)\n781         # Clear any annotations so that they won't be present in subqueries.\n782         query.annotations = {}\n783         with transaction.mark_for_rollback_on_error(using=self.db):\n784             rows = query.get_compiler(self.db).execute_sql(CURSOR)\n785         self._result_cache = None\n786         return rows\n787     update.alters_data = True\n788 \n789     def _update(self, values):\n790         \"\"\"\n791         A version of update() that accepts field objects instead of field names.\n792         Used primarily for model saving and not intended for use by general\n793         code (it requires too much poking around at model internals to be\n794         useful at that level).\n795         \"\"\"\n796         assert not self.query.is_sliced, \\\n797             \"Cannot update a query once a slice has been taken.\"\n798         query = self.query.chain(sql.UpdateQuery)\n799         query.add_update_fields(values)\n800         # Clear any annotations so that they won't be present in subqueries.\n801         query.annotations = {}\n802         self._result_cache = None\n803         return query.get_compiler(self.db).execute_sql(CURSOR)\n804     _update.alters_data = True\n805     _update.queryset_only = False\n806 \n807     def exists(self):\n808         if self._result_cache is None:\n809             return self.query.has_results(using=self.db)\n810         return bool(self._result_cache)\n811 \n812     def _prefetch_related_objects(self):\n813         # This method can only be called once the result cache has been filled.\n814         prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups)\n815         self._prefetch_done = True\n816 \n817     def explain(self, *, format=None, **options):\n818         return self.query.explain(using=self.db, format=format, **options)\n819 \n820     ##################################################\n821     # PUBLIC METHODS THAT RETURN A QUERYSET SUBCLASS #\n822     ##################################################\n823 \n824     def raw(self, raw_query, params=None, translations=None, using=None):\n825         if using is None:\n826             using = self.db\n827         qs = RawQuerySet(raw_query, model=self.model, params=params, translations=translations, using=using)\n828         qs._prefetch_related_lookups = self._prefetch_related_lookups[:]\n829         return qs\n830 \n831     def _values(self, *fields, **expressions):\n832         clone = self._chain()\n833         if expressions:\n834             clone = clone.annotate(**expressions)\n835         clone._fields = fields\n836         clone.query.set_values(fields)\n837         return clone\n838 \n839     def values(self, *fields, **expressions):\n840         fields += tuple(expressions)\n841         clone = self._values(*fields, **expressions)\n842         clone._iterable_class = ValuesIterable\n843         return clone\n844 \n845     def values_list(self, *fields, flat=False, named=False):\n846         if flat and named:\n847             raise TypeError(\"'flat' and 'named' can't be used together.\")\n848         if flat and len(fields) > 1:\n849             raise TypeError(\"'flat' is not valid when values_list is called with more than one field.\")\n850 \n851         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}\n852         _fields = []\n853         expressions = {}\n854         counter = 1\n855         for field in fields:\n856             if hasattr(field, 'resolve_expression'):\n857                 field_id_prefix = getattr(field, 'default_alias', field.__class__.__name__.lower())\n858                 while True:\n859                     field_id = field_id_prefix + str(counter)\n860                     counter += 1\n861                     if field_id not in field_names:\n862                         break\n863                 expressions[field_id] = field\n864                 _fields.append(field_id)\n865             else:\n866                 _fields.append(field)\n867 \n868         clone = self._values(*_fields, **expressions)\n869         clone._iterable_class = (\n870             NamedValuesListIterable if named\n871             else FlatValuesListIterable if flat\n872             else ValuesListIterable\n873         )\n874         return clone\n875 \n876     def dates(self, field_name, kind, order='ASC'):\n877         \"\"\"\n878         Return a list of date objects representing all available dates for\n879         the given field_name, scoped to 'kind'.\n880         \"\"\"\n881         assert kind in ('year', 'month', 'week', 'day'), \\\n882             \"'kind' must be one of 'year', 'month', 'week', or 'day'.\"\n883         assert order in ('ASC', 'DESC'), \\\n884             \"'order' must be either 'ASC' or 'DESC'.\"\n885         return self.annotate(\n886             datefield=Trunc(field_name, kind, output_field=DateField()),\n887             plain_field=F(field_name)\n888         ).values_list(\n889             'datefield', flat=True\n890         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datefield')\n891 \n892     def datetimes(self, field_name, kind, order='ASC', tzinfo=None, is_dst=None):\n893         \"\"\"\n894         Return a list of datetime objects representing all available\n895         datetimes for the given field_name, scoped to 'kind'.\n896         \"\"\"\n897         assert kind in ('year', 'month', 'week', 'day', 'hour', 'minute', 'second'), \\\n898             \"'kind' must be one of 'year', 'month', 'week', 'day', 'hour', 'minute', or 'second'.\"\n899         assert order in ('ASC', 'DESC'), \\\n900             \"'order' must be either 'ASC' or 'DESC'.\"\n901         if settings.USE_TZ:\n902             if tzinfo is None:\n903                 tzinfo = timezone.get_current_timezone()\n904         else:\n905             tzinfo = None\n906         return self.annotate(\n907             datetimefield=Trunc(\n908                 field_name,\n909                 kind,\n910                 output_field=DateTimeField(),\n911                 tzinfo=tzinfo,\n912                 is_dst=is_dst,\n913             ),\n914             plain_field=F(field_name)\n915         ).values_list(\n916             'datetimefield', flat=True\n917         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datetimefield')\n918 \n919     def none(self):\n920         \"\"\"Return an empty QuerySet.\"\"\"\n921         clone = self._chain()\n922         clone.query.set_empty()\n923         return clone\n924 \n925     ##################################################################\n926     # PUBLIC METHODS THAT ALTER ATTRIBUTES AND RETURN A NEW QUERYSET #\n927     ##################################################################\n928 \n929     def all(self):\n930         \"\"\"\n931         Return a new QuerySet that is a copy of the current one. This allows a\n932         QuerySet to proxy for a model manager in some cases.\n933         \"\"\"\n934         return self._chain()\n935 \n936     def filter(self, *args, **kwargs):\n937         \"\"\"\n938         Return a new QuerySet instance with the args ANDed to the existing\n939         set.\n940         \"\"\"\n941         self._not_support_combined_queries('filter')\n942         return self._filter_or_exclude(False, args, kwargs)\n943 \n944     def exclude(self, *args, **kwargs):\n945         \"\"\"\n946         Return a new QuerySet instance with NOT (args) ANDed to the existing\n947         set.\n948         \"\"\"\n949         self._not_support_combined_queries('exclude')\n950         return self._filter_or_exclude(True, args, kwargs)\n951 \n952     def _filter_or_exclude(self, negate, args, kwargs):\n953         if args or kwargs:\n954             assert not self.query.is_sliced, \\\n955                 \"Cannot filter a query once a slice has been taken.\"\n956 \n957         clone = self._chain()\n958         if self._defer_next_filter:\n959             self._defer_next_filter = False\n960             clone._deferred_filter = negate, args, kwargs\n961         else:\n962             clone._filter_or_exclude_inplace(negate, args, kwargs)\n963         return clone\n964 \n965     def _filter_or_exclude_inplace(self, negate, args, kwargs):\n966         if negate:\n967             self._query.add_q(~Q(*args, **kwargs))\n968         else:\n969             self._query.add_q(Q(*args, **kwargs))\n970 \n971     def complex_filter(self, filter_obj):\n972         \"\"\"\n973         Return a new QuerySet instance with filter_obj added to the filters.\n974 \n975         filter_obj can be a Q object or a dictionary of keyword lookup\n976         arguments.\n977 \n978         This exists to support framework features such as 'limit_choices_to',\n979         and usually it will be more natural to use other methods.\n980         \"\"\"\n981         if isinstance(filter_obj, Q):\n982             clone = self._chain()\n983             clone.query.add_q(filter_obj)\n984             return clone\n985         else:\n986             return self._filter_or_exclude(False, args=(), kwargs=filter_obj)\n987 \n988     def _combinator_query(self, combinator, *other_qs, all=False):\n989         # Clone the query to inherit the select list and everything\n990         clone = self._chain()\n991         # Clear limits and ordering so they can be reapplied\n992         clone.query.clear_ordering(True)\n993         clone.query.clear_limits()\n994         clone.query.combined_queries = (self.query,) + tuple(qs.query for qs in other_qs)\n995         clone.query.combinator = combinator\n996         clone.query.combinator_all = all\n997         return clone\n998 \n999     def union(self, *other_qs, all=False):\n1000         # If the query is an EmptyQuerySet, combine all nonempty querysets.\n1001         if isinstance(self, EmptyQuerySet):\n1002             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n1003             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n1004         return self._combinator_query('union', *other_qs, all=all)\n1005 \n1006     def intersection(self, *other_qs):\n1007         # If any query is an EmptyQuerySet, return it.\n1008         if isinstance(self, EmptyQuerySet):\n1009             return self\n1010         for other in other_qs:\n1011             if isinstance(other, EmptyQuerySet):\n1012                 return other\n1013         return self._combinator_query('intersection', *other_qs)\n1014 \n1015     def difference(self, *other_qs):\n1016         # If the query is an EmptyQuerySet, return it.\n1017         if isinstance(self, EmptyQuerySet):\n1018             return self\n1019         return self._combinator_query('difference', *other_qs)\n1020 \n1021     def select_for_update(self, nowait=False, skip_locked=False, of=(), no_key=False):\n1022         \"\"\"\n1023         Return a new QuerySet instance that will select objects with a\n1024         FOR UPDATE lock.\n1025         \"\"\"\n1026         if nowait and skip_locked:\n1027             raise ValueError('The nowait option cannot be used with skip_locked.')\n1028         obj = self._chain()\n1029         obj._for_write = True\n1030         obj.query.select_for_update = True\n1031         obj.query.select_for_update_nowait = nowait\n1032         obj.query.select_for_update_skip_locked = skip_locked\n1033         obj.query.select_for_update_of = of\n1034         obj.query.select_for_no_key_update = no_key\n1035         return obj\n1036 \n1037     def select_related(self, *fields):\n1038         \"\"\"\n1039         Return a new QuerySet instance that will select related objects.\n1040 \n1041         If fields are specified, they must be ForeignKey fields and only those\n1042         related objects are included in the selection.\n1043 \n1044         If select_related(None) is called, clear the list.\n1045         \"\"\"\n1046         self._not_support_combined_queries('select_related')\n1047         if self._fields is not None:\n1048             raise TypeError(\"Cannot call select_related() after .values() or .values_list()\")\n1049 \n1050         obj = self._chain()\n1051         if fields == (None,):\n1052             obj.query.select_related = False\n1053         elif fields:\n1054             obj.query.add_select_related(fields)\n1055         else:\n1056             obj.query.select_related = True\n1057         return obj\n1058 \n1059     def prefetch_related(self, *lookups):\n1060         \"\"\"\n1061         Return a new QuerySet instance that will prefetch the specified\n1062         Many-To-One and Many-To-Many related objects when the QuerySet is\n1063         evaluated.\n1064 \n1065         When prefetch_related() is called more than once, append to the list of\n1066         prefetch lookups. If prefetch_related(None) is called, clear the list.\n1067         \"\"\"\n1068         self._not_support_combined_queries('prefetch_related')\n1069         clone = self._chain()\n1070         if lookups == (None,):\n1071             clone._prefetch_related_lookups = ()\n1072         else:\n1073             for lookup in lookups:\n1074                 if isinstance(lookup, Prefetch):\n1075                     lookup = lookup.prefetch_to\n1076                 lookup = lookup.split(LOOKUP_SEP, 1)[0]\n1077                 if lookup in self.query._filtered_relations:\n1078                     raise ValueError('prefetch_related() is not supported with FilteredRelation.')\n1079             clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups\n1080         return clone\n1081 \n1082     def annotate(self, *args, **kwargs):\n1083         \"\"\"\n1084         Return a query set in which the returned objects have been annotated\n1085         with extra data or aggregations.\n1086         \"\"\"\n1087         self._not_support_combined_queries('annotate')\n1088         return self._annotate(args, kwargs, select=True)\n1089 \n1090     def alias(self, *args, **kwargs):\n1091         \"\"\"\n1092         Return a query set with added aliases for extra data or aggregations.\n1093         \"\"\"\n1094         self._not_support_combined_queries('alias')\n1095         return self._annotate(args, kwargs, select=False)\n1096 \n1097     def _annotate(self, args, kwargs, select=True):\n1098         self._validate_values_are_expressions(args + tuple(kwargs.values()), method_name='annotate')\n1099         annotations = {}\n1100         for arg in args:\n1101             # The default_alias property may raise a TypeError.\n1102             try:\n1103                 if arg.default_alias in kwargs:\n1104                     raise ValueError(\"The named annotation '%s' conflicts with the \"\n1105                                      \"default name for another annotation.\"\n1106                                      % arg.default_alias)\n1107             except TypeError:\n1108                 raise TypeError(\"Complex annotations require an alias\")\n1109             annotations[arg.default_alias] = arg\n1110         annotations.update(kwargs)\n1111 \n1112         clone = self._chain()\n1113         names = self._fields\n1114         if names is None:\n1115             names = set(chain.from_iterable(\n1116                 (field.name, field.attname) if hasattr(field, 'attname') else (field.name,)\n1117                 for field in self.model._meta.get_fields()\n1118             ))\n1119 \n1120         for alias, annotation in annotations.items():\n1121             if alias in names:\n1122                 raise ValueError(\"The annotation '%s' conflicts with a field on \"\n1123                                  \"the model.\" % alias)\n1124             if isinstance(annotation, FilteredRelation):\n1125                 clone.query.add_filtered_relation(annotation, alias)\n1126             else:\n1127                 clone.query.add_annotation(\n1128                     annotation, alias, is_summary=False, select=select,\n1129                 )\n1130         for alias, annotation in clone.query.annotations.items():\n1131             if alias in annotations and annotation.contains_aggregate:\n1132                 if clone._fields is None:\n1133                     clone.query.group_by = True\n1134                 else:\n1135                     clone.query.set_group_by()\n1136                 break\n1137 \n1138         return clone\n1139 \n1140     def order_by(self, *field_names):\n1141         \"\"\"Return a new QuerySet instance with the ordering changed.\"\"\"\n1142         assert not self.query.is_sliced, \\\n1143             \"Cannot reorder a query once a slice has been taken.\"\n1144         obj = self._chain()\n1145         obj.query.clear_ordering(force_empty=False)\n1146         obj.query.add_ordering(*field_names)\n1147         return obj\n1148 \n1149     def distinct(self, *field_names):\n1150         \"\"\"\n1151         Return a new QuerySet instance that will select only distinct results.\n1152         \"\"\"\n1153         self._not_support_combined_queries('distinct')\n1154         assert not self.query.is_sliced, \\\n1155             \"Cannot create distinct fields once a slice has been taken.\"\n1156         obj = self._chain()\n1157         obj.query.add_distinct_fields(*field_names)\n1158         return obj\n1159 \n1160     def extra(self, select=None, where=None, params=None, tables=None,\n1161               order_by=None, select_params=None):\n1162         \"\"\"Add extra SQL fragments to the query.\"\"\"\n1163         self._not_support_combined_queries('extra')\n1164         assert not self.query.is_sliced, \\\n1165             \"Cannot change a query once a slice has been taken\"\n1166         clone = self._chain()\n1167         clone.query.add_extra(select, select_params, where, params, tables, order_by)\n1168         return clone\n1169 \n1170     def reverse(self):\n1171         \"\"\"Reverse the ordering of the QuerySet.\"\"\"\n1172         if self.query.is_sliced:\n1173             raise TypeError('Cannot reverse a query once a slice has been taken.')\n1174         clone = self._chain()\n1175         clone.query.standard_ordering = not clone.query.standard_ordering\n1176         return clone\n1177 \n1178     def defer(self, *fields):\n1179         \"\"\"\n1180         Defer the loading of data for certain fields until they are accessed.\n1181         Add the set of deferred fields to any existing set of deferred fields.\n1182         The only exception to this is if None is passed in as the only\n1183         parameter, in which case removal all deferrals.\n1184         \"\"\"\n1185         self._not_support_combined_queries('defer')\n1186         if self._fields is not None:\n1187             raise TypeError(\"Cannot call defer() after .values() or .values_list()\")\n1188         clone = self._chain()\n1189         if fields == (None,):\n1190             clone.query.clear_deferred_loading()\n1191         else:\n1192             clone.query.add_deferred_loading(fields)\n1193         return clone\n1194 \n1195     def only(self, *fields):\n1196         \"\"\"\n1197         Essentially, the opposite of defer(). Only the fields passed into this\n1198         method and that are not already specified as deferred are loaded\n1199         immediately when the queryset is evaluated.\n1200         \"\"\"\n1201         self._not_support_combined_queries('only')\n1202         if self._fields is not None:\n1203             raise TypeError(\"Cannot call only() after .values() or .values_list()\")\n1204         if fields == (None,):\n1205             # Can only pass None to defer(), not only(), as the rest option.\n1206             # That won't stop people trying to do this, so let's be explicit.\n1207             raise TypeError(\"Cannot pass None as an argument to only().\")\n1208         for field in fields:\n1209             field = field.split(LOOKUP_SEP, 1)[0]\n1210             if field in self.query._filtered_relations:\n1211                 raise ValueError('only() is not supported with FilteredRelation.')\n1212         clone = self._chain()\n1213         clone.query.add_immediate_loading(fields)\n1214         return clone\n1215 \n1216     def using(self, alias):\n1217         \"\"\"Select which database this QuerySet should execute against.\"\"\"\n1218         clone = self._chain()\n1219         clone._db = alias\n1220         return clone\n1221 \n1222     ###################################\n1223     # PUBLIC INTROSPECTION ATTRIBUTES #\n1224     ###################################\n1225 \n1226     @property\n1227     def ordered(self):\n1228         \"\"\"\n1229         Return True if the QuerySet is ordered -- i.e. has an order_by()\n1230         clause or a default ordering on the model (or is empty).\n1231         \"\"\"\n1232         if isinstance(self, EmptyQuerySet):\n1233             return True\n1234         if self.query.extra_order_by or self.query.order_by:\n1235             return True\n1236         elif self.query.default_ordering and self.query.get_meta().ordering:\n1237             return True\n1238         else:\n1239             return False\n1240 \n1241     @property\n1242     def db(self):\n1243         \"\"\"Return the database used if this query is executed now.\"\"\"\n1244         if self._for_write:\n1245             return self._db or router.db_for_write(self.model, **self._hints)\n1246         return self._db or router.db_for_read(self.model, **self._hints)\n1247 \n1248     ###################\n1249     # PRIVATE METHODS #\n1250     ###################\n1251 \n1252     def _insert(self, objs, fields, returning_fields=None, raw=False, using=None, ignore_conflicts=False):\n1253         \"\"\"\n1254         Insert a new record for the given model. This provides an interface to\n1255         the InsertQuery class and is how Model.save() is implemented.\n1256         \"\"\"\n1257         self._for_write = True\n1258         if using is None:\n1259             using = self.db\n1260         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)\n1261         query.insert_values(fields, objs, raw=raw)\n1262         return query.get_compiler(using=using).execute_sql(returning_fields)\n1263     _insert.alters_data = True\n1264     _insert.queryset_only = False\n1265 \n1266     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):\n1267         \"\"\"\n1268         Helper method for bulk_create() to insert objs one batch at a time.\n1269         \"\"\"\n1270         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:\n1271             raise NotSupportedError('This database backend does not support ignoring conflicts.')\n1272         ops = connections[self.db].ops\n1273         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)\n1274         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size\n1275         inserted_rows = []\n1276         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert\n1277         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:\n1278             if bulk_return and not ignore_conflicts:\n1279                 inserted_rows.extend(self._insert(\n1280                     item, fields=fields, using=self.db,\n1281                     returning_fields=self.model._meta.db_returning_fields,\n1282                     ignore_conflicts=ignore_conflicts,\n1283                 ))\n1284             else:\n1285                 self._insert(item, fields=fields, using=self.db, ignore_conflicts=ignore_conflicts)\n1286         return inserted_rows\n1287 \n1288     def _chain(self, **kwargs):\n1289         \"\"\"\n1290         Return a copy of the current QuerySet that's ready for another\n1291         operation.\n1292         \"\"\"\n1293         obj = self._clone()\n1294         if obj._sticky_filter:\n1295             obj.query.filter_is_sticky = True\n1296             obj._sticky_filter = False\n1297         obj.__dict__.update(kwargs)\n1298         return obj\n1299 \n1300     def _clone(self):\n1301         \"\"\"\n1302         Return a copy of the current QuerySet. A lightweight alternative\n1303         to deepcopy().\n1304         \"\"\"\n1305         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)\n1306         c._sticky_filter = self._sticky_filter\n1307         c._for_write = self._for_write\n1308         c._prefetch_related_lookups = self._prefetch_related_lookups[:]\n1309         c._known_related_objects = self._known_related_objects\n1310         c._iterable_class = self._iterable_class\n1311         c._fields = self._fields\n1312         return c\n1313 \n1314     def _fetch_all(self):\n1315         if self._result_cache is None:\n1316             self._result_cache = list(self._iterable_class(self))\n1317         if self._prefetch_related_lookups and not self._prefetch_done:\n1318             self._prefetch_related_objects()\n1319 \n1320     def _next_is_sticky(self):\n1321         \"\"\"\n1322         Indicate that the next filter call and the one following that should\n1323         be treated as a single filter. This is only important when it comes to\n1324         determining when to reuse tables for many-to-many filters. Required so\n1325         that we can filter naturally on the results of related managers.\n1326 \n1327         This doesn't return a clone of the current QuerySet (it returns\n1328         \"self\"). The method is only used internally and should be immediately\n1329         followed by a filter() that does create a clone.\n1330         \"\"\"\n1331         self._sticky_filter = True\n1332         return self\n1333 \n1334     def _merge_sanity_check(self, other):\n1335         \"\"\"Check that two QuerySet classes may be merged.\"\"\"\n1336         if self._fields is not None and (\n1337                 set(self.query.values_select) != set(other.query.values_select) or\n1338                 set(self.query.extra_select) != set(other.query.extra_select) or\n1339                 set(self.query.annotation_select) != set(other.query.annotation_select)):\n1340             raise TypeError(\n1341                 \"Merging '%s' classes must involve the same values in each case.\"\n1342                 % self.__class__.__name__\n1343             )\n1344 \n1345     def _merge_known_related_objects(self, other):\n1346         \"\"\"\n1347         Keep track of all known related objects from either QuerySet instance.\n1348         \"\"\"\n1349         for field, objects in other._known_related_objects.items():\n1350             self._known_related_objects.setdefault(field, {}).update(objects)\n1351 \n1352     def resolve_expression(self, *args, **kwargs):\n1353         if self._fields and len(self._fields) > 1:\n1354             # values() queryset can only be used as nested queries\n1355             # if they are set up to select only a single field.\n1356             raise TypeError('Cannot use multi-field values as a filter value.')\n1357         query = self.query.resolve_expression(*args, **kwargs)\n1358         query._db = self._db\n1359         return query\n1360     resolve_expression.queryset_only = True\n1361 \n1362     def _add_hints(self, **hints):\n1363         \"\"\"\n1364         Update hinting information for use by routers. Add new key/values or\n1365         overwrite existing key/values.\n1366         \"\"\"\n1367         self._hints.update(hints)\n1368 \n1369     def _has_filters(self):\n1370         \"\"\"\n1371         Check if this QuerySet has any filtering going on. This isn't\n1372         equivalent with checking if all objects are present in results, for\n1373         example, qs[1:]._has_filters() -> False.\n1374         \"\"\"\n1375         return self.query.has_filters()\n1376 \n1377     @staticmethod\n1378     def _validate_values_are_expressions(values, method_name):\n1379         invalid_args = sorted(str(arg) for arg in values if not hasattr(arg, 'resolve_expression'))\n1380         if invalid_args:\n1381             raise TypeError(\n1382                 'QuerySet.%s() received non-expression(s): %s.' % (\n1383                     method_name,\n1384                     ', '.join(invalid_args),\n1385                 )\n1386             )\n1387 \n1388     def _not_support_combined_queries(self, operation_name):\n1389         if self.query.combinator:\n1390             raise NotSupportedError(\n1391                 'Calling QuerySet.%s() after %s() is not supported.'\n1392                 % (operation_name, self.query.combinator)\n1393             )\n1394 \n1395 \n1396 class InstanceCheckMeta(type):\n1397     def __instancecheck__(self, instance):\n1398         return isinstance(instance, QuerySet) and instance.query.is_empty()\n1399 \n1400 \n1401 class EmptyQuerySet(metaclass=InstanceCheckMeta):\n1402     \"\"\"\n1403     Marker class to checking if a queryset is empty by .none():\n1404         isinstance(qs.none(), EmptyQuerySet) -> True\n1405     \"\"\"\n1406 \n1407     def __init__(self, *args, **kwargs):\n1408         raise TypeError(\"EmptyQuerySet can't be instantiated\")\n1409 \n1410 \n1411 class RawQuerySet:\n1412     \"\"\"\n1413     Provide an iterator which converts the results of raw SQL queries into\n1414     annotated model instances.\n1415     \"\"\"\n1416     def __init__(self, raw_query, model=None, query=None, params=None,\n1417                  translations=None, using=None, hints=None):\n1418         self.raw_query = raw_query\n1419         self.model = model\n1420         self._db = using\n1421         self._hints = hints or {}\n1422         self.query = query or sql.RawQuery(sql=raw_query, using=self.db, params=params)\n1423         self.params = params or ()\n1424         self.translations = translations or {}\n1425         self._result_cache = None\n1426         self._prefetch_related_lookups = ()\n1427         self._prefetch_done = False\n1428 \n1429     def resolve_model_init_order(self):\n1430         \"\"\"Resolve the init field names and value positions.\"\"\"\n1431         converter = connections[self.db].introspection.identifier_converter\n1432         model_init_fields = [f for f in self.model._meta.fields if converter(f.column) in self.columns]\n1433         annotation_fields = [(column, pos) for pos, column in enumerate(self.columns)\n1434                              if column not in self.model_fields]\n1435         model_init_order = [self.columns.index(converter(f.column)) for f in model_init_fields]\n1436         model_init_names = [f.attname for f in model_init_fields]\n1437         return model_init_names, model_init_order, annotation_fields\n1438 \n1439     def prefetch_related(self, *lookups):\n1440         \"\"\"Same as QuerySet.prefetch_related()\"\"\"\n1441         clone = self._clone()\n1442         if lookups == (None,):\n1443             clone._prefetch_related_lookups = ()\n1444         else:\n1445             clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups\n1446         return clone\n1447 \n1448     def _prefetch_related_objects(self):\n1449         prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups)\n1450         self._prefetch_done = True\n1451 \n1452     def _clone(self):\n1453         \"\"\"Same as QuerySet._clone()\"\"\"\n1454         c = self.__class__(\n1455             self.raw_query, model=self.model, query=self.query, params=self.params,\n1456             translations=self.translations, using=self._db, hints=self._hints\n1457         )\n1458         c._prefetch_related_lookups = self._prefetch_related_lookups[:]\n1459         return c\n1460 \n1461     def _fetch_all(self):\n1462         if self._result_cache is None:\n1463             self._result_cache = list(self.iterator())\n1464         if self._prefetch_related_lookups and not self._prefetch_done:\n1465             self._prefetch_related_objects()\n1466 \n1467     def __len__(self):\n1468         self._fetch_all()\n1469         return len(self._result_cache)\n1470 \n1471     def __bool__(self):\n1472         self._fetch_all()\n1473         return bool(self._result_cache)\n1474 \n1475     def __iter__(self):\n1476         self._fetch_all()\n1477         return iter(self._result_cache)\n1478 \n1479     def iterator(self):\n1480         # Cache some things for performance reasons outside the loop.\n1481         db = self.db\n1482         compiler = connections[db].ops.compiler('SQLCompiler')(\n1483             self.query, connections[db], db\n1484         )\n1485 \n1486         query = iter(self.query)\n1487 \n1488         try:\n1489             model_init_names, model_init_pos, annotation_fields = self.resolve_model_init_order()\n1490             if self.model._meta.pk.attname not in model_init_names:\n1491                 raise exceptions.FieldDoesNotExist(\n1492                     'Raw query must include the primary key'\n1493                 )\n1494             model_cls = self.model\n1495             fields = [self.model_fields.get(c) for c in self.columns]\n1496             converters = compiler.get_converters([\n1497                 f.get_col(f.model._meta.db_table) if f else None for f in fields\n1498             ])\n1499             if converters:\n1500                 query = compiler.apply_converters(query, converters)\n1501             for values in query:\n1502                 # Associate fields to values\n1503                 model_init_values = [values[pos] for pos in model_init_pos]\n1504                 instance = model_cls.from_db(db, model_init_names, model_init_values)\n1505                 if annotation_fields:\n1506                     for column, pos in annotation_fields:\n1507                         setattr(instance, column, values[pos])\n1508                 yield instance\n1509         finally:\n1510             # Done iterating the Query. If it has its own cursor, close it.\n1511             if hasattr(self.query, 'cursor') and self.query.cursor:\n1512                 self.query.cursor.close()\n1513 \n1514     def __repr__(self):\n1515         return \"<%s: %s>\" % (self.__class__.__name__, self.query)\n1516 \n1517     def __getitem__(self, k):\n1518         return list(self)[k]\n1519 \n1520     @property\n1521     def db(self):\n1522         \"\"\"Return the database used if this query is executed now.\"\"\"\n1523         return self._db or router.db_for_read(self.model, **self._hints)\n1524 \n1525     def using(self, alias):\n1526         \"\"\"Select the database this RawQuerySet should execute against.\"\"\"\n1527         return RawQuerySet(\n1528             self.raw_query, model=self.model,\n1529             query=self.query.chain(using=alias),\n1530             params=self.params, translations=self.translations,\n1531             using=alias,\n1532         )\n1533 \n1534     @cached_property\n1535     def columns(self):\n1536         \"\"\"\n1537         A list of model field names in the order they'll appear in the\n1538         query results.\n1539         \"\"\"\n1540         columns = self.query.get_columns()\n1541         # Adjust any column names which don't match field names\n1542         for (query_name, model_name) in self.translations.items():\n1543             # Ignore translations for nonexistent column names\n1544             try:\n1545                 index = columns.index(query_name)\n1546             except ValueError:\n1547                 pass\n1548             else:\n1549                 columns[index] = model_name\n1550         return columns\n1551 \n1552     @cached_property\n1553     def model_fields(self):\n1554         \"\"\"A dict mapping column names to model field names.\"\"\"\n1555         converter = connections[self.db].introspection.identifier_converter\n1556         model_fields = {}\n1557         for field in self.model._meta.fields:\n1558             name, column = field.get_attname_column()\n1559             model_fields[converter(column)] = field\n1560         return model_fields\n1561 \n1562 \n1563 class Prefetch:\n1564     def __init__(self, lookup, queryset=None, to_attr=None):\n1565         # `prefetch_through` is the path we traverse to perform the prefetch.\n1566         self.prefetch_through = lookup\n1567         # `prefetch_to` is the path to the attribute that stores the result.\n1568         self.prefetch_to = lookup\n1569         if queryset is not None and (\n1570             isinstance(queryset, RawQuerySet) or (\n1571                 hasattr(queryset, '_iterable_class') and\n1572                 not issubclass(queryset._iterable_class, ModelIterable)\n1573             )\n1574         ):\n1575             raise ValueError(\n1576                 'Prefetch querysets cannot use raw(), values(), and '\n1577                 'values_list().'\n1578             )\n1579         if to_attr:\n1580             self.prefetch_to = LOOKUP_SEP.join(lookup.split(LOOKUP_SEP)[:-1] + [to_attr])\n1581 \n1582         self.queryset = queryset\n1583         self.to_attr = to_attr\n1584 \n1585     def __getstate__(self):\n1586         obj_dict = self.__dict__.copy()\n1587         if self.queryset is not None:\n1588             # Prevent the QuerySet from being evaluated\n1589             obj_dict['queryset'] = self.queryset._chain(\n1590                 _result_cache=[],\n1591                 _prefetch_done=True,\n1592             )\n1593         return obj_dict\n1594 \n1595     def add_prefix(self, prefix):\n1596         self.prefetch_through = prefix + LOOKUP_SEP + self.prefetch_through\n1597         self.prefetch_to = prefix + LOOKUP_SEP + self.prefetch_to\n1598 \n1599     def get_current_prefetch_to(self, level):\n1600         return LOOKUP_SEP.join(self.prefetch_to.split(LOOKUP_SEP)[:level + 1])\n1601 \n1602     def get_current_to_attr(self, level):\n1603         parts = self.prefetch_to.split(LOOKUP_SEP)\n1604         to_attr = parts[level]\n1605         as_attr = self.to_attr and level == len(parts) - 1\n1606         return to_attr, as_attr\n1607 \n1608     def get_current_queryset(self, level):\n1609         if self.get_current_prefetch_to(level) == self.prefetch_to:\n1610             return self.queryset\n1611         return None\n1612 \n1613     def __eq__(self, other):\n1614         if not isinstance(other, Prefetch):\n1615             return NotImplemented\n1616         return self.prefetch_to == other.prefetch_to\n1617 \n1618     def __hash__(self):\n1619         return hash((self.__class__, self.prefetch_to))\n1620 \n1621 \n1622 def normalize_prefetch_lookups(lookups, prefix=None):\n1623     \"\"\"Normalize lookups into Prefetch objects.\"\"\"\n1624     ret = []\n1625     for lookup in lookups:\n1626         if not isinstance(lookup, Prefetch):\n1627             lookup = Prefetch(lookup)\n1628         if prefix:\n1629             lookup.add_prefix(prefix)\n1630         ret.append(lookup)\n1631     return ret\n1632 \n1633 \n1634 def prefetch_related_objects(model_instances, *related_lookups):\n1635     \"\"\"\n1636     Populate prefetched object caches for a list of model instances based on\n1637     the lookups/Prefetch instances given.\n1638     \"\"\"\n1639     if not model_instances:\n1640         return  # nothing to do\n1641 \n1642     # We need to be able to dynamically add to the list of prefetch_related\n1643     # lookups that we look up (see below).  So we need some book keeping to\n1644     # ensure we don't do duplicate work.\n1645     done_queries = {}    # dictionary of things like 'foo__bar': [results]\n1646 \n1647     auto_lookups = set()  # we add to this as we go through.\n1648     followed_descriptors = set()  # recursion protection\n1649 \n1650     all_lookups = normalize_prefetch_lookups(reversed(related_lookups))\n1651     while all_lookups:\n1652         lookup = all_lookups.pop()\n1653         if lookup.prefetch_to in done_queries:\n1654             if lookup.queryset is not None:\n1655                 raise ValueError(\"'%s' lookup was already seen with a different queryset. \"\n1656                                  \"You may need to adjust the ordering of your lookups.\" % lookup.prefetch_to)\n1657 \n1658             continue\n1659 \n1660         # Top level, the list of objects to decorate is the result cache\n1661         # from the primary QuerySet. It won't be for deeper levels.\n1662         obj_list = model_instances\n1663 \n1664         through_attrs = lookup.prefetch_through.split(LOOKUP_SEP)\n1665         for level, through_attr in enumerate(through_attrs):\n1666             # Prepare main instances\n1667             if not obj_list:\n1668                 break\n1669 \n1670             prefetch_to = lookup.get_current_prefetch_to(level)\n1671             if prefetch_to in done_queries:\n1672                 # Skip any prefetching, and any object preparation\n1673                 obj_list = done_queries[prefetch_to]\n1674                 continue\n1675 \n1676             # Prepare objects:\n1677             good_objects = True\n1678             for obj in obj_list:\n1679                 # Since prefetching can re-use instances, it is possible to have\n1680                 # the same instance multiple times in obj_list, so obj might\n1681                 # already be prepared.\n1682                 if not hasattr(obj, '_prefetched_objects_cache'):\n1683                     try:\n1684                         obj._prefetched_objects_cache = {}\n1685                     except (AttributeError, TypeError):\n1686                         # Must be an immutable object from\n1687                         # values_list(flat=True), for example (TypeError) or\n1688                         # a QuerySet subclass that isn't returning Model\n1689                         # instances (AttributeError), either in Django or a 3rd\n1690                         # party. prefetch_related() doesn't make sense, so quit.\n1691                         good_objects = False\n1692                         break\n1693             if not good_objects:\n1694                 break\n1695 \n1696             # Descend down tree\n1697 \n1698             # We assume that objects retrieved are homogeneous (which is the premise\n1699             # of prefetch_related), so what applies to first object applies to all.\n1700             first_obj = obj_list[0]\n1701             to_attr = lookup.get_current_to_attr(level)[0]\n1702             prefetcher, descriptor, attr_found, is_fetched = get_prefetcher(first_obj, through_attr, to_attr)\n1703 \n1704             if not attr_found:\n1705                 raise AttributeError(\"Cannot find '%s' on %s object, '%s' is an invalid \"\n1706                                      \"parameter to prefetch_related()\" %\n1707                                      (through_attr, first_obj.__class__.__name__, lookup.prefetch_through))\n1708 \n1709             if level == len(through_attrs) - 1 and prefetcher is None:\n1710                 # Last one, this *must* resolve to something that supports\n1711                 # prefetching, otherwise there is no point adding it and the\n1712                 # developer asking for it has made a mistake.\n1713                 raise ValueError(\"'%s' does not resolve to an item that supports \"\n1714                                  \"prefetching - this is an invalid parameter to \"\n1715                                  \"prefetch_related().\" % lookup.prefetch_through)\n1716 \n1717             if prefetcher is not None and not is_fetched:\n1718                 obj_list, additional_lookups = prefetch_one_level(obj_list, prefetcher, lookup, level)\n1719                 # We need to ensure we don't keep adding lookups from the\n1720                 # same relationships to stop infinite recursion. So, if we\n1721                 # are already on an automatically added lookup, don't add\n1722                 # the new lookups from relationships we've seen already.\n1723                 if not (prefetch_to in done_queries and lookup in auto_lookups and descriptor in followed_descriptors):\n1724                     done_queries[prefetch_to] = obj_list\n1725                     new_lookups = normalize_prefetch_lookups(reversed(additional_lookups), prefetch_to)\n1726                     auto_lookups.update(new_lookups)\n1727                     all_lookups.extend(new_lookups)\n1728                 followed_descriptors.add(descriptor)\n1729             else:\n1730                 # Either a singly related object that has already been fetched\n1731                 # (e.g. via select_related), or hopefully some other property\n1732                 # that doesn't support prefetching but needs to be traversed.\n1733 \n1734                 # We replace the current list of parent objects with the list\n1735                 # of related objects, filtering out empty or missing values so\n1736                 # that we can continue with nullable or reverse relations.\n1737                 new_obj_list = []\n1738                 for obj in obj_list:\n1739                     if through_attr in getattr(obj, '_prefetched_objects_cache', ()):\n1740                         # If related objects have been prefetched, use the\n1741                         # cache rather than the object's through_attr.\n1742                         new_obj = list(obj._prefetched_objects_cache.get(through_attr))\n1743                     else:\n1744                         try:\n1745                             new_obj = getattr(obj, through_attr)\n1746                         except exceptions.ObjectDoesNotExist:\n1747                             continue\n1748                     if new_obj is None:\n1749                         continue\n1750                     # We special-case `list` rather than something more generic\n1751                     # like `Iterable` because we don't want to accidentally match\n1752                     # user models that define __iter__.\n1753                     if isinstance(new_obj, list):\n1754                         new_obj_list.extend(new_obj)\n1755                     else:\n1756                         new_obj_list.append(new_obj)\n1757                 obj_list = new_obj_list\n1758 \n1759 \n1760 def get_prefetcher(instance, through_attr, to_attr):\n1761     \"\"\"\n1762     For the attribute 'through_attr' on the given instance, find\n1763     an object that has a get_prefetch_queryset().\n1764     Return a 4 tuple containing:\n1765     (the object with get_prefetch_queryset (or None),\n1766      the descriptor object representing this relationship (or None),\n1767      a boolean that is False if the attribute was not found at all,\n1768      a boolean that is True if the attribute has already been fetched)\n1769     \"\"\"\n1770     prefetcher = None\n1771     is_fetched = False\n1772 \n1773     # For singly related objects, we have to avoid getting the attribute\n1774     # from the object, as this will trigger the query. So we first try\n1775     # on the class, in order to get the descriptor object.\n1776     rel_obj_descriptor = getattr(instance.__class__, through_attr, None)\n1777     if rel_obj_descriptor is None:\n1778         attr_found = hasattr(instance, through_attr)\n1779     else:\n1780         attr_found = True\n1781         if rel_obj_descriptor:\n1782             # singly related object, descriptor object has the\n1783             # get_prefetch_queryset() method.\n1784             if hasattr(rel_obj_descriptor, 'get_prefetch_queryset'):\n1785                 prefetcher = rel_obj_descriptor\n1786                 if rel_obj_descriptor.is_cached(instance):\n1787                     is_fetched = True\n1788             else:\n1789                 # descriptor doesn't support prefetching, so we go ahead and get\n1790                 # the attribute on the instance rather than the class to\n1791                 # support many related managers\n1792                 rel_obj = getattr(instance, through_attr)\n1793                 if hasattr(rel_obj, 'get_prefetch_queryset'):\n1794                     prefetcher = rel_obj\n1795                 if through_attr != to_attr:\n1796                     # Special case cached_property instances because hasattr\n1797                     # triggers attribute computation and assignment.\n1798                     if isinstance(getattr(instance.__class__, to_attr, None), cached_property):\n1799                         is_fetched = to_attr in instance.__dict__\n1800                     else:\n1801                         is_fetched = hasattr(instance, to_attr)\n1802                 else:\n1803                     is_fetched = through_attr in instance._prefetched_objects_cache\n1804     return prefetcher, rel_obj_descriptor, attr_found, is_fetched\n1805 \n1806 \n1807 def prefetch_one_level(instances, prefetcher, lookup, level):\n1808     \"\"\"\n1809     Helper function for prefetch_related_objects().\n1810 \n1811     Run prefetches on all instances using the prefetcher object,\n1812     assigning results to relevant caches in instance.\n1813 \n1814     Return the prefetched objects along with any additional prefetches that\n1815     must be done due to prefetch_related lookups found from default managers.\n1816     \"\"\"\n1817     # prefetcher must have a method get_prefetch_queryset() which takes a list\n1818     # of instances, and returns a tuple:\n1819 \n1820     # (queryset of instances of self.model that are related to passed in instances,\n1821     #  callable that gets value to be matched for returned instances,\n1822     #  callable that gets value to be matched for passed in instances,\n1823     #  boolean that is True for singly related objects,\n1824     #  cache or field name to assign to,\n1825     #  boolean that is True when the previous argument is a cache name vs a field name).\n1826 \n1827     # The 'values to be matched' must be hashable as they will be used\n1828     # in a dictionary.\n1829 \n1830     rel_qs, rel_obj_attr, instance_attr, single, cache_name, is_descriptor = (\n1831         prefetcher.get_prefetch_queryset(instances, lookup.get_current_queryset(level)))\n1832     # We have to handle the possibility that the QuerySet we just got back\n1833     # contains some prefetch_related lookups. We don't want to trigger the\n1834     # prefetch_related functionality by evaluating the query. Rather, we need\n1835     # to merge in the prefetch_related lookups.\n1836     # Copy the lookups in case it is a Prefetch object which could be reused\n1837     # later (happens in nested prefetch_related).\n1838     additional_lookups = [\n1839         copy.copy(additional_lookup) for additional_lookup\n1840         in getattr(rel_qs, '_prefetch_related_lookups', ())\n1841     ]\n1842     if additional_lookups:\n1843         # Don't need to clone because the manager should have given us a fresh\n1844         # instance, so we access an internal instead of using public interface\n1845         # for performance reasons.\n1846         rel_qs._prefetch_related_lookups = ()\n1847 \n1848     all_related_objects = list(rel_qs)\n1849 \n1850     rel_obj_cache = {}\n1851     for rel_obj in all_related_objects:\n1852         rel_attr_val = rel_obj_attr(rel_obj)\n1853         rel_obj_cache.setdefault(rel_attr_val, []).append(rel_obj)\n1854 \n1855     to_attr, as_attr = lookup.get_current_to_attr(level)\n1856     # Make sure `to_attr` does not conflict with a field.\n1857     if as_attr and instances:\n1858         # We assume that objects retrieved are homogeneous (which is the premise\n1859         # of prefetch_related), so what applies to first object applies to all.\n1860         model = instances[0].__class__\n1861         try:\n1862             model._meta.get_field(to_attr)\n1863         except exceptions.FieldDoesNotExist:\n1864             pass\n1865         else:\n1866             msg = 'to_attr={} conflicts with a field on the {} model.'\n1867             raise ValueError(msg.format(to_attr, model.__name__))\n1868 \n1869     # Whether or not we're prefetching the last part of the lookup.\n1870     leaf = len(lookup.prefetch_through.split(LOOKUP_SEP)) - 1 == level\n1871 \n1872     for obj in instances:\n1873         instance_attr_val = instance_attr(obj)\n1874         vals = rel_obj_cache.get(instance_attr_val, [])\n1875 \n1876         if single:\n1877             val = vals[0] if vals else None\n1878             if as_attr:\n1879                 # A to_attr has been given for the prefetch.\n1880                 setattr(obj, to_attr, val)\n1881             elif is_descriptor:\n1882                 # cache_name points to a field name in obj.\n1883                 # This field is a descriptor for a related object.\n1884                 setattr(obj, cache_name, val)\n1885             else:\n1886                 # No to_attr has been given for this prefetch operation and the\n1887                 # cache_name does not point to a descriptor. Store the value of\n1888                 # the field in the object's field cache.\n1889                 obj._state.fields_cache[cache_name] = val\n1890         else:\n1891             if as_attr:\n1892                 setattr(obj, to_attr, vals)\n1893             else:\n1894                 manager = getattr(obj, to_attr)\n1895                 if leaf and lookup.queryset is not None:\n1896                     qs = manager._apply_rel_filters(lookup.queryset)\n1897                 else:\n1898                     qs = manager.get_queryset()\n1899                 qs._result_cache = vals\n1900                 # We don't want the individual qs doing prefetch_related now,\n1901                 # since we have merged this into the current work.\n1902                 qs._prefetch_done = True\n1903                 obj._prefetched_objects_cache[cache_name] = qs\n1904     return all_related_objects, additional_lookups\n1905 \n1906 \n1907 class RelatedPopulator:\n1908     \"\"\"\n1909     RelatedPopulator is used for select_related() object instantiation.\n1910 \n1911     The idea is that each select_related() model will be populated by a\n1912     different RelatedPopulator instance. The RelatedPopulator instances get\n1913     klass_info and select (computed in SQLCompiler) plus the used db as\n1914     input for initialization. That data is used to compute which columns\n1915     to use, how to instantiate the model, and how to populate the links\n1916     between the objects.\n1917 \n1918     The actual creation of the objects is done in populate() method. This\n1919     method gets row and from_obj as input and populates the select_related()\n1920     model instance.\n1921     \"\"\"\n1922     def __init__(self, klass_info, select, db):\n1923         self.db = db\n1924         # Pre-compute needed attributes. The attributes are:\n1925         #  - model_cls: the possibly deferred model class to instantiate\n1926         #  - either:\n1927         #    - cols_start, cols_end: usually the columns in the row are\n1928         #      in the same order model_cls.__init__ expects them, so we\n1929         #      can instantiate by model_cls(*row[cols_start:cols_end])\n1930         #    - reorder_for_init: When select_related descends to a child\n1931         #      class, then we want to reuse the already selected parent\n1932         #      data. However, in this case the parent data isn't necessarily\n1933         #      in the same order that Model.__init__ expects it to be, so\n1934         #      we have to reorder the parent data. The reorder_for_init\n1935         #      attribute contains a function used to reorder the field data\n1936         #      in the order __init__ expects it.\n1937         #  - pk_idx: the index of the primary key field in the reordered\n1938         #    model data. Used to check if a related object exists at all.\n1939         #  - init_list: the field attnames fetched from the database. For\n1940         #    deferred models this isn't the same as all attnames of the\n1941         #    model's fields.\n1942         #  - related_populators: a list of RelatedPopulator instances if\n1943         #    select_related() descends to related models from this model.\n1944         #  - local_setter, remote_setter: Methods to set cached values on\n1945         #    the object being populated and on the remote object. Usually\n1946         #    these are Field.set_cached_value() methods.\n1947         select_fields = klass_info['select_fields']\n1948         from_parent = klass_info['from_parent']\n1949         if not from_parent:\n1950             self.cols_start = select_fields[0]\n1951             self.cols_end = select_fields[-1] + 1\n1952             self.init_list = [\n1953                 f[0].target.attname for f in select[self.cols_start:self.cols_end]\n1954             ]\n1955             self.reorder_for_init = None\n1956         else:\n1957             attname_indexes = {select[idx][0].target.attname: idx for idx in select_fields}\n1958             model_init_attnames = (f.attname for f in klass_info['model']._meta.concrete_fields)\n1959             self.init_list = [attname for attname in model_init_attnames if attname in attname_indexes]\n1960             self.reorder_for_init = operator.itemgetter(*[attname_indexes[attname] for attname in self.init_list])\n1961 \n1962         self.model_cls = klass_info['model']\n1963         self.pk_idx = self.init_list.index(self.model_cls._meta.pk.attname)\n1964         self.related_populators = get_related_populators(klass_info, select, self.db)\n1965         self.local_setter = klass_info['local_setter']\n1966         self.remote_setter = klass_info['remote_setter']\n1967 \n1968     def populate(self, row, from_obj):\n1969         if self.reorder_for_init:\n1970             obj_data = self.reorder_for_init(row)\n1971         else:\n1972             obj_data = row[self.cols_start:self.cols_end]\n1973         if obj_data[self.pk_idx] is None:\n1974             obj = None\n1975         else:\n1976             obj = self.model_cls.from_db(self.db, self.init_list, obj_data)\n1977             for rel_iter in self.related_populators:\n1978                 rel_iter.populate(row, obj)\n1979         self.local_setter(from_obj, obj)\n1980         if obj is not None:\n1981             self.remote_setter(obj, from_obj)\n1982 \n1983 \n1984 def get_related_populators(klass_info, select, db):\n1985     iterators = []\n1986     related_klass_infos = klass_info.get('related_klass_infos', [])\n1987     for rel_klass_info in related_klass_infos:\n1988         rel_cls = RelatedPopulator(rel_klass_info, select, db)\n1989         iterators.append(rel_cls)\n1990     return iterators\n",
        "intended_behavior": "Considering this file deals with querying, it also might include logic for how model instances are handled post-retrieval from the database, including caching. The intended behavior here would be to audit and potentially adjust the code paths that manage `_state.fields_cache` during or after instantiation and retrieval operations to accommodate the nuances of model instance copying, ensuring that each instance maintains its own independent cache unless explicitly shared. This ensures that operations on copied model instances do not have unintended side effects on the caching of related objects of the original instances."
    }
]