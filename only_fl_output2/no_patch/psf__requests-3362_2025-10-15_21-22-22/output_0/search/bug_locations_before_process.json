[
    {
        "file": "requests/models.py",
        "class": "Response",
        "method": "iter_content",
        "intended_behavior": "To resolve the issue, the `iter_content` method should include a more detailed encoding determination and application process when `decode_unicode=True`. The method needs to: \n- Check `Response.encoding` and use it if set. If `Response.encoding` is not set, it should either use a default encoding (e.g., UTF-8) or attempt to determine the encoding in a way similar to how `r.text` uses `chardet` or follows HTTP headers or other heuristics.\n- Ensure that the decoding process respects the determined or set encoding to consistently return unicode strings when `decode_unicode=True`, much like `r.text` decodes the entire response content based on the response's specified or detected encoding.\n- This implementation should aim to mirror the encoding detection, selection, and application logic of the `text` property, ensuring consistent behavior between accessing response content through `r.text` and processing streamed content via `iter_content(decode_unicode=True)`.\n- Document these behaviors clearly, ensuring that users understand how `iter_content` handles encoding and decoding when streaming content and the implications of setting `decode_unicode=True`.\n\nThis approach ensures `iter_content(decode_unicode=True)` offers a predictable and consistent interface for handling text encoding, aligning closely with the expectations set by `r.text`."
    }
]