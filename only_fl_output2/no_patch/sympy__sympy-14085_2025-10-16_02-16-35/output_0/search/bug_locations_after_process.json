[
    {
        "rel_file_path": "sympy/parsing/sympy_parser.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.1/sympy/parsing/sympy_parser.py",
        "start": 812,
        "end": 894,
        "class_name": null,
        "method_name": "parse_expr",
        "code": "812 def parse_expr(s, local_dict=None, transformations=standard_transformations,\n813                global_dict=None, evaluate=True):\n814     \"\"\"Converts the string ``s`` to a SymPy expression, in ``local_dict``\n815 \n816     Parameters\n817     ==========\n818 \n819     s : str\n820         The string to parse.\n821 \n822     local_dict : dict, optional\n823         A dictionary of local variables to use when parsing.\n824 \n825     global_dict : dict, optional\n826         A dictionary of global variables. By default, this is initialized\n827         with ``from sympy import *``; provide this parameter to override\n828         this behavior (for instance, to parse ``\"Q & S\"``).\n829 \n830     transformations : tuple, optional\n831         A tuple of transformation functions used to modify the tokens of the\n832         parsed expression before evaluation. The default transformations\n833         convert numeric literals into their SymPy equivalents, convert\n834         undefined variables into SymPy symbols, and allow the use of standard\n835         mathematical factorial notation (e.g. ``x!``).\n836 \n837     evaluate : bool, optional\n838         When False, the order of the arguments will remain as they were in the\n839         string and automatic simplification that would normally occur is\n840         suppressed. (see examples)\n841 \n842     Examples\n843     ========\n844 \n845     >>> from sympy.parsing.sympy_parser import parse_expr\n846     >>> parse_expr(\"1/2\")\n847     1/2\n848     >>> type(_)\n849     <class 'sympy.core.numbers.Half'>\n850     >>> from sympy.parsing.sympy_parser import standard_transformations,\\\\\n851     ... implicit_multiplication_application\n852     >>> transformations = (standard_transformations +\n853     ...     (implicit_multiplication_application,))\n854     >>> parse_expr(\"2x\", transformations=transformations)\n855     2*x\n856 \n857     When evaluate=False, some automatic simplifications will not occur:\n858 \n859     >>> parse_expr(\"2**3\"), parse_expr(\"2**3\", evaluate=False)\n860     (8, 2**3)\n861 \n862     In addition the order of the arguments will not be made canonical.\n863     This feature allows one to tell exactly how the expression was entered:\n864 \n865     >>> a = parse_expr('1 + x', evaluate=False)\n866     >>> b = parse_expr('x + 1', evaluate=0)\n867     >>> a == b\n868     False\n869     >>> a.args\n870     (1, x)\n871     >>> b.args\n872     (x, 1)\n873 \n874     See Also\n875     ========\n876 \n877     stringify_expr, eval_expr, standard_transformations,\n878     implicit_multiplication_application\n879 \n880     \"\"\"\n881 \n882     if local_dict is None:\n883         local_dict = {}\n884 \n885     if global_dict is None:\n886         global_dict = {}\n887         exec_('from sympy import *', global_dict)\n888 \n889     code = stringify_expr(s, local_dict, global_dict, transformations)\n890 \n891     if not evaluate:\n892         code = compile(evaluateFalse(code), '<string>', 'eval')\n893 \n894     return eval_expr(code, local_dict, global_dict)\n",
        "intended_behavior": "The `parse_expr` function needs to be enhanced to recognize and properly convert Unicode characters that represent Greek letters into the corresponding symbolic names used by SymPy. For example, it should translate the string \"\u03b1\" to `Symbol('alpha')`. This requires updating or adding to the list of transformations used by `parse_expr` to include a mapping from Greek Unicode characters to their symbolic names. This modification should be carefully implemented to ensure it does not affect the ability to parse and handle other expressions, thereby preserving existing functionality while improving the handling of Greek letters in strings."
    }
]