[
    {
        "rel_file_path": "sklearn/linear_model/base.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/scikit-learn__scikit-learn/setup_scikit-learn__scikit-learn__0.22/sklearn/linear_model/base.py",
        "start": 48,
        "end": 97,
        "class_name": null,
        "method_name": "make_dataset",
        "code": "48 def make_dataset(X, y, sample_weight, random_state=None):\n49     \"\"\"Create ``Dataset`` abstraction for sparse and dense inputs.\n50 \n51     This also returns the ``intercept_decay`` which is different\n52     for sparse datasets.\n53 \n54     Parameters\n55     ----------\n56     X : array_like, shape (n_samples, n_features)\n57         Training data\n58 \n59     y : array_like, shape (n_samples, )\n60         Target values.\n61 \n62     sample_weight : numpy array of shape (n_samples,)\n63         The weight of each sample\n64 \n65     random_state : int, RandomState instance or None (default)\n66         Determines random number generation for dataset shuffling and noise.\n67         Pass an int for reproducible output across multiple function calls.\n68         See :term:`Glossary <random_state>`.\n69 \n70     Returns\n71     -------\n72     dataset\n73         The ``Dataset`` abstraction\n74     intercept_decay\n75         The intercept decay\n76     \"\"\"\n77 \n78     rng = check_random_state(random_state)\n79     # seed should never be 0 in SequentialDataset64\n80     seed = rng.randint(1, np.iinfo(np.int32).max)\n81 \n82     if X.dtype == np.float32:\n83         CSRData = CSRDataset32\n84         ArrayData = ArrayDataset32\n85     else:\n86         CSRData = CSRDataset64\n87         ArrayData = ArrayDataset64\n88 \n89     if sp.issparse(X):\n90         dataset = CSRData(X.data, X.indptr, X.indices, y, sample_weight,\n91                           seed=seed)\n92         intercept_decay = SPARSE_INTERCEPT_DECAY\n93     else:\n94         dataset = ArrayData(X, y, sample_weight, seed=seed)\n95         intercept_decay = 1.0\n96 \n97     return dataset, intercept_decay\n",
        "intended_behavior": "Before the creation of the `ArrayDataset64` instance, the function `make_dataset` should ensure that the input array `X` is C-contiguous. This could be achieved by incorporating a check or conversion step using `check_array` from `sklearn.utils.validation`. The check should enforce C-contiguity (`order='C'`) and convert the array if necessary. This validation step should be integrated in such a way that it preserves the current functionality for all input types, including both sparse and dense arrays, without altering the intended flow or output of the function. It should be a seamless preprocessing check specifically for the scikit-learn's internal requirements when dealing with dense data arrays, especially when the `sag` solver is used which might not handle non-C-contiguous arrays well. This step would rectify the `ValueError: ndarray is not C-contiguous` encountered, ensuring compatibility and preventing the error for any similar future scenarios where data may not inherently be in the required format."
    }
]