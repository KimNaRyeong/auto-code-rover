diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -18,6 +18,7 @@
 
 # LOCAL
 from astropy import config as _config
+from astropy.utils.compat import NUMPY_LT_1_20, NUMPY_LT_1_22
 from astropy.utils.compat.misc import override__dir__
 from astropy.utils.data_info import ParentDtypeInfo
 from astropy.utils.exceptions import AstropyDeprecationWarning, AstropyWarning
@@ -1788,19 +1789,34 @@ def _wrap_function(self, function, *args, unit=None, out=None, **kwargs):
     def trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None):
         return self._wrap_function(np.trace, offset, axis1, axis2, dtype,
                                    out=out)
-
-    def var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False):
-        return self._wrap_function(np.var, axis, dtype,
-                                   out=out, ddof=ddof, keepdims=keepdims,
-                                   unit=self.unit**2)
-
-    def std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False):
-        return self._wrap_function(np.std, axis, dtype, out=out, ddof=ddof,
-                                   keepdims=keepdims)
-
-    def mean(self, axis=None, dtype=None, out=None, keepdims=False):
-        return self._wrap_function(np.mean, axis, dtype, out=out,
-                                   keepdims=keepdims)
+    if NUMPY_LT_1_20:
+        def var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False):
+            return self._wrap_function(np.var, axis, dtype,
+                                       out=out, ddof=ddof, keepdims=keepdims,
+                                       unit=self.unit**2)
+    else:
+        def var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True):
+            return self._wrap_function(np.var, axis, dtype,
+                                       out=out, ddof=ddof, keepdims=keepdims, where=where,
+                                       unit=self.unit**2)
+
+    if NUMPY_LT_1_20:
+        def std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False):
+            return self._wrap_function(np.std, axis, dtype, out=out, ddof=ddof,
+                                       keepdims=keepdims)
+    else:
+        def std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True):
+            return self._wrap_function(np.std, axis, dtype, out=out, ddof=ddof,
+                                       keepdims=keepdims, where=where)
+
+    if NUMPY_LT_1_20:
+        def mean(self, axis=None, dtype=None, out=None, keepdims=False):
+            return self._wrap_function(np.mean, axis, dtype, out=out,
+                                       keepdims=keepdims)
+    else:
+        def mean(self, axis=None, dtype=None, out=None, keepdims=False, *, where=True):
+            return self._wrap_function(np.mean, axis, dtype, out=out,
+                                       keepdims=keepdims, where=where)
 
     def round(self, decimals=0, out=None):
         return self._wrap_function(np.round, decimals, out=out)
@@ -1827,9 +1843,14 @@ def diff(self, n=1, axis=-1):
     def ediff1d(self, to_end=None, to_begin=None):
         return self._wrap_function(np.ediff1d, to_end, to_begin)
 
-    def nansum(self, axis=None, out=None, keepdims=False):
-        return self._wrap_function(np.nansum, axis,
-                                   out=out, keepdims=keepdims)
+    if NUMPY_LT_1_22:
+        def nansum(self, axis=None, out=None, keepdims=False):
+            return self._wrap_function(np.nansum, axis,
+                                       out=out, keepdims=keepdims)
+    else:
+        def nansum(self, axis=None, out=None, keepdims=False, *, initial=None, where=True):
+            return self._wrap_function(np.nansum, axis,
+                                       out=out, keepdims=keepdims, initial=initial, where=where)
 
     def insert(self, obj, values, axis=None):
         """
diff --git a/astropy/utils/masked/core.py b/astropy/utils/masked/core.py
--- a/astropy/utils/masked/core.py
+++ b/astropy/utils/masked/core.py
@@ -1043,7 +1043,7 @@ def clip(self, min=None, max=None, out=None, **kwargs):
             np.minimum(out, dmax, out=out, where=True if mmax is None else ~mmax)
         return masked_out
 
-    def mean(self, axis=None, dtype=None, out=None, keepdims=False):
+    def mean(self, axis=None, dtype=None, out=None, keepdims=False, *, where=True):
         # Implementation based on that in numpy/core/_methods.py
         # Cast bool, unsigned int, and int to float64 by default,
         # and do float16 at higher precision.
@@ -1055,38 +1055,42 @@ def mean(self, axis=None, dtype=None, out=None, keepdims=False):
                 dtype = np.dtype('f4')
                 is_float16_result = out is None
 
+        where = ~self.mask & where
+
         result = self.sum(axis=axis, dtype=dtype, out=out,
-                          keepdims=keepdims, where=~self.mask)
-        n = np.add.reduce(~self.mask, axis=axis, keepdims=keepdims)
+                          keepdims=keepdims, where=where)
+        n = np.add.reduce(where, axis=axis, keepdims=keepdims)
         result /= n
         if is_float16_result:
             result = result.astype(self.dtype)
         return result
 
-    def var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False):
+    def var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True):
+        where_final = ~self.mask & where
+
         # Simplified implementation based on that in numpy/core/_methods.py
-        n = np.add.reduce(~self.mask, axis=axis, keepdims=keepdims)[...]
+        n = np.add.reduce(where_final, axis=axis, keepdims=keepdims)[...]
 
         # Cast bool, unsigned int, and int to float64 by default.
         if dtype is None and issubclass(self.dtype.type,
                                         (np.integer, np.bool_)):
             dtype = np.dtype('f8')
-        mean = self.mean(axis=axis, dtype=dtype, keepdims=True)
+        mean = self.mean(axis=axis, dtype=dtype, keepdims=True, where=where)
 
         x = self - mean
         x *= x.conjugate()  # Conjugate just returns x if not complex.
 
         result = x.sum(axis=axis, dtype=dtype, out=out,
-                       keepdims=keepdims, where=~x.mask)
+                       keepdims=keepdims, where=where_final)
         n -= ddof
         n = np.maximum(n, 0, out=n)
         result /= n
         result._mask |= (n == 0)
         return result
 
-    def std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False):
+    def std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True):
         result = self.var(axis=axis, dtype=dtype, out=out, ddof=ddof,
-                          keepdims=keepdims)
+                          keepdims=keepdims, where=where)
         return np.sqrt(result, out=result)
 
     def __bool__(self):
@@ -1094,13 +1098,13 @@ def __bool__(self):
         result = super().__bool__()
         return result and not self.mask
 
-    def any(self, axis=None, out=None, keepdims=False):
+    def any(self, axis=None, out=None, keepdims=False, *, where=True):
         return np.logical_or.reduce(self, axis=axis, out=out,
-                                    keepdims=keepdims, where=~self.mask)
+                                    keepdims=keepdims, where=~self.mask & where)
 
-    def all(self, axis=None, out=None, keepdims=False):
+    def all(self, axis=None, out=None, keepdims=False, *, where=True):
         return np.logical_and.reduce(self, axis=axis, out=out,
-                                     keepdims=keepdims, where=~self.mask)
+                                     keepdims=keepdims, where=~self.mask & where)
 
     # Following overrides needed since somehow the ndarray implementation
     # does not actually call these.
