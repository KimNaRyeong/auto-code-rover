[
    {
        "rel_file_path": "django/core/management/commands/diffsettings.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.0/django/core/management/commands/diffsettings.py",
        "start": 1,
        "end": 79,
        "class_name": null,
        "method_name": null,
        "code": "1 from django.core.management.base import BaseCommand\n2 \n3 \n4 def module_to_dict(module, omittable=lambda k: k.startswith('_') or not k.isupper()):\n5     \"\"\"Convert a module namespace to a Python dictionary.\"\"\"\n6     return {k: repr(getattr(module, k)) for k in dir(module) if not omittable(k)}\n7 \n8 \n9 class Command(BaseCommand):\n10     help = \"\"\"Displays differences between the current settings.py and Django's\n11     default settings.\"\"\"\n12 \n13     requires_system_checks = False\n14 \n15     def add_arguments(self, parser):\n16         parser.add_argument(\n17             '--all', action='store_true',\n18             help=(\n19                 'Display all settings, regardless of their value. In \"hash\" '\n20                 'mode, default values are prefixed by \"###\".'\n21             ),\n22         )\n23         parser.add_argument(\n24             '--default', metavar='MODULE',\n25             help=(\n26                 \"The settings module to compare the current settings against. Leave empty to \"\n27                 \"compare against Django's default settings.\"\n28             ),\n29         )\n30         parser.add_argument(\n31             '--output', default='hash', choices=('hash', 'unified'),\n32             help=(\n33                 \"Selects the output format. 'hash' mode displays each changed \"\n34                 \"setting, with the settings that don't appear in the defaults \"\n35                 \"followed by ###. 'unified' mode prefixes the default setting \"\n36                 \"with a minus sign, followed by the changed setting prefixed \"\n37                 \"with a plus sign.\"\n38             ),\n39         )\n40 \n41     def handle(self, **options):\n42         from django.conf import settings, Settings, global_settings\n43 \n44         # Because settings are imported lazily, we need to explicitly load them.\n45         if not settings.configured:\n46             settings._setup()\n47 \n48         user_settings = module_to_dict(settings._wrapped)\n49         default = options['default']\n50         default_settings = module_to_dict(Settings(default) if default else global_settings)\n51         output_func = {\n52             'hash': self.output_hash,\n53             'unified': self.output_unified,\n54         }[options['output']]\n55         return '\\n'.join(output_func(user_settings, default_settings, **options))\n56 \n57     def output_hash(self, user_settings, default_settings, **options):\n58         # Inspired by Postfix's \"postconf -n\".\n59         output = []\n60         for key in sorted(user_settings):\n61             if key not in default_settings:\n62                 output.append(\"%s = %s  ###\" % (key, user_settings[key]))\n63             elif user_settings[key] != default_settings[key]:\n64                 output.append(\"%s = %s\" % (key, user_settings[key]))\n65             elif options['all']:\n66                 output.append(\"### %s = %s\" % (key, user_settings[key]))\n67         return output\n68 \n69     def output_unified(self, user_settings, default_settings, **options):\n70         output = []\n71         for key in sorted(user_settings):\n72             if key not in default_settings:\n73                 output.append(self.style.SUCCESS(\"+ %s = %s\" % (key, user_settings[key])))\n74             elif user_settings[key] != default_settings[key]:\n75                 output.append(self.style.ERROR(\"- %s = %s\" % (key, default_settings[key])))\n76                 output.append(self.style.SUCCESS(\"+ %s = %s\" % (key, user_settings[key])))\n77             elif options['all']:\n78                 output.append(\"  %s = %s\" % (key, user_settings[key]))\n79         return output\n",
        "intended_behavior": "Ensure that each app's models are directed to the correct database, especially if sharing table names across databases. This might involve setting up `DATABASE_ROUTERS` to avoid conflicts."
    }
]