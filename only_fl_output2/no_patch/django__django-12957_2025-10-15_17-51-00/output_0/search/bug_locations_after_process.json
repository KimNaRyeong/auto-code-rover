[
    {
        "rel_file_path": "django/contrib/gis/admin/options.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/contrib/gis/admin/options.py",
        "start": 1,
        "end": 134,
        "class_name": null,
        "method_name": null,
        "code": "1 from django.contrib.admin import ModelAdmin\n2 from django.contrib.gis.admin.widgets import OpenLayersWidget\n3 from django.contrib.gis.db import models\n4 from django.contrib.gis.gdal import OGRGeomType\n5 from django.forms import Media\n6 \n7 spherical_mercator_srid = 3857\n8 \n9 \n10 class GeoModelAdmin(ModelAdmin):\n11     \"\"\"\n12     The administration options class for Geographic models. Map settings\n13     may be overloaded from their defaults to create custom maps.\n14     \"\"\"\n15     # The default map settings that may be overloaded -- still subject\n16     # to API changes.\n17     default_lon = 0\n18     default_lat = 0\n19     default_zoom = 4\n20     display_wkt = False\n21     display_srid = False\n22     extra_js = []\n23     num_zoom = 18\n24     max_zoom = False\n25     min_zoom = False\n26     units = False\n27     max_resolution = False\n28     max_extent = False\n29     modifiable = True\n30     mouse_position = True\n31     scale_text = True\n32     layerswitcher = True\n33     scrollable = True\n34     map_width = 600\n35     map_height = 400\n36     map_srid = 4326\n37     map_template = 'gis/admin/openlayers.html'\n38     openlayers_url = 'https://cdnjs.cloudflare.com/ajax/libs/openlayers/2.13.1/OpenLayers.js'\n39     point_zoom = num_zoom - 6\n40     wms_url = 'http://vmap0.tiles.osgeo.org/wms/vmap0'\n41     wms_layer = 'basic'\n42     wms_name = 'OpenLayers WMS'\n43     wms_options = {'format': 'image/jpeg'}\n44     debug = False\n45     widget = OpenLayersWidget\n46 \n47     @property\n48     def media(self):\n49         \"Injects OpenLayers JavaScript into the admin.\"\n50         return super().media + Media(js=[self.openlayers_url] + self.extra_js)\n51 \n52     def formfield_for_dbfield(self, db_field, request, **kwargs):\n53         \"\"\"\n54         Overloaded from ModelAdmin so that an OpenLayersWidget is used\n55         for viewing/editing 2D GeometryFields (OpenLayers 2 does not support\n56         3D editing).\n57         \"\"\"\n58         if isinstance(db_field, models.GeometryField) and db_field.dim < 3:\n59             # Setting the widget with the newly defined widget.\n60             kwargs['widget'] = self.get_map_widget(db_field)\n61             return db_field.formfield(**kwargs)\n62         else:\n63             return super().formfield_for_dbfield(db_field, request, **kwargs)\n64 \n65     def get_map_widget(self, db_field):\n66         \"\"\"\n67         Return a subclass of the OpenLayersWidget (or whatever was specified\n68         in the `widget` attribute) using the settings from the attributes set\n69         in this class.\n70         \"\"\"\n71         is_collection = db_field.geom_type in ('MULTIPOINT', 'MULTILINESTRING', 'MULTIPOLYGON', 'GEOMETRYCOLLECTION')\n72         if is_collection:\n73             if db_field.geom_type == 'GEOMETRYCOLLECTION':\n74                 collection_type = 'Any'\n75             else:\n76                 collection_type = OGRGeomType(db_field.geom_type.replace('MULTI', ''))\n77         else:\n78             collection_type = 'None'\n79 \n80         class OLMap(self.widget):\n81             template_name = self.map_template\n82             geom_type = db_field.geom_type\n83 \n84             wms_options = ''\n85             if self.wms_options:\n86                 wms_options = [\"%s: '%s'\" % pair for pair in self.wms_options.items()]\n87                 wms_options = ', %s' % ', '.join(wms_options)\n88 \n89             params = {\n90                 'default_lon': self.default_lon,\n91                 'default_lat': self.default_lat,\n92                 'default_zoom': self.default_zoom,\n93                 'display_wkt': self.debug or self.display_wkt,\n94                 'geom_type': OGRGeomType(db_field.geom_type),\n95                 'field_name': db_field.name,\n96                 'is_collection': is_collection,\n97                 'scrollable': self.scrollable,\n98                 'layerswitcher': self.layerswitcher,\n99                 'collection_type': collection_type,\n100                 'is_generic': db_field.geom_type == 'GEOMETRY',\n101                 'is_linestring': db_field.geom_type in ('LINESTRING', 'MULTILINESTRING'),\n102                 'is_polygon': db_field.geom_type in ('POLYGON', 'MULTIPOLYGON'),\n103                 'is_point': db_field.geom_type in ('POINT', 'MULTIPOINT'),\n104                 'num_zoom': self.num_zoom,\n105                 'max_zoom': self.max_zoom,\n106                 'min_zoom': self.min_zoom,\n107                 'units': self.units,  # likely should get from object\n108                 'max_resolution': self.max_resolution,\n109                 'max_extent': self.max_extent,\n110                 'modifiable': self.modifiable,\n111                 'mouse_position': self.mouse_position,\n112                 'scale_text': self.scale_text,\n113                 'map_width': self.map_width,\n114                 'map_height': self.map_height,\n115                 'point_zoom': self.point_zoom,\n116                 'srid': self.map_srid,\n117                 'display_srid': self.display_srid,\n118                 'wms_url': self.wms_url,\n119                 'wms_layer': self.wms_layer,\n120                 'wms_name': self.wms_name,\n121                 'wms_options': wms_options,\n122                 'debug': self.debug,\n123             }\n124         return OLMap\n125 \n126 \n127 class OSMGeoAdmin(GeoModelAdmin):\n128     map_template = 'gis/admin/osm.html'\n129     num_zoom = 20\n130     map_srid = spherical_mercator_srid\n131     max_extent = '-20037508,-20037508,20037508,20037508'\n132     max_resolution = '156543.0339'\n133     point_zoom = num_zoom - 6\n134     units = 'm'\n",
        "intended_behavior": "This file defines settings that configure the GIS admin interface, including specifying the templates for rendering maps (`map_template`). The key to solving the issue lies not directly within modifications to this Python file but understanding its role in defining the template used (`gis/admin/openlayers.html`) points towards where the fix should be applied, which is within the HTML template itself. The intended behavior at this location is correct and does not require modification; it serves as a pointer to where the actual change needs to be made (in the HTML template or the JavaScript it integrates)."
    }
]