2025-10-15 18:24:13.248 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-15 18:24:17.106 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=268, output_tokens=12, cost=0.003040
2025-10-15 18:24:35.112 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=448, output_tokens=720, cost=0.026080
2025-10-15 18:24:36.193 | INFO     | registered non reproducing test 0
2025-10-15 18:24:54.965 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1522, output_tokens=723, cost=0.036910
2025-10-15 18:24:56.090 | INFO     | registered non reproducing test 1
2025-10-15 18:25:15.576 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2202, output_tokens=799, cost=0.045990
2025-10-15 18:25:16.676 | INFO     | registered non reproducing test 2
2025-10-15 18:25:16.677 | WARNING  | Failed to write a reproducer test; skipping reproducer tracing
2025-10-15 18:25:16.683 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 18:25:24.789 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=577, output_tokens=355, cost=0.016420
2025-10-15 18:25:24.813 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 18:25:27.604 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=709, output_tokens=85, cost=0.009640
2025-10-15 18:25:27.605 | DEBUG    | Extracted a valid json.
2025-10-15 18:25:27.605 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_class(\"QuerySet\")",
        "search_method_in_class(\"annotate\", \"QuerySet\")",
        "search_method_in_class(\"aggregate\", \"QuerySet\")",
        "search_class(\"F\")",
        "search_class(\"Max\")",
        "search_class(\"Sum\")",
        "search_class(\"Query\")"
    ],
    "bug_locations": []
}
2025-10-15 18:25:27.697 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-15 18:25:27.698 | DEBUG    | <Agent search> Analyzing search results.
2025-10-15 18:25:44.964 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=4040, output_tokens=626, cost=0.059180
2025-10-15 18:25:44.978 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 18:25:55.365 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=4882, output_tokens=413, cost=0.061210
2025-10-15 18:25:55.374 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 18:26:05.876 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=767, output_tokens=342, cost=0.017930
2025-10-15 18:26:05.877 | DEBUG    | Extracted a valid json.
2025-10-15 18:26:05.877 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations":[
        {
            "file": "django/db/models/query.py",
            "class": "QuerySet",
            "method": "aggregate",
            "intended_behavior": "The `aggregate` method should be updated to correctly handle field references made through the `F` object which have been annotated using the `annotate()` method. Specifically, when generating the SQL query, the method must ensure that any references to annotated fields (like `anon` in the issue) should accurately reflect the alias given in the `annotate()` call. This means if `foo` is annotated as `anon`, then `aggregate(Max('anon'))` should correctly resolve to using `anon` in the SQL instead of mistakenly trying to refer back to the original field name (`foo`), which doesn't exist in the context of the subquery created by the aggregation."
        },
        {
            "file": "django/db/models/sql/query.py",
            "class": "Query",
            "method": "get_aggregation",
            "intended_behavior": "This method must be inspected and possibly revised to ensure that it properly includes and references annotated fields in the aggregation phase. The bug fix should allow the method to check if an aggregated field has an alias provided by an earlier annotation and use that alias in the SQL construction. The method should avoid losing the context of annotations when translating queryset operations into SQL, particularly ensuring that aliases are used instead of original field names when those fields have been renamed through annotation. This correction would prevent errors when the database engine tries to execute the generated SQL command that refers to an incorrectly named or non-existent field."
        }
    ]
}
2025-10-15 18:26:05.901 | DEBUG    | Bug location extracted successfully: [<file>django/db/models/query.py</file>
<class>QuerySet</class>
<method>aggregate</method>
<code>
365     def aggregate(self, *args, **kwargs):
366         """
367         Return a dictionary containing the calculations (aggregation)
368         over the current queryset.
369 
370         If args is present the expression is passed as a kwarg using
371         the Aggregate object's default alias.
372         """
373         if self.query.distinct_fields:
374             raise NotImplementedError("aggregate() + distinct(fields) not implemented.")
375         self._validate_values_are_expressions((*args, *kwargs.values()), method_name='aggregate')
376         for arg in args:
377             # The default_alias property raises TypeError if default_alias
378             # can't be set automatically or AttributeError if it isn't an
379             # attribute.
380             try:
381                 arg.default_alias
382             except (AttributeError, TypeError):
383                 raise TypeError("Complex aggregates require an alias")
384             kwargs[arg.default_alias] = arg
385 
386         query = self.query.chain()
387         for (alias, aggregate_expr) in kwargs.items():
388             query.add_annotation(aggregate_expr, alias, is_summary=True)
389             if not query.annotations[alias].contains_aggregate:
390                 raise TypeError("%s is not an aggregate expression" % alias)
391         return query.get_aggregation(self.db, kwargs)

</code><intended_behavior>The `aggregate` method should be updated to correctly handle field references made through the `F` object which have been annotated using the `annotate()` method. Specifically, when generating the SQL query, the method must ensure that any references to annotated fields (like `anon` in the issue) should accurately reflect the alias given in the `annotate()` call. This means if `foo` is annotated as `anon`, then `aggregate(Max('anon'))` should correctly resolve to using `anon` in the SQL instead of mistakenly trying to refer back to the original field name (`foo`), which doesn't exist in the context of the subquery created by the aggregation.</intended_behavior>, <file>django/db/models/query.py</file>
<class>QuerySet</class>
<method>None</method>
<code>
175 class QuerySet:
176     """Represent a lazy database lookup for a set of objects."""
177 
178     def __init__(self, model=None, query=None, using=None, hints=None):
179         self.model = model
180         self._db = using
181         self._hints = hints or {}
182         self._query = query or sql.Query(self.model)
183         self._result_cache = None
184         self._sticky_filter = False
185         self._for_write = False
186         self._prefetch_related_lookups = ()
187         self._prefetch_done = False
188         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
189         self._iterable_class = ModelIterable
190         self._fields = None
191         self._defer_next_filter = False
192         self._deferred_filter = None
193 
194     @property
195     def query(self):
196         if self._deferred_filter:
197             negate, args, kwargs = self._deferred_filter
198             self._filter_or_exclude_inplace(negate, args, kwargs)
199             self._deferred_filter = None
200         return self._query
201 
202     @query.setter
203     def query(self, value):
204         if value.values_select:
205             self._iterable_class = ValuesIterable
206         self._query = value
207 
208     def as_manager(cls):
209         # Address the circular dependency between `Queryset` and `Manager`.
210         from django.db.models.manager import Manager
211         manager = Manager.from_queryset(cls)()
212         manager._built_with_as_manager = True
213         return manager
214     as_manager.queryset_only = True
215     as_manager = classmethod(as_manager)
216 
217     ########################
218     # PYTHON MAGIC METHODS #
219     ########################
220 
221     def __deepcopy__(self, memo):
222         """Don't populate the QuerySet's cache."""
223         obj = self.__class__()
224         for k, v in self.__dict__.items():
225             if k == '_result_cache':
226                 obj.__dict__[k] = None
227             else:
228                 obj.__dict__[k] = copy.deepcopy(v, memo)
229         return obj
230 
231     def __getstate__(self):
232         # Force the cache to be fully populated.
233         self._fetch_all()
234         return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}
235 
236     def __setstate__(self, state):
237         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)
238         if pickled_version:
239             if pickled_version != django.__version__:
240                 warnings.warn(
241                     "Pickled queryset instance's Django version %s does not "
242                     "match the current version %s."
243                     % (pickled_version, django.__version__),
244                     RuntimeWarning,
245                     stacklevel=2,
246                 )
247         else:
248             warnings.warn(
249                 "Pickled queryset instance's Django version is not specified.",
250                 RuntimeWarning,
251                 stacklevel=2,
252             )
253         self.__dict__.update(state)
254 
255     def __repr__(self):
256         data = list(self[:REPR_OUTPUT_SIZE + 1])
257         if len(data) > REPR_OUTPUT_SIZE:
258             data[-1] = "...(remaining elements truncated)..."
259         return '<%s %r>' % (self.__class__.__name__, data)
260 
261     def __len__(self):
262         self._fetch_all()
263         return len(self._result_cache)
264 
265     def __iter__(self):
266         """
267         The queryset iterator protocol uses three nested iterators in the
268         default case:
269             1. sql.compiler.execute_sql()
270                - Returns 100 rows at time (constants.GET_ITERATOR_CHUNK_SIZE)
271                  using cursor.fetchmany(). This part is responsible for
272                  doing some column masking, and returning the rows in chunks.
273             2. sql.compiler.results_iter()
274                - Returns one row at time. At this point the rows are still just
275                  tuples. In some cases the return values are converted to
276                  Python values at this location.
277             3. self.iterator()
278                - Responsible for turning the rows into model objects.
279         """
280         self._fetch_all()
281         return iter(self._result_cache)
282 
283     def __bool__(self):
284         self._fetch_all()
285         return bool(self._result_cache)
286 
287     def __getitem__(self, k):
288         """Retrieve an item or slice from the set of results."""
289         if not isinstance(k, (int, slice)):
290             raise TypeError(
291                 'QuerySet indices must be integers or slices, not %s.'
292                 % type(k).__name__
293             )
294         assert ((not isinstance(k, slice) and (k >= 0)) or
295                 (isinstance(k, slice) and (k.start is None or k.start >= 0) and
296                  (k.stop is None or k.stop >= 0))), \
297             "Negative indexing is not supported."
298 
299         if self._result_cache is not None:
300             return self._result_cache[k]
301 
302         if isinstance(k, slice):
303             qs = self._chain()
304             if k.start is not None:
305                 start = int(k.start)
306             else:
307                 start = None
308             if k.stop is not None:
309                 stop = int(k.stop)
310             else:
311                 stop = None
312             qs.query.set_limits(start, stop)
313             return list(qs)[::k.step] if k.step else qs
314 
315         qs = self._chain()
316         qs.query.set_limits(k, k + 1)
317         qs._fetch_all()
318         return qs._result_cache[0]
319 
320     def __class_getitem__(cls, *args, **kwargs):
321         return cls
322 
323     def __and__(self, other):
324         self._merge_sanity_check(other)
325         if isinstance(other, EmptyQuerySet):
326             return other
327         if isinstance(self, EmptyQuerySet):
328             return self
329         combined = self._chain()
330         combined._merge_known_related_objects(other)
331         combined.query.combine(other.query, sql.AND)
332         return combined
333 
334     def __or__(self, other):
335         self._merge_sanity_check(other)
336         if isinstance(self, EmptyQuerySet):
337             return other
338         if isinstance(other, EmptyQuerySet):
339             return self
340         query = self if self.query.can_filter() else self.model._base_manager.filter(pk__in=self.values('pk'))
341         combined = query._chain()
342         combined._merge_known_related_objects(other)
343         if not other.query.can_filter():
344             other = other.model._base_manager.filter(pk__in=other.values('pk'))
345         combined.query.combine(other.query, sql.OR)
346         return combined
347 
348     ####################################
349     # METHODS THAT DO DATABASE QUERIES #
350     ####################################
351 
352     def _iterator(self, use_chunked_fetch, chunk_size):
353         yield from self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size)
354 
355     def iterator(self, chunk_size=2000):
356         """
357         An iterator over the results from applying this QuerySet to the
358         database.
359         """
360         if chunk_size <= 0:
361             raise ValueError('Chunk size must be strictly positive.')
362         use_chunked_fetch = not connections[self.db].settings_dict.get('DISABLE_SERVER_SIDE_CURSORS')
363         return self._iterator(use_chunked_fetch, chunk_size)
364 
365     def aggregate(self, *args, **kwargs):
366         """
367         Return a dictionary containing the calculations (aggregation)
368         over the current queryset.
369 
370         If args is present the expression is passed as a kwarg using
371         the Aggregate object's default alias.
372         """
373         if self.query.distinct_fields:
374             raise NotImplementedError("aggregate() + distinct(fields) not implemented.")
375         self._validate_values_are_expressions((*args, *kwargs.values()), method_name='aggregate')
376         for arg in args:
377             # The default_alias property raises TypeError if default_alias
378             # can't be set automatically or AttributeError if it isn't an
379             # attribute.
380             try:
381                 arg.default_alias
382             except (AttributeError, TypeError):
383                 raise TypeError("Complex aggregates require an alias")
384             kwargs[arg.default_alias] = arg
385 
386         query = self.query.chain()
387         for (alias, aggregate_expr) in kwargs.items():
388             query.add_annotation(aggregate_expr, alias, is_summary=True)
389             if not query.annotations[alias].contains_aggregate:
390                 raise TypeError("%s is not an aggregate expression" % alias)
391         return query.get_aggregation(self.db, kwargs)
392 
393     def count(self):
394         """
395         Perform a SELECT COUNT() and return the number of records as an
396         integer.
397 
398         If the QuerySet is already fully cached, return the length of the
399         cached results set to avoid multiple SELECT COUNT(*) calls.
400         """
401         if self._result_cache is not None:
402             return len(self._result_cache)
403 
404         return self.query.get_count(using=self.db)
405 
406     def get(self, *args, **kwargs):
407         """
408         Perform the query and return a single object matching the given
409         keyword arguments.
410         """
411         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
412         if self.query.can_filter() and not self.query.distinct_fields:
413             clone = clone.order_by()
414         limit = None
415         if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:
416             limit = MAX_GET_RESULTS
417             clone.query.set_limits(high=limit)
418         num = len(clone)
419         if num == 1:
420             return clone._result_cache[0]
421         if not num:
422             raise self.model.DoesNotExist(
423                 "%s matching query does not exist." %
424                 self.model._meta.object_name
425             )
426         raise self.model.MultipleObjectsReturned(
427             'get() returned more than one %s -- it returned %s!' % (
428                 self.model._meta.object_name,
429                 num if not limit or num < limit else 'more than %s' % (limit - 1),
430             )
431         )
432 
433     def create(self, **kwargs):
434         """
435         Create a new object with the given kwargs, saving it to the database
436         and returning the created object.
437         """
438         obj = self.model(**kwargs)
439         self._for_write = True
440         obj.save(force_insert=True, using=self.db)
441         return obj
442 
443     def _populate_pk_values(self, objs):
444         for obj in objs:
445             if obj.pk is None:
446                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
447 
448     def bulk_create(self, objs, batch_size=None, ignore_conflicts=False):
449         """
450         Insert each of the instances into the database. Do *not* call
451         save() on each of the instances, do not send any pre/post_save
452         signals, and do not set the primary key attribute if it is an
453         autoincrement field (except if features.can_return_rows_from_bulk_insert=True).
454         Multi-table models are not supported.
455         """
456         # When you bulk insert you don't get the primary keys back (if it's an
457         # autoincrement, except if can_return_rows_from_bulk_insert=True), so
458         # you can't insert into the child tables which references this. There
459         # are two workarounds:
460         # 1) This could be implemented if you didn't have an autoincrement pk
461         # 2) You could do it by doing O(n) normal inserts into the parent
462         #    tables to get the primary keys back and then doing a single bulk
463         #    insert into the childmost table.
464         # We currently set the primary keys on the objects when using
465         # PostgreSQL via the RETURNING ID clause. It should be possible for
466         # Oracle as well, but the semantics for extracting the primary keys is
467         # trickier so it's not done yet.
468         assert batch_size is None or batch_size > 0
469         # Check that the parents share the same concrete model with the our
470         # model to detect the inheritance pattern ConcreteGrandParent ->
471         # MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy
472         # would not identify that case as involving multiple tables.
473         for parent in self.model._meta.get_parent_list():
474             if parent._meta.concrete_model is not self.model._meta.concrete_model:
475                 raise ValueError("Can't bulk create a multi-table inherited model")
476         if not objs:
477             return objs
478         self._for_write = True
479         connection = connections[self.db]
480         opts = self.model._meta
481         fields = opts.concrete_fields
482         objs = list(objs)
483         self._populate_pk_values(objs)
484         with transaction.atomic(using=self.db, savepoint=False):
485             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
486             if objs_with_pk:
487                 returned_columns = self._batched_insert(
488                     objs_with_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
489                 )
490                 for obj_with_pk, results in zip(objs_with_pk, returned_columns):
491                     for result, field in zip(results, opts.db_returning_fields):
492                         if field != opts.pk:
493                             setattr(obj_with_pk, field.attname, result)
494                 for obj_with_pk in objs_with_pk:
495                     obj_with_pk._state.adding = False
496                     obj_with_pk._state.db = self.db
497             if objs_without_pk:
498                 fields = [f for f in fields if not isinstance(f, AutoField)]
499                 returned_columns = self._batched_insert(
500                     objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
501                 )
502                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
503                     assert len(returned_columns) == len(objs_without_pk)
504                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
505                     for result, field in zip(results, opts.db_returning_fields):
506                         setattr(obj_without_pk, field.attname, result)
507                     obj_without_pk._state.adding = False
508                     obj_without_pk._state.db = self.db
509 
510         return objs
511 
512     def bulk_update(self, objs, fields, batch_size=None):
513         """
514         Update the given fields in each of the given objects in the database.
515         """
516         if batch_size is not None and batch_size < 0:
517             raise ValueError('Batch size must be a positive integer.')
518         if not fields:
519             raise ValueError('Field names must be given to bulk_update().')
520         objs = tuple(objs)
521         if any(obj.pk is None for obj in objs):
522             raise ValueError('All bulk_update() objects must have a primary key set.')
523         fields = [self.model._meta.get_field(name) for name in fields]
524         if any(not f.concrete or f.many_to_many for f in fields):
525             raise ValueError('bulk_update() can only be used with concrete fields.')
526         if any(f.primary_key for f in fields):
527             raise ValueError('bulk_update() cannot be used with primary key fields.')
528         if not objs:
529             return
530         # PK is used twice in the resulting update query, once in the filter
531         # and once in the WHEN. Each field will also have one CAST.
532         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)
533         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
534         requires_casting = connections[self.db].features.requires_casted_case_in_updates
535         batches = (objs[i:i + batch_size] for i in range(0, len(objs), batch_size))
536         updates = []
537         for batch_objs in batches:
538             update_kwargs = {}
539             for field in fields:
540                 when_statements = []
541                 for obj in batch_objs:
542                     attr = getattr(obj, field.attname)
543                     if not isinstance(attr, Expression):
544                         attr = Value(attr, output_field=field)
545                     when_statements.append(When(pk=obj.pk, then=attr))
546                 case_statement = Case(*when_statements, output_field=field)
547                 if requires_casting:
548                     case_statement = Cast(case_statement, output_field=field)
549                 update_kwargs[field.attname] = case_statement
550             updates.append(([obj.pk for obj in batch_objs], update_kwargs))
551         with transaction.atomic(using=self.db, savepoint=False):
552             for pks, update_kwargs in updates:
553                 self.filter(pk__in=pks).update(**update_kwargs)
554     bulk_update.alters_data = True
555 
556     def get_or_create(self, defaults=None, **kwargs):
557         """
558         Look up an object with the given kwargs, creating one if necessary.
559         Return a tuple of (object, created), where created is a boolean
560         specifying whether an object was created.
561         """
562         # The get() needs to be targeted at the write database in order
563         # to avoid potential transaction consistency problems.
564         self._for_write = True
565         try:
566             return self.get(**kwargs), False
567         except self.model.DoesNotExist:
568             params = self._extract_model_params(defaults, **kwargs)
569             # Try to create an object using passed params.
570             try:
571                 with transaction.atomic(using=self.db):
572                     params = dict(resolve_callables(params))
573                     return self.create(**params), True
574             except IntegrityError:
575                 try:
576                     return self.get(**kwargs), False
577                 except self.model.DoesNotExist:
578                     pass
579                 raise
580 
581     def update_or_create(self, defaults=None, **kwargs):
582         """
583         Look up an object with the given kwargs, updating one with defaults
584         if it exists, otherwise create a new one.
585         Return a tuple (object, created), where created is a boolean
586         specifying whether an object was created.
587         """
588         defaults = defaults or {}
589         self._for_write = True
590         with transaction.atomic(using=self.db):
591             # Lock the row so that a concurrent update is blocked until
592             # update_or_create() has performed its save.
593             obj, created = self.select_for_update().get_or_create(defaults, **kwargs)
594             if created:
595                 return obj, created
596             for k, v in resolve_callables(defaults):
597                 setattr(obj, k, v)
598             obj.save(using=self.db)
599         return obj, False
600 
601     def _extract_model_params(self, defaults, **kwargs):
602         """
603         Prepare `params` for creating a model instance based on the given
604         kwargs; for use by get_or_create().
605         """
606         defaults = defaults or {}
607         params = {k: v for k, v in kwargs.items() if LOOKUP_SEP not in k}
608         params.update(defaults)
609         property_names = self.model._meta._property_names
610         invalid_params = []
611         for param in params:
612             try:
613                 self.model._meta.get_field(param)
614             except exceptions.FieldDoesNotExist:
615                 # It's okay to use a model's property if it has a setter.
616                 if not (param in property_names and getattr(self.model, param).fset):
617                     invalid_params.append(param)
618         if invalid_params:
619             raise exceptions.FieldError(
620                 "Invalid field name(s) for model %s: '%s'." % (
621                     self.model._meta.object_name,
622                     "', '".join(sorted(invalid_params)),
623                 ))
624         return params
625 
626     def _earliest(self, *fields):
627         """
628         Return the earliest object according to fields (if given) or by the
629         model's Meta.get_latest_by.
630         """
631         if fields:
632             order_by = fields
633         else:
634             order_by = getattr(self.model._meta, 'get_latest_by')
635             if order_by and not isinstance(order_by, (tuple, list)):
636                 order_by = (order_by,)
637         if order_by is None:
638             raise ValueError(
639                 "earliest() and latest() require either fields as positional "
640                 "arguments or 'get_latest_by' in the model's Meta."
641             )
642 
643         assert not self.query.is_sliced, \
644             "Cannot change a query once a slice has been taken."
645         obj = self._chain()
646         obj.query.set_limits(high=1)
647         obj.query.clear_ordering(force_empty=True)
648         obj.query.add_ordering(*order_by)
649         return obj.get()
650 
651     def earliest(self, *fields):
652         return self._earliest(*fields)
653 
654     def latest(self, *fields):
655         return self.reverse()._earliest(*fields)
656 
657     def first(self):
658         """Return the first object of a query or None if no match is found."""
659         for obj in (self if self.ordered else self.order_by('pk'))[:1]:
660             return obj
661 
662     def last(self):
663         """Return the last object of a query or None if no match is found."""
664         for obj in (self.reverse() if self.ordered else self.order_by('-pk'))[:1]:
665             return obj
666 
667     def in_bulk(self, id_list=None, *, field_name='pk'):
668         """
669         Return a dictionary mapping each of the given IDs to the object with
670         that ID. If `id_list` isn't provided, evaluate the entire QuerySet.
671         """
672         assert not self.query.is_sliced, \
673             "Cannot use 'limit' or 'offset' with in_bulk"
674         opts = self.model._meta
675         unique_fields = [
676             constraint.fields[0]
677             for constraint in opts.total_unique_constraints
678             if len(constraint.fields) == 1
679         ]
680         if (
681             field_name != 'pk' and
682             not opts.get_field(field_name).unique and
683             field_name not in unique_fields and
684             not self.query.distinct_fields == (field_name,)
685         ):
686             raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
687         if id_list is not None:
688             if not id_list:
689                 return {}
690             filter_key = '{}__in'.format(field_name)
691             batch_size = connections[self.db].features.max_query_params
692             id_list = tuple(id_list)
693             # If the database has a limit on the number of query parameters
694             # (e.g. SQLite), retrieve objects in batches if necessary.
695             if batch_size and batch_size < len(id_list):
696                 qs = ()
697                 for offset in range(0, len(id_list), batch_size):
698                     batch = id_list[offset:offset + batch_size]
699                     qs += tuple(self.filter(**{filter_key: batch}).order_by())
700             else:
701                 qs = self.filter(**{filter_key: id_list}).order_by()
702         else:
703             qs = self._chain()
704         return {getattr(obj, field_name): obj for obj in qs}
705 
706     def delete(self):
707         """Delete the records in the current QuerySet."""
708         self._not_support_combined_queries('delete')
709         assert not self.query.is_sliced, \
710             "Cannot use 'limit' or 'offset' with delete."
711 
712         if self._fields is not None:
713             raise TypeError("Cannot call delete() after .values() or .values_list()")
714 
715         del_query = self._chain()
716 
717         # The delete is actually 2 queries - one to find related objects,
718         # and one to delete. Make sure that the discovery of related
719         # objects is performed on the same database as the deletion.
720         del_query._for_write = True
721 
722         # Disable non-supported fields.
723         del_query.query.select_for_update = False
724         del_query.query.select_related = False
725         del_query.query.clear_ordering(force_empty=True)
726 
727         collector = Collector(using=del_query.db)
728         collector.collect(del_query)
729         deleted, _rows_count = collector.delete()
730 
731         # Clear the result cache, in case this QuerySet gets reused.
732         self._result_cache = None
733         return deleted, _rows_count
734 
735     delete.alters_data = True
736     delete.queryset_only = True
737 
738     def _raw_delete(self, using):
739         """
740         Delete objects found from the given queryset in single direct SQL
741         query. No signals are sent and there is no protection for cascades.
742         """
743         query = self.query.clone()
744         query.__class__ = sql.DeleteQuery
745         cursor = query.get_compiler(using).execute_sql(CURSOR)
746         if cursor:
747             with cursor:
748                 return cursor.rowcount
749         return 0
750     _raw_delete.alters_data = True
751 
752     def update(self, **kwargs):
753         """
754         Update all elements in the current QuerySet, setting all the given
755         fields to the appropriate values.
756         """
757         self._not_support_combined_queries('update')
758         assert not self.query.is_sliced, \
759             "Cannot update a query once a slice has been taken."
760         self._for_write = True
761         query = self.query.chain(sql.UpdateQuery)
762         query.add_update_values(kwargs)
763         # Clear any annotations so that they won't be present in subqueries.
764         query.annotations = {}
765         with transaction.mark_for_rollback_on_error(using=self.db):
766             rows = query.get_compiler(self.db).execute_sql(CURSOR)
767         self._result_cache = None
768         return rows
769     update.alters_data = True
770 
771     def _update(self, values):
772         """
773         A version of update() that accepts field objects instead of field names.
774         Used primarily for model saving and not intended for use by general
775         code (it requires too much poking around at model internals to be
776         useful at that level).
777         """
778         assert not self.query.is_sliced, \
779             "Cannot update a query once a slice has been taken."
780         query = self.query.chain(sql.UpdateQuery)
781         query.add_update_fields(values)
782         # Clear any annotations so that they won't be present in subqueries.
783         query.annotations = {}
784         self._result_cache = None
785         return query.get_compiler(self.db).execute_sql(CURSOR)
786     _update.alters_data = True
787     _update.queryset_only = False
788 
789     def exists(self):
790         if self._result_cache is None:
791             return self.query.has_results(using=self.db)
792         return bool(self._result_cache)
793 
794     def _prefetch_related_objects(self):
795         # This method can only be called once the result cache has been filled.
796         prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups)
797         self._prefetch_done = True
798 
799     def explain(self, *, format=None, **options):
800         return self.query.explain(using=self.db, format=format, **options)
801 
802     ##################################################
803     # PUBLIC METHODS THAT RETURN A QUERYSET SUBCLASS #
804     ##################################################
805 
806     def raw(self, raw_query, params=None, translations=None, using=None):
807         if using is None:
808             using = self.db
809         qs = RawQuerySet(raw_query, model=self.model, params=params, translations=translations, using=using)
810         qs._prefetch_related_lookups = self._prefetch_related_lookups[:]
811         return qs
812 
813     def _values(self, *fields, **expressions):
814         clone = self._chain()
815         if expressions:
816             clone = clone.annotate(**expressions)
817         clone._fields = fields
818         clone.query.set_values(fields)
819         return clone
820 
821     def values(self, *fields, **expressions):
822         fields += tuple(expressions)
823         clone = self._values(*fields, **expressions)
824         clone._iterable_class = ValuesIterable
825         return clone
826 
827     def values_list(self, *fields, flat=False, named=False):
828         if flat and named:
829             raise TypeError("'flat' and 'named' can't be used together.")
830         if flat and len(fields) > 1:
831             raise TypeError("'flat' is not valid when values_list is called with more than one field.")
832 
833         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
834         _fields = []
835         expressions = {}
836         counter = 1
837         for field in fields:
838             if hasattr(field, 'resolve_expression'):
839                 field_id_prefix = getattr(field, 'default_alias', field.__class__.__name__.lower())
840                 while True:
841                     field_id = field_id_prefix + str(counter)
842                     counter += 1
843                     if field_id not in field_names:
844                         break
845                 expressions[field_id] = field
846                 _fields.append(field_id)
847             else:
848                 _fields.append(field)
849 
850         clone = self._values(*_fields, **expressions)
851         clone._iterable_class = (
852             NamedValuesListIterable if named
853             else FlatValuesListIterable if flat
854             else ValuesListIterable
855         )
856         return clone
857 
858     def dates(self, field_name, kind, order='ASC'):
859         """
860         Return a list of date objects representing all available dates for
861         the given field_name, scoped to 'kind'.
862         """
863         assert kind in ('year', 'month', 'week', 'day'), \
864             "'kind' must be one of 'year', 'month', 'week', or 'day'."
865         assert order in ('ASC', 'DESC'), \
866             "'order' must be either 'ASC' or 'DESC'."
867         return self.annotate(
868             datefield=Trunc(field_name, kind, output_field=DateField()),
869             plain_field=F(field_name)
870         ).values_list(
871             'datefield', flat=True
872         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datefield')
873 
874     def datetimes(self, field_name, kind, order='ASC', tzinfo=None, is_dst=None):
875         """
876         Return a list of datetime objects representing all available
877         datetimes for the given field_name, scoped to 'kind'.
878         """
879         assert kind in ('year', 'month', 'week', 'day', 'hour', 'minute', 'second'), \
880             "'kind' must be one of 'year', 'month', 'week', 'day', 'hour', 'minute', or 'second'."
881         assert order in ('ASC', 'DESC'), \
882             "'order' must be either 'ASC' or 'DESC'."
883         if settings.USE_TZ:
884             if tzinfo is None:
885                 tzinfo = timezone.get_current_timezone()
886         else:
887             tzinfo = None
888         return self.annotate(
889             datetimefield=Trunc(
890                 field_name,
891                 kind,
892                 output_field=DateTimeField(),
893                 tzinfo=tzinfo,
894                 is_dst=is_dst,
895             ),
896             plain_field=F(field_name)
897         ).values_list(
898             'datetimefield', flat=True
899         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datetimefield')
900 
901     def none(self):
902         """Return an empty QuerySet."""
903         clone = self._chain()
904         clone.query.set_empty()
905         return clone
906 
907     ##################################################################
908     # PUBLIC METHODS THAT ALTER ATTRIBUTES AND RETURN A NEW QUERYSET #
909     ##################################################################
910 
911     def all(self):
912         """
913         Return a new QuerySet that is a copy of the current one. This allows a
914         QuerySet to proxy for a model manager in some cases.
915         """
916         return self._chain()
917 
918     def filter(self, *args, **kwargs):
919         """
920         Return a new QuerySet instance with the args ANDed to the existing
921         set.
922         """
923         self._not_support_combined_queries('filter')
924         return self._filter_or_exclude(False, args, kwargs)
925 
926     def exclude(self, *args, **kwargs):
927         """
928         Return a new QuerySet instance with NOT (args) ANDed to the existing
929         set.
930         """
931         self._not_support_combined_queries('exclude')
932         return self._filter_or_exclude(True, args, kwargs)
933 
934     def _filter_or_exclude(self, negate, args, kwargs):
935         if args or kwargs:
936             assert not self.query.is_sliced, \
937                 "Cannot filter a query once a slice has been taken."
938 
939         clone = self._chain()
940         if self._defer_next_filter:
941             self._defer_next_filter = False
942             clone._deferred_filter = negate, args, kwargs
943         else:
944             clone._filter_or_exclude_inplace(negate, args, kwargs)
945         return clone
946 
947     def _filter_or_exclude_inplace(self, negate, args, kwargs):
948         if negate:
949             self._query.add_q(~Q(*args, **kwargs))
950         else:
951             self._query.add_q(Q(*args, **kwargs))
952 
953     def complex_filter(self, filter_obj):
954         """
955         Return a new QuerySet instance with filter_obj added to the filters.
956 
957         filter_obj can be a Q object or a dictionary of keyword lookup
958         arguments.
959 
960         This exists to support framework features such as 'limit_choices_to',
961         and usually it will be more natural to use other methods.
962         """
963         if isinstance(filter_obj, Q):
964             clone = self._chain()
965             clone.query.add_q(filter_obj)
966             return clone
967         else:
968             return self._filter_or_exclude(False, args=(), kwargs=filter_obj)
969 
970     def _combinator_query(self, combinator, *other_qs, all=False):
971         # Clone the query to inherit the select list and everything
972         clone = self._chain()
973         # Clear limits and ordering so they can be reapplied
974         clone.query.clear_ordering(True)
975         clone.query.clear_limits()
976         clone.query.combined_queries = (self.query,) + tuple(qs.query for qs in other_qs)
977         clone.query.combinator = combinator
978         clone.query.combinator_all = all
979         return clone
980 
981     def union(self, *other_qs, all=False):
982         # If the query is an EmptyQuerySet, combine all nonempty querysets.
983         if isinstance(self, EmptyQuerySet):
984             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]
985             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self
986         return self._combinator_query('union', *other_qs, all=all)
987 
988     def intersection(self, *other_qs):
989         # If any query is an EmptyQuerySet, return it.
990         if isinstance(self, EmptyQuerySet):
991             return self
992         for other in other_qs:
993             if isinstance(other, EmptyQuerySet):
994                 return other
995         return self._combinator_query('intersection', *other_qs)
996 
997     def difference(self, *other_qs):
998         # If the query is an EmptyQuerySet, return it.
999         if isinstance(self, EmptyQuerySet):
1000             return self
1001         return self._combinator_query('difference', *other_qs)
1002 
1003     def select_for_update(self, nowait=False, skip_locked=False, of=(), no_key=False):
1004         """
1005         Return a new QuerySet instance that will select objects with a
1006         FOR UPDATE lock.
1007         """
1008         if nowait and skip_locked:
1009             raise ValueError('The nowait option cannot be used with skip_locked.')
1010         obj = self._chain()
1011         obj._for_write = True
1012         obj.query.select_for_update = True
1013         obj.query.select_for_update_nowait = nowait
1014         obj.query.select_for_update_skip_locked = skip_locked
1015         obj.query.select_for_update_of = of
1016         obj.query.select_for_no_key_update = no_key
1017         return obj
1018 
1019     def select_related(self, *fields):
1020         """
1021         Return a new QuerySet instance that will select related objects.
1022 
1023         If fields are specified, they must be ForeignKey fields and only those
1024         related objects are included in the selection.
1025 
1026         If select_related(None) is called, clear the list.
1027         """
1028         self._not_support_combined_queries('select_related')
1029         if self._fields is not None:
1030             raise TypeError("Cannot call select_related() after .values() or .values_list()")
1031 
1032         obj = self._chain()
1033         if fields == (None,):
1034             obj.query.select_related = False
1035         elif fields:
1036             obj.query.add_select_related(fields)
1037         else:
1038             obj.query.select_related = True
1039         return obj
1040 
1041     def prefetch_related(self, *lookups):
1042         """
1043         Return a new QuerySet instance that will prefetch the specified
1044         Many-To-One and Many-To-Many related objects when the QuerySet is
1045         evaluated.
1046 
1047         When prefetch_related() is called more than once, append to the list of
1048         prefetch lookups. If prefetch_related(None) is called, clear the list.
1049         """
1050         self._not_support_combined_queries('prefetch_related')
1051         clone = self._chain()
1052         if lookups == (None,):
1053             clone._prefetch_related_lookups = ()
1054         else:
1055             for lookup in lookups:
1056                 if isinstance(lookup, Prefetch):
1057                     lookup = lookup.prefetch_to
1058                 lookup = lookup.split(LOOKUP_SEP, 1)[0]
1059                 if lookup in self.query._filtered_relations:
1060                     raise ValueError('prefetch_related() is not supported with FilteredRelation.')
1061             clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups
1062         return clone
1063 
1064     def annotate(self, *args, **kwargs):
1065         """
1066         Return a query set in which the returned objects have been annotated
1067         with extra data or aggregations.
1068         """
1069         self._not_support_combined_queries('annotate')
1070         return self._annotate(args, kwargs, select=True)
1071 
1072     def alias(self, *args, **kwargs):
1073         """
1074         Return a query set with added aliases for extra data or aggregations.
1075         """
1076         self._not_support_combined_queries('alias')
1077         return self._annotate(args, kwargs, select=False)
1078 
1079     def _annotate(self, args, kwargs, select=True):
1080         self._validate_values_are_expressions(args + tuple(kwargs.values()), method_name='annotate')
1081         annotations = {}
1082         for arg in args:
1083             # The default_alias property may raise a TypeError.
1084             try:
1085                 if arg.default_alias in kwargs:
1086                     raise ValueError("The named annotation '%s' conflicts with the "
1087                                      "default name for another annotation."
1088                                      % arg.default_alias)
1089             except TypeError:
1090                 raise TypeError("Complex annotations require an alias")
1091             annotations[arg.default_alias] = arg
1092         annotations.update(kwargs)
1093 
1094         clone = self._chain()
1095         names = self._fields
1096         if names is None:
1097             names = set(chain.from_iterable(
1098                 (field.name, field.attname) if hasattr(field, 'attname') else (field.name,)
1099                 for field in self.model._meta.get_fields()
1100             ))
1101 
1102         for alias, annotation in annotations.items():
1103             if alias in names:
1104                 raise ValueError("The annotation '%s' conflicts with a field on "
1105                                  "the model." % alias)
1106             if isinstance(annotation, FilteredRelation):
1107                 clone.query.add_filtered_relation(annotation, alias)
1108             else:
1109                 clone.query.add_annotation(
1110                     annotation, alias, is_summary=False, select=select,
1111                 )
1112         for alias, annotation in clone.query.annotations.items():
1113             if alias in annotations and annotation.contains_aggregate:
1114                 if clone._fields is None:
1115                     clone.query.group_by = True
1116                 else:
1117                     clone.query.set_group_by()
1118                 break
1119 
1120         return clone
1121 
1122     def order_by(self, *field_names):
1123         """Return a new QuerySet instance with the ordering changed."""
1124         assert not self.query.is_sliced, \
1125             "Cannot reorder a query once a slice has been taken."
1126         obj = self._chain()
1127         obj.query.clear_ordering(force_empty=False)
1128         obj.query.add_ordering(*field_names)
1129         return obj
1130 
1131     def distinct(self, *field_names):
1132         """
1133         Return a new QuerySet instance that will select only distinct results.
1134         """
1135         self._not_support_combined_queries('distinct')
1136         assert not self.query.is_sliced, \
1137             "Cannot create distinct fields once a slice has been taken."
1138         obj = self._chain()
1139         obj.query.add_distinct_fields(*field_names)
1140         return obj
1141 
1142     def extra(self, select=None, where=None, params=None, tables=None,
1143               order_by=None, select_params=None):
1144         """Add extra SQL fragments to the query."""
1145         self._not_support_combined_queries('extra')
1146         assert not self.query.is_sliced, \
1147             "Cannot change a query once a slice has been taken"
1148         clone = self._chain()
1149         clone.query.add_extra(select, select_params, where, params, tables, order_by)
1150         return clone
1151 
1152     def reverse(self):
1153         """Reverse the ordering of the QuerySet."""
1154         if self.query.is_sliced:
1155             raise TypeError('Cannot reverse a query once a slice has been taken.')
1156         clone = self._chain()
1157         clone.query.standard_ordering = not clone.query.standard_ordering
1158         return clone
1159 
1160     def defer(self, *fields):
1161         """
1162         Defer the loading of data for certain fields until they are accessed.
1163         Add the set of deferred fields to any existing set of deferred fields.
1164         The only exception to this is if None is passed in as the only
1165         parameter, in which case removal all deferrals.
1166         """
1167         self._not_support_combined_queries('defer')
1168         if self._fields is not None:
1169             raise TypeError("Cannot call defer() after .values() or .values_list()")
1170         clone = self._chain()
1171         if fields == (None,):
1172             clone.query.clear_deferred_loading()
1173         else:
1174             clone.query.add_deferred_loading(fields)
1175         return clone
1176 
1177     def only(self, *fields):
1178         """
1179         Essentially, the opposite of defer(). Only the fields passed into this
1180         method and that are not already specified as deferred are loaded
1181         immediately when the queryset is evaluated.
1182         """
1183         self._not_support_combined_queries('only')
1184         if self._fields is not None:
1185             raise TypeError("Cannot call only() after .values() or .values_list()")
1186         if fields == (None,):
1187             # Can only pass None to defer(), not only(), as the rest option.
1188             # That won't stop people trying to do this, so let's be explicit.
1189             raise TypeError("Cannot pass None as an argument to only().")
1190         for field in fields:
1191             field = field.split(LOOKUP_SEP, 1)[0]
1192             if field in self.query._filtered_relations:
1193                 raise ValueError('only() is not supported with FilteredRelation.')
1194         clone = self._chain()
1195         clone.query.add_immediate_loading(fields)
1196         return clone
1197 
1198     def using(self, alias):
1199         """Select which database this QuerySet should execute against."""
1200         clone = self._chain()
1201         clone._db = alias
1202         return clone
1203 
1204     ###################################
1205     # PUBLIC INTROSPECTION ATTRIBUTES #
1206     ###################################
1207 
1208     @property
1209     def ordered(self):
1210         """
1211         Return True if the QuerySet is ordered -- i.e. has an order_by()
1212         clause or a default ordering on the model (or is empty).
1213         """
1214         if isinstance(self, EmptyQuerySet):
1215             return True
1216         if self.query.extra_order_by or self.query.order_by:
1217             return True
1218         elif (
1219             self.query.default_ordering and
1220             self.query.get_meta().ordering and
1221             # A default ordering doesn't affect GROUP BY queries.
1222             not self.query.group_by
1223         ):
1224             return True
1225         else:
1226             return False
1227 
1228     @property
1229     def db(self):
1230         """Return the database used if this query is executed now."""
1231         if self._for_write:
1232             return self._db or router.db_for_write(self.model, **self._hints)
1233         return self._db or router.db_for_read(self.model, **self._hints)
1234 
1235     ###################
1236     # PRIVATE METHODS #
1237     ###################
1238 
1239     def _insert(self, objs, fields, returning_fields=None, raw=False, using=None, ignore_conflicts=False):
1240         """
1241         Insert a new record for the given model. This provides an interface to
1242         the InsertQuery class and is how Model.save() is implemented.
1243         """
1244         self._for_write = True
1245         if using is None:
1246             using = self.db
1247         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
1248         query.insert_values(fields, objs, raw=raw)
1249         return query.get_compiler(using=using).execute_sql(returning_fields)
1250     _insert.alters_data = True
1251     _insert.queryset_only = False
1252 
1253     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):
1254         """
1255         Helper method for bulk_create() to insert objs one batch at a time.
1256         """
1257         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
1258             raise NotSupportedError('This database backend does not support ignoring conflicts.')
1259         ops = connections[self.db].ops
1260         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
1261         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
1262         inserted_rows = []
1263         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
1264         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
1265             if bulk_return and not ignore_conflicts:
1266                 inserted_rows.extend(self._insert(
1267                     item, fields=fields, using=self.db,
1268                     returning_fields=self.model._meta.db_returning_fields,
1269                     ignore_conflicts=ignore_conflicts,
1270                 ))
1271             else:
1272                 self._insert(item, fields=fields, using=self.db, ignore_conflicts=ignore_conflicts)
1273         return inserted_rows
1274 
1275     def _chain(self, **kwargs):
1276         """
1277         Return a copy of the current QuerySet that's ready for another
1278         operation.
1279         """
1280         obj = self._clone()
1281         if obj._sticky_filter:
1282             obj.query.filter_is_sticky = True
1283             obj._sticky_filter = False
1284         obj.__dict__.update(kwargs)
1285         return obj
1286 
1287     def _clone(self):
1288         """
1289         Return a copy of the current QuerySet. A lightweight alternative
1290         to deepcopy().
1291         """
1292         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
1293         c._sticky_filter = self._sticky_filter
1294         c._for_write = self._for_write
1295         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
1296         c._known_related_objects = self._known_related_objects
1297         c._iterable_class = self._iterable_class
1298         c._fields = self._fields
1299         return c
1300 
1301     def _fetch_all(self):
1302         if self._result_cache is None:
1303             self._result_cache = list(self._iterable_class(self))
1304         if self._prefetch_related_lookups and not self._prefetch_done:
1305             self._prefetch_related_objects()
1306 
1307     def _next_is_sticky(self):
1308         """
1309         Indicate that the next filter call and the one following that should
1310         be treated as a single filter. This is only important when it comes to
1311         determining when to reuse tables for many-to-many filters. Required so
1312         that we can filter naturally on the results of related managers.
1313 
1314         This doesn't return a clone of the current QuerySet (it returns
1315         "self"). The method is only used internally and should be immediately
1316         followed by a filter() that does create a clone.
1317         """
1318         self._sticky_filter = True
1319         return self
1320 
1321     def _merge_sanity_check(self, other):
1322         """Check that two QuerySet classes may be merged."""
1323         if self._fields is not None and (
1324                 set(self.query.values_select) != set(other.query.values_select) or
1325                 set(self.query.extra_select) != set(other.query.extra_select) or
1326                 set(self.query.annotation_select) != set(other.query.annotation_select)):
1327             raise TypeError(
1328                 "Merging '%s' classes must involve the same values in each case."
1329                 % self.__class__.__name__
1330             )
1331 
1332     def _merge_known_related_objects(self, other):
1333         """
1334         Keep track of all known related objects from either QuerySet instance.
1335         """
1336         for field, objects in other._known_related_objects.items():
1337             self._known_related_objects.setdefault(field, {}).update(objects)
1338 
1339     def resolve_expression(self, *args, **kwargs):
1340         if self._fields and len(self._fields) > 1:
1341             # values() queryset can only be used as nested queries
1342             # if they are set up to select only a single field.
1343             raise TypeError('Cannot use multi-field values as a filter value.')
1344         query = self.query.resolve_expression(*args, **kwargs)
1345         query._db = self._db
1346         return query
1347     resolve_expression.queryset_only = True
1348 
1349     def _add_hints(self, **hints):
1350         """
1351         Update hinting information for use by routers. Add new key/values or
1352         overwrite existing key/values.
1353         """
1354         self._hints.update(hints)
1355 
1356     def _has_filters(self):
1357         """
1358         Check if this QuerySet has any filtering going on. This isn't
1359         equivalent with checking if all objects are present in results, for
1360         example, qs[1:]._has_filters() -> False.
1361         """
1362         return self.query.has_filters()
1363 
1364     @staticmethod
1365     def _validate_values_are_expressions(values, method_name):
1366         invalid_args = sorted(str(arg) for arg in values if not hasattr(arg, 'resolve_expression'))
1367         if invalid_args:
1368             raise TypeError(
1369                 'QuerySet.%s() received non-expression(s): %s.' % (
1370                     method_name,
1371                     ', '.join(invalid_args),
1372                 )
1373             )
1374 
1375     def _not_support_combined_queries(self, operation_name):
1376         if self.query.combinator:
1377             raise NotSupportedError(
1378                 'Calling QuerySet.%s() after %s() is not supported.'
1379                 % (operation_name, self.query.combinator)
1380             )

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>get_aggregation</method>
<code>
416     def get_aggregation(self, using, added_aggregate_names):
417         """
418         Return the dictionary with the values of the existing aggregations.
419         """
420         if not self.annotation_select:
421             return {}
422         existing_annotations = [
423             annotation for alias, annotation
424             in self.annotations.items()
425             if alias not in added_aggregate_names
426         ]
427         # Decide if we need to use a subquery.
428         #
429         # Existing annotations would cause incorrect results as get_aggregation()
430         # must produce just one result and thus must not use GROUP BY. But we
431         # aren't smart enough to remove the existing annotations from the
432         # query, so those would force us to use GROUP BY.
433         #
434         # If the query has limit or distinct, or uses set operations, then
435         # those operations must be done in a subquery so that the query
436         # aggregates on the limit and/or distinct results instead of applying
437         # the distinct and limit after the aggregation.
438         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or
439                 self.distinct or self.combinator):
440             from django.db.models.sql.subqueries import AggregateQuery
441             outer_query = AggregateQuery(self.model)
442             inner_query = self.clone()
443             inner_query.select_for_update = False
444             inner_query.select_related = False
445             inner_query.set_annotation_mask(self.annotation_select)
446             if not self.is_sliced and not self.distinct_fields:
447                 # Queries with distinct_fields need ordering and when a limit
448                 # is applied we must take the slice from the ordered query.
449                 # Otherwise no need for ordering.
450                 inner_query.clear_ordering(True)
451             if not inner_query.distinct:
452                 # If the inner query uses default select and it has some
453                 # aggregate annotations, then we must make sure the inner
454                 # query is grouped by the main model's primary key. However,
455                 # clearing the select clause can alter results if distinct is
456                 # used.
457                 has_existing_aggregate_annotations = any(
458                     annotation for annotation in existing_annotations
459                     if getattr(annotation, 'contains_aggregate', True)
460                 )
461                 if inner_query.default_cols and has_existing_aggregate_annotations:
462                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
463                 inner_query.default_cols = False
464 
465             relabels = {t: 'subquery' for t in inner_query.alias_map}
466             relabels[None] = 'subquery'
467             # Remove any aggregates marked for reduction from the subquery
468             # and move them to the outer AggregateQuery.
469             col_cnt = 0
470             for alias, expression in list(inner_query.annotation_select.items()):
471                 annotation_select_mask = inner_query.annotation_select_mask
472                 if expression.is_summary:
473                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
474                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
475                     del inner_query.annotations[alias]
476                     annotation_select_mask.remove(alias)
477                 # Make sure the annotation_select wont use cached results.
478                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)
479             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
480                 # In case of Model.objects[0:3].count(), there would be no
481                 # field selected in the inner query, yet we must use a subquery.
482                 # So, make sure at least one field is selected.
483                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
484             try:
485                 outer_query.add_subquery(inner_query, using)
486             except EmptyResultSet:
487                 return {
488                     alias: None
489                     for alias in outer_query.annotation_select
490                 }
491         else:
492             outer_query = self
493             self.select = ()
494             self.default_cols = False
495             self.extra = {}
496 
497         outer_query.clear_ordering(True)
498         outer_query.clear_limits()
499         outer_query.select_for_update = False
500         outer_query.select_related = False
501         compiler = outer_query.get_compiler(using)
502         result = compiler.execute_sql(SINGLE)
503         if result is None:
504             result = [None] * len(outer_query.annotation_select)
505 
506         converters = compiler.get_converters(outer_query.annotation_select.values())
507         result = next(compiler.apply_converters((result,), converters))
508 
509         return dict(zip(outer_query.annotation_select, result))

</code><intended_behavior>This method must be inspected and possibly revised to ensure that it properly includes and references annotated fields in the aggregation phase. The bug fix should allow the method to check if an aggregated field has an alias provided by an earlier annotation and use that alias in the SQL construction. The method should avoid losing the context of annotations when translating queryset operations into SQL, particularly ensuring that aliases are used instead of original field names when those fields have been renamed through annotation. This correction would prevent errors when the database engine tries to execute the generated SQL command that refers to an incorrectly named or non-existent field.</intended_behavior>, <file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>None</method>
<code>
136 class Query(BaseExpression):
137     """A single SQL query."""
138 
139     alias_prefix = 'T'
140     subq_aliases = frozenset([alias_prefix])
141 
142     compiler = 'SQLCompiler'
143 
144     def __init__(self, model, where=WhereNode, alias_cols=True):
145         self.model = model
146         self.alias_refcount = {}
147         # alias_map is the most important data structure regarding joins.
148         # It's used for recording which joins exist in the query and what
149         # types they are. The key is the alias of the joined table (possibly
150         # the table name) and the value is a Join-like object (see
151         # sql.datastructures.Join for more information).
152         self.alias_map = {}
153         # Whether to provide alias to columns during reference resolving.
154         self.alias_cols = alias_cols
155         # Sometimes the query contains references to aliases in outer queries (as
156         # a result of split_exclude). Correct alias quoting needs to know these
157         # aliases too.
158         # Map external tables to whether they are aliased.
159         self.external_aliases = {}
160         self.table_map = {}     # Maps table names to list of aliases.
161         self.default_cols = True
162         self.default_ordering = True
163         self.standard_ordering = True
164         self.used_aliases = set()
165         self.filter_is_sticky = False
166         self.subquery = False
167 
168         # SQL-related attributes
169         # Select and related select clauses are expressions to use in the
170         # SELECT clause of the query.
171         # The select is used for cases where we want to set up the select
172         # clause to contain other than default fields (values(), subqueries...)
173         # Note that annotations go to annotations dictionary.
174         self.select = ()
175         self.where = where()
176         self.where_class = where
177         # The group_by attribute can have one of the following forms:
178         #  - None: no group by at all in the query
179         #  - A tuple of expressions: group by (at least) those expressions.
180         #    String refs are also allowed for now.
181         #  - True: group by all select fields of the model
182         # See compiler.get_group_by() for details.
183         self.group_by = None
184         self.order_by = ()
185         self.low_mark, self.high_mark = 0, None  # Used for offset/limit
186         self.distinct = False
187         self.distinct_fields = ()
188         self.select_for_update = False
189         self.select_for_update_nowait = False
190         self.select_for_update_skip_locked = False
191         self.select_for_update_of = ()
192         self.select_for_no_key_update = False
193 
194         self.select_related = False
195         # Arbitrary limit for select_related to prevents infinite recursion.
196         self.max_depth = 5
197 
198         # Holds the selects defined by a call to values() or values_list()
199         # excluding annotation_select and extra_select.
200         self.values_select = ()
201 
202         # SQL annotation-related attributes
203         self.annotations = {}  # Maps alias -> Annotation Expression
204         self.annotation_select_mask = None
205         self._annotation_select_cache = None
206 
207         # Set combination attributes
208         self.combinator = None
209         self.combinator_all = False
210         self.combined_queries = ()
211 
212         # These are for extensions. The contents are more or less appended
213         # verbatim to the appropriate clause.
214         self.extra = {}  # Maps col_alias -> (col_sql, params).
215         self.extra_select_mask = None
216         self._extra_select_cache = None
217 
218         self.extra_tables = ()
219         self.extra_order_by = ()
220 
221         # A tuple that is a set of model field names and either True, if these
222         # are the fields to defer, or False if these are the only fields to
223         # load.
224         self.deferred_loading = (frozenset(), True)
225 
226         self._filtered_relations = {}
227 
228         self.explain_query = False
229         self.explain_format = None
230         self.explain_options = {}
231 
232     @property
233     def output_field(self):
234         if len(self.select) == 1:
235             select = self.select[0]
236             return getattr(select, 'target', None) or select.field
237         elif len(self.annotation_select) == 1:
238             return next(iter(self.annotation_select.values())).output_field
239 
240     @property
241     def has_select_fields(self):
242         return bool(self.select or self.annotation_select_mask or self.extra_select_mask)
243 
244     @cached_property
245     def base_table(self):
246         for alias in self.alias_map:
247             return alias
248 
249     def __str__(self):
250         """
251         Return the query as a string of SQL with the parameter values
252         substituted in (use sql_with_params() to see the unsubstituted string).
253 
254         Parameter values won't necessarily be quoted correctly, since that is
255         done by the database interface at execution time.
256         """
257         sql, params = self.sql_with_params()
258         return sql % params
259 
260     def sql_with_params(self):
261         """
262         Return the query as an SQL string and the parameters that will be
263         substituted into the query.
264         """
265         return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()
266 
267     def __deepcopy__(self, memo):
268         """Limit the amount of work when a Query is deepcopied."""
269         result = self.clone()
270         memo[id(self)] = result
271         return result
272 
273     def get_compiler(self, using=None, connection=None):
274         if using is None and connection is None:
275             raise ValueError("Need either using or connection")
276         if using:
277             connection = connections[using]
278         return connection.ops.compiler(self.compiler)(self, connection, using)
279 
280     def get_meta(self):
281         """
282         Return the Options instance (the model._meta) from which to start
283         processing. Normally, this is self.model._meta, but it can be changed
284         by subclasses.
285         """
286         return self.model._meta
287 
288     def clone(self):
289         """
290         Return a copy of the current Query. A lightweight alternative to
291         to deepcopy().
292         """
293         obj = Empty()
294         obj.__class__ = self.__class__
295         # Copy references to everything.
296         obj.__dict__ = self.__dict__.copy()
297         # Clone attributes that can't use shallow copy.
298         obj.alias_refcount = self.alias_refcount.copy()
299         obj.alias_map = self.alias_map.copy()
300         obj.external_aliases = self.external_aliases.copy()
301         obj.table_map = self.table_map.copy()
302         obj.where = self.where.clone()
303         obj.annotations = self.annotations.copy()
304         if self.annotation_select_mask is None:
305             obj.annotation_select_mask = None
306         else:
307             obj.annotation_select_mask = self.annotation_select_mask.copy()
308         obj.combined_queries = tuple(query.clone() for query in self.combined_queries)
309         # _annotation_select_cache cannot be copied, as doing so breaks the
310         # (necessary) state in which both annotations and
311         # _annotation_select_cache point to the same underlying objects.
312         # It will get re-populated in the cloned queryset the next time it's
313         # used.
314         obj._annotation_select_cache = None
315         obj.extra = self.extra.copy()
316         if self.extra_select_mask is None:
317             obj.extra_select_mask = None
318         else:
319             obj.extra_select_mask = self.extra_select_mask.copy()
320         if self._extra_select_cache is None:
321             obj._extra_select_cache = None
322         else:
323             obj._extra_select_cache = self._extra_select_cache.copy()
324         if self.select_related is not False:
325             # Use deepcopy because select_related stores fields in nested
326             # dicts.
327             obj.select_related = copy.deepcopy(obj.select_related)
328         if 'subq_aliases' in self.__dict__:
329             obj.subq_aliases = self.subq_aliases.copy()
330         obj.used_aliases = self.used_aliases.copy()
331         obj._filtered_relations = self._filtered_relations.copy()
332         # Clear the cached_property
333         try:
334             del obj.base_table
335         except AttributeError:
336             pass
337         return obj
338 
339     def chain(self, klass=None):
340         """
341         Return a copy of the current Query that's ready for another operation.
342         The klass argument changes the type of the Query, e.g. UpdateQuery.
343         """
344         obj = self.clone()
345         if klass and obj.__class__ != klass:
346             obj.__class__ = klass
347         if not obj.filter_is_sticky:
348             obj.used_aliases = set()
349         obj.filter_is_sticky = False
350         if hasattr(obj, '_setup_query'):
351             obj._setup_query()
352         return obj
353 
354     def relabeled_clone(self, change_map):
355         clone = self.clone()
356         clone.change_aliases(change_map)
357         return clone
358 
359     def _get_col(self, target, field, alias):
360         if not self.alias_cols:
361             alias = None
362         return target.get_col(alias, field)
363 
364     def rewrite_cols(self, annotation, col_cnt):
365         # We must make sure the inner query has the referred columns in it.
366         # If we are aggregating over an annotation, then Django uses Ref()
367         # instances to note this. However, if we are annotating over a column
368         # of a related model, then it might be that column isn't part of the
369         # SELECT clause of the inner query, and we must manually make sure
370         # the column is selected. An example case is:
371         #    .aggregate(Sum('author__awards'))
372         # Resolving this expression results in a join to author, but there
373         # is no guarantee the awards column of author is in the select clause
374         # of the query. Thus we must manually add the column to the inner
375         # query.
376         orig_exprs = annotation.get_source_expressions()
377         new_exprs = []
378         for expr in orig_exprs:
379             # FIXME: These conditions are fairly arbitrary. Identify a better
380             # method of having expressions decide which code path they should
381             # take.
382             if isinstance(expr, Ref):
383                 # Its already a Ref to subquery (see resolve_ref() for
384                 # details)
385                 new_exprs.append(expr)
386             elif isinstance(expr, (WhereNode, Lookup)):
387                 # Decompose the subexpressions further. The code here is
388                 # copied from the else clause, but this condition must appear
389                 # before the contains_aggregate/is_summary condition below.
390                 new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
391                 new_exprs.append(new_expr)
392             else:
393                 # Reuse aliases of expressions already selected in subquery.
394                 for col_alias, selected_annotation in self.annotation_select.items():
395                     if selected_annotation is expr:
396                         new_expr = Ref(col_alias, expr)
397                         break
398                 else:
399                     # An expression that is not selected the subquery.
400                     if isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):
401                         # Reference column or another aggregate. Select it
402                         # under a non-conflicting alias.
403                         col_cnt += 1
404                         col_alias = '__col%d' % col_cnt
405                         self.annotations[col_alias] = expr
406                         self.append_annotation_mask([col_alias])
407                         new_expr = Ref(col_alias, expr)
408                     else:
409                         # Some other expression not referencing database values
410                         # directly. Its subexpression might contain Cols.
411                         new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
412                 new_exprs.append(new_expr)
413         annotation.set_source_expressions(new_exprs)
414         return annotation, col_cnt
415 
416     def get_aggregation(self, using, added_aggregate_names):
417         """
418         Return the dictionary with the values of the existing aggregations.
419         """
420         if not self.annotation_select:
421             return {}
422         existing_annotations = [
423             annotation for alias, annotation
424             in self.annotations.items()
425             if alias not in added_aggregate_names
426         ]
427         # Decide if we need to use a subquery.
428         #
429         # Existing annotations would cause incorrect results as get_aggregation()
430         # must produce just one result and thus must not use GROUP BY. But we
431         # aren't smart enough to remove the existing annotations from the
432         # query, so those would force us to use GROUP BY.
433         #
434         # If the query has limit or distinct, or uses set operations, then
435         # those operations must be done in a subquery so that the query
436         # aggregates on the limit and/or distinct results instead of applying
437         # the distinct and limit after the aggregation.
438         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or
439                 self.distinct or self.combinator):
440             from django.db.models.sql.subqueries import AggregateQuery
441             outer_query = AggregateQuery(self.model)
442             inner_query = self.clone()
443             inner_query.select_for_update = False
444             inner_query.select_related = False
445             inner_query.set_annotation_mask(self.annotation_select)
446             if not self.is_sliced and not self.distinct_fields:
447                 # Queries with distinct_fields need ordering and when a limit
448                 # is applied we must take the slice from the ordered query.
449                 # Otherwise no need for ordering.
450                 inner_query.clear_ordering(True)
451             if not inner_query.distinct:
452                 # If the inner query uses default select and it has some
453                 # aggregate annotations, then we must make sure the inner
454                 # query is grouped by the main model's primary key. However,
455                 # clearing the select clause can alter results if distinct is
456                 # used.
457                 has_existing_aggregate_annotations = any(
458                     annotation for annotation in existing_annotations
459                     if getattr(annotation, 'contains_aggregate', True)
460                 )
461                 if inner_query.default_cols and has_existing_aggregate_annotations:
462                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
463                 inner_query.default_cols = False
464 
465             relabels = {t: 'subquery' for t in inner_query.alias_map}
466             relabels[None] = 'subquery'
467             # Remove any aggregates marked for reduction from the subquery
468             # and move them to the outer AggregateQuery.
469             col_cnt = 0
470             for alias, expression in list(inner_query.annotation_select.items()):
471                 annotation_select_mask = inner_query.annotation_select_mask
472                 if expression.is_summary:
473                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
474                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
475                     del inner_query.annotations[alias]
476                     annotation_select_mask.remove(alias)
477                 # Make sure the annotation_select wont use cached results.
478                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)
479             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
480                 # In case of Model.objects[0:3].count(), there would be no
481                 # field selected in the inner query, yet we must use a subquery.
482                 # So, make sure at least one field is selected.
483                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
484             try:
485                 outer_query.add_subquery(inner_query, using)
486             except EmptyResultSet:
487                 return {
488                     alias: None
489                     for alias in outer_query.annotation_select
490                 }
491         else:
492             outer_query = self
493             self.select = ()
494             self.default_cols = False
495             self.extra = {}
496 
497         outer_query.clear_ordering(True)
498         outer_query.clear_limits()
499         outer_query.select_for_update = False
500         outer_query.select_related = False
501         compiler = outer_query.get_compiler(using)
502         result = compiler.execute_sql(SINGLE)
503         if result is None:
504             result = [None] * len(outer_query.annotation_select)
505 
506         converters = compiler.get_converters(outer_query.annotation_select.values())
507         result = next(compiler.apply_converters((result,), converters))
508 
509         return dict(zip(outer_query.annotation_select, result))
510 
511     def get_count(self, using):
512         """
513         Perform a COUNT() query using the current filter constraints.
514         """
515         obj = self.clone()
516         obj.add_annotation(Count('*'), alias='__count', is_summary=True)
517         number = obj.get_aggregation(using, ['__count'])['__count']
518         if number is None:
519             number = 0
520         return number
521 
522     def has_filters(self):
523         return self.where
524 
525     def exists(self):
526         q = self.clone()
527         if not q.distinct:
528             if q.group_by is True:
529                 q.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
530                 # Disable GROUP BY aliases to avoid orphaning references to the
531                 # SELECT clause which is about to be cleared.
532                 q.set_group_by(allow_aliases=False)
533             q.clear_select_clause()
534         q.clear_ordering(True)
535         q.set_limits(high=1)
536         q.add_extra({'a': 1}, None, None, None, None, None)
537         q.set_extra_mask(['a'])
538         return q
539 
540     def has_results(self, using):
541         q = self.exists()
542         compiler = q.get_compiler(using=using)
543         return compiler.has_results()
544 
545     def explain(self, using, format=None, **options):
546         q = self.clone()
547         q.explain_query = True
548         q.explain_format = format
549         q.explain_options = options
550         compiler = q.get_compiler(using=using)
551         return '\n'.join(compiler.explain_query())
552 
553     def combine(self, rhs, connector):
554         """
555         Merge the 'rhs' query into the current one (with any 'rhs' effects
556         being applied *after* (that is, "to the right of") anything in the
557         current query. 'rhs' is not modified during a call to this function.
558 
559         The 'connector' parameter describes how to connect filters from the
560         'rhs' query.
561         """
562         assert self.model == rhs.model, \
563             "Cannot combine queries on two different base models."
564         assert not self.is_sliced, \
565             "Cannot combine queries once a slice has been taken."
566         assert self.distinct == rhs.distinct, \
567             "Cannot combine a unique query with a non-unique query."
568         assert self.distinct_fields == rhs.distinct_fields, \
569             "Cannot combine queries with different distinct fields."
570 
571         # Work out how to relabel the rhs aliases, if necessary.
572         change_map = {}
573         conjunction = (connector == AND)
574 
575         # Determine which existing joins can be reused. When combining the
576         # query with AND we must recreate all joins for m2m filters. When
577         # combining with OR we can reuse joins. The reason is that in AND
578         # case a single row can't fulfill a condition like:
579         #     revrel__col=1 & revrel__col=2
580         # But, there might be two different related rows matching this
581         # condition. In OR case a single True is enough, so single row is
582         # enough, too.
583         #
584         # Note that we will be creating duplicate joins for non-m2m joins in
585         # the AND case. The results will be correct but this creates too many
586         # joins. This is something that could be fixed later on.
587         reuse = set() if conjunction else set(self.alias_map)
588         # Base table must be present in the query - this is the same
589         # table on both sides.
590         self.get_initial_alias()
591         joinpromoter = JoinPromoter(connector, 2, False)
592         joinpromoter.add_votes(
593             j for j in self.alias_map if self.alias_map[j].join_type == INNER)
594         rhs_votes = set()
595         # Now, add the joins from rhs query into the new query (skipping base
596         # table).
597         rhs_tables = list(rhs.alias_map)[1:]
598         for alias in rhs_tables:
599             join = rhs.alias_map[alias]
600             # If the left side of the join was already relabeled, use the
601             # updated alias.
602             join = join.relabeled_clone(change_map)
603             new_alias = self.join(join, reuse=reuse)
604             if join.join_type == INNER:
605                 rhs_votes.add(new_alias)
606             # We can't reuse the same join again in the query. If we have two
607             # distinct joins for the same connection in rhs query, then the
608             # combined query must have two joins, too.
609             reuse.discard(new_alias)
610             if alias != new_alias:
611                 change_map[alias] = new_alias
612             if not rhs.alias_refcount[alias]:
613                 # The alias was unused in the rhs query. Unref it so that it
614                 # will be unused in the new query, too. We have to add and
615                 # unref the alias so that join promotion has information of
616                 # the join type for the unused alias.
617                 self.unref_alias(new_alias)
618         joinpromoter.add_votes(rhs_votes)
619         joinpromoter.update_join_types(self)
620 
621         # Now relabel a copy of the rhs where-clause and add it to the current
622         # one.
623         w = rhs.where.clone()
624         w.relabel_aliases(change_map)
625         self.where.add(w, connector)
626 
627         # Selection columns and extra extensions are those provided by 'rhs'.
628         if rhs.select:
629             self.set_select([col.relabeled_clone(change_map) for col in rhs.select])
630         else:
631             self.select = ()
632 
633         if connector == OR:
634             # It would be nice to be able to handle this, but the queries don't
635             # really make sense (or return consistent value sets). Not worth
636             # the extra complexity when you can write a real query instead.
637             if self.extra and rhs.extra:
638                 raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")
639         self.extra.update(rhs.extra)
640         extra_select_mask = set()
641         if self.extra_select_mask is not None:
642             extra_select_mask.update(self.extra_select_mask)
643         if rhs.extra_select_mask is not None:
644             extra_select_mask.update(rhs.extra_select_mask)
645         if extra_select_mask:
646             self.set_extra_mask(extra_select_mask)
647         self.extra_tables += rhs.extra_tables
648 
649         # Ordering uses the 'rhs' ordering, unless it has none, in which case
650         # the current ordering is used.
651         self.order_by = rhs.order_by or self.order_by
652         self.extra_order_by = rhs.extra_order_by or self.extra_order_by
653 
654     def deferred_to_data(self, target, callback):
655         """
656         Convert the self.deferred_loading data structure to an alternate data
657         structure, describing the field that *will* be loaded. This is used to
658         compute the columns to select from the database and also by the
659         QuerySet class to work out which fields are being initialized on each
660         model. Models that have all their fields included aren't mentioned in
661         the result, only those that have field restrictions in place.
662 
663         The "target" parameter is the instance that is populated (in place).
664         The "callback" is a function that is called whenever a (model, field)
665         pair need to be added to "target". It accepts three parameters:
666         "target", and the model and list of fields being added for that model.
667         """
668         field_names, defer = self.deferred_loading
669         if not field_names:
670             return
671         orig_opts = self.get_meta()
672         seen = {}
673         must_include = {orig_opts.concrete_model: {orig_opts.pk}}
674         for field_name in field_names:
675             parts = field_name.split(LOOKUP_SEP)
676             cur_model = self.model._meta.concrete_model
677             opts = orig_opts
678             for name in parts[:-1]:
679                 old_model = cur_model
680                 if name in self._filtered_relations:
681                     name = self._filtered_relations[name].relation_name
682                 source = opts.get_field(name)
683                 if is_reverse_o2o(source):
684                     cur_model = source.related_model
685                 else:
686                     cur_model = source.remote_field.model
687                 opts = cur_model._meta
688                 # Even if we're "just passing through" this model, we must add
689                 # both the current model's pk and the related reference field
690                 # (if it's not a reverse relation) to the things we select.
691                 if not is_reverse_o2o(source):
692                     must_include[old_model].add(source)
693                 add_to_dict(must_include, cur_model, opts.pk)
694             field = opts.get_field(parts[-1])
695             is_reverse_object = field.auto_created and not field.concrete
696             model = field.related_model if is_reverse_object else field.model
697             model = model._meta.concrete_model
698             if model == opts.model:
699                 model = cur_model
700             if not is_reverse_o2o(field):
701                 add_to_dict(seen, model, field)
702 
703         if defer:
704             # We need to load all fields for each model, except those that
705             # appear in "seen" (for all models that appear in "seen"). The only
706             # slight complexity here is handling fields that exist on parent
707             # models.
708             workset = {}
709             for model, values in seen.items():
710                 for field in model._meta.local_fields:
711                     if field not in values:
712                         m = field.model._meta.concrete_model
713                         add_to_dict(workset, m, field)
714             for model, values in must_include.items():
715                 # If we haven't included a model in workset, we don't add the
716                 # corresponding must_include fields for that model, since an
717                 # empty set means "include all fields". That's why there's no
718                 # "else" branch here.
719                 if model in workset:
720                     workset[model].update(values)
721             for model, values in workset.items():
722                 callback(target, model, values)
723         else:
724             for model, values in must_include.items():
725                 if model in seen:
726                     seen[model].update(values)
727                 else:
728                     # As we've passed through this model, but not explicitly
729                     # included any fields, we have to make sure it's mentioned
730                     # so that only the "must include" fields are pulled in.
731                     seen[model] = values
732             # Now ensure that every model in the inheritance chain is mentioned
733             # in the parent list. Again, it must be mentioned to ensure that
734             # only "must include" fields are pulled in.
735             for model in orig_opts.get_parent_list():
736                 seen.setdefault(model, set())
737             for model, values in seen.items():
738                 callback(target, model, values)
739 
740     def table_alias(self, table_name, create=False, filtered_relation=None):
741         """
742         Return a table alias for the given table_name and whether this is a
743         new alias or not.
744 
745         If 'create' is true, a new alias is always created. Otherwise, the
746         most recently created alias for the table (if one exists) is reused.
747         """
748         alias_list = self.table_map.get(table_name)
749         if not create and alias_list:
750             alias = alias_list[0]
751             self.alias_refcount[alias] += 1
752             return alias, False
753 
754         # Create a new alias for this table.
755         if alias_list:
756             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
757             alias_list.append(alias)
758         else:
759             # The first occurrence of a table uses the table name directly.
760             alias = filtered_relation.alias if filtered_relation is not None else table_name
761             self.table_map[table_name] = [alias]
762         self.alias_refcount[alias] = 1
763         return alias, True
764 
765     def ref_alias(self, alias):
766         """Increases the reference count for this alias."""
767         self.alias_refcount[alias] += 1
768 
769     def unref_alias(self, alias, amount=1):
770         """Decreases the reference count for this alias."""
771         self.alias_refcount[alias] -= amount
772 
773     def promote_joins(self, aliases):
774         """
775         Promote recursively the join type of given aliases and its children to
776         an outer join. If 'unconditional' is False, only promote the join if
777         it is nullable or the parent join is an outer join.
778 
779         The children promotion is done to avoid join chains that contain a LOUTER
780         b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,
781         then we must also promote b->c automatically, or otherwise the promotion
782         of a->b doesn't actually change anything in the query results.
783         """
784         aliases = list(aliases)
785         while aliases:
786             alias = aliases.pop(0)
787             if self.alias_map[alias].join_type is None:
788                 # This is the base table (first FROM entry) - this table
789                 # isn't really joined at all in the query, so we should not
790                 # alter its join type.
791                 continue
792             # Only the first alias (skipped above) should have None join_type
793             assert self.alias_map[alias].join_type is not None
794             parent_alias = self.alias_map[alias].parent_alias
795             parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER
796             already_louter = self.alias_map[alias].join_type == LOUTER
797             if ((self.alias_map[alias].nullable or parent_louter) and
798                     not already_louter):
799                 self.alias_map[alias] = self.alias_map[alias].promote()
800                 # Join type of 'alias' changed, so re-examine all aliases that
801                 # refer to this one.
802                 aliases.extend(
803                     join for join in self.alias_map
804                     if self.alias_map[join].parent_alias == alias and join not in aliases
805                 )
806 
807     def demote_joins(self, aliases):
808         """
809         Change join type from LOUTER to INNER for all joins in aliases.
810 
811         Similarly to promote_joins(), this method must ensure no join chains
812         containing first an outer, then an inner join are generated. If we
813         are demoting b->c join in chain a LOUTER b LOUTER c then we must
814         demote a->b automatically, or otherwise the demotion of b->c doesn't
815         actually change anything in the query results. .
816         """
817         aliases = list(aliases)
818         while aliases:
819             alias = aliases.pop(0)
820             if self.alias_map[alias].join_type == LOUTER:
821                 self.alias_map[alias] = self.alias_map[alias].demote()
822                 parent_alias = self.alias_map[alias].parent_alias
823                 if self.alias_map[parent_alias].join_type == INNER:
824                     aliases.append(parent_alias)
825 
826     def reset_refcounts(self, to_counts):
827         """
828         Reset reference counts for aliases so that they match the value passed
829         in `to_counts`.
830         """
831         for alias, cur_refcount in self.alias_refcount.copy().items():
832             unref_amount = cur_refcount - to_counts.get(alias, 0)
833             self.unref_alias(alias, unref_amount)
834 
835     def change_aliases(self, change_map):
836         """
837         Change the aliases in change_map (which maps old-alias -> new-alias),
838         relabelling any references to them in select columns and the where
839         clause.
840         """
841         assert set(change_map).isdisjoint(change_map.values())
842 
843         # 1. Update references in "select" (normal columns plus aliases),
844         # "group by" and "where".
845         self.where.relabel_aliases(change_map)
846         if isinstance(self.group_by, tuple):
847             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])
848         self.select = tuple([col.relabeled_clone(change_map) for col in self.select])
849         self.annotations = self.annotations and {
850             key: col.relabeled_clone(change_map) for key, col in self.annotations.items()
851         }
852 
853         # 2. Rename the alias in the internal table/alias datastructures.
854         for old_alias, new_alias in change_map.items():
855             if old_alias not in self.alias_map:
856                 continue
857             alias_data = self.alias_map[old_alias].relabeled_clone(change_map)
858             self.alias_map[new_alias] = alias_data
859             self.alias_refcount[new_alias] = self.alias_refcount[old_alias]
860             del self.alias_refcount[old_alias]
861             del self.alias_map[old_alias]
862 
863             table_aliases = self.table_map[alias_data.table_name]
864             for pos, alias in enumerate(table_aliases):
865                 if alias == old_alias:
866                     table_aliases[pos] = new_alias
867                     break
868         self.external_aliases = {
869             # Table is aliased or it's being changed and thus is aliased.
870             change_map.get(alias, alias): (aliased or alias in change_map)
871             for alias, aliased in self.external_aliases.items()
872         }
873 
874     def bump_prefix(self, outer_query):
875         """
876         Change the alias prefix to the next letter in the alphabet in a way
877         that the outer query's aliases and this query's aliases will not
878         conflict. Even tables that previously had no alias will get an alias
879         after this call.
880         """
881         def prefix_gen():
882             """
883             Generate a sequence of characters in alphabetical order:
884                 -> 'A', 'B', 'C', ...
885 
886             When the alphabet is finished, the sequence will continue with the
887             Cartesian product:
888                 -> 'AA', 'AB', 'AC', ...
889             """
890             alphabet = ascii_uppercase
891             prefix = chr(ord(self.alias_prefix) + 1)
892             yield prefix
893             for n in count(1):
894                 seq = alphabet[alphabet.index(prefix):] if prefix else alphabet
895                 for s in product(seq, repeat=n):
896                     yield ''.join(s)
897                 prefix = None
898 
899         if self.alias_prefix != outer_query.alias_prefix:
900             # No clashes between self and outer query should be possible.
901             return
902 
903         # Explicitly avoid infinite loop. The constant divider is based on how
904         # much depth recursive subquery references add to the stack. This value
905         # might need to be adjusted when adding or removing function calls from
906         # the code path in charge of performing these operations.
907         local_recursion_limit = sys.getrecursionlimit() // 16
908         for pos, prefix in enumerate(prefix_gen()):
909             if prefix not in self.subq_aliases:
910                 self.alias_prefix = prefix
911                 break
912             if pos > local_recursion_limit:
913                 raise RecursionError(
914                     'Maximum recursion depth exceeded: too many subqueries.'
915                 )
916         self.subq_aliases = self.subq_aliases.union([self.alias_prefix])
917         outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)
918         self.change_aliases({
919             alias: '%s%d' % (self.alias_prefix, pos)
920             for pos, alias in enumerate(self.alias_map)
921         })
922 
923     def get_initial_alias(self):
924         """
925         Return the first alias for this query, after increasing its reference
926         count.
927         """
928         if self.alias_map:
929             alias = self.base_table
930             self.ref_alias(alias)
931         else:
932             alias = self.join(BaseTable(self.get_meta().db_table, None))
933         return alias
934 
935     def count_active_tables(self):
936         """
937         Return the number of tables in this query with a non-zero reference
938         count. After execution, the reference counts are zeroed, so tables
939         added in compiler will not be seen by this method.
940         """
941         return len([1 for count in self.alias_refcount.values() if count])
942 
943     def join(self, join, reuse=None, reuse_with_filtered_relation=False):
944         """
945         Return an alias for the 'join', either reusing an existing alias for
946         that join or creating a new one. 'join' is either a
947         sql.datastructures.BaseTable or Join.
948 
949         The 'reuse' parameter can be either None which means all joins are
950         reusable, or it can be a set containing the aliases that can be reused.
951 
952         The 'reuse_with_filtered_relation' parameter is used when computing
953         FilteredRelation instances.
954 
955         A join is always created as LOUTER if the lhs alias is LOUTER to make
956         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new
957         joins are created as LOUTER if the join is nullable.
958         """
959         if reuse_with_filtered_relation and reuse:
960             reuse_aliases = [
961                 a for a, j in self.alias_map.items()
962                 if a in reuse and j.equals(join, with_filtered_relation=False)
963             ]
964         else:
965             reuse_aliases = [
966                 a for a, j in self.alias_map.items()
967                 if (reuse is None or a in reuse) and j == join
968             ]
969         if reuse_aliases:
970             if join.table_alias in reuse_aliases:
971                 reuse_alias = join.table_alias
972             else:
973                 # Reuse the most recent alias of the joined table
974                 # (a many-to-many relation may be joined multiple times).
975                 reuse_alias = reuse_aliases[-1]
976             self.ref_alias(reuse_alias)
977             return reuse_alias
978 
979         # No reuse is possible, so we need a new alias.
980         alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)
981         if join.join_type:
982             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:
983                 join_type = LOUTER
984             else:
985                 join_type = INNER
986             join.join_type = join_type
987         join.table_alias = alias
988         self.alias_map[alias] = join
989         return alias
990 
991     def join_parent_model(self, opts, model, alias, seen):
992         """
993         Make sure the given 'model' is joined in the query. If 'model' isn't
994         a parent of 'opts' or if it is None this method is a no-op.
995 
996         The 'alias' is the root alias for starting the join, 'seen' is a dict
997         of model -> alias of existing joins. It must also contain a mapping
998         of None -> some alias. This will be returned in the no-op case.
999         """
1000         if model in seen:
1001             return seen[model]
1002         chain = opts.get_base_chain(model)
1003         if not chain:
1004             return alias
1005         curr_opts = opts
1006         for int_model in chain:
1007             if int_model in seen:
1008                 curr_opts = int_model._meta
1009                 alias = seen[int_model]
1010                 continue
1011             # Proxy model have elements in base chain
1012             # with no parents, assign the new options
1013             # object and skip to the next base in that
1014             # case
1015             if not curr_opts.parents[int_model]:
1016                 curr_opts = int_model._meta
1017                 continue
1018             link_field = curr_opts.get_ancestor_link(int_model)
1019             join_info = self.setup_joins([link_field.name], curr_opts, alias)
1020             curr_opts = int_model._meta
1021             alias = seen[int_model] = join_info.joins[-1]
1022         return alias or seen[None]
1023 
1024     def add_annotation(self, annotation, alias, is_summary=False, select=True):
1025         """Add a single annotation expression to the Query."""
1026         annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
1027                                                    summarize=is_summary)
1028         if select:
1029             self.append_annotation_mask([alias])
1030         else:
1031             self.set_annotation_mask(set(self.annotation_select).difference({alias}))
1032         self.annotations[alias] = annotation
1033 
1034     def resolve_expression(self, query, *args, **kwargs):
1035         clone = self.clone()
1036         # Subqueries need to use a different set of aliases than the outer query.
1037         clone.bump_prefix(query)
1038         clone.subquery = True
1039         # It's safe to drop ordering if the queryset isn't using slicing,
1040         # distinct(*fields) or select_for_update().
1041         if (self.low_mark == 0 and self.high_mark is None and
1042                 not self.distinct_fields and
1043                 not self.select_for_update):
1044             clone.clear_ordering(True)
1045         clone.where.resolve_expression(query, *args, **kwargs)
1046         for key, value in clone.annotations.items():
1047             resolved = value.resolve_expression(query, *args, **kwargs)
1048             if hasattr(resolved, 'external_aliases'):
1049                 resolved.external_aliases.update(clone.external_aliases)
1050             clone.annotations[key] = resolved
1051         # Outer query's aliases are considered external.
1052         for alias, table in query.alias_map.items():
1053             clone.external_aliases[alias] = (
1054                 (isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias) or
1055                 (isinstance(table, BaseTable) and table.table_name != table.table_alias)
1056             )
1057         return clone
1058 
1059     def get_external_cols(self):
1060         exprs = chain(self.annotations.values(), self.where.children)
1061         return [
1062             col for col in self._gen_cols(exprs)
1063             if col.alias in self.external_aliases
1064         ]
1065 
1066     def as_sql(self, compiler, connection):
1067         sql, params = self.get_compiler(connection=connection).as_sql()
1068         if self.subquery:
1069             sql = '(%s)' % sql
1070         return sql, params
1071 
1072     def resolve_lookup_value(self, value, can_reuse, allow_joins):
1073         if hasattr(value, 'resolve_expression'):
1074             value = value.resolve_expression(
1075                 self, reuse=can_reuse, allow_joins=allow_joins,
1076             )
1077         elif isinstance(value, (list, tuple)):
1078             # The items of the iterable may be expressions and therefore need
1079             # to be resolved independently.
1080             return type(value)(
1081                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
1082                 for sub_value in value
1083             )
1084         return value
1085 
1086     def solve_lookup_type(self, lookup):
1087         """
1088         Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').
1089         """
1090         lookup_splitted = lookup.split(LOOKUP_SEP)
1091         if self.annotations:
1092             expression, expression_lookups = refs_expression(lookup_splitted, self.annotations)
1093             if expression:
1094                 return expression_lookups, (), expression
1095         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
1096         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
1097         if len(lookup_parts) > 1 and not field_parts:
1098             raise FieldError(
1099                 'Invalid lookup "%s" for model %s".' %
1100                 (lookup, self.get_meta().model.__name__)
1101             )
1102         return lookup_parts, field_parts, False
1103 
1104     def check_query_object_type(self, value, opts, field):
1105         """
1106         Check whether the object passed while querying is of the correct type.
1107         If not, raise a ValueError specifying the wrong object.
1108         """
1109         if hasattr(value, '_meta'):
1110             if not check_rel_lookup_compatibility(value._meta.model, opts, field):
1111                 raise ValueError(
1112                     'Cannot query "%s": Must be "%s" instance.' %
1113                     (value, opts.object_name))
1114 
1115     def check_related_objects(self, field, value, opts):
1116         """Check the type of object passed to query relations."""
1117         if field.is_relation:
1118             # Check that the field and the queryset use the same model in a
1119             # query like .filter(author=Author.objects.all()). For example, the
1120             # opts would be Author's (from the author field) and value.model
1121             # would be Author.objects.all() queryset's .model (Author also).
1122             # The field is the related field on the lhs side.
1123             if (isinstance(value, Query) and not value.has_select_fields and
1124                     not check_rel_lookup_compatibility(value.model, opts, field)):
1125                 raise ValueError(
1126                     'Cannot use QuerySet for "%s": Use a QuerySet for "%s".' %
1127                     (value.model._meta.object_name, opts.object_name)
1128                 )
1129             elif hasattr(value, '_meta'):
1130                 self.check_query_object_type(value, opts, field)
1131             elif hasattr(value, '__iter__'):
1132                 for v in value:
1133                     self.check_query_object_type(v, opts, field)
1134 
1135     def check_filterable(self, expression):
1136         """Raise an error if expression cannot be used in a WHERE clause."""
1137         if (
1138             hasattr(expression, 'resolve_expression') and
1139             not getattr(expression, 'filterable', True)
1140         ):
1141             raise NotSupportedError(
1142                 expression.__class__.__name__ + ' is disallowed in the filter '
1143                 'clause.'
1144             )
1145         if hasattr(expression, 'get_source_expressions'):
1146             for expr in expression.get_source_expressions():
1147                 self.check_filterable(expr)
1148 
1149     def build_lookup(self, lookups, lhs, rhs):
1150         """
1151         Try to extract transforms and lookup from given lhs.
1152 
1153         The lhs value is something that works like SQLExpression.
1154         The rhs value is what the lookup is going to compare against.
1155         The lookups is a list of names to extract using get_lookup()
1156         and get_transform().
1157         """
1158         # __exact is the default lookup if one isn't given.
1159         *transforms, lookup_name = lookups or ['exact']
1160         for name in transforms:
1161             lhs = self.try_transform(lhs, name)
1162         # First try get_lookup() so that the lookup takes precedence if the lhs
1163         # supports both transform and lookup for the name.
1164         lookup_class = lhs.get_lookup(lookup_name)
1165         if not lookup_class:
1166             if lhs.field.is_relation:
1167                 raise FieldError('Related Field got invalid lookup: {}'.format(lookup_name))
1168             # A lookup wasn't found. Try to interpret the name as a transform
1169             # and do an Exact lookup against it.
1170             lhs = self.try_transform(lhs, lookup_name)
1171             lookup_name = 'exact'
1172             lookup_class = lhs.get_lookup(lookup_name)
1173             if not lookup_class:
1174                 return
1175 
1176         lookup = lookup_class(lhs, rhs)
1177         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all
1178         # uses of None as a query value unless the lookup supports it.
1179         if lookup.rhs is None and not lookup.can_use_none_as_rhs:
1180             if lookup_name not in ('exact', 'iexact'):
1181                 raise ValueError("Cannot use None as a query value")
1182             return lhs.get_lookup('isnull')(lhs, True)
1183 
1184         # For Oracle '' is equivalent to null. The check must be done at this
1185         # stage because join promotion can't be done in the compiler. Using
1186         # DEFAULT_DB_ALIAS isn't nice but it's the best that can be done here.
1187         # A similar thing is done in is_nullable(), too.
1188         if (connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
1189                 lookup_name == 'exact' and lookup.rhs == ''):
1190             return lhs.get_lookup('isnull')(lhs, True)
1191 
1192         return lookup
1193 
1194     def try_transform(self, lhs, name):
1195         """
1196         Helper method for build_lookup(). Try to fetch and initialize
1197         a transform for name parameter from lhs.
1198         """
1199         transform_class = lhs.get_transform(name)
1200         if transform_class:
1201             return transform_class(lhs)
1202         else:
1203             output_field = lhs.output_field.__class__
1204             suggested_lookups = difflib.get_close_matches(name, output_field.get_lookups())
1205             if suggested_lookups:
1206                 suggestion = ', perhaps you meant %s?' % ' or '.join(suggested_lookups)
1207             else:
1208                 suggestion = '.'
1209             raise FieldError(
1210                 "Unsupported lookup '%s' for %s or join on the field not "
1211                 "permitted%s" % (name, output_field.__name__, suggestion)
1212             )
1213 
1214     def build_filter(self, filter_expr, branch_negated=False, current_negated=False,
1215                      can_reuse=None, allow_joins=True, split_subq=True,
1216                      reuse_with_filtered_relation=False, check_filterable=True):
1217         """
1218         Build a WhereNode for a single filter clause but don't add it
1219         to this Query. Query.add_q() will then add this filter to the where
1220         Node.
1221 
1222         The 'branch_negated' tells us if the current branch contains any
1223         negations. This will be used to determine if subqueries are needed.
1224 
1225         The 'current_negated' is used to determine if the current filter is
1226         negated or not and this will be used to determine if IS NULL filtering
1227         is needed.
1228 
1229         The difference between current_negated and branch_negated is that
1230         branch_negated is set on first negation, but current_negated is
1231         flipped for each negation.
1232 
1233         Note that add_filter will not do any negating itself, that is done
1234         upper in the code by add_q().
1235 
1236         The 'can_reuse' is a set of reusable joins for multijoins.
1237 
1238         If 'reuse_with_filtered_relation' is True, then only joins in can_reuse
1239         will be reused.
1240 
1241         The method will create a filter clause that can be added to the current
1242         query. However, if the filter isn't added to the query then the caller
1243         is responsible for unreffing the joins used.
1244         """
1245         if isinstance(filter_expr, dict):
1246             raise FieldError("Cannot parse keyword query as dict")
1247         if isinstance(filter_expr, Q):
1248             return self._add_q(
1249                 filter_expr,
1250                 branch_negated=branch_negated,
1251                 current_negated=current_negated,
1252                 used_aliases=can_reuse,
1253                 allow_joins=allow_joins,
1254                 split_subq=split_subq,
1255                 check_filterable=check_filterable,
1256             )
1257         if hasattr(filter_expr, 'resolve_expression'):
1258             if not getattr(filter_expr, 'conditional', False):
1259                 raise TypeError('Cannot filter against a non-conditional expression.')
1260             condition = self.build_lookup(
1261                 ['exact'], filter_expr.resolve_expression(self, allow_joins=allow_joins), True
1262             )
1263             clause = self.where_class()
1264             clause.add(condition, AND)
1265             return clause, []
1266         arg, value = filter_expr
1267         if not arg:
1268             raise FieldError("Cannot parse keyword query %r" % arg)
1269         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
1270 
1271         if check_filterable:
1272             self.check_filterable(reffed_expression)
1273 
1274         if not allow_joins and len(parts) > 1:
1275             raise FieldError("Joined field references are not permitted in this query")
1276 
1277         pre_joins = self.alias_refcount.copy()
1278         value = self.resolve_lookup_value(value, can_reuse, allow_joins)
1279         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}
1280 
1281         if check_filterable:
1282             self.check_filterable(value)
1283 
1284         clause = self.where_class()
1285         if reffed_expression:
1286             condition = self.build_lookup(lookups, reffed_expression, value)
1287             clause.add(condition, AND)
1288             return clause, []
1289 
1290         opts = self.get_meta()
1291         alias = self.get_initial_alias()
1292         allow_many = not branch_negated or not split_subq
1293 
1294         try:
1295             join_info = self.setup_joins(
1296                 parts, opts, alias, can_reuse=can_reuse, allow_many=allow_many,
1297                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1298             )
1299 
1300             # Prevent iterator from being consumed by check_related_objects()
1301             if isinstance(value, Iterator):
1302                 value = list(value)
1303             self.check_related_objects(join_info.final_field, value, join_info.opts)
1304 
1305             # split_exclude() needs to know which joins were generated for the
1306             # lookup parts
1307             self._lookup_joins = join_info.joins
1308         except MultiJoin as e:
1309             return self.split_exclude(filter_expr, can_reuse, e.names_with_path)
1310 
1311         # Update used_joins before trimming since they are reused to determine
1312         # which joins could be later promoted to INNER.
1313         used_joins.update(join_info.joins)
1314         targets, alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1315         if can_reuse is not None:
1316             can_reuse.update(join_list)
1317 
1318         if join_info.final_field.is_relation:
1319             # No support for transforms for relational fields
1320             num_lookups = len(lookups)
1321             if num_lookups > 1:
1322                 raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))
1323             if len(targets) == 1:
1324                 col = self._get_col(targets[0], join_info.final_field, alias)
1325             else:
1326                 col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)
1327         else:
1328             col = self._get_col(targets[0], join_info.final_field, alias)
1329 
1330         condition = self.build_lookup(lookups, col, value)
1331         lookup_type = condition.lookup_name
1332         clause.add(condition, AND)
1333 
1334         require_outer = lookup_type == 'isnull' and condition.rhs is True and not current_negated
1335         if current_negated and (lookup_type != 'isnull' or condition.rhs is False) and condition.rhs is not None:
1336             require_outer = True
1337             if lookup_type != 'isnull':
1338                 # The condition added here will be SQL like this:
1339                 # NOT (col IS NOT NULL), where the first NOT is added in
1340                 # upper layers of code. The reason for addition is that if col
1341                 # is null, then col != someval will result in SQL "unknown"
1342                 # which isn't the same as in Python. The Python None handling
1343                 # is wanted, and it can be gotten by
1344                 # (col IS NULL OR col != someval)
1345                 #   <=>
1346                 # NOT (col IS NOT NULL AND col = someval).
1347                 if (
1348                     self.is_nullable(targets[0]) or
1349                     self.alias_map[join_list[-1]].join_type == LOUTER
1350                 ):
1351                     lookup_class = targets[0].get_lookup('isnull')
1352                     col = self._get_col(targets[0], join_info.targets[0], alias)
1353                     clause.add(lookup_class(col, False), AND)
1354                 # If someval is a nullable column, someval IS NOT NULL is
1355                 # added.
1356                 if isinstance(value, Col) and self.is_nullable(value.target):
1357                     lookup_class = value.target.get_lookup('isnull')
1358                     clause.add(lookup_class(value, False), AND)
1359         return clause, used_joins if not require_outer else ()
1360 
1361     def add_filter(self, filter_clause):
1362         self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))
1363 
1364     def add_q(self, q_object):
1365         """
1366         A preprocessor for the internal _add_q(). Responsible for doing final
1367         join promotion.
1368         """
1369         # For join promotion this case is doing an AND for the added q_object
1370         # and existing conditions. So, any existing inner join forces the join
1371         # type to remain inner. Existing outer joins can however be demoted.
1372         # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if
1373         # rel_a doesn't produce any rows, then the whole condition must fail.
1374         # So, demotion is OK.
1375         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}
1376         clause, _ = self._add_q(q_object, self.used_aliases)
1377         if clause:
1378             self.where.add(clause, AND)
1379         self.demote_joins(existing_inner)
1380 
1381     def build_where(self, filter_expr):
1382         return self.build_filter(filter_expr, allow_joins=False)[0]
1383 
1384     def _add_q(self, q_object, used_aliases, branch_negated=False,
1385                current_negated=False, allow_joins=True, split_subq=True,
1386                check_filterable=True):
1387         """Add a Q-object to the current filter."""
1388         connector = q_object.connector
1389         current_negated = current_negated ^ q_object.negated
1390         branch_negated = branch_negated or q_object.negated
1391         target_clause = self.where_class(connector=connector,
1392                                          negated=q_object.negated)
1393         joinpromoter = JoinPromoter(q_object.connector, len(q_object.children), current_negated)
1394         for child in q_object.children:
1395             child_clause, needed_inner = self.build_filter(
1396                 child, can_reuse=used_aliases, branch_negated=branch_negated,
1397                 current_negated=current_negated, allow_joins=allow_joins,
1398                 split_subq=split_subq, check_filterable=check_filterable,
1399             )
1400             joinpromoter.add_votes(needed_inner)
1401             if child_clause:
1402                 target_clause.add(child_clause, connector)
1403         needed_inner = joinpromoter.update_join_types(self)
1404         return target_clause, needed_inner
1405 
1406     def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
1407         """Add a FilteredRelation object to the current filter."""
1408         connector = q_object.connector
1409         current_negated ^= q_object.negated
1410         branch_negated = branch_negated or q_object.negated
1411         target_clause = self.where_class(connector=connector, negated=q_object.negated)
1412         for child in q_object.children:
1413             if isinstance(child, Node):
1414                 child_clause = self.build_filtered_relation_q(
1415                     child, reuse=reuse, branch_negated=branch_negated,
1416                     current_negated=current_negated,
1417                 )
1418             else:
1419                 child_clause, _ = self.build_filter(
1420                     child, can_reuse=reuse, branch_negated=branch_negated,
1421                     current_negated=current_negated,
1422                     allow_joins=True, split_subq=False,
1423                     reuse_with_filtered_relation=True,
1424                 )
1425             target_clause.add(child_clause, connector)
1426         return target_clause
1427 
1428     def add_filtered_relation(self, filtered_relation, alias):
1429         filtered_relation.alias = alias
1430         lookups = dict(get_children_from_q(filtered_relation.condition))
1431         relation_lookup_parts, relation_field_parts, _ = self.solve_lookup_type(filtered_relation.relation_name)
1432         if relation_lookup_parts:
1433             raise ValueError(
1434                 "FilteredRelation's relation_name cannot contain lookups "
1435                 "(got %r)." % filtered_relation.relation_name
1436             )
1437         for lookup in chain(lookups):
1438             lookup_parts, lookup_field_parts, _ = self.solve_lookup_type(lookup)
1439             shift = 2 if not lookup_parts else 1
1440             lookup_field_path = lookup_field_parts[:-shift]
1441             for idx, lookup_field_part in enumerate(lookup_field_path):
1442                 if len(relation_field_parts) > idx:
1443                     if relation_field_parts[idx] != lookup_field_part:
1444                         raise ValueError(
1445                             "FilteredRelation's condition doesn't support "
1446                             "relations outside the %r (got %r)."
1447                             % (filtered_relation.relation_name, lookup)
1448                         )
1449                 else:
1450                     raise ValueError(
1451                         "FilteredRelation's condition doesn't support nested "
1452                         "relations deeper than the relation_name (got %r for "
1453                         "%r)." % (lookup, filtered_relation.relation_name)
1454                     )
1455         self._filtered_relations[filtered_relation.alias] = filtered_relation
1456 
1457     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
1458         """
1459         Walk the list of names and turns them into PathInfo tuples. A single
1460         name in 'names' can generate multiple PathInfos (m2m, for example).
1461 
1462         'names' is the path of names to travel, 'opts' is the model Options we
1463         start the name resolving from, 'allow_many' is as for setup_joins().
1464         If fail_on_missing is set to True, then a name that can't be resolved
1465         will generate a FieldError.
1466 
1467         Return a list of PathInfo tuples. In addition return the final field
1468         (the last used join field) and target (which is a field guaranteed to
1469         contain the same value as the final field). Finally, return those names
1470         that weren't found (which are likely transforms and the final lookup).
1471         """
1472         path, names_with_path = [], []
1473         for pos, name in enumerate(names):
1474             cur_names_with_path = (name, [])
1475             if name == 'pk':
1476                 name = opts.pk.name
1477 
1478             field = None
1479             filtered_relation = None
1480             try:
1481                 field = opts.get_field(name)
1482             except FieldDoesNotExist:
1483                 if name in self.annotation_select:
1484                     field = self.annotation_select[name].output_field
1485                 elif name in self._filtered_relations and pos == 0:
1486                     filtered_relation = self._filtered_relations[name]
1487                     if LOOKUP_SEP in filtered_relation.relation_name:
1488                         parts = filtered_relation.relation_name.split(LOOKUP_SEP)
1489                         filtered_relation_path, field, _, _ = self.names_to_path(
1490                             parts, opts, allow_many, fail_on_missing,
1491                         )
1492                         path.extend(filtered_relation_path[:-1])
1493                     else:
1494                         field = opts.get_field(filtered_relation.relation_name)
1495             if field is not None:
1496                 # Fields that contain one-to-many relations with a generic
1497                 # model (like a GenericForeignKey) cannot generate reverse
1498                 # relations and therefore cannot be used for reverse querying.
1499                 if field.is_relation and not field.related_model:
1500                     raise FieldError(
1501                         "Field %r does not generate an automatic reverse "
1502                         "relation and therefore cannot be used for reverse "
1503                         "querying. If it is a GenericForeignKey, consider "
1504                         "adding a GenericRelation." % name
1505                     )
1506                 try:
1507                     model = field.model._meta.concrete_model
1508                 except AttributeError:
1509                     # QuerySet.annotate() may introduce fields that aren't
1510                     # attached to a model.
1511                     model = None
1512             else:
1513                 # We didn't find the current field, so move position back
1514                 # one step.
1515                 pos -= 1
1516                 if pos == -1 or fail_on_missing:
1517                     available = sorted([
1518                         *get_field_names_from_opts(opts),
1519                         *self.annotation_select,
1520                         *self._filtered_relations,
1521                     ])
1522                     raise FieldError("Cannot resolve keyword '%s' into field. "
1523                                      "Choices are: %s" % (name, ", ".join(available)))
1524                 break
1525             # Check if we need any joins for concrete inheritance cases (the
1526             # field lives in parent, but we are currently in one of its
1527             # children)
1528             if model is not opts.model:
1529                 path_to_parent = opts.get_path_to_parent(model)
1530                 if path_to_parent:
1531                     path.extend(path_to_parent)
1532                     cur_names_with_path[1].extend(path_to_parent)
1533                     opts = path_to_parent[-1].to_opts
1534             if hasattr(field, 'get_path_info'):
1535                 pathinfos = field.get_path_info(filtered_relation)
1536                 if not allow_many:
1537                     for inner_pos, p in enumerate(pathinfos):
1538                         if p.m2m:
1539                             cur_names_with_path[1].extend(pathinfos[0:inner_pos + 1])
1540                             names_with_path.append(cur_names_with_path)
1541                             raise MultiJoin(pos + 1, names_with_path)
1542                 last = pathinfos[-1]
1543                 path.extend(pathinfos)
1544                 final_field = last.join_field
1545                 opts = last.to_opts
1546                 targets = last.target_fields
1547                 cur_names_with_path[1].extend(pathinfos)
1548                 names_with_path.append(cur_names_with_path)
1549             else:
1550                 # Local non-relational field.
1551                 final_field = field
1552                 targets = (field,)
1553                 if fail_on_missing and pos + 1 != len(names):
1554                     raise FieldError(
1555                         "Cannot resolve keyword %r into field. Join on '%s'"
1556                         " not permitted." % (names[pos + 1], name))
1557                 break
1558         return path, final_field, targets, names[pos + 1:]
1559 
1560     def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True,
1561                     reuse_with_filtered_relation=False):
1562         """
1563         Compute the necessary table joins for the passage through the fields
1564         given in 'names'. 'opts' is the Options class for the current model
1565         (which gives the table we are starting from), 'alias' is the alias for
1566         the table to start the joining from.
1567 
1568         The 'can_reuse' defines the reverse foreign key joins we can reuse. It
1569         can be None in which case all joins are reusable or a set of aliases
1570         that can be reused. Note that non-reverse foreign keys are always
1571         reusable when using setup_joins().
1572 
1573         The 'reuse_with_filtered_relation' can be used to force 'can_reuse'
1574         parameter and force the relation on the given connections.
1575 
1576         If 'allow_many' is False, then any reverse foreign key seen will
1577         generate a MultiJoin exception.
1578 
1579         Return the final field involved in the joins, the target field (used
1580         for any 'where' constraint), the final 'opts' value, the joins, the
1581         field path traveled to generate the joins, and a transform function
1582         that takes a field and alias and is equivalent to `field.get_col(alias)`
1583         in the simple case but wraps field transforms if they were included in
1584         names.
1585 
1586         The target field is the field containing the concrete value. Final
1587         field can be something different, for example foreign key pointing to
1588         that value. Final field is needed for example in some value
1589         conversions (convert 'obj' in fk__id=obj to pk val using the foreign
1590         key field for example).
1591         """
1592         joins = [alias]
1593         # The transform can't be applied yet, as joins must be trimmed later.
1594         # To avoid making every caller of this method look up transforms
1595         # directly, compute transforms here and create a partial that converts
1596         # fields to the appropriate wrapped version.
1597 
1598         def final_transformer(field, alias):
1599             return field.get_col(alias)
1600 
1601         # Try resolving all the names as fields first. If there's an error,
1602         # treat trailing names as lookups until a field can be resolved.
1603         last_field_exception = None
1604         for pivot in range(len(names), 0, -1):
1605             try:
1606                 path, final_field, targets, rest = self.names_to_path(
1607                     names[:pivot], opts, allow_many, fail_on_missing=True,
1608                 )
1609             except FieldError as exc:
1610                 if pivot == 1:
1611                     # The first item cannot be a lookup, so it's safe
1612                     # to raise the field error here.
1613                     raise
1614                 else:
1615                     last_field_exception = exc
1616             else:
1617                 # The transforms are the remaining items that couldn't be
1618                 # resolved into fields.
1619                 transforms = names[pivot:]
1620                 break
1621         for name in transforms:
1622             def transform(field, alias, *, name, previous):
1623                 try:
1624                     wrapped = previous(field, alias)
1625                     return self.try_transform(wrapped, name)
1626                 except FieldError:
1627                     # FieldError is raised if the transform doesn't exist.
1628                     if isinstance(final_field, Field) and last_field_exception:
1629                         raise last_field_exception
1630                     else:
1631                         raise
1632             final_transformer = functools.partial(transform, name=name, previous=final_transformer)
1633         # Then, add the path to the query's joins. Note that we can't trim
1634         # joins at this stage - we will need the information about join type
1635         # of the trimmed joins.
1636         for join in path:
1637             if join.filtered_relation:
1638                 filtered_relation = join.filtered_relation.clone()
1639                 table_alias = filtered_relation.alias
1640             else:
1641                 filtered_relation = None
1642                 table_alias = None
1643             opts = join.to_opts
1644             if join.direct:
1645                 nullable = self.is_nullable(join.join_field)
1646             else:
1647                 nullable = True
1648             connection = Join(
1649                 opts.db_table, alias, table_alias, INNER, join.join_field,
1650                 nullable, filtered_relation=filtered_relation,
1651             )
1652             reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None
1653             alias = self.join(
1654                 connection, reuse=reuse,
1655                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1656             )
1657             joins.append(alias)
1658             if filtered_relation:
1659                 filtered_relation.path = joins[:]
1660         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)
1661 
1662     def trim_joins(self, targets, joins, path):
1663         """
1664         The 'target' parameter is the final field being joined to, 'joins'
1665         is the full list of join aliases. The 'path' contain the PathInfos
1666         used to create the joins.
1667 
1668         Return the final target field and table alias and the new active
1669         joins.
1670 
1671         Always trim any direct join if the target column is already in the
1672         previous table. Can't trim reverse joins as it's unknown if there's
1673         anything on the other side of the join.
1674         """
1675         joins = joins[:]
1676         for pos, info in enumerate(reversed(path)):
1677             if len(joins) == 1 or not info.direct:
1678                 break
1679             if info.filtered_relation:
1680                 break
1681             join_targets = {t.column for t in info.join_field.foreign_related_fields}
1682             cur_targets = {t.column for t in targets}
1683             if not cur_targets.issubset(join_targets):
1684                 break
1685             targets_dict = {r[1].column: r[0] for r in info.join_field.related_fields if r[1].column in cur_targets}
1686             targets = tuple(targets_dict[t.column] for t in targets)
1687             self.unref_alias(joins.pop())
1688         return targets, joins[-1], joins
1689 
1690     @classmethod
1691     def _gen_cols(cls, exprs):
1692         for expr in exprs:
1693             if isinstance(expr, Col):
1694                 yield expr
1695             else:
1696                 yield from cls._gen_cols(expr.get_source_expressions())
1697 
1698     @classmethod
1699     def _gen_col_aliases(cls, exprs):
1700         yield from (expr.alias for expr in cls._gen_cols(exprs))
1701 
1702     def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False):
1703         if not allow_joins and LOOKUP_SEP in name:
1704             raise FieldError("Joined field references are not permitted in this query")
1705         annotation = self.annotations.get(name)
1706         if annotation is not None:
1707             if not allow_joins:
1708                 for alias in self._gen_col_aliases([annotation]):
1709                     if isinstance(self.alias_map[alias], Join):
1710                         raise FieldError(
1711                             'Joined field references are not permitted in '
1712                             'this query'
1713                         )
1714             if summarize:
1715                 # Summarize currently means we are doing an aggregate() query
1716                 # which is executed as a wrapped subquery if any of the
1717                 # aggregate() elements reference an existing annotation. In
1718                 # that case we need to return a Ref to the subquery's annotation.
1719                 if name not in self.annotation_select:
1720                     raise FieldError(
1721                         "Cannot aggregate over the '%s' alias. Use annotate() "
1722                         "to promote it." % name
1723                     )
1724                 return Ref(name, self.annotation_select[name])
1725             else:
1726                 return annotation
1727         else:
1728             field_list = name.split(LOOKUP_SEP)
1729             join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)
1730             targets, final_alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1731             if not allow_joins and len(join_list) > 1:
1732                 raise FieldError('Joined field references are not permitted in this query')
1733             if len(targets) > 1:
1734                 raise FieldError("Referencing multicolumn fields with F() objects "
1735                                  "isn't supported")
1736             # Verify that the last lookup in name is a field or a transform:
1737             # transform_function() raises FieldError if not.
1738             join_info.transform_function(targets[0], final_alias)
1739             if reuse is not None:
1740                 reuse.update(join_list)
1741             return self._get_col(targets[0], join_info.targets[0], join_list[-1])
1742 
1743     def split_exclude(self, filter_expr, can_reuse, names_with_path):
1744         """
1745         When doing an exclude against any kind of N-to-many relation, we need
1746         to use a subquery. This method constructs the nested query, given the
1747         original exclude filter (filter_expr) and the portion up to the first
1748         N-to-many relation field.
1749 
1750         For example, if the origin filter is ~Q(child__name='foo'), filter_expr
1751         is ('child__name', 'foo') and can_reuse is a set of joins usable for
1752         filters in the original query.
1753 
1754         We will turn this into equivalent of:
1755             WHERE NOT (pk IN (SELECT parent_id FROM thetable
1756                               WHERE name = 'foo' AND parent_id IS NOT NULL))
1757 
1758         It might be worth it to consider using WHERE NOT EXISTS as that has
1759         saner null handling, and is easier for the backend's optimizer to
1760         handle.
1761         """
1762         filter_lhs, filter_rhs = filter_expr
1763         if isinstance(filter_rhs, OuterRef):
1764             filter_expr = (filter_lhs, OuterRef(filter_rhs))
1765         elif isinstance(filter_rhs, F):
1766             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
1767         # Generate the inner query.
1768         query = Query(self.model)
1769         query._filtered_relations = self._filtered_relations
1770         query.add_filter(filter_expr)
1771         query.clear_ordering(True)
1772         # Try to have as simple as possible subquery -> trim leading joins from
1773         # the subquery.
1774         trimmed_prefix, contains_louter = query.trim_start(names_with_path)
1775 
1776         # Add extra check to make sure the selected field will not be null
1777         # since we are adding an IN <subquery> clause. This prevents the
1778         # database from tripping over IN (...,NULL,...) selects and returning
1779         # nothing
1780         col = query.select[0]
1781         select_field = col.target
1782         alias = col.alias
1783         if self.is_nullable(select_field):
1784             lookup_class = select_field.get_lookup('isnull')
1785             lookup = lookup_class(select_field.get_col(alias), False)
1786             query.where.add(lookup, AND)
1787         if alias in can_reuse:
1788             pk = select_field.model._meta.pk
1789             # Need to add a restriction so that outer query's filters are in effect for
1790             # the subquery, too.
1791             query.bump_prefix(self)
1792             lookup_class = select_field.get_lookup('exact')
1793             # Note that the query.select[0].alias is different from alias
1794             # due to bump_prefix above.
1795             lookup = lookup_class(pk.get_col(query.select[0].alias),
1796                                   pk.get_col(alias))
1797             query.where.add(lookup, AND)
1798             query.external_aliases[alias] = True
1799 
1800         condition, needed_inner = self.build_filter(
1801             ('%s__in' % trimmed_prefix, query),
1802             current_negated=True, branch_negated=True, can_reuse=can_reuse)
1803         if contains_louter:
1804             or_null_condition, _ = self.build_filter(
1805                 ('%s__isnull' % trimmed_prefix, True),
1806                 current_negated=True, branch_negated=True, can_reuse=can_reuse)
1807             condition.add(or_null_condition, OR)
1808             # Note that the end result will be:
1809             # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.
1810             # This might look crazy but due to how IN works, this seems to be
1811             # correct. If the IS NOT NULL check is removed then outercol NOT
1812             # IN will return UNKNOWN. If the IS NULL check is removed, then if
1813             # outercol IS NULL we will not match the row.
1814         return condition, needed_inner
1815 
1816     def set_empty(self):
1817         self.where.add(NothingNode(), AND)
1818         for query in self.combined_queries:
1819             query.set_empty()
1820 
1821     def is_empty(self):
1822         return any(isinstance(c, NothingNode) for c in self.where.children)
1823 
1824     def set_limits(self, low=None, high=None):
1825         """
1826         Adjust the limits on the rows retrieved. Use low/high to set these,
1827         as it makes it more Pythonic to read and write. When the SQL query is
1828         created, convert them to the appropriate offset and limit values.
1829 
1830         Apply any limits passed in here to the existing constraints. Add low
1831         to the current low value and clamp both to any existing high value.
1832         """
1833         if high is not None:
1834             if self.high_mark is not None:
1835                 self.high_mark = min(self.high_mark, self.low_mark + high)
1836             else:
1837                 self.high_mark = self.low_mark + high
1838         if low is not None:
1839             if self.high_mark is not None:
1840                 self.low_mark = min(self.high_mark, self.low_mark + low)
1841             else:
1842                 self.low_mark = self.low_mark + low
1843 
1844         if self.low_mark == self.high_mark:
1845             self.set_empty()
1846 
1847     def clear_limits(self):
1848         """Clear any existing limits."""
1849         self.low_mark, self.high_mark = 0, None
1850 
1851     @property
1852     def is_sliced(self):
1853         return self.low_mark != 0 or self.high_mark is not None
1854 
1855     def has_limit_one(self):
1856         return self.high_mark is not None and (self.high_mark - self.low_mark) == 1
1857 
1858     def can_filter(self):
1859         """
1860         Return True if adding filters to this instance is still possible.
1861 
1862         Typically, this means no limits or offsets have been put on the results.
1863         """
1864         return not self.is_sliced
1865 
1866     def clear_select_clause(self):
1867         """Remove all fields from SELECT clause."""
1868         self.select = ()
1869         self.default_cols = False
1870         self.select_related = False
1871         self.set_extra_mask(())
1872         self.set_annotation_mask(())
1873 
1874     def clear_select_fields(self):
1875         """
1876         Clear the list of fields to select (but not extra_select columns).
1877         Some queryset types completely replace any existing list of select
1878         columns.
1879         """
1880         self.select = ()
1881         self.values_select = ()
1882 
1883     def add_select_col(self, col):
1884         self.select += col,
1885         self.values_select += col.output_field.name,
1886 
1887     def set_select(self, cols):
1888         self.default_cols = False
1889         self.select = tuple(cols)
1890 
1891     def add_distinct_fields(self, *field_names):
1892         """
1893         Add and resolve the given fields to the query's "distinct on" clause.
1894         """
1895         self.distinct_fields = field_names
1896         self.distinct = True
1897 
1898     def add_fields(self, field_names, allow_m2m=True):
1899         """
1900         Add the given (model) fields to the select set. Add the field names in
1901         the order specified.
1902         """
1903         alias = self.get_initial_alias()
1904         opts = self.get_meta()
1905 
1906         try:
1907             cols = []
1908             for name in field_names:
1909                 # Join promotion note - we must not remove any rows here, so
1910                 # if there is no existing joins, use outer join.
1911                 join_info = self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m)
1912                 targets, final_alias, joins = self.trim_joins(
1913                     join_info.targets,
1914                     join_info.joins,
1915                     join_info.path,
1916                 )
1917                 for target in targets:
1918                     cols.append(join_info.transform_function(target, final_alias))
1919             if cols:
1920                 self.set_select(cols)
1921         except MultiJoin:
1922             raise FieldError("Invalid field name: '%s'" % name)
1923         except FieldError:
1924             if LOOKUP_SEP in name:
1925                 # For lookups spanning over relationships, show the error
1926                 # from the model on which the lookup failed.
1927                 raise
1928             elif name in self.annotations:
1929                 raise FieldError(
1930                     "Cannot select the '%s' alias. Use annotate() to promote "
1931                     "it." % name
1932                 )
1933             else:
1934                 names = sorted([
1935                     *get_field_names_from_opts(opts), *self.extra,
1936                     *self.annotation_select, *self._filtered_relations
1937                 ])
1938                 raise FieldError("Cannot resolve keyword %r into field. "
1939                                  "Choices are: %s" % (name, ", ".join(names)))
1940 
1941     def add_ordering(self, *ordering):
1942         """
1943         Add items from the 'ordering' sequence to the query's "order by"
1944         clause. These items are either field names (not column names) --
1945         possibly with a direction prefix ('-' or '?') -- or OrderBy
1946         expressions.
1947 
1948         If 'ordering' is empty, clear all ordering from the query.
1949         """
1950         errors = []
1951         for item in ordering:
1952             if isinstance(item, str):
1953                 if '.' in item:
1954                     warnings.warn(
1955                         'Passing column raw column aliases to order_by() is '
1956                         'deprecated. Wrap %r in a RawSQL expression before '
1957                         'passing it to order_by().' % item,
1958                         category=RemovedInDjango40Warning,
1959                         stacklevel=3,
1960                     )
1961                     continue
1962                 if item == '?':
1963                     continue
1964                 if item.startswith('-'):
1965                     item = item[1:]
1966                 if item in self.annotations:
1967                     continue
1968                 if self.extra and item in self.extra:
1969                     continue
1970                 # names_to_path() validates the lookup. A descriptive
1971                 # FieldError will be raise if it's not.
1972                 self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)
1973             elif not hasattr(item, 'resolve_expression'):
1974                 errors.append(item)
1975             if getattr(item, 'contains_aggregate', False):
1976                 raise FieldError(
1977                     'Using an aggregate in order_by() without also including '
1978                     'it in annotate() is not allowed: %s' % item
1979                 )
1980         if errors:
1981             raise FieldError('Invalid order_by arguments: %s' % errors)
1982         if ordering:
1983             self.order_by += ordering
1984         else:
1985             self.default_ordering = False
1986 
1987     def clear_ordering(self, force_empty):
1988         """
1989         Remove any ordering settings. If 'force_empty' is True, there will be
1990         no ordering in the resulting query (not even the model's default).
1991         """
1992         self.order_by = ()
1993         self.extra_order_by = ()
1994         if force_empty:
1995             self.default_ordering = False
1996 
1997     def set_group_by(self, allow_aliases=True):
1998         """
1999         Expand the GROUP BY clause required by the query.
2000 
2001         This will usually be the set of all non-aggregate fields in the
2002         return data. If the database backend supports grouping by the
2003         primary key, and the query would be equivalent, the optimization
2004         will be made automatically.
2005         """
2006         # Column names from JOINs to check collisions with aliases.
2007         if allow_aliases:
2008             column_names = set()
2009             seen_models = set()
2010             for join in list(self.alias_map.values())[1:]:  # Skip base table.
2011                 model = join.join_field.related_model
2012                 if model not in seen_models:
2013                     column_names.update({
2014                         field.column
2015                         for field in model._meta.local_concrete_fields
2016                     })
2017                     seen_models.add(model)
2018 
2019         group_by = list(self.select)
2020         if self.annotation_select:
2021             for alias, annotation in self.annotation_select.items():
2022                 signature = inspect.signature(annotation.get_group_by_cols)
2023                 if 'alias' not in signature.parameters:
2024                     annotation_class = annotation.__class__
2025                     msg = (
2026                         '`alias=None` must be added to the signature of '
2027                         '%s.%s.get_group_by_cols().'
2028                     ) % (annotation_class.__module__, annotation_class.__qualname__)
2029                     warnings.warn(msg, category=RemovedInDjango40Warning)
2030                     group_by_cols = annotation.get_group_by_cols()
2031                 else:
2032                     if not allow_aliases or alias in column_names:
2033                         alias = None
2034                     group_by_cols = annotation.get_group_by_cols(alias=alias)
2035                 group_by.extend(group_by_cols)
2036         self.group_by = tuple(group_by)
2037 
2038     def add_select_related(self, fields):
2039         """
2040         Set up the select_related data structure so that we only select
2041         certain related models (as opposed to all models, when
2042         self.select_related=True).
2043         """
2044         if isinstance(self.select_related, bool):
2045             field_dict = {}
2046         else:
2047             field_dict = self.select_related
2048         for field in fields:
2049             d = field_dict
2050             for part in field.split(LOOKUP_SEP):
2051                 d = d.setdefault(part, {})
2052         self.select_related = field_dict
2053 
2054     def add_extra(self, select, select_params, where, params, tables, order_by):
2055         """
2056         Add data to the various extra_* attributes for user-created additions
2057         to the query.
2058         """
2059         if select:
2060             # We need to pair any placeholder markers in the 'select'
2061             # dictionary with their parameters in 'select_params' so that
2062             # subsequent updates to the select dictionary also adjust the
2063             # parameters appropriately.
2064             select_pairs = {}
2065             if select_params:
2066                 param_iter = iter(select_params)
2067             else:
2068                 param_iter = iter([])
2069             for name, entry in select.items():
2070                 entry = str(entry)
2071                 entry_params = []
2072                 pos = entry.find("%s")
2073                 while pos != -1:
2074                     if pos == 0 or entry[pos - 1] != '%':
2075                         entry_params.append(next(param_iter))
2076                     pos = entry.find("%s", pos + 2)
2077                 select_pairs[name] = (entry, entry_params)
2078             self.extra.update(select_pairs)
2079         if where or params:
2080             self.where.add(ExtraWhere(where, params), AND)
2081         if tables:
2082             self.extra_tables += tuple(tables)
2083         if order_by:
2084             self.extra_order_by = order_by
2085 
2086     def clear_deferred_loading(self):
2087         """Remove any fields from the deferred loading set."""
2088         self.deferred_loading = (frozenset(), True)
2089 
2090     def add_deferred_loading(self, field_names):
2091         """
2092         Add the given list of model field names to the set of fields to
2093         exclude from loading from the database when automatic column selection
2094         is done. Add the new field names to any existing field names that
2095         are deferred (or removed from any existing field names that are marked
2096         as the only ones for immediate loading).
2097         """
2098         # Fields on related models are stored in the literal double-underscore
2099         # format, so that we can use a set datastructure. We do the foo__bar
2100         # splitting and handling when computing the SQL column names (as part of
2101         # get_columns()).
2102         existing, defer = self.deferred_loading
2103         if defer:
2104             # Add to existing deferred names.
2105             self.deferred_loading = existing.union(field_names), True
2106         else:
2107             # Remove names from the set of any existing "immediate load" names.
2108             self.deferred_loading = existing.difference(field_names), False
2109 
2110     def add_immediate_loading(self, field_names):
2111         """
2112         Add the given list of model field names to the set of fields to
2113         retrieve when the SQL is executed ("immediate loading" fields). The
2114         field names replace any existing immediate loading field names. If
2115         there are field names already specified for deferred loading, remove
2116         those names from the new field_names before storing the new names
2117         for immediate loading. (That is, immediate loading overrides any
2118         existing immediate values, but respects existing deferrals.)
2119         """
2120         existing, defer = self.deferred_loading
2121         field_names = set(field_names)
2122         if 'pk' in field_names:
2123             field_names.remove('pk')
2124             field_names.add(self.get_meta().pk.name)
2125 
2126         if defer:
2127             # Remove any existing deferred names from the current set before
2128             # setting the new names.
2129             self.deferred_loading = field_names.difference(existing), False
2130         else:
2131             # Replace any existing "immediate load" field names.
2132             self.deferred_loading = frozenset(field_names), False
2133 
2134     def get_loaded_field_names(self):
2135         """
2136         If any fields are marked to be deferred, return a dictionary mapping
2137         models to a set of names in those fields that will be loaded. If a
2138         model is not in the returned dictionary, none of its fields are
2139         deferred.
2140 
2141         If no fields are marked for deferral, return an empty dictionary.
2142         """
2143         # We cache this because we call this function multiple times
2144         # (compiler.fill_related_selections, query.iterator)
2145         try:
2146             return self._loaded_field_names_cache
2147         except AttributeError:
2148             collection = {}
2149             self.deferred_to_data(collection, self.get_loaded_field_names_cb)
2150             self._loaded_field_names_cache = collection
2151             return collection
2152 
2153     def get_loaded_field_names_cb(self, target, model, fields):
2154         """Callback used by get_deferred_field_names()."""
2155         target[model] = {f.attname for f in fields}
2156 
2157     def set_annotation_mask(self, names):
2158         """Set the mask of annotations that will be returned by the SELECT."""
2159         if names is None:
2160             self.annotation_select_mask = None
2161         else:
2162             self.annotation_select_mask = set(names)
2163         self._annotation_select_cache = None
2164 
2165     def append_annotation_mask(self, names):
2166         if self.annotation_select_mask is not None:
2167             self.set_annotation_mask(self.annotation_select_mask.union(names))
2168 
2169     def set_extra_mask(self, names):
2170         """
2171         Set the mask of extra select items that will be returned by SELECT.
2172         Don't remove them from the Query since they might be used later.
2173         """
2174         if names is None:
2175             self.extra_select_mask = None
2176         else:
2177             self.extra_select_mask = set(names)
2178         self._extra_select_cache = None
2179 
2180     def set_values(self, fields):
2181         self.select_related = False
2182         self.clear_deferred_loading()
2183         self.clear_select_fields()
2184 
2185         if fields:
2186             field_names = []
2187             extra_names = []
2188             annotation_names = []
2189             if not self.extra and not self.annotations:
2190                 # Shortcut - if there are no extra or annotations, then
2191                 # the values() clause must be just field names.
2192                 field_names = list(fields)
2193             else:
2194                 self.default_cols = False
2195                 for f in fields:
2196                     if f in self.extra_select:
2197                         extra_names.append(f)
2198                     elif f in self.annotation_select:
2199                         annotation_names.append(f)
2200                     else:
2201                         field_names.append(f)
2202             self.set_extra_mask(extra_names)
2203             self.set_annotation_mask(annotation_names)
2204         else:
2205             field_names = [f.attname for f in self.model._meta.concrete_fields]
2206         # Selected annotations must be known before setting the GROUP BY
2207         # clause.
2208         if self.group_by is True:
2209             self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
2210             # Disable GROUP BY aliases to avoid orphaning references to the
2211             # SELECT clause which is about to be cleared.
2212             self.set_group_by(allow_aliases=False)
2213             self.clear_select_fields()
2214         elif self.group_by:
2215             # Resolve GROUP BY annotation references if they are not part of
2216             # the selected fields anymore.
2217             group_by = []
2218             for expr in self.group_by:
2219                 if isinstance(expr, Ref) and expr.refs not in field_names:
2220                     expr = self.annotations[expr.refs]
2221                 group_by.append(expr)
2222             self.group_by = tuple(group_by)
2223 
2224         self.values_select = tuple(field_names)
2225         self.add_fields(field_names, True)
2226 
2227     @property
2228     def annotation_select(self):
2229         """
2230         Return the dictionary of aggregate columns that are not masked and
2231         should be used in the SELECT clause. Cache this result for performance.
2232         """
2233         if self._annotation_select_cache is not None:
2234             return self._annotation_select_cache
2235         elif not self.annotations:
2236             return {}
2237         elif self.annotation_select_mask is not None:
2238             self._annotation_select_cache = {
2239                 k: v for k, v in self.annotations.items()
2240                 if k in self.annotation_select_mask
2241             }
2242             return self._annotation_select_cache
2243         else:
2244             return self.annotations
2245 
2246     @property
2247     def extra_select(self):
2248         if self._extra_select_cache is not None:
2249             return self._extra_select_cache
2250         if not self.extra:
2251             return {}
2252         elif self.extra_select_mask is not None:
2253             self._extra_select_cache = {
2254                 k: v for k, v in self.extra.items()
2255                 if k in self.extra_select_mask
2256             }
2257             return self._extra_select_cache
2258         else:
2259             return self.extra
2260 
2261     def trim_start(self, names_with_path):
2262         """
2263         Trim joins from the start of the join path. The candidates for trim
2264         are the PathInfos in names_with_path structure that are m2m joins.
2265 
2266         Also set the select column so the start matches the join.
2267 
2268         This method is meant to be used for generating the subquery joins &
2269         cols in split_exclude().
2270 
2271         Return a lookup usable for doing outerq.filter(lookup=self) and a
2272         boolean indicating if the joins in the prefix contain a LEFT OUTER join.
2273         _"""
2274         all_paths = []
2275         for _, paths in names_with_path:
2276             all_paths.extend(paths)
2277         contains_louter = False
2278         # Trim and operate only on tables that were generated for
2279         # the lookup part of the query. That is, avoid trimming
2280         # joins generated for F() expressions.
2281         lookup_tables = [
2282             t for t in self.alias_map
2283             if t in self._lookup_joins or t == self.base_table
2284         ]
2285         for trimmed_paths, path in enumerate(all_paths):
2286             if path.m2m:
2287                 break
2288             if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type == LOUTER:
2289                 contains_louter = True
2290             alias = lookup_tables[trimmed_paths]
2291             self.unref_alias(alias)
2292         # The path.join_field is a Rel, lets get the other side's field
2293         join_field = path.join_field.field
2294         # Build the filter prefix.
2295         paths_in_prefix = trimmed_paths
2296         trimmed_prefix = []
2297         for name, path in names_with_path:
2298             if paths_in_prefix - len(path) < 0:
2299                 break
2300             trimmed_prefix.append(name)
2301             paths_in_prefix -= len(path)
2302         trimmed_prefix.append(
2303             join_field.foreign_related_fields[0].name)
2304         trimmed_prefix = LOOKUP_SEP.join(trimmed_prefix)
2305         # Lets still see if we can trim the first join from the inner query
2306         # (that is, self). We can't do this for:
2307         # - LEFT JOINs because we would miss those rows that have nothing on
2308         #   the outer side,
2309         # - INNER JOINs from filtered relations because we would miss their
2310         #   filters.
2311         first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]
2312         if first_join.join_type != LOUTER and not first_join.filtered_relation:
2313             select_fields = [r[0] for r in join_field.related_fields]
2314             select_alias = lookup_tables[trimmed_paths + 1]
2315             self.unref_alias(lookup_tables[trimmed_paths])
2316             extra_restriction = join_field.get_extra_restriction(
2317                 self.where_class, None, lookup_tables[trimmed_paths + 1])
2318             if extra_restriction:
2319                 self.where.add(extra_restriction, AND)
2320         else:
2321             # TODO: It might be possible to trim more joins from the start of the
2322             # inner query if it happens to have a longer join chain containing the
2323             # values in select_fields. Lets punt this one for now.
2324             select_fields = [r[1] for r in join_field.related_fields]
2325             select_alias = lookup_tables[trimmed_paths]
2326         # The found starting point is likely a Join instead of a BaseTable reference.
2327         # But the first entry in the query's FROM clause must not be a JOIN.
2328         for table in self.alias_map:
2329             if self.alias_refcount[table] > 0:
2330                 self.alias_map[table] = BaseTable(self.alias_map[table].table_name, table)
2331                 break
2332         self.set_select([f.get_col(select_alias) for f in select_fields])
2333         return trimmed_prefix, contains_louter
2334 
2335     def is_nullable(self, field):
2336         """
2337         Check if the given field should be treated as nullable.
2338 
2339         Some backends treat '' as null and Django treats such fields as
2340         nullable for those backends. In such situations field.null can be
2341         False even if we should treat the field as nullable.
2342         """
2343         # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have
2344         # (nor should it have) knowledge of which connection is going to be
2345         # used. The proper fix would be to defer all decisions where
2346         # is_nullable() is needed to the compiler stage, but that is not easy
2347         # to do currently.
2348         return (
2349             connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
2350             field.empty_strings_allowed
2351         ) or field.null

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>]
2025-10-15 18:26:05.901 | INFO     | Search completed. Bug locations: [<file>django/db/models/query.py</file>
<class>QuerySet</class>
<method>aggregate</method>
<code>
365     def aggregate(self, *args, **kwargs):
366         """
367         Return a dictionary containing the calculations (aggregation)
368         over the current queryset.
369 
370         If args is present the expression is passed as a kwarg using
371         the Aggregate object's default alias.
372         """
373         if self.query.distinct_fields:
374             raise NotImplementedError("aggregate() + distinct(fields) not implemented.")
375         self._validate_values_are_expressions((*args, *kwargs.values()), method_name='aggregate')
376         for arg in args:
377             # The default_alias property raises TypeError if default_alias
378             # can't be set automatically or AttributeError if it isn't an
379             # attribute.
380             try:
381                 arg.default_alias
382             except (AttributeError, TypeError):
383                 raise TypeError("Complex aggregates require an alias")
384             kwargs[arg.default_alias] = arg
385 
386         query = self.query.chain()
387         for (alias, aggregate_expr) in kwargs.items():
388             query.add_annotation(aggregate_expr, alias, is_summary=True)
389             if not query.annotations[alias].contains_aggregate:
390                 raise TypeError("%s is not an aggregate expression" % alias)
391         return query.get_aggregation(self.db, kwargs)

</code><intended_behavior>The `aggregate` method should be updated to correctly handle field references made through the `F` object which have been annotated using the `annotate()` method. Specifically, when generating the SQL query, the method must ensure that any references to annotated fields (like `anon` in the issue) should accurately reflect the alias given in the `annotate()` call. This means if `foo` is annotated as `anon`, then `aggregate(Max('anon'))` should correctly resolve to using `anon` in the SQL instead of mistakenly trying to refer back to the original field name (`foo`), which doesn't exist in the context of the subquery created by the aggregation.</intended_behavior>, <file>django/db/models/query.py</file>
<class>QuerySet</class>
<method>None</method>
<code>
175 class QuerySet:
176     """Represent a lazy database lookup for a set of objects."""
177 
178     def __init__(self, model=None, query=None, using=None, hints=None):
179         self.model = model
180         self._db = using
181         self._hints = hints or {}
182         self._query = query or sql.Query(self.model)
183         self._result_cache = None
184         self._sticky_filter = False
185         self._for_write = False
186         self._prefetch_related_lookups = ()
187         self._prefetch_done = False
188         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
189         self._iterable_class = ModelIterable
190         self._fields = None
191         self._defer_next_filter = False
192         self._deferred_filter = None
193 
194     @property
195     def query(self):
196         if self._deferred_filter:
197             negate, args, kwargs = self._deferred_filter
198             self._filter_or_exclude_inplace(negate, args, kwargs)
199             self._deferred_filter = None
200         return self._query
201 
202     @query.setter
203     def query(self, value):
204         if value.values_select:
205             self._iterable_class = ValuesIterable
206         self._query = value
207 
208     def as_manager(cls):
209         # Address the circular dependency between `Queryset` and `Manager`.
210         from django.db.models.manager import Manager
211         manager = Manager.from_queryset(cls)()
212         manager._built_with_as_manager = True
213         return manager
214     as_manager.queryset_only = True
215     as_manager = classmethod(as_manager)
216 
217     ########################
218     # PYTHON MAGIC METHODS #
219     ########################
220 
221     def __deepcopy__(self, memo):
222         """Don't populate the QuerySet's cache."""
223         obj = self.__class__()
224         for k, v in self.__dict__.items():
225             if k == '_result_cache':
226                 obj.__dict__[k] = None
227             else:
228                 obj.__dict__[k] = copy.deepcopy(v, memo)
229         return obj
230 
231     def __getstate__(self):
232         # Force the cache to be fully populated.
233         self._fetch_all()
234         return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}
235 
236     def __setstate__(self, state):
237         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)
238         if pickled_version:
239             if pickled_version != django.__version__:
240                 warnings.warn(
241                     "Pickled queryset instance's Django version %s does not "
242                     "match the current version %s."
243                     % (pickled_version, django.__version__),
244                     RuntimeWarning,
245                     stacklevel=2,
246                 )
247         else:
248             warnings.warn(
249                 "Pickled queryset instance's Django version is not specified.",
250                 RuntimeWarning,
251                 stacklevel=2,
252             )
253         self.__dict__.update(state)
254 
255     def __repr__(self):
256         data = list(self[:REPR_OUTPUT_SIZE + 1])
257         if len(data) > REPR_OUTPUT_SIZE:
258             data[-1] = "...(remaining elements truncated)..."
259         return '<%s %r>' % (self.__class__.__name__, data)
260 
261     def __len__(self):
262         self._fetch_all()
263         return len(self._result_cache)
264 
265     def __iter__(self):
266         """
267         The queryset iterator protocol uses three nested iterators in the
268         default case:
269             1. sql.compiler.execute_sql()
270                - Returns 100 rows at time (constants.GET_ITERATOR_CHUNK_SIZE)
271                  using cursor.fetchmany(). This part is responsible for
272                  doing some column masking, and returning the rows in chunks.
273             2. sql.compiler.results_iter()
274                - Returns one row at time. At this point the rows are still just
275                  tuples. In some cases the return values are converted to
276                  Python values at this location.
277             3. self.iterator()
278                - Responsible for turning the rows into model objects.
279         """
280         self._fetch_all()
281         return iter(self._result_cache)
282 
283     def __bool__(self):
284         self._fetch_all()
285         return bool(self._result_cache)
286 
287     def __getitem__(self, k):
288         """Retrieve an item or slice from the set of results."""
289         if not isinstance(k, (int, slice)):
290             raise TypeError(
291                 'QuerySet indices must be integers or slices, not %s.'
292                 % type(k).__name__
293             )
294         assert ((not isinstance(k, slice) and (k >= 0)) or
295                 (isinstance(k, slice) and (k.start is None or k.start >= 0) and
296                  (k.stop is None or k.stop >= 0))), \
297             "Negative indexing is not supported."
298 
299         if self._result_cache is not None:
300             return self._result_cache[k]
301 
302         if isinstance(k, slice):
303             qs = self._chain()
304             if k.start is not None:
305                 start = int(k.start)
306             else:
307                 start = None
308             if k.stop is not None:
309                 stop = int(k.stop)
310             else:
311                 stop = None
312             qs.query.set_limits(start, stop)
313             return list(qs)[::k.step] if k.step else qs
314 
315         qs = self._chain()
316         qs.query.set_limits(k, k + 1)
317         qs._fetch_all()
318         return qs._result_cache[0]
319 
320     def __class_getitem__(cls, *args, **kwargs):
321         return cls
322 
323     def __and__(self, other):
324         self._merge_sanity_check(other)
325         if isinstance(other, EmptyQuerySet):
326             return other
327         if isinstance(self, EmptyQuerySet):
328             return self
329         combined = self._chain()
330         combined._merge_known_related_objects(other)
331         combined.query.combine(other.query, sql.AND)
332         return combined
333 
334     def __or__(self, other):
335         self._merge_sanity_check(other)
336         if isinstance(self, EmptyQuerySet):
337             return other
338         if isinstance(other, EmptyQuerySet):
339             return self
340         query = self if self.query.can_filter() else self.model._base_manager.filter(pk__in=self.values('pk'))
341         combined = query._chain()
342         combined._merge_known_related_objects(other)
343         if not other.query.can_filter():
344             other = other.model._base_manager.filter(pk__in=other.values('pk'))
345         combined.query.combine(other.query, sql.OR)
346         return combined
347 
348     ####################################
349     # METHODS THAT DO DATABASE QUERIES #
350     ####################################
351 
352     def _iterator(self, use_chunked_fetch, chunk_size):
353         yield from self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size)
354 
355     def iterator(self, chunk_size=2000):
356         """
357         An iterator over the results from applying this QuerySet to the
358         database.
359         """
360         if chunk_size <= 0:
361             raise ValueError('Chunk size must be strictly positive.')
362         use_chunked_fetch = not connections[self.db].settings_dict.get('DISABLE_SERVER_SIDE_CURSORS')
363         return self._iterator(use_chunked_fetch, chunk_size)
364 
365     def aggregate(self, *args, **kwargs):
366         """
367         Return a dictionary containing the calculations (aggregation)
368         over the current queryset.
369 
370         If args is present the expression is passed as a kwarg using
371         the Aggregate object's default alias.
372         """
373         if self.query.distinct_fields:
374             raise NotImplementedError("aggregate() + distinct(fields) not implemented.")
375         self._validate_values_are_expressions((*args, *kwargs.values()), method_name='aggregate')
376         for arg in args:
377             # The default_alias property raises TypeError if default_alias
378             # can't be set automatically or AttributeError if it isn't an
379             # attribute.
380             try:
381                 arg.default_alias
382             except (AttributeError, TypeError):
383                 raise TypeError("Complex aggregates require an alias")
384             kwargs[arg.default_alias] = arg
385 
386         query = self.query.chain()
387         for (alias, aggregate_expr) in kwargs.items():
388             query.add_annotation(aggregate_expr, alias, is_summary=True)
389             if not query.annotations[alias].contains_aggregate:
390                 raise TypeError("%s is not an aggregate expression" % alias)
391         return query.get_aggregation(self.db, kwargs)
392 
393     def count(self):
394         """
395         Perform a SELECT COUNT() and return the number of records as an
396         integer.
397 
398         If the QuerySet is already fully cached, return the length of the
399         cached results set to avoid multiple SELECT COUNT(*) calls.
400         """
401         if self._result_cache is not None:
402             return len(self._result_cache)
403 
404         return self.query.get_count(using=self.db)
405 
406     def get(self, *args, **kwargs):
407         """
408         Perform the query and return a single object matching the given
409         keyword arguments.
410         """
411         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
412         if self.query.can_filter() and not self.query.distinct_fields:
413             clone = clone.order_by()
414         limit = None
415         if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:
416             limit = MAX_GET_RESULTS
417             clone.query.set_limits(high=limit)
418         num = len(clone)
419         if num == 1:
420             return clone._result_cache[0]
421         if not num:
422             raise self.model.DoesNotExist(
423                 "%s matching query does not exist." %
424                 self.model._meta.object_name
425             )
426         raise self.model.MultipleObjectsReturned(
427             'get() returned more than one %s -- it returned %s!' % (
428                 self.model._meta.object_name,
429                 num if not limit or num < limit else 'more than %s' % (limit - 1),
430             )
431         )
432 
433     def create(self, **kwargs):
434         """
435         Create a new object with the given kwargs, saving it to the database
436         and returning the created object.
437         """
438         obj = self.model(**kwargs)
439         self._for_write = True
440         obj.save(force_insert=True, using=self.db)
441         return obj
442 
443     def _populate_pk_values(self, objs):
444         for obj in objs:
445             if obj.pk is None:
446                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
447 
448     def bulk_create(self, objs, batch_size=None, ignore_conflicts=False):
449         """
450         Insert each of the instances into the database. Do *not* call
451         save() on each of the instances, do not send any pre/post_save
452         signals, and do not set the primary key attribute if it is an
453         autoincrement field (except if features.can_return_rows_from_bulk_insert=True).
454         Multi-table models are not supported.
455         """
456         # When you bulk insert you don't get the primary keys back (if it's an
457         # autoincrement, except if can_return_rows_from_bulk_insert=True), so
458         # you can't insert into the child tables which references this. There
459         # are two workarounds:
460         # 1) This could be implemented if you didn't have an autoincrement pk
461         # 2) You could do it by doing O(n) normal inserts into the parent
462         #    tables to get the primary keys back and then doing a single bulk
463         #    insert into the childmost table.
464         # We currently set the primary keys on the objects when using
465         # PostgreSQL via the RETURNING ID clause. It should be possible for
466         # Oracle as well, but the semantics for extracting the primary keys is
467         # trickier so it's not done yet.
468         assert batch_size is None or batch_size > 0
469         # Check that the parents share the same concrete model with the our
470         # model to detect the inheritance pattern ConcreteGrandParent ->
471         # MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy
472         # would not identify that case as involving multiple tables.
473         for parent in self.model._meta.get_parent_list():
474             if parent._meta.concrete_model is not self.model._meta.concrete_model:
475                 raise ValueError("Can't bulk create a multi-table inherited model")
476         if not objs:
477             return objs
478         self._for_write = True
479         connection = connections[self.db]
480         opts = self.model._meta
481         fields = opts.concrete_fields
482         objs = list(objs)
483         self._populate_pk_values(objs)
484         with transaction.atomic(using=self.db, savepoint=False):
485             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
486             if objs_with_pk:
487                 returned_columns = self._batched_insert(
488                     objs_with_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
489                 )
490                 for obj_with_pk, results in zip(objs_with_pk, returned_columns):
491                     for result, field in zip(results, opts.db_returning_fields):
492                         if field != opts.pk:
493                             setattr(obj_with_pk, field.attname, result)
494                 for obj_with_pk in objs_with_pk:
495                     obj_with_pk._state.adding = False
496                     obj_with_pk._state.db = self.db
497             if objs_without_pk:
498                 fields = [f for f in fields if not isinstance(f, AutoField)]
499                 returned_columns = self._batched_insert(
500                     objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
501                 )
502                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
503                     assert len(returned_columns) == len(objs_without_pk)
504                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
505                     for result, field in zip(results, opts.db_returning_fields):
506                         setattr(obj_without_pk, field.attname, result)
507                     obj_without_pk._state.adding = False
508                     obj_without_pk._state.db = self.db
509 
510         return objs
511 
512     def bulk_update(self, objs, fields, batch_size=None):
513         """
514         Update the given fields in each of the given objects in the database.
515         """
516         if batch_size is not None and batch_size < 0:
517             raise ValueError('Batch size must be a positive integer.')
518         if not fields:
519             raise ValueError('Field names must be given to bulk_update().')
520         objs = tuple(objs)
521         if any(obj.pk is None for obj in objs):
522             raise ValueError('All bulk_update() objects must have a primary key set.')
523         fields = [self.model._meta.get_field(name) for name in fields]
524         if any(not f.concrete or f.many_to_many for f in fields):
525             raise ValueError('bulk_update() can only be used with concrete fields.')
526         if any(f.primary_key for f in fields):
527             raise ValueError('bulk_update() cannot be used with primary key fields.')
528         if not objs:
529             return
530         # PK is used twice in the resulting update query, once in the filter
531         # and once in the WHEN. Each field will also have one CAST.
532         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)
533         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
534         requires_casting = connections[self.db].features.requires_casted_case_in_updates
535         batches = (objs[i:i + batch_size] for i in range(0, len(objs), batch_size))
536         updates = []
537         for batch_objs in batches:
538             update_kwargs = {}
539             for field in fields:
540                 when_statements = []
541                 for obj in batch_objs:
542                     attr = getattr(obj, field.attname)
543                     if not isinstance(attr, Expression):
544                         attr = Value(attr, output_field=field)
545                     when_statements.append(When(pk=obj.pk, then=attr))
546                 case_statement = Case(*when_statements, output_field=field)
547                 if requires_casting:
548                     case_statement = Cast(case_statement, output_field=field)
549                 update_kwargs[field.attname] = case_statement
550             updates.append(([obj.pk for obj in batch_objs], update_kwargs))
551         with transaction.atomic(using=self.db, savepoint=False):
552             for pks, update_kwargs in updates:
553                 self.filter(pk__in=pks).update(**update_kwargs)
554     bulk_update.alters_data = True
555 
556     def get_or_create(self, defaults=None, **kwargs):
557         """
558         Look up an object with the given kwargs, creating one if necessary.
559         Return a tuple of (object, created), where created is a boolean
560         specifying whether an object was created.
561         """
562         # The get() needs to be targeted at the write database in order
563         # to avoid potential transaction consistency problems.
564         self._for_write = True
565         try:
566             return self.get(**kwargs), False
567         except self.model.DoesNotExist:
568             params = self._extract_model_params(defaults, **kwargs)
569             # Try to create an object using passed params.
570             try:
571                 with transaction.atomic(using=self.db):
572                     params = dict(resolve_callables(params))
573                     return self.create(**params), True
574             except IntegrityError:
575                 try:
576                     return self.get(**kwargs), False
577                 except self.model.DoesNotExist:
578                     pass
579                 raise
580 
581     def update_or_create(self, defaults=None, **kwargs):
582         """
583         Look up an object with the given kwargs, updating one with defaults
584         if it exists, otherwise create a new one.
585         Return a tuple (object, created), where created is a boolean
586         specifying whether an object was created.
587         """
588         defaults = defaults or {}
589         self._for_write = True
590         with transaction.atomic(using=self.db):
591             # Lock the row so that a concurrent update is blocked until
592             # update_or_create() has performed its save.
593             obj, created = self.select_for_update().get_or_create(defaults, **kwargs)
594             if created:
595                 return obj, created
596             for k, v in resolve_callables(defaults):
597                 setattr(obj, k, v)
598             obj.save(using=self.db)
599         return obj, False
600 
601     def _extract_model_params(self, defaults, **kwargs):
602         """
603         Prepare `params` for creating a model instance based on the given
604         kwargs; for use by get_or_create().
605         """
606         defaults = defaults or {}
607         params = {k: v for k, v in kwargs.items() if LOOKUP_SEP not in k}
608         params.update(defaults)
609         property_names = self.model._meta._property_names
610         invalid_params = []
611         for param in params:
612             try:
613                 self.model._meta.get_field(param)
614             except exceptions.FieldDoesNotExist:
615                 # It's okay to use a model's property if it has a setter.
616                 if not (param in property_names and getattr(self.model, param).fset):
617                     invalid_params.append(param)
618         if invalid_params:
619             raise exceptions.FieldError(
620                 "Invalid field name(s) for model %s: '%s'." % (
621                     self.model._meta.object_name,
622                     "', '".join(sorted(invalid_params)),
623                 ))
624         return params
625 
626     def _earliest(self, *fields):
627         """
628         Return the earliest object according to fields (if given) or by the
629         model's Meta.get_latest_by.
630         """
631         if fields:
632             order_by = fields
633         else:
634             order_by = getattr(self.model._meta, 'get_latest_by')
635             if order_by and not isinstance(order_by, (tuple, list)):
636                 order_by = (order_by,)
637         if order_by is None:
638             raise ValueError(
639                 "earliest() and latest() require either fields as positional "
640                 "arguments or 'get_latest_by' in the model's Meta."
641             )
642 
643         assert not self.query.is_sliced, \
644             "Cannot change a query once a slice has been taken."
645         obj = self._chain()
646         obj.query.set_limits(high=1)
647         obj.query.clear_ordering(force_empty=True)
648         obj.query.add_ordering(*order_by)
649         return obj.get()
650 
651     def earliest(self, *fields):
652         return self._earliest(*fields)
653 
654     def latest(self, *fields):
655         return self.reverse()._earliest(*fields)
656 
657     def first(self):
658         """Return the first object of a query or None if no match is found."""
659         for obj in (self if self.ordered else self.order_by('pk'))[:1]:
660             return obj
661 
662     def last(self):
663         """Return the last object of a query or None if no match is found."""
664         for obj in (self.reverse() if self.ordered else self.order_by('-pk'))[:1]:
665             return obj
666 
667     def in_bulk(self, id_list=None, *, field_name='pk'):
668         """
669         Return a dictionary mapping each of the given IDs to the object with
670         that ID. If `id_list` isn't provided, evaluate the entire QuerySet.
671         """
672         assert not self.query.is_sliced, \
673             "Cannot use 'limit' or 'offset' with in_bulk"
674         opts = self.model._meta
675         unique_fields = [
676             constraint.fields[0]
677             for constraint in opts.total_unique_constraints
678             if len(constraint.fields) == 1
679         ]
680         if (
681             field_name != 'pk' and
682             not opts.get_field(field_name).unique and
683             field_name not in unique_fields and
684             not self.query.distinct_fields == (field_name,)
685         ):
686             raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
687         if id_list is not None:
688             if not id_list:
689                 return {}
690             filter_key = '{}__in'.format(field_name)
691             batch_size = connections[self.db].features.max_query_params
692             id_list = tuple(id_list)
693             # If the database has a limit on the number of query parameters
694             # (e.g. SQLite), retrieve objects in batches if necessary.
695             if batch_size and batch_size < len(id_list):
696                 qs = ()
697                 for offset in range(0, len(id_list), batch_size):
698                     batch = id_list[offset:offset + batch_size]
699                     qs += tuple(self.filter(**{filter_key: batch}).order_by())
700             else:
701                 qs = self.filter(**{filter_key: id_list}).order_by()
702         else:
703             qs = self._chain()
704         return {getattr(obj, field_name): obj for obj in qs}
705 
706     def delete(self):
707         """Delete the records in the current QuerySet."""
708         self._not_support_combined_queries('delete')
709         assert not self.query.is_sliced, \
710             "Cannot use 'limit' or 'offset' with delete."
711 
712         if self._fields is not None:
713             raise TypeError("Cannot call delete() after .values() or .values_list()")
714 
715         del_query = self._chain()
716 
717         # The delete is actually 2 queries - one to find related objects,
718         # and one to delete. Make sure that the discovery of related
719         # objects is performed on the same database as the deletion.
720         del_query._for_write = True
721 
722         # Disable non-supported fields.
723         del_query.query.select_for_update = False
724         del_query.query.select_related = False
725         del_query.query.clear_ordering(force_empty=True)
726 
727         collector = Collector(using=del_query.db)
728         collector.collect(del_query)
729         deleted, _rows_count = collector.delete()
730 
731         # Clear the result cache, in case this QuerySet gets reused.
732         self._result_cache = None
733         return deleted, _rows_count
734 
735     delete.alters_data = True
736     delete.queryset_only = True
737 
738     def _raw_delete(self, using):
739         """
740         Delete objects found from the given queryset in single direct SQL
741         query. No signals are sent and there is no protection for cascades.
742         """
743         query = self.query.clone()
744         query.__class__ = sql.DeleteQuery
745         cursor = query.get_compiler(using).execute_sql(CURSOR)
746         if cursor:
747             with cursor:
748                 return cursor.rowcount
749         return 0
750     _raw_delete.alters_data = True
751 
752     def update(self, **kwargs):
753         """
754         Update all elements in the current QuerySet, setting all the given
755         fields to the appropriate values.
756         """
757         self._not_support_combined_queries('update')
758         assert not self.query.is_sliced, \
759             "Cannot update a query once a slice has been taken."
760         self._for_write = True
761         query = self.query.chain(sql.UpdateQuery)
762         query.add_update_values(kwargs)
763         # Clear any annotations so that they won't be present in subqueries.
764         query.annotations = {}
765         with transaction.mark_for_rollback_on_error(using=self.db):
766             rows = query.get_compiler(self.db).execute_sql(CURSOR)
767         self._result_cache = None
768         return rows
769     update.alters_data = True
770 
771     def _update(self, values):
772         """
773         A version of update() that accepts field objects instead of field names.
774         Used primarily for model saving and not intended for use by general
775         code (it requires too much poking around at model internals to be
776         useful at that level).
777         """
778         assert not self.query.is_sliced, \
779             "Cannot update a query once a slice has been taken."
780         query = self.query.chain(sql.UpdateQuery)
781         query.add_update_fields(values)
782         # Clear any annotations so that they won't be present in subqueries.
783         query.annotations = {}
784         self._result_cache = None
785         return query.get_compiler(self.db).execute_sql(CURSOR)
786     _update.alters_data = True
787     _update.queryset_only = False
788 
789     def exists(self):
790         if self._result_cache is None:
791             return self.query.has_results(using=self.db)
792         return bool(self._result_cache)
793 
794     def _prefetch_related_objects(self):
795         # This method can only be called once the result cache has been filled.
796         prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups)
797         self._prefetch_done = True
798 
799     def explain(self, *, format=None, **options):
800         return self.query.explain(using=self.db, format=format, **options)
801 
802     ##################################################
803     # PUBLIC METHODS THAT RETURN A QUERYSET SUBCLASS #
804     ##################################################
805 
806     def raw(self, raw_query, params=None, translations=None, using=None):
807         if using is None:
808             using = self.db
809         qs = RawQuerySet(raw_query, model=self.model, params=params, translations=translations, using=using)
810         qs._prefetch_related_lookups = self._prefetch_related_lookups[:]
811         return qs
812 
813     def _values(self, *fields, **expressions):
814         clone = self._chain()
815         if expressions:
816             clone = clone.annotate(**expressions)
817         clone._fields = fields
818         clone.query.set_values(fields)
819         return clone
820 
821     def values(self, *fields, **expressions):
822         fields += tuple(expressions)
823         clone = self._values(*fields, **expressions)
824         clone._iterable_class = ValuesIterable
825         return clone
826 
827     def values_list(self, *fields, flat=False, named=False):
828         if flat and named:
829             raise TypeError("'flat' and 'named' can't be used together.")
830         if flat and len(fields) > 1:
831             raise TypeError("'flat' is not valid when values_list is called with more than one field.")
832 
833         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
834         _fields = []
835         expressions = {}
836         counter = 1
837         for field in fields:
838             if hasattr(field, 'resolve_expression'):
839                 field_id_prefix = getattr(field, 'default_alias', field.__class__.__name__.lower())
840                 while True:
841                     field_id = field_id_prefix + str(counter)
842                     counter += 1
843                     if field_id not in field_names:
844                         break
845                 expressions[field_id] = field
846                 _fields.append(field_id)
847             else:
848                 _fields.append(field)
849 
850         clone = self._values(*_fields, **expressions)
851         clone._iterable_class = (
852             NamedValuesListIterable if named
853             else FlatValuesListIterable if flat
854             else ValuesListIterable
855         )
856         return clone
857 
858     def dates(self, field_name, kind, order='ASC'):
859         """
860         Return a list of date objects representing all available dates for
861         the given field_name, scoped to 'kind'.
862         """
863         assert kind in ('year', 'month', 'week', 'day'), \
864             "'kind' must be one of 'year', 'month', 'week', or 'day'."
865         assert order in ('ASC', 'DESC'), \
866             "'order' must be either 'ASC' or 'DESC'."
867         return self.annotate(
868             datefield=Trunc(field_name, kind, output_field=DateField()),
869             plain_field=F(field_name)
870         ).values_list(
871             'datefield', flat=True
872         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datefield')
873 
874     def datetimes(self, field_name, kind, order='ASC', tzinfo=None, is_dst=None):
875         """
876         Return a list of datetime objects representing all available
877         datetimes for the given field_name, scoped to 'kind'.
878         """
879         assert kind in ('year', 'month', 'week', 'day', 'hour', 'minute', 'second'), \
880             "'kind' must be one of 'year', 'month', 'week', 'day', 'hour', 'minute', or 'second'."
881         assert order in ('ASC', 'DESC'), \
882             "'order' must be either 'ASC' or 'DESC'."
883         if settings.USE_TZ:
884             if tzinfo is None:
885                 tzinfo = timezone.get_current_timezone()
886         else:
887             tzinfo = None
888         return self.annotate(
889             datetimefield=Trunc(
890                 field_name,
891                 kind,
892                 output_field=DateTimeField(),
893                 tzinfo=tzinfo,
894                 is_dst=is_dst,
895             ),
896             plain_field=F(field_name)
897         ).values_list(
898             'datetimefield', flat=True
899         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datetimefield')
900 
901     def none(self):
902         """Return an empty QuerySet."""
903         clone = self._chain()
904         clone.query.set_empty()
905         return clone
906 
907     ##################################################################
908     # PUBLIC METHODS THAT ALTER ATTRIBUTES AND RETURN A NEW QUERYSET #
909     ##################################################################
910 
911     def all(self):
912         """
913         Return a new QuerySet that is a copy of the current one. This allows a
914         QuerySet to proxy for a model manager in some cases.
915         """
916         return self._chain()
917 
918     def filter(self, *args, **kwargs):
919         """
920         Return a new QuerySet instance with the args ANDed to the existing
921         set.
922         """
923         self._not_support_combined_queries('filter')
924         return self._filter_or_exclude(False, args, kwargs)
925 
926     def exclude(self, *args, **kwargs):
927         """
928         Return a new QuerySet instance with NOT (args) ANDed to the existing
929         set.
930         """
931         self._not_support_combined_queries('exclude')
932         return self._filter_or_exclude(True, args, kwargs)
933 
934     def _filter_or_exclude(self, negate, args, kwargs):
935         if args or kwargs:
936             assert not self.query.is_sliced, \
937                 "Cannot filter a query once a slice has been taken."
938 
939         clone = self._chain()
940         if self._defer_next_filter:
941             self._defer_next_filter = False
942             clone._deferred_filter = negate, args, kwargs
943         else:
944             clone._filter_or_exclude_inplace(negate, args, kwargs)
945         return clone
946 
947     def _filter_or_exclude_inplace(self, negate, args, kwargs):
948         if negate:
949             self._query.add_q(~Q(*args, **kwargs))
950         else:
951             self._query.add_q(Q(*args, **kwargs))
952 
953     def complex_filter(self, filter_obj):
954         """
955         Return a new QuerySet instance with filter_obj added to the filters.
956 
957         filter_obj can be a Q object or a dictionary of keyword lookup
958         arguments.
959 
960         This exists to support framework features such as 'limit_choices_to',
961         and usually it will be more natural to use other methods.
962         """
963         if isinstance(filter_obj, Q):
964             clone = self._chain()
965             clone.query.add_q(filter_obj)
966             return clone
967         else:
968             return self._filter_or_exclude(False, args=(), kwargs=filter_obj)
969 
970     def _combinator_query(self, combinator, *other_qs, all=False):
971         # Clone the query to inherit the select list and everything
972         clone = self._chain()
973         # Clear limits and ordering so they can be reapplied
974         clone.query.clear_ordering(True)
975         clone.query.clear_limits()
976         clone.query.combined_queries = (self.query,) + tuple(qs.query for qs in other_qs)
977         clone.query.combinator = combinator
978         clone.query.combinator_all = all
979         return clone
980 
981     def union(self, *other_qs, all=False):
982         # If the query is an EmptyQuerySet, combine all nonempty querysets.
983         if isinstance(self, EmptyQuerySet):
984             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]
985             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self
986         return self._combinator_query('union', *other_qs, all=all)
987 
988     def intersection(self, *other_qs):
989         # If any query is an EmptyQuerySet, return it.
990         if isinstance(self, EmptyQuerySet):
991             return self
992         for other in other_qs:
993             if isinstance(other, EmptyQuerySet):
994                 return other
995         return self._combinator_query('intersection', *other_qs)
996 
997     def difference(self, *other_qs):
998         # If the query is an EmptyQuerySet, return it.
999         if isinstance(self, EmptyQuerySet):
1000             return self
1001         return self._combinator_query('difference', *other_qs)
1002 
1003     def select_for_update(self, nowait=False, skip_locked=False, of=(), no_key=False):
1004         """
1005         Return a new QuerySet instance that will select objects with a
1006         FOR UPDATE lock.
1007         """
1008         if nowait and skip_locked:
1009             raise ValueError('The nowait option cannot be used with skip_locked.')
1010         obj = self._chain()
1011         obj._for_write = True
1012         obj.query.select_for_update = True
1013         obj.query.select_for_update_nowait = nowait
1014         obj.query.select_for_update_skip_locked = skip_locked
1015         obj.query.select_for_update_of = of
1016         obj.query.select_for_no_key_update = no_key
1017         return obj
1018 
1019     def select_related(self, *fields):
1020         """
1021         Return a new QuerySet instance that will select related objects.
1022 
1023         If fields are specified, they must be ForeignKey fields and only those
1024         related objects are included in the selection.
1025 
1026         If select_related(None) is called, clear the list.
1027         """
1028         self._not_support_combined_queries('select_related')
1029         if self._fields is not None:
1030             raise TypeError("Cannot call select_related() after .values() or .values_list()")
1031 
1032         obj = self._chain()
1033         if fields == (None,):
1034             obj.query.select_related = False
1035         elif fields:
1036             obj.query.add_select_related(fields)
1037         else:
1038             obj.query.select_related = True
1039         return obj
1040 
1041     def prefetch_related(self, *lookups):
1042         """
1043         Return a new QuerySet instance that will prefetch the specified
1044         Many-To-One and Many-To-Many related objects when the QuerySet is
1045         evaluated.
1046 
1047         When prefetch_related() is called more than once, append to the list of
1048         prefetch lookups. If prefetch_related(None) is called, clear the list.
1049         """
1050         self._not_support_combined_queries('prefetch_related')
1051         clone = self._chain()
1052         if lookups == (None,):
1053             clone._prefetch_related_lookups = ()
1054         else:
1055             for lookup in lookups:
1056                 if isinstance(lookup, Prefetch):
1057                     lookup = lookup.prefetch_to
1058                 lookup = lookup.split(LOOKUP_SEP, 1)[0]
1059                 if lookup in self.query._filtered_relations:
1060                     raise ValueError('prefetch_related() is not supported with FilteredRelation.')
1061             clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups
1062         return clone
1063 
1064     def annotate(self, *args, **kwargs):
1065         """
1066         Return a query set in which the returned objects have been annotated
1067         with extra data or aggregations.
1068         """
1069         self._not_support_combined_queries('annotate')
1070         return self._annotate(args, kwargs, select=True)
1071 
1072     def alias(self, *args, **kwargs):
1073         """
1074         Return a query set with added aliases for extra data or aggregations.
1075         """
1076         self._not_support_combined_queries('alias')
1077         return self._annotate(args, kwargs, select=False)
1078 
1079     def _annotate(self, args, kwargs, select=True):
1080         self._validate_values_are_expressions(args + tuple(kwargs.values()), method_name='annotate')
1081         annotations = {}
1082         for arg in args:
1083             # The default_alias property may raise a TypeError.
1084             try:
1085                 if arg.default_alias in kwargs:
1086                     raise ValueError("The named annotation '%s' conflicts with the "
1087                                      "default name for another annotation."
1088                                      % arg.default_alias)
1089             except TypeError:
1090                 raise TypeError("Complex annotations require an alias")
1091             annotations[arg.default_alias] = arg
1092         annotations.update(kwargs)
1093 
1094         clone = self._chain()
1095         names = self._fields
1096         if names is None:
1097             names = set(chain.from_iterable(
1098                 (field.name, field.attname) if hasattr(field, 'attname') else (field.name,)
1099                 for field in self.model._meta.get_fields()
1100             ))
1101 
1102         for alias, annotation in annotations.items():
1103             if alias in names:
1104                 raise ValueError("The annotation '%s' conflicts with a field on "
1105                                  "the model." % alias)
1106             if isinstance(annotation, FilteredRelation):
1107                 clone.query.add_filtered_relation(annotation, alias)
1108             else:
1109                 clone.query.add_annotation(
1110                     annotation, alias, is_summary=False, select=select,
1111                 )
1112         for alias, annotation in clone.query.annotations.items():
1113             if alias in annotations and annotation.contains_aggregate:
1114                 if clone._fields is None:
1115                     clone.query.group_by = True
1116                 else:
1117                     clone.query.set_group_by()
1118                 break
1119 
1120         return clone
1121 
1122     def order_by(self, *field_names):
1123         """Return a new QuerySet instance with the ordering changed."""
1124         assert not self.query.is_sliced, \
1125             "Cannot reorder a query once a slice has been taken."
1126         obj = self._chain()
1127         obj.query.clear_ordering(force_empty=False)
1128         obj.query.add_ordering(*field_names)
1129         return obj
1130 
1131     def distinct(self, *field_names):
1132         """
1133         Return a new QuerySet instance that will select only distinct results.
1134         """
1135         self._not_support_combined_queries('distinct')
1136         assert not self.query.is_sliced, \
1137             "Cannot create distinct fields once a slice has been taken."
1138         obj = self._chain()
1139         obj.query.add_distinct_fields(*field_names)
1140         return obj
1141 
1142     def extra(self, select=None, where=None, params=None, tables=None,
1143               order_by=None, select_params=None):
1144         """Add extra SQL fragments to the query."""
1145         self._not_support_combined_queries('extra')
1146         assert not self.query.is_sliced, \
1147             "Cannot change a query once a slice has been taken"
1148         clone = self._chain()
1149         clone.query.add_extra(select, select_params, where, params, tables, order_by)
1150         return clone
1151 
1152     def reverse(self):
1153         """Reverse the ordering of the QuerySet."""
1154         if self.query.is_sliced:
1155             raise TypeError('Cannot reverse a query once a slice has been taken.')
1156         clone = self._chain()
1157         clone.query.standard_ordering = not clone.query.standard_ordering
1158         return clone
1159 
1160     def defer(self, *fields):
1161         """
1162         Defer the loading of data for certain fields until they are accessed.
1163         Add the set of deferred fields to any existing set of deferred fields.
1164         The only exception to this is if None is passed in as the only
1165         parameter, in which case removal all deferrals.
1166         """
1167         self._not_support_combined_queries('defer')
1168         if self._fields is not None:
1169             raise TypeError("Cannot call defer() after .values() or .values_list()")
1170         clone = self._chain()
1171         if fields == (None,):
1172             clone.query.clear_deferred_loading()
1173         else:
1174             clone.query.add_deferred_loading(fields)
1175         return clone
1176 
1177     def only(self, *fields):
1178         """
1179         Essentially, the opposite of defer(). Only the fields passed into this
1180         method and that are not already specified as deferred are loaded
1181         immediately when the queryset is evaluated.
1182         """
1183         self._not_support_combined_queries('only')
1184         if self._fields is not None:
1185             raise TypeError("Cannot call only() after .values() or .values_list()")
1186         if fields == (None,):
1187             # Can only pass None to defer(), not only(), as the rest option.
1188             # That won't stop people trying to do this, so let's be explicit.
1189             raise TypeError("Cannot pass None as an argument to only().")
1190         for field in fields:
1191             field = field.split(LOOKUP_SEP, 1)[0]
1192             if field in self.query._filtered_relations:
1193                 raise ValueError('only() is not supported with FilteredRelation.')
1194         clone = self._chain()
1195         clone.query.add_immediate_loading(fields)
1196         return clone
1197 
1198     def using(self, alias):
1199         """Select which database this QuerySet should execute against."""
1200         clone = self._chain()
1201         clone._db = alias
1202         return clone
1203 
1204     ###################################
1205     # PUBLIC INTROSPECTION ATTRIBUTES #
1206     ###################################
1207 
1208     @property
1209     def ordered(self):
1210         """
1211         Return True if the QuerySet is ordered -- i.e. has an order_by()
1212         clause or a default ordering on the model (or is empty).
1213         """
1214         if isinstance(self, EmptyQuerySet):
1215             return True
1216         if self.query.extra_order_by or self.query.order_by:
1217             return True
1218         elif (
1219             self.query.default_ordering and
1220             self.query.get_meta().ordering and
1221             # A default ordering doesn't affect GROUP BY queries.
1222             not self.query.group_by
1223         ):
1224             return True
1225         else:
1226             return False
1227 
1228     @property
1229     def db(self):
1230         """Return the database used if this query is executed now."""
1231         if self._for_write:
1232             return self._db or router.db_for_write(self.model, **self._hints)
1233         return self._db or router.db_for_read(self.model, **self._hints)
1234 
1235     ###################
1236     # PRIVATE METHODS #
1237     ###################
1238 
1239     def _insert(self, objs, fields, returning_fields=None, raw=False, using=None, ignore_conflicts=False):
1240         """
1241         Insert a new record for the given model. This provides an interface to
1242         the InsertQuery class and is how Model.save() is implemented.
1243         """
1244         self._for_write = True
1245         if using is None:
1246             using = self.db
1247         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
1248         query.insert_values(fields, objs, raw=raw)
1249         return query.get_compiler(using=using).execute_sql(returning_fields)
1250     _insert.alters_data = True
1251     _insert.queryset_only = False
1252 
1253     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):
1254         """
1255         Helper method for bulk_create() to insert objs one batch at a time.
1256         """
1257         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
1258             raise NotSupportedError('This database backend does not support ignoring conflicts.')
1259         ops = connections[self.db].ops
1260         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
1261         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
1262         inserted_rows = []
1263         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
1264         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
1265             if bulk_return and not ignore_conflicts:
1266                 inserted_rows.extend(self._insert(
1267                     item, fields=fields, using=self.db,
1268                     returning_fields=self.model._meta.db_returning_fields,
1269                     ignore_conflicts=ignore_conflicts,
1270                 ))
1271             else:
1272                 self._insert(item, fields=fields, using=self.db, ignore_conflicts=ignore_conflicts)
1273         return inserted_rows
1274 
1275     def _chain(self, **kwargs):
1276         """
1277         Return a copy of the current QuerySet that's ready for another
1278         operation.
1279         """
1280         obj = self._clone()
1281         if obj._sticky_filter:
1282             obj.query.filter_is_sticky = True
1283             obj._sticky_filter = False
1284         obj.__dict__.update(kwargs)
1285         return obj
1286 
1287     def _clone(self):
1288         """
1289         Return a copy of the current QuerySet. A lightweight alternative
1290         to deepcopy().
1291         """
1292         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
1293         c._sticky_filter = self._sticky_filter
1294         c._for_write = self._for_write
1295         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
1296         c._known_related_objects = self._known_related_objects
1297         c._iterable_class = self._iterable_class
1298         c._fields = self._fields
1299         return c
1300 
1301     def _fetch_all(self):
1302         if self._result_cache is None:
1303             self._result_cache = list(self._iterable_class(self))
1304         if self._prefetch_related_lookups and not self._prefetch_done:
1305             self._prefetch_related_objects()
1306 
1307     def _next_is_sticky(self):
1308         """
1309         Indicate that the next filter call and the one following that should
1310         be treated as a single filter. This is only important when it comes to
1311         determining when to reuse tables for many-to-many filters. Required so
1312         that we can filter naturally on the results of related managers.
1313 
1314         This doesn't return a clone of the current QuerySet (it returns
1315         "self"). The method is only used internally and should be immediately
1316         followed by a filter() that does create a clone.
1317         """
1318         self._sticky_filter = True
1319         return self
1320 
1321     def _merge_sanity_check(self, other):
1322         """Check that two QuerySet classes may be merged."""
1323         if self._fields is not None and (
1324                 set(self.query.values_select) != set(other.query.values_select) or
1325                 set(self.query.extra_select) != set(other.query.extra_select) or
1326                 set(self.query.annotation_select) != set(other.query.annotation_select)):
1327             raise TypeError(
1328                 "Merging '%s' classes must involve the same values in each case."
1329                 % self.__class__.__name__
1330             )
1331 
1332     def _merge_known_related_objects(self, other):
1333         """
1334         Keep track of all known related objects from either QuerySet instance.
1335         """
1336         for field, objects in other._known_related_objects.items():
1337             self._known_related_objects.setdefault(field, {}).update(objects)
1338 
1339     def resolve_expression(self, *args, **kwargs):
1340         if self._fields and len(self._fields) > 1:
1341             # values() queryset can only be used as nested queries
1342             # if they are set up to select only a single field.
1343             raise TypeError('Cannot use multi-field values as a filter value.')
1344         query = self.query.resolve_expression(*args, **kwargs)
1345         query._db = self._db
1346         return query
1347     resolve_expression.queryset_only = True
1348 
1349     def _add_hints(self, **hints):
1350         """
1351         Update hinting information for use by routers. Add new key/values or
1352         overwrite existing key/values.
1353         """
1354         self._hints.update(hints)
1355 
1356     def _has_filters(self):
1357         """
1358         Check if this QuerySet has any filtering going on. This isn't
1359         equivalent with checking if all objects are present in results, for
1360         example, qs[1:]._has_filters() -> False.
1361         """
1362         return self.query.has_filters()
1363 
1364     @staticmethod
1365     def _validate_values_are_expressions(values, method_name):
1366         invalid_args = sorted(str(arg) for arg in values if not hasattr(arg, 'resolve_expression'))
1367         if invalid_args:
1368             raise TypeError(
1369                 'QuerySet.%s() received non-expression(s): %s.' % (
1370                     method_name,
1371                     ', '.join(invalid_args),
1372                 )
1373             )
1374 
1375     def _not_support_combined_queries(self, operation_name):
1376         if self.query.combinator:
1377             raise NotSupportedError(
1378                 'Calling QuerySet.%s() after %s() is not supported.'
1379                 % (operation_name, self.query.combinator)
1380             )

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>get_aggregation</method>
<code>
416     def get_aggregation(self, using, added_aggregate_names):
417         """
418         Return the dictionary with the values of the existing aggregations.
419         """
420         if not self.annotation_select:
421             return {}
422         existing_annotations = [
423             annotation for alias, annotation
424             in self.annotations.items()
425             if alias not in added_aggregate_names
426         ]
427         # Decide if we need to use a subquery.
428         #
429         # Existing annotations would cause incorrect results as get_aggregation()
430         # must produce just one result and thus must not use GROUP BY. But we
431         # aren't smart enough to remove the existing annotations from the
432         # query, so those would force us to use GROUP BY.
433         #
434         # If the query has limit or distinct, or uses set operations, then
435         # those operations must be done in a subquery so that the query
436         # aggregates on the limit and/or distinct results instead of applying
437         # the distinct and limit after the aggregation.
438         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or
439                 self.distinct or self.combinator):
440             from django.db.models.sql.subqueries import AggregateQuery
441             outer_query = AggregateQuery(self.model)
442             inner_query = self.clone()
443             inner_query.select_for_update = False
444             inner_query.select_related = False
445             inner_query.set_annotation_mask(self.annotation_select)
446             if not self.is_sliced and not self.distinct_fields:
447                 # Queries with distinct_fields need ordering and when a limit
448                 # is applied we must take the slice from the ordered query.
449                 # Otherwise no need for ordering.
450                 inner_query.clear_ordering(True)
451             if not inner_query.distinct:
452                 # If the inner query uses default select and it has some
453                 # aggregate annotations, then we must make sure the inner
454                 # query is grouped by the main model's primary key. However,
455                 # clearing the select clause can alter results if distinct is
456                 # used.
457                 has_existing_aggregate_annotations = any(
458                     annotation for annotation in existing_annotations
459                     if getattr(annotation, 'contains_aggregate', True)
460                 )
461                 if inner_query.default_cols and has_existing_aggregate_annotations:
462                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
463                 inner_query.default_cols = False
464 
465             relabels = {t: 'subquery' for t in inner_query.alias_map}
466             relabels[None] = 'subquery'
467             # Remove any aggregates marked for reduction from the subquery
468             # and move them to the outer AggregateQuery.
469             col_cnt = 0
470             for alias, expression in list(inner_query.annotation_select.items()):
471                 annotation_select_mask = inner_query.annotation_select_mask
472                 if expression.is_summary:
473                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
474                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
475                     del inner_query.annotations[alias]
476                     annotation_select_mask.remove(alias)
477                 # Make sure the annotation_select wont use cached results.
478                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)
479             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
480                 # In case of Model.objects[0:3].count(), there would be no
481                 # field selected in the inner query, yet we must use a subquery.
482                 # So, make sure at least one field is selected.
483                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
484             try:
485                 outer_query.add_subquery(inner_query, using)
486             except EmptyResultSet:
487                 return {
488                     alias: None
489                     for alias in outer_query.annotation_select
490                 }
491         else:
492             outer_query = self
493             self.select = ()
494             self.default_cols = False
495             self.extra = {}
496 
497         outer_query.clear_ordering(True)
498         outer_query.clear_limits()
499         outer_query.select_for_update = False
500         outer_query.select_related = False
501         compiler = outer_query.get_compiler(using)
502         result = compiler.execute_sql(SINGLE)
503         if result is None:
504             result = [None] * len(outer_query.annotation_select)
505 
506         converters = compiler.get_converters(outer_query.annotation_select.values())
507         result = next(compiler.apply_converters((result,), converters))
508 
509         return dict(zip(outer_query.annotation_select, result))

</code><intended_behavior>This method must be inspected and possibly revised to ensure that it properly includes and references annotated fields in the aggregation phase. The bug fix should allow the method to check if an aggregated field has an alias provided by an earlier annotation and use that alias in the SQL construction. The method should avoid losing the context of annotations when translating queryset operations into SQL, particularly ensuring that aliases are used instead of original field names when those fields have been renamed through annotation. This correction would prevent errors when the database engine tries to execute the generated SQL command that refers to an incorrectly named or non-existent field.</intended_behavior>, <file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>None</method>
<code>
136 class Query(BaseExpression):
137     """A single SQL query."""
138 
139     alias_prefix = 'T'
140     subq_aliases = frozenset([alias_prefix])
141 
142     compiler = 'SQLCompiler'
143 
144     def __init__(self, model, where=WhereNode, alias_cols=True):
145         self.model = model
146         self.alias_refcount = {}
147         # alias_map is the most important data structure regarding joins.
148         # It's used for recording which joins exist in the query and what
149         # types they are. The key is the alias of the joined table (possibly
150         # the table name) and the value is a Join-like object (see
151         # sql.datastructures.Join for more information).
152         self.alias_map = {}
153         # Whether to provide alias to columns during reference resolving.
154         self.alias_cols = alias_cols
155         # Sometimes the query contains references to aliases in outer queries (as
156         # a result of split_exclude). Correct alias quoting needs to know these
157         # aliases too.
158         # Map external tables to whether they are aliased.
159         self.external_aliases = {}
160         self.table_map = {}     # Maps table names to list of aliases.
161         self.default_cols = True
162         self.default_ordering = True
163         self.standard_ordering = True
164         self.used_aliases = set()
165         self.filter_is_sticky = False
166         self.subquery = False
167 
168         # SQL-related attributes
169         # Select and related select clauses are expressions to use in the
170         # SELECT clause of the query.
171         # The select is used for cases where we want to set up the select
172         # clause to contain other than default fields (values(), subqueries...)
173         # Note that annotations go to annotations dictionary.
174         self.select = ()
175         self.where = where()
176         self.where_class = where
177         # The group_by attribute can have one of the following forms:
178         #  - None: no group by at all in the query
179         #  - A tuple of expressions: group by (at least) those expressions.
180         #    String refs are also allowed for now.
181         #  - True: group by all select fields of the model
182         # See compiler.get_group_by() for details.
183         self.group_by = None
184         self.order_by = ()
185         self.low_mark, self.high_mark = 0, None  # Used for offset/limit
186         self.distinct = False
187         self.distinct_fields = ()
188         self.select_for_update = False
189         self.select_for_update_nowait = False
190         self.select_for_update_skip_locked = False
191         self.select_for_update_of = ()
192         self.select_for_no_key_update = False
193 
194         self.select_related = False
195         # Arbitrary limit for select_related to prevents infinite recursion.
196         self.max_depth = 5
197 
198         # Holds the selects defined by a call to values() or values_list()
199         # excluding annotation_select and extra_select.
200         self.values_select = ()
201 
202         # SQL annotation-related attributes
203         self.annotations = {}  # Maps alias -> Annotation Expression
204         self.annotation_select_mask = None
205         self._annotation_select_cache = None
206 
207         # Set combination attributes
208         self.combinator = None
209         self.combinator_all = False
210         self.combined_queries = ()
211 
212         # These are for extensions. The contents are more or less appended
213         # verbatim to the appropriate clause.
214         self.extra = {}  # Maps col_alias -> (col_sql, params).
215         self.extra_select_mask = None
216         self._extra_select_cache = None
217 
218         self.extra_tables = ()
219         self.extra_order_by = ()
220 
221         # A tuple that is a set of model field names and either True, if these
222         # are the fields to defer, or False if these are the only fields to
223         # load.
224         self.deferred_loading = (frozenset(), True)
225 
226         self._filtered_relations = {}
227 
228         self.explain_query = False
229         self.explain_format = None
230         self.explain_options = {}
231 
232     @property
233     def output_field(self):
234         if len(self.select) == 1:
235             select = self.select[0]
236             return getattr(select, 'target', None) or select.field
237         elif len(self.annotation_select) == 1:
238             return next(iter(self.annotation_select.values())).output_field
239 
240     @property
241     def has_select_fields(self):
242         return bool(self.select or self.annotation_select_mask or self.extra_select_mask)
243 
244     @cached_property
245     def base_table(self):
246         for alias in self.alias_map:
247             return alias
248 
249     def __str__(self):
250         """
251         Return the query as a string of SQL with the parameter values
252         substituted in (use sql_with_params() to see the unsubstituted string).
253 
254         Parameter values won't necessarily be quoted correctly, since that is
255         done by the database interface at execution time.
256         """
257         sql, params = self.sql_with_params()
258         return sql % params
259 
260     def sql_with_params(self):
261         """
262         Return the query as an SQL string and the parameters that will be
263         substituted into the query.
264         """
265         return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()
266 
267     def __deepcopy__(self, memo):
268         """Limit the amount of work when a Query is deepcopied."""
269         result = self.clone()
270         memo[id(self)] = result
271         return result
272 
273     def get_compiler(self, using=None, connection=None):
274         if using is None and connection is None:
275             raise ValueError("Need either using or connection")
276         if using:
277             connection = connections[using]
278         return connection.ops.compiler(self.compiler)(self, connection, using)
279 
280     def get_meta(self):
281         """
282         Return the Options instance (the model._meta) from which to start
283         processing. Normally, this is self.model._meta, but it can be changed
284         by subclasses.
285         """
286         return self.model._meta
287 
288     def clone(self):
289         """
290         Return a copy of the current Query. A lightweight alternative to
291         to deepcopy().
292         """
293         obj = Empty()
294         obj.__class__ = self.__class__
295         # Copy references to everything.
296         obj.__dict__ = self.__dict__.copy()
297         # Clone attributes that can't use shallow copy.
298         obj.alias_refcount = self.alias_refcount.copy()
299         obj.alias_map = self.alias_map.copy()
300         obj.external_aliases = self.external_aliases.copy()
301         obj.table_map = self.table_map.copy()
302         obj.where = self.where.clone()
303         obj.annotations = self.annotations.copy()
304         if self.annotation_select_mask is None:
305             obj.annotation_select_mask = None
306         else:
307             obj.annotation_select_mask = self.annotation_select_mask.copy()
308         obj.combined_queries = tuple(query.clone() for query in self.combined_queries)
309         # _annotation_select_cache cannot be copied, as doing so breaks the
310         # (necessary) state in which both annotations and
311         # _annotation_select_cache point to the same underlying objects.
312         # It will get re-populated in the cloned queryset the next time it's
313         # used.
314         obj._annotation_select_cache = None
315         obj.extra = self.extra.copy()
316         if self.extra_select_mask is None:
317             obj.extra_select_mask = None
318         else:
319             obj.extra_select_mask = self.extra_select_mask.copy()
320         if self._extra_select_cache is None:
321             obj._extra_select_cache = None
322         else:
323             obj._extra_select_cache = self._extra_select_cache.copy()
324         if self.select_related is not False:
325             # Use deepcopy because select_related stores fields in nested
326             # dicts.
327             obj.select_related = copy.deepcopy(obj.select_related)
328         if 'subq_aliases' in self.__dict__:
329             obj.subq_aliases = self.subq_aliases.copy()
330         obj.used_aliases = self.used_aliases.copy()
331         obj._filtered_relations = self._filtered_relations.copy()
332         # Clear the cached_property
333         try:
334             del obj.base_table
335         except AttributeError:
336             pass
337         return obj
338 
339     def chain(self, klass=None):
340         """
341         Return a copy of the current Query that's ready for another operation.
342         The klass argument changes the type of the Query, e.g. UpdateQuery.
343         """
344         obj = self.clone()
345         if klass and obj.__class__ != klass:
346             obj.__class__ = klass
347         if not obj.filter_is_sticky:
348             obj.used_aliases = set()
349         obj.filter_is_sticky = False
350         if hasattr(obj, '_setup_query'):
351             obj._setup_query()
352         return obj
353 
354     def relabeled_clone(self, change_map):
355         clone = self.clone()
356         clone.change_aliases(change_map)
357         return clone
358 
359     def _get_col(self, target, field, alias):
360         if not self.alias_cols:
361             alias = None
362         return target.get_col(alias, field)
363 
364     def rewrite_cols(self, annotation, col_cnt):
365         # We must make sure the inner query has the referred columns in it.
366         # If we are aggregating over an annotation, then Django uses Ref()
367         # instances to note this. However, if we are annotating over a column
368         # of a related model, then it might be that column isn't part of the
369         # SELECT clause of the inner query, and we must manually make sure
370         # the column is selected. An example case is:
371         #    .aggregate(Sum('author__awards'))
372         # Resolving this expression results in a join to author, but there
373         # is no guarantee the awards column of author is in the select clause
374         # of the query. Thus we must manually add the column to the inner
375         # query.
376         orig_exprs = annotation.get_source_expressions()
377         new_exprs = []
378         for expr in orig_exprs:
379             # FIXME: These conditions are fairly arbitrary. Identify a better
380             # method of having expressions decide which code path they should
381             # take.
382             if isinstance(expr, Ref):
383                 # Its already a Ref to subquery (see resolve_ref() for
384                 # details)
385                 new_exprs.append(expr)
386             elif isinstance(expr, (WhereNode, Lookup)):
387                 # Decompose the subexpressions further. The code here is
388                 # copied from the else clause, but this condition must appear
389                 # before the contains_aggregate/is_summary condition below.
390                 new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
391                 new_exprs.append(new_expr)
392             else:
393                 # Reuse aliases of expressions already selected in subquery.
394                 for col_alias, selected_annotation in self.annotation_select.items():
395                     if selected_annotation is expr:
396                         new_expr = Ref(col_alias, expr)
397                         break
398                 else:
399                     # An expression that is not selected the subquery.
400                     if isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):
401                         # Reference column or another aggregate. Select it
402                         # under a non-conflicting alias.
403                         col_cnt += 1
404                         col_alias = '__col%d' % col_cnt
405                         self.annotations[col_alias] = expr
406                         self.append_annotation_mask([col_alias])
407                         new_expr = Ref(col_alias, expr)
408                     else:
409                         # Some other expression not referencing database values
410                         # directly. Its subexpression might contain Cols.
411                         new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
412                 new_exprs.append(new_expr)
413         annotation.set_source_expressions(new_exprs)
414         return annotation, col_cnt
415 
416     def get_aggregation(self, using, added_aggregate_names):
417         """
418         Return the dictionary with the values of the existing aggregations.
419         """
420         if not self.annotation_select:
421             return {}
422         existing_annotations = [
423             annotation for alias, annotation
424             in self.annotations.items()
425             if alias not in added_aggregate_names
426         ]
427         # Decide if we need to use a subquery.
428         #
429         # Existing annotations would cause incorrect results as get_aggregation()
430         # must produce just one result and thus must not use GROUP BY. But we
431         # aren't smart enough to remove the existing annotations from the
432         # query, so those would force us to use GROUP BY.
433         #
434         # If the query has limit or distinct, or uses set operations, then
435         # those operations must be done in a subquery so that the query
436         # aggregates on the limit and/or distinct results instead of applying
437         # the distinct and limit after the aggregation.
438         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or
439                 self.distinct or self.combinator):
440             from django.db.models.sql.subqueries import AggregateQuery
441             outer_query = AggregateQuery(self.model)
442             inner_query = self.clone()
443             inner_query.select_for_update = False
444             inner_query.select_related = False
445             inner_query.set_annotation_mask(self.annotation_select)
446             if not self.is_sliced and not self.distinct_fields:
447                 # Queries with distinct_fields need ordering and when a limit
448                 # is applied we must take the slice from the ordered query.
449                 # Otherwise no need for ordering.
450                 inner_query.clear_ordering(True)
451             if not inner_query.distinct:
452                 # If the inner query uses default select and it has some
453                 # aggregate annotations, then we must make sure the inner
454                 # query is grouped by the main model's primary key. However,
455                 # clearing the select clause can alter results if distinct is
456                 # used.
457                 has_existing_aggregate_annotations = any(
458                     annotation for annotation in existing_annotations
459                     if getattr(annotation, 'contains_aggregate', True)
460                 )
461                 if inner_query.default_cols and has_existing_aggregate_annotations:
462                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
463                 inner_query.default_cols = False
464 
465             relabels = {t: 'subquery' for t in inner_query.alias_map}
466             relabels[None] = 'subquery'
467             # Remove any aggregates marked for reduction from the subquery
468             # and move them to the outer AggregateQuery.
469             col_cnt = 0
470             for alias, expression in list(inner_query.annotation_select.items()):
471                 annotation_select_mask = inner_query.annotation_select_mask
472                 if expression.is_summary:
473                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
474                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
475                     del inner_query.annotations[alias]
476                     annotation_select_mask.remove(alias)
477                 # Make sure the annotation_select wont use cached results.
478                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)
479             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
480                 # In case of Model.objects[0:3].count(), there would be no
481                 # field selected in the inner query, yet we must use a subquery.
482                 # So, make sure at least one field is selected.
483                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
484             try:
485                 outer_query.add_subquery(inner_query, using)
486             except EmptyResultSet:
487                 return {
488                     alias: None
489                     for alias in outer_query.annotation_select
490                 }
491         else:
492             outer_query = self
493             self.select = ()
494             self.default_cols = False
495             self.extra = {}
496 
497         outer_query.clear_ordering(True)
498         outer_query.clear_limits()
499         outer_query.select_for_update = False
500         outer_query.select_related = False
501         compiler = outer_query.get_compiler(using)
502         result = compiler.execute_sql(SINGLE)
503         if result is None:
504             result = [None] * len(outer_query.annotation_select)
505 
506         converters = compiler.get_converters(outer_query.annotation_select.values())
507         result = next(compiler.apply_converters((result,), converters))
508 
509         return dict(zip(outer_query.annotation_select, result))
510 
511     def get_count(self, using):
512         """
513         Perform a COUNT() query using the current filter constraints.
514         """
515         obj = self.clone()
516         obj.add_annotation(Count('*'), alias='__count', is_summary=True)
517         number = obj.get_aggregation(using, ['__count'])['__count']
518         if number is None:
519             number = 0
520         return number
521 
522     def has_filters(self):
523         return self.where
524 
525     def exists(self):
526         q = self.clone()
527         if not q.distinct:
528             if q.group_by is True:
529                 q.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
530                 # Disable GROUP BY aliases to avoid orphaning references to the
531                 # SELECT clause which is about to be cleared.
532                 q.set_group_by(allow_aliases=False)
533             q.clear_select_clause()
534         q.clear_ordering(True)
535         q.set_limits(high=1)
536         q.add_extra({'a': 1}, None, None, None, None, None)
537         q.set_extra_mask(['a'])
538         return q
539 
540     def has_results(self, using):
541         q = self.exists()
542         compiler = q.get_compiler(using=using)
543         return compiler.has_results()
544 
545     def explain(self, using, format=None, **options):
546         q = self.clone()
547         q.explain_query = True
548         q.explain_format = format
549         q.explain_options = options
550         compiler = q.get_compiler(using=using)
551         return '\n'.join(compiler.explain_query())
552 
553     def combine(self, rhs, connector):
554         """
555         Merge the 'rhs' query into the current one (with any 'rhs' effects
556         being applied *after* (that is, "to the right of") anything in the
557         current query. 'rhs' is not modified during a call to this function.
558 
559         The 'connector' parameter describes how to connect filters from the
560         'rhs' query.
561         """
562         assert self.model == rhs.model, \
563             "Cannot combine queries on two different base models."
564         assert not self.is_sliced, \
565             "Cannot combine queries once a slice has been taken."
566         assert self.distinct == rhs.distinct, \
567             "Cannot combine a unique query with a non-unique query."
568         assert self.distinct_fields == rhs.distinct_fields, \
569             "Cannot combine queries with different distinct fields."
570 
571         # Work out how to relabel the rhs aliases, if necessary.
572         change_map = {}
573         conjunction = (connector == AND)
574 
575         # Determine which existing joins can be reused. When combining the
576         # query with AND we must recreate all joins for m2m filters. When
577         # combining with OR we can reuse joins. The reason is that in AND
578         # case a single row can't fulfill a condition like:
579         #     revrel__col=1 & revrel__col=2
580         # But, there might be two different related rows matching this
581         # condition. In OR case a single True is enough, so single row is
582         # enough, too.
583         #
584         # Note that we will be creating duplicate joins for non-m2m joins in
585         # the AND case. The results will be correct but this creates too many
586         # joins. This is something that could be fixed later on.
587         reuse = set() if conjunction else set(self.alias_map)
588         # Base table must be present in the query - this is the same
589         # table on both sides.
590         self.get_initial_alias()
591         joinpromoter = JoinPromoter(connector, 2, False)
592         joinpromoter.add_votes(
593             j for j in self.alias_map if self.alias_map[j].join_type == INNER)
594         rhs_votes = set()
595         # Now, add the joins from rhs query into the new query (skipping base
596         # table).
597         rhs_tables = list(rhs.alias_map)[1:]
598         for alias in rhs_tables:
599             join = rhs.alias_map[alias]
600             # If the left side of the join was already relabeled, use the
601             # updated alias.
602             join = join.relabeled_clone(change_map)
603             new_alias = self.join(join, reuse=reuse)
604             if join.join_type == INNER:
605                 rhs_votes.add(new_alias)
606             # We can't reuse the same join again in the query. If we have two
607             # distinct joins for the same connection in rhs query, then the
608             # combined query must have two joins, too.
609             reuse.discard(new_alias)
610             if alias != new_alias:
611                 change_map[alias] = new_alias
612             if not rhs.alias_refcount[alias]:
613                 # The alias was unused in the rhs query. Unref it so that it
614                 # will be unused in the new query, too. We have to add and
615                 # unref the alias so that join promotion has information of
616                 # the join type for the unused alias.
617                 self.unref_alias(new_alias)
618         joinpromoter.add_votes(rhs_votes)
619         joinpromoter.update_join_types(self)
620 
621         # Now relabel a copy of the rhs where-clause and add it to the current
622         # one.
623         w = rhs.where.clone()
624         w.relabel_aliases(change_map)
625         self.where.add(w, connector)
626 
627         # Selection columns and extra extensions are those provided by 'rhs'.
628         if rhs.select:
629             self.set_select([col.relabeled_clone(change_map) for col in rhs.select])
630         else:
631             self.select = ()
632 
633         if connector == OR:
634             # It would be nice to be able to handle this, but the queries don't
635             # really make sense (or return consistent value sets). Not worth
636             # the extra complexity when you can write a real query instead.
637             if self.extra and rhs.extra:
638                 raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")
639         self.extra.update(rhs.extra)
640         extra_select_mask = set()
641         if self.extra_select_mask is not None:
642             extra_select_mask.update(self.extra_select_mask)
643         if rhs.extra_select_mask is not None:
644             extra_select_mask.update(rhs.extra_select_mask)
645         if extra_select_mask:
646             self.set_extra_mask(extra_select_mask)
647         self.extra_tables += rhs.extra_tables
648 
649         # Ordering uses the 'rhs' ordering, unless it has none, in which case
650         # the current ordering is used.
651         self.order_by = rhs.order_by or self.order_by
652         self.extra_order_by = rhs.extra_order_by or self.extra_order_by
653 
654     def deferred_to_data(self, target, callback):
655         """
656         Convert the self.deferred_loading data structure to an alternate data
657         structure, describing the field that *will* be loaded. This is used to
658         compute the columns to select from the database and also by the
659         QuerySet class to work out which fields are being initialized on each
660         model. Models that have all their fields included aren't mentioned in
661         the result, only those that have field restrictions in place.
662 
663         The "target" parameter is the instance that is populated (in place).
664         The "callback" is a function that is called whenever a (model, field)
665         pair need to be added to "target". It accepts three parameters:
666         "target", and the model and list of fields being added for that model.
667         """
668         field_names, defer = self.deferred_loading
669         if not field_names:
670             return
671         orig_opts = self.get_meta()
672         seen = {}
673         must_include = {orig_opts.concrete_model: {orig_opts.pk}}
674         for field_name in field_names:
675             parts = field_name.split(LOOKUP_SEP)
676             cur_model = self.model._meta.concrete_model
677             opts = orig_opts
678             for name in parts[:-1]:
679                 old_model = cur_model
680                 if name in self._filtered_relations:
681                     name = self._filtered_relations[name].relation_name
682                 source = opts.get_field(name)
683                 if is_reverse_o2o(source):
684                     cur_model = source.related_model
685                 else:
686                     cur_model = source.remote_field.model
687                 opts = cur_model._meta
688                 # Even if we're "just passing through" this model, we must add
689                 # both the current model's pk and the related reference field
690                 # (if it's not a reverse relation) to the things we select.
691                 if not is_reverse_o2o(source):
692                     must_include[old_model].add(source)
693                 add_to_dict(must_include, cur_model, opts.pk)
694             field = opts.get_field(parts[-1])
695             is_reverse_object = field.auto_created and not field.concrete
696             model = field.related_model if is_reverse_object else field.model
697             model = model._meta.concrete_model
698             if model == opts.model:
699                 model = cur_model
700             if not is_reverse_o2o(field):
701                 add_to_dict(seen, model, field)
702 
703         if defer:
704             # We need to load all fields for each model, except those that
705             # appear in "seen" (for all models that appear in "seen"). The only
706             # slight complexity here is handling fields that exist on parent
707             # models.
708             workset = {}
709             for model, values in seen.items():
710                 for field in model._meta.local_fields:
711                     if field not in values:
712                         m = field.model._meta.concrete_model
713                         add_to_dict(workset, m, field)
714             for model, values in must_include.items():
715                 # If we haven't included a model in workset, we don't add the
716                 # corresponding must_include fields for that model, since an
717                 # empty set means "include all fields". That's why there's no
718                 # "else" branch here.
719                 if model in workset:
720                     workset[model].update(values)
721             for model, values in workset.items():
722                 callback(target, model, values)
723         else:
724             for model, values in must_include.items():
725                 if model in seen:
726                     seen[model].update(values)
727                 else:
728                     # As we've passed through this model, but not explicitly
729                     # included any fields, we have to make sure it's mentioned
730                     # so that only the "must include" fields are pulled in.
731                     seen[model] = values
732             # Now ensure that every model in the inheritance chain is mentioned
733             # in the parent list. Again, it must be mentioned to ensure that
734             # only "must include" fields are pulled in.
735             for model in orig_opts.get_parent_list():
736                 seen.setdefault(model, set())
737             for model, values in seen.items():
738                 callback(target, model, values)
739 
740     def table_alias(self, table_name, create=False, filtered_relation=None):
741         """
742         Return a table alias for the given table_name and whether this is a
743         new alias or not.
744 
745         If 'create' is true, a new alias is always created. Otherwise, the
746         most recently created alias for the table (if one exists) is reused.
747         """
748         alias_list = self.table_map.get(table_name)
749         if not create and alias_list:
750             alias = alias_list[0]
751             self.alias_refcount[alias] += 1
752             return alias, False
753 
754         # Create a new alias for this table.
755         if alias_list:
756             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
757             alias_list.append(alias)
758         else:
759             # The first occurrence of a table uses the table name directly.
760             alias = filtered_relation.alias if filtered_relation is not None else table_name
761             self.table_map[table_name] = [alias]
762         self.alias_refcount[alias] = 1
763         return alias, True
764 
765     def ref_alias(self, alias):
766         """Increases the reference count for this alias."""
767         self.alias_refcount[alias] += 1
768 
769     def unref_alias(self, alias, amount=1):
770         """Decreases the reference count for this alias."""
771         self.alias_refcount[alias] -= amount
772 
773     def promote_joins(self, aliases):
774         """
775         Promote recursively the join type of given aliases and its children to
776         an outer join. If 'unconditional' is False, only promote the join if
777         it is nullable or the parent join is an outer join.
778 
779         The children promotion is done to avoid join chains that contain a LOUTER
780         b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,
781         then we must also promote b->c automatically, or otherwise the promotion
782         of a->b doesn't actually change anything in the query results.
783         """
784         aliases = list(aliases)
785         while aliases:
786             alias = aliases.pop(0)
787             if self.alias_map[alias].join_type is None:
788                 # This is the base table (first FROM entry) - this table
789                 # isn't really joined at all in the query, so we should not
790                 # alter its join type.
791                 continue
792             # Only the first alias (skipped above) should have None join_type
793             assert self.alias_map[alias].join_type is not None
794             parent_alias = self.alias_map[alias].parent_alias
795             parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER
796             already_louter = self.alias_map[alias].join_type == LOUTER
797             if ((self.alias_map[alias].nullable or parent_louter) and
798                     not already_louter):
799                 self.alias_map[alias] = self.alias_map[alias].promote()
800                 # Join type of 'alias' changed, so re-examine all aliases that
801                 # refer to this one.
802                 aliases.extend(
803                     join for join in self.alias_map
804                     if self.alias_map[join].parent_alias == alias and join not in aliases
805                 )
806 
807     def demote_joins(self, aliases):
808         """
809         Change join type from LOUTER to INNER for all joins in aliases.
810 
811         Similarly to promote_joins(), this method must ensure no join chains
812         containing first an outer, then an inner join are generated. If we
813         are demoting b->c join in chain a LOUTER b LOUTER c then we must
814         demote a->b automatically, or otherwise the demotion of b->c doesn't
815         actually change anything in the query results. .
816         """
817         aliases = list(aliases)
818         while aliases:
819             alias = aliases.pop(0)
820             if self.alias_map[alias].join_type == LOUTER:
821                 self.alias_map[alias] = self.alias_map[alias].demote()
822                 parent_alias = self.alias_map[alias].parent_alias
823                 if self.alias_map[parent_alias].join_type == INNER:
824                     aliases.append(parent_alias)
825 
826     def reset_refcounts(self, to_counts):
827         """
828         Reset reference counts for aliases so that they match the value passed
829         in `to_counts`.
830         """
831         for alias, cur_refcount in self.alias_refcount.copy().items():
832             unref_amount = cur_refcount - to_counts.get(alias, 0)
833             self.unref_alias(alias, unref_amount)
834 
835     def change_aliases(self, change_map):
836         """
837         Change the aliases in change_map (which maps old-alias -> new-alias),
838         relabelling any references to them in select columns and the where
839         clause.
840         """
841         assert set(change_map).isdisjoint(change_map.values())
842 
843         # 1. Update references in "select" (normal columns plus aliases),
844         # "group by" and "where".
845         self.where.relabel_aliases(change_map)
846         if isinstance(self.group_by, tuple):
847             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])
848         self.select = tuple([col.relabeled_clone(change_map) for col in self.select])
849         self.annotations = self.annotations and {
850             key: col.relabeled_clone(change_map) for key, col in self.annotations.items()
851         }
852 
853         # 2. Rename the alias in the internal table/alias datastructures.
854         for old_alias, new_alias in change_map.items():
855             if old_alias not in self.alias_map:
856                 continue
857             alias_data = self.alias_map[old_alias].relabeled_clone(change_map)
858             self.alias_map[new_alias] = alias_data
859             self.alias_refcount[new_alias] = self.alias_refcount[old_alias]
860             del self.alias_refcount[old_alias]
861             del self.alias_map[old_alias]
862 
863             table_aliases = self.table_map[alias_data.table_name]
864             for pos, alias in enumerate(table_aliases):
865                 if alias == old_alias:
866                     table_aliases[pos] = new_alias
867                     break
868         self.external_aliases = {
869             # Table is aliased or it's being changed and thus is aliased.
870             change_map.get(alias, alias): (aliased or alias in change_map)
871             for alias, aliased in self.external_aliases.items()
872         }
873 
874     def bump_prefix(self, outer_query):
875         """
876         Change the alias prefix to the next letter in the alphabet in a way
877         that the outer query's aliases and this query's aliases will not
878         conflict. Even tables that previously had no alias will get an alias
879         after this call.
880         """
881         def prefix_gen():
882             """
883             Generate a sequence of characters in alphabetical order:
884                 -> 'A', 'B', 'C', ...
885 
886             When the alphabet is finished, the sequence will continue with the
887             Cartesian product:
888                 -> 'AA', 'AB', 'AC', ...
889             """
890             alphabet = ascii_uppercase
891             prefix = chr(ord(self.alias_prefix) + 1)
892             yield prefix
893             for n in count(1):
894                 seq = alphabet[alphabet.index(prefix):] if prefix else alphabet
895                 for s in product(seq, repeat=n):
896                     yield ''.join(s)
897                 prefix = None
898 
899         if self.alias_prefix != outer_query.alias_prefix:
900             # No clashes between self and outer query should be possible.
901             return
902 
903         # Explicitly avoid infinite loop. The constant divider is based on how
904         # much depth recursive subquery references add to the stack. This value
905         # might need to be adjusted when adding or removing function calls from
906         # the code path in charge of performing these operations.
907         local_recursion_limit = sys.getrecursionlimit() // 16
908         for pos, prefix in enumerate(prefix_gen()):
909             if prefix not in self.subq_aliases:
910                 self.alias_prefix = prefix
911                 break
912             if pos > local_recursion_limit:
913                 raise RecursionError(
914                     'Maximum recursion depth exceeded: too many subqueries.'
915                 )
916         self.subq_aliases = self.subq_aliases.union([self.alias_prefix])
917         outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)
918         self.change_aliases({
919             alias: '%s%d' % (self.alias_prefix, pos)
920             for pos, alias in enumerate(self.alias_map)
921         })
922 
923     def get_initial_alias(self):
924         """
925         Return the first alias for this query, after increasing its reference
926         count.
927         """
928         if self.alias_map:
929             alias = self.base_table
930             self.ref_alias(alias)
931         else:
932             alias = self.join(BaseTable(self.get_meta().db_table, None))
933         return alias
934 
935     def count_active_tables(self):
936         """
937         Return the number of tables in this query with a non-zero reference
938         count. After execution, the reference counts are zeroed, so tables
939         added in compiler will not be seen by this method.
940         """
941         return len([1 for count in self.alias_refcount.values() if count])
942 
943     def join(self, join, reuse=None, reuse_with_filtered_relation=False):
944         """
945         Return an alias for the 'join', either reusing an existing alias for
946         that join or creating a new one. 'join' is either a
947         sql.datastructures.BaseTable or Join.
948 
949         The 'reuse' parameter can be either None which means all joins are
950         reusable, or it can be a set containing the aliases that can be reused.
951 
952         The 'reuse_with_filtered_relation' parameter is used when computing
953         FilteredRelation instances.
954 
955         A join is always created as LOUTER if the lhs alias is LOUTER to make
956         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new
957         joins are created as LOUTER if the join is nullable.
958         """
959         if reuse_with_filtered_relation and reuse:
960             reuse_aliases = [
961                 a for a, j in self.alias_map.items()
962                 if a in reuse and j.equals(join, with_filtered_relation=False)
963             ]
964         else:
965             reuse_aliases = [
966                 a for a, j in self.alias_map.items()
967                 if (reuse is None or a in reuse) and j == join
968             ]
969         if reuse_aliases:
970             if join.table_alias in reuse_aliases:
971                 reuse_alias = join.table_alias
972             else:
973                 # Reuse the most recent alias of the joined table
974                 # (a many-to-many relation may be joined multiple times).
975                 reuse_alias = reuse_aliases[-1]
976             self.ref_alias(reuse_alias)
977             return reuse_alias
978 
979         # No reuse is possible, so we need a new alias.
980         alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)
981         if join.join_type:
982             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:
983                 join_type = LOUTER
984             else:
985                 join_type = INNER
986             join.join_type = join_type
987         join.table_alias = alias
988         self.alias_map[alias] = join
989         return alias
990 
991     def join_parent_model(self, opts, model, alias, seen):
992         """
993         Make sure the given 'model' is joined in the query. If 'model' isn't
994         a parent of 'opts' or if it is None this method is a no-op.
995 
996         The 'alias' is the root alias for starting the join, 'seen' is a dict
997         of model -> alias of existing joins. It must also contain a mapping
998         of None -> some alias. This will be returned in the no-op case.
999         """
1000         if model in seen:
1001             return seen[model]
1002         chain = opts.get_base_chain(model)
1003         if not chain:
1004             return alias
1005         curr_opts = opts
1006         for int_model in chain:
1007             if int_model in seen:
1008                 curr_opts = int_model._meta
1009                 alias = seen[int_model]
1010                 continue
1011             # Proxy model have elements in base chain
1012             # with no parents, assign the new options
1013             # object and skip to the next base in that
1014             # case
1015             if not curr_opts.parents[int_model]:
1016                 curr_opts = int_model._meta
1017                 continue
1018             link_field = curr_opts.get_ancestor_link(int_model)
1019             join_info = self.setup_joins([link_field.name], curr_opts, alias)
1020             curr_opts = int_model._meta
1021             alias = seen[int_model] = join_info.joins[-1]
1022         return alias or seen[None]
1023 
1024     def add_annotation(self, annotation, alias, is_summary=False, select=True):
1025         """Add a single annotation expression to the Query."""
1026         annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
1027                                                    summarize=is_summary)
1028         if select:
1029             self.append_annotation_mask([alias])
1030         else:
1031             self.set_annotation_mask(set(self.annotation_select).difference({alias}))
1032         self.annotations[alias] = annotation
1033 
1034     def resolve_expression(self, query, *args, **kwargs):
1035         clone = self.clone()
1036         # Subqueries need to use a different set of aliases than the outer query.
1037         clone.bump_prefix(query)
1038         clone.subquery = True
1039         # It's safe to drop ordering if the queryset isn't using slicing,
1040         # distinct(*fields) or select_for_update().
1041         if (self.low_mark == 0 and self.high_mark is None and
1042                 not self.distinct_fields and
1043                 not self.select_for_update):
1044             clone.clear_ordering(True)
1045         clone.where.resolve_expression(query, *args, **kwargs)
1046         for key, value in clone.annotations.items():
1047             resolved = value.resolve_expression(query, *args, **kwargs)
1048             if hasattr(resolved, 'external_aliases'):
1049                 resolved.external_aliases.update(clone.external_aliases)
1050             clone.annotations[key] = resolved
1051         # Outer query's aliases are considered external.
1052         for alias, table in query.alias_map.items():
1053             clone.external_aliases[alias] = (
1054                 (isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias) or
1055                 (isinstance(table, BaseTable) and table.table_name != table.table_alias)
1056             )
1057         return clone
1058 
1059     def get_external_cols(self):
1060         exprs = chain(self.annotations.values(), self.where.children)
1061         return [
1062             col for col in self._gen_cols(exprs)
1063             if col.alias in self.external_aliases
1064         ]
1065 
1066     def as_sql(self, compiler, connection):
1067         sql, params = self.get_compiler(connection=connection).as_sql()
1068         if self.subquery:
1069             sql = '(%s)' % sql
1070         return sql, params
1071 
1072     def resolve_lookup_value(self, value, can_reuse, allow_joins):
1073         if hasattr(value, 'resolve_expression'):
1074             value = value.resolve_expression(
1075                 self, reuse=can_reuse, allow_joins=allow_joins,
1076             )
1077         elif isinstance(value, (list, tuple)):
1078             # The items of the iterable may be expressions and therefore need
1079             # to be resolved independently.
1080             return type(value)(
1081                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
1082                 for sub_value in value
1083             )
1084         return value
1085 
1086     def solve_lookup_type(self, lookup):
1087         """
1088         Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').
1089         """
1090         lookup_splitted = lookup.split(LOOKUP_SEP)
1091         if self.annotations:
1092             expression, expression_lookups = refs_expression(lookup_splitted, self.annotations)
1093             if expression:
1094                 return expression_lookups, (), expression
1095         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
1096         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
1097         if len(lookup_parts) > 1 and not field_parts:
1098             raise FieldError(
1099                 'Invalid lookup "%s" for model %s".' %
1100                 (lookup, self.get_meta().model.__name__)
1101             )
1102         return lookup_parts, field_parts, False
1103 
1104     def check_query_object_type(self, value, opts, field):
1105         """
1106         Check whether the object passed while querying is of the correct type.
1107         If not, raise a ValueError specifying the wrong object.
1108         """
1109         if hasattr(value, '_meta'):
1110             if not check_rel_lookup_compatibility(value._meta.model, opts, field):
1111                 raise ValueError(
1112                     'Cannot query "%s": Must be "%s" instance.' %
1113                     (value, opts.object_name))
1114 
1115     def check_related_objects(self, field, value, opts):
1116         """Check the type of object passed to query relations."""
1117         if field.is_relation:
1118             # Check that the field and the queryset use the same model in a
1119             # query like .filter(author=Author.objects.all()). For example, the
1120             # opts would be Author's (from the author field) and value.model
1121             # would be Author.objects.all() queryset's .model (Author also).
1122             # The field is the related field on the lhs side.
1123             if (isinstance(value, Query) and not value.has_select_fields and
1124                     not check_rel_lookup_compatibility(value.model, opts, field)):
1125                 raise ValueError(
1126                     'Cannot use QuerySet for "%s": Use a QuerySet for "%s".' %
1127                     (value.model._meta.object_name, opts.object_name)
1128                 )
1129             elif hasattr(value, '_meta'):
1130                 self.check_query_object_type(value, opts, field)
1131             elif hasattr(value, '__iter__'):
1132                 for v in value:
1133                     self.check_query_object_type(v, opts, field)
1134 
1135     def check_filterable(self, expression):
1136         """Raise an error if expression cannot be used in a WHERE clause."""
1137         if (
1138             hasattr(expression, 'resolve_expression') and
1139             not getattr(expression, 'filterable', True)
1140         ):
1141             raise NotSupportedError(
1142                 expression.__class__.__name__ + ' is disallowed in the filter '
1143                 'clause.'
1144             )
1145         if hasattr(expression, 'get_source_expressions'):
1146             for expr in expression.get_source_expressions():
1147                 self.check_filterable(expr)
1148 
1149     def build_lookup(self, lookups, lhs, rhs):
1150         """
1151         Try to extract transforms and lookup from given lhs.
1152 
1153         The lhs value is something that works like SQLExpression.
1154         The rhs value is what the lookup is going to compare against.
1155         The lookups is a list of names to extract using get_lookup()
1156         and get_transform().
1157         """
1158         # __exact is the default lookup if one isn't given.
1159         *transforms, lookup_name = lookups or ['exact']
1160         for name in transforms:
1161             lhs = self.try_transform(lhs, name)
1162         # First try get_lookup() so that the lookup takes precedence if the lhs
1163         # supports both transform and lookup for the name.
1164         lookup_class = lhs.get_lookup(lookup_name)
1165         if not lookup_class:
1166             if lhs.field.is_relation:
1167                 raise FieldError('Related Field got invalid lookup: {}'.format(lookup_name))
1168             # A lookup wasn't found. Try to interpret the name as a transform
1169             # and do an Exact lookup against it.
1170             lhs = self.try_transform(lhs, lookup_name)
1171             lookup_name = 'exact'
1172             lookup_class = lhs.get_lookup(lookup_name)
1173             if not lookup_class:
1174                 return
1175 
1176         lookup = lookup_class(lhs, rhs)
1177         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all
1178         # uses of None as a query value unless the lookup supports it.
1179         if lookup.rhs is None and not lookup.can_use_none_as_rhs:
1180             if lookup_name not in ('exact', 'iexact'):
1181                 raise ValueError("Cannot use None as a query value")
1182             return lhs.get_lookup('isnull')(lhs, True)
1183 
1184         # For Oracle '' is equivalent to null. The check must be done at this
1185         # stage because join promotion can't be done in the compiler. Using
1186         # DEFAULT_DB_ALIAS isn't nice but it's the best that can be done here.
1187         # A similar thing is done in is_nullable(), too.
1188         if (connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
1189                 lookup_name == 'exact' and lookup.rhs == ''):
1190             return lhs.get_lookup('isnull')(lhs, True)
1191 
1192         return lookup
1193 
1194     def try_transform(self, lhs, name):
1195         """
1196         Helper method for build_lookup(). Try to fetch and initialize
1197         a transform for name parameter from lhs.
1198         """
1199         transform_class = lhs.get_transform(name)
1200         if transform_class:
1201             return transform_class(lhs)
1202         else:
1203             output_field = lhs.output_field.__class__
1204             suggested_lookups = difflib.get_close_matches(name, output_field.get_lookups())
1205             if suggested_lookups:
1206                 suggestion = ', perhaps you meant %s?' % ' or '.join(suggested_lookups)
1207             else:
1208                 suggestion = '.'
1209             raise FieldError(
1210                 "Unsupported lookup '%s' for %s or join on the field not "
1211                 "permitted%s" % (name, output_field.__name__, suggestion)
1212             )
1213 
1214     def build_filter(self, filter_expr, branch_negated=False, current_negated=False,
1215                      can_reuse=None, allow_joins=True, split_subq=True,
1216                      reuse_with_filtered_relation=False, check_filterable=True):
1217         """
1218         Build a WhereNode for a single filter clause but don't add it
1219         to this Query. Query.add_q() will then add this filter to the where
1220         Node.
1221 
1222         The 'branch_negated' tells us if the current branch contains any
1223         negations. This will be used to determine if subqueries are needed.
1224 
1225         The 'current_negated' is used to determine if the current filter is
1226         negated or not and this will be used to determine if IS NULL filtering
1227         is needed.
1228 
1229         The difference between current_negated and branch_negated is that
1230         branch_negated is set on first negation, but current_negated is
1231         flipped for each negation.
1232 
1233         Note that add_filter will not do any negating itself, that is done
1234         upper in the code by add_q().
1235 
1236         The 'can_reuse' is a set of reusable joins for multijoins.
1237 
1238         If 'reuse_with_filtered_relation' is True, then only joins in can_reuse
1239         will be reused.
1240 
1241         The method will create a filter clause that can be added to the current
1242         query. However, if the filter isn't added to the query then the caller
1243         is responsible for unreffing the joins used.
1244         """
1245         if isinstance(filter_expr, dict):
1246             raise FieldError("Cannot parse keyword query as dict")
1247         if isinstance(filter_expr, Q):
1248             return self._add_q(
1249                 filter_expr,
1250                 branch_negated=branch_negated,
1251                 current_negated=current_negated,
1252                 used_aliases=can_reuse,
1253                 allow_joins=allow_joins,
1254                 split_subq=split_subq,
1255                 check_filterable=check_filterable,
1256             )
1257         if hasattr(filter_expr, 'resolve_expression'):
1258             if not getattr(filter_expr, 'conditional', False):
1259                 raise TypeError('Cannot filter against a non-conditional expression.')
1260             condition = self.build_lookup(
1261                 ['exact'], filter_expr.resolve_expression(self, allow_joins=allow_joins), True
1262             )
1263             clause = self.where_class()
1264             clause.add(condition, AND)
1265             return clause, []
1266         arg, value = filter_expr
1267         if not arg:
1268             raise FieldError("Cannot parse keyword query %r" % arg)
1269         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
1270 
1271         if check_filterable:
1272             self.check_filterable(reffed_expression)
1273 
1274         if not allow_joins and len(parts) > 1:
1275             raise FieldError("Joined field references are not permitted in this query")
1276 
1277         pre_joins = self.alias_refcount.copy()
1278         value = self.resolve_lookup_value(value, can_reuse, allow_joins)
1279         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}
1280 
1281         if check_filterable:
1282             self.check_filterable(value)
1283 
1284         clause = self.where_class()
1285         if reffed_expression:
1286             condition = self.build_lookup(lookups, reffed_expression, value)
1287             clause.add(condition, AND)
1288             return clause, []
1289 
1290         opts = self.get_meta()
1291         alias = self.get_initial_alias()
1292         allow_many = not branch_negated or not split_subq
1293 
1294         try:
1295             join_info = self.setup_joins(
1296                 parts, opts, alias, can_reuse=can_reuse, allow_many=allow_many,
1297                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1298             )
1299 
1300             # Prevent iterator from being consumed by check_related_objects()
1301             if isinstance(value, Iterator):
1302                 value = list(value)
1303             self.check_related_objects(join_info.final_field, value, join_info.opts)
1304 
1305             # split_exclude() needs to know which joins were generated for the
1306             # lookup parts
1307             self._lookup_joins = join_info.joins
1308         except MultiJoin as e:
1309             return self.split_exclude(filter_expr, can_reuse, e.names_with_path)
1310 
1311         # Update used_joins before trimming since they are reused to determine
1312         # which joins could be later promoted to INNER.
1313         used_joins.update(join_info.joins)
1314         targets, alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1315         if can_reuse is not None:
1316             can_reuse.update(join_list)
1317 
1318         if join_info.final_field.is_relation:
1319             # No support for transforms for relational fields
1320             num_lookups = len(lookups)
1321             if num_lookups > 1:
1322                 raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))
1323             if len(targets) == 1:
1324                 col = self._get_col(targets[0], join_info.final_field, alias)
1325             else:
1326                 col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)
1327         else:
1328             col = self._get_col(targets[0], join_info.final_field, alias)
1329 
1330         condition = self.build_lookup(lookups, col, value)
1331         lookup_type = condition.lookup_name
1332         clause.add(condition, AND)
1333 
1334         require_outer = lookup_type == 'isnull' and condition.rhs is True and not current_negated
1335         if current_negated and (lookup_type != 'isnull' or condition.rhs is False) and condition.rhs is not None:
1336             require_outer = True
1337             if lookup_type != 'isnull':
1338                 # The condition added here will be SQL like this:
1339                 # NOT (col IS NOT NULL), where the first NOT is added in
1340                 # upper layers of code. The reason for addition is that if col
1341                 # is null, then col != someval will result in SQL "unknown"
1342                 # which isn't the same as in Python. The Python None handling
1343                 # is wanted, and it can be gotten by
1344                 # (col IS NULL OR col != someval)
1345                 #   <=>
1346                 # NOT (col IS NOT NULL AND col = someval).
1347                 if (
1348                     self.is_nullable(targets[0]) or
1349                     self.alias_map[join_list[-1]].join_type == LOUTER
1350                 ):
1351                     lookup_class = targets[0].get_lookup('isnull')
1352                     col = self._get_col(targets[0], join_info.targets[0], alias)
1353                     clause.add(lookup_class(col, False), AND)
1354                 # If someval is a nullable column, someval IS NOT NULL is
1355                 # added.
1356                 if isinstance(value, Col) and self.is_nullable(value.target):
1357                     lookup_class = value.target.get_lookup('isnull')
1358                     clause.add(lookup_class(value, False), AND)
1359         return clause, used_joins if not require_outer else ()
1360 
1361     def add_filter(self, filter_clause):
1362         self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))
1363 
1364     def add_q(self, q_object):
1365         """
1366         A preprocessor for the internal _add_q(). Responsible for doing final
1367         join promotion.
1368         """
1369         # For join promotion this case is doing an AND for the added q_object
1370         # and existing conditions. So, any existing inner join forces the join
1371         # type to remain inner. Existing outer joins can however be demoted.
1372         # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if
1373         # rel_a doesn't produce any rows, then the whole condition must fail.
1374         # So, demotion is OK.
1375         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}
1376         clause, _ = self._add_q(q_object, self.used_aliases)
1377         if clause:
1378             self.where.add(clause, AND)
1379         self.demote_joins(existing_inner)
1380 
1381     def build_where(self, filter_expr):
1382         return self.build_filter(filter_expr, allow_joins=False)[0]
1383 
1384     def _add_q(self, q_object, used_aliases, branch_negated=False,
1385                current_negated=False, allow_joins=True, split_subq=True,
1386                check_filterable=True):
1387         """Add a Q-object to the current filter."""
1388         connector = q_object.connector
1389         current_negated = current_negated ^ q_object.negated
1390         branch_negated = branch_negated or q_object.negated
1391         target_clause = self.where_class(connector=connector,
1392                                          negated=q_object.negated)
1393         joinpromoter = JoinPromoter(q_object.connector, len(q_object.children), current_negated)
1394         for child in q_object.children:
1395             child_clause, needed_inner = self.build_filter(
1396                 child, can_reuse=used_aliases, branch_negated=branch_negated,
1397                 current_negated=current_negated, allow_joins=allow_joins,
1398                 split_subq=split_subq, check_filterable=check_filterable,
1399             )
1400             joinpromoter.add_votes(needed_inner)
1401             if child_clause:
1402                 target_clause.add(child_clause, connector)
1403         needed_inner = joinpromoter.update_join_types(self)
1404         return target_clause, needed_inner
1405 
1406     def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
1407         """Add a FilteredRelation object to the current filter."""
1408         connector = q_object.connector
1409         current_negated ^= q_object.negated
1410         branch_negated = branch_negated or q_object.negated
1411         target_clause = self.where_class(connector=connector, negated=q_object.negated)
1412         for child in q_object.children:
1413             if isinstance(child, Node):
1414                 child_clause = self.build_filtered_relation_q(
1415                     child, reuse=reuse, branch_negated=branch_negated,
1416                     current_negated=current_negated,
1417                 )
1418             else:
1419                 child_clause, _ = self.build_filter(
1420                     child, can_reuse=reuse, branch_negated=branch_negated,
1421                     current_negated=current_negated,
1422                     allow_joins=True, split_subq=False,
1423                     reuse_with_filtered_relation=True,
1424                 )
1425             target_clause.add(child_clause, connector)
1426         return target_clause
1427 
1428     def add_filtered_relation(self, filtered_relation, alias):
1429         filtered_relation.alias = alias
1430         lookups = dict(get_children_from_q(filtered_relation.condition))
1431         relation_lookup_parts, relation_field_parts, _ = self.solve_lookup_type(filtered_relation.relation_name)
1432         if relation_lookup_parts:
1433             raise ValueError(
1434                 "FilteredRelation's relation_name cannot contain lookups "
1435                 "(got %r)." % filtered_relation.relation_name
1436             )
1437         for lookup in chain(lookups):
1438             lookup_parts, lookup_field_parts, _ = self.solve_lookup_type(lookup)
1439             shift = 2 if not lookup_parts else 1
1440             lookup_field_path = lookup_field_parts[:-shift]
1441             for idx, lookup_field_part in enumerate(lookup_field_path):
1442                 if len(relation_field_parts) > idx:
1443                     if relation_field_parts[idx] != lookup_field_part:
1444                         raise ValueError(
1445                             "FilteredRelation's condition doesn't support "
1446                             "relations outside the %r (got %r)."
1447                             % (filtered_relation.relation_name, lookup)
1448                         )
1449                 else:
1450                     raise ValueError(
1451                         "FilteredRelation's condition doesn't support nested "
1452                         "relations deeper than the relation_name (got %r for "
1453                         "%r)." % (lookup, filtered_relation.relation_name)
1454                     )
1455         self._filtered_relations[filtered_relation.alias] = filtered_relation
1456 
1457     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
1458         """
1459         Walk the list of names and turns them into PathInfo tuples. A single
1460         name in 'names' can generate multiple PathInfos (m2m, for example).
1461 
1462         'names' is the path of names to travel, 'opts' is the model Options we
1463         start the name resolving from, 'allow_many' is as for setup_joins().
1464         If fail_on_missing is set to True, then a name that can't be resolved
1465         will generate a FieldError.
1466 
1467         Return a list of PathInfo tuples. In addition return the final field
1468         (the last used join field) and target (which is a field guaranteed to
1469         contain the same value as the final field). Finally, return those names
1470         that weren't found (which are likely transforms and the final lookup).
1471         """
1472         path, names_with_path = [], []
1473         for pos, name in enumerate(names):
1474             cur_names_with_path = (name, [])
1475             if name == 'pk':
1476                 name = opts.pk.name
1477 
1478             field = None
1479             filtered_relation = None
1480             try:
1481                 field = opts.get_field(name)
1482             except FieldDoesNotExist:
1483                 if name in self.annotation_select:
1484                     field = self.annotation_select[name].output_field
1485                 elif name in self._filtered_relations and pos == 0:
1486                     filtered_relation = self._filtered_relations[name]
1487                     if LOOKUP_SEP in filtered_relation.relation_name:
1488                         parts = filtered_relation.relation_name.split(LOOKUP_SEP)
1489                         filtered_relation_path, field, _, _ = self.names_to_path(
1490                             parts, opts, allow_many, fail_on_missing,
1491                         )
1492                         path.extend(filtered_relation_path[:-1])
1493                     else:
1494                         field = opts.get_field(filtered_relation.relation_name)
1495             if field is not None:
1496                 # Fields that contain one-to-many relations with a generic
1497                 # model (like a GenericForeignKey) cannot generate reverse
1498                 # relations and therefore cannot be used for reverse querying.
1499                 if field.is_relation and not field.related_model:
1500                     raise FieldError(
1501                         "Field %r does not generate an automatic reverse "
1502                         "relation and therefore cannot be used for reverse "
1503                         "querying. If it is a GenericForeignKey, consider "
1504                         "adding a GenericRelation." % name
1505                     )
1506                 try:
1507                     model = field.model._meta.concrete_model
1508                 except AttributeError:
1509                     # QuerySet.annotate() may introduce fields that aren't
1510                     # attached to a model.
1511                     model = None
1512             else:
1513                 # We didn't find the current field, so move position back
1514                 # one step.
1515                 pos -= 1
1516                 if pos == -1 or fail_on_missing:
1517                     available = sorted([
1518                         *get_field_names_from_opts(opts),
1519                         *self.annotation_select,
1520                         *self._filtered_relations,
1521                     ])
1522                     raise FieldError("Cannot resolve keyword '%s' into field. "
1523                                      "Choices are: %s" % (name, ", ".join(available)))
1524                 break
1525             # Check if we need any joins for concrete inheritance cases (the
1526             # field lives in parent, but we are currently in one of its
1527             # children)
1528             if model is not opts.model:
1529                 path_to_parent = opts.get_path_to_parent(model)
1530                 if path_to_parent:
1531                     path.extend(path_to_parent)
1532                     cur_names_with_path[1].extend(path_to_parent)
1533                     opts = path_to_parent[-1].to_opts
1534             if hasattr(field, 'get_path_info'):
1535                 pathinfos = field.get_path_info(filtered_relation)
1536                 if not allow_many:
1537                     for inner_pos, p in enumerate(pathinfos):
1538                         if p.m2m:
1539                             cur_names_with_path[1].extend(pathinfos[0:inner_pos + 1])
1540                             names_with_path.append(cur_names_with_path)
1541                             raise MultiJoin(pos + 1, names_with_path)
1542                 last = pathinfos[-1]
1543                 path.extend(pathinfos)
1544                 final_field = last.join_field
1545                 opts = last.to_opts
1546                 targets = last.target_fields
1547                 cur_names_with_path[1].extend(pathinfos)
1548                 names_with_path.append(cur_names_with_path)
1549             else:
1550                 # Local non-relational field.
1551                 final_field = field
1552                 targets = (field,)
1553                 if fail_on_missing and pos + 1 != len(names):
1554                     raise FieldError(
1555                         "Cannot resolve keyword %r into field. Join on '%s'"
1556                         " not permitted." % (names[pos + 1], name))
1557                 break
1558         return path, final_field, targets, names[pos + 1:]
1559 
1560     def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True,
1561                     reuse_with_filtered_relation=False):
1562         """
1563         Compute the necessary table joins for the passage through the fields
1564         given in 'names'. 'opts' is the Options class for the current model
1565         (which gives the table we are starting from), 'alias' is the alias for
1566         the table to start the joining from.
1567 
1568         The 'can_reuse' defines the reverse foreign key joins we can reuse. It
1569         can be None in which case all joins are reusable or a set of aliases
1570         that can be reused. Note that non-reverse foreign keys are always
1571         reusable when using setup_joins().
1572 
1573         The 'reuse_with_filtered_relation' can be used to force 'can_reuse'
1574         parameter and force the relation on the given connections.
1575 
1576         If 'allow_many' is False, then any reverse foreign key seen will
1577         generate a MultiJoin exception.
1578 
1579         Return the final field involved in the joins, the target field (used
1580         for any 'where' constraint), the final 'opts' value, the joins, the
1581         field path traveled to generate the joins, and a transform function
1582         that takes a field and alias and is equivalent to `field.get_col(alias)`
1583         in the simple case but wraps field transforms if they were included in
1584         names.
1585 
1586         The target field is the field containing the concrete value. Final
1587         field can be something different, for example foreign key pointing to
1588         that value. Final field is needed for example in some value
1589         conversions (convert 'obj' in fk__id=obj to pk val using the foreign
1590         key field for example).
1591         """
1592         joins = [alias]
1593         # The transform can't be applied yet, as joins must be trimmed later.
1594         # To avoid making every caller of this method look up transforms
1595         # directly, compute transforms here and create a partial that converts
1596         # fields to the appropriate wrapped version.
1597 
1598         def final_transformer(field, alias):
1599             return field.get_col(alias)
1600 
1601         # Try resolving all the names as fields first. If there's an error,
1602         # treat trailing names as lookups until a field can be resolved.
1603         last_field_exception = None
1604         for pivot in range(len(names), 0, -1):
1605             try:
1606                 path, final_field, targets, rest = self.names_to_path(
1607                     names[:pivot], opts, allow_many, fail_on_missing=True,
1608                 )
1609             except FieldError as exc:
1610                 if pivot == 1:
1611                     # The first item cannot be a lookup, so it's safe
1612                     # to raise the field error here.
1613                     raise
1614                 else:
1615                     last_field_exception = exc
1616             else:
1617                 # The transforms are the remaining items that couldn't be
1618                 # resolved into fields.
1619                 transforms = names[pivot:]
1620                 break
1621         for name in transforms:
1622             def transform(field, alias, *, name, previous):
1623                 try:
1624                     wrapped = previous(field, alias)
1625                     return self.try_transform(wrapped, name)
1626                 except FieldError:
1627                     # FieldError is raised if the transform doesn't exist.
1628                     if isinstance(final_field, Field) and last_field_exception:
1629                         raise last_field_exception
1630                     else:
1631                         raise
1632             final_transformer = functools.partial(transform, name=name, previous=final_transformer)
1633         # Then, add the path to the query's joins. Note that we can't trim
1634         # joins at this stage - we will need the information about join type
1635         # of the trimmed joins.
1636         for join in path:
1637             if join.filtered_relation:
1638                 filtered_relation = join.filtered_relation.clone()
1639                 table_alias = filtered_relation.alias
1640             else:
1641                 filtered_relation = None
1642                 table_alias = None
1643             opts = join.to_opts
1644             if join.direct:
1645                 nullable = self.is_nullable(join.join_field)
1646             else:
1647                 nullable = True
1648             connection = Join(
1649                 opts.db_table, alias, table_alias, INNER, join.join_field,
1650                 nullable, filtered_relation=filtered_relation,
1651             )
1652             reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None
1653             alias = self.join(
1654                 connection, reuse=reuse,
1655                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1656             )
1657             joins.append(alias)
1658             if filtered_relation:
1659                 filtered_relation.path = joins[:]
1660         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)
1661 
1662     def trim_joins(self, targets, joins, path):
1663         """
1664         The 'target' parameter is the final field being joined to, 'joins'
1665         is the full list of join aliases. The 'path' contain the PathInfos
1666         used to create the joins.
1667 
1668         Return the final target field and table alias and the new active
1669         joins.
1670 
1671         Always trim any direct join if the target column is already in the
1672         previous table. Can't trim reverse joins as it's unknown if there's
1673         anything on the other side of the join.
1674         """
1675         joins = joins[:]
1676         for pos, info in enumerate(reversed(path)):
1677             if len(joins) == 1 or not info.direct:
1678                 break
1679             if info.filtered_relation:
1680                 break
1681             join_targets = {t.column for t in info.join_field.foreign_related_fields}
1682             cur_targets = {t.column for t in targets}
1683             if not cur_targets.issubset(join_targets):
1684                 break
1685             targets_dict = {r[1].column: r[0] for r in info.join_field.related_fields if r[1].column in cur_targets}
1686             targets = tuple(targets_dict[t.column] for t in targets)
1687             self.unref_alias(joins.pop())
1688         return targets, joins[-1], joins
1689 
1690     @classmethod
1691     def _gen_cols(cls, exprs):
1692         for expr in exprs:
1693             if isinstance(expr, Col):
1694                 yield expr
1695             else:
1696                 yield from cls._gen_cols(expr.get_source_expressions())
1697 
1698     @classmethod
1699     def _gen_col_aliases(cls, exprs):
1700         yield from (expr.alias for expr in cls._gen_cols(exprs))
1701 
1702     def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False):
1703         if not allow_joins and LOOKUP_SEP in name:
1704             raise FieldError("Joined field references are not permitted in this query")
1705         annotation = self.annotations.get(name)
1706         if annotation is not None:
1707             if not allow_joins:
1708                 for alias in self._gen_col_aliases([annotation]):
1709                     if isinstance(self.alias_map[alias], Join):
1710                         raise FieldError(
1711                             'Joined field references are not permitted in '
1712                             'this query'
1713                         )
1714             if summarize:
1715                 # Summarize currently means we are doing an aggregate() query
1716                 # which is executed as a wrapped subquery if any of the
1717                 # aggregate() elements reference an existing annotation. In
1718                 # that case we need to return a Ref to the subquery's annotation.
1719                 if name not in self.annotation_select:
1720                     raise FieldError(
1721                         "Cannot aggregate over the '%s' alias. Use annotate() "
1722                         "to promote it." % name
1723                     )
1724                 return Ref(name, self.annotation_select[name])
1725             else:
1726                 return annotation
1727         else:
1728             field_list = name.split(LOOKUP_SEP)
1729             join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)
1730             targets, final_alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1731             if not allow_joins and len(join_list) > 1:
1732                 raise FieldError('Joined field references are not permitted in this query')
1733             if len(targets) > 1:
1734                 raise FieldError("Referencing multicolumn fields with F() objects "
1735                                  "isn't supported")
1736             # Verify that the last lookup in name is a field or a transform:
1737             # transform_function() raises FieldError if not.
1738             join_info.transform_function(targets[0], final_alias)
1739             if reuse is not None:
1740                 reuse.update(join_list)
1741             return self._get_col(targets[0], join_info.targets[0], join_list[-1])
1742 
1743     def split_exclude(self, filter_expr, can_reuse, names_with_path):
1744         """
1745         When doing an exclude against any kind of N-to-many relation, we need
1746         to use a subquery. This method constructs the nested query, given the
1747         original exclude filter (filter_expr) and the portion up to the first
1748         N-to-many relation field.
1749 
1750         For example, if the origin filter is ~Q(child__name='foo'), filter_expr
1751         is ('child__name', 'foo') and can_reuse is a set of joins usable for
1752         filters in the original query.
1753 
1754         We will turn this into equivalent of:
1755             WHERE NOT (pk IN (SELECT parent_id FROM thetable
1756                               WHERE name = 'foo' AND parent_id IS NOT NULL))
1757 
1758         It might be worth it to consider using WHERE NOT EXISTS as that has
1759         saner null handling, and is easier for the backend's optimizer to
1760         handle.
1761         """
1762         filter_lhs, filter_rhs = filter_expr
1763         if isinstance(filter_rhs, OuterRef):
1764             filter_expr = (filter_lhs, OuterRef(filter_rhs))
1765         elif isinstance(filter_rhs, F):
1766             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
1767         # Generate the inner query.
1768         query = Query(self.model)
1769         query._filtered_relations = self._filtered_relations
1770         query.add_filter(filter_expr)
1771         query.clear_ordering(True)
1772         # Try to have as simple as possible subquery -> trim leading joins from
1773         # the subquery.
1774         trimmed_prefix, contains_louter = query.trim_start(names_with_path)
1775 
1776         # Add extra check to make sure the selected field will not be null
1777         # since we are adding an IN <subquery> clause. This prevents the
1778         # database from tripping over IN (...,NULL,...) selects and returning
1779         # nothing
1780         col = query.select[0]
1781         select_field = col.target
1782         alias = col.alias
1783         if self.is_nullable(select_field):
1784             lookup_class = select_field.get_lookup('isnull')
1785             lookup = lookup_class(select_field.get_col(alias), False)
1786             query.where.add(lookup, AND)
1787         if alias in can_reuse:
1788             pk = select_field.model._meta.pk
1789             # Need to add a restriction so that outer query's filters are in effect for
1790             # the subquery, too.
1791             query.bump_prefix(self)
1792             lookup_class = select_field.get_lookup('exact')
1793             # Note that the query.select[0].alias is different from alias
1794             # due to bump_prefix above.
1795             lookup = lookup_class(pk.get_col(query.select[0].alias),
1796                                   pk.get_col(alias))
1797             query.where.add(lookup, AND)
1798             query.external_aliases[alias] = True
1799 
1800         condition, needed_inner = self.build_filter(
1801             ('%s__in' % trimmed_prefix, query),
1802             current_negated=True, branch_negated=True, can_reuse=can_reuse)
1803         if contains_louter:
1804             or_null_condition, _ = self.build_filter(
1805                 ('%s__isnull' % trimmed_prefix, True),
1806                 current_negated=True, branch_negated=True, can_reuse=can_reuse)
1807             condition.add(or_null_condition, OR)
1808             # Note that the end result will be:
1809             # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.
1810             # This might look crazy but due to how IN works, this seems to be
1811             # correct. If the IS NOT NULL check is removed then outercol NOT
1812             # IN will return UNKNOWN. If the IS NULL check is removed, then if
1813             # outercol IS NULL we will not match the row.
1814         return condition, needed_inner
1815 
1816     def set_empty(self):
1817         self.where.add(NothingNode(), AND)
1818         for query in self.combined_queries:
1819             query.set_empty()
1820 
1821     def is_empty(self):
1822         return any(isinstance(c, NothingNode) for c in self.where.children)
1823 
1824     def set_limits(self, low=None, high=None):
1825         """
1826         Adjust the limits on the rows retrieved. Use low/high to set these,
1827         as it makes it more Pythonic to read and write. When the SQL query is
1828         created, convert them to the appropriate offset and limit values.
1829 
1830         Apply any limits passed in here to the existing constraints. Add low
1831         to the current low value and clamp both to any existing high value.
1832         """
1833         if high is not None:
1834             if self.high_mark is not None:
1835                 self.high_mark = min(self.high_mark, self.low_mark + high)
1836             else:
1837                 self.high_mark = self.low_mark + high
1838         if low is not None:
1839             if self.high_mark is not None:
1840                 self.low_mark = min(self.high_mark, self.low_mark + low)
1841             else:
1842                 self.low_mark = self.low_mark + low
1843 
1844         if self.low_mark == self.high_mark:
1845             self.set_empty()
1846 
1847     def clear_limits(self):
1848         """Clear any existing limits."""
1849         self.low_mark, self.high_mark = 0, None
1850 
1851     @property
1852     def is_sliced(self):
1853         return self.low_mark != 0 or self.high_mark is not None
1854 
1855     def has_limit_one(self):
1856         return self.high_mark is not None and (self.high_mark - self.low_mark) == 1
1857 
1858     def can_filter(self):
1859         """
1860         Return True if adding filters to this instance is still possible.
1861 
1862         Typically, this means no limits or offsets have been put on the results.
1863         """
1864         return not self.is_sliced
1865 
1866     def clear_select_clause(self):
1867         """Remove all fields from SELECT clause."""
1868         self.select = ()
1869         self.default_cols = False
1870         self.select_related = False
1871         self.set_extra_mask(())
1872         self.set_annotation_mask(())
1873 
1874     def clear_select_fields(self):
1875         """
1876         Clear the list of fields to select (but not extra_select columns).
1877         Some queryset types completely replace any existing list of select
1878         columns.
1879         """
1880         self.select = ()
1881         self.values_select = ()
1882 
1883     def add_select_col(self, col):
1884         self.select += col,
1885         self.values_select += col.output_field.name,
1886 
1887     def set_select(self, cols):
1888         self.default_cols = False
1889         self.select = tuple(cols)
1890 
1891     def add_distinct_fields(self, *field_names):
1892         """
1893         Add and resolve the given fields to the query's "distinct on" clause.
1894         """
1895         self.distinct_fields = field_names
1896         self.distinct = True
1897 
1898     def add_fields(self, field_names, allow_m2m=True):
1899         """
1900         Add the given (model) fields to the select set. Add the field names in
1901         the order specified.
1902         """
1903         alias = self.get_initial_alias()
1904         opts = self.get_meta()
1905 
1906         try:
1907             cols = []
1908             for name in field_names:
1909                 # Join promotion note - we must not remove any rows here, so
1910                 # if there is no existing joins, use outer join.
1911                 join_info = self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m)
1912                 targets, final_alias, joins = self.trim_joins(
1913                     join_info.targets,
1914                     join_info.joins,
1915                     join_info.path,
1916                 )
1917                 for target in targets:
1918                     cols.append(join_info.transform_function(target, final_alias))
1919             if cols:
1920                 self.set_select(cols)
1921         except MultiJoin:
1922             raise FieldError("Invalid field name: '%s'" % name)
1923         except FieldError:
1924             if LOOKUP_SEP in name:
1925                 # For lookups spanning over relationships, show the error
1926                 # from the model on which the lookup failed.
1927                 raise
1928             elif name in self.annotations:
1929                 raise FieldError(
1930                     "Cannot select the '%s' alias. Use annotate() to promote "
1931                     "it." % name
1932                 )
1933             else:
1934                 names = sorted([
1935                     *get_field_names_from_opts(opts), *self.extra,
1936                     *self.annotation_select, *self._filtered_relations
1937                 ])
1938                 raise FieldError("Cannot resolve keyword %r into field. "
1939                                  "Choices are: %s" % (name, ", ".join(names)))
1940 
1941     def add_ordering(self, *ordering):
1942         """
1943         Add items from the 'ordering' sequence to the query's "order by"
1944         clause. These items are either field names (not column names) --
1945         possibly with a direction prefix ('-' or '?') -- or OrderBy
1946         expressions.
1947 
1948         If 'ordering' is empty, clear all ordering from the query.
1949         """
1950         errors = []
1951         for item in ordering:
1952             if isinstance(item, str):
1953                 if '.' in item:
1954                     warnings.warn(
1955                         'Passing column raw column aliases to order_by() is '
1956                         'deprecated. Wrap %r in a RawSQL expression before '
1957                         'passing it to order_by().' % item,
1958                         category=RemovedInDjango40Warning,
1959                         stacklevel=3,
1960                     )
1961                     continue
1962                 if item == '?':
1963                     continue
1964                 if item.startswith('-'):
1965                     item = item[1:]
1966                 if item in self.annotations:
1967                     continue
1968                 if self.extra and item in self.extra:
1969                     continue
1970                 # names_to_path() validates the lookup. A descriptive
1971                 # FieldError will be raise if it's not.
1972                 self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)
1973             elif not hasattr(item, 'resolve_expression'):
1974                 errors.append(item)
1975             if getattr(item, 'contains_aggregate', False):
1976                 raise FieldError(
1977                     'Using an aggregate in order_by() without also including '
1978                     'it in annotate() is not allowed: %s' % item
1979                 )
1980         if errors:
1981             raise FieldError('Invalid order_by arguments: %s' % errors)
1982         if ordering:
1983             self.order_by += ordering
1984         else:
1985             self.default_ordering = False
1986 
1987     def clear_ordering(self, force_empty):
1988         """
1989         Remove any ordering settings. If 'force_empty' is True, there will be
1990         no ordering in the resulting query (not even the model's default).
1991         """
1992         self.order_by = ()
1993         self.extra_order_by = ()
1994         if force_empty:
1995             self.default_ordering = False
1996 
1997     def set_group_by(self, allow_aliases=True):
1998         """
1999         Expand the GROUP BY clause required by the query.
2000 
2001         This will usually be the set of all non-aggregate fields in the
2002         return data. If the database backend supports grouping by the
2003         primary key, and the query would be equivalent, the optimization
2004         will be made automatically.
2005         """
2006         # Column names from JOINs to check collisions with aliases.
2007         if allow_aliases:
2008             column_names = set()
2009             seen_models = set()
2010             for join in list(self.alias_map.values())[1:]:  # Skip base table.
2011                 model = join.join_field.related_model
2012                 if model not in seen_models:
2013                     column_names.update({
2014                         field.column
2015                         for field in model._meta.local_concrete_fields
2016                     })
2017                     seen_models.add(model)
2018 
2019         group_by = list(self.select)
2020         if self.annotation_select:
2021             for alias, annotation in self.annotation_select.items():
2022                 signature = inspect.signature(annotation.get_group_by_cols)
2023                 if 'alias' not in signature.parameters:
2024                     annotation_class = annotation.__class__
2025                     msg = (
2026                         '`alias=None` must be added to the signature of '
2027                         '%s.%s.get_group_by_cols().'
2028                     ) % (annotation_class.__module__, annotation_class.__qualname__)
2029                     warnings.warn(msg, category=RemovedInDjango40Warning)
2030                     group_by_cols = annotation.get_group_by_cols()
2031                 else:
2032                     if not allow_aliases or alias in column_names:
2033                         alias = None
2034                     group_by_cols = annotation.get_group_by_cols(alias=alias)
2035                 group_by.extend(group_by_cols)
2036         self.group_by = tuple(group_by)
2037 
2038     def add_select_related(self, fields):
2039         """
2040         Set up the select_related data structure so that we only select
2041         certain related models (as opposed to all models, when
2042         self.select_related=True).
2043         """
2044         if isinstance(self.select_related, bool):
2045             field_dict = {}
2046         else:
2047             field_dict = self.select_related
2048         for field in fields:
2049             d = field_dict
2050             for part in field.split(LOOKUP_SEP):
2051                 d = d.setdefault(part, {})
2052         self.select_related = field_dict
2053 
2054     def add_extra(self, select, select_params, where, params, tables, order_by):
2055         """
2056         Add data to the various extra_* attributes for user-created additions
2057         to the query.
2058         """
2059         if select:
2060             # We need to pair any placeholder markers in the 'select'
2061             # dictionary with their parameters in 'select_params' so that
2062             # subsequent updates to the select dictionary also adjust the
2063             # parameters appropriately.
2064             select_pairs = {}
2065             if select_params:
2066                 param_iter = iter(select_params)
2067             else:
2068                 param_iter = iter([])
2069             for name, entry in select.items():
2070                 entry = str(entry)
2071                 entry_params = []
2072                 pos = entry.find("%s")
2073                 while pos != -1:
2074                     if pos == 0 or entry[pos - 1] != '%':
2075                         entry_params.append(next(param_iter))
2076                     pos = entry.find("%s", pos + 2)
2077                 select_pairs[name] = (entry, entry_params)
2078             self.extra.update(select_pairs)
2079         if where or params:
2080             self.where.add(ExtraWhere(where, params), AND)
2081         if tables:
2082             self.extra_tables += tuple(tables)
2083         if order_by:
2084             self.extra_order_by = order_by
2085 
2086     def clear_deferred_loading(self):
2087         """Remove any fields from the deferred loading set."""
2088         self.deferred_loading = (frozenset(), True)
2089 
2090     def add_deferred_loading(self, field_names):
2091         """
2092         Add the given list of model field names to the set of fields to
2093         exclude from loading from the database when automatic column selection
2094         is done. Add the new field names to any existing field names that
2095         are deferred (or removed from any existing field names that are marked
2096         as the only ones for immediate loading).
2097         """
2098         # Fields on related models are stored in the literal double-underscore
2099         # format, so that we can use a set datastructure. We do the foo__bar
2100         # splitting and handling when computing the SQL column names (as part of
2101         # get_columns()).
2102         existing, defer = self.deferred_loading
2103         if defer:
2104             # Add to existing deferred names.
2105             self.deferred_loading = existing.union(field_names), True
2106         else:
2107             # Remove names from the set of any existing "immediate load" names.
2108             self.deferred_loading = existing.difference(field_names), False
2109 
2110     def add_immediate_loading(self, field_names):
2111         """
2112         Add the given list of model field names to the set of fields to
2113         retrieve when the SQL is executed ("immediate loading" fields). The
2114         field names replace any existing immediate loading field names. If
2115         there are field names already specified for deferred loading, remove
2116         those names from the new field_names before storing the new names
2117         for immediate loading. (That is, immediate loading overrides any
2118         existing immediate values, but respects existing deferrals.)
2119         """
2120         existing, defer = self.deferred_loading
2121         field_names = set(field_names)
2122         if 'pk' in field_names:
2123             field_names.remove('pk')
2124             field_names.add(self.get_meta().pk.name)
2125 
2126         if defer:
2127             # Remove any existing deferred names from the current set before
2128             # setting the new names.
2129             self.deferred_loading = field_names.difference(existing), False
2130         else:
2131             # Replace any existing "immediate load" field names.
2132             self.deferred_loading = frozenset(field_names), False
2133 
2134     def get_loaded_field_names(self):
2135         """
2136         If any fields are marked to be deferred, return a dictionary mapping
2137         models to a set of names in those fields that will be loaded. If a
2138         model is not in the returned dictionary, none of its fields are
2139         deferred.
2140 
2141         If no fields are marked for deferral, return an empty dictionary.
2142         """
2143         # We cache this because we call this function multiple times
2144         # (compiler.fill_related_selections, query.iterator)
2145         try:
2146             return self._loaded_field_names_cache
2147         except AttributeError:
2148             collection = {}
2149             self.deferred_to_data(collection, self.get_loaded_field_names_cb)
2150             self._loaded_field_names_cache = collection
2151             return collection
2152 
2153     def get_loaded_field_names_cb(self, target, model, fields):
2154         """Callback used by get_deferred_field_names()."""
2155         target[model] = {f.attname for f in fields}
2156 
2157     def set_annotation_mask(self, names):
2158         """Set the mask of annotations that will be returned by the SELECT."""
2159         if names is None:
2160             self.annotation_select_mask = None
2161         else:
2162             self.annotation_select_mask = set(names)
2163         self._annotation_select_cache = None
2164 
2165     def append_annotation_mask(self, names):
2166         if self.annotation_select_mask is not None:
2167             self.set_annotation_mask(self.annotation_select_mask.union(names))
2168 
2169     def set_extra_mask(self, names):
2170         """
2171         Set the mask of extra select items that will be returned by SELECT.
2172         Don't remove them from the Query since they might be used later.
2173         """
2174         if names is None:
2175             self.extra_select_mask = None
2176         else:
2177             self.extra_select_mask = set(names)
2178         self._extra_select_cache = None
2179 
2180     def set_values(self, fields):
2181         self.select_related = False
2182         self.clear_deferred_loading()
2183         self.clear_select_fields()
2184 
2185         if fields:
2186             field_names = []
2187             extra_names = []
2188             annotation_names = []
2189             if not self.extra and not self.annotations:
2190                 # Shortcut - if there are no extra or annotations, then
2191                 # the values() clause must be just field names.
2192                 field_names = list(fields)
2193             else:
2194                 self.default_cols = False
2195                 for f in fields:
2196                     if f in self.extra_select:
2197                         extra_names.append(f)
2198                     elif f in self.annotation_select:
2199                         annotation_names.append(f)
2200                     else:
2201                         field_names.append(f)
2202             self.set_extra_mask(extra_names)
2203             self.set_annotation_mask(annotation_names)
2204         else:
2205             field_names = [f.attname for f in self.model._meta.concrete_fields]
2206         # Selected annotations must be known before setting the GROUP BY
2207         # clause.
2208         if self.group_by is True:
2209             self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
2210             # Disable GROUP BY aliases to avoid orphaning references to the
2211             # SELECT clause which is about to be cleared.
2212             self.set_group_by(allow_aliases=False)
2213             self.clear_select_fields()
2214         elif self.group_by:
2215             # Resolve GROUP BY annotation references if they are not part of
2216             # the selected fields anymore.
2217             group_by = []
2218             for expr in self.group_by:
2219                 if isinstance(expr, Ref) and expr.refs not in field_names:
2220                     expr = self.annotations[expr.refs]
2221                 group_by.append(expr)
2222             self.group_by = tuple(group_by)
2223 
2224         self.values_select = tuple(field_names)
2225         self.add_fields(field_names, True)
2226 
2227     @property
2228     def annotation_select(self):
2229         """
2230         Return the dictionary of aggregate columns that are not masked and
2231         should be used in the SELECT clause. Cache this result for performance.
2232         """
2233         if self._annotation_select_cache is not None:
2234             return self._annotation_select_cache
2235         elif not self.annotations:
2236             return {}
2237         elif self.annotation_select_mask is not None:
2238             self._annotation_select_cache = {
2239                 k: v for k, v in self.annotations.items()
2240                 if k in self.annotation_select_mask
2241             }
2242             return self._annotation_select_cache
2243         else:
2244             return self.annotations
2245 
2246     @property
2247     def extra_select(self):
2248         if self._extra_select_cache is not None:
2249             return self._extra_select_cache
2250         if not self.extra:
2251             return {}
2252         elif self.extra_select_mask is not None:
2253             self._extra_select_cache = {
2254                 k: v for k, v in self.extra.items()
2255                 if k in self.extra_select_mask
2256             }
2257             return self._extra_select_cache
2258         else:
2259             return self.extra
2260 
2261     def trim_start(self, names_with_path):
2262         """
2263         Trim joins from the start of the join path. The candidates for trim
2264         are the PathInfos in names_with_path structure that are m2m joins.
2265 
2266         Also set the select column so the start matches the join.
2267 
2268         This method is meant to be used for generating the subquery joins &
2269         cols in split_exclude().
2270 
2271         Return a lookup usable for doing outerq.filter(lookup=self) and a
2272         boolean indicating if the joins in the prefix contain a LEFT OUTER join.
2273         _"""
2274         all_paths = []
2275         for _, paths in names_with_path:
2276             all_paths.extend(paths)
2277         contains_louter = False
2278         # Trim and operate only on tables that were generated for
2279         # the lookup part of the query. That is, avoid trimming
2280         # joins generated for F() expressions.
2281         lookup_tables = [
2282             t for t in self.alias_map
2283             if t in self._lookup_joins or t == self.base_table
2284         ]
2285         for trimmed_paths, path in enumerate(all_paths):
2286             if path.m2m:
2287                 break
2288             if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type == LOUTER:
2289                 contains_louter = True
2290             alias = lookup_tables[trimmed_paths]
2291             self.unref_alias(alias)
2292         # The path.join_field is a Rel, lets get the other side's field
2293         join_field = path.join_field.field
2294         # Build the filter prefix.
2295         paths_in_prefix = trimmed_paths
2296         trimmed_prefix = []
2297         for name, path in names_with_path:
2298             if paths_in_prefix - len(path) < 0:
2299                 break
2300             trimmed_prefix.append(name)
2301             paths_in_prefix -= len(path)
2302         trimmed_prefix.append(
2303             join_field.foreign_related_fields[0].name)
2304         trimmed_prefix = LOOKUP_SEP.join(trimmed_prefix)
2305         # Lets still see if we can trim the first join from the inner query
2306         # (that is, self). We can't do this for:
2307         # - LEFT JOINs because we would miss those rows that have nothing on
2308         #   the outer side,
2309         # - INNER JOINs from filtered relations because we would miss their
2310         #   filters.
2311         first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]
2312         if first_join.join_type != LOUTER and not first_join.filtered_relation:
2313             select_fields = [r[0] for r in join_field.related_fields]
2314             select_alias = lookup_tables[trimmed_paths + 1]
2315             self.unref_alias(lookup_tables[trimmed_paths])
2316             extra_restriction = join_field.get_extra_restriction(
2317                 self.where_class, None, lookup_tables[trimmed_paths + 1])
2318             if extra_restriction:
2319                 self.where.add(extra_restriction, AND)
2320         else:
2321             # TODO: It might be possible to trim more joins from the start of the
2322             # inner query if it happens to have a longer join chain containing the
2323             # values in select_fields. Lets punt this one for now.
2324             select_fields = [r[1] for r in join_field.related_fields]
2325             select_alias = lookup_tables[trimmed_paths]
2326         # The found starting point is likely a Join instead of a BaseTable reference.
2327         # But the first entry in the query's FROM clause must not be a JOIN.
2328         for table in self.alias_map:
2329             if self.alias_refcount[table] > 0:
2330                 self.alias_map[table] = BaseTable(self.alias_map[table].table_name, table)
2331                 break
2332         self.set_select([f.get_col(select_alias) for f in select_fields])
2333         return trimmed_prefix, contains_louter
2334 
2335     def is_nullable(self, field):
2336         """
2337         Check if the given field should be treated as nullable.
2338 
2339         Some backends treat '' as null and Django treats such fields as
2340         nullable for those backends. In such situations field.null can be
2341         False even if we should treat the field as nullable.
2342         """
2343         # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have
2344         # (nor should it have) knowledge of which connection is going to be
2345         # used. The proper fix would be to defer all decisions where
2346         # is_nullable() is needed to the compiler stage, but that is not easy
2347         # to do currently.
2348         return (
2349             connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
2350             field.empty_strings_allowed
2351         ) or field.null

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>]
2025-10-15 18:26:05.902 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-15 18:26:05.902 | INFO     | Search-only: skipping patch selection
2025-10-15 18:26:06.055 | INFO     | Task django__django-13431 completed successfully.
2025-10-15 18:26:06.056 | INFO     | No patch generated. You can try running ACR again.
