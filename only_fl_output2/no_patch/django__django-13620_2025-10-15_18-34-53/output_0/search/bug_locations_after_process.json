[
    {
        "rel_file_path": "django/core/management/__init__.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/core/management/__init__.py",
        "start": 78,
        "end": 172,
        "class_name": null,
        "method_name": "call_command",
        "code": "78 def call_command(command_name, *args, **options):\n79     \"\"\"\n80     Call the given command, with the given options and args/kwargs.\n81 \n82     This is the primary API you should use for calling specific commands.\n83 \n84     `command_name` may be a string or a command object. Using a string is\n85     preferred unless the command object is required for further processing or\n86     testing.\n87 \n88     Some examples:\n89         call_command('migrate')\n90         call_command('shell', plain=True)\n91         call_command('sqlmigrate', 'myapp')\n92 \n93         from django.core.management.commands import flush\n94         cmd = flush.Command()\n95         call_command(cmd, verbosity=0, interactive=False)\n96         # Do something with cmd ...\n97     \"\"\"\n98     if isinstance(command_name, BaseCommand):\n99         # Command object passed in.\n100         command = command_name\n101         command_name = command.__class__.__module__.split('.')[-1]\n102     else:\n103         # Load the command object by name.\n104         try:\n105             app_name = get_commands()[command_name]\n106         except KeyError:\n107             raise CommandError(\"Unknown command: %r\" % command_name)\n108 \n109         if isinstance(app_name, BaseCommand):\n110             # If the command is already loaded, use it directly.\n111             command = app_name\n112         else:\n113             command = load_command_class(app_name, command_name)\n114 \n115     # Simulate argument parsing to get the option defaults (see #10080 for details).\n116     parser = command.create_parser('', command_name)\n117     # Use the `dest` option name from the parser option\n118     opt_mapping = {\n119         min(s_opt.option_strings).lstrip('-').replace('-', '_'): s_opt.dest\n120         for s_opt in parser._actions if s_opt.option_strings\n121     }\n122     arg_options = {opt_mapping.get(key, key): value for key, value in options.items()}\n123     parse_args = [str(a) for a in args]\n124 \n125     def get_actions(parser):\n126         # Parser actions and actions from sub-parser choices.\n127         for opt in parser._actions:\n128             if isinstance(opt, _SubParsersAction):\n129                 for sub_opt in opt.choices.values():\n130                     yield from get_actions(sub_opt)\n131             else:\n132                 yield opt\n133 \n134     parser_actions = list(get_actions(parser))\n135     mutually_exclusive_required_options = {\n136         opt\n137         for group in parser._mutually_exclusive_groups\n138         for opt in group._group_actions if group.required\n139     }\n140     # Any required arguments which are passed in via **options must be passed\n141     # to parse_args().\n142     parse_args += [\n143         min(opt.option_strings)\n144         if isinstance(opt, (_AppendConstAction, _CountAction, _StoreConstAction))\n145         else '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n146         for opt in parser_actions if (\n147             opt.dest in options and\n148             (opt.required or opt in mutually_exclusive_required_options)\n149         )\n150     ]\n151     defaults = parser.parse_args(args=parse_args)\n152     defaults = dict(defaults._get_kwargs(), **arg_options)\n153     # Raise an error if any unknown options were passed.\n154     stealth_options = set(command.base_stealth_options + command.stealth_options)\n155     dest_parameters = {action.dest for action in parser_actions}\n156     valid_options = (dest_parameters | stealth_options).union(opt_mapping)\n157     unknown_options = set(options) - valid_options\n158     if unknown_options:\n159         raise TypeError(\n160             \"Unknown option(s) for %s command: %s. \"\n161             \"Valid options are: %s.\" % (\n162                 command_name,\n163                 ', '.join(sorted(unknown_options)),\n164                 ', '.join(sorted(valid_options)),\n165             )\n166         )\n167     # Move positional args out of options to mimic legacy optparse\n168     args = defaults.pop('args', ())\n169     if 'skip_checks' not in options:\n170         defaults['skip_checks'] = True\n171 \n172     return command.execute(*args, **defaults)\n",
        "intended_behavior": "The `call_command` function should be updated to correctly parse and handle list arguments for options specified with `nargs='+'`, especially when such arguments are part of mutually exclusive required groups. This involves ensuring that:\n- When a list is passed directly to `call_command` (e.g., `foo=[1, 2, 3]`), it should recognize and correctly format these arguments for the underlying command as if they were passed via the command line (e.g., translating to `--foo 1 --foo 2 --foo 3` internally).\n- The parsing logic (lines 115-172) needs to be adjusted to support converting passed list arguments into a format compatible with how argparse expects multiple values for a single option, without generating the `invalid int value` error. This might involve adjusting the `parse_args` reconstruction (around lines 142-150) and ensuring that the defaults merging (line 152) accounts for list arguments appropriately.\n- This modification should preserve the existing functionality, allowing other argument types (e.g., single values, constants) to behave as currently without introducing regressions."
    }
]