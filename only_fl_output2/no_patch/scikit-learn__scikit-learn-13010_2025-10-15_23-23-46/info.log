2025-10-15 23:23:46.731 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-15 23:23:49.173 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=649, output_tokens=12, cost=0.006850
2025-10-15 23:23:55.851 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=829, output_tokens=276, cost=0.016570
2025-10-15 23:23:56.908 | INFO     | registered non reproducing test 0
2025-10-15 23:24:10.294 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1934, output_tokens=607, cost=0.037550
2025-10-15 23:24:11.344 | INFO     | registered non reproducing test 1
2025-10-15 23:24:23.633 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2148, output_tokens=569, cost=0.038550
2025-10-15 23:24:24.680 | INFO     | registered non reproducing test 2
2025-10-15 23:24:24.680 | WARNING  | Failed to write a reproducer test; skipping reproducer tracing
2025-10-15 23:24:24.687 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 23:24:29.625 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=941, output_tokens=195, cost=0.015260
2025-10-15 23:24:29.630 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 23:24:31.414 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=549, output_tokens=57, cost=0.007200
2025-10-15 23:24:31.415 | DEBUG    | Extracted a valid json.
2025-10-15 23:24:31.416 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_class(\"StandardScaler\")",
        "search_method_in_class(\"fit\", \"StandardScaler\")",
        "search_code(\"np.mean\")",
        "search_code(\"np.std\")"
    ],
    "bug_locations": []
}
2025-10-15 23:24:31.554 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-15 23:24:31.555 | DEBUG    | <Agent search> Analyzing search results.
2025-10-15 23:24:46.295 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3130, output_tokens=713, cost=0.052690
2025-10-15 23:24:46.302 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 23:24:56.023 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=4059, output_tokens=416, cost=0.053070
2025-10-15 23:24:56.032 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 23:25:03.809 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=770, output_tokens=322, cost=0.017360
2025-10-15 23:25:03.810 | DEBUG    | Extracted a valid json.
2025-10-15 23:25:03.811 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations": [
        {
            "file": "sklearn/preprocessing/data.py",
            "class": "StandardScaler",
            "method": "fit",
            "intended_behavior": "The `fit` method should include a mechanism to handle `float16` array inputs more gracefully to prevent overflow when calculating mean and standard deviation. One approach could involve temporarily upcasting inputs to `float32` (or another suitable precision level) during these calculations and then downcasting, if necessary, after computations are complete. This change should preserve all existing functionality, including handling of types other than `float16`. It's essential that this temporary type adjustment is transparent to the user, ensuring that the output of `fit` (and subsequent `transform` or `inverse_transform` calls) remains consistent with the current behavior for all other input data types."
        },
        {
            "file": "sklearn/preprocessing/data.py",
            "class": "StandardScaler",
            "method": "partial_fit",
            "intended_behavior": "Similar to the `fit` method, `partial_fit` should also be adjusted to account for `float16` overflow issues by implementing a temporary upcasting strategy for the input data during mean and std computations. This modification ensures that `partial_fit`, which directly computes these statistics, does not cause overflow when dealing with `float16` data. The strategy for handling the data type should be consistent with the proposed changes in the `fit` method, ensuring a unified approach across both methods."
        }
    ]
}
2025-10-15 23:25:03.820 | DEBUG    | Bug location extracted successfully: [<file>sklearn/preprocessing/data.py</file>
<class>StandardScaler</class>
<method>fit</method>
<code>
610     def fit(self, X, y=None):
611         """Compute the mean and std to be used for later scaling.
612 
613         Parameters
614         ----------
615         X : {array-like, sparse matrix}, shape [n_samples, n_features]
616             The data used to compute the mean and standard deviation
617             used for later scaling along the features axis.
618 
619         y
620             Ignored
621         """
622 
623         # Reset internal state before fitting
624         self._reset()
625         return self.partial_fit(X, y)

</code><intended_behavior>The `fit` method should include a mechanism to handle `float16` array inputs more gracefully to prevent overflow when calculating mean and standard deviation. One approach could involve temporarily upcasting inputs to `float32` (or another suitable precision level) during these calculations and then downcasting, if necessary, after computations are complete. This change should preserve all existing functionality, including handling of types other than `float16`. It's essential that this temporary type adjustment is transparent to the user, ensuring that the output of `fit` (and subsequent `transform` or `inverse_transform` calls) remains consistent with the current behavior for all other input data types.</intended_behavior>, <file>sklearn/preprocessing/data.py</file>
<class>StandardScaler</class>
<method>None</method>
<code>
476 class StandardScaler(BaseEstimator, TransformerMixin):
477     """Standardize features by removing the mean and scaling to unit variance
478 
479     The standard score of a sample `x` is calculated as:
480 
481         z = (x - u) / s
482 
483     where `u` is the mean of the training samples or zero if `with_mean=False`,
484     and `s` is the standard deviation of the training samples or one if
485     `with_std=False`.
486 
487     Centering and scaling happen independently on each feature by computing
488     the relevant statistics on the samples in the training set. Mean and
489     standard deviation are then stored to be used on later data using the
490     `transform` method.
491 
492     Standardization of a dataset is a common requirement for many
493     machine learning estimators: they might behave badly if the
494     individual features do not more or less look like standard normally
495     distributed data (e.g. Gaussian with 0 mean and unit variance).
496 
497     For instance many elements used in the objective function of
498     a learning algorithm (such as the RBF kernel of Support Vector
499     Machines or the L1 and L2 regularizers of linear models) assume that
500     all features are centered around 0 and have variance in the same
501     order. If a feature has a variance that is orders of magnitude larger
502     that others, it might dominate the objective function and make the
503     estimator unable to learn from other features correctly as expected.
504 
505     This scaler can also be applied to sparse CSR or CSC matrices by passing
506     `with_mean=False` to avoid breaking the sparsity structure of the data.
507 
508     Read more in the :ref:`User Guide <preprocessing_scaler>`.
509 
510     Parameters
511     ----------
512     copy : boolean, optional, default True
513         If False, try to avoid a copy and do inplace scaling instead.
514         This is not guaranteed to always work inplace; e.g. if the data is
515         not a NumPy array or scipy.sparse CSR matrix, a copy may still be
516         returned.
517 
518     with_mean : boolean, True by default
519         If True, center the data before scaling.
520         This does not work (and will raise an exception) when attempted on
521         sparse matrices, because centering them entails building a dense
522         matrix which in common use cases is likely to be too large to fit in
523         memory.
524 
525     with_std : boolean, True by default
526         If True, scale the data to unit variance (or equivalently,
527         unit standard deviation).
528 
529     Attributes
530     ----------
531     scale_ : ndarray or None, shape (n_features,)
532         Per feature relative scaling of the data. This is calculated using
533         `np.sqrt(var_)`. Equal to ``None`` when ``with_std=False``.
534 
535         .. versionadded:: 0.17
536            *scale_*
537 
538     mean_ : ndarray or None, shape (n_features,)
539         The mean value for each feature in the training set.
540         Equal to ``None`` when ``with_mean=False``.
541 
542     var_ : ndarray or None, shape (n_features,)
543         The variance for each feature in the training set. Used to compute
544         `scale_`. Equal to ``None`` when ``with_std=False``.
545 
546     n_samples_seen_ : int or array, shape (n_features,)
547         The number of samples processed by the estimator for each feature.
548         If there are not missing samples, the ``n_samples_seen`` will be an
549         integer, otherwise it will be an array.
550         Will be reset on new calls to fit, but increments across
551         ``partial_fit`` calls.
552 
553     Examples
554     --------
555     >>> from sklearn.preprocessing import StandardScaler
556     >>> data = [[0, 0], [0, 0], [1, 1], [1, 1]]
557     >>> scaler = StandardScaler()
558     >>> print(scaler.fit(data))
559     StandardScaler(copy=True, with_mean=True, with_std=True)
560     >>> print(scaler.mean_)
561     [0.5 0.5]
562     >>> print(scaler.transform(data))
563     [[-1. -1.]
564      [-1. -1.]
565      [ 1.  1.]
566      [ 1.  1.]]
567     >>> print(scaler.transform([[2, 2]]))
568     [[3. 3.]]
569 
570     See also
571     --------
572     scale: Equivalent function without the estimator API.
573 
574     :class:`sklearn.decomposition.PCA`
575         Further removes the linear correlation across features with 'whiten=True'.
576 
577     Notes
578     -----
579     NaNs are treated as missing values: disregarded in fit, and maintained in
580     transform.
581     
582     We use a biased estimator for the standard deviation, equivalent to
583     `numpy.std(x, ddof=0)`. Note that the choice of `ddof` is unlikely to
584     affect model performance.
585 
586     For a comparison of the different scalers, transformers, and normalizers,
587     see :ref:`examples/preprocessing/plot_all_scaling.py
588     <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.
589     """  # noqa
590 
591     def __init__(self, copy=True, with_mean=True, with_std=True):
592         self.with_mean = with_mean
593         self.with_std = with_std
594         self.copy = copy
595 
596     def _reset(self):
597         """Reset internal data-dependent state of the scaler, if necessary.
598 
599         __init__ parameters are not touched.
600         """
601 
602         # Checking one attribute is enough, becase they are all set together
603         # in partial_fit
604         if hasattr(self, 'scale_'):
605             del self.scale_
606             del self.n_samples_seen_
607             del self.mean_
608             del self.var_
609 
610     def fit(self, X, y=None):
611         """Compute the mean and std to be used for later scaling.
612 
613         Parameters
614         ----------
615         X : {array-like, sparse matrix}, shape [n_samples, n_features]
616             The data used to compute the mean and standard deviation
617             used for later scaling along the features axis.
618 
619         y
620             Ignored
621         """
622 
623         # Reset internal state before fitting
624         self._reset()
625         return self.partial_fit(X, y)
626 
627     def partial_fit(self, X, y=None):
628         """Online computation of mean and std on X for later scaling.
629         All of X is processed as a single batch. This is intended for cases
630         when `fit` is not feasible due to very large number of `n_samples`
631         or because X is read from a continuous stream.
632 
633         The algorithm for incremental mean and std is given in Equation 1.5a,b
634         in Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. "Algorithms
635         for computing the sample variance: Analysis and recommendations."
636         The American Statistician 37.3 (1983): 242-247:
637 
638         Parameters
639         ----------
640         X : {array-like, sparse matrix}, shape [n_samples, n_features]
641             The data used to compute the mean and standard deviation
642             used for later scaling along the features axis.
643 
644         y
645             Ignored
646         """
647         X = check_array(X, accept_sparse=('csr', 'csc'), copy=self.copy,
648                         warn_on_dtype=True, estimator=self, dtype=FLOAT_DTYPES,
649                         force_all_finite='allow-nan')
650 
651         # Even in the case of `with_mean=False`, we update the mean anyway
652         # This is needed for the incremental computation of the var
653         # See incr_mean_variance_axis and _incremental_mean_variance_axis
654 
655         # if n_samples_seen_ is an integer (i.e. no missing values), we need to
656         # transform it to a NumPy array of shape (n_features,) required by
657         # incr_mean_variance_axis and _incremental_variance_axis
658         if (hasattr(self, 'n_samples_seen_') and
659                 isinstance(self.n_samples_seen_, (int, np.integer))):
660             self.n_samples_seen_ = np.repeat(self.n_samples_seen_,
661                                              X.shape[1]).astype(np.int64)
662 
663         if sparse.issparse(X):
664             if self.with_mean:
665                 raise ValueError(
666                     "Cannot center sparse matrices: pass `with_mean=False` "
667                     "instead. See docstring for motivation and alternatives.")
668 
669             sparse_constructor = (sparse.csr_matrix
670                                   if X.format == 'csr' else sparse.csc_matrix)
671             counts_nan = sparse_constructor(
672                         (np.isnan(X.data), X.indices, X.indptr),
673                         shape=X.shape).sum(axis=0).A.ravel()
674 
675             if not hasattr(self, 'n_samples_seen_'):
676                 self.n_samples_seen_ = (X.shape[0] -
677                                         counts_nan).astype(np.int64)
678 
679             if self.with_std:
680                 # First pass
681                 if not hasattr(self, 'scale_'):
682                     self.mean_, self.var_ = mean_variance_axis(X, axis=0)
683                 # Next passes
684                 else:
685                     self.mean_, self.var_, self.n_samples_seen_ = \
686                         incr_mean_variance_axis(X, axis=0,
687                                                 last_mean=self.mean_,
688                                                 last_var=self.var_,
689                                                 last_n=self.n_samples_seen_)
690             else:
691                 self.mean_ = None
692                 self.var_ = None
693                 if hasattr(self, 'scale_'):
694                     self.n_samples_seen_ += X.shape[0] - counts_nan
695         else:
696             if not hasattr(self, 'n_samples_seen_'):
697                 self.n_samples_seen_ = np.zeros(X.shape[1], dtype=np.int64)
698 
699             # First pass
700             if not hasattr(self, 'scale_'):
701                 self.mean_ = .0
702                 if self.with_std:
703                     self.var_ = .0
704                 else:
705                     self.var_ = None
706 
707             if not self.with_mean and not self.with_std:
708                 self.mean_ = None
709                 self.var_ = None
710                 self.n_samples_seen_ += X.shape[0] - np.isnan(X).sum(axis=0)
711             else:
712                 self.mean_, self.var_, self.n_samples_seen_ = \
713                     _incremental_mean_and_var(X, self.mean_, self.var_,
714                                               self.n_samples_seen_)
715 
716         # for backward-compatibility, reduce n_samples_seen_ to an integer
717         # if the number of samples is the same for each feature (i.e. no
718         # missing values)
719         if np.ptp(self.n_samples_seen_) == 0:
720             self.n_samples_seen_ = self.n_samples_seen_[0]
721 
722         if self.with_std:
723             self.scale_ = _handle_zeros_in_scale(np.sqrt(self.var_))
724         else:
725             self.scale_ = None
726 
727         return self
728 
729     def transform(self, X, copy=None):
730         """Perform standardization by centering and scaling
731 
732         Parameters
733         ----------
734         X : array-like, shape [n_samples, n_features]
735             The data used to scale along the features axis.
736         copy : bool, optional (default: None)
737             Copy the input X or not.
738         """
739         check_is_fitted(self, 'scale_')
740 
741         copy = copy if copy is not None else self.copy
742         X = check_array(X, accept_sparse='csr', copy=copy, warn_on_dtype=True,
743                         estimator=self, dtype=FLOAT_DTYPES,
744                         force_all_finite='allow-nan')
745 
746         if sparse.issparse(X):
747             if self.with_mean:
748                 raise ValueError(
749                     "Cannot center sparse matrices: pass `with_mean=False` "
750                     "instead. See docstring for motivation and alternatives.")
751             if self.scale_ is not None:
752                 inplace_column_scale(X, 1 / self.scale_)
753         else:
754             if self.with_mean:
755                 X -= self.mean_
756             if self.with_std:
757                 X /= self.scale_
758         return X
759 
760     def inverse_transform(self, X, copy=None):
761         """Scale back the data to the original representation
762 
763         Parameters
764         ----------
765         X : array-like, shape [n_samples, n_features]
766             The data used to scale along the features axis.
767         copy : bool, optional (default: None)
768             Copy the input X or not.
769 
770         Returns
771         -------
772         X_tr : array-like, shape [n_samples, n_features]
773             Transformed array.
774         """
775         check_is_fitted(self, 'scale_')
776 
777         copy = copy if copy is not None else self.copy
778         if sparse.issparse(X):
779             if self.with_mean:
780                 raise ValueError(
781                     "Cannot uncenter sparse matrices: pass `with_mean=False` "
782                     "instead See docstring for motivation and alternatives.")
783             if not sparse.isspmatrix_csr(X):
784                 X = X.tocsr()
785                 copy = False
786             if copy:
787                 X = X.copy()
788             if self.scale_ is not None:
789                 inplace_column_scale(X, self.scale_)
790         else:
791             X = np.asarray(X)
792             if copy:
793                 X = X.copy()
794             if self.with_std:
795                 X *= self.scale_
796             if self.with_mean:
797                 X += self.mean_
798         return X

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>sklearn/preprocessing/data.py</file>
<class>StandardScaler</class>
<method>partial_fit</method>
<code>
627     def partial_fit(self, X, y=None):
628         """Online computation of mean and std on X for later scaling.
629         All of X is processed as a single batch. This is intended for cases
630         when `fit` is not feasible due to very large number of `n_samples`
631         or because X is read from a continuous stream.
632 
633         The algorithm for incremental mean and std is given in Equation 1.5a,b
634         in Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. "Algorithms
635         for computing the sample variance: Analysis and recommendations."
636         The American Statistician 37.3 (1983): 242-247:
637 
638         Parameters
639         ----------
640         X : {array-like, sparse matrix}, shape [n_samples, n_features]
641             The data used to compute the mean and standard deviation
642             used for later scaling along the features axis.
643 
644         y
645             Ignored
646         """
647         X = check_array(X, accept_sparse=('csr', 'csc'), copy=self.copy,
648                         warn_on_dtype=True, estimator=self, dtype=FLOAT_DTYPES,
649                         force_all_finite='allow-nan')
650 
651         # Even in the case of `with_mean=False`, we update the mean anyway
652         # This is needed for the incremental computation of the var
653         # See incr_mean_variance_axis and _incremental_mean_variance_axis
654 
655         # if n_samples_seen_ is an integer (i.e. no missing values), we need to
656         # transform it to a NumPy array of shape (n_features,) required by
657         # incr_mean_variance_axis and _incremental_variance_axis
658         if (hasattr(self, 'n_samples_seen_') and
659                 isinstance(self.n_samples_seen_, (int, np.integer))):
660             self.n_samples_seen_ = np.repeat(self.n_samples_seen_,
661                                              X.shape[1]).astype(np.int64)
662 
663         if sparse.issparse(X):
664             if self.with_mean:
665                 raise ValueError(
666                     "Cannot center sparse matrices: pass `with_mean=False` "
667                     "instead. See docstring for motivation and alternatives.")
668 
669             sparse_constructor = (sparse.csr_matrix
670                                   if X.format == 'csr' else sparse.csc_matrix)
671             counts_nan = sparse_constructor(
672                         (np.isnan(X.data), X.indices, X.indptr),
673                         shape=X.shape).sum(axis=0).A.ravel()
674 
675             if not hasattr(self, 'n_samples_seen_'):
676                 self.n_samples_seen_ = (X.shape[0] -
677                                         counts_nan).astype(np.int64)
678 
679             if self.with_std:
680                 # First pass
681                 if not hasattr(self, 'scale_'):
682                     self.mean_, self.var_ = mean_variance_axis(X, axis=0)
683                 # Next passes
684                 else:
685                     self.mean_, self.var_, self.n_samples_seen_ = \
686                         incr_mean_variance_axis(X, axis=0,
687                                                 last_mean=self.mean_,
688                                                 last_var=self.var_,
689                                                 last_n=self.n_samples_seen_)
690             else:
691                 self.mean_ = None
692                 self.var_ = None
693                 if hasattr(self, 'scale_'):
694                     self.n_samples_seen_ += X.shape[0] - counts_nan
695         else:
696             if not hasattr(self, 'n_samples_seen_'):
697                 self.n_samples_seen_ = np.zeros(X.shape[1], dtype=np.int64)
698 
699             # First pass
700             if not hasattr(self, 'scale_'):
701                 self.mean_ = .0
702                 if self.with_std:
703                     self.var_ = .0
704                 else:
705                     self.var_ = None
706 
707             if not self.with_mean and not self.with_std:
708                 self.mean_ = None
709                 self.var_ = None
710                 self.n_samples_seen_ += X.shape[0] - np.isnan(X).sum(axis=0)
711             else:
712                 self.mean_, self.var_, self.n_samples_seen_ = \
713                     _incremental_mean_and_var(X, self.mean_, self.var_,
714                                               self.n_samples_seen_)
715 
716         # for backward-compatibility, reduce n_samples_seen_ to an integer
717         # if the number of samples is the same for each feature (i.e. no
718         # missing values)
719         if np.ptp(self.n_samples_seen_) == 0:
720             self.n_samples_seen_ = self.n_samples_seen_[0]
721 
722         if self.with_std:
723             self.scale_ = _handle_zeros_in_scale(np.sqrt(self.var_))
724         else:
725             self.scale_ = None
726 
727         return self

</code><intended_behavior>Similar to the `fit` method, `partial_fit` should also be adjusted to account for `float16` overflow issues by implementing a temporary upcasting strategy for the input data during mean and std computations. This modification ensures that `partial_fit`, which directly computes these statistics, does not cause overflow when dealing with `float16` data. The strategy for handling the data type should be consistent with the proposed changes in the `fit` method, ensuring a unified approach across both methods.</intended_behavior>, <file>sklearn/preprocessing/data.py</file>
<class>StandardScaler</class>
<method>None</method>
<code>
476 class StandardScaler(BaseEstimator, TransformerMixin):
477     """Standardize features by removing the mean and scaling to unit variance
478 
479     The standard score of a sample `x` is calculated as:
480 
481         z = (x - u) / s
482 
483     where `u` is the mean of the training samples or zero if `with_mean=False`,
484     and `s` is the standard deviation of the training samples or one if
485     `with_std=False`.
486 
487     Centering and scaling happen independently on each feature by computing
488     the relevant statistics on the samples in the training set. Mean and
489     standard deviation are then stored to be used on later data using the
490     `transform` method.
491 
492     Standardization of a dataset is a common requirement for many
493     machine learning estimators: they might behave badly if the
494     individual features do not more or less look like standard normally
495     distributed data (e.g. Gaussian with 0 mean and unit variance).
496 
497     For instance many elements used in the objective function of
498     a learning algorithm (such as the RBF kernel of Support Vector
499     Machines or the L1 and L2 regularizers of linear models) assume that
500     all features are centered around 0 and have variance in the same
501     order. If a feature has a variance that is orders of magnitude larger
502     that others, it might dominate the objective function and make the
503     estimator unable to learn from other features correctly as expected.
504 
505     This scaler can also be applied to sparse CSR or CSC matrices by passing
506     `with_mean=False` to avoid breaking the sparsity structure of the data.
507 
508     Read more in the :ref:`User Guide <preprocessing_scaler>`.
509 
510     Parameters
511     ----------
512     copy : boolean, optional, default True
513         If False, try to avoid a copy and do inplace scaling instead.
514         This is not guaranteed to always work inplace; e.g. if the data is
515         not a NumPy array or scipy.sparse CSR matrix, a copy may still be
516         returned.
517 
518     with_mean : boolean, True by default
519         If True, center the data before scaling.
520         This does not work (and will raise an exception) when attempted on
521         sparse matrices, because centering them entails building a dense
522         matrix which in common use cases is likely to be too large to fit in
523         memory.
524 
525     with_std : boolean, True by default
526         If True, scale the data to unit variance (or equivalently,
527         unit standard deviation).
528 
529     Attributes
530     ----------
531     scale_ : ndarray or None, shape (n_features,)
532         Per feature relative scaling of the data. This is calculated using
533         `np.sqrt(var_)`. Equal to ``None`` when ``with_std=False``.
534 
535         .. versionadded:: 0.17
536            *scale_*
537 
538     mean_ : ndarray or None, shape (n_features,)
539         The mean value for each feature in the training set.
540         Equal to ``None`` when ``with_mean=False``.
541 
542     var_ : ndarray or None, shape (n_features,)
543         The variance for each feature in the training set. Used to compute
544         `scale_`. Equal to ``None`` when ``with_std=False``.
545 
546     n_samples_seen_ : int or array, shape (n_features,)
547         The number of samples processed by the estimator for each feature.
548         If there are not missing samples, the ``n_samples_seen`` will be an
549         integer, otherwise it will be an array.
550         Will be reset on new calls to fit, but increments across
551         ``partial_fit`` calls.
552 
553     Examples
554     --------
555     >>> from sklearn.preprocessing import StandardScaler
556     >>> data = [[0, 0], [0, 0], [1, 1], [1, 1]]
557     >>> scaler = StandardScaler()
558     >>> print(scaler.fit(data))
559     StandardScaler(copy=True, with_mean=True, with_std=True)
560     >>> print(scaler.mean_)
561     [0.5 0.5]
562     >>> print(scaler.transform(data))
563     [[-1. -1.]
564      [-1. -1.]
565      [ 1.  1.]
566      [ 1.  1.]]
567     >>> print(scaler.transform([[2, 2]]))
568     [[3. 3.]]
569 
570     See also
571     --------
572     scale: Equivalent function without the estimator API.
573 
574     :class:`sklearn.decomposition.PCA`
575         Further removes the linear correlation across features with 'whiten=True'.
576 
577     Notes
578     -----
579     NaNs are treated as missing values: disregarded in fit, and maintained in
580     transform.
581     
582     We use a biased estimator for the standard deviation, equivalent to
583     `numpy.std(x, ddof=0)`. Note that the choice of `ddof` is unlikely to
584     affect model performance.
585 
586     For a comparison of the different scalers, transformers, and normalizers,
587     see :ref:`examples/preprocessing/plot_all_scaling.py
588     <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.
589     """  # noqa
590 
591     def __init__(self, copy=True, with_mean=True, with_std=True):
592         self.with_mean = with_mean
593         self.with_std = with_std
594         self.copy = copy
595 
596     def _reset(self):
597         """Reset internal data-dependent state of the scaler, if necessary.
598 
599         __init__ parameters are not touched.
600         """
601 
602         # Checking one attribute is enough, becase they are all set together
603         # in partial_fit
604         if hasattr(self, 'scale_'):
605             del self.scale_
606             del self.n_samples_seen_
607             del self.mean_
608             del self.var_
609 
610     def fit(self, X, y=None):
611         """Compute the mean and std to be used for later scaling.
612 
613         Parameters
614         ----------
615         X : {array-like, sparse matrix}, shape [n_samples, n_features]
616             The data used to compute the mean and standard deviation
617             used for later scaling along the features axis.
618 
619         y
620             Ignored
621         """
622 
623         # Reset internal state before fitting
624         self._reset()
625         return self.partial_fit(X, y)
626 
627     def partial_fit(self, X, y=None):
628         """Online computation of mean and std on X for later scaling.
629         All of X is processed as a single batch. This is intended for cases
630         when `fit` is not feasible due to very large number of `n_samples`
631         or because X is read from a continuous stream.
632 
633         The algorithm for incremental mean and std is given in Equation 1.5a,b
634         in Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. "Algorithms
635         for computing the sample variance: Analysis and recommendations."
636         The American Statistician 37.3 (1983): 242-247:
637 
638         Parameters
639         ----------
640         X : {array-like, sparse matrix}, shape [n_samples, n_features]
641             The data used to compute the mean and standard deviation
642             used for later scaling along the features axis.
643 
644         y
645             Ignored
646         """
647         X = check_array(X, accept_sparse=('csr', 'csc'), copy=self.copy,
648                         warn_on_dtype=True, estimator=self, dtype=FLOAT_DTYPES,
649                         force_all_finite='allow-nan')
650 
651         # Even in the case of `with_mean=False`, we update the mean anyway
652         # This is needed for the incremental computation of the var
653         # See incr_mean_variance_axis and _incremental_mean_variance_axis
654 
655         # if n_samples_seen_ is an integer (i.e. no missing values), we need to
656         # transform it to a NumPy array of shape (n_features,) required by
657         # incr_mean_variance_axis and _incremental_variance_axis
658         if (hasattr(self, 'n_samples_seen_') and
659                 isinstance(self.n_samples_seen_, (int, np.integer))):
660             self.n_samples_seen_ = np.repeat(self.n_samples_seen_,
661                                              X.shape[1]).astype(np.int64)
662 
663         if sparse.issparse(X):
664             if self.with_mean:
665                 raise ValueError(
666                     "Cannot center sparse matrices: pass `with_mean=False` "
667                     "instead. See docstring for motivation and alternatives.")
668 
669             sparse_constructor = (sparse.csr_matrix
670                                   if X.format == 'csr' else sparse.csc_matrix)
671             counts_nan = sparse_constructor(
672                         (np.isnan(X.data), X.indices, X.indptr),
673                         shape=X.shape).sum(axis=0).A.ravel()
674 
675             if not hasattr(self, 'n_samples_seen_'):
676                 self.n_samples_seen_ = (X.shape[0] -
677                                         counts_nan).astype(np.int64)
678 
679             if self.with_std:
680                 # First pass
681                 if not hasattr(self, 'scale_'):
682                     self.mean_, self.var_ = mean_variance_axis(X, axis=0)
683                 # Next passes
684                 else:
685                     self.mean_, self.var_, self.n_samples_seen_ = \
686                         incr_mean_variance_axis(X, axis=0,
687                                                 last_mean=self.mean_,
688                                                 last_var=self.var_,
689                                                 last_n=self.n_samples_seen_)
690             else:
691                 self.mean_ = None
692                 self.var_ = None
693                 if hasattr(self, 'scale_'):
694                     self.n_samples_seen_ += X.shape[0] - counts_nan
695         else:
696             if not hasattr(self, 'n_samples_seen_'):
697                 self.n_samples_seen_ = np.zeros(X.shape[1], dtype=np.int64)
698 
699             # First pass
700             if not hasattr(self, 'scale_'):
701                 self.mean_ = .0
702                 if self.with_std:
703                     self.var_ = .0
704                 else:
705                     self.var_ = None
706 
707             if not self.with_mean and not self.with_std:
708                 self.mean_ = None
709                 self.var_ = None
710                 self.n_samples_seen_ += X.shape[0] - np.isnan(X).sum(axis=0)
711             else:
712                 self.mean_, self.var_, self.n_samples_seen_ = \
713                     _incremental_mean_and_var(X, self.mean_, self.var_,
714                                               self.n_samples_seen_)
715 
716         # for backward-compatibility, reduce n_samples_seen_ to an integer
717         # if the number of samples is the same for each feature (i.e. no
718         # missing values)
719         if np.ptp(self.n_samples_seen_) == 0:
720             self.n_samples_seen_ = self.n_samples_seen_[0]
721 
722         if self.with_std:
723             self.scale_ = _handle_zeros_in_scale(np.sqrt(self.var_))
724         else:
725             self.scale_ = None
726 
727         return self
728 
729     def transform(self, X, copy=None):
730         """Perform standardization by centering and scaling
731 
732         Parameters
733         ----------
734         X : array-like, shape [n_samples, n_features]
735             The data used to scale along the features axis.
736         copy : bool, optional (default: None)
737             Copy the input X or not.
738         """
739         check_is_fitted(self, 'scale_')
740 
741         copy = copy if copy is not None else self.copy
742         X = check_array(X, accept_sparse='csr', copy=copy, warn_on_dtype=True,
743                         estimator=self, dtype=FLOAT_DTYPES,
744                         force_all_finite='allow-nan')
745 
746         if sparse.issparse(X):
747             if self.with_mean:
748                 raise ValueError(
749                     "Cannot center sparse matrices: pass `with_mean=False` "
750                     "instead. See docstring for motivation and alternatives.")
751             if self.scale_ is not None:
752                 inplace_column_scale(X, 1 / self.scale_)
753         else:
754             if self.with_mean:
755                 X -= self.mean_
756             if self.with_std:
757                 X /= self.scale_
758         return X
759 
760     def inverse_transform(self, X, copy=None):
761         """Scale back the data to the original representation
762 
763         Parameters
764         ----------
765         X : array-like, shape [n_samples, n_features]
766             The data used to scale along the features axis.
767         copy : bool, optional (default: None)
768             Copy the input X or not.
769 
770         Returns
771         -------
772         X_tr : array-like, shape [n_samples, n_features]
773             Transformed array.
774         """
775         check_is_fitted(self, 'scale_')
776 
777         copy = copy if copy is not None else self.copy
778         if sparse.issparse(X):
779             if self.with_mean:
780                 raise ValueError(
781                     "Cannot uncenter sparse matrices: pass `with_mean=False` "
782                     "instead See docstring for motivation and alternatives.")
783             if not sparse.isspmatrix_csr(X):
784                 X = X.tocsr()
785                 copy = False
786             if copy:
787                 X = X.copy()
788             if self.scale_ is not None:
789                 inplace_column_scale(X, self.scale_)
790         else:
791             X = np.asarray(X)
792             if copy:
793                 X = X.copy()
794             if self.with_std:
795                 X *= self.scale_
796             if self.with_mean:
797                 X += self.mean_
798         return X

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>]
2025-10-15 23:25:03.821 | INFO     | Search completed. Bug locations: [<file>sklearn/preprocessing/data.py</file>
<class>StandardScaler</class>
<method>fit</method>
<code>
610     def fit(self, X, y=None):
611         """Compute the mean and std to be used for later scaling.
612 
613         Parameters
614         ----------
615         X : {array-like, sparse matrix}, shape [n_samples, n_features]
616             The data used to compute the mean and standard deviation
617             used for later scaling along the features axis.
618 
619         y
620             Ignored
621         """
622 
623         # Reset internal state before fitting
624         self._reset()
625         return self.partial_fit(X, y)

</code><intended_behavior>The `fit` method should include a mechanism to handle `float16` array inputs more gracefully to prevent overflow when calculating mean and standard deviation. One approach could involve temporarily upcasting inputs to `float32` (or another suitable precision level) during these calculations and then downcasting, if necessary, after computations are complete. This change should preserve all existing functionality, including handling of types other than `float16`. It's essential that this temporary type adjustment is transparent to the user, ensuring that the output of `fit` (and subsequent `transform` or `inverse_transform` calls) remains consistent with the current behavior for all other input data types.</intended_behavior>, <file>sklearn/preprocessing/data.py</file>
<class>StandardScaler</class>
<method>None</method>
<code>
476 class StandardScaler(BaseEstimator, TransformerMixin):
477     """Standardize features by removing the mean and scaling to unit variance
478 
479     The standard score of a sample `x` is calculated as:
480 
481         z = (x - u) / s
482 
483     where `u` is the mean of the training samples or zero if `with_mean=False`,
484     and `s` is the standard deviation of the training samples or one if
485     `with_std=False`.
486 
487     Centering and scaling happen independently on each feature by computing
488     the relevant statistics on the samples in the training set. Mean and
489     standard deviation are then stored to be used on later data using the
490     `transform` method.
491 
492     Standardization of a dataset is a common requirement for many
493     machine learning estimators: they might behave badly if the
494     individual features do not more or less look like standard normally
495     distributed data (e.g. Gaussian with 0 mean and unit variance).
496 
497     For instance many elements used in the objective function of
498     a learning algorithm (such as the RBF kernel of Support Vector
499     Machines or the L1 and L2 regularizers of linear models) assume that
500     all features are centered around 0 and have variance in the same
501     order. If a feature has a variance that is orders of magnitude larger
502     that others, it might dominate the objective function and make the
503     estimator unable to learn from other features correctly as expected.
504 
505     This scaler can also be applied to sparse CSR or CSC matrices by passing
506     `with_mean=False` to avoid breaking the sparsity structure of the data.
507 
508     Read more in the :ref:`User Guide <preprocessing_scaler>`.
509 
510     Parameters
511     ----------
512     copy : boolean, optional, default True
513         If False, try to avoid a copy and do inplace scaling instead.
514         This is not guaranteed to always work inplace; e.g. if the data is
515         not a NumPy array or scipy.sparse CSR matrix, a copy may still be
516         returned.
517 
518     with_mean : boolean, True by default
519         If True, center the data before scaling.
520         This does not work (and will raise an exception) when attempted on
521         sparse matrices, because centering them entails building a dense
522         matrix which in common use cases is likely to be too large to fit in
523         memory.
524 
525     with_std : boolean, True by default
526         If True, scale the data to unit variance (or equivalently,
527         unit standard deviation).
528 
529     Attributes
530     ----------
531     scale_ : ndarray or None, shape (n_features,)
532         Per feature relative scaling of the data. This is calculated using
533         `np.sqrt(var_)`. Equal to ``None`` when ``with_std=False``.
534 
535         .. versionadded:: 0.17
536            *scale_*
537 
538     mean_ : ndarray or None, shape (n_features,)
539         The mean value for each feature in the training set.
540         Equal to ``None`` when ``with_mean=False``.
541 
542     var_ : ndarray or None, shape (n_features,)
543         The variance for each feature in the training set. Used to compute
544         `scale_`. Equal to ``None`` when ``with_std=False``.
545 
546     n_samples_seen_ : int or array, shape (n_features,)
547         The number of samples processed by the estimator for each feature.
548         If there are not missing samples, the ``n_samples_seen`` will be an
549         integer, otherwise it will be an array.
550         Will be reset on new calls to fit, but increments across
551         ``partial_fit`` calls.
552 
553     Examples
554     --------
555     >>> from sklearn.preprocessing import StandardScaler
556     >>> data = [[0, 0], [0, 0], [1, 1], [1, 1]]
557     >>> scaler = StandardScaler()
558     >>> print(scaler.fit(data))
559     StandardScaler(copy=True, with_mean=True, with_std=True)
560     >>> print(scaler.mean_)
561     [0.5 0.5]
562     >>> print(scaler.transform(data))
563     [[-1. -1.]
564      [-1. -1.]
565      [ 1.  1.]
566      [ 1.  1.]]
567     >>> print(scaler.transform([[2, 2]]))
568     [[3. 3.]]
569 
570     See also
571     --------
572     scale: Equivalent function without the estimator API.
573 
574     :class:`sklearn.decomposition.PCA`
575         Further removes the linear correlation across features with 'whiten=True'.
576 
577     Notes
578     -----
579     NaNs are treated as missing values: disregarded in fit, and maintained in
580     transform.
581     
582     We use a biased estimator for the standard deviation, equivalent to
583     `numpy.std(x, ddof=0)`. Note that the choice of `ddof` is unlikely to
584     affect model performance.
585 
586     For a comparison of the different scalers, transformers, and normalizers,
587     see :ref:`examples/preprocessing/plot_all_scaling.py
588     <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.
589     """  # noqa
590 
591     def __init__(self, copy=True, with_mean=True, with_std=True):
592         self.with_mean = with_mean
593         self.with_std = with_std
594         self.copy = copy
595 
596     def _reset(self):
597         """Reset internal data-dependent state of the scaler, if necessary.
598 
599         __init__ parameters are not touched.
600         """
601 
602         # Checking one attribute is enough, becase they are all set together
603         # in partial_fit
604         if hasattr(self, 'scale_'):
605             del self.scale_
606             del self.n_samples_seen_
607             del self.mean_
608             del self.var_
609 
610     def fit(self, X, y=None):
611         """Compute the mean and std to be used for later scaling.
612 
613         Parameters
614         ----------
615         X : {array-like, sparse matrix}, shape [n_samples, n_features]
616             The data used to compute the mean and standard deviation
617             used for later scaling along the features axis.
618 
619         y
620             Ignored
621         """
622 
623         # Reset internal state before fitting
624         self._reset()
625         return self.partial_fit(X, y)
626 
627     def partial_fit(self, X, y=None):
628         """Online computation of mean and std on X for later scaling.
629         All of X is processed as a single batch. This is intended for cases
630         when `fit` is not feasible due to very large number of `n_samples`
631         or because X is read from a continuous stream.
632 
633         The algorithm for incremental mean and std is given in Equation 1.5a,b
634         in Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. "Algorithms
635         for computing the sample variance: Analysis and recommendations."
636         The American Statistician 37.3 (1983): 242-247:
637 
638         Parameters
639         ----------
640         X : {array-like, sparse matrix}, shape [n_samples, n_features]
641             The data used to compute the mean and standard deviation
642             used for later scaling along the features axis.
643 
644         y
645             Ignored
646         """
647         X = check_array(X, accept_sparse=('csr', 'csc'), copy=self.copy,
648                         warn_on_dtype=True, estimator=self, dtype=FLOAT_DTYPES,
649                         force_all_finite='allow-nan')
650 
651         # Even in the case of `with_mean=False`, we update the mean anyway
652         # This is needed for the incremental computation of the var
653         # See incr_mean_variance_axis and _incremental_mean_variance_axis
654 
655         # if n_samples_seen_ is an integer (i.e. no missing values), we need to
656         # transform it to a NumPy array of shape (n_features,) required by
657         # incr_mean_variance_axis and _incremental_variance_axis
658         if (hasattr(self, 'n_samples_seen_') and
659                 isinstance(self.n_samples_seen_, (int, np.integer))):
660             self.n_samples_seen_ = np.repeat(self.n_samples_seen_,
661                                              X.shape[1]).astype(np.int64)
662 
663         if sparse.issparse(X):
664             if self.with_mean:
665                 raise ValueError(
666                     "Cannot center sparse matrices: pass `with_mean=False` "
667                     "instead. See docstring for motivation and alternatives.")
668 
669             sparse_constructor = (sparse.csr_matrix
670                                   if X.format == 'csr' else sparse.csc_matrix)
671             counts_nan = sparse_constructor(
672                         (np.isnan(X.data), X.indices, X.indptr),
673                         shape=X.shape).sum(axis=0).A.ravel()
674 
675             if not hasattr(self, 'n_samples_seen_'):
676                 self.n_samples_seen_ = (X.shape[0] -
677                                         counts_nan).astype(np.int64)
678 
679             if self.with_std:
680                 # First pass
681                 if not hasattr(self, 'scale_'):
682                     self.mean_, self.var_ = mean_variance_axis(X, axis=0)
683                 # Next passes
684                 else:
685                     self.mean_, self.var_, self.n_samples_seen_ = \
686                         incr_mean_variance_axis(X, axis=0,
687                                                 last_mean=self.mean_,
688                                                 last_var=self.var_,
689                                                 last_n=self.n_samples_seen_)
690             else:
691                 self.mean_ = None
692                 self.var_ = None
693                 if hasattr(self, 'scale_'):
694                     self.n_samples_seen_ += X.shape[0] - counts_nan
695         else:
696             if not hasattr(self, 'n_samples_seen_'):
697                 self.n_samples_seen_ = np.zeros(X.shape[1], dtype=np.int64)
698 
699             # First pass
700             if not hasattr(self, 'scale_'):
701                 self.mean_ = .0
702                 if self.with_std:
703                     self.var_ = .0
704                 else:
705                     self.var_ = None
706 
707             if not self.with_mean and not self.with_std:
708                 self.mean_ = None
709                 self.var_ = None
710                 self.n_samples_seen_ += X.shape[0] - np.isnan(X).sum(axis=0)
711             else:
712                 self.mean_, self.var_, self.n_samples_seen_ = \
713                     _incremental_mean_and_var(X, self.mean_, self.var_,
714                                               self.n_samples_seen_)
715 
716         # for backward-compatibility, reduce n_samples_seen_ to an integer
717         # if the number of samples is the same for each feature (i.e. no
718         # missing values)
719         if np.ptp(self.n_samples_seen_) == 0:
720             self.n_samples_seen_ = self.n_samples_seen_[0]
721 
722         if self.with_std:
723             self.scale_ = _handle_zeros_in_scale(np.sqrt(self.var_))
724         else:
725             self.scale_ = None
726 
727         return self
728 
729     def transform(self, X, copy=None):
730         """Perform standardization by centering and scaling
731 
732         Parameters
733         ----------
734         X : array-like, shape [n_samples, n_features]
735             The data used to scale along the features axis.
736         copy : bool, optional (default: None)
737             Copy the input X or not.
738         """
739         check_is_fitted(self, 'scale_')
740 
741         copy = copy if copy is not None else self.copy
742         X = check_array(X, accept_sparse='csr', copy=copy, warn_on_dtype=True,
743                         estimator=self, dtype=FLOAT_DTYPES,
744                         force_all_finite='allow-nan')
745 
746         if sparse.issparse(X):
747             if self.with_mean:
748                 raise ValueError(
749                     "Cannot center sparse matrices: pass `with_mean=False` "
750                     "instead. See docstring for motivation and alternatives.")
751             if self.scale_ is not None:
752                 inplace_column_scale(X, 1 / self.scale_)
753         else:
754             if self.with_mean:
755                 X -= self.mean_
756             if self.with_std:
757                 X /= self.scale_
758         return X
759 
760     def inverse_transform(self, X, copy=None):
761         """Scale back the data to the original representation
762 
763         Parameters
764         ----------
765         X : array-like, shape [n_samples, n_features]
766             The data used to scale along the features axis.
767         copy : bool, optional (default: None)
768             Copy the input X or not.
769 
770         Returns
771         -------
772         X_tr : array-like, shape [n_samples, n_features]
773             Transformed array.
774         """
775         check_is_fitted(self, 'scale_')
776 
777         copy = copy if copy is not None else self.copy
778         if sparse.issparse(X):
779             if self.with_mean:
780                 raise ValueError(
781                     "Cannot uncenter sparse matrices: pass `with_mean=False` "
782                     "instead See docstring for motivation and alternatives.")
783             if not sparse.isspmatrix_csr(X):
784                 X = X.tocsr()
785                 copy = False
786             if copy:
787                 X = X.copy()
788             if self.scale_ is not None:
789                 inplace_column_scale(X, self.scale_)
790         else:
791             X = np.asarray(X)
792             if copy:
793                 X = X.copy()
794             if self.with_std:
795                 X *= self.scale_
796             if self.with_mean:
797                 X += self.mean_
798         return X

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>sklearn/preprocessing/data.py</file>
<class>StandardScaler</class>
<method>partial_fit</method>
<code>
627     def partial_fit(self, X, y=None):
628         """Online computation of mean and std on X for later scaling.
629         All of X is processed as a single batch. This is intended for cases
630         when `fit` is not feasible due to very large number of `n_samples`
631         or because X is read from a continuous stream.
632 
633         The algorithm for incremental mean and std is given in Equation 1.5a,b
634         in Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. "Algorithms
635         for computing the sample variance: Analysis and recommendations."
636         The American Statistician 37.3 (1983): 242-247:
637 
638         Parameters
639         ----------
640         X : {array-like, sparse matrix}, shape [n_samples, n_features]
641             The data used to compute the mean and standard deviation
642             used for later scaling along the features axis.
643 
644         y
645             Ignored
646         """
647         X = check_array(X, accept_sparse=('csr', 'csc'), copy=self.copy,
648                         warn_on_dtype=True, estimator=self, dtype=FLOAT_DTYPES,
649                         force_all_finite='allow-nan')
650 
651         # Even in the case of `with_mean=False`, we update the mean anyway
652         # This is needed for the incremental computation of the var
653         # See incr_mean_variance_axis and _incremental_mean_variance_axis
654 
655         # if n_samples_seen_ is an integer (i.e. no missing values), we need to
656         # transform it to a NumPy array of shape (n_features,) required by
657         # incr_mean_variance_axis and _incremental_variance_axis
658         if (hasattr(self, 'n_samples_seen_') and
659                 isinstance(self.n_samples_seen_, (int, np.integer))):
660             self.n_samples_seen_ = np.repeat(self.n_samples_seen_,
661                                              X.shape[1]).astype(np.int64)
662 
663         if sparse.issparse(X):
664             if self.with_mean:
665                 raise ValueError(
666                     "Cannot center sparse matrices: pass `with_mean=False` "
667                     "instead. See docstring for motivation and alternatives.")
668 
669             sparse_constructor = (sparse.csr_matrix
670                                   if X.format == 'csr' else sparse.csc_matrix)
671             counts_nan = sparse_constructor(
672                         (np.isnan(X.data), X.indices, X.indptr),
673                         shape=X.shape).sum(axis=0).A.ravel()
674 
675             if not hasattr(self, 'n_samples_seen_'):
676                 self.n_samples_seen_ = (X.shape[0] -
677                                         counts_nan).astype(np.int64)
678 
679             if self.with_std:
680                 # First pass
681                 if not hasattr(self, 'scale_'):
682                     self.mean_, self.var_ = mean_variance_axis(X, axis=0)
683                 # Next passes
684                 else:
685                     self.mean_, self.var_, self.n_samples_seen_ = \
686                         incr_mean_variance_axis(X, axis=0,
687                                                 last_mean=self.mean_,
688                                                 last_var=self.var_,
689                                                 last_n=self.n_samples_seen_)
690             else:
691                 self.mean_ = None
692                 self.var_ = None
693                 if hasattr(self, 'scale_'):
694                     self.n_samples_seen_ += X.shape[0] - counts_nan
695         else:
696             if not hasattr(self, 'n_samples_seen_'):
697                 self.n_samples_seen_ = np.zeros(X.shape[1], dtype=np.int64)
698 
699             # First pass
700             if not hasattr(self, 'scale_'):
701                 self.mean_ = .0
702                 if self.with_std:
703                     self.var_ = .0
704                 else:
705                     self.var_ = None
706 
707             if not self.with_mean and not self.with_std:
708                 self.mean_ = None
709                 self.var_ = None
710                 self.n_samples_seen_ += X.shape[0] - np.isnan(X).sum(axis=0)
711             else:
712                 self.mean_, self.var_, self.n_samples_seen_ = \
713                     _incremental_mean_and_var(X, self.mean_, self.var_,
714                                               self.n_samples_seen_)
715 
716         # for backward-compatibility, reduce n_samples_seen_ to an integer
717         # if the number of samples is the same for each feature (i.e. no
718         # missing values)
719         if np.ptp(self.n_samples_seen_) == 0:
720             self.n_samples_seen_ = self.n_samples_seen_[0]
721 
722         if self.with_std:
723             self.scale_ = _handle_zeros_in_scale(np.sqrt(self.var_))
724         else:
725             self.scale_ = None
726 
727         return self

</code><intended_behavior>Similar to the `fit` method, `partial_fit` should also be adjusted to account for `float16` overflow issues by implementing a temporary upcasting strategy for the input data during mean and std computations. This modification ensures that `partial_fit`, which directly computes these statistics, does not cause overflow when dealing with `float16` data. The strategy for handling the data type should be consistent with the proposed changes in the `fit` method, ensuring a unified approach across both methods.</intended_behavior>, <file>sklearn/preprocessing/data.py</file>
<class>StandardScaler</class>
<method>None</method>
<code>
476 class StandardScaler(BaseEstimator, TransformerMixin):
477     """Standardize features by removing the mean and scaling to unit variance
478 
479     The standard score of a sample `x` is calculated as:
480 
481         z = (x - u) / s
482 
483     where `u` is the mean of the training samples or zero if `with_mean=False`,
484     and `s` is the standard deviation of the training samples or one if
485     `with_std=False`.
486 
487     Centering and scaling happen independently on each feature by computing
488     the relevant statistics on the samples in the training set. Mean and
489     standard deviation are then stored to be used on later data using the
490     `transform` method.
491 
492     Standardization of a dataset is a common requirement for many
493     machine learning estimators: they might behave badly if the
494     individual features do not more or less look like standard normally
495     distributed data (e.g. Gaussian with 0 mean and unit variance).
496 
497     For instance many elements used in the objective function of
498     a learning algorithm (such as the RBF kernel of Support Vector
499     Machines or the L1 and L2 regularizers of linear models) assume that
500     all features are centered around 0 and have variance in the same
501     order. If a feature has a variance that is orders of magnitude larger
502     that others, it might dominate the objective function and make the
503     estimator unable to learn from other features correctly as expected.
504 
505     This scaler can also be applied to sparse CSR or CSC matrices by passing
506     `with_mean=False` to avoid breaking the sparsity structure of the data.
507 
508     Read more in the :ref:`User Guide <preprocessing_scaler>`.
509 
510     Parameters
511     ----------
512     copy : boolean, optional, default True
513         If False, try to avoid a copy and do inplace scaling instead.
514         This is not guaranteed to always work inplace; e.g. if the data is
515         not a NumPy array or scipy.sparse CSR matrix, a copy may still be
516         returned.
517 
518     with_mean : boolean, True by default
519         If True, center the data before scaling.
520         This does not work (and will raise an exception) when attempted on
521         sparse matrices, because centering them entails building a dense
522         matrix which in common use cases is likely to be too large to fit in
523         memory.
524 
525     with_std : boolean, True by default
526         If True, scale the data to unit variance (or equivalently,
527         unit standard deviation).
528 
529     Attributes
530     ----------
531     scale_ : ndarray or None, shape (n_features,)
532         Per feature relative scaling of the data. This is calculated using
533         `np.sqrt(var_)`. Equal to ``None`` when ``with_std=False``.
534 
535         .. versionadded:: 0.17
536            *scale_*
537 
538     mean_ : ndarray or None, shape (n_features,)
539         The mean value for each feature in the training set.
540         Equal to ``None`` when ``with_mean=False``.
541 
542     var_ : ndarray or None, shape (n_features,)
543         The variance for each feature in the training set. Used to compute
544         `scale_`. Equal to ``None`` when ``with_std=False``.
545 
546     n_samples_seen_ : int or array, shape (n_features,)
547         The number of samples processed by the estimator for each feature.
548         If there are not missing samples, the ``n_samples_seen`` will be an
549         integer, otherwise it will be an array.
550         Will be reset on new calls to fit, but increments across
551         ``partial_fit`` calls.
552 
553     Examples
554     --------
555     >>> from sklearn.preprocessing import StandardScaler
556     >>> data = [[0, 0], [0, 0], [1, 1], [1, 1]]
557     >>> scaler = StandardScaler()
558     >>> print(scaler.fit(data))
559     StandardScaler(copy=True, with_mean=True, with_std=True)
560     >>> print(scaler.mean_)
561     [0.5 0.5]
562     >>> print(scaler.transform(data))
563     [[-1. -1.]
564      [-1. -1.]
565      [ 1.  1.]
566      [ 1.  1.]]
567     >>> print(scaler.transform([[2, 2]]))
568     [[3. 3.]]
569 
570     See also
571     --------
572     scale: Equivalent function without the estimator API.
573 
574     :class:`sklearn.decomposition.PCA`
575         Further removes the linear correlation across features with 'whiten=True'.
576 
577     Notes
578     -----
579     NaNs are treated as missing values: disregarded in fit, and maintained in
580     transform.
581     
582     We use a biased estimator for the standard deviation, equivalent to
583     `numpy.std(x, ddof=0)`. Note that the choice of `ddof` is unlikely to
584     affect model performance.
585 
586     For a comparison of the different scalers, transformers, and normalizers,
587     see :ref:`examples/preprocessing/plot_all_scaling.py
588     <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.
589     """  # noqa
590 
591     def __init__(self, copy=True, with_mean=True, with_std=True):
592         self.with_mean = with_mean
593         self.with_std = with_std
594         self.copy = copy
595 
596     def _reset(self):
597         """Reset internal data-dependent state of the scaler, if necessary.
598 
599         __init__ parameters are not touched.
600         """
601 
602         # Checking one attribute is enough, becase they are all set together
603         # in partial_fit
604         if hasattr(self, 'scale_'):
605             del self.scale_
606             del self.n_samples_seen_
607             del self.mean_
608             del self.var_
609 
610     def fit(self, X, y=None):
611         """Compute the mean and std to be used for later scaling.
612 
613         Parameters
614         ----------
615         X : {array-like, sparse matrix}, shape [n_samples, n_features]
616             The data used to compute the mean and standard deviation
617             used for later scaling along the features axis.
618 
619         y
620             Ignored
621         """
622 
623         # Reset internal state before fitting
624         self._reset()
625         return self.partial_fit(X, y)
626 
627     def partial_fit(self, X, y=None):
628         """Online computation of mean and std on X for later scaling.
629         All of X is processed as a single batch. This is intended for cases
630         when `fit` is not feasible due to very large number of `n_samples`
631         or because X is read from a continuous stream.
632 
633         The algorithm for incremental mean and std is given in Equation 1.5a,b
634         in Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. "Algorithms
635         for computing the sample variance: Analysis and recommendations."
636         The American Statistician 37.3 (1983): 242-247:
637 
638         Parameters
639         ----------
640         X : {array-like, sparse matrix}, shape [n_samples, n_features]
641             The data used to compute the mean and standard deviation
642             used for later scaling along the features axis.
643 
644         y
645             Ignored
646         """
647         X = check_array(X, accept_sparse=('csr', 'csc'), copy=self.copy,
648                         warn_on_dtype=True, estimator=self, dtype=FLOAT_DTYPES,
649                         force_all_finite='allow-nan')
650 
651         # Even in the case of `with_mean=False`, we update the mean anyway
652         # This is needed for the incremental computation of the var
653         # See incr_mean_variance_axis and _incremental_mean_variance_axis
654 
655         # if n_samples_seen_ is an integer (i.e. no missing values), we need to
656         # transform it to a NumPy array of shape (n_features,) required by
657         # incr_mean_variance_axis and _incremental_variance_axis
658         if (hasattr(self, 'n_samples_seen_') and
659                 isinstance(self.n_samples_seen_, (int, np.integer))):
660             self.n_samples_seen_ = np.repeat(self.n_samples_seen_,
661                                              X.shape[1]).astype(np.int64)
662 
663         if sparse.issparse(X):
664             if self.with_mean:
665                 raise ValueError(
666                     "Cannot center sparse matrices: pass `with_mean=False` "
667                     "instead. See docstring for motivation and alternatives.")
668 
669             sparse_constructor = (sparse.csr_matrix
670                                   if X.format == 'csr' else sparse.csc_matrix)
671             counts_nan = sparse_constructor(
672                         (np.isnan(X.data), X.indices, X.indptr),
673                         shape=X.shape).sum(axis=0).A.ravel()
674 
675             if not hasattr(self, 'n_samples_seen_'):
676                 self.n_samples_seen_ = (X.shape[0] -
677                                         counts_nan).astype(np.int64)
678 
679             if self.with_std:
680                 # First pass
681                 if not hasattr(self, 'scale_'):
682                     self.mean_, self.var_ = mean_variance_axis(X, axis=0)
683                 # Next passes
684                 else:
685                     self.mean_, self.var_, self.n_samples_seen_ = \
686                         incr_mean_variance_axis(X, axis=0,
687                                                 last_mean=self.mean_,
688                                                 last_var=self.var_,
689                                                 last_n=self.n_samples_seen_)
690             else:
691                 self.mean_ = None
692                 self.var_ = None
693                 if hasattr(self, 'scale_'):
694                     self.n_samples_seen_ += X.shape[0] - counts_nan
695         else:
696             if not hasattr(self, 'n_samples_seen_'):
697                 self.n_samples_seen_ = np.zeros(X.shape[1], dtype=np.int64)
698 
699             # First pass
700             if not hasattr(self, 'scale_'):
701                 self.mean_ = .0
702                 if self.with_std:
703                     self.var_ = .0
704                 else:
705                     self.var_ = None
706 
707             if not self.with_mean and not self.with_std:
708                 self.mean_ = None
709                 self.var_ = None
710                 self.n_samples_seen_ += X.shape[0] - np.isnan(X).sum(axis=0)
711             else:
712                 self.mean_, self.var_, self.n_samples_seen_ = \
713                     _incremental_mean_and_var(X, self.mean_, self.var_,
714                                               self.n_samples_seen_)
715 
716         # for backward-compatibility, reduce n_samples_seen_ to an integer
717         # if the number of samples is the same for each feature (i.e. no
718         # missing values)
719         if np.ptp(self.n_samples_seen_) == 0:
720             self.n_samples_seen_ = self.n_samples_seen_[0]
721 
722         if self.with_std:
723             self.scale_ = _handle_zeros_in_scale(np.sqrt(self.var_))
724         else:
725             self.scale_ = None
726 
727         return self
728 
729     def transform(self, X, copy=None):
730         """Perform standardization by centering and scaling
731 
732         Parameters
733         ----------
734         X : array-like, shape [n_samples, n_features]
735             The data used to scale along the features axis.
736         copy : bool, optional (default: None)
737             Copy the input X or not.
738         """
739         check_is_fitted(self, 'scale_')
740 
741         copy = copy if copy is not None else self.copy
742         X = check_array(X, accept_sparse='csr', copy=copy, warn_on_dtype=True,
743                         estimator=self, dtype=FLOAT_DTYPES,
744                         force_all_finite='allow-nan')
745 
746         if sparse.issparse(X):
747             if self.with_mean:
748                 raise ValueError(
749                     "Cannot center sparse matrices: pass `with_mean=False` "
750                     "instead. See docstring for motivation and alternatives.")
751             if self.scale_ is not None:
752                 inplace_column_scale(X, 1 / self.scale_)
753         else:
754             if self.with_mean:
755                 X -= self.mean_
756             if self.with_std:
757                 X /= self.scale_
758         return X
759 
760     def inverse_transform(self, X, copy=None):
761         """Scale back the data to the original representation
762 
763         Parameters
764         ----------
765         X : array-like, shape [n_samples, n_features]
766             The data used to scale along the features axis.
767         copy : bool, optional (default: None)
768             Copy the input X or not.
769 
770         Returns
771         -------
772         X_tr : array-like, shape [n_samples, n_features]
773             Transformed array.
774         """
775         check_is_fitted(self, 'scale_')
776 
777         copy = copy if copy is not None else self.copy
778         if sparse.issparse(X):
779             if self.with_mean:
780                 raise ValueError(
781                     "Cannot uncenter sparse matrices: pass `with_mean=False` "
782                     "instead See docstring for motivation and alternatives.")
783             if not sparse.isspmatrix_csr(X):
784                 X = X.tocsr()
785                 copy = False
786             if copy:
787                 X = X.copy()
788             if self.scale_ is not None:
789                 inplace_column_scale(X, self.scale_)
790         else:
791             X = np.asarray(X)
792             if copy:
793                 X = X.copy()
794             if self.with_std:
795                 X *= self.scale_
796             if self.with_mean:
797                 X += self.mean_
798         return X

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>]
2025-10-15 23:25:03.821 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-15 23:25:03.821 | INFO     | Search-only: skipping patch selection
2025-10-15 23:25:03.932 | INFO     | Task scikit-learn__scikit-learn-13010 completed successfully.
2025-10-15 23:25:03.933 | INFO     | No patch generated. You can try running ACR again.
