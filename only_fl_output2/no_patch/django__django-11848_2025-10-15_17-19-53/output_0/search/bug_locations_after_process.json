[
    {
        "rel_file_path": "django/utils/http.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.1/django/utils/http.py",
        "start": 158,
        "end": 191,
        "class_name": null,
        "method_name": "parse_http_date",
        "code": "158 def parse_http_date(date):\n159     \"\"\"\n160     Parse a date format as specified by HTTP RFC7231 section 7.1.1.1.\n161 \n162     The three formats allowed by the RFC are accepted, even if only the first\n163     one is still in widespread use.\n164 \n165     Return an integer expressed in seconds since the epoch, in UTC.\n166     \"\"\"\n167     # email.utils.parsedate() does the job for RFC1123 dates; unfortunately\n168     # RFC7231 makes it mandatory to support RFC850 dates too. So we roll\n169     # our own RFC-compliant parsing.\n170     for regex in RFC1123_DATE, RFC850_DATE, ASCTIME_DATE:\n171         m = regex.match(date)\n172         if m is not None:\n173             break\n174     else:\n175         raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n176     try:\n177         year = int(m.group('year'))\n178         if year < 100:\n179             if year < 70:\n180                 year += 2000\n181             else:\n182                 year += 1900\n183         month = MONTHS.index(m.group('mon').lower()) + 1\n184         day = int(m.group('day'))\n185         hour = int(m.group('hour'))\n186         min = int(m.group('min'))\n187         sec = int(m.group('sec'))\n188         result = datetime.datetime(year, month, day, hour, min, sec)\n189         return calendar.timegm(result.utctimetuple())\n190     except Exception as exc:\n191         raise ValueError(\"%r is not a valid date\" % date) from exc\n",
        "intended_behavior": "To resolve the issue within the `parse_http_date` method, the logic for handling two-digit years needs to be updated to comply with the guidelines outlined in the RFCs. Specifically, when a two-digit year is encountered, the method should no longer apply a simple rule of adding 2000 for years below 70 and 1900 for years 70 and above. Instead, it should:\n\n- Calculate the full year based on the current date and deduce what century the two digits should belong to, ensuring that if the resulting year is more than 50 years in the future, it is interpreted as being in the past century.\n- Maintain the existing functionality for parsing dates, only modifying the logic for determining the century of two-digit years.\n- This adjustment involves adding a dynamic comparison against the current year (possibly involving getting the current year via `datetime.datetime.now().year` or a similar function) to decide whether to interpret the two-digit year as belonging to the 1900s, 2000s, or even retroactively adjusting for other centuries as we move forward in time."
    }
]