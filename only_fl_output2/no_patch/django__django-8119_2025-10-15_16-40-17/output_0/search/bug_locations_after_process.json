[
    {
        "rel_file_path": "django/db/models/query.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.0/django/db/models/query.py",
        "start": 888,
        "end": 894,
        "class_name": "QuerySet",
        "method_name": "filter",
        "code": "888     def filter(self, *args, **kwargs):\n889         \"\"\"\n890         Return a new QuerySet instance with the args ANDed to the existing\n891         set.\n892         \"\"\"\n893         self._not_support_combined_queries('filter')\n894         return self._filter_or_exclude(False, *args, **kwargs)\n",
        "intended_behavior": "The `filter` method should be enhanced to parse and apply expressions passed as arguments. This involves extending the method's logic to not only handle keyword arguments representing field lookups and simple value comparisons but also to recognize and correctly interpret expressions involving model fields. The method should delegate the handling of these expressions to the underlying `Query` object, ensuring that complex expressions like `F('some_field').lower() == 'anssi'` are translated into the appropriate SQL. The enhancement must preserve the method's ability to handle its current argument types without regression."
    },
    {
        "rel_file_path": "django/db/models/query.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.0/django/db/models/query.py",
        "start": 188,
        "end": 1327,
        "class_name": "QuerySet",
        "method_name": null,
        "code": "188 class QuerySet:\n189     \"\"\"Represent a lazy database lookup for a set of objects.\"\"\"\n190 \n191     def __init__(self, model=None, query=None, using=None, hints=None):\n192         self.model = model\n193         self._db = using\n194         self._hints = hints or {}\n195         self.query = query or sql.Query(self.model)\n196         self._result_cache = None\n197         self._sticky_filter = False\n198         self._for_write = False\n199         self._prefetch_related_lookups = ()\n200         self._prefetch_done = False\n201         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}\n202         self._iterable_class = ModelIterable\n203         self._fields = None\n204 \n205     def as_manager(cls):\n206         # Address the circular dependency between `Queryset` and `Manager`.\n207         from django.db.models.manager import Manager\n208         manager = Manager.from_queryset(cls)()\n209         manager._built_with_as_manager = True\n210         return manager\n211     as_manager.queryset_only = True\n212     as_manager = classmethod(as_manager)\n213 \n214     ########################\n215     # PYTHON MAGIC METHODS #\n216     ########################\n217 \n218     def __deepcopy__(self, memo):\n219         \"\"\"Don't populate the QuerySet's cache.\"\"\"\n220         obj = self.__class__()\n221         for k, v in self.__dict__.items():\n222             if k == '_result_cache':\n223                 obj.__dict__[k] = None\n224             else:\n225                 obj.__dict__[k] = copy.deepcopy(v, memo)\n226         return obj\n227 \n228     def __getstate__(self):\n229         # Force the cache to be fully populated.\n230         self._fetch_all()\n231         return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: get_version()}\n232 \n233     def __setstate__(self, state):\n234         msg = None\n235         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)\n236         if pickled_version:\n237             current_version = get_version()\n238             if current_version != pickled_version:\n239                 msg = (\n240                     \"Pickled queryset instance's Django version %s does not \"\n241                     \"match the current version %s.\" % (pickled_version, current_version)\n242                 )\n243         else:\n244             msg = \"Pickled queryset instance's Django version is not specified.\"\n245 \n246         if msg:\n247             warnings.warn(msg, RuntimeWarning, stacklevel=2)\n248 \n249         self.__dict__.update(state)\n250 \n251     def __repr__(self):\n252         data = list(self[:REPR_OUTPUT_SIZE + 1])\n253         if len(data) > REPR_OUTPUT_SIZE:\n254             data[-1] = \"...(remaining elements truncated)...\"\n255         return '<%s %r>' % (self.__class__.__name__, data)\n256 \n257     def __len__(self):\n258         self._fetch_all()\n259         return len(self._result_cache)\n260 \n261     def __iter__(self):\n262         \"\"\"\n263         The queryset iterator protocol uses three nested iterators in the\n264         default case:\n265             1. sql.compiler.execute_sql()\n266                - Returns 100 rows at time (constants.GET_ITERATOR_CHUNK_SIZE)\n267                  using cursor.fetchmany(). This part is responsible for\n268                  doing some column masking, and returning the rows in chunks.\n269             2. sql.compiler.results_iter()\n270                - Returns one row at time. At this point the rows are still just\n271                  tuples. In some cases the return values are converted to\n272                  Python values at this location.\n273             3. self.iterator()\n274                - Responsible for turning the rows into model objects.\n275         \"\"\"\n276         self._fetch_all()\n277         return iter(self._result_cache)\n278 \n279     def __bool__(self):\n280         self._fetch_all()\n281         return bool(self._result_cache)\n282 \n283     def __getitem__(self, k):\n284         \"\"\"Retrieve an item or slice from the set of results.\"\"\"\n285         if not isinstance(k, (int, slice)):\n286             raise TypeError(\n287                 'QuerySet indices must be integers or slices, not %s.'\n288                 % type(k).__name__\n289             )\n290         assert ((not isinstance(k, slice) and (k >= 0)) or\n291                 (isinstance(k, slice) and (k.start is None or k.start >= 0) and\n292                  (k.stop is None or k.stop >= 0))), \\\n293             \"Negative indexing is not supported.\"\n294 \n295         if self._result_cache is not None:\n296             return self._result_cache[k]\n297 \n298         if isinstance(k, slice):\n299             qs = self._chain()\n300             if k.start is not None:\n301                 start = int(k.start)\n302             else:\n303                 start = None\n304             if k.stop is not None:\n305                 stop = int(k.stop)\n306             else:\n307                 stop = None\n308             qs.query.set_limits(start, stop)\n309             return list(qs)[::k.step] if k.step else qs\n310 \n311         qs = self._chain()\n312         qs.query.set_limits(k, k + 1)\n313         qs._fetch_all()\n314         return qs._result_cache[0]\n315 \n316     def __and__(self, other):\n317         self._merge_sanity_check(other)\n318         if isinstance(other, EmptyQuerySet):\n319             return other\n320         if isinstance(self, EmptyQuerySet):\n321             return self\n322         combined = self._chain()\n323         combined._merge_known_related_objects(other)\n324         combined.query.combine(other.query, sql.AND)\n325         return combined\n326 \n327     def __or__(self, other):\n328         self._merge_sanity_check(other)\n329         if isinstance(self, EmptyQuerySet):\n330             return other\n331         if isinstance(other, EmptyQuerySet):\n332             return self\n333         query = self if self.query.can_filter() else self.model._base_manager.filter(pk__in=self.values('pk'))\n334         combined = query._chain()\n335         combined._merge_known_related_objects(other)\n336         if not other.query.can_filter():\n337             other = other.model._base_manager.filter(pk__in=other.values('pk'))\n338         combined.query.combine(other.query, sql.OR)\n339         return combined\n340 \n341     ####################################\n342     # METHODS THAT DO DATABASE QUERIES #\n343     ####################################\n344 \n345     def _iterator(self, use_chunked_fetch, chunk_size):\n346         yield from self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size)\n347 \n348     def iterator(self, chunk_size=2000):\n349         \"\"\"\n350         An iterator over the results from applying this QuerySet to the\n351         database.\n352         \"\"\"\n353         if chunk_size <= 0:\n354             raise ValueError('Chunk size must be strictly positive.')\n355         use_chunked_fetch = not connections[self.db].settings_dict.get('DISABLE_SERVER_SIDE_CURSORS')\n356         return self._iterator(use_chunked_fetch, chunk_size)\n357 \n358     def aggregate(self, *args, **kwargs):\n359         \"\"\"\n360         Return a dictionary containing the calculations (aggregation)\n361         over the current queryset.\n362 \n363         If args is present the expression is passed as a kwarg using\n364         the Aggregate object's default alias.\n365         \"\"\"\n366         if self.query.distinct_fields:\n367             raise NotImplementedError(\"aggregate() + distinct(fields) not implemented.\")\n368         self._validate_values_are_expressions((*args, *kwargs.values()), method_name='aggregate')\n369         for arg in args:\n370             # The default_alias property raises TypeError if default_alias\n371             # can't be set automatically or AttributeError if it isn't an\n372             # attribute.\n373             try:\n374                 arg.default_alias\n375             except (AttributeError, TypeError):\n376                 raise TypeError(\"Complex aggregates require an alias\")\n377             kwargs[arg.default_alias] = arg\n378 \n379         query = self.query.chain()\n380         for (alias, aggregate_expr) in kwargs.items():\n381             query.add_annotation(aggregate_expr, alias, is_summary=True)\n382             if not query.annotations[alias].contains_aggregate:\n383                 raise TypeError(\"%s is not an aggregate expression\" % alias)\n384         return query.get_aggregation(self.db, kwargs)\n385 \n386     def count(self):\n387         \"\"\"\n388         Perform a SELECT COUNT() and return the number of records as an\n389         integer.\n390 \n391         If the QuerySet is already fully cached, return the length of the\n392         cached results set to avoid multiple SELECT COUNT(*) calls.\n393         \"\"\"\n394         if self._result_cache is not None:\n395             return len(self._result_cache)\n396 \n397         return self.query.get_count(using=self.db)\n398 \n399     def get(self, *args, **kwargs):\n400         \"\"\"\n401         Perform the query and return a single object matching the given\n402         keyword arguments.\n403         \"\"\"\n404         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)\n405         if self.query.can_filter() and not self.query.distinct_fields:\n406             clone = clone.order_by()\n407         limit = None\n408         if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:\n409             limit = MAX_GET_RESULTS\n410             clone.query.set_limits(high=limit)\n411         num = len(clone)\n412         if num == 1:\n413             return clone._result_cache[0]\n414         if not num:\n415             raise self.model.DoesNotExist(\n416                 \"%s matching query does not exist.\" %\n417                 self.model._meta.object_name\n418             )\n419         raise self.model.MultipleObjectsReturned(\n420             'get() returned more than one %s -- it returned %s!' % (\n421                 self.model._meta.object_name,\n422                 num if not limit or num < limit else 'more than %s' % (limit - 1),\n423             )\n424         )\n425 \n426     def create(self, **kwargs):\n427         \"\"\"\n428         Create a new object with the given kwargs, saving it to the database\n429         and returning the created object.\n430         \"\"\"\n431         obj = self.model(**kwargs)\n432         self._for_write = True\n433         obj.save(force_insert=True, using=self.db)\n434         return obj\n435 \n436     def _populate_pk_values(self, objs):\n437         for obj in objs:\n438             if obj.pk is None:\n439                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)\n440 \n441     def bulk_create(self, objs, batch_size=None, ignore_conflicts=False):\n442         \"\"\"\n443         Insert each of the instances into the database. Do *not* call\n444         save() on each of the instances, do not send any pre/post_save\n445         signals, and do not set the primary key attribute if it is an\n446         autoincrement field (except if features.can_return_rows_from_bulk_insert=True).\n447         Multi-table models are not supported.\n448         \"\"\"\n449         # When you bulk insert you don't get the primary keys back (if it's an\n450         # autoincrement, except if can_return_rows_from_bulk_insert=True), so\n451         # you can't insert into the child tables which references this. There\n452         # are two workarounds:\n453         # 1) This could be implemented if you didn't have an autoincrement pk\n454         # 2) You could do it by doing O(n) normal inserts into the parent\n455         #    tables to get the primary keys back and then doing a single bulk\n456         #    insert into the childmost table.\n457         # We currently set the primary keys on the objects when using\n458         # PostgreSQL via the RETURNING ID clause. It should be possible for\n459         # Oracle as well, but the semantics for extracting the primary keys is\n460         # trickier so it's not done yet.\n461         assert batch_size is None or batch_size > 0\n462         # Check that the parents share the same concrete model with the our\n463         # model to detect the inheritance pattern ConcreteGrandParent ->\n464         # MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy\n465         # would not identify that case as involving multiple tables.\n466         for parent in self.model._meta.get_parent_list():\n467             if parent._meta.concrete_model is not self.model._meta.concrete_model:\n468                 raise ValueError(\"Can't bulk create a multi-table inherited model\")\n469         if not objs:\n470             return objs\n471         self._for_write = True\n472         connection = connections[self.db]\n473         fields = self.model._meta.concrete_fields\n474         objs = list(objs)\n475         self._populate_pk_values(objs)\n476         with transaction.atomic(using=self.db, savepoint=False):\n477             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)\n478             if objs_with_pk:\n479                 self._batched_insert(objs_with_pk, fields, batch_size, ignore_conflicts=ignore_conflicts)\n480                 for obj_with_pk in objs_with_pk:\n481                     obj_with_pk._state.adding = False\n482                     obj_with_pk._state.db = self.db\n483             if objs_without_pk:\n484                 fields = [f for f in fields if not isinstance(f, AutoField)]\n485                 ids = self._batched_insert(objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts)\n486                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:\n487                     assert len(ids) == len(objs_without_pk)\n488                 for obj_without_pk, pk in zip(objs_without_pk, ids):\n489                     obj_without_pk.pk = pk\n490                     obj_without_pk._state.adding = False\n491                     obj_without_pk._state.db = self.db\n492 \n493         return objs\n494 \n495     def bulk_update(self, objs, fields, batch_size=None):\n496         \"\"\"\n497         Update the given fields in each of the given objects in the database.\n498         \"\"\"\n499         if batch_size is not None and batch_size < 0:\n500             raise ValueError('Batch size must be a positive integer.')\n501         if not fields:\n502             raise ValueError('Field names must be given to bulk_update().')\n503         objs = tuple(objs)\n504         if any(obj.pk is None for obj in objs):\n505             raise ValueError('All bulk_update() objects must have a primary key set.')\n506         fields = [self.model._meta.get_field(name) for name in fields]\n507         if any(not f.concrete or f.many_to_many for f in fields):\n508             raise ValueError('bulk_update() can only be used with concrete fields.')\n509         if any(f.primary_key for f in fields):\n510             raise ValueError('bulk_update() cannot be used with primary key fields.')\n511         if not objs:\n512             return\n513         # PK is used twice in the resulting update query, once in the filter\n514         # and once in the WHEN. Each field will also have one CAST.\n515         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)\n516         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size\n517         requires_casting = connections[self.db].features.requires_casted_case_in_updates\n518         batches = (objs[i:i + batch_size] for i in range(0, len(objs), batch_size))\n519         updates = []\n520         for batch_objs in batches:\n521             update_kwargs = {}\n522             for field in fields:\n523                 when_statements = []\n524                 for obj in batch_objs:\n525                     attr = getattr(obj, field.attname)\n526                     if not isinstance(attr, Expression):\n527                         attr = Value(attr, output_field=field)\n528                     when_statements.append(When(pk=obj.pk, then=attr))\n529                 case_statement = Case(*when_statements, output_field=field)\n530                 if requires_casting:\n531                     case_statement = Cast(case_statement, output_field=field)\n532                 update_kwargs[field.attname] = case_statement\n533             updates.append(([obj.pk for obj in batch_objs], update_kwargs))\n534         with transaction.atomic(using=self.db, savepoint=False):\n535             for pks, update_kwargs in updates:\n536                 self.filter(pk__in=pks).update(**update_kwargs)\n537     bulk_update.alters_data = True\n538 \n539     def get_or_create(self, defaults=None, **kwargs):\n540         \"\"\"\n541         Look up an object with the given kwargs, creating one if necessary.\n542         Return a tuple of (object, created), where created is a boolean\n543         specifying whether an object was created.\n544         \"\"\"\n545         # The get() needs to be targeted at the write database in order\n546         # to avoid potential transaction consistency problems.\n547         self._for_write = True\n548         try:\n549             return self.get(**kwargs), False\n550         except self.model.DoesNotExist:\n551             params = self._extract_model_params(defaults, **kwargs)\n552             return self._create_object_from_params(kwargs, params)\n553 \n554     def update_or_create(self, defaults=None, **kwargs):\n555         \"\"\"\n556         Look up an object with the given kwargs, updating one with defaults\n557         if it exists, otherwise create a new one.\n558         Return a tuple (object, created), where created is a boolean\n559         specifying whether an object was created.\n560         \"\"\"\n561         defaults = defaults or {}\n562         self._for_write = True\n563         with transaction.atomic(using=self.db):\n564             try:\n565                 obj = self.select_for_update().get(**kwargs)\n566             except self.model.DoesNotExist:\n567                 params = self._extract_model_params(defaults, **kwargs)\n568                 # Lock the row so that a concurrent update is blocked until\n569                 # after update_or_create() has performed its save.\n570                 obj, created = self._create_object_from_params(kwargs, params, lock=True)\n571                 if created:\n572                     return obj, created\n573             for k, v in defaults.items():\n574                 setattr(obj, k, v() if callable(v) else v)\n575             obj.save(using=self.db)\n576         return obj, False\n577 \n578     def _create_object_from_params(self, lookup, params, lock=False):\n579         \"\"\"\n580         Try to create an object using passed params. Used by get_or_create()\n581         and update_or_create().\n582         \"\"\"\n583         try:\n584             with transaction.atomic(using=self.db):\n585                 params = {k: v() if callable(v) else v for k, v in params.items()}\n586                 obj = self.create(**params)\n587             return obj, True\n588         except IntegrityError as e:\n589             try:\n590                 qs = self.select_for_update() if lock else self\n591                 return qs.get(**lookup), False\n592             except self.model.DoesNotExist:\n593                 pass\n594             raise e\n595 \n596     def _extract_model_params(self, defaults, **kwargs):\n597         \"\"\"\n598         Prepare `params` for creating a model instance based on the given\n599         kwargs; for use by get_or_create() and update_or_create().\n600         \"\"\"\n601         defaults = defaults or {}\n602         params = {k: v for k, v in kwargs.items() if LOOKUP_SEP not in k}\n603         params.update(defaults)\n604         property_names = self.model._meta._property_names\n605         invalid_params = []\n606         for param in params:\n607             try:\n608                 self.model._meta.get_field(param)\n609             except exceptions.FieldDoesNotExist:\n610                 # It's okay to use a model's property if it has a setter.\n611                 if not (param in property_names and getattr(self.model, param).fset):\n612                     invalid_params.append(param)\n613         if invalid_params:\n614             raise exceptions.FieldError(\n615                 \"Invalid field name(s) for model %s: '%s'.\" % (\n616                     self.model._meta.object_name,\n617                     \"', '\".join(sorted(invalid_params)),\n618                 ))\n619         return params\n620 \n621     def _earliest(self, *fields):\n622         \"\"\"\n623         Return the earliest object according to fields (if given) or by the\n624         model's Meta.get_latest_by.\n625         \"\"\"\n626         if fields:\n627             order_by = fields\n628         else:\n629             order_by = getattr(self.model._meta, 'get_latest_by')\n630             if order_by and not isinstance(order_by, (tuple, list)):\n631                 order_by = (order_by,)\n632         if order_by is None:\n633             raise ValueError(\n634                 \"earliest() and latest() require either fields as positional \"\n635                 \"arguments or 'get_latest_by' in the model's Meta.\"\n636             )\n637 \n638         assert not self.query.is_sliced, \\\n639             \"Cannot change a query once a slice has been taken.\"\n640         obj = self._chain()\n641         obj.query.set_limits(high=1)\n642         obj.query.clear_ordering(force_empty=True)\n643         obj.query.add_ordering(*order_by)\n644         return obj.get()\n645 \n646     def earliest(self, *fields):\n647         return self._earliest(*fields)\n648 \n649     def latest(self, *fields):\n650         return self.reverse()._earliest(*fields)\n651 \n652     def first(self):\n653         \"\"\"Return the first object of a query or None if no match is found.\"\"\"\n654         for obj in (self if self.ordered else self.order_by('pk'))[:1]:\n655             return obj\n656 \n657     def last(self):\n658         \"\"\"Return the last object of a query or None if no match is found.\"\"\"\n659         for obj in (self.reverse() if self.ordered else self.order_by('-pk'))[:1]:\n660             return obj\n661 \n662     def in_bulk(self, id_list=None, *, field_name='pk'):\n663         \"\"\"\n664         Return a dictionary mapping each of the given IDs to the object with\n665         that ID. If `id_list` isn't provided, evaluate the entire QuerySet.\n666         \"\"\"\n667         assert not self.query.is_sliced, \\\n668             \"Cannot use 'limit' or 'offset' with in_bulk\"\n669         if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:\n670             raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n671         if id_list is not None:\n672             if not id_list:\n673                 return {}\n674             filter_key = '{}__in'.format(field_name)\n675             batch_size = connections[self.db].features.max_query_params\n676             id_list = tuple(id_list)\n677             # If the database has a limit on the number of query parameters\n678             # (e.g. SQLite), retrieve objects in batches if necessary.\n679             if batch_size and batch_size < len(id_list):\n680                 qs = ()\n681                 for offset in range(0, len(id_list), batch_size):\n682                     batch = id_list[offset:offset + batch_size]\n683                     qs += tuple(self.filter(**{filter_key: batch}).order_by())\n684             else:\n685                 qs = self.filter(**{filter_key: id_list}).order_by()\n686         else:\n687             qs = self._chain()\n688         return {getattr(obj, field_name): obj for obj in qs}\n689 \n690     def delete(self):\n691         \"\"\"Delete the records in the current QuerySet.\"\"\"\n692         assert not self.query.is_sliced, \\\n693             \"Cannot use 'limit' or 'offset' with delete.\"\n694 \n695         if self._fields is not None:\n696             raise TypeError(\"Cannot call delete() after .values() or .values_list()\")\n697 \n698         del_query = self._chain()\n699 \n700         # The delete is actually 2 queries - one to find related objects,\n701         # and one to delete. Make sure that the discovery of related\n702         # objects is performed on the same database as the deletion.\n703         del_query._for_write = True\n704 \n705         # Disable non-supported fields.\n706         del_query.query.select_for_update = False\n707         del_query.query.select_related = False\n708         del_query.query.clear_ordering(force_empty=True)\n709 \n710         collector = Collector(using=del_query.db)\n711         collector.collect(del_query)\n712         deleted, _rows_count = collector.delete()\n713 \n714         # Clear the result cache, in case this QuerySet gets reused.\n715         self._result_cache = None\n716         return deleted, _rows_count\n717 \n718     delete.alters_data = True\n719     delete.queryset_only = True\n720 \n721     def _raw_delete(self, using):\n722         \"\"\"\n723         Delete objects found from the given queryset in single direct SQL\n724         query. No signals are sent and there is no protection for cascades.\n725         \"\"\"\n726         return sql.DeleteQuery(self.model).delete_qs(self, using)\n727     _raw_delete.alters_data = True\n728 \n729     def update(self, **kwargs):\n730         \"\"\"\n731         Update all elements in the current QuerySet, setting all the given\n732         fields to the appropriate values.\n733         \"\"\"\n734         assert not self.query.is_sliced, \\\n735             \"Cannot update a query once a slice has been taken.\"\n736         self._for_write = True\n737         query = self.query.chain(sql.UpdateQuery)\n738         query.add_update_values(kwargs)\n739         # Clear any annotations so that they won't be present in subqueries.\n740         query.annotations = {}\n741         with transaction.mark_for_rollback_on_error(using=self.db):\n742             rows = query.get_compiler(self.db).execute_sql(CURSOR)\n743         self._result_cache = None\n744         return rows\n745     update.alters_data = True\n746 \n747     def _update(self, values):\n748         \"\"\"\n749         A version of update() that accepts field objects instead of field names.\n750         Used primarily for model saving and not intended for use by general\n751         code (it requires too much poking around at model internals to be\n752         useful at that level).\n753         \"\"\"\n754         assert not self.query.is_sliced, \\\n755             \"Cannot update a query once a slice has been taken.\"\n756         query = self.query.chain(sql.UpdateQuery)\n757         query.add_update_fields(values)\n758         # Clear any annotations so that they won't be present in subqueries.\n759         query.annotations = {}\n760         self._result_cache = None\n761         return query.get_compiler(self.db).execute_sql(CURSOR)\n762     _update.alters_data = True\n763     _update.queryset_only = False\n764 \n765     def exists(self):\n766         if self._result_cache is None:\n767             return self.query.has_results(using=self.db)\n768         return bool(self._result_cache)\n769 \n770     def _prefetch_related_objects(self):\n771         # This method can only be called once the result cache has been filled.\n772         prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups)\n773         self._prefetch_done = True\n774 \n775     def explain(self, *, format=None, **options):\n776         return self.query.explain(using=self.db, format=format, **options)\n777 \n778     ##################################################\n779     # PUBLIC METHODS THAT RETURN A QUERYSET SUBCLASS #\n780     ##################################################\n781 \n782     def raw(self, raw_query, params=None, translations=None, using=None):\n783         if using is None:\n784             using = self.db\n785         qs = RawQuerySet(raw_query, model=self.model, params=params, translations=translations, using=using)\n786         qs._prefetch_related_lookups = self._prefetch_related_lookups[:]\n787         return qs\n788 \n789     def _values(self, *fields, **expressions):\n790         clone = self._chain()\n791         if expressions:\n792             clone = clone.annotate(**expressions)\n793         clone._fields = fields\n794         clone.query.set_values(fields)\n795         return clone\n796 \n797     def values(self, *fields, **expressions):\n798         fields += tuple(expressions)\n799         clone = self._values(*fields, **expressions)\n800         clone._iterable_class = ValuesIterable\n801         return clone\n802 \n803     def values_list(self, *fields, flat=False, named=False):\n804         if flat and named:\n805             raise TypeError(\"'flat' and 'named' can't be used together.\")\n806         if flat and len(fields) > 1:\n807             raise TypeError(\"'flat' is not valid when values_list is called with more than one field.\")\n808 \n809         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}\n810         _fields = []\n811         expressions = {}\n812         counter = 1\n813         for field in fields:\n814             if hasattr(field, 'resolve_expression'):\n815                 field_id_prefix = getattr(field, 'default_alias', field.__class__.__name__.lower())\n816                 while True:\n817                     field_id = field_id_prefix + str(counter)\n818                     counter += 1\n819                     if field_id not in field_names:\n820                         break\n821                 expressions[field_id] = field\n822                 _fields.append(field_id)\n823             else:\n824                 _fields.append(field)\n825 \n826         clone = self._values(*_fields, **expressions)\n827         clone._iterable_class = (\n828             NamedValuesListIterable if named\n829             else FlatValuesListIterable if flat\n830             else ValuesListIterable\n831         )\n832         return clone\n833 \n834     def dates(self, field_name, kind, order='ASC'):\n835         \"\"\"\n836         Return a list of date objects representing all available dates for\n837         the given field_name, scoped to 'kind'.\n838         \"\"\"\n839         assert kind in ('year', 'month', 'week', 'day'), \\\n840             \"'kind' must be one of 'year', 'month', 'week', or 'day'.\"\n841         assert order in ('ASC', 'DESC'), \\\n842             \"'order' must be either 'ASC' or 'DESC'.\"\n843         return self.annotate(\n844             datefield=Trunc(field_name, kind, output_field=DateField()),\n845             plain_field=F(field_name)\n846         ).values_list(\n847             'datefield', flat=True\n848         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datefield')\n849 \n850     def datetimes(self, field_name, kind, order='ASC', tzinfo=None):\n851         \"\"\"\n852         Return a list of datetime objects representing all available\n853         datetimes for the given field_name, scoped to 'kind'.\n854         \"\"\"\n855         assert kind in ('year', 'month', 'week', 'day', 'hour', 'minute', 'second'), \\\n856             \"'kind' must be one of 'year', 'month', 'week', 'day', 'hour', 'minute', or 'second'.\"\n857         assert order in ('ASC', 'DESC'), \\\n858             \"'order' must be either 'ASC' or 'DESC'.\"\n859         if settings.USE_TZ:\n860             if tzinfo is None:\n861                 tzinfo = timezone.get_current_timezone()\n862         else:\n863             tzinfo = None\n864         return self.annotate(\n865             datetimefield=Trunc(field_name, kind, output_field=DateTimeField(), tzinfo=tzinfo),\n866             plain_field=F(field_name)\n867         ).values_list(\n868             'datetimefield', flat=True\n869         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datetimefield')\n870 \n871     def none(self):\n872         \"\"\"Return an empty QuerySet.\"\"\"\n873         clone = self._chain()\n874         clone.query.set_empty()\n875         return clone\n876 \n877     ##################################################################\n878     # PUBLIC METHODS THAT ALTER ATTRIBUTES AND RETURN A NEW QUERYSET #\n879     ##################################################################\n880 \n881     def all(self):\n882         \"\"\"\n883         Return a new QuerySet that is a copy of the current one. This allows a\n884         QuerySet to proxy for a model manager in some cases.\n885         \"\"\"\n886         return self._chain()\n887 \n888     def filter(self, *args, **kwargs):\n889         \"\"\"\n890         Return a new QuerySet instance with the args ANDed to the existing\n891         set.\n892         \"\"\"\n893         self._not_support_combined_queries('filter')\n894         return self._filter_or_exclude(False, *args, **kwargs)\n895 \n896     def exclude(self, *args, **kwargs):\n897         \"\"\"\n898         Return a new QuerySet instance with NOT (args) ANDed to the existing\n899         set.\n900         \"\"\"\n901         self._not_support_combined_queries('exclude')\n902         return self._filter_or_exclude(True, *args, **kwargs)\n903 \n904     def _filter_or_exclude(self, negate, *args, **kwargs):\n905         if args or kwargs:\n906             assert not self.query.is_sliced, \\\n907                 \"Cannot filter a query once a slice has been taken.\"\n908 \n909         clone = self._chain()\n910         if negate:\n911             clone.query.add_q(~Q(*args, **kwargs))\n912         else:\n913             clone.query.add_q(Q(*args, **kwargs))\n914         return clone\n915 \n916     def complex_filter(self, filter_obj):\n917         \"\"\"\n918         Return a new QuerySet instance with filter_obj added to the filters.\n919 \n920         filter_obj can be a Q object or a dictionary of keyword lookup\n921         arguments.\n922 \n923         This exists to support framework features such as 'limit_choices_to',\n924         and usually it will be more natural to use other methods.\n925         \"\"\"\n926         if isinstance(filter_obj, Q):\n927             clone = self._chain()\n928             clone.query.add_q(filter_obj)\n929             return clone\n930         else:\n931             return self._filter_or_exclude(None, **filter_obj)\n932 \n933     def _combinator_query(self, combinator, *other_qs, all=False):\n934         # Clone the query to inherit the select list and everything\n935         clone = self._chain()\n936         # Clear limits and ordering so they can be reapplied\n937         clone.query.clear_ordering(True)\n938         clone.query.clear_limits()\n939         clone.query.combined_queries = (self.query,) + tuple(qs.query for qs in other_qs)\n940         clone.query.combinator = combinator\n941         clone.query.combinator_all = all\n942         return clone\n943 \n944     def union(self, *other_qs, all=False):\n945         # If the query is an EmptyQuerySet, combine all nonempty querysets.\n946         if isinstance(self, EmptyQuerySet):\n947             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n948             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n949         return self._combinator_query('union', *other_qs, all=all)\n950 \n951     def intersection(self, *other_qs):\n952         # If any query is an EmptyQuerySet, return it.\n953         if isinstance(self, EmptyQuerySet):\n954             return self\n955         for other in other_qs:\n956             if isinstance(other, EmptyQuerySet):\n957                 return other\n958         return self._combinator_query('intersection', *other_qs)\n959 \n960     def difference(self, *other_qs):\n961         # If the query is an EmptyQuerySet, return it.\n962         if isinstance(self, EmptyQuerySet):\n963             return self\n964         return self._combinator_query('difference', *other_qs)\n965 \n966     def select_for_update(self, nowait=False, skip_locked=False, of=()):\n967         \"\"\"\n968         Return a new QuerySet instance that will select objects with a\n969         FOR UPDATE lock.\n970         \"\"\"\n971         if nowait and skip_locked:\n972             raise ValueError('The nowait option cannot be used with skip_locked.')\n973         obj = self._chain()\n974         obj._for_write = True\n975         obj.query.select_for_update = True\n976         obj.query.select_for_update_nowait = nowait\n977         obj.query.select_for_update_skip_locked = skip_locked\n978         obj.query.select_for_update_of = of\n979         return obj\n980 \n981     def select_related(self, *fields):\n982         \"\"\"\n983         Return a new QuerySet instance that will select related objects.\n984 \n985         If fields are specified, they must be ForeignKey fields and only those\n986         related objects are included in the selection.\n987 \n988         If select_related(None) is called, clear the list.\n989         \"\"\"\n990         self._not_support_combined_queries('select_related')\n991         if self._fields is not None:\n992             raise TypeError(\"Cannot call select_related() after .values() or .values_list()\")\n993 \n994         obj = self._chain()\n995         if fields == (None,):\n996             obj.query.select_related = False\n997         elif fields:\n998             obj.query.add_select_related(fields)\n999         else:\n1000             obj.query.select_related = True\n1001         return obj\n1002 \n1003     def prefetch_related(self, *lookups):\n1004         \"\"\"\n1005         Return a new QuerySet instance that will prefetch the specified\n1006         Many-To-One and Many-To-Many related objects when the QuerySet is\n1007         evaluated.\n1008 \n1009         When prefetch_related() is called more than once, append to the list of\n1010         prefetch lookups. If prefetch_related(None) is called, clear the list.\n1011         \"\"\"\n1012         self._not_support_combined_queries('prefetch_related')\n1013         clone = self._chain()\n1014         if lookups == (None,):\n1015             clone._prefetch_related_lookups = ()\n1016         else:\n1017             for lookup in lookups:\n1018                 if isinstance(lookup, Prefetch):\n1019                     lookup = lookup.prefetch_to\n1020                 lookup = lookup.split(LOOKUP_SEP, 1)[0]\n1021                 if lookup in self.query._filtered_relations:\n1022                     raise ValueError('prefetch_related() is not supported with FilteredRelation.')\n1023             clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups\n1024         return clone\n1025 \n1026     def annotate(self, *args, **kwargs):\n1027         \"\"\"\n1028         Return a query set in which the returned objects have been annotated\n1029         with extra data or aggregations.\n1030         \"\"\"\n1031         self._not_support_combined_queries('annotate')\n1032         self._validate_values_are_expressions(args + tuple(kwargs.values()), method_name='annotate')\n1033         annotations = {}\n1034         for arg in args:\n1035             # The default_alias property may raise a TypeError.\n1036             try:\n1037                 if arg.default_alias in kwargs:\n1038                     raise ValueError(\"The named annotation '%s' conflicts with the \"\n1039                                      \"default name for another annotation.\"\n1040                                      % arg.default_alias)\n1041             except TypeError:\n1042                 raise TypeError(\"Complex annotations require an alias\")\n1043             annotations[arg.default_alias] = arg\n1044         annotations.update(kwargs)\n1045 \n1046         clone = self._chain()\n1047         names = self._fields\n1048         if names is None:\n1049             names = set(chain.from_iterable(\n1050                 (field.name, field.attname) if hasattr(field, 'attname') else (field.name,)\n1051                 for field in self.model._meta.get_fields()\n1052             ))\n1053 \n1054         for alias, annotation in annotations.items():\n1055             if alias in names:\n1056                 raise ValueError(\"The annotation '%s' conflicts with a field on \"\n1057                                  \"the model.\" % alias)\n1058             if isinstance(annotation, FilteredRelation):\n1059                 clone.query.add_filtered_relation(annotation, alias)\n1060             else:\n1061                 clone.query.add_annotation(annotation, alias, is_summary=False)\n1062 \n1063         for alias, annotation in clone.query.annotations.items():\n1064             if alias in annotations and annotation.contains_aggregate:\n1065                 if clone._fields is None:\n1066                     clone.query.group_by = True\n1067                 else:\n1068                     clone.query.set_group_by()\n1069                 break\n1070 \n1071         return clone\n1072 \n1073     def order_by(self, *field_names):\n1074         \"\"\"Return a new QuerySet instance with the ordering changed.\"\"\"\n1075         assert not self.query.is_sliced, \\\n1076             \"Cannot reorder a query once a slice has been taken.\"\n1077         obj = self._chain()\n1078         obj.query.clear_ordering(force_empty=False)\n1079         obj.query.add_ordering(*field_names)\n1080         return obj\n1081 \n1082     def distinct(self, *field_names):\n1083         \"\"\"\n1084         Return a new QuerySet instance that will select only distinct results.\n1085         \"\"\"\n1086         assert not self.query.is_sliced, \\\n1087             \"Cannot create distinct fields once a slice has been taken.\"\n1088         obj = self._chain()\n1089         obj.query.add_distinct_fields(*field_names)\n1090         return obj\n1091 \n1092     def extra(self, select=None, where=None, params=None, tables=None,\n1093               order_by=None, select_params=None):\n1094         \"\"\"Add extra SQL fragments to the query.\"\"\"\n1095         self._not_support_combined_queries('extra')\n1096         assert not self.query.is_sliced, \\\n1097             \"Cannot change a query once a slice has been taken\"\n1098         clone = self._chain()\n1099         clone.query.add_extra(select, select_params, where, params, tables, order_by)\n1100         return clone\n1101 \n1102     def reverse(self):\n1103         \"\"\"Reverse the ordering of the QuerySet.\"\"\"\n1104         if self.query.is_sliced:\n1105             raise TypeError('Cannot reverse a query once a slice has been taken.')\n1106         clone = self._chain()\n1107         clone.query.standard_ordering = not clone.query.standard_ordering\n1108         return clone\n1109 \n1110     def defer(self, *fields):\n1111         \"\"\"\n1112         Defer the loading of data for certain fields until they are accessed.\n1113         Add the set of deferred fields to any existing set of deferred fields.\n1114         The only exception to this is if None is passed in as the only\n1115         parameter, in which case removal all deferrals.\n1116         \"\"\"\n1117         self._not_support_combined_queries('defer')\n1118         if self._fields is not None:\n1119             raise TypeError(\"Cannot call defer() after .values() or .values_list()\")\n1120         clone = self._chain()\n1121         if fields == (None,):\n1122             clone.query.clear_deferred_loading()\n1123         else:\n1124             clone.query.add_deferred_loading(fields)\n1125         return clone\n1126 \n1127     def only(self, *fields):\n1128         \"\"\"\n1129         Essentially, the opposite of defer(). Only the fields passed into this\n1130         method and that are not already specified as deferred are loaded\n1131         immediately when the queryset is evaluated.\n1132         \"\"\"\n1133         self._not_support_combined_queries('only')\n1134         if self._fields is not None:\n1135             raise TypeError(\"Cannot call only() after .values() or .values_list()\")\n1136         if fields == (None,):\n1137             # Can only pass None to defer(), not only(), as the rest option.\n1138             # That won't stop people trying to do this, so let's be explicit.\n1139             raise TypeError(\"Cannot pass None as an argument to only().\")\n1140         for field in fields:\n1141             field = field.split(LOOKUP_SEP, 1)[0]\n1142             if field in self.query._filtered_relations:\n1143                 raise ValueError('only() is not supported with FilteredRelation.')\n1144         clone = self._chain()\n1145         clone.query.add_immediate_loading(fields)\n1146         return clone\n1147 \n1148     def using(self, alias):\n1149         \"\"\"Select which database this QuerySet should execute against.\"\"\"\n1150         clone = self._chain()\n1151         clone._db = alias\n1152         return clone\n1153 \n1154     ###################################\n1155     # PUBLIC INTROSPECTION ATTRIBUTES #\n1156     ###################################\n1157 \n1158     @property\n1159     def ordered(self):\n1160         \"\"\"\n1161         Return True if the QuerySet is ordered -- i.e. has an order_by()\n1162         clause or a default ordering on the model (or is empty).\n1163         \"\"\"\n1164         if isinstance(self, EmptyQuerySet):\n1165             return True\n1166         if self.query.extra_order_by or self.query.order_by:\n1167             return True\n1168         elif self.query.default_ordering and self.query.get_meta().ordering:\n1169             return True\n1170         else:\n1171             return False\n1172 \n1173     @property\n1174     def db(self):\n1175         \"\"\"Return the database used if this query is executed now.\"\"\"\n1176         if self._for_write:\n1177             return self._db or router.db_for_write(self.model, **self._hints)\n1178         return self._db or router.db_for_read(self.model, **self._hints)\n1179 \n1180     ###################\n1181     # PRIVATE METHODS #\n1182     ###################\n1183 \n1184     def _insert(self, objs, fields, return_id=False, raw=False, using=None, ignore_conflicts=False):\n1185         \"\"\"\n1186         Insert a new record for the given model. This provides an interface to\n1187         the InsertQuery class and is how Model.save() is implemented.\n1188         \"\"\"\n1189         self._for_write = True\n1190         if using is None:\n1191             using = self.db\n1192         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)\n1193         query.insert_values(fields, objs, raw=raw)\n1194         return query.get_compiler(using=using).execute_sql(return_id)\n1195     _insert.alters_data = True\n1196     _insert.queryset_only = False\n1197 \n1198     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):\n1199         \"\"\"\n1200         Helper method for bulk_create() to insert objs one batch at a time.\n1201         \"\"\"\n1202         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:\n1203             raise NotSupportedError('This database backend does not support ignoring conflicts.')\n1204         ops = connections[self.db].ops\n1205         batch_size = (batch_size or max(ops.bulk_batch_size(fields, objs), 1))\n1206         inserted_ids = []\n1207         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert\n1208         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:\n1209             if bulk_return and not ignore_conflicts:\n1210                 inserted_id = self._insert(\n1211                     item, fields=fields, using=self.db, return_id=True,\n1212                     ignore_conflicts=ignore_conflicts,\n1213                 )\n1214                 if isinstance(inserted_id, list):\n1215                     inserted_ids.extend(inserted_id)\n1216                 else:\n1217                     inserted_ids.append(inserted_id)\n1218             else:\n1219                 self._insert(item, fields=fields, using=self.db, ignore_conflicts=ignore_conflicts)\n1220         return inserted_ids\n1221 \n1222     def _chain(self, **kwargs):\n1223         \"\"\"\n1224         Return a copy of the current QuerySet that's ready for another\n1225         operation.\n1226         \"\"\"\n1227         obj = self._clone()\n1228         if obj._sticky_filter:\n1229             obj.query.filter_is_sticky = True\n1230             obj._sticky_filter = False\n1231         obj.__dict__.update(kwargs)\n1232         return obj\n1233 \n1234     def _clone(self):\n1235         \"\"\"\n1236         Return a copy of the current QuerySet. A lightweight alternative\n1237         to deepcopy().\n1238         \"\"\"\n1239         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)\n1240         c._sticky_filter = self._sticky_filter\n1241         c._for_write = self._for_write\n1242         c._prefetch_related_lookups = self._prefetch_related_lookups[:]\n1243         c._known_related_objects = self._known_related_objects\n1244         c._iterable_class = self._iterable_class\n1245         c._fields = self._fields\n1246         return c\n1247 \n1248     def _fetch_all(self):\n1249         if self._result_cache is None:\n1250             self._result_cache = list(self._iterable_class(self))\n1251         if self._prefetch_related_lookups and not self._prefetch_done:\n1252             self._prefetch_related_objects()\n1253 \n1254     def _next_is_sticky(self):\n1255         \"\"\"\n1256         Indicate that the next filter call and the one following that should\n1257         be treated as a single filter. This is only important when it comes to\n1258         determining when to reuse tables for many-to-many filters. Required so\n1259         that we can filter naturally on the results of related managers.\n1260 \n1261         This doesn't return a clone of the current QuerySet (it returns\n1262         \"self\"). The method is only used internally and should be immediately\n1263         followed by a filter() that does create a clone.\n1264         \"\"\"\n1265         self._sticky_filter = True\n1266         return self\n1267 \n1268     def _merge_sanity_check(self, other):\n1269         \"\"\"Check that two QuerySet classes may be merged.\"\"\"\n1270         if self._fields is not None and (\n1271                 set(self.query.values_select) != set(other.query.values_select) or\n1272                 set(self.query.extra_select) != set(other.query.extra_select) or\n1273                 set(self.query.annotation_select) != set(other.query.annotation_select)):\n1274             raise TypeError(\n1275                 \"Merging '%s' classes must involve the same values in each case.\"\n1276                 % self.__class__.__name__\n1277             )\n1278 \n1279     def _merge_known_related_objects(self, other):\n1280         \"\"\"\n1281         Keep track of all known related objects from either QuerySet instance.\n1282         \"\"\"\n1283         for field, objects in other._known_related_objects.items():\n1284             self._known_related_objects.setdefault(field, {}).update(objects)\n1285 \n1286     def resolve_expression(self, *args, **kwargs):\n1287         if self._fields and len(self._fields) > 1:\n1288             # values() queryset can only be used as nested queries\n1289             # if they are set up to select only a single field.\n1290             raise TypeError('Cannot use multi-field values as a filter value.')\n1291         query = self.query.resolve_expression(*args, **kwargs)\n1292         query._db = self._db\n1293         return query\n1294     resolve_expression.queryset_only = True\n1295 \n1296     def _add_hints(self, **hints):\n1297         \"\"\"\n1298         Update hinting information for use by routers. Add new key/values or\n1299         overwrite existing key/values.\n1300         \"\"\"\n1301         self._hints.update(hints)\n1302 \n1303     def _has_filters(self):\n1304         \"\"\"\n1305         Check if this QuerySet has any filtering going on. This isn't\n1306         equivalent with checking if all objects are present in results, for\n1307         example, qs[1:]._has_filters() -> False.\n1308         \"\"\"\n1309         return self.query.has_filters()\n1310 \n1311     @staticmethod\n1312     def _validate_values_are_expressions(values, method_name):\n1313         invalid_args = sorted(str(arg) for arg in values if not hasattr(arg, 'resolve_expression'))\n1314         if invalid_args:\n1315             raise TypeError(\n1316                 'QuerySet.%s() received non-expression(s): %s.' % (\n1317                     method_name,\n1318                     ', '.join(invalid_args),\n1319                 )\n1320             )\n1321 \n1322     def _not_support_combined_queries(self, operation_name):\n1323         if self.query.combinator:\n1324             raise NotSupportedError(\n1325                 'Calling QuerySet.%s() after %s() is not supported.'\n1326                 % (operation_name, self.query.combinator)\n1327             )\n",
        "intended_behavior": "This class provides additional context to the issue."
    },
    {
        "rel_file_path": "django/db/models/sql/query.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.0/django/db/models/sql/query.py",
        "start": 145,
        "end": 2227,
        "class_name": "Query",
        "method_name": null,
        "code": "145 class Query(BaseExpression):\n146     \"\"\"A single SQL query.\"\"\"\n147 \n148     alias_prefix = 'T'\n149     subq_aliases = frozenset([alias_prefix])\n150 \n151     compiler = 'SQLCompiler'\n152 \n153     def __init__(self, model, where=WhereNode):\n154         self.model = model\n155         self.alias_refcount = {}\n156         # alias_map is the most important data structure regarding joins.\n157         # It's used for recording which joins exist in the query and what\n158         # types they are. The key is the alias of the joined table (possibly\n159         # the table name) and the value is a Join-like object (see\n160         # sql.datastructures.Join for more information).\n161         self.alias_map = {}\n162         # Sometimes the query contains references to aliases in outer queries (as\n163         # a result of split_exclude). Correct alias quoting needs to know these\n164         # aliases too.\n165         self.external_aliases = set()\n166         self.table_map = {}     # Maps table names to list of aliases.\n167         self.default_cols = True\n168         self.default_ordering = True\n169         self.standard_ordering = True\n170         self.used_aliases = set()\n171         self.filter_is_sticky = False\n172         self.subquery = False\n173 \n174         # SQL-related attributes\n175         # Select and related select clauses are expressions to use in the\n176         # SELECT clause of the query.\n177         # The select is used for cases where we want to set up the select\n178         # clause to contain other than default fields (values(), subqueries...)\n179         # Note that annotations go to annotations dictionary.\n180         self.select = ()\n181         self.where = where()\n182         self.where_class = where\n183         # The group_by attribute can have one of the following forms:\n184         #  - None: no group by at all in the query\n185         #  - A tuple of expressions: group by (at least) those expressions.\n186         #    String refs are also allowed for now.\n187         #  - True: group by all select fields of the model\n188         # See compiler.get_group_by() for details.\n189         self.group_by = None\n190         self.order_by = ()\n191         self.low_mark, self.high_mark = 0, None  # Used for offset/limit\n192         self.distinct = False\n193         self.distinct_fields = ()\n194         self.select_for_update = False\n195         self.select_for_update_nowait = False\n196         self.select_for_update_skip_locked = False\n197         self.select_for_update_of = ()\n198 \n199         self.select_related = False\n200         # Arbitrary limit for select_related to prevents infinite recursion.\n201         self.max_depth = 5\n202 \n203         # Holds the selects defined by a call to values() or values_list()\n204         # excluding annotation_select and extra_select.\n205         self.values_select = ()\n206 \n207         # SQL annotation-related attributes\n208         self.annotations = {}  # Maps alias -> Annotation Expression\n209         self.annotation_select_mask = None\n210         self._annotation_select_cache = None\n211 \n212         # Set combination attributes\n213         self.combinator = None\n214         self.combinator_all = False\n215         self.combined_queries = ()\n216 \n217         # These are for extensions. The contents are more or less appended\n218         # verbatim to the appropriate clause.\n219         self.extra = {}  # Maps col_alias -> (col_sql, params).\n220         self.extra_select_mask = None\n221         self._extra_select_cache = None\n222 \n223         self.extra_tables = ()\n224         self.extra_order_by = ()\n225 \n226         # A tuple that is a set of model field names and either True, if these\n227         # are the fields to defer, or False if these are the only fields to\n228         # load.\n229         self.deferred_loading = (frozenset(), True)\n230 \n231         self._filtered_relations = {}\n232 \n233         self.explain_query = False\n234         self.explain_format = None\n235         self.explain_options = {}\n236 \n237     @property\n238     def output_field(self):\n239         if len(self.select) == 1:\n240             return self.select[0].field\n241         elif len(self.annotation_select) == 1:\n242             return next(iter(self.annotation_select.values())).output_field\n243 \n244     @property\n245     def has_select_fields(self):\n246         return bool(self.select or self.annotation_select_mask or self.extra_select_mask)\n247 \n248     @cached_property\n249     def base_table(self):\n250         for alias in self.alias_map:\n251             return alias\n252 \n253     def __str__(self):\n254         \"\"\"\n255         Return the query as a string of SQL with the parameter values\n256         substituted in (use sql_with_params() to see the unsubstituted string).\n257 \n258         Parameter values won't necessarily be quoted correctly, since that is\n259         done by the database interface at execution time.\n260         \"\"\"\n261         sql, params = self.sql_with_params()\n262         return sql % params\n263 \n264     def sql_with_params(self):\n265         \"\"\"\n266         Return the query as an SQL string and the parameters that will be\n267         substituted into the query.\n268         \"\"\"\n269         return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()\n270 \n271     def __deepcopy__(self, memo):\n272         \"\"\"Limit the amount of work when a Query is deepcopied.\"\"\"\n273         result = self.clone()\n274         memo[id(self)] = result\n275         return result\n276 \n277     def get_compiler(self, using=None, connection=None):\n278         if using is None and connection is None:\n279             raise ValueError(\"Need either using or connection\")\n280         if using:\n281             connection = connections[using]\n282         return connection.ops.compiler(self.compiler)(self, connection, using)\n283 \n284     def get_meta(self):\n285         \"\"\"\n286         Return the Options instance (the model._meta) from which to start\n287         processing. Normally, this is self.model._meta, but it can be changed\n288         by subclasses.\n289         \"\"\"\n290         return self.model._meta\n291 \n292     def clone(self):\n293         \"\"\"\n294         Return a copy of the current Query. A lightweight alternative to\n295         to deepcopy().\n296         \"\"\"\n297         obj = Empty()\n298         obj.__class__ = self.__class__\n299         # Copy references to everything.\n300         obj.__dict__ = self.__dict__.copy()\n301         # Clone attributes that can't use shallow copy.\n302         obj.alias_refcount = self.alias_refcount.copy()\n303         obj.alias_map = self.alias_map.copy()\n304         obj.external_aliases = self.external_aliases.copy()\n305         obj.table_map = self.table_map.copy()\n306         obj.where = self.where.clone()\n307         obj.annotations = self.annotations.copy()\n308         if self.annotation_select_mask is None:\n309             obj.annotation_select_mask = None\n310         else:\n311             obj.annotation_select_mask = self.annotation_select_mask.copy()\n312         # _annotation_select_cache cannot be copied, as doing so breaks the\n313         # (necessary) state in which both annotations and\n314         # _annotation_select_cache point to the same underlying objects.\n315         # It will get re-populated in the cloned queryset the next time it's\n316         # used.\n317         obj._annotation_select_cache = None\n318         obj.extra = self.extra.copy()\n319         if self.extra_select_mask is None:\n320             obj.extra_select_mask = None\n321         else:\n322             obj.extra_select_mask = self.extra_select_mask.copy()\n323         if self._extra_select_cache is None:\n324             obj._extra_select_cache = None\n325         else:\n326             obj._extra_select_cache = self._extra_select_cache.copy()\n327         if 'subq_aliases' in self.__dict__:\n328             obj.subq_aliases = self.subq_aliases.copy()\n329         obj.used_aliases = self.used_aliases.copy()\n330         obj._filtered_relations = self._filtered_relations.copy()\n331         # Clear the cached_property\n332         try:\n333             del obj.base_table\n334         except AttributeError:\n335             pass\n336         return obj\n337 \n338     def chain(self, klass=None):\n339         \"\"\"\n340         Return a copy of the current Query that's ready for another operation.\n341         The klass argument changes the type of the Query, e.g. UpdateQuery.\n342         \"\"\"\n343         obj = self.clone()\n344         if klass and obj.__class__ != klass:\n345             obj.__class__ = klass\n346         if not obj.filter_is_sticky:\n347             obj.used_aliases = set()\n348         obj.filter_is_sticky = False\n349         if hasattr(obj, '_setup_query'):\n350             obj._setup_query()\n351         return obj\n352 \n353     def relabeled_clone(self, change_map):\n354         clone = self.clone()\n355         clone.change_aliases(change_map)\n356         return clone\n357 \n358     def rewrite_cols(self, annotation, col_cnt):\n359         # We must make sure the inner query has the referred columns in it.\n360         # If we are aggregating over an annotation, then Django uses Ref()\n361         # instances to note this. However, if we are annotating over a column\n362         # of a related model, then it might be that column isn't part of the\n363         # SELECT clause of the inner query, and we must manually make sure\n364         # the column is selected. An example case is:\n365         #    .aggregate(Sum('author__awards'))\n366         # Resolving this expression results in a join to author, but there\n367         # is no guarantee the awards column of author is in the select clause\n368         # of the query. Thus we must manually add the column to the inner\n369         # query.\n370         orig_exprs = annotation.get_source_expressions()\n371         new_exprs = []\n372         for expr in orig_exprs:\n373             # FIXME: These conditions are fairly arbitrary. Identify a better\n374             # method of having expressions decide which code path they should\n375             # take.\n376             if isinstance(expr, Ref):\n377                 # Its already a Ref to subquery (see resolve_ref() for\n378                 # details)\n379                 new_exprs.append(expr)\n380             elif isinstance(expr, (WhereNode, Lookup)):\n381                 # Decompose the subexpressions further. The code here is\n382                 # copied from the else clause, but this condition must appear\n383                 # before the contains_aggregate/is_summary condition below.\n384                 new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)\n385                 new_exprs.append(new_expr)\n386             else:\n387                 # Reuse aliases of expressions already selected in subquery.\n388                 for col_alias, selected_annotation in self.annotation_select.items():\n389                     if selected_annotation == expr:\n390                         new_expr = Ref(col_alias, expr)\n391                         break\n392                 else:\n393                     # An expression that is not selected the subquery.\n394                     if isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):\n395                         # Reference column or another aggregate. Select it\n396                         # under a non-conflicting alias.\n397                         col_cnt += 1\n398                         col_alias = '__col%d' % col_cnt\n399                         self.annotations[col_alias] = expr\n400                         self.append_annotation_mask([col_alias])\n401                         new_expr = Ref(col_alias, expr)\n402                     else:\n403                         # Some other expression not referencing database values\n404                         # directly. Its subexpression might contain Cols.\n405                         new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)\n406                 new_exprs.append(new_expr)\n407         annotation.set_source_expressions(new_exprs)\n408         return annotation, col_cnt\n409 \n410     def get_aggregation(self, using, added_aggregate_names):\n411         \"\"\"\n412         Return the dictionary with the values of the existing aggregations.\n413         \"\"\"\n414         if not self.annotation_select:\n415             return {}\n416         existing_annotations = [\n417             annotation for alias, annotation\n418             in self.annotations.items()\n419             if alias not in added_aggregate_names\n420         ]\n421         # Decide if we need to use a subquery.\n422         #\n423         # Existing annotations would cause incorrect results as get_aggregation()\n424         # must produce just one result and thus must not use GROUP BY. But we\n425         # aren't smart enough to remove the existing annotations from the\n426         # query, so those would force us to use GROUP BY.\n427         #\n428         # If the query has limit or distinct, or uses set operations, then\n429         # those operations must be done in a subquery so that the query\n430         # aggregates on the limit and/or distinct results instead of applying\n431         # the distinct and limit after the aggregation.\n432         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or\n433                 self.distinct or self.combinator):\n434             from django.db.models.sql.subqueries import AggregateQuery\n435             outer_query = AggregateQuery(self.model)\n436             inner_query = self.clone()\n437             inner_query.select_for_update = False\n438             inner_query.select_related = False\n439             inner_query.set_annotation_mask(self.annotation_select)\n440             if not self.is_sliced and not self.distinct_fields:\n441                 # Queries with distinct_fields need ordering and when a limit\n442                 # is applied we must take the slice from the ordered query.\n443                 # Otherwise no need for ordering.\n444                 inner_query.clear_ordering(True)\n445             if not inner_query.distinct:\n446                 # If the inner query uses default select and it has some\n447                 # aggregate annotations, then we must make sure the inner\n448                 # query is grouped by the main model's primary key. However,\n449                 # clearing the select clause can alter results if distinct is\n450                 # used.\n451                 has_existing_aggregate_annotations = any(\n452                     annotation for annotation in existing_annotations\n453                     if getattr(annotation, 'contains_aggregate', True)\n454                 )\n455                 if inner_query.default_cols and has_existing_aggregate_annotations:\n456                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n457                 inner_query.default_cols = False\n458 \n459             relabels = {t: 'subquery' for t in inner_query.alias_map}\n460             relabels[None] = 'subquery'\n461             # Remove any aggregates marked for reduction from the subquery\n462             # and move them to the outer AggregateQuery.\n463             col_cnt = 0\n464             for alias, expression in list(inner_query.annotation_select.items()):\n465                 annotation_select_mask = inner_query.annotation_select_mask\n466                 if expression.is_summary:\n467                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)\n468                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)\n469                     del inner_query.annotations[alias]\n470                     annotation_select_mask.remove(alias)\n471                 # Make sure the annotation_select wont use cached results.\n472                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n473             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:\n474                 # In case of Model.objects[0:3].count(), there would be no\n475                 # field selected in the inner query, yet we must use a subquery.\n476                 # So, make sure at least one field is selected.\n477                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n478             try:\n479                 outer_query.add_subquery(inner_query, using)\n480             except EmptyResultSet:\n481                 return {\n482                     alias: None\n483                     for alias in outer_query.annotation_select\n484                 }\n485         else:\n486             outer_query = self\n487             self.select = ()\n488             self.default_cols = False\n489             self.extra = {}\n490 \n491         outer_query.clear_ordering(True)\n492         outer_query.clear_limits()\n493         outer_query.select_for_update = False\n494         outer_query.select_related = False\n495         compiler = outer_query.get_compiler(using)\n496         result = compiler.execute_sql(SINGLE)\n497         if result is None:\n498             result = [None] * len(outer_query.annotation_select)\n499 \n500         converters = compiler.get_converters(outer_query.annotation_select.values())\n501         result = next(compiler.apply_converters((result,), converters))\n502 \n503         return dict(zip(outer_query.annotation_select, result))\n504 \n505     def get_count(self, using):\n506         \"\"\"\n507         Perform a COUNT() query using the current filter constraints.\n508         \"\"\"\n509         obj = self.clone()\n510         obj.add_annotation(Count('*'), alias='__count', is_summary=True)\n511         number = obj.get_aggregation(using, ['__count'])['__count']\n512         if number is None:\n513             number = 0\n514         return number\n515 \n516     def has_filters(self):\n517         return self.where\n518 \n519     def has_results(self, using):\n520         q = self.clone()\n521         if not q.distinct:\n522             if q.group_by is True:\n523                 q.add_fields((f.attname for f in self.model._meta.concrete_fields), False)\n524                 q.set_group_by()\n525             q.clear_select_clause()\n526         q.clear_ordering(True)\n527         q.set_limits(high=1)\n528         compiler = q.get_compiler(using=using)\n529         return compiler.has_results()\n530 \n531     def explain(self, using, format=None, **options):\n532         q = self.clone()\n533         q.explain_query = True\n534         q.explain_format = format\n535         q.explain_options = options\n536         compiler = q.get_compiler(using=using)\n537         return '\\n'.join(compiler.explain_query())\n538 \n539     def combine(self, rhs, connector):\n540         \"\"\"\n541         Merge the 'rhs' query into the current one (with any 'rhs' effects\n542         being applied *after* (that is, \"to the right of\") anything in the\n543         current query. 'rhs' is not modified during a call to this function.\n544 \n545         The 'connector' parameter describes how to connect filters from the\n546         'rhs' query.\n547         \"\"\"\n548         assert self.model == rhs.model, \\\n549             \"Cannot combine queries on two different base models.\"\n550         assert not self.is_sliced, \\\n551             \"Cannot combine queries once a slice has been taken.\"\n552         assert self.distinct == rhs.distinct, \\\n553             \"Cannot combine a unique query with a non-unique query.\"\n554         assert self.distinct_fields == rhs.distinct_fields, \\\n555             \"Cannot combine queries with different distinct fields.\"\n556 \n557         # Work out how to relabel the rhs aliases, if necessary.\n558         change_map = {}\n559         conjunction = (connector == AND)\n560 \n561         # Determine which existing joins can be reused. When combining the\n562         # query with AND we must recreate all joins for m2m filters. When\n563         # combining with OR we can reuse joins. The reason is that in AND\n564         # case a single row can't fulfill a condition like:\n565         #     revrel__col=1 & revrel__col=2\n566         # But, there might be two different related rows matching this\n567         # condition. In OR case a single True is enough, so single row is\n568         # enough, too.\n569         #\n570         # Note that we will be creating duplicate joins for non-m2m joins in\n571         # the AND case. The results will be correct but this creates too many\n572         # joins. This is something that could be fixed later on.\n573         reuse = set() if conjunction else set(self.alias_map)\n574         # Base table must be present in the query - this is the same\n575         # table on both sides.\n576         self.get_initial_alias()\n577         joinpromoter = JoinPromoter(connector, 2, False)\n578         joinpromoter.add_votes(\n579             j for j in self.alias_map if self.alias_map[j].join_type == INNER)\n580         rhs_votes = set()\n581         # Now, add the joins from rhs query into the new query (skipping base\n582         # table).\n583         rhs_tables = list(rhs.alias_map)[1:]\n584         for alias in rhs_tables:\n585             join = rhs.alias_map[alias]\n586             # If the left side of the join was already relabeled, use the\n587             # updated alias.\n588             join = join.relabeled_clone(change_map)\n589             new_alias = self.join(join, reuse=reuse)\n590             if join.join_type == INNER:\n591                 rhs_votes.add(new_alias)\n592             # We can't reuse the same join again in the query. If we have two\n593             # distinct joins for the same connection in rhs query, then the\n594             # combined query must have two joins, too.\n595             reuse.discard(new_alias)\n596             if alias != new_alias:\n597                 change_map[alias] = new_alias\n598             if not rhs.alias_refcount[alias]:\n599                 # The alias was unused in the rhs query. Unref it so that it\n600                 # will be unused in the new query, too. We have to add and\n601                 # unref the alias so that join promotion has information of\n602                 # the join type for the unused alias.\n603                 self.unref_alias(new_alias)\n604         joinpromoter.add_votes(rhs_votes)\n605         joinpromoter.update_join_types(self)\n606 \n607         # Now relabel a copy of the rhs where-clause and add it to the current\n608         # one.\n609         w = rhs.where.clone()\n610         w.relabel_aliases(change_map)\n611         self.where.add(w, connector)\n612 \n613         # Selection columns and extra extensions are those provided by 'rhs'.\n614         if rhs.select:\n615             self.set_select([col.relabeled_clone(change_map) for col in rhs.select])\n616         else:\n617             self.select = ()\n618 \n619         if connector == OR:\n620             # It would be nice to be able to handle this, but the queries don't\n621             # really make sense (or return consistent value sets). Not worth\n622             # the extra complexity when you can write a real query instead.\n623             if self.extra and rhs.extra:\n624                 raise ValueError(\"When merging querysets using 'or', you cannot have extra(select=...) on both sides.\")\n625         self.extra.update(rhs.extra)\n626         extra_select_mask = set()\n627         if self.extra_select_mask is not None:\n628             extra_select_mask.update(self.extra_select_mask)\n629         if rhs.extra_select_mask is not None:\n630             extra_select_mask.update(rhs.extra_select_mask)\n631         if extra_select_mask:\n632             self.set_extra_mask(extra_select_mask)\n633         self.extra_tables += rhs.extra_tables\n634 \n635         # Ordering uses the 'rhs' ordering, unless it has none, in which case\n636         # the current ordering is used.\n637         self.order_by = rhs.order_by or self.order_by\n638         self.extra_order_by = rhs.extra_order_by or self.extra_order_by\n639 \n640     def deferred_to_data(self, target, callback):\n641         \"\"\"\n642         Convert the self.deferred_loading data structure to an alternate data\n643         structure, describing the field that *will* be loaded. This is used to\n644         compute the columns to select from the database and also by the\n645         QuerySet class to work out which fields are being initialized on each\n646         model. Models that have all their fields included aren't mentioned in\n647         the result, only those that have field restrictions in place.\n648 \n649         The \"target\" parameter is the instance that is populated (in place).\n650         The \"callback\" is a function that is called whenever a (model, field)\n651         pair need to be added to \"target\". It accepts three parameters:\n652         \"target\", and the model and list of fields being added for that model.\n653         \"\"\"\n654         field_names, defer = self.deferred_loading\n655         if not field_names:\n656             return\n657         orig_opts = self.get_meta()\n658         seen = {}\n659         must_include = {orig_opts.concrete_model: {orig_opts.pk}}\n660         for field_name in field_names:\n661             parts = field_name.split(LOOKUP_SEP)\n662             cur_model = self.model._meta.concrete_model\n663             opts = orig_opts\n664             for name in parts[:-1]:\n665                 old_model = cur_model\n666                 if name in self._filtered_relations:\n667                     name = self._filtered_relations[name].relation_name\n668                 source = opts.get_field(name)\n669                 if is_reverse_o2o(source):\n670                     cur_model = source.related_model\n671                 else:\n672                     cur_model = source.remote_field.model\n673                 opts = cur_model._meta\n674                 # Even if we're \"just passing through\" this model, we must add\n675                 # both the current model's pk and the related reference field\n676                 # (if it's not a reverse relation) to the things we select.\n677                 if not is_reverse_o2o(source):\n678                     must_include[old_model].add(source)\n679                 add_to_dict(must_include, cur_model, opts.pk)\n680             field = opts.get_field(parts[-1])\n681             is_reverse_object = field.auto_created and not field.concrete\n682             model = field.related_model if is_reverse_object else field.model\n683             model = model._meta.concrete_model\n684             if model == opts.model:\n685                 model = cur_model\n686             if not is_reverse_o2o(field):\n687                 add_to_dict(seen, model, field)\n688 \n689         if defer:\n690             # We need to load all fields for each model, except those that\n691             # appear in \"seen\" (for all models that appear in \"seen\"). The only\n692             # slight complexity here is handling fields that exist on parent\n693             # models.\n694             workset = {}\n695             for model, values in seen.items():\n696                 for field in model._meta.local_fields:\n697                     if field not in values:\n698                         m = field.model._meta.concrete_model\n699                         add_to_dict(workset, m, field)\n700             for model, values in must_include.items():\n701                 # If we haven't included a model in workset, we don't add the\n702                 # corresponding must_include fields for that model, since an\n703                 # empty set means \"include all fields\". That's why there's no\n704                 # \"else\" branch here.\n705                 if model in workset:\n706                     workset[model].update(values)\n707             for model, values in workset.items():\n708                 callback(target, model, values)\n709         else:\n710             for model, values in must_include.items():\n711                 if model in seen:\n712                     seen[model].update(values)\n713                 else:\n714                     # As we've passed through this model, but not explicitly\n715                     # included any fields, we have to make sure it's mentioned\n716                     # so that only the \"must include\" fields are pulled in.\n717                     seen[model] = values\n718             # Now ensure that every model in the inheritance chain is mentioned\n719             # in the parent list. Again, it must be mentioned to ensure that\n720             # only \"must include\" fields are pulled in.\n721             for model in orig_opts.get_parent_list():\n722                 seen.setdefault(model, set())\n723             for model, values in seen.items():\n724                 callback(target, model, values)\n725 \n726     def table_alias(self, table_name, create=False, filtered_relation=None):\n727         \"\"\"\n728         Return a table alias for the given table_name and whether this is a\n729         new alias or not.\n730 \n731         If 'create' is true, a new alias is always created. Otherwise, the\n732         most recently created alias for the table (if one exists) is reused.\n733         \"\"\"\n734         alias_list = self.table_map.get(table_name)\n735         if not create and alias_list:\n736             alias = alias_list[0]\n737             self.alias_refcount[alias] += 1\n738             return alias, False\n739 \n740         # Create a new alias for this table.\n741         if alias_list:\n742             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n743             alias_list.append(alias)\n744         else:\n745             # The first occurrence of a table uses the table name directly.\n746             alias = filtered_relation.alias if filtered_relation is not None else table_name\n747             self.table_map[table_name] = [alias]\n748         self.alias_refcount[alias] = 1\n749         return alias, True\n750 \n751     def ref_alias(self, alias):\n752         \"\"\"Increases the reference count for this alias.\"\"\"\n753         self.alias_refcount[alias] += 1\n754 \n755     def unref_alias(self, alias, amount=1):\n756         \"\"\"Decreases the reference count for this alias.\"\"\"\n757         self.alias_refcount[alias] -= amount\n758 \n759     def promote_joins(self, aliases):\n760         \"\"\"\n761         Promote recursively the join type of given aliases and its children to\n762         an outer join. If 'unconditional' is False, only promote the join if\n763         it is nullable or the parent join is an outer join.\n764 \n765         The children promotion is done to avoid join chains that contain a LOUTER\n766         b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,\n767         then we must also promote b->c automatically, or otherwise the promotion\n768         of a->b doesn't actually change anything in the query results.\n769         \"\"\"\n770         aliases = list(aliases)\n771         while aliases:\n772             alias = aliases.pop(0)\n773             if self.alias_map[alias].join_type is None:\n774                 # This is the base table (first FROM entry) - this table\n775                 # isn't really joined at all in the query, so we should not\n776                 # alter its join type.\n777                 continue\n778             # Only the first alias (skipped above) should have None join_type\n779             assert self.alias_map[alias].join_type is not None\n780             parent_alias = self.alias_map[alias].parent_alias\n781             parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER\n782             already_louter = self.alias_map[alias].join_type == LOUTER\n783             if ((self.alias_map[alias].nullable or parent_louter) and\n784                     not already_louter):\n785                 self.alias_map[alias] = self.alias_map[alias].promote()\n786                 # Join type of 'alias' changed, so re-examine all aliases that\n787                 # refer to this one.\n788                 aliases.extend(\n789                     join for join in self.alias_map\n790                     if self.alias_map[join].parent_alias == alias and join not in aliases\n791                 )\n792 \n793     def demote_joins(self, aliases):\n794         \"\"\"\n795         Change join type from LOUTER to INNER for all joins in aliases.\n796 \n797         Similarly to promote_joins(), this method must ensure no join chains\n798         containing first an outer, then an inner join are generated. If we\n799         are demoting b->c join in chain a LOUTER b LOUTER c then we must\n800         demote a->b automatically, or otherwise the demotion of b->c doesn't\n801         actually change anything in the query results. .\n802         \"\"\"\n803         aliases = list(aliases)\n804         while aliases:\n805             alias = aliases.pop(0)\n806             if self.alias_map[alias].join_type == LOUTER:\n807                 self.alias_map[alias] = self.alias_map[alias].demote()\n808                 parent_alias = self.alias_map[alias].parent_alias\n809                 if self.alias_map[parent_alias].join_type == INNER:\n810                     aliases.append(parent_alias)\n811 \n812     def reset_refcounts(self, to_counts):\n813         \"\"\"\n814         Reset reference counts for aliases so that they match the value passed\n815         in `to_counts`.\n816         \"\"\"\n817         for alias, cur_refcount in self.alias_refcount.copy().items():\n818             unref_amount = cur_refcount - to_counts.get(alias, 0)\n819             self.unref_alias(alias, unref_amount)\n820 \n821     def change_aliases(self, change_map):\n822         \"\"\"\n823         Change the aliases in change_map (which maps old-alias -> new-alias),\n824         relabelling any references to them in select columns and the where\n825         clause.\n826         \"\"\"\n827         assert set(change_map).isdisjoint(change_map.values())\n828 \n829         # 1. Update references in \"select\" (normal columns plus aliases),\n830         # \"group by\" and \"where\".\n831         self.where.relabel_aliases(change_map)\n832         if isinstance(self.group_by, tuple):\n833             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])\n834         self.select = tuple([col.relabeled_clone(change_map) for col in self.select])\n835         self.annotations = self.annotations and {\n836             key: col.relabeled_clone(change_map) for key, col in self.annotations.items()\n837         }\n838 \n839         # 2. Rename the alias in the internal table/alias datastructures.\n840         for old_alias, new_alias in change_map.items():\n841             if old_alias not in self.alias_map:\n842                 continue\n843             alias_data = self.alias_map[old_alias].relabeled_clone(change_map)\n844             self.alias_map[new_alias] = alias_data\n845             self.alias_refcount[new_alias] = self.alias_refcount[old_alias]\n846             del self.alias_refcount[old_alias]\n847             del self.alias_map[old_alias]\n848 \n849             table_aliases = self.table_map[alias_data.table_name]\n850             for pos, alias in enumerate(table_aliases):\n851                 if alias == old_alias:\n852                     table_aliases[pos] = new_alias\n853                     break\n854         self.external_aliases = {change_map.get(alias, alias)\n855                                  for alias in self.external_aliases}\n856 \n857     def bump_prefix(self, outer_query):\n858         \"\"\"\n859         Change the alias prefix to the next letter in the alphabet in a way\n860         that the outer query's aliases and this query's aliases will not\n861         conflict. Even tables that previously had no alias will get an alias\n862         after this call.\n863         \"\"\"\n864         def prefix_gen():\n865             \"\"\"\n866             Generate a sequence of characters in alphabetical order:\n867                 -> 'A', 'B', 'C', ...\n868 \n869             When the alphabet is finished, the sequence will continue with the\n870             Cartesian product:\n871                 -> 'AA', 'AB', 'AC', ...\n872             \"\"\"\n873             alphabet = ascii_uppercase\n874             prefix = chr(ord(self.alias_prefix) + 1)\n875             yield prefix\n876             for n in count(1):\n877                 seq = alphabet[alphabet.index(prefix):] if prefix else alphabet\n878                 for s in product(seq, repeat=n):\n879                     yield ''.join(s)\n880                 prefix = None\n881 \n882         if self.alias_prefix != outer_query.alias_prefix:\n883             # No clashes between self and outer query should be possible.\n884             return\n885 \n886         # Explicitly avoid infinite loop. The constant divider is based on how\n887         # much depth recursive subquery references add to the stack. This value\n888         # might need to be adjusted when adding or removing function calls from\n889         # the code path in charge of performing these operations.\n890         local_recursion_limit = sys.getrecursionlimit() // 16\n891         for pos, prefix in enumerate(prefix_gen()):\n892             if prefix not in self.subq_aliases:\n893                 self.alias_prefix = prefix\n894                 break\n895             if pos > local_recursion_limit:\n896                 raise RecursionError(\n897                     'Maximum recursion depth exceeded: too many subqueries.'\n898                 )\n899         self.subq_aliases = self.subq_aliases.union([self.alias_prefix])\n900         outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)\n901         self.change_aliases({\n902             alias: '%s%d' % (self.alias_prefix, pos)\n903             for pos, alias in enumerate(self.alias_map)\n904         })\n905 \n906     def get_initial_alias(self):\n907         \"\"\"\n908         Return the first alias for this query, after increasing its reference\n909         count.\n910         \"\"\"\n911         if self.alias_map:\n912             alias = self.base_table\n913             self.ref_alias(alias)\n914         else:\n915             alias = self.join(BaseTable(self.get_meta().db_table, None))\n916         return alias\n917 \n918     def count_active_tables(self):\n919         \"\"\"\n920         Return the number of tables in this query with a non-zero reference\n921         count. After execution, the reference counts are zeroed, so tables\n922         added in compiler will not be seen by this method.\n923         \"\"\"\n924         return len([1 for count in self.alias_refcount.values() if count])\n925 \n926     def join(self, join, reuse=None, reuse_with_filtered_relation=False):\n927         \"\"\"\n928         Return an alias for the 'join', either reusing an existing alias for\n929         that join or creating a new one. 'join' is either a\n930         sql.datastructures.BaseTable or Join.\n931 \n932         The 'reuse' parameter can be either None which means all joins are\n933         reusable, or it can be a set containing the aliases that can be reused.\n934 \n935         The 'reuse_with_filtered_relation' parameter is used when computing\n936         FilteredRelation instances.\n937 \n938         A join is always created as LOUTER if the lhs alias is LOUTER to make\n939         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new\n940         joins are created as LOUTER if the join is nullable.\n941         \"\"\"\n942         if reuse_with_filtered_relation and reuse:\n943             reuse_aliases = [\n944                 a for a, j in self.alias_map.items()\n945                 if a in reuse and j.equals(join, with_filtered_relation=False)\n946             ]\n947         else:\n948             reuse_aliases = [\n949                 a for a, j in self.alias_map.items()\n950                 if (reuse is None or a in reuse) and j == join\n951             ]\n952         if reuse_aliases:\n953             if join.table_alias in reuse_aliases:\n954                 reuse_alias = join.table_alias\n955             else:\n956                 # Reuse the most recent alias of the joined table\n957                 # (a many-to-many relation may be joined multiple times).\n958                 reuse_alias = reuse_aliases[-1]\n959             self.ref_alias(reuse_alias)\n960             return reuse_alias\n961 \n962         # No reuse is possible, so we need a new alias.\n963         alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)\n964         if join.join_type:\n965             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:\n966                 join_type = LOUTER\n967             else:\n968                 join_type = INNER\n969             join.join_type = join_type\n970         join.table_alias = alias\n971         self.alias_map[alias] = join\n972         return alias\n973 \n974     def join_parent_model(self, opts, model, alias, seen):\n975         \"\"\"\n976         Make sure the given 'model' is joined in the query. If 'model' isn't\n977         a parent of 'opts' or if it is None this method is a no-op.\n978 \n979         The 'alias' is the root alias for starting the join, 'seen' is a dict\n980         of model -> alias of existing joins. It must also contain a mapping\n981         of None -> some alias. This will be returned in the no-op case.\n982         \"\"\"\n983         if model in seen:\n984             return seen[model]\n985         chain = opts.get_base_chain(model)\n986         if not chain:\n987             return alias\n988         curr_opts = opts\n989         for int_model in chain:\n990             if int_model in seen:\n991                 curr_opts = int_model._meta\n992                 alias = seen[int_model]\n993                 continue\n994             # Proxy model have elements in base chain\n995             # with no parents, assign the new options\n996             # object and skip to the next base in that\n997             # case\n998             if not curr_opts.parents[int_model]:\n999                 curr_opts = int_model._meta\n1000                 continue\n1001             link_field = curr_opts.get_ancestor_link(int_model)\n1002             join_info = self.setup_joins([link_field.name], curr_opts, alias)\n1003             curr_opts = int_model._meta\n1004             alias = seen[int_model] = join_info.joins[-1]\n1005         return alias or seen[None]\n1006 \n1007     def add_annotation(self, annotation, alias, is_summary=False):\n1008         \"\"\"Add a single annotation expression to the Query.\"\"\"\n1009         annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,\n1010                                                    summarize=is_summary)\n1011         self.append_annotation_mask([alias])\n1012         self.annotations[alias] = annotation\n1013 \n1014     def resolve_expression(self, query, *args, **kwargs):\n1015         clone = self.clone()\n1016         # Subqueries need to use a different set of aliases than the outer query.\n1017         clone.bump_prefix(query)\n1018         clone.subquery = True\n1019         # It's safe to drop ordering if the queryset isn't using slicing,\n1020         # distinct(*fields) or select_for_update().\n1021         if (self.low_mark == 0 and self.high_mark is None and\n1022                 not self.distinct_fields and\n1023                 not self.select_for_update):\n1024             clone.clear_ordering(True)\n1025         clone.where.resolve_expression(query, *args, **kwargs)\n1026         for key, value in clone.annotations.items():\n1027             resolved = value.resolve_expression(query, *args, **kwargs)\n1028             if hasattr(resolved, 'external_aliases'):\n1029                 resolved.external_aliases.update(clone.alias_map)\n1030             clone.annotations[key] = resolved\n1031         # Outer query's aliases are considered external.\n1032         clone.external_aliases.update(\n1033             alias for alias, table in query.alias_map.items()\n1034             if (\n1035                 isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias\n1036             ) or (\n1037                 isinstance(table, BaseTable) and table.table_name != table.table_alias\n1038             )\n1039         )\n1040         return clone\n1041 \n1042     def as_sql(self, compiler, connection):\n1043         sql, params = self.get_compiler(connection=connection).as_sql()\n1044         if self.subquery:\n1045             sql = '(%s)' % sql\n1046         return sql, params\n1047 \n1048     def resolve_lookup_value(self, value, can_reuse, allow_joins, simple_col):\n1049         if hasattr(value, 'resolve_expression'):\n1050             kwargs = {'reuse': can_reuse, 'allow_joins': allow_joins}\n1051             if isinstance(value, F):\n1052                 kwargs['simple_col'] = simple_col\n1053             value = value.resolve_expression(self, **kwargs)\n1054         elif isinstance(value, (list, tuple)):\n1055             # The items of the iterable may be expressions and therefore need\n1056             # to be resolved independently.\n1057             resolved_values = []\n1058             for sub_value in value:\n1059                 if hasattr(sub_value, 'resolve_expression'):\n1060                     if isinstance(sub_value, F):\n1061                         resolved_values.append(sub_value.resolve_expression(\n1062                             self, reuse=can_reuse, allow_joins=allow_joins,\n1063                             simple_col=simple_col,\n1064                         ))\n1065                     else:\n1066                         resolved_values.append(sub_value.resolve_expression(\n1067                             self, reuse=can_reuse, allow_joins=allow_joins,\n1068                         ))\n1069                 else:\n1070                     resolved_values.append(sub_value)\n1071             value = tuple(resolved_values)\n1072         return value\n1073 \n1074     def solve_lookup_type(self, lookup):\n1075         \"\"\"\n1076         Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').\n1077         \"\"\"\n1078         lookup_splitted = lookup.split(LOOKUP_SEP)\n1079         if self.annotations:\n1080             expression, expression_lookups = refs_expression(lookup_splitted, self.annotations)\n1081             if expression:\n1082                 return expression_lookups, (), expression\n1083         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())\n1084         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]\n1085         if len(lookup_parts) > 1 and not field_parts:\n1086             raise FieldError(\n1087                 'Invalid lookup \"%s\" for model %s\".' %\n1088                 (lookup, self.get_meta().model.__name__)\n1089             )\n1090         return lookup_parts, field_parts, False\n1091 \n1092     def check_query_object_type(self, value, opts, field):\n1093         \"\"\"\n1094         Check whether the object passed while querying is of the correct type.\n1095         If not, raise a ValueError specifying the wrong object.\n1096         \"\"\"\n1097         if hasattr(value, '_meta'):\n1098             if not check_rel_lookup_compatibility(value._meta.model, opts, field):\n1099                 raise ValueError(\n1100                     'Cannot query \"%s\": Must be \"%s\" instance.' %\n1101                     (value, opts.object_name))\n1102 \n1103     def check_related_objects(self, field, value, opts):\n1104         \"\"\"Check the type of object passed to query relations.\"\"\"\n1105         if field.is_relation:\n1106             # Check that the field and the queryset use the same model in a\n1107             # query like .filter(author=Author.objects.all()). For example, the\n1108             # opts would be Author's (from the author field) and value.model\n1109             # would be Author.objects.all() queryset's .model (Author also).\n1110             # The field is the related field on the lhs side.\n1111             if (isinstance(value, Query) and not value.has_select_fields and\n1112                     not check_rel_lookup_compatibility(value.model, opts, field)):\n1113                 raise ValueError(\n1114                     'Cannot use QuerySet for \"%s\": Use a QuerySet for \"%s\".' %\n1115                     (value.model._meta.object_name, opts.object_name)\n1116                 )\n1117             elif hasattr(value, '_meta'):\n1118                 self.check_query_object_type(value, opts, field)\n1119             elif hasattr(value, '__iter__'):\n1120                 for v in value:\n1121                     self.check_query_object_type(v, opts, field)\n1122 \n1123     def check_filterable(self, expression):\n1124         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n1125         if not getattr(expression, 'filterable', 'True'):\n1126             raise NotSupportedError(\n1127                 expression.__class__.__name__ + ' is disallowed in the filter '\n1128                 'clause.'\n1129             )\n1130         if hasattr(expression, 'get_source_expressions'):\n1131             for expr in expression.get_source_expressions():\n1132                 self.check_filterable(expr)\n1133 \n1134     def build_lookup(self, lookups, lhs, rhs):\n1135         \"\"\"\n1136         Try to extract transforms and lookup from given lhs.\n1137 \n1138         The lhs value is something that works like SQLExpression.\n1139         The rhs value is what the lookup is going to compare against.\n1140         The lookups is a list of names to extract using get_lookup()\n1141         and get_transform().\n1142         \"\"\"\n1143         # __exact is the default lookup if one isn't given.\n1144         *transforms, lookup_name = lookups or ['exact']\n1145         for name in transforms:\n1146             lhs = self.try_transform(lhs, name)\n1147         # First try get_lookup() so that the lookup takes precedence if the lhs\n1148         # supports both transform and lookup for the name.\n1149         lookup_class = lhs.get_lookup(lookup_name)\n1150         if not lookup_class:\n1151             if lhs.field.is_relation:\n1152                 raise FieldError('Related Field got invalid lookup: {}'.format(lookup_name))\n1153             # A lookup wasn't found. Try to interpret the name as a transform\n1154             # and do an Exact lookup against it.\n1155             lhs = self.try_transform(lhs, lookup_name)\n1156             lookup_name = 'exact'\n1157             lookup_class = lhs.get_lookup(lookup_name)\n1158             if not lookup_class:\n1159                 return\n1160 \n1161         lookup = lookup_class(lhs, rhs)\n1162         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all\n1163         # uses of None as a query value unless the lookup supports it.\n1164         if lookup.rhs is None and not lookup.can_use_none_as_rhs:\n1165             if lookup_name not in ('exact', 'iexact'):\n1166                 raise ValueError(\"Cannot use None as a query value\")\n1167             return lhs.get_lookup('isnull')(lhs, True)\n1168 \n1169         # For Oracle '' is equivalent to null. The check must be done at this\n1170         # stage because join promotion can't be done in the compiler. Using\n1171         # DEFAULT_DB_ALIAS isn't nice but it's the best that can be done here.\n1172         # A similar thing is done in is_nullable(), too.\n1173         if (connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and\n1174                 lookup_name == 'exact' and lookup.rhs == ''):\n1175             return lhs.get_lookup('isnull')(lhs, True)\n1176 \n1177         return lookup\n1178 \n1179     def try_transform(self, lhs, name):\n1180         \"\"\"\n1181         Helper method for build_lookup(). Try to fetch and initialize\n1182         a transform for name parameter from lhs.\n1183         \"\"\"\n1184         transform_class = lhs.get_transform(name)\n1185         if transform_class:\n1186             return transform_class(lhs)\n1187         else:\n1188             output_field = lhs.output_field.__class__\n1189             suggested_lookups = difflib.get_close_matches(name, output_field.get_lookups())\n1190             if suggested_lookups:\n1191                 suggestion = ', perhaps you meant %s?' % ' or '.join(suggested_lookups)\n1192             else:\n1193                 suggestion = '.'\n1194             raise FieldError(\n1195                 \"Unsupported lookup '%s' for %s or join on the field not \"\n1196                 \"permitted%s\" % (name, output_field.__name__, suggestion)\n1197             )\n1198 \n1199     def build_filter(self, filter_expr, branch_negated=False, current_negated=False,\n1200                      can_reuse=None, allow_joins=True, split_subq=True,\n1201                      reuse_with_filtered_relation=False, simple_col=False):\n1202         \"\"\"\n1203         Build a WhereNode for a single filter clause but don't add it\n1204         to this Query. Query.add_q() will then add this filter to the where\n1205         Node.\n1206 \n1207         The 'branch_negated' tells us if the current branch contains any\n1208         negations. This will be used to determine if subqueries are needed.\n1209 \n1210         The 'current_negated' is used to determine if the current filter is\n1211         negated or not and this will be used to determine if IS NULL filtering\n1212         is needed.\n1213 \n1214         The difference between current_negated and branch_negated is that\n1215         branch_negated is set on first negation, but current_negated is\n1216         flipped for each negation.\n1217 \n1218         Note that add_filter will not do any negating itself, that is done\n1219         upper in the code by add_q().\n1220 \n1221         The 'can_reuse' is a set of reusable joins for multijoins.\n1222 \n1223         If 'reuse_with_filtered_relation' is True, then only joins in can_reuse\n1224         will be reused.\n1225 \n1226         The method will create a filter clause that can be added to the current\n1227         query. However, if the filter isn't added to the query then the caller\n1228         is responsible for unreffing the joins used.\n1229         \"\"\"\n1230         if isinstance(filter_expr, dict):\n1231             raise FieldError(\"Cannot parse keyword query as dict\")\n1232         arg, value = filter_expr\n1233         if not arg:\n1234             raise FieldError(\"Cannot parse keyword query %r\" % arg)\n1235         lookups, parts, reffed_expression = self.solve_lookup_type(arg)\n1236 \n1237         self.check_filterable(reffed_expression)\n1238 \n1239         if not allow_joins and len(parts) > 1:\n1240             raise FieldError(\"Joined field references are not permitted in this query\")\n1241 \n1242         pre_joins = self.alias_refcount.copy()\n1243         value = self.resolve_lookup_value(value, can_reuse, allow_joins, simple_col)\n1244         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n1245 \n1246         self.check_filterable(value)\n1247 \n1248         clause = self.where_class()\n1249         if reffed_expression:\n1250             condition = self.build_lookup(lookups, reffed_expression, value)\n1251             clause.add(condition, AND)\n1252             return clause, []\n1253 \n1254         opts = self.get_meta()\n1255         alias = self.get_initial_alias()\n1256         allow_many = not branch_negated or not split_subq\n1257 \n1258         try:\n1259             join_info = self.setup_joins(\n1260                 parts, opts, alias, can_reuse=can_reuse, allow_many=allow_many,\n1261                 reuse_with_filtered_relation=reuse_with_filtered_relation,\n1262             )\n1263 \n1264             # Prevent iterator from being consumed by check_related_objects()\n1265             if isinstance(value, Iterator):\n1266                 value = list(value)\n1267             self.check_related_objects(join_info.final_field, value, join_info.opts)\n1268 \n1269             # split_exclude() needs to know which joins were generated for the\n1270             # lookup parts\n1271             self._lookup_joins = join_info.joins\n1272         except MultiJoin as e:\n1273             return self.split_exclude(filter_expr, can_reuse, e.names_with_path)\n1274 \n1275         # Update used_joins before trimming since they are reused to determine\n1276         # which joins could be later promoted to INNER.\n1277         used_joins.update(join_info.joins)\n1278         targets, alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)\n1279         if can_reuse is not None:\n1280             can_reuse.update(join_list)\n1281 \n1282         if join_info.final_field.is_relation:\n1283             # No support for transforms for relational fields\n1284             num_lookups = len(lookups)\n1285             if num_lookups > 1:\n1286                 raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))\n1287             if len(targets) == 1:\n1288                 col = _get_col(targets[0], join_info.final_field, alias, simple_col)\n1289             else:\n1290                 col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)\n1291         else:\n1292             col = _get_col(targets[0], join_info.final_field, alias, simple_col)\n1293 \n1294         condition = self.build_lookup(lookups, col, value)\n1295         lookup_type = condition.lookup_name\n1296         clause.add(condition, AND)\n1297 \n1298         require_outer = lookup_type == 'isnull' and condition.rhs is True and not current_negated\n1299         if current_negated and (lookup_type != 'isnull' or condition.rhs is False) and condition.rhs is not None:\n1300             require_outer = True\n1301             if (lookup_type != 'isnull' and (\n1302                     self.is_nullable(targets[0]) or\n1303                     self.alias_map[join_list[-1]].join_type == LOUTER)):\n1304                 # The condition added here will be SQL like this:\n1305                 # NOT (col IS NOT NULL), where the first NOT is added in\n1306                 # upper layers of code. The reason for addition is that if col\n1307                 # is null, then col != someval will result in SQL \"unknown\"\n1308                 # which isn't the same as in Python. The Python None handling\n1309                 # is wanted, and it can be gotten by\n1310                 # (col IS NULL OR col != someval)\n1311                 #   <=>\n1312                 # NOT (col IS NOT NULL AND col = someval).\n1313                 lookup_class = targets[0].get_lookup('isnull')\n1314                 col = _get_col(targets[0], join_info.targets[0], alias, simple_col)\n1315                 clause.add(lookup_class(col, False), AND)\n1316         return clause, used_joins if not require_outer else ()\n1317 \n1318     def add_filter(self, filter_clause):\n1319         self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))\n1320 \n1321     def add_q(self, q_object):\n1322         \"\"\"\n1323         A preprocessor for the internal _add_q(). Responsible for doing final\n1324         join promotion.\n1325         \"\"\"\n1326         # For join promotion this case is doing an AND for the added q_object\n1327         # and existing conditions. So, any existing inner join forces the join\n1328         # type to remain inner. Existing outer joins can however be demoted.\n1329         # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if\n1330         # rel_a doesn't produce any rows, then the whole condition must fail.\n1331         # So, demotion is OK.\n1332         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}\n1333         clause, _ = self._add_q(q_object, self.used_aliases)\n1334         if clause:\n1335             self.where.add(clause, AND)\n1336         self.demote_joins(existing_inner)\n1337 \n1338     def build_where(self, q_object):\n1339         return self._add_q(q_object, used_aliases=set(), allow_joins=False, simple_col=True)[0]\n1340 \n1341     def _add_q(self, q_object, used_aliases, branch_negated=False,\n1342                current_negated=False, allow_joins=True, split_subq=True,\n1343                simple_col=False):\n1344         \"\"\"Add a Q-object to the current filter.\"\"\"\n1345         connector = q_object.connector\n1346         current_negated = current_negated ^ q_object.negated\n1347         branch_negated = branch_negated or q_object.negated\n1348         target_clause = self.where_class(connector=connector,\n1349                                          negated=q_object.negated)\n1350         joinpromoter = JoinPromoter(q_object.connector, len(q_object.children), current_negated)\n1351         for child in q_object.children:\n1352             if isinstance(child, Node):\n1353                 child_clause, needed_inner = self._add_q(\n1354                     child, used_aliases, branch_negated,\n1355                     current_negated, allow_joins, split_subq, simple_col)\n1356                 joinpromoter.add_votes(needed_inner)\n1357             else:\n1358                 child_clause, needed_inner = self.build_filter(\n1359                     child, can_reuse=used_aliases, branch_negated=branch_negated,\n1360                     current_negated=current_negated, allow_joins=allow_joins,\n1361                     split_subq=split_subq, simple_col=simple_col,\n1362                 )\n1363                 joinpromoter.add_votes(needed_inner)\n1364             if child_clause:\n1365                 target_clause.add(child_clause, connector)\n1366         needed_inner = joinpromoter.update_join_types(self)\n1367         return target_clause, needed_inner\n1368 \n1369     def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):\n1370         \"\"\"Add a FilteredRelation object to the current filter.\"\"\"\n1371         connector = q_object.connector\n1372         current_negated ^= q_object.negated\n1373         branch_negated = branch_negated or q_object.negated\n1374         target_clause = self.where_class(connector=connector, negated=q_object.negated)\n1375         for child in q_object.children:\n1376             if isinstance(child, Node):\n1377                 child_clause = self.build_filtered_relation_q(\n1378                     child, reuse=reuse, branch_negated=branch_negated,\n1379                     current_negated=current_negated,\n1380                 )\n1381             else:\n1382                 child_clause, _ = self.build_filter(\n1383                     child, can_reuse=reuse, branch_negated=branch_negated,\n1384                     current_negated=current_negated,\n1385                     allow_joins=True, split_subq=False,\n1386                     reuse_with_filtered_relation=True,\n1387                 )\n1388             target_clause.add(child_clause, connector)\n1389         return target_clause\n1390 \n1391     def add_filtered_relation(self, filtered_relation, alias):\n1392         filtered_relation.alias = alias\n1393         lookups = dict(get_children_from_q(filtered_relation.condition))\n1394         for lookup in chain((filtered_relation.relation_name,), lookups):\n1395             lookup_parts, field_parts, _ = self.solve_lookup_type(lookup)\n1396             shift = 2 if not lookup_parts else 1\n1397             if len(field_parts) > (shift + len(lookup_parts)):\n1398                 raise ValueError(\n1399                     \"FilteredRelation's condition doesn't support nested \"\n1400                     \"relations (got %r).\" % lookup\n1401                 )\n1402         self._filtered_relations[filtered_relation.alias] = filtered_relation\n1403 \n1404     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):\n1405         \"\"\"\n1406         Walk the list of names and turns them into PathInfo tuples. A single\n1407         name in 'names' can generate multiple PathInfos (m2m, for example).\n1408 \n1409         'names' is the path of names to travel, 'opts' is the model Options we\n1410         start the name resolving from, 'allow_many' is as for setup_joins().\n1411         If fail_on_missing is set to True, then a name that can't be resolved\n1412         will generate a FieldError.\n1413 \n1414         Return a list of PathInfo tuples. In addition return the final field\n1415         (the last used join field) and target (which is a field guaranteed to\n1416         contain the same value as the final field). Finally, return those names\n1417         that weren't found (which are likely transforms and the final lookup).\n1418         \"\"\"\n1419         path, names_with_path = [], []\n1420         for pos, name in enumerate(names):\n1421             cur_names_with_path = (name, [])\n1422             if name == 'pk':\n1423                 name = opts.pk.name\n1424 \n1425             field = None\n1426             filtered_relation = None\n1427             try:\n1428                 field = opts.get_field(name)\n1429             except FieldDoesNotExist:\n1430                 if name in self.annotation_select:\n1431                     field = self.annotation_select[name].output_field\n1432                 elif name in self._filtered_relations and pos == 0:\n1433                     filtered_relation = self._filtered_relations[name]\n1434                     field = opts.get_field(filtered_relation.relation_name)\n1435             if field is not None:\n1436                 # Fields that contain one-to-many relations with a generic\n1437                 # model (like a GenericForeignKey) cannot generate reverse\n1438                 # relations and therefore cannot be used for reverse querying.\n1439                 if field.is_relation and not field.related_model:\n1440                     raise FieldError(\n1441                         \"Field %r does not generate an automatic reverse \"\n1442                         \"relation and therefore cannot be used for reverse \"\n1443                         \"querying. If it is a GenericForeignKey, consider \"\n1444                         \"adding a GenericRelation.\" % name\n1445                     )\n1446                 try:\n1447                     model = field.model._meta.concrete_model\n1448                 except AttributeError:\n1449                     # QuerySet.annotate() may introduce fields that aren't\n1450                     # attached to a model.\n1451                     model = None\n1452             else:\n1453                 # We didn't find the current field, so move position back\n1454                 # one step.\n1455                 pos -= 1\n1456                 if pos == -1 or fail_on_missing:\n1457                     available = sorted([\n1458                         *get_field_names_from_opts(opts),\n1459                         *self.annotation_select,\n1460                         *self._filtered_relations,\n1461                     ])\n1462                     raise FieldError(\"Cannot resolve keyword '%s' into field. \"\n1463                                      \"Choices are: %s\" % (name, \", \".join(available)))\n1464                 break\n1465             # Check if we need any joins for concrete inheritance cases (the\n1466             # field lives in parent, but we are currently in one of its\n1467             # children)\n1468             if model is not opts.model:\n1469                 path_to_parent = opts.get_path_to_parent(model)\n1470                 if path_to_parent:\n1471                     path.extend(path_to_parent)\n1472                     cur_names_with_path[1].extend(path_to_parent)\n1473                     opts = path_to_parent[-1].to_opts\n1474             if hasattr(field, 'get_path_info'):\n1475                 pathinfos = field.get_path_info(filtered_relation)\n1476                 if not allow_many:\n1477                     for inner_pos, p in enumerate(pathinfos):\n1478                         if p.m2m:\n1479                             cur_names_with_path[1].extend(pathinfos[0:inner_pos + 1])\n1480                             names_with_path.append(cur_names_with_path)\n1481                             raise MultiJoin(pos + 1, names_with_path)\n1482                 last = pathinfos[-1]\n1483                 path.extend(pathinfos)\n1484                 final_field = last.join_field\n1485                 opts = last.to_opts\n1486                 targets = last.target_fields\n1487                 cur_names_with_path[1].extend(pathinfos)\n1488                 names_with_path.append(cur_names_with_path)\n1489             else:\n1490                 # Local non-relational field.\n1491                 final_field = field\n1492                 targets = (field,)\n1493                 if fail_on_missing and pos + 1 != len(names):\n1494                     raise FieldError(\n1495                         \"Cannot resolve keyword %r into field. Join on '%s'\"\n1496                         \" not permitted.\" % (names[pos + 1], name))\n1497                 break\n1498         return path, final_field, targets, names[pos + 1:]\n1499 \n1500     def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True,\n1501                     reuse_with_filtered_relation=False):\n1502         \"\"\"\n1503         Compute the necessary table joins for the passage through the fields\n1504         given in 'names'. 'opts' is the Options class for the current model\n1505         (which gives the table we are starting from), 'alias' is the alias for\n1506         the table to start the joining from.\n1507 \n1508         The 'can_reuse' defines the reverse foreign key joins we can reuse. It\n1509         can be None in which case all joins are reusable or a set of aliases\n1510         that can be reused. Note that non-reverse foreign keys are always\n1511         reusable when using setup_joins().\n1512 \n1513         The 'reuse_with_filtered_relation' can be used to force 'can_reuse'\n1514         parameter and force the relation on the given connections.\n1515 \n1516         If 'allow_many' is False, then any reverse foreign key seen will\n1517         generate a MultiJoin exception.\n1518 \n1519         Return the final field involved in the joins, the target field (used\n1520         for any 'where' constraint), the final 'opts' value, the joins, the\n1521         field path traveled to generate the joins, and a transform function\n1522         that takes a field and alias and is equivalent to `field.get_col(alias)`\n1523         in the simple case but wraps field transforms if they were included in\n1524         names.\n1525 \n1526         The target field is the field containing the concrete value. Final\n1527         field can be something different, for example foreign key pointing to\n1528         that value. Final field is needed for example in some value\n1529         conversions (convert 'obj' in fk__id=obj to pk val using the foreign\n1530         key field for example).\n1531         \"\"\"\n1532         joins = [alias]\n1533         # The transform can't be applied yet, as joins must be trimmed later.\n1534         # To avoid making every caller of this method look up transforms\n1535         # directly, compute transforms here and create a partial that converts\n1536         # fields to the appropriate wrapped version.\n1537 \n1538         def final_transformer(field, alias):\n1539             return field.get_col(alias)\n1540 \n1541         # Try resolving all the names as fields first. If there's an error,\n1542         # treat trailing names as lookups until a field can be resolved.\n1543         last_field_exception = None\n1544         for pivot in range(len(names), 0, -1):\n1545             try:\n1546                 path, final_field, targets, rest = self.names_to_path(\n1547                     names[:pivot], opts, allow_many, fail_on_missing=True,\n1548                 )\n1549             except FieldError as exc:\n1550                 if pivot == 1:\n1551                     # The first item cannot be a lookup, so it's safe\n1552                     # to raise the field error here.\n1553                     raise\n1554                 else:\n1555                     last_field_exception = exc\n1556             else:\n1557                 # The transforms are the remaining items that couldn't be\n1558                 # resolved into fields.\n1559                 transforms = names[pivot:]\n1560                 break\n1561         for name in transforms:\n1562             def transform(field, alias, *, name, previous):\n1563                 try:\n1564                     wrapped = previous(field, alias)\n1565                     return self.try_transform(wrapped, name)\n1566                 except FieldError:\n1567                     # FieldError is raised if the transform doesn't exist.\n1568                     if isinstance(final_field, Field) and last_field_exception:\n1569                         raise last_field_exception\n1570                     else:\n1571                         raise\n1572             final_transformer = functools.partial(transform, name=name, previous=final_transformer)\n1573         # Then, add the path to the query's joins. Note that we can't trim\n1574         # joins at this stage - we will need the information about join type\n1575         # of the trimmed joins.\n1576         for join in path:\n1577             if join.filtered_relation:\n1578                 filtered_relation = join.filtered_relation.clone()\n1579                 table_alias = filtered_relation.alias\n1580             else:\n1581                 filtered_relation = None\n1582                 table_alias = None\n1583             opts = join.to_opts\n1584             if join.direct:\n1585                 nullable = self.is_nullable(join.join_field)\n1586             else:\n1587                 nullable = True\n1588             connection = Join(\n1589                 opts.db_table, alias, table_alias, INNER, join.join_field,\n1590                 nullable, filtered_relation=filtered_relation,\n1591             )\n1592             reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None\n1593             alias = self.join(\n1594                 connection, reuse=reuse,\n1595                 reuse_with_filtered_relation=reuse_with_filtered_relation,\n1596             )\n1597             joins.append(alias)\n1598             if filtered_relation:\n1599                 filtered_relation.path = joins[:]\n1600         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)\n1601 \n1602     def trim_joins(self, targets, joins, path):\n1603         \"\"\"\n1604         The 'target' parameter is the final field being joined to, 'joins'\n1605         is the full list of join aliases. The 'path' contain the PathInfos\n1606         used to create the joins.\n1607 \n1608         Return the final target field and table alias and the new active\n1609         joins.\n1610 \n1611         Always trim any direct join if the target column is already in the\n1612         previous table. Can't trim reverse joins as it's unknown if there's\n1613         anything on the other side of the join.\n1614         \"\"\"\n1615         joins = joins[:]\n1616         for pos, info in enumerate(reversed(path)):\n1617             if len(joins) == 1 or not info.direct:\n1618                 break\n1619             if info.filtered_relation:\n1620                 break\n1621             join_targets = {t.column for t in info.join_field.foreign_related_fields}\n1622             cur_targets = {t.column for t in targets}\n1623             if not cur_targets.issubset(join_targets):\n1624                 break\n1625             targets_dict = {r[1].column: r[0] for r in info.join_field.related_fields if r[1].column in cur_targets}\n1626             targets = tuple(targets_dict[t.column] for t in targets)\n1627             self.unref_alias(joins.pop())\n1628         return targets, joins[-1], joins\n1629 \n1630     @classmethod\n1631     def _gen_col_aliases(cls, exprs):\n1632         for expr in exprs:\n1633             if isinstance(expr, Col):\n1634                 yield expr.alias\n1635             else:\n1636                 yield from cls._gen_col_aliases(expr.get_source_expressions())\n1637 \n1638     def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False, simple_col=False):\n1639         if not allow_joins and LOOKUP_SEP in name:\n1640             raise FieldError(\"Joined field references are not permitted in this query\")\n1641         annotation = self.annotations.get(name)\n1642         if annotation is not None:\n1643             if not allow_joins:\n1644                 for alias in self._gen_col_aliases([annotation]):\n1645                     if isinstance(self.alias_map[alias], Join):\n1646                         raise FieldError(\n1647                             'Joined field references are not permitted in '\n1648                             'this query'\n1649                         )\n1650             if summarize:\n1651                 # Summarize currently means we are doing an aggregate() query\n1652                 # which is executed as a wrapped subquery if any of the\n1653                 # aggregate() elements reference an existing annotation. In\n1654                 # that case we need to return a Ref to the subquery's annotation.\n1655                 return Ref(name, self.annotation_select[name])\n1656             else:\n1657                 return annotation\n1658         else:\n1659             field_list = name.split(LOOKUP_SEP)\n1660             join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)\n1661             targets, final_alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)\n1662             if not allow_joins and len(join_list) > 1:\n1663                 raise FieldError('Joined field references are not permitted in this query')\n1664             if len(targets) > 1:\n1665                 raise FieldError(\"Referencing multicolumn fields with F() objects \"\n1666                                  \"isn't supported\")\n1667             # Verify that the last lookup in name is a field or a transform:\n1668             # transform_function() raises FieldError if not.\n1669             join_info.transform_function(targets[0], final_alias)\n1670             if reuse is not None:\n1671                 reuse.update(join_list)\n1672             col = _get_col(targets[0], join_info.targets[0], join_list[-1], simple_col)\n1673             return col\n1674 \n1675     def split_exclude(self, filter_expr, can_reuse, names_with_path):\n1676         \"\"\"\n1677         When doing an exclude against any kind of N-to-many relation, we need\n1678         to use a subquery. This method constructs the nested query, given the\n1679         original exclude filter (filter_expr) and the portion up to the first\n1680         N-to-many relation field.\n1681 \n1682         For example, if the origin filter is ~Q(child__name='foo'), filter_expr\n1683         is ('child__name', 'foo') and can_reuse is a set of joins usable for\n1684         filters in the original query.\n1685 \n1686         We will turn this into equivalent of:\n1687             WHERE NOT (pk IN (SELECT parent_id FROM thetable\n1688                               WHERE name = 'foo' AND parent_id IS NOT NULL))\n1689 \n1690         It might be worth it to consider using WHERE NOT EXISTS as that has\n1691         saner null handling, and is easier for the backend's optimizer to\n1692         handle.\n1693         \"\"\"\n1694         filter_lhs, filter_rhs = filter_expr\n1695         if isinstance(filter_rhs, F):\n1696             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))\n1697         # Generate the inner query.\n1698         query = Query(self.model)\n1699         query._filtered_relations = self._filtered_relations\n1700         query.add_filter(filter_expr)\n1701         query.clear_ordering(True)\n1702         # Try to have as simple as possible subquery -> trim leading joins from\n1703         # the subquery.\n1704         trimmed_prefix, contains_louter = query.trim_start(names_with_path)\n1705 \n1706         # Add extra check to make sure the selected field will not be null\n1707         # since we are adding an IN <subquery> clause. This prevents the\n1708         # database from tripping over IN (...,NULL,...) selects and returning\n1709         # nothing\n1710         col = query.select[0]\n1711         select_field = col.target\n1712         alias = col.alias\n1713         if self.is_nullable(select_field):\n1714             lookup_class = select_field.get_lookup('isnull')\n1715             lookup = lookup_class(select_field.get_col(alias), False)\n1716             query.where.add(lookup, AND)\n1717         if alias in can_reuse:\n1718             pk = select_field.model._meta.pk\n1719             # Need to add a restriction so that outer query's filters are in effect for\n1720             # the subquery, too.\n1721             query.bump_prefix(self)\n1722             lookup_class = select_field.get_lookup('exact')\n1723             # Note that the query.select[0].alias is different from alias\n1724             # due to bump_prefix above.\n1725             lookup = lookup_class(pk.get_col(query.select[0].alias),\n1726                                   pk.get_col(alias))\n1727             query.where.add(lookup, AND)\n1728             query.external_aliases.add(alias)\n1729 \n1730         condition, needed_inner = self.build_filter(\n1731             ('%s__in' % trimmed_prefix, query),\n1732             current_negated=True, branch_negated=True, can_reuse=can_reuse)\n1733         if contains_louter:\n1734             or_null_condition, _ = self.build_filter(\n1735                 ('%s__isnull' % trimmed_prefix, True),\n1736                 current_negated=True, branch_negated=True, can_reuse=can_reuse)\n1737             condition.add(or_null_condition, OR)\n1738             # Note that the end result will be:\n1739             # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.\n1740             # This might look crazy but due to how IN works, this seems to be\n1741             # correct. If the IS NOT NULL check is removed then outercol NOT\n1742             # IN will return UNKNOWN. If the IS NULL check is removed, then if\n1743             # outercol IS NULL we will not match the row.\n1744         return condition, needed_inner\n1745 \n1746     def set_empty(self):\n1747         self.where.add(NothingNode(), AND)\n1748 \n1749     def is_empty(self):\n1750         return any(isinstance(c, NothingNode) for c in self.where.children)\n1751 \n1752     def set_limits(self, low=None, high=None):\n1753         \"\"\"\n1754         Adjust the limits on the rows retrieved. Use low/high to set these,\n1755         as it makes it more Pythonic to read and write. When the SQL query is\n1756         created, convert them to the appropriate offset and limit values.\n1757 \n1758         Apply any limits passed in here to the existing constraints. Add low\n1759         to the current low value and clamp both to any existing high value.\n1760         \"\"\"\n1761         if high is not None:\n1762             if self.high_mark is not None:\n1763                 self.high_mark = min(self.high_mark, self.low_mark + high)\n1764             else:\n1765                 self.high_mark = self.low_mark + high\n1766         if low is not None:\n1767             if self.high_mark is not None:\n1768                 self.low_mark = min(self.high_mark, self.low_mark + low)\n1769             else:\n1770                 self.low_mark = self.low_mark + low\n1771 \n1772         if self.low_mark == self.high_mark:\n1773             self.set_empty()\n1774 \n1775     def clear_limits(self):\n1776         \"\"\"Clear any existing limits.\"\"\"\n1777         self.low_mark, self.high_mark = 0, None\n1778 \n1779     @property\n1780     def is_sliced(self):\n1781         return self.low_mark != 0 or self.high_mark is not None\n1782 \n1783     def has_limit_one(self):\n1784         return self.high_mark is not None and (self.high_mark - self.low_mark) == 1\n1785 \n1786     def can_filter(self):\n1787         \"\"\"\n1788         Return True if adding filters to this instance is still possible.\n1789 \n1790         Typically, this means no limits or offsets have been put on the results.\n1791         \"\"\"\n1792         return not self.is_sliced\n1793 \n1794     def clear_select_clause(self):\n1795         \"\"\"Remove all fields from SELECT clause.\"\"\"\n1796         self.select = ()\n1797         self.default_cols = False\n1798         self.select_related = False\n1799         self.set_extra_mask(())\n1800         self.set_annotation_mask(())\n1801 \n1802     def clear_select_fields(self):\n1803         \"\"\"\n1804         Clear the list of fields to select (but not extra_select columns).\n1805         Some queryset types completely replace any existing list of select\n1806         columns.\n1807         \"\"\"\n1808         self.select = ()\n1809         self.values_select = ()\n1810 \n1811     def add_select_col(self, col):\n1812         self.select += col,\n1813         self.values_select += col.output_field.name,\n1814 \n1815     def set_select(self, cols):\n1816         self.default_cols = False\n1817         self.select = tuple(cols)\n1818 \n1819     def add_distinct_fields(self, *field_names):\n1820         \"\"\"\n1821         Add and resolve the given fields to the query's \"distinct on\" clause.\n1822         \"\"\"\n1823         self.distinct_fields = field_names\n1824         self.distinct = True\n1825 \n1826     def add_fields(self, field_names, allow_m2m=True):\n1827         \"\"\"\n1828         Add the given (model) fields to the select set. Add the field names in\n1829         the order specified.\n1830         \"\"\"\n1831         alias = self.get_initial_alias()\n1832         opts = self.get_meta()\n1833 \n1834         try:\n1835             cols = []\n1836             for name in field_names:\n1837                 # Join promotion note - we must not remove any rows here, so\n1838                 # if there is no existing joins, use outer join.\n1839                 join_info = self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m)\n1840                 targets, final_alias, joins = self.trim_joins(\n1841                     join_info.targets,\n1842                     join_info.joins,\n1843                     join_info.path,\n1844                 )\n1845                 for target in targets:\n1846                     cols.append(join_info.transform_function(target, final_alias))\n1847             if cols:\n1848                 self.set_select(cols)\n1849         except MultiJoin:\n1850             raise FieldError(\"Invalid field name: '%s'\" % name)\n1851         except FieldError:\n1852             if LOOKUP_SEP in name:\n1853                 # For lookups spanning over relationships, show the error\n1854                 # from the model on which the lookup failed.\n1855                 raise\n1856             else:\n1857                 names = sorted([\n1858                     *get_field_names_from_opts(opts), *self.extra,\n1859                     *self.annotation_select, *self._filtered_relations\n1860                 ])\n1861                 raise FieldError(\"Cannot resolve keyword %r into field. \"\n1862                                  \"Choices are: %s\" % (name, \", \".join(names)))\n1863 \n1864     def add_ordering(self, *ordering):\n1865         \"\"\"\n1866         Add items from the 'ordering' sequence to the query's \"order by\"\n1867         clause. These items are either field names (not column names) --\n1868         possibly with a direction prefix ('-' or '?') -- or OrderBy\n1869         expressions.\n1870 \n1871         If 'ordering' is empty, clear all ordering from the query.\n1872         \"\"\"\n1873         errors = []\n1874         for item in ordering:\n1875             if not hasattr(item, 'resolve_expression') and not ORDER_PATTERN.match(item):\n1876                 errors.append(item)\n1877             if getattr(item, 'contains_aggregate', False):\n1878                 raise FieldError(\n1879                     'Using an aggregate in order_by() without also including '\n1880                     'it in annotate() is not allowed: %s' % item\n1881                 )\n1882         if errors:\n1883             raise FieldError('Invalid order_by arguments: %s' % errors)\n1884         if ordering:\n1885             self.order_by += ordering\n1886         else:\n1887             self.default_ordering = False\n1888 \n1889     def clear_ordering(self, force_empty):\n1890         \"\"\"\n1891         Remove any ordering settings. If 'force_empty' is True, there will be\n1892         no ordering in the resulting query (not even the model's default).\n1893         \"\"\"\n1894         self.order_by = ()\n1895         self.extra_order_by = ()\n1896         if force_empty:\n1897             self.default_ordering = False\n1898 \n1899     def set_group_by(self):\n1900         \"\"\"\n1901         Expand the GROUP BY clause required by the query.\n1902 \n1903         This will usually be the set of all non-aggregate fields in the\n1904         return data. If the database backend supports grouping by the\n1905         primary key, and the query would be equivalent, the optimization\n1906         will be made automatically.\n1907         \"\"\"\n1908         group_by = list(self.select)\n1909         if self.annotation_select:\n1910             for alias, annotation in self.annotation_select.items():\n1911                 try:\n1912                     inspect.getcallargs(annotation.get_group_by_cols, alias=alias)\n1913                 except TypeError:\n1914                     annotation_class = annotation.__class__\n1915                     msg = (\n1916                         '`alias=None` must be added to the signature of '\n1917                         '%s.%s.get_group_by_cols().'\n1918                     ) % (annotation_class.__module__, annotation_class.__qualname__)\n1919                     warnings.warn(msg, category=RemovedInDjango40Warning)\n1920                     group_by_cols = annotation.get_group_by_cols()\n1921                 else:\n1922                     group_by_cols = annotation.get_group_by_cols(alias=alias)\n1923                 group_by.extend(group_by_cols)\n1924         self.group_by = tuple(group_by)\n1925 \n1926     def add_select_related(self, fields):\n1927         \"\"\"\n1928         Set up the select_related data structure so that we only select\n1929         certain related models (as opposed to all models, when\n1930         self.select_related=True).\n1931         \"\"\"\n1932         if isinstance(self.select_related, bool):\n1933             field_dict = {}\n1934         else:\n1935             field_dict = self.select_related\n1936         for field in fields:\n1937             d = field_dict\n1938             for part in field.split(LOOKUP_SEP):\n1939                 d = d.setdefault(part, {})\n1940         self.select_related = field_dict\n1941 \n1942     def add_extra(self, select, select_params, where, params, tables, order_by):\n1943         \"\"\"\n1944         Add data to the various extra_* attributes for user-created additions\n1945         to the query.\n1946         \"\"\"\n1947         if select:\n1948             # We need to pair any placeholder markers in the 'select'\n1949             # dictionary with their parameters in 'select_params' so that\n1950             # subsequent updates to the select dictionary also adjust the\n1951             # parameters appropriately.\n1952             select_pairs = {}\n1953             if select_params:\n1954                 param_iter = iter(select_params)\n1955             else:\n1956                 param_iter = iter([])\n1957             for name, entry in select.items():\n1958                 entry = str(entry)\n1959                 entry_params = []\n1960                 pos = entry.find(\"%s\")\n1961                 while pos != -1:\n1962                     if pos == 0 or entry[pos - 1] != '%':\n1963                         entry_params.append(next(param_iter))\n1964                     pos = entry.find(\"%s\", pos + 2)\n1965                 select_pairs[name] = (entry, entry_params)\n1966             self.extra.update(select_pairs)\n1967         if where or params:\n1968             self.where.add(ExtraWhere(where, params), AND)\n1969         if tables:\n1970             self.extra_tables += tuple(tables)\n1971         if order_by:\n1972             self.extra_order_by = order_by\n1973 \n1974     def clear_deferred_loading(self):\n1975         \"\"\"Remove any fields from the deferred loading set.\"\"\"\n1976         self.deferred_loading = (frozenset(), True)\n1977 \n1978     def add_deferred_loading(self, field_names):\n1979         \"\"\"\n1980         Add the given list of model field names to the set of fields to\n1981         exclude from loading from the database when automatic column selection\n1982         is done. Add the new field names to any existing field names that\n1983         are deferred (or removed from any existing field names that are marked\n1984         as the only ones for immediate loading).\n1985         \"\"\"\n1986         # Fields on related models are stored in the literal double-underscore\n1987         # format, so that we can use a set datastructure. We do the foo__bar\n1988         # splitting and handling when computing the SQL column names (as part of\n1989         # get_columns()).\n1990         existing, defer = self.deferred_loading\n1991         if defer:\n1992             # Add to existing deferred names.\n1993             self.deferred_loading = existing.union(field_names), True\n1994         else:\n1995             # Remove names from the set of any existing \"immediate load\" names.\n1996             self.deferred_loading = existing.difference(field_names), False\n1997 \n1998     def add_immediate_loading(self, field_names):\n1999         \"\"\"\n2000         Add the given list of model field names to the set of fields to\n2001         retrieve when the SQL is executed (\"immediate loading\" fields). The\n2002         field names replace any existing immediate loading field names. If\n2003         there are field names already specified for deferred loading, remove\n2004         those names from the new field_names before storing the new names\n2005         for immediate loading. (That is, immediate loading overrides any\n2006         existing immediate values, but respects existing deferrals.)\n2007         \"\"\"\n2008         existing, defer = self.deferred_loading\n2009         field_names = set(field_names)\n2010         if 'pk' in field_names:\n2011             field_names.remove('pk')\n2012             field_names.add(self.get_meta().pk.name)\n2013 \n2014         if defer:\n2015             # Remove any existing deferred names from the current set before\n2016             # setting the new names.\n2017             self.deferred_loading = field_names.difference(existing), False\n2018         else:\n2019             # Replace any existing \"immediate load\" field names.\n2020             self.deferred_loading = frozenset(field_names), False\n2021 \n2022     def get_loaded_field_names(self):\n2023         \"\"\"\n2024         If any fields are marked to be deferred, return a dictionary mapping\n2025         models to a set of names in those fields that will be loaded. If a\n2026         model is not in the returned dictionary, none of its fields are\n2027         deferred.\n2028 \n2029         If no fields are marked for deferral, return an empty dictionary.\n2030         \"\"\"\n2031         # We cache this because we call this function multiple times\n2032         # (compiler.fill_related_selections, query.iterator)\n2033         try:\n2034             return self._loaded_field_names_cache\n2035         except AttributeError:\n2036             collection = {}\n2037             self.deferred_to_data(collection, self.get_loaded_field_names_cb)\n2038             self._loaded_field_names_cache = collection\n2039             return collection\n2040 \n2041     def get_loaded_field_names_cb(self, target, model, fields):\n2042         \"\"\"Callback used by get_deferred_field_names().\"\"\"\n2043         target[model] = {f.attname for f in fields}\n2044 \n2045     def set_annotation_mask(self, names):\n2046         \"\"\"Set the mask of annotations that will be returned by the SELECT.\"\"\"\n2047         if names is None:\n2048             self.annotation_select_mask = None\n2049         else:\n2050             self.annotation_select_mask = set(names)\n2051         self._annotation_select_cache = None\n2052 \n2053     def append_annotation_mask(self, names):\n2054         if self.annotation_select_mask is not None:\n2055             self.set_annotation_mask(self.annotation_select_mask.union(names))\n2056 \n2057     def set_extra_mask(self, names):\n2058         \"\"\"\n2059         Set the mask of extra select items that will be returned by SELECT.\n2060         Don't remove them from the Query since they might be used later.\n2061         \"\"\"\n2062         if names is None:\n2063             self.extra_select_mask = None\n2064         else:\n2065             self.extra_select_mask = set(names)\n2066         self._extra_select_cache = None\n2067 \n2068     def set_values(self, fields):\n2069         self.select_related = False\n2070         self.clear_deferred_loading()\n2071         self.clear_select_fields()\n2072 \n2073         if self.group_by is True:\n2074             self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)\n2075             self.set_group_by()\n2076             self.clear_select_fields()\n2077 \n2078         if fields:\n2079             field_names = []\n2080             extra_names = []\n2081             annotation_names = []\n2082             if not self.extra and not self.annotations:\n2083                 # Shortcut - if there are no extra or annotations, then\n2084                 # the values() clause must be just field names.\n2085                 field_names = list(fields)\n2086             else:\n2087                 self.default_cols = False\n2088                 for f in fields:\n2089                     if f in self.extra_select:\n2090                         extra_names.append(f)\n2091                     elif f in self.annotation_select:\n2092                         annotation_names.append(f)\n2093                     else:\n2094                         field_names.append(f)\n2095             self.set_extra_mask(extra_names)\n2096             self.set_annotation_mask(annotation_names)\n2097         else:\n2098             field_names = [f.attname for f in self.model._meta.concrete_fields]\n2099 \n2100         self.values_select = tuple(field_names)\n2101         self.add_fields(field_names, True)\n2102 \n2103     @property\n2104     def annotation_select(self):\n2105         \"\"\"\n2106         Return the dictionary of aggregate columns that are not masked and\n2107         should be used in the SELECT clause. Cache this result for performance.\n2108         \"\"\"\n2109         if self._annotation_select_cache is not None:\n2110             return self._annotation_select_cache\n2111         elif not self.annotations:\n2112             return {}\n2113         elif self.annotation_select_mask is not None:\n2114             self._annotation_select_cache = {\n2115                 k: v for k, v in self.annotations.items()\n2116                 if k in self.annotation_select_mask\n2117             }\n2118             return self._annotation_select_cache\n2119         else:\n2120             return self.annotations\n2121 \n2122     @property\n2123     def extra_select(self):\n2124         if self._extra_select_cache is not None:\n2125             return self._extra_select_cache\n2126         if not self.extra:\n2127             return {}\n2128         elif self.extra_select_mask is not None:\n2129             self._extra_select_cache = {\n2130                 k: v for k, v in self.extra.items()\n2131                 if k in self.extra_select_mask\n2132             }\n2133             return self._extra_select_cache\n2134         else:\n2135             return self.extra\n2136 \n2137     def trim_start(self, names_with_path):\n2138         \"\"\"\n2139         Trim joins from the start of the join path. The candidates for trim\n2140         are the PathInfos in names_with_path structure that are m2m joins.\n2141 \n2142         Also set the select column so the start matches the join.\n2143 \n2144         This method is meant to be used for generating the subquery joins &\n2145         cols in split_exclude().\n2146 \n2147         Return a lookup usable for doing outerq.filter(lookup=self) and a\n2148         boolean indicating if the joins in the prefix contain a LEFT OUTER join.\n2149         _\"\"\"\n2150         all_paths = []\n2151         for _, paths in names_with_path:\n2152             all_paths.extend(paths)\n2153         contains_louter = False\n2154         # Trim and operate only on tables that were generated for\n2155         # the lookup part of the query. That is, avoid trimming\n2156         # joins generated for F() expressions.\n2157         lookup_tables = [\n2158             t for t in self.alias_map\n2159             if t in self._lookup_joins or t == self.base_table\n2160         ]\n2161         for trimmed_paths, path in enumerate(all_paths):\n2162             if path.m2m:\n2163                 break\n2164             if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type == LOUTER:\n2165                 contains_louter = True\n2166             alias = lookup_tables[trimmed_paths]\n2167             self.unref_alias(alias)\n2168         # The path.join_field is a Rel, lets get the other side's field\n2169         join_field = path.join_field.field\n2170         # Build the filter prefix.\n2171         paths_in_prefix = trimmed_paths\n2172         trimmed_prefix = []\n2173         for name, path in names_with_path:\n2174             if paths_in_prefix - len(path) < 0:\n2175                 break\n2176             trimmed_prefix.append(name)\n2177             paths_in_prefix -= len(path)\n2178         trimmed_prefix.append(\n2179             join_field.foreign_related_fields[0].name)\n2180         trimmed_prefix = LOOKUP_SEP.join(trimmed_prefix)\n2181         # Lets still see if we can trim the first join from the inner query\n2182         # (that is, self). We can't do this for:\n2183         # - LEFT JOINs because we would miss those rows that have nothing on\n2184         #   the outer side,\n2185         # - INNER JOINs from filtered relations because we would miss their\n2186         #   filters.\n2187         first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]\n2188         if first_join.join_type != LOUTER and not first_join.filtered_relation:\n2189             select_fields = [r[0] for r in join_field.related_fields]\n2190             select_alias = lookup_tables[trimmed_paths + 1]\n2191             self.unref_alias(lookup_tables[trimmed_paths])\n2192             extra_restriction = join_field.get_extra_restriction(\n2193                 self.where_class, None, lookup_tables[trimmed_paths + 1])\n2194             if extra_restriction:\n2195                 self.where.add(extra_restriction, AND)\n2196         else:\n2197             # TODO: It might be possible to trim more joins from the start of the\n2198             # inner query if it happens to have a longer join chain containing the\n2199             # values in select_fields. Lets punt this one for now.\n2200             select_fields = [r[1] for r in join_field.related_fields]\n2201             select_alias = lookup_tables[trimmed_paths]\n2202         # The found starting point is likely a Join instead of a BaseTable reference.\n2203         # But the first entry in the query's FROM clause must not be a JOIN.\n2204         for table in self.alias_map:\n2205             if self.alias_refcount[table] > 0:\n2206                 self.alias_map[table] = BaseTable(self.alias_map[table].table_name, table)\n2207                 break\n2208         self.set_select([f.get_col(select_alias) for f in select_fields])\n2209         return trimmed_prefix, contains_louter\n2210 \n2211     def is_nullable(self, field):\n2212         \"\"\"\n2213         Check if the given field should be treated as nullable.\n2214 \n2215         Some backends treat '' as null and Django treats such fields as\n2216         nullable for those backends. In such situations field.null can be\n2217         False even if we should treat the field as nullable.\n2218         \"\"\"\n2219         # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have\n2220         # (nor should it have) knowledge of which connection is going to be\n2221         # used. The proper fix would be to defer all decisions where\n2222         # is_nullable() is needed to the compiler stage, but that is not easy\n2223         # to do currently.\n2224         return (\n2225             connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and\n2226             field.empty_strings_allowed\n2227         ) or field.null\n",
        "intended_behavior": "Modifications in the `Query` class are necessary to support translating expressions received from `QuerySet.filter()` into valid SQL. This might include extending the `build_filter` and related methods to detect when an argument is an expression rather than a simple filter. The logic should be capable of parsing these expressions, integrating their logic into the SQL where clause, and handling any argument values accordingly. This enhancement should retain the class's current functionality for cases that do not involve the newly supported expressions."
    }
]