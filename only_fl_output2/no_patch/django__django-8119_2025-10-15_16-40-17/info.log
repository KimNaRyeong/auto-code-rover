2025-10-15 16:40:18.110 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-15 16:40:20.825 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=147, output_tokens=12, cost=0.001830
2025-10-15 16:40:20.826 | INFO     | Test agent decides that the issue statement does not contain reproduction steps; skipping reproducer tracing
2025-10-15 16:40:20.830 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 16:40:34.278 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=456, output_tokens=407, cost=0.016770
2025-10-15 16:40:34.285 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 16:40:36.768 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=761, output_tokens=58, cost=0.009350
2025-10-15 16:40:36.769 | DEBUG    | Extracted a valid json.
2025-10-15 16:40:36.775 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_method(\"filter\")",
        "search_class(\"Query\")",
        "search_class(\"QueryBuilder\")",
        "search_class(\"QuerySet\")",
        "search_code(\"F(\")"
    ],
    "bug_locations": []
}
2025-10-15 16:40:36.875 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-15 16:40:36.875 | DEBUG    | <Agent search> Analyzing search results.
2025-10-15 16:40:55.950 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3360, output_tokens=776, cost=0.056880
2025-10-15 16:40:55.967 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 16:41:07.230 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=4352, output_tokens=353, cost=0.054110
2025-10-15 16:41:07.238 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 16:41:15.253 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=707, output_tokens=295, cost=0.015920
2025-10-15 16:41:15.254 | DEBUG    | Extracted a valid json.
2025-10-15 16:41:15.254 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations": [
        {
            "file": "django/db/models/query.py",
            "class": "QuerySet",
            "method": "filter",
            "intended_behavior": "The `filter` method should be enhanced to parse and apply expressions passed as arguments. This involves extending the method's logic to not only handle keyword arguments representing field lookups and simple value comparisons but also to recognize and correctly interpret expressions involving model fields. The method should delegate the handling of these expressions to the underlying `Query` object, ensuring that complex expressions like `F('some_field').lower() == 'anssi'` are translated into the appropriate SQL. The enhancement must preserve the method's ability to handle its current argument types without regression."
        },
        {
            "file": "django/db/models/sql/query.py",
            "class": "Query",
            "method": "",
            "intended_behavior": "Modifications in the `Query` class are necessary to support translating expressions received from `QuerySet.filter()` into valid SQL. This might include extending the `build_filter` and related methods to detect when an argument is an expression rather than a simple filter. The logic should be capable of parsing these expressions, integrating their logic into the SQL where clause, and handling any argument values accordingly. This enhancement should retain the class's current functionality for cases that do not involve the newly supported expressions."
        }
    ]
}
2025-10-15 16:41:15.275 | DEBUG    | Bug location extracted successfully: [<file>django/db/models/query.py</file>
<class>QuerySet</class>
<method>filter</method>
<code>
888     def filter(self, *args, **kwargs):
889         """
890         Return a new QuerySet instance with the args ANDed to the existing
891         set.
892         """
893         self._not_support_combined_queries('filter')
894         return self._filter_or_exclude(False, *args, **kwargs)

</code><intended_behavior>The `filter` method should be enhanced to parse and apply expressions passed as arguments. This involves extending the method's logic to not only handle keyword arguments representing field lookups and simple value comparisons but also to recognize and correctly interpret expressions involving model fields. The method should delegate the handling of these expressions to the underlying `Query` object, ensuring that complex expressions like `F('some_field').lower() == 'anssi'` are translated into the appropriate SQL. The enhancement must preserve the method's ability to handle its current argument types without regression.</intended_behavior>, <file>django/db/models/query.py</file>
<class>QuerySet</class>
<method>None</method>
<code>
188 class QuerySet:
189     """Represent a lazy database lookup for a set of objects."""
190 
191     def __init__(self, model=None, query=None, using=None, hints=None):
192         self.model = model
193         self._db = using
194         self._hints = hints or {}
195         self.query = query or sql.Query(self.model)
196         self._result_cache = None
197         self._sticky_filter = False
198         self._for_write = False
199         self._prefetch_related_lookups = ()
200         self._prefetch_done = False
201         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
202         self._iterable_class = ModelIterable
203         self._fields = None
204 
205     def as_manager(cls):
206         # Address the circular dependency between `Queryset` and `Manager`.
207         from django.db.models.manager import Manager
208         manager = Manager.from_queryset(cls)()
209         manager._built_with_as_manager = True
210         return manager
211     as_manager.queryset_only = True
212     as_manager = classmethod(as_manager)
213 
214     ########################
215     # PYTHON MAGIC METHODS #
216     ########################
217 
218     def __deepcopy__(self, memo):
219         """Don't populate the QuerySet's cache."""
220         obj = self.__class__()
221         for k, v in self.__dict__.items():
222             if k == '_result_cache':
223                 obj.__dict__[k] = None
224             else:
225                 obj.__dict__[k] = copy.deepcopy(v, memo)
226         return obj
227 
228     def __getstate__(self):
229         # Force the cache to be fully populated.
230         self._fetch_all()
231         return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: get_version()}
232 
233     def __setstate__(self, state):
234         msg = None
235         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)
236         if pickled_version:
237             current_version = get_version()
238             if current_version != pickled_version:
239                 msg = (
240                     "Pickled queryset instance's Django version %s does not "
241                     "match the current version %s." % (pickled_version, current_version)
242                 )
243         else:
244             msg = "Pickled queryset instance's Django version is not specified."
245 
246         if msg:
247             warnings.warn(msg, RuntimeWarning, stacklevel=2)
248 
249         self.__dict__.update(state)
250 
251     def __repr__(self):
252         data = list(self[:REPR_OUTPUT_SIZE + 1])
253         if len(data) > REPR_OUTPUT_SIZE:
254             data[-1] = "...(remaining elements truncated)..."
255         return '<%s %r>' % (self.__class__.__name__, data)
256 
257     def __len__(self):
258         self._fetch_all()
259         return len(self._result_cache)
260 
261     def __iter__(self):
262         """
263         The queryset iterator protocol uses three nested iterators in the
264         default case:
265             1. sql.compiler.execute_sql()
266                - Returns 100 rows at time (constants.GET_ITERATOR_CHUNK_SIZE)
267                  using cursor.fetchmany(). This part is responsible for
268                  doing some column masking, and returning the rows in chunks.
269             2. sql.compiler.results_iter()
270                - Returns one row at time. At this point the rows are still just
271                  tuples. In some cases the return values are converted to
272                  Python values at this location.
273             3. self.iterator()
274                - Responsible for turning the rows into model objects.
275         """
276         self._fetch_all()
277         return iter(self._result_cache)
278 
279     def __bool__(self):
280         self._fetch_all()
281         return bool(self._result_cache)
282 
283     def __getitem__(self, k):
284         """Retrieve an item or slice from the set of results."""
285         if not isinstance(k, (int, slice)):
286             raise TypeError(
287                 'QuerySet indices must be integers or slices, not %s.'
288                 % type(k).__name__
289             )
290         assert ((not isinstance(k, slice) and (k >= 0)) or
291                 (isinstance(k, slice) and (k.start is None or k.start >= 0) and
292                  (k.stop is None or k.stop >= 0))), \
293             "Negative indexing is not supported."
294 
295         if self._result_cache is not None:
296             return self._result_cache[k]
297 
298         if isinstance(k, slice):
299             qs = self._chain()
300             if k.start is not None:
301                 start = int(k.start)
302             else:
303                 start = None
304             if k.stop is not None:
305                 stop = int(k.stop)
306             else:
307                 stop = None
308             qs.query.set_limits(start, stop)
309             return list(qs)[::k.step] if k.step else qs
310 
311         qs = self._chain()
312         qs.query.set_limits(k, k + 1)
313         qs._fetch_all()
314         return qs._result_cache[0]
315 
316     def __and__(self, other):
317         self._merge_sanity_check(other)
318         if isinstance(other, EmptyQuerySet):
319             return other
320         if isinstance(self, EmptyQuerySet):
321             return self
322         combined = self._chain()
323         combined._merge_known_related_objects(other)
324         combined.query.combine(other.query, sql.AND)
325         return combined
326 
327     def __or__(self, other):
328         self._merge_sanity_check(other)
329         if isinstance(self, EmptyQuerySet):
330             return other
331         if isinstance(other, EmptyQuerySet):
332             return self
333         query = self if self.query.can_filter() else self.model._base_manager.filter(pk__in=self.values('pk'))
334         combined = query._chain()
335         combined._merge_known_related_objects(other)
336         if not other.query.can_filter():
337             other = other.model._base_manager.filter(pk__in=other.values('pk'))
338         combined.query.combine(other.query, sql.OR)
339         return combined
340 
341     ####################################
342     # METHODS THAT DO DATABASE QUERIES #
343     ####################################
344 
345     def _iterator(self, use_chunked_fetch, chunk_size):
346         yield from self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size)
347 
348     def iterator(self, chunk_size=2000):
349         """
350         An iterator over the results from applying this QuerySet to the
351         database.
352         """
353         if chunk_size <= 0:
354             raise ValueError('Chunk size must be strictly positive.')
355         use_chunked_fetch = not connections[self.db].settings_dict.get('DISABLE_SERVER_SIDE_CURSORS')
356         return self._iterator(use_chunked_fetch, chunk_size)
357 
358     def aggregate(self, *args, **kwargs):
359         """
360         Return a dictionary containing the calculations (aggregation)
361         over the current queryset.
362 
363         If args is present the expression is passed as a kwarg using
364         the Aggregate object's default alias.
365         """
366         if self.query.distinct_fields:
367             raise NotImplementedError("aggregate() + distinct(fields) not implemented.")
368         self._validate_values_are_expressions((*args, *kwargs.values()), method_name='aggregate')
369         for arg in args:
370             # The default_alias property raises TypeError if default_alias
371             # can't be set automatically or AttributeError if it isn't an
372             # attribute.
373             try:
374                 arg.default_alias
375             except (AttributeError, TypeError):
376                 raise TypeError("Complex aggregates require an alias")
377             kwargs[arg.default_alias] = arg
378 
379         query = self.query.chain()
380         for (alias, aggregate_expr) in kwargs.items():
381             query.add_annotation(aggregate_expr, alias, is_summary=True)
382             if not query.annotations[alias].contains_aggregate:
383                 raise TypeError("%s is not an aggregate expression" % alias)
384         return query.get_aggregation(self.db, kwargs)
385 
386     def count(self):
387         """
388         Perform a SELECT COUNT() and return the number of records as an
389         integer.
390 
391         If the QuerySet is already fully cached, return the length of the
392         cached results set to avoid multiple SELECT COUNT(*) calls.
393         """
394         if self._result_cache is not None:
395             return len(self._result_cache)
396 
397         return self.query.get_count(using=self.db)
398 
399     def get(self, *args, **kwargs):
400         """
401         Perform the query and return a single object matching the given
402         keyword arguments.
403         """
404         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
405         if self.query.can_filter() and not self.query.distinct_fields:
406             clone = clone.order_by()
407         limit = None
408         if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:
409             limit = MAX_GET_RESULTS
410             clone.query.set_limits(high=limit)
411         num = len(clone)
412         if num == 1:
413             return clone._result_cache[0]
414         if not num:
415             raise self.model.DoesNotExist(
416                 "%s matching query does not exist." %
417                 self.model._meta.object_name
418             )
419         raise self.model.MultipleObjectsReturned(
420             'get() returned more than one %s -- it returned %s!' % (
421                 self.model._meta.object_name,
422                 num if not limit or num < limit else 'more than %s' % (limit - 1),
423             )
424         )
425 
426     def create(self, **kwargs):
427         """
428         Create a new object with the given kwargs, saving it to the database
429         and returning the created object.
430         """
431         obj = self.model(**kwargs)
432         self._for_write = True
433         obj.save(force_insert=True, using=self.db)
434         return obj
435 
436     def _populate_pk_values(self, objs):
437         for obj in objs:
438             if obj.pk is None:
439                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
440 
441     def bulk_create(self, objs, batch_size=None, ignore_conflicts=False):
442         """
443         Insert each of the instances into the database. Do *not* call
444         save() on each of the instances, do not send any pre/post_save
445         signals, and do not set the primary key attribute if it is an
446         autoincrement field (except if features.can_return_rows_from_bulk_insert=True).
447         Multi-table models are not supported.
448         """
449         # When you bulk insert you don't get the primary keys back (if it's an
450         # autoincrement, except if can_return_rows_from_bulk_insert=True), so
451         # you can't insert into the child tables which references this. There
452         # are two workarounds:
453         # 1) This could be implemented if you didn't have an autoincrement pk
454         # 2) You could do it by doing O(n) normal inserts into the parent
455         #    tables to get the primary keys back and then doing a single bulk
456         #    insert into the childmost table.
457         # We currently set the primary keys on the objects when using
458         # PostgreSQL via the RETURNING ID clause. It should be possible for
459         # Oracle as well, but the semantics for extracting the primary keys is
460         # trickier so it's not done yet.
461         assert batch_size is None or batch_size > 0
462         # Check that the parents share the same concrete model with the our
463         # model to detect the inheritance pattern ConcreteGrandParent ->
464         # MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy
465         # would not identify that case as involving multiple tables.
466         for parent in self.model._meta.get_parent_list():
467             if parent._meta.concrete_model is not self.model._meta.concrete_model:
468                 raise ValueError("Can't bulk create a multi-table inherited model")
469         if not objs:
470             return objs
471         self._for_write = True
472         connection = connections[self.db]
473         fields = self.model._meta.concrete_fields
474         objs = list(objs)
475         self._populate_pk_values(objs)
476         with transaction.atomic(using=self.db, savepoint=False):
477             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
478             if objs_with_pk:
479                 self._batched_insert(objs_with_pk, fields, batch_size, ignore_conflicts=ignore_conflicts)
480                 for obj_with_pk in objs_with_pk:
481                     obj_with_pk._state.adding = False
482                     obj_with_pk._state.db = self.db
483             if objs_without_pk:
484                 fields = [f for f in fields if not isinstance(f, AutoField)]
485                 ids = self._batched_insert(objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts)
486                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
487                     assert len(ids) == len(objs_without_pk)
488                 for obj_without_pk, pk in zip(objs_without_pk, ids):
489                     obj_without_pk.pk = pk
490                     obj_without_pk._state.adding = False
491                     obj_without_pk._state.db = self.db
492 
493         return objs
494 
495     def bulk_update(self, objs, fields, batch_size=None):
496         """
497         Update the given fields in each of the given objects in the database.
498         """
499         if batch_size is not None and batch_size < 0:
500             raise ValueError('Batch size must be a positive integer.')
501         if not fields:
502             raise ValueError('Field names must be given to bulk_update().')
503         objs = tuple(objs)
504         if any(obj.pk is None for obj in objs):
505             raise ValueError('All bulk_update() objects must have a primary key set.')
506         fields = [self.model._meta.get_field(name) for name in fields]
507         if any(not f.concrete or f.many_to_many for f in fields):
508             raise ValueError('bulk_update() can only be used with concrete fields.')
509         if any(f.primary_key for f in fields):
510             raise ValueError('bulk_update() cannot be used with primary key fields.')
511         if not objs:
512             return
513         # PK is used twice in the resulting update query, once in the filter
514         # and once in the WHEN. Each field will also have one CAST.
515         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)
516         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
517         requires_casting = connections[self.db].features.requires_casted_case_in_updates
518         batches = (objs[i:i + batch_size] for i in range(0, len(objs), batch_size))
519         updates = []
520         for batch_objs in batches:
521             update_kwargs = {}
522             for field in fields:
523                 when_statements = []
524                 for obj in batch_objs:
525                     attr = getattr(obj, field.attname)
526                     if not isinstance(attr, Expression):
527                         attr = Value(attr, output_field=field)
528                     when_statements.append(When(pk=obj.pk, then=attr))
529                 case_statement = Case(*when_statements, output_field=field)
530                 if requires_casting:
531                     case_statement = Cast(case_statement, output_field=field)
532                 update_kwargs[field.attname] = case_statement
533             updates.append(([obj.pk for obj in batch_objs], update_kwargs))
534         with transaction.atomic(using=self.db, savepoint=False):
535             for pks, update_kwargs in updates:
536                 self.filter(pk__in=pks).update(**update_kwargs)
537     bulk_update.alters_data = True
538 
539     def get_or_create(self, defaults=None, **kwargs):
540         """
541         Look up an object with the given kwargs, creating one if necessary.
542         Return a tuple of (object, created), where created is a boolean
543         specifying whether an object was created.
544         """
545         # The get() needs to be targeted at the write database in order
546         # to avoid potential transaction consistency problems.
547         self._for_write = True
548         try:
549             return self.get(**kwargs), False
550         except self.model.DoesNotExist:
551             params = self._extract_model_params(defaults, **kwargs)
552             return self._create_object_from_params(kwargs, params)
553 
554     def update_or_create(self, defaults=None, **kwargs):
555         """
556         Look up an object with the given kwargs, updating one with defaults
557         if it exists, otherwise create a new one.
558         Return a tuple (object, created), where created is a boolean
559         specifying whether an object was created.
560         """
561         defaults = defaults or {}
562         self._for_write = True
563         with transaction.atomic(using=self.db):
564             try:
565                 obj = self.select_for_update().get(**kwargs)
566             except self.model.DoesNotExist:
567                 params = self._extract_model_params(defaults, **kwargs)
568                 # Lock the row so that a concurrent update is blocked until
569                 # after update_or_create() has performed its save.
570                 obj, created = self._create_object_from_params(kwargs, params, lock=True)
571                 if created:
572                     return obj, created
573             for k, v in defaults.items():
574                 setattr(obj, k, v() if callable(v) else v)
575             obj.save(using=self.db)
576         return obj, False
577 
578     def _create_object_from_params(self, lookup, params, lock=False):
579         """
580         Try to create an object using passed params. Used by get_or_create()
581         and update_or_create().
582         """
583         try:
584             with transaction.atomic(using=self.db):
585                 params = {k: v() if callable(v) else v for k, v in params.items()}
586                 obj = self.create(**params)
587             return obj, True
588         except IntegrityError as e:
589             try:
590                 qs = self.select_for_update() if lock else self
591                 return qs.get(**lookup), False
592             except self.model.DoesNotExist:
593                 pass
594             raise e
595 
596     def _extract_model_params(self, defaults, **kwargs):
597         """
598         Prepare `params` for creating a model instance based on the given
599         kwargs; for use by get_or_create() and update_or_create().
600         """
601         defaults = defaults or {}
602         params = {k: v for k, v in kwargs.items() if LOOKUP_SEP not in k}
603         params.update(defaults)
604         property_names = self.model._meta._property_names
605         invalid_params = []
606         for param in params:
607             try:
608                 self.model._meta.get_field(param)
609             except exceptions.FieldDoesNotExist:
610                 # It's okay to use a model's property if it has a setter.
611                 if not (param in property_names and getattr(self.model, param).fset):
612                     invalid_params.append(param)
613         if invalid_params:
614             raise exceptions.FieldError(
615                 "Invalid field name(s) for model %s: '%s'." % (
616                     self.model._meta.object_name,
617                     "', '".join(sorted(invalid_params)),
618                 ))
619         return params
620 
621     def _earliest(self, *fields):
622         """
623         Return the earliest object according to fields (if given) or by the
624         model's Meta.get_latest_by.
625         """
626         if fields:
627             order_by = fields
628         else:
629             order_by = getattr(self.model._meta, 'get_latest_by')
630             if order_by and not isinstance(order_by, (tuple, list)):
631                 order_by = (order_by,)
632         if order_by is None:
633             raise ValueError(
634                 "earliest() and latest() require either fields as positional "
635                 "arguments or 'get_latest_by' in the model's Meta."
636             )
637 
638         assert not self.query.is_sliced, \
639             "Cannot change a query once a slice has been taken."
640         obj = self._chain()
641         obj.query.set_limits(high=1)
642         obj.query.clear_ordering(force_empty=True)
643         obj.query.add_ordering(*order_by)
644         return obj.get()
645 
646     def earliest(self, *fields):
647         return self._earliest(*fields)
648 
649     def latest(self, *fields):
650         return self.reverse()._earliest(*fields)
651 
652     def first(self):
653         """Return the first object of a query or None if no match is found."""
654         for obj in (self if self.ordered else self.order_by('pk'))[:1]:
655             return obj
656 
657     def last(self):
658         """Return the last object of a query or None if no match is found."""
659         for obj in (self.reverse() if self.ordered else self.order_by('-pk'))[:1]:
660             return obj
661 
662     def in_bulk(self, id_list=None, *, field_name='pk'):
663         """
664         Return a dictionary mapping each of the given IDs to the object with
665         that ID. If `id_list` isn't provided, evaluate the entire QuerySet.
666         """
667         assert not self.query.is_sliced, \
668             "Cannot use 'limit' or 'offset' with in_bulk"
669         if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:
670             raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
671         if id_list is not None:
672             if not id_list:
673                 return {}
674             filter_key = '{}__in'.format(field_name)
675             batch_size = connections[self.db].features.max_query_params
676             id_list = tuple(id_list)
677             # If the database has a limit on the number of query parameters
678             # (e.g. SQLite), retrieve objects in batches if necessary.
679             if batch_size and batch_size < len(id_list):
680                 qs = ()
681                 for offset in range(0, len(id_list), batch_size):
682                     batch = id_list[offset:offset + batch_size]
683                     qs += tuple(self.filter(**{filter_key: batch}).order_by())
684             else:
685                 qs = self.filter(**{filter_key: id_list}).order_by()
686         else:
687             qs = self._chain()
688         return {getattr(obj, field_name): obj for obj in qs}
689 
690     def delete(self):
691         """Delete the records in the current QuerySet."""
692         assert not self.query.is_sliced, \
693             "Cannot use 'limit' or 'offset' with delete."
694 
695         if self._fields is not None:
696             raise TypeError("Cannot call delete() after .values() or .values_list()")
697 
698         del_query = self._chain()
699 
700         # The delete is actually 2 queries - one to find related objects,
701         # and one to delete. Make sure that the discovery of related
702         # objects is performed on the same database as the deletion.
703         del_query._for_write = True
704 
705         # Disable non-supported fields.
706         del_query.query.select_for_update = False
707         del_query.query.select_related = False
708         del_query.query.clear_ordering(force_empty=True)
709 
710         collector = Collector(using=del_query.db)
711         collector.collect(del_query)
712         deleted, _rows_count = collector.delete()
713 
714         # Clear the result cache, in case this QuerySet gets reused.
715         self._result_cache = None
716         return deleted, _rows_count
717 
718     delete.alters_data = True
719     delete.queryset_only = True
720 
721     def _raw_delete(self, using):
722         """
723         Delete objects found from the given queryset in single direct SQL
724         query. No signals are sent and there is no protection for cascades.
725         """
726         return sql.DeleteQuery(self.model).delete_qs(self, using)
727     _raw_delete.alters_data = True
728 
729     def update(self, **kwargs):
730         """
731         Update all elements in the current QuerySet, setting all the given
732         fields to the appropriate values.
733         """
734         assert not self.query.is_sliced, \
735             "Cannot update a query once a slice has been taken."
736         self._for_write = True
737         query = self.query.chain(sql.UpdateQuery)
738         query.add_update_values(kwargs)
739         # Clear any annotations so that they won't be present in subqueries.
740         query.annotations = {}
741         with transaction.mark_for_rollback_on_error(using=self.db):
742             rows = query.get_compiler(self.db).execute_sql(CURSOR)
743         self._result_cache = None
744         return rows
745     update.alters_data = True
746 
747     def _update(self, values):
748         """
749         A version of update() that accepts field objects instead of field names.
750         Used primarily for model saving and not intended for use by general
751         code (it requires too much poking around at model internals to be
752         useful at that level).
753         """
754         assert not self.query.is_sliced, \
755             "Cannot update a query once a slice has been taken."
756         query = self.query.chain(sql.UpdateQuery)
757         query.add_update_fields(values)
758         # Clear any annotations so that they won't be present in subqueries.
759         query.annotations = {}
760         self._result_cache = None
761         return query.get_compiler(self.db).execute_sql(CURSOR)
762     _update.alters_data = True
763     _update.queryset_only = False
764 
765     def exists(self):
766         if self._result_cache is None:
767             return self.query.has_results(using=self.db)
768         return bool(self._result_cache)
769 
770     def _prefetch_related_objects(self):
771         # This method can only be called once the result cache has been filled.
772         prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups)
773         self._prefetch_done = True
774 
775     def explain(self, *, format=None, **options):
776         return self.query.explain(using=self.db, format=format, **options)
777 
778     ##################################################
779     # PUBLIC METHODS THAT RETURN A QUERYSET SUBCLASS #
780     ##################################################
781 
782     def raw(self, raw_query, params=None, translations=None, using=None):
783         if using is None:
784             using = self.db
785         qs = RawQuerySet(raw_query, model=self.model, params=params, translations=translations, using=using)
786         qs._prefetch_related_lookups = self._prefetch_related_lookups[:]
787         return qs
788 
789     def _values(self, *fields, **expressions):
790         clone = self._chain()
791         if expressions:
792             clone = clone.annotate(**expressions)
793         clone._fields = fields
794         clone.query.set_values(fields)
795         return clone
796 
797     def values(self, *fields, **expressions):
798         fields += tuple(expressions)
799         clone = self._values(*fields, **expressions)
800         clone._iterable_class = ValuesIterable
801         return clone
802 
803     def values_list(self, *fields, flat=False, named=False):
804         if flat and named:
805             raise TypeError("'flat' and 'named' can't be used together.")
806         if flat and len(fields) > 1:
807             raise TypeError("'flat' is not valid when values_list is called with more than one field.")
808 
809         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
810         _fields = []
811         expressions = {}
812         counter = 1
813         for field in fields:
814             if hasattr(field, 'resolve_expression'):
815                 field_id_prefix = getattr(field, 'default_alias', field.__class__.__name__.lower())
816                 while True:
817                     field_id = field_id_prefix + str(counter)
818                     counter += 1
819                     if field_id not in field_names:
820                         break
821                 expressions[field_id] = field
822                 _fields.append(field_id)
823             else:
824                 _fields.append(field)
825 
826         clone = self._values(*_fields, **expressions)
827         clone._iterable_class = (
828             NamedValuesListIterable if named
829             else FlatValuesListIterable if flat
830             else ValuesListIterable
831         )
832         return clone
833 
834     def dates(self, field_name, kind, order='ASC'):
835         """
836         Return a list of date objects representing all available dates for
837         the given field_name, scoped to 'kind'.
838         """
839         assert kind in ('year', 'month', 'week', 'day'), \
840             "'kind' must be one of 'year', 'month', 'week', or 'day'."
841         assert order in ('ASC', 'DESC'), \
842             "'order' must be either 'ASC' or 'DESC'."
843         return self.annotate(
844             datefield=Trunc(field_name, kind, output_field=DateField()),
845             plain_field=F(field_name)
846         ).values_list(
847             'datefield', flat=True
848         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datefield')
849 
850     def datetimes(self, field_name, kind, order='ASC', tzinfo=None):
851         """
852         Return a list of datetime objects representing all available
853         datetimes for the given field_name, scoped to 'kind'.
854         """
855         assert kind in ('year', 'month', 'week', 'day', 'hour', 'minute', 'second'), \
856             "'kind' must be one of 'year', 'month', 'week', 'day', 'hour', 'minute', or 'second'."
857         assert order in ('ASC', 'DESC'), \
858             "'order' must be either 'ASC' or 'DESC'."
859         if settings.USE_TZ:
860             if tzinfo is None:
861                 tzinfo = timezone.get_current_timezone()
862         else:
863             tzinfo = None
864         return self.annotate(
865             datetimefield=Trunc(field_name, kind, output_field=DateTimeField(), tzinfo=tzinfo),
866             plain_field=F(field_name)
867         ).values_list(
868             'datetimefield', flat=True
869         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datetimefield')
870 
871     def none(self):
872         """Return an empty QuerySet."""
873         clone = self._chain()
874         clone.query.set_empty()
875         return clone
876 
877     ##################################################################
878     # PUBLIC METHODS THAT ALTER ATTRIBUTES AND RETURN A NEW QUERYSET #
879     ##################################################################
880 
881     def all(self):
882         """
883         Return a new QuerySet that is a copy of the current one. This allows a
884         QuerySet to proxy for a model manager in some cases.
885         """
886         return self._chain()
887 
888     def filter(self, *args, **kwargs):
889         """
890         Return a new QuerySet instance with the args ANDed to the existing
891         set.
892         """
893         self._not_support_combined_queries('filter')
894         return self._filter_or_exclude(False, *args, **kwargs)
895 
896     def exclude(self, *args, **kwargs):
897         """
898         Return a new QuerySet instance with NOT (args) ANDed to the existing
899         set.
900         """
901         self._not_support_combined_queries('exclude')
902         return self._filter_or_exclude(True, *args, **kwargs)
903 
904     def _filter_or_exclude(self, negate, *args, **kwargs):
905         if args or kwargs:
906             assert not self.query.is_sliced, \
907                 "Cannot filter a query once a slice has been taken."
908 
909         clone = self._chain()
910         if negate:
911             clone.query.add_q(~Q(*args, **kwargs))
912         else:
913             clone.query.add_q(Q(*args, **kwargs))
914         return clone
915 
916     def complex_filter(self, filter_obj):
917         """
918         Return a new QuerySet instance with filter_obj added to the filters.
919 
920         filter_obj can be a Q object or a dictionary of keyword lookup
921         arguments.
922 
923         This exists to support framework features such as 'limit_choices_to',
924         and usually it will be more natural to use other methods.
925         """
926         if isinstance(filter_obj, Q):
927             clone = self._chain()
928             clone.query.add_q(filter_obj)
929             return clone
930         else:
931             return self._filter_or_exclude(None, **filter_obj)
932 
933     def _combinator_query(self, combinator, *other_qs, all=False):
934         # Clone the query to inherit the select list and everything
935         clone = self._chain()
936         # Clear limits and ordering so they can be reapplied
937         clone.query.clear_ordering(True)
938         clone.query.clear_limits()
939         clone.query.combined_queries = (self.query,) + tuple(qs.query for qs in other_qs)
940         clone.query.combinator = combinator
941         clone.query.combinator_all = all
942         return clone
943 
944     def union(self, *other_qs, all=False):
945         # If the query is an EmptyQuerySet, combine all nonempty querysets.
946         if isinstance(self, EmptyQuerySet):
947             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]
948             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self
949         return self._combinator_query('union', *other_qs, all=all)
950 
951     def intersection(self, *other_qs):
952         # If any query is an EmptyQuerySet, return it.
953         if isinstance(self, EmptyQuerySet):
954             return self
955         for other in other_qs:
956             if isinstance(other, EmptyQuerySet):
957                 return other
958         return self._combinator_query('intersection', *other_qs)
959 
960     def difference(self, *other_qs):
961         # If the query is an EmptyQuerySet, return it.
962         if isinstance(self, EmptyQuerySet):
963             return self
964         return self._combinator_query('difference', *other_qs)
965 
966     def select_for_update(self, nowait=False, skip_locked=False, of=()):
967         """
968         Return a new QuerySet instance that will select objects with a
969         FOR UPDATE lock.
970         """
971         if nowait and skip_locked:
972             raise ValueError('The nowait option cannot be used with skip_locked.')
973         obj = self._chain()
974         obj._for_write = True
975         obj.query.select_for_update = True
976         obj.query.select_for_update_nowait = nowait
977         obj.query.select_for_update_skip_locked = skip_locked
978         obj.query.select_for_update_of = of
979         return obj
980 
981     def select_related(self, *fields):
982         """
983         Return a new QuerySet instance that will select related objects.
984 
985         If fields are specified, they must be ForeignKey fields and only those
986         related objects are included in the selection.
987 
988         If select_related(None) is called, clear the list.
989         """
990         self._not_support_combined_queries('select_related')
991         if self._fields is not None:
992             raise TypeError("Cannot call select_related() after .values() or .values_list()")
993 
994         obj = self._chain()
995         if fields == (None,):
996             obj.query.select_related = False
997         elif fields:
998             obj.query.add_select_related(fields)
999         else:
1000             obj.query.select_related = True
1001         return obj
1002 
1003     def prefetch_related(self, *lookups):
1004         """
1005         Return a new QuerySet instance that will prefetch the specified
1006         Many-To-One and Many-To-Many related objects when the QuerySet is
1007         evaluated.
1008 
1009         When prefetch_related() is called more than once, append to the list of
1010         prefetch lookups. If prefetch_related(None) is called, clear the list.
1011         """
1012         self._not_support_combined_queries('prefetch_related')
1013         clone = self._chain()
1014         if lookups == (None,):
1015             clone._prefetch_related_lookups = ()
1016         else:
1017             for lookup in lookups:
1018                 if isinstance(lookup, Prefetch):
1019                     lookup = lookup.prefetch_to
1020                 lookup = lookup.split(LOOKUP_SEP, 1)[0]
1021                 if lookup in self.query._filtered_relations:
1022                     raise ValueError('prefetch_related() is not supported with FilteredRelation.')
1023             clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups
1024         return clone
1025 
1026     def annotate(self, *args, **kwargs):
1027         """
1028         Return a query set in which the returned objects have been annotated
1029         with extra data or aggregations.
1030         """
1031         self._not_support_combined_queries('annotate')
1032         self._validate_values_are_expressions(args + tuple(kwargs.values()), method_name='annotate')
1033         annotations = {}
1034         for arg in args:
1035             # The default_alias property may raise a TypeError.
1036             try:
1037                 if arg.default_alias in kwargs:
1038                     raise ValueError("The named annotation '%s' conflicts with the "
1039                                      "default name for another annotation."
1040                                      % arg.default_alias)
1041             except TypeError:
1042                 raise TypeError("Complex annotations require an alias")
1043             annotations[arg.default_alias] = arg
1044         annotations.update(kwargs)
1045 
1046         clone = self._chain()
1047         names = self._fields
1048         if names is None:
1049             names = set(chain.from_iterable(
1050                 (field.name, field.attname) if hasattr(field, 'attname') else (field.name,)
1051                 for field in self.model._meta.get_fields()
1052             ))
1053 
1054         for alias, annotation in annotations.items():
1055             if alias in names:
1056                 raise ValueError("The annotation '%s' conflicts with a field on "
1057                                  "the model." % alias)
1058             if isinstance(annotation, FilteredRelation):
1059                 clone.query.add_filtered_relation(annotation, alias)
1060             else:
1061                 clone.query.add_annotation(annotation, alias, is_summary=False)
1062 
1063         for alias, annotation in clone.query.annotations.items():
1064             if alias in annotations and annotation.contains_aggregate:
1065                 if clone._fields is None:
1066                     clone.query.group_by = True
1067                 else:
1068                     clone.query.set_group_by()
1069                 break
1070 
1071         return clone
1072 
1073     def order_by(self, *field_names):
1074         """Return a new QuerySet instance with the ordering changed."""
1075         assert not self.query.is_sliced, \
1076             "Cannot reorder a query once a slice has been taken."
1077         obj = self._chain()
1078         obj.query.clear_ordering(force_empty=False)
1079         obj.query.add_ordering(*field_names)
1080         return obj
1081 
1082     def distinct(self, *field_names):
1083         """
1084         Return a new QuerySet instance that will select only distinct results.
1085         """
1086         assert not self.query.is_sliced, \
1087             "Cannot create distinct fields once a slice has been taken."
1088         obj = self._chain()
1089         obj.query.add_distinct_fields(*field_names)
1090         return obj
1091 
1092     def extra(self, select=None, where=None, params=None, tables=None,
1093               order_by=None, select_params=None):
1094         """Add extra SQL fragments to the query."""
1095         self._not_support_combined_queries('extra')
1096         assert not self.query.is_sliced, \
1097             "Cannot change a query once a slice has been taken"
1098         clone = self._chain()
1099         clone.query.add_extra(select, select_params, where, params, tables, order_by)
1100         return clone
1101 
1102     def reverse(self):
1103         """Reverse the ordering of the QuerySet."""
1104         if self.query.is_sliced:
1105             raise TypeError('Cannot reverse a query once a slice has been taken.')
1106         clone = self._chain()
1107         clone.query.standard_ordering = not clone.query.standard_ordering
1108         return clone
1109 
1110     def defer(self, *fields):
1111         """
1112         Defer the loading of data for certain fields until they are accessed.
1113         Add the set of deferred fields to any existing set of deferred fields.
1114         The only exception to this is if None is passed in as the only
1115         parameter, in which case removal all deferrals.
1116         """
1117         self._not_support_combined_queries('defer')
1118         if self._fields is not None:
1119             raise TypeError("Cannot call defer() after .values() or .values_list()")
1120         clone = self._chain()
1121         if fields == (None,):
1122             clone.query.clear_deferred_loading()
1123         else:
1124             clone.query.add_deferred_loading(fields)
1125         return clone
1126 
1127     def only(self, *fields):
1128         """
1129         Essentially, the opposite of defer(). Only the fields passed into this
1130         method and that are not already specified as deferred are loaded
1131         immediately when the queryset is evaluated.
1132         """
1133         self._not_support_combined_queries('only')
1134         if self._fields is not None:
1135             raise TypeError("Cannot call only() after .values() or .values_list()")
1136         if fields == (None,):
1137             # Can only pass None to defer(), not only(), as the rest option.
1138             # That won't stop people trying to do this, so let's be explicit.
1139             raise TypeError("Cannot pass None as an argument to only().")
1140         for field in fields:
1141             field = field.split(LOOKUP_SEP, 1)[0]
1142             if field in self.query._filtered_relations:
1143                 raise ValueError('only() is not supported with FilteredRelation.')
1144         clone = self._chain()
1145         clone.query.add_immediate_loading(fields)
1146         return clone
1147 
1148     def using(self, alias):
1149         """Select which database this QuerySet should execute against."""
1150         clone = self._chain()
1151         clone._db = alias
1152         return clone
1153 
1154     ###################################
1155     # PUBLIC INTROSPECTION ATTRIBUTES #
1156     ###################################
1157 
1158     @property
1159     def ordered(self):
1160         """
1161         Return True if the QuerySet is ordered -- i.e. has an order_by()
1162         clause or a default ordering on the model (or is empty).
1163         """
1164         if isinstance(self, EmptyQuerySet):
1165             return True
1166         if self.query.extra_order_by or self.query.order_by:
1167             return True
1168         elif self.query.default_ordering and self.query.get_meta().ordering:
1169             return True
1170         else:
1171             return False
1172 
1173     @property
1174     def db(self):
1175         """Return the database used if this query is executed now."""
1176         if self._for_write:
1177             return self._db or router.db_for_write(self.model, **self._hints)
1178         return self._db or router.db_for_read(self.model, **self._hints)
1179 
1180     ###################
1181     # PRIVATE METHODS #
1182     ###################
1183 
1184     def _insert(self, objs, fields, return_id=False, raw=False, using=None, ignore_conflicts=False):
1185         """
1186         Insert a new record for the given model. This provides an interface to
1187         the InsertQuery class and is how Model.save() is implemented.
1188         """
1189         self._for_write = True
1190         if using is None:
1191             using = self.db
1192         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
1193         query.insert_values(fields, objs, raw=raw)
1194         return query.get_compiler(using=using).execute_sql(return_id)
1195     _insert.alters_data = True
1196     _insert.queryset_only = False
1197 
1198     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):
1199         """
1200         Helper method for bulk_create() to insert objs one batch at a time.
1201         """
1202         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
1203             raise NotSupportedError('This database backend does not support ignoring conflicts.')
1204         ops = connections[self.db].ops
1205         batch_size = (batch_size or max(ops.bulk_batch_size(fields, objs), 1))
1206         inserted_ids = []
1207         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
1208         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
1209             if bulk_return and not ignore_conflicts:
1210                 inserted_id = self._insert(
1211                     item, fields=fields, using=self.db, return_id=True,
1212                     ignore_conflicts=ignore_conflicts,
1213                 )
1214                 if isinstance(inserted_id, list):
1215                     inserted_ids.extend(inserted_id)
1216                 else:
1217                     inserted_ids.append(inserted_id)
1218             else:
1219                 self._insert(item, fields=fields, using=self.db, ignore_conflicts=ignore_conflicts)
1220         return inserted_ids
1221 
1222     def _chain(self, **kwargs):
1223         """
1224         Return a copy of the current QuerySet that's ready for another
1225         operation.
1226         """
1227         obj = self._clone()
1228         if obj._sticky_filter:
1229             obj.query.filter_is_sticky = True
1230             obj._sticky_filter = False
1231         obj.__dict__.update(kwargs)
1232         return obj
1233 
1234     def _clone(self):
1235         """
1236         Return a copy of the current QuerySet. A lightweight alternative
1237         to deepcopy().
1238         """
1239         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
1240         c._sticky_filter = self._sticky_filter
1241         c._for_write = self._for_write
1242         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
1243         c._known_related_objects = self._known_related_objects
1244         c._iterable_class = self._iterable_class
1245         c._fields = self._fields
1246         return c
1247 
1248     def _fetch_all(self):
1249         if self._result_cache is None:
1250             self._result_cache = list(self._iterable_class(self))
1251         if self._prefetch_related_lookups and not self._prefetch_done:
1252             self._prefetch_related_objects()
1253 
1254     def _next_is_sticky(self):
1255         """
1256         Indicate that the next filter call and the one following that should
1257         be treated as a single filter. This is only important when it comes to
1258         determining when to reuse tables for many-to-many filters. Required so
1259         that we can filter naturally on the results of related managers.
1260 
1261         This doesn't return a clone of the current QuerySet (it returns
1262         "self"). The method is only used internally and should be immediately
1263         followed by a filter() that does create a clone.
1264         """
1265         self._sticky_filter = True
1266         return self
1267 
1268     def _merge_sanity_check(self, other):
1269         """Check that two QuerySet classes may be merged."""
1270         if self._fields is not None and (
1271                 set(self.query.values_select) != set(other.query.values_select) or
1272                 set(self.query.extra_select) != set(other.query.extra_select) or
1273                 set(self.query.annotation_select) != set(other.query.annotation_select)):
1274             raise TypeError(
1275                 "Merging '%s' classes must involve the same values in each case."
1276                 % self.__class__.__name__
1277             )
1278 
1279     def _merge_known_related_objects(self, other):
1280         """
1281         Keep track of all known related objects from either QuerySet instance.
1282         """
1283         for field, objects in other._known_related_objects.items():
1284             self._known_related_objects.setdefault(field, {}).update(objects)
1285 
1286     def resolve_expression(self, *args, **kwargs):
1287         if self._fields and len(self._fields) > 1:
1288             # values() queryset can only be used as nested queries
1289             # if they are set up to select only a single field.
1290             raise TypeError('Cannot use multi-field values as a filter value.')
1291         query = self.query.resolve_expression(*args, **kwargs)
1292         query._db = self._db
1293         return query
1294     resolve_expression.queryset_only = True
1295 
1296     def _add_hints(self, **hints):
1297         """
1298         Update hinting information for use by routers. Add new key/values or
1299         overwrite existing key/values.
1300         """
1301         self._hints.update(hints)
1302 
1303     def _has_filters(self):
1304         """
1305         Check if this QuerySet has any filtering going on. This isn't
1306         equivalent with checking if all objects are present in results, for
1307         example, qs[1:]._has_filters() -> False.
1308         """
1309         return self.query.has_filters()
1310 
1311     @staticmethod
1312     def _validate_values_are_expressions(values, method_name):
1313         invalid_args = sorted(str(arg) for arg in values if not hasattr(arg, 'resolve_expression'))
1314         if invalid_args:
1315             raise TypeError(
1316                 'QuerySet.%s() received non-expression(s): %s.' % (
1317                     method_name,
1318                     ', '.join(invalid_args),
1319                 )
1320             )
1321 
1322     def _not_support_combined_queries(self, operation_name):
1323         if self.query.combinator:
1324             raise NotSupportedError(
1325                 'Calling QuerySet.%s() after %s() is not supported.'
1326                 % (operation_name, self.query.combinator)
1327             )

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>None</method>
<code>
145 class Query(BaseExpression):
146     """A single SQL query."""
147 
148     alias_prefix = 'T'
149     subq_aliases = frozenset([alias_prefix])
150 
151     compiler = 'SQLCompiler'
152 
153     def __init__(self, model, where=WhereNode):
154         self.model = model
155         self.alias_refcount = {}
156         # alias_map is the most important data structure regarding joins.
157         # It's used for recording which joins exist in the query and what
158         # types they are. The key is the alias of the joined table (possibly
159         # the table name) and the value is a Join-like object (see
160         # sql.datastructures.Join for more information).
161         self.alias_map = {}
162         # Sometimes the query contains references to aliases in outer queries (as
163         # a result of split_exclude). Correct alias quoting needs to know these
164         # aliases too.
165         self.external_aliases = set()
166         self.table_map = {}     # Maps table names to list of aliases.
167         self.default_cols = True
168         self.default_ordering = True
169         self.standard_ordering = True
170         self.used_aliases = set()
171         self.filter_is_sticky = False
172         self.subquery = False
173 
174         # SQL-related attributes
175         # Select and related select clauses are expressions to use in the
176         # SELECT clause of the query.
177         # The select is used for cases where we want to set up the select
178         # clause to contain other than default fields (values(), subqueries...)
179         # Note that annotations go to annotations dictionary.
180         self.select = ()
181         self.where = where()
182         self.where_class = where
183         # The group_by attribute can have one of the following forms:
184         #  - None: no group by at all in the query
185         #  - A tuple of expressions: group by (at least) those expressions.
186         #    String refs are also allowed for now.
187         #  - True: group by all select fields of the model
188         # See compiler.get_group_by() for details.
189         self.group_by = None
190         self.order_by = ()
191         self.low_mark, self.high_mark = 0, None  # Used for offset/limit
192         self.distinct = False
193         self.distinct_fields = ()
194         self.select_for_update = False
195         self.select_for_update_nowait = False
196         self.select_for_update_skip_locked = False
197         self.select_for_update_of = ()
198 
199         self.select_related = False
200         # Arbitrary limit for select_related to prevents infinite recursion.
201         self.max_depth = 5
202 
203         # Holds the selects defined by a call to values() or values_list()
204         # excluding annotation_select and extra_select.
205         self.values_select = ()
206 
207         # SQL annotation-related attributes
208         self.annotations = {}  # Maps alias -> Annotation Expression
209         self.annotation_select_mask = None
210         self._annotation_select_cache = None
211 
212         # Set combination attributes
213         self.combinator = None
214         self.combinator_all = False
215         self.combined_queries = ()
216 
217         # These are for extensions. The contents are more or less appended
218         # verbatim to the appropriate clause.
219         self.extra = {}  # Maps col_alias -> (col_sql, params).
220         self.extra_select_mask = None
221         self._extra_select_cache = None
222 
223         self.extra_tables = ()
224         self.extra_order_by = ()
225 
226         # A tuple that is a set of model field names and either True, if these
227         # are the fields to defer, or False if these are the only fields to
228         # load.
229         self.deferred_loading = (frozenset(), True)
230 
231         self._filtered_relations = {}
232 
233         self.explain_query = False
234         self.explain_format = None
235         self.explain_options = {}
236 
237     @property
238     def output_field(self):
239         if len(self.select) == 1:
240             return self.select[0].field
241         elif len(self.annotation_select) == 1:
242             return next(iter(self.annotation_select.values())).output_field
243 
244     @property
245     def has_select_fields(self):
246         return bool(self.select or self.annotation_select_mask or self.extra_select_mask)
247 
248     @cached_property
249     def base_table(self):
250         for alias in self.alias_map:
251             return alias
252 
253     def __str__(self):
254         """
255         Return the query as a string of SQL with the parameter values
256         substituted in (use sql_with_params() to see the unsubstituted string).
257 
258         Parameter values won't necessarily be quoted correctly, since that is
259         done by the database interface at execution time.
260         """
261         sql, params = self.sql_with_params()
262         return sql % params
263 
264     def sql_with_params(self):
265         """
266         Return the query as an SQL string and the parameters that will be
267         substituted into the query.
268         """
269         return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()
270 
271     def __deepcopy__(self, memo):
272         """Limit the amount of work when a Query is deepcopied."""
273         result = self.clone()
274         memo[id(self)] = result
275         return result
276 
277     def get_compiler(self, using=None, connection=None):
278         if using is None and connection is None:
279             raise ValueError("Need either using or connection")
280         if using:
281             connection = connections[using]
282         return connection.ops.compiler(self.compiler)(self, connection, using)
283 
284     def get_meta(self):
285         """
286         Return the Options instance (the model._meta) from which to start
287         processing. Normally, this is self.model._meta, but it can be changed
288         by subclasses.
289         """
290         return self.model._meta
291 
292     def clone(self):
293         """
294         Return a copy of the current Query. A lightweight alternative to
295         to deepcopy().
296         """
297         obj = Empty()
298         obj.__class__ = self.__class__
299         # Copy references to everything.
300         obj.__dict__ = self.__dict__.copy()
301         # Clone attributes that can't use shallow copy.
302         obj.alias_refcount = self.alias_refcount.copy()
303         obj.alias_map = self.alias_map.copy()
304         obj.external_aliases = self.external_aliases.copy()
305         obj.table_map = self.table_map.copy()
306         obj.where = self.where.clone()
307         obj.annotations = self.annotations.copy()
308         if self.annotation_select_mask is None:
309             obj.annotation_select_mask = None
310         else:
311             obj.annotation_select_mask = self.annotation_select_mask.copy()
312         # _annotation_select_cache cannot be copied, as doing so breaks the
313         # (necessary) state in which both annotations and
314         # _annotation_select_cache point to the same underlying objects.
315         # It will get re-populated in the cloned queryset the next time it's
316         # used.
317         obj._annotation_select_cache = None
318         obj.extra = self.extra.copy()
319         if self.extra_select_mask is None:
320             obj.extra_select_mask = None
321         else:
322             obj.extra_select_mask = self.extra_select_mask.copy()
323         if self._extra_select_cache is None:
324             obj._extra_select_cache = None
325         else:
326             obj._extra_select_cache = self._extra_select_cache.copy()
327         if 'subq_aliases' in self.__dict__:
328             obj.subq_aliases = self.subq_aliases.copy()
329         obj.used_aliases = self.used_aliases.copy()
330         obj._filtered_relations = self._filtered_relations.copy()
331         # Clear the cached_property
332         try:
333             del obj.base_table
334         except AttributeError:
335             pass
336         return obj
337 
338     def chain(self, klass=None):
339         """
340         Return a copy of the current Query that's ready for another operation.
341         The klass argument changes the type of the Query, e.g. UpdateQuery.
342         """
343         obj = self.clone()
344         if klass and obj.__class__ != klass:
345             obj.__class__ = klass
346         if not obj.filter_is_sticky:
347             obj.used_aliases = set()
348         obj.filter_is_sticky = False
349         if hasattr(obj, '_setup_query'):
350             obj._setup_query()
351         return obj
352 
353     def relabeled_clone(self, change_map):
354         clone = self.clone()
355         clone.change_aliases(change_map)
356         return clone
357 
358     def rewrite_cols(self, annotation, col_cnt):
359         # We must make sure the inner query has the referred columns in it.
360         # If we are aggregating over an annotation, then Django uses Ref()
361         # instances to note this. However, if we are annotating over a column
362         # of a related model, then it might be that column isn't part of the
363         # SELECT clause of the inner query, and we must manually make sure
364         # the column is selected. An example case is:
365         #    .aggregate(Sum('author__awards'))
366         # Resolving this expression results in a join to author, but there
367         # is no guarantee the awards column of author is in the select clause
368         # of the query. Thus we must manually add the column to the inner
369         # query.
370         orig_exprs = annotation.get_source_expressions()
371         new_exprs = []
372         for expr in orig_exprs:
373             # FIXME: These conditions are fairly arbitrary. Identify a better
374             # method of having expressions decide which code path they should
375             # take.
376             if isinstance(expr, Ref):
377                 # Its already a Ref to subquery (see resolve_ref() for
378                 # details)
379                 new_exprs.append(expr)
380             elif isinstance(expr, (WhereNode, Lookup)):
381                 # Decompose the subexpressions further. The code here is
382                 # copied from the else clause, but this condition must appear
383                 # before the contains_aggregate/is_summary condition below.
384                 new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
385                 new_exprs.append(new_expr)
386             else:
387                 # Reuse aliases of expressions already selected in subquery.
388                 for col_alias, selected_annotation in self.annotation_select.items():
389                     if selected_annotation == expr:
390                         new_expr = Ref(col_alias, expr)
391                         break
392                 else:
393                     # An expression that is not selected the subquery.
394                     if isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):
395                         # Reference column or another aggregate. Select it
396                         # under a non-conflicting alias.
397                         col_cnt += 1
398                         col_alias = '__col%d' % col_cnt
399                         self.annotations[col_alias] = expr
400                         self.append_annotation_mask([col_alias])
401                         new_expr = Ref(col_alias, expr)
402                     else:
403                         # Some other expression not referencing database values
404                         # directly. Its subexpression might contain Cols.
405                         new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
406                 new_exprs.append(new_expr)
407         annotation.set_source_expressions(new_exprs)
408         return annotation, col_cnt
409 
410     def get_aggregation(self, using, added_aggregate_names):
411         """
412         Return the dictionary with the values of the existing aggregations.
413         """
414         if not self.annotation_select:
415             return {}
416         existing_annotations = [
417             annotation for alias, annotation
418             in self.annotations.items()
419             if alias not in added_aggregate_names
420         ]
421         # Decide if we need to use a subquery.
422         #
423         # Existing annotations would cause incorrect results as get_aggregation()
424         # must produce just one result and thus must not use GROUP BY. But we
425         # aren't smart enough to remove the existing annotations from the
426         # query, so those would force us to use GROUP BY.
427         #
428         # If the query has limit or distinct, or uses set operations, then
429         # those operations must be done in a subquery so that the query
430         # aggregates on the limit and/or distinct results instead of applying
431         # the distinct and limit after the aggregation.
432         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or
433                 self.distinct or self.combinator):
434             from django.db.models.sql.subqueries import AggregateQuery
435             outer_query = AggregateQuery(self.model)
436             inner_query = self.clone()
437             inner_query.select_for_update = False
438             inner_query.select_related = False
439             inner_query.set_annotation_mask(self.annotation_select)
440             if not self.is_sliced and not self.distinct_fields:
441                 # Queries with distinct_fields need ordering and when a limit
442                 # is applied we must take the slice from the ordered query.
443                 # Otherwise no need for ordering.
444                 inner_query.clear_ordering(True)
445             if not inner_query.distinct:
446                 # If the inner query uses default select and it has some
447                 # aggregate annotations, then we must make sure the inner
448                 # query is grouped by the main model's primary key. However,
449                 # clearing the select clause can alter results if distinct is
450                 # used.
451                 has_existing_aggregate_annotations = any(
452                     annotation for annotation in existing_annotations
453                     if getattr(annotation, 'contains_aggregate', True)
454                 )
455                 if inner_query.default_cols and has_existing_aggregate_annotations:
456                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
457                 inner_query.default_cols = False
458 
459             relabels = {t: 'subquery' for t in inner_query.alias_map}
460             relabels[None] = 'subquery'
461             # Remove any aggregates marked for reduction from the subquery
462             # and move them to the outer AggregateQuery.
463             col_cnt = 0
464             for alias, expression in list(inner_query.annotation_select.items()):
465                 annotation_select_mask = inner_query.annotation_select_mask
466                 if expression.is_summary:
467                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
468                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
469                     del inner_query.annotations[alias]
470                     annotation_select_mask.remove(alias)
471                 # Make sure the annotation_select wont use cached results.
472                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)
473             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
474                 # In case of Model.objects[0:3].count(), there would be no
475                 # field selected in the inner query, yet we must use a subquery.
476                 # So, make sure at least one field is selected.
477                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
478             try:
479                 outer_query.add_subquery(inner_query, using)
480             except EmptyResultSet:
481                 return {
482                     alias: None
483                     for alias in outer_query.annotation_select
484                 }
485         else:
486             outer_query = self
487             self.select = ()
488             self.default_cols = False
489             self.extra = {}
490 
491         outer_query.clear_ordering(True)
492         outer_query.clear_limits()
493         outer_query.select_for_update = False
494         outer_query.select_related = False
495         compiler = outer_query.get_compiler(using)
496         result = compiler.execute_sql(SINGLE)
497         if result is None:
498             result = [None] * len(outer_query.annotation_select)
499 
500         converters = compiler.get_converters(outer_query.annotation_select.values())
501         result = next(compiler.apply_converters((result,), converters))
502 
503         return dict(zip(outer_query.annotation_select, result))
504 
505     def get_count(self, using):
506         """
507         Perform a COUNT() query using the current filter constraints.
508         """
509         obj = self.clone()
510         obj.add_annotation(Count('*'), alias='__count', is_summary=True)
511         number = obj.get_aggregation(using, ['__count'])['__count']
512         if number is None:
513             number = 0
514         return number
515 
516     def has_filters(self):
517         return self.where
518 
519     def has_results(self, using):
520         q = self.clone()
521         if not q.distinct:
522             if q.group_by is True:
523                 q.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
524                 q.set_group_by()
525             q.clear_select_clause()
526         q.clear_ordering(True)
527         q.set_limits(high=1)
528         compiler = q.get_compiler(using=using)
529         return compiler.has_results()
530 
531     def explain(self, using, format=None, **options):
532         q = self.clone()
533         q.explain_query = True
534         q.explain_format = format
535         q.explain_options = options
536         compiler = q.get_compiler(using=using)
537         return '\n'.join(compiler.explain_query())
538 
539     def combine(self, rhs, connector):
540         """
541         Merge the 'rhs' query into the current one (with any 'rhs' effects
542         being applied *after* (that is, "to the right of") anything in the
543         current query. 'rhs' is not modified during a call to this function.
544 
545         The 'connector' parameter describes how to connect filters from the
546         'rhs' query.
547         """
548         assert self.model == rhs.model, \
549             "Cannot combine queries on two different base models."
550         assert not self.is_sliced, \
551             "Cannot combine queries once a slice has been taken."
552         assert self.distinct == rhs.distinct, \
553             "Cannot combine a unique query with a non-unique query."
554         assert self.distinct_fields == rhs.distinct_fields, \
555             "Cannot combine queries with different distinct fields."
556 
557         # Work out how to relabel the rhs aliases, if necessary.
558         change_map = {}
559         conjunction = (connector == AND)
560 
561         # Determine which existing joins can be reused. When combining the
562         # query with AND we must recreate all joins for m2m filters. When
563         # combining with OR we can reuse joins. The reason is that in AND
564         # case a single row can't fulfill a condition like:
565         #     revrel__col=1 & revrel__col=2
566         # But, there might be two different related rows matching this
567         # condition. In OR case a single True is enough, so single row is
568         # enough, too.
569         #
570         # Note that we will be creating duplicate joins for non-m2m joins in
571         # the AND case. The results will be correct but this creates too many
572         # joins. This is something that could be fixed later on.
573         reuse = set() if conjunction else set(self.alias_map)
574         # Base table must be present in the query - this is the same
575         # table on both sides.
576         self.get_initial_alias()
577         joinpromoter = JoinPromoter(connector, 2, False)
578         joinpromoter.add_votes(
579             j for j in self.alias_map if self.alias_map[j].join_type == INNER)
580         rhs_votes = set()
581         # Now, add the joins from rhs query into the new query (skipping base
582         # table).
583         rhs_tables = list(rhs.alias_map)[1:]
584         for alias in rhs_tables:
585             join = rhs.alias_map[alias]
586             # If the left side of the join was already relabeled, use the
587             # updated alias.
588             join = join.relabeled_clone(change_map)
589             new_alias = self.join(join, reuse=reuse)
590             if join.join_type == INNER:
591                 rhs_votes.add(new_alias)
592             # We can't reuse the same join again in the query. If we have two
593             # distinct joins for the same connection in rhs query, then the
594             # combined query must have two joins, too.
595             reuse.discard(new_alias)
596             if alias != new_alias:
597                 change_map[alias] = new_alias
598             if not rhs.alias_refcount[alias]:
599                 # The alias was unused in the rhs query. Unref it so that it
600                 # will be unused in the new query, too. We have to add and
601                 # unref the alias so that join promotion has information of
602                 # the join type for the unused alias.
603                 self.unref_alias(new_alias)
604         joinpromoter.add_votes(rhs_votes)
605         joinpromoter.update_join_types(self)
606 
607         # Now relabel a copy of the rhs where-clause and add it to the current
608         # one.
609         w = rhs.where.clone()
610         w.relabel_aliases(change_map)
611         self.where.add(w, connector)
612 
613         # Selection columns and extra extensions are those provided by 'rhs'.
614         if rhs.select:
615             self.set_select([col.relabeled_clone(change_map) for col in rhs.select])
616         else:
617             self.select = ()
618 
619         if connector == OR:
620             # It would be nice to be able to handle this, but the queries don't
621             # really make sense (or return consistent value sets). Not worth
622             # the extra complexity when you can write a real query instead.
623             if self.extra and rhs.extra:
624                 raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")
625         self.extra.update(rhs.extra)
626         extra_select_mask = set()
627         if self.extra_select_mask is not None:
628             extra_select_mask.update(self.extra_select_mask)
629         if rhs.extra_select_mask is not None:
630             extra_select_mask.update(rhs.extra_select_mask)
631         if extra_select_mask:
632             self.set_extra_mask(extra_select_mask)
633         self.extra_tables += rhs.extra_tables
634 
635         # Ordering uses the 'rhs' ordering, unless it has none, in which case
636         # the current ordering is used.
637         self.order_by = rhs.order_by or self.order_by
638         self.extra_order_by = rhs.extra_order_by or self.extra_order_by
639 
640     def deferred_to_data(self, target, callback):
641         """
642         Convert the self.deferred_loading data structure to an alternate data
643         structure, describing the field that *will* be loaded. This is used to
644         compute the columns to select from the database and also by the
645         QuerySet class to work out which fields are being initialized on each
646         model. Models that have all their fields included aren't mentioned in
647         the result, only those that have field restrictions in place.
648 
649         The "target" parameter is the instance that is populated (in place).
650         The "callback" is a function that is called whenever a (model, field)
651         pair need to be added to "target". It accepts three parameters:
652         "target", and the model and list of fields being added for that model.
653         """
654         field_names, defer = self.deferred_loading
655         if not field_names:
656             return
657         orig_opts = self.get_meta()
658         seen = {}
659         must_include = {orig_opts.concrete_model: {orig_opts.pk}}
660         for field_name in field_names:
661             parts = field_name.split(LOOKUP_SEP)
662             cur_model = self.model._meta.concrete_model
663             opts = orig_opts
664             for name in parts[:-1]:
665                 old_model = cur_model
666                 if name in self._filtered_relations:
667                     name = self._filtered_relations[name].relation_name
668                 source = opts.get_field(name)
669                 if is_reverse_o2o(source):
670                     cur_model = source.related_model
671                 else:
672                     cur_model = source.remote_field.model
673                 opts = cur_model._meta
674                 # Even if we're "just passing through" this model, we must add
675                 # both the current model's pk and the related reference field
676                 # (if it's not a reverse relation) to the things we select.
677                 if not is_reverse_o2o(source):
678                     must_include[old_model].add(source)
679                 add_to_dict(must_include, cur_model, opts.pk)
680             field = opts.get_field(parts[-1])
681             is_reverse_object = field.auto_created and not field.concrete
682             model = field.related_model if is_reverse_object else field.model
683             model = model._meta.concrete_model
684             if model == opts.model:
685                 model = cur_model
686             if not is_reverse_o2o(field):
687                 add_to_dict(seen, model, field)
688 
689         if defer:
690             # We need to load all fields for each model, except those that
691             # appear in "seen" (for all models that appear in "seen"). The only
692             # slight complexity here is handling fields that exist on parent
693             # models.
694             workset = {}
695             for model, values in seen.items():
696                 for field in model._meta.local_fields:
697                     if field not in values:
698                         m = field.model._meta.concrete_model
699                         add_to_dict(workset, m, field)
700             for model, values in must_include.items():
701                 # If we haven't included a model in workset, we don't add the
702                 # corresponding must_include fields for that model, since an
703                 # empty set means "include all fields". That's why there's no
704                 # "else" branch here.
705                 if model in workset:
706                     workset[model].update(values)
707             for model, values in workset.items():
708                 callback(target, model, values)
709         else:
710             for model, values in must_include.items():
711                 if model in seen:
712                     seen[model].update(values)
713                 else:
714                     # As we've passed through this model, but not explicitly
715                     # included any fields, we have to make sure it's mentioned
716                     # so that only the "must include" fields are pulled in.
717                     seen[model] = values
718             # Now ensure that every model in the inheritance chain is mentioned
719             # in the parent list. Again, it must be mentioned to ensure that
720             # only "must include" fields are pulled in.
721             for model in orig_opts.get_parent_list():
722                 seen.setdefault(model, set())
723             for model, values in seen.items():
724                 callback(target, model, values)
725 
726     def table_alias(self, table_name, create=False, filtered_relation=None):
727         """
728         Return a table alias for the given table_name and whether this is a
729         new alias or not.
730 
731         If 'create' is true, a new alias is always created. Otherwise, the
732         most recently created alias for the table (if one exists) is reused.
733         """
734         alias_list = self.table_map.get(table_name)
735         if not create and alias_list:
736             alias = alias_list[0]
737             self.alias_refcount[alias] += 1
738             return alias, False
739 
740         # Create a new alias for this table.
741         if alias_list:
742             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
743             alias_list.append(alias)
744         else:
745             # The first occurrence of a table uses the table name directly.
746             alias = filtered_relation.alias if filtered_relation is not None else table_name
747             self.table_map[table_name] = [alias]
748         self.alias_refcount[alias] = 1
749         return alias, True
750 
751     def ref_alias(self, alias):
752         """Increases the reference count for this alias."""
753         self.alias_refcount[alias] += 1
754 
755     def unref_alias(self, alias, amount=1):
756         """Decreases the reference count for this alias."""
757         self.alias_refcount[alias] -= amount
758 
759     def promote_joins(self, aliases):
760         """
761         Promote recursively the join type of given aliases and its children to
762         an outer join. If 'unconditional' is False, only promote the join if
763         it is nullable or the parent join is an outer join.
764 
765         The children promotion is done to avoid join chains that contain a LOUTER
766         b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,
767         then we must also promote b->c automatically, or otherwise the promotion
768         of a->b doesn't actually change anything in the query results.
769         """
770         aliases = list(aliases)
771         while aliases:
772             alias = aliases.pop(0)
773             if self.alias_map[alias].join_type is None:
774                 # This is the base table (first FROM entry) - this table
775                 # isn't really joined at all in the query, so we should not
776                 # alter its join type.
777                 continue
778             # Only the first alias (skipped above) should have None join_type
779             assert self.alias_map[alias].join_type is not None
780             parent_alias = self.alias_map[alias].parent_alias
781             parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER
782             already_louter = self.alias_map[alias].join_type == LOUTER
783             if ((self.alias_map[alias].nullable or parent_louter) and
784                     not already_louter):
785                 self.alias_map[alias] = self.alias_map[alias].promote()
786                 # Join type of 'alias' changed, so re-examine all aliases that
787                 # refer to this one.
788                 aliases.extend(
789                     join for join in self.alias_map
790                     if self.alias_map[join].parent_alias == alias and join not in aliases
791                 )
792 
793     def demote_joins(self, aliases):
794         """
795         Change join type from LOUTER to INNER for all joins in aliases.
796 
797         Similarly to promote_joins(), this method must ensure no join chains
798         containing first an outer, then an inner join are generated. If we
799         are demoting b->c join in chain a LOUTER b LOUTER c then we must
800         demote a->b automatically, or otherwise the demotion of b->c doesn't
801         actually change anything in the query results. .
802         """
803         aliases = list(aliases)
804         while aliases:
805             alias = aliases.pop(0)
806             if self.alias_map[alias].join_type == LOUTER:
807                 self.alias_map[alias] = self.alias_map[alias].demote()
808                 parent_alias = self.alias_map[alias].parent_alias
809                 if self.alias_map[parent_alias].join_type == INNER:
810                     aliases.append(parent_alias)
811 
812     def reset_refcounts(self, to_counts):
813         """
814         Reset reference counts for aliases so that they match the value passed
815         in `to_counts`.
816         """
817         for alias, cur_refcount in self.alias_refcount.copy().items():
818             unref_amount = cur_refcount - to_counts.get(alias, 0)
819             self.unref_alias(alias, unref_amount)
820 
821     def change_aliases(self, change_map):
822         """
823         Change the aliases in change_map (which maps old-alias -> new-alias),
824         relabelling any references to them in select columns and the where
825         clause.
826         """
827         assert set(change_map).isdisjoint(change_map.values())
828 
829         # 1. Update references in "select" (normal columns plus aliases),
830         # "group by" and "where".
831         self.where.relabel_aliases(change_map)
832         if isinstance(self.group_by, tuple):
833             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])
834         self.select = tuple([col.relabeled_clone(change_map) for col in self.select])
835         self.annotations = self.annotations and {
836             key: col.relabeled_clone(change_map) for key, col in self.annotations.items()
837         }
838 
839         # 2. Rename the alias in the internal table/alias datastructures.
840         for old_alias, new_alias in change_map.items():
841             if old_alias not in self.alias_map:
842                 continue
843             alias_data = self.alias_map[old_alias].relabeled_clone(change_map)
844             self.alias_map[new_alias] = alias_data
845             self.alias_refcount[new_alias] = self.alias_refcount[old_alias]
846             del self.alias_refcount[old_alias]
847             del self.alias_map[old_alias]
848 
849             table_aliases = self.table_map[alias_data.table_name]
850             for pos, alias in enumerate(table_aliases):
851                 if alias == old_alias:
852                     table_aliases[pos] = new_alias
853                     break
854         self.external_aliases = {change_map.get(alias, alias)
855                                  for alias in self.external_aliases}
856 
857     def bump_prefix(self, outer_query):
858         """
859         Change the alias prefix to the next letter in the alphabet in a way
860         that the outer query's aliases and this query's aliases will not
861         conflict. Even tables that previously had no alias will get an alias
862         after this call.
863         """
864         def prefix_gen():
865             """
866             Generate a sequence of characters in alphabetical order:
867                 -> 'A', 'B', 'C', ...
868 
869             When the alphabet is finished, the sequence will continue with the
870             Cartesian product:
871                 -> 'AA', 'AB', 'AC', ...
872             """
873             alphabet = ascii_uppercase
874             prefix = chr(ord(self.alias_prefix) + 1)
875             yield prefix
876             for n in count(1):
877                 seq = alphabet[alphabet.index(prefix):] if prefix else alphabet
878                 for s in product(seq, repeat=n):
879                     yield ''.join(s)
880                 prefix = None
881 
882         if self.alias_prefix != outer_query.alias_prefix:
883             # No clashes between self and outer query should be possible.
884             return
885 
886         # Explicitly avoid infinite loop. The constant divider is based on how
887         # much depth recursive subquery references add to the stack. This value
888         # might need to be adjusted when adding or removing function calls from
889         # the code path in charge of performing these operations.
890         local_recursion_limit = sys.getrecursionlimit() // 16
891         for pos, prefix in enumerate(prefix_gen()):
892             if prefix not in self.subq_aliases:
893                 self.alias_prefix = prefix
894                 break
895             if pos > local_recursion_limit:
896                 raise RecursionError(
897                     'Maximum recursion depth exceeded: too many subqueries.'
898                 )
899         self.subq_aliases = self.subq_aliases.union([self.alias_prefix])
900         outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)
901         self.change_aliases({
902             alias: '%s%d' % (self.alias_prefix, pos)
903             for pos, alias in enumerate(self.alias_map)
904         })
905 
906     def get_initial_alias(self):
907         """
908         Return the first alias for this query, after increasing its reference
909         count.
910         """
911         if self.alias_map:
912             alias = self.base_table
913             self.ref_alias(alias)
914         else:
915             alias = self.join(BaseTable(self.get_meta().db_table, None))
916         return alias
917 
918     def count_active_tables(self):
919         """
920         Return the number of tables in this query with a non-zero reference
921         count. After execution, the reference counts are zeroed, so tables
922         added in compiler will not be seen by this method.
923         """
924         return len([1 for count in self.alias_refcount.values() if count])
925 
926     def join(self, join, reuse=None, reuse_with_filtered_relation=False):
927         """
928         Return an alias for the 'join', either reusing an existing alias for
929         that join or creating a new one. 'join' is either a
930         sql.datastructures.BaseTable or Join.
931 
932         The 'reuse' parameter can be either None which means all joins are
933         reusable, or it can be a set containing the aliases that can be reused.
934 
935         The 'reuse_with_filtered_relation' parameter is used when computing
936         FilteredRelation instances.
937 
938         A join is always created as LOUTER if the lhs alias is LOUTER to make
939         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new
940         joins are created as LOUTER if the join is nullable.
941         """
942         if reuse_with_filtered_relation and reuse:
943             reuse_aliases = [
944                 a for a, j in self.alias_map.items()
945                 if a in reuse and j.equals(join, with_filtered_relation=False)
946             ]
947         else:
948             reuse_aliases = [
949                 a for a, j in self.alias_map.items()
950                 if (reuse is None or a in reuse) and j == join
951             ]
952         if reuse_aliases:
953             if join.table_alias in reuse_aliases:
954                 reuse_alias = join.table_alias
955             else:
956                 # Reuse the most recent alias of the joined table
957                 # (a many-to-many relation may be joined multiple times).
958                 reuse_alias = reuse_aliases[-1]
959             self.ref_alias(reuse_alias)
960             return reuse_alias
961 
962         # No reuse is possible, so we need a new alias.
963         alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)
964         if join.join_type:
965             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:
966                 join_type = LOUTER
967             else:
968                 join_type = INNER
969             join.join_type = join_type
970         join.table_alias = alias
971         self.alias_map[alias] = join
972         return alias
973 
974     def join_parent_model(self, opts, model, alias, seen):
975         """
976         Make sure the given 'model' is joined in the query. If 'model' isn't
977         a parent of 'opts' or if it is None this method is a no-op.
978 
979         The 'alias' is the root alias for starting the join, 'seen' is a dict
980         of model -> alias of existing joins. It must also contain a mapping
981         of None -> some alias. This will be returned in the no-op case.
982         """
983         if model in seen:
984             return seen[model]
985         chain = opts.get_base_chain(model)
986         if not chain:
987             return alias
988         curr_opts = opts
989         for int_model in chain:
990             if int_model in seen:
991                 curr_opts = int_model._meta
992                 alias = seen[int_model]
993                 continue
994             # Proxy model have elements in base chain
995             # with no parents, assign the new options
996             # object and skip to the next base in that
997             # case
998             if not curr_opts.parents[int_model]:
999                 curr_opts = int_model._meta
1000                 continue
1001             link_field = curr_opts.get_ancestor_link(int_model)
1002             join_info = self.setup_joins([link_field.name], curr_opts, alias)
1003             curr_opts = int_model._meta
1004             alias = seen[int_model] = join_info.joins[-1]
1005         return alias or seen[None]
1006 
1007     def add_annotation(self, annotation, alias, is_summary=False):
1008         """Add a single annotation expression to the Query."""
1009         annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
1010                                                    summarize=is_summary)
1011         self.append_annotation_mask([alias])
1012         self.annotations[alias] = annotation
1013 
1014     def resolve_expression(self, query, *args, **kwargs):
1015         clone = self.clone()
1016         # Subqueries need to use a different set of aliases than the outer query.
1017         clone.bump_prefix(query)
1018         clone.subquery = True
1019         # It's safe to drop ordering if the queryset isn't using slicing,
1020         # distinct(*fields) or select_for_update().
1021         if (self.low_mark == 0 and self.high_mark is None and
1022                 not self.distinct_fields and
1023                 not self.select_for_update):
1024             clone.clear_ordering(True)
1025         clone.where.resolve_expression(query, *args, **kwargs)
1026         for key, value in clone.annotations.items():
1027             resolved = value.resolve_expression(query, *args, **kwargs)
1028             if hasattr(resolved, 'external_aliases'):
1029                 resolved.external_aliases.update(clone.alias_map)
1030             clone.annotations[key] = resolved
1031         # Outer query's aliases are considered external.
1032         clone.external_aliases.update(
1033             alias for alias, table in query.alias_map.items()
1034             if (
1035                 isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias
1036             ) or (
1037                 isinstance(table, BaseTable) and table.table_name != table.table_alias
1038             )
1039         )
1040         return clone
1041 
1042     def as_sql(self, compiler, connection):
1043         sql, params = self.get_compiler(connection=connection).as_sql()
1044         if self.subquery:
1045             sql = '(%s)' % sql
1046         return sql, params
1047 
1048     def resolve_lookup_value(self, value, can_reuse, allow_joins, simple_col):
1049         if hasattr(value, 'resolve_expression'):
1050             kwargs = {'reuse': can_reuse, 'allow_joins': allow_joins}
1051             if isinstance(value, F):
1052                 kwargs['simple_col'] = simple_col
1053             value = value.resolve_expression(self, **kwargs)
1054         elif isinstance(value, (list, tuple)):
1055             # The items of the iterable may be expressions and therefore need
1056             # to be resolved independently.
1057             resolved_values = []
1058             for sub_value in value:
1059                 if hasattr(sub_value, 'resolve_expression'):
1060                     if isinstance(sub_value, F):
1061                         resolved_values.append(sub_value.resolve_expression(
1062                             self, reuse=can_reuse, allow_joins=allow_joins,
1063                             simple_col=simple_col,
1064                         ))
1065                     else:
1066                         resolved_values.append(sub_value.resolve_expression(
1067                             self, reuse=can_reuse, allow_joins=allow_joins,
1068                         ))
1069                 else:
1070                     resolved_values.append(sub_value)
1071             value = tuple(resolved_values)
1072         return value
1073 
1074     def solve_lookup_type(self, lookup):
1075         """
1076         Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').
1077         """
1078         lookup_splitted = lookup.split(LOOKUP_SEP)
1079         if self.annotations:
1080             expression, expression_lookups = refs_expression(lookup_splitted, self.annotations)
1081             if expression:
1082                 return expression_lookups, (), expression
1083         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
1084         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
1085         if len(lookup_parts) > 1 and not field_parts:
1086             raise FieldError(
1087                 'Invalid lookup "%s" for model %s".' %
1088                 (lookup, self.get_meta().model.__name__)
1089             )
1090         return lookup_parts, field_parts, False
1091 
1092     def check_query_object_type(self, value, opts, field):
1093         """
1094         Check whether the object passed while querying is of the correct type.
1095         If not, raise a ValueError specifying the wrong object.
1096         """
1097         if hasattr(value, '_meta'):
1098             if not check_rel_lookup_compatibility(value._meta.model, opts, field):
1099                 raise ValueError(
1100                     'Cannot query "%s": Must be "%s" instance.' %
1101                     (value, opts.object_name))
1102 
1103     def check_related_objects(self, field, value, opts):
1104         """Check the type of object passed to query relations."""
1105         if field.is_relation:
1106             # Check that the field and the queryset use the same model in a
1107             # query like .filter(author=Author.objects.all()). For example, the
1108             # opts would be Author's (from the author field) and value.model
1109             # would be Author.objects.all() queryset's .model (Author also).
1110             # The field is the related field on the lhs side.
1111             if (isinstance(value, Query) and not value.has_select_fields and
1112                     not check_rel_lookup_compatibility(value.model, opts, field)):
1113                 raise ValueError(
1114                     'Cannot use QuerySet for "%s": Use a QuerySet for "%s".' %
1115                     (value.model._meta.object_name, opts.object_name)
1116                 )
1117             elif hasattr(value, '_meta'):
1118                 self.check_query_object_type(value, opts, field)
1119             elif hasattr(value, '__iter__'):
1120                 for v in value:
1121                     self.check_query_object_type(v, opts, field)
1122 
1123     def check_filterable(self, expression):
1124         """Raise an error if expression cannot be used in a WHERE clause."""
1125         if not getattr(expression, 'filterable', 'True'):
1126             raise NotSupportedError(
1127                 expression.__class__.__name__ + ' is disallowed in the filter '
1128                 'clause.'
1129             )
1130         if hasattr(expression, 'get_source_expressions'):
1131             for expr in expression.get_source_expressions():
1132                 self.check_filterable(expr)
1133 
1134     def build_lookup(self, lookups, lhs, rhs):
1135         """
1136         Try to extract transforms and lookup from given lhs.
1137 
1138         The lhs value is something that works like SQLExpression.
1139         The rhs value is what the lookup is going to compare against.
1140         The lookups is a list of names to extract using get_lookup()
1141         and get_transform().
1142         """
1143         # __exact is the default lookup if one isn't given.
1144         *transforms, lookup_name = lookups or ['exact']
1145         for name in transforms:
1146             lhs = self.try_transform(lhs, name)
1147         # First try get_lookup() so that the lookup takes precedence if the lhs
1148         # supports both transform and lookup for the name.
1149         lookup_class = lhs.get_lookup(lookup_name)
1150         if not lookup_class:
1151             if lhs.field.is_relation:
1152                 raise FieldError('Related Field got invalid lookup: {}'.format(lookup_name))
1153             # A lookup wasn't found. Try to interpret the name as a transform
1154             # and do an Exact lookup against it.
1155             lhs = self.try_transform(lhs, lookup_name)
1156             lookup_name = 'exact'
1157             lookup_class = lhs.get_lookup(lookup_name)
1158             if not lookup_class:
1159                 return
1160 
1161         lookup = lookup_class(lhs, rhs)
1162         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all
1163         # uses of None as a query value unless the lookup supports it.
1164         if lookup.rhs is None and not lookup.can_use_none_as_rhs:
1165             if lookup_name not in ('exact', 'iexact'):
1166                 raise ValueError("Cannot use None as a query value")
1167             return lhs.get_lookup('isnull')(lhs, True)
1168 
1169         # For Oracle '' is equivalent to null. The check must be done at this
1170         # stage because join promotion can't be done in the compiler. Using
1171         # DEFAULT_DB_ALIAS isn't nice but it's the best that can be done here.
1172         # A similar thing is done in is_nullable(), too.
1173         if (connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
1174                 lookup_name == 'exact' and lookup.rhs == ''):
1175             return lhs.get_lookup('isnull')(lhs, True)
1176 
1177         return lookup
1178 
1179     def try_transform(self, lhs, name):
1180         """
1181         Helper method for build_lookup(). Try to fetch and initialize
1182         a transform for name parameter from lhs.
1183         """
1184         transform_class = lhs.get_transform(name)
1185         if transform_class:
1186             return transform_class(lhs)
1187         else:
1188             output_field = lhs.output_field.__class__
1189             suggested_lookups = difflib.get_close_matches(name, output_field.get_lookups())
1190             if suggested_lookups:
1191                 suggestion = ', perhaps you meant %s?' % ' or '.join(suggested_lookups)
1192             else:
1193                 suggestion = '.'
1194             raise FieldError(
1195                 "Unsupported lookup '%s' for %s or join on the field not "
1196                 "permitted%s" % (name, output_field.__name__, suggestion)
1197             )
1198 
1199     def build_filter(self, filter_expr, branch_negated=False, current_negated=False,
1200                      can_reuse=None, allow_joins=True, split_subq=True,
1201                      reuse_with_filtered_relation=False, simple_col=False):
1202         """
1203         Build a WhereNode for a single filter clause but don't add it
1204         to this Query. Query.add_q() will then add this filter to the where
1205         Node.
1206 
1207         The 'branch_negated' tells us if the current branch contains any
1208         negations. This will be used to determine if subqueries are needed.
1209 
1210         The 'current_negated' is used to determine if the current filter is
1211         negated or not and this will be used to determine if IS NULL filtering
1212         is needed.
1213 
1214         The difference between current_negated and branch_negated is that
1215         branch_negated is set on first negation, but current_negated is
1216         flipped for each negation.
1217 
1218         Note that add_filter will not do any negating itself, that is done
1219         upper in the code by add_q().
1220 
1221         The 'can_reuse' is a set of reusable joins for multijoins.
1222 
1223         If 'reuse_with_filtered_relation' is True, then only joins in can_reuse
1224         will be reused.
1225 
1226         The method will create a filter clause that can be added to the current
1227         query. However, if the filter isn't added to the query then the caller
1228         is responsible for unreffing the joins used.
1229         """
1230         if isinstance(filter_expr, dict):
1231             raise FieldError("Cannot parse keyword query as dict")
1232         arg, value = filter_expr
1233         if not arg:
1234             raise FieldError("Cannot parse keyword query %r" % arg)
1235         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
1236 
1237         self.check_filterable(reffed_expression)
1238 
1239         if not allow_joins and len(parts) > 1:
1240             raise FieldError("Joined field references are not permitted in this query")
1241 
1242         pre_joins = self.alias_refcount.copy()
1243         value = self.resolve_lookup_value(value, can_reuse, allow_joins, simple_col)
1244         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}
1245 
1246         self.check_filterable(value)
1247 
1248         clause = self.where_class()
1249         if reffed_expression:
1250             condition = self.build_lookup(lookups, reffed_expression, value)
1251             clause.add(condition, AND)
1252             return clause, []
1253 
1254         opts = self.get_meta()
1255         alias = self.get_initial_alias()
1256         allow_many = not branch_negated or not split_subq
1257 
1258         try:
1259             join_info = self.setup_joins(
1260                 parts, opts, alias, can_reuse=can_reuse, allow_many=allow_many,
1261                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1262             )
1263 
1264             # Prevent iterator from being consumed by check_related_objects()
1265             if isinstance(value, Iterator):
1266                 value = list(value)
1267             self.check_related_objects(join_info.final_field, value, join_info.opts)
1268 
1269             # split_exclude() needs to know which joins were generated for the
1270             # lookup parts
1271             self._lookup_joins = join_info.joins
1272         except MultiJoin as e:
1273             return self.split_exclude(filter_expr, can_reuse, e.names_with_path)
1274 
1275         # Update used_joins before trimming since they are reused to determine
1276         # which joins could be later promoted to INNER.
1277         used_joins.update(join_info.joins)
1278         targets, alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1279         if can_reuse is not None:
1280             can_reuse.update(join_list)
1281 
1282         if join_info.final_field.is_relation:
1283             # No support for transforms for relational fields
1284             num_lookups = len(lookups)
1285             if num_lookups > 1:
1286                 raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))
1287             if len(targets) == 1:
1288                 col = _get_col(targets[0], join_info.final_field, alias, simple_col)
1289             else:
1290                 col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)
1291         else:
1292             col = _get_col(targets[0], join_info.final_field, alias, simple_col)
1293 
1294         condition = self.build_lookup(lookups, col, value)
1295         lookup_type = condition.lookup_name
1296         clause.add(condition, AND)
1297 
1298         require_outer = lookup_type == 'isnull' and condition.rhs is True and not current_negated
1299         if current_negated and (lookup_type != 'isnull' or condition.rhs is False) and condition.rhs is not None:
1300             require_outer = True
1301             if (lookup_type != 'isnull' and (
1302                     self.is_nullable(targets[0]) or
1303                     self.alias_map[join_list[-1]].join_type == LOUTER)):
1304                 # The condition added here will be SQL like this:
1305                 # NOT (col IS NOT NULL), where the first NOT is added in
1306                 # upper layers of code. The reason for addition is that if col
1307                 # is null, then col != someval will result in SQL "unknown"
1308                 # which isn't the same as in Python. The Python None handling
1309                 # is wanted, and it can be gotten by
1310                 # (col IS NULL OR col != someval)
1311                 #   <=>
1312                 # NOT (col IS NOT NULL AND col = someval).
1313                 lookup_class = targets[0].get_lookup('isnull')
1314                 col = _get_col(targets[0], join_info.targets[0], alias, simple_col)
1315                 clause.add(lookup_class(col, False), AND)
1316         return clause, used_joins if not require_outer else ()
1317 
1318     def add_filter(self, filter_clause):
1319         self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))
1320 
1321     def add_q(self, q_object):
1322         """
1323         A preprocessor for the internal _add_q(). Responsible for doing final
1324         join promotion.
1325         """
1326         # For join promotion this case is doing an AND for the added q_object
1327         # and existing conditions. So, any existing inner join forces the join
1328         # type to remain inner. Existing outer joins can however be demoted.
1329         # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if
1330         # rel_a doesn't produce any rows, then the whole condition must fail.
1331         # So, demotion is OK.
1332         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}
1333         clause, _ = self._add_q(q_object, self.used_aliases)
1334         if clause:
1335             self.where.add(clause, AND)
1336         self.demote_joins(existing_inner)
1337 
1338     def build_where(self, q_object):
1339         return self._add_q(q_object, used_aliases=set(), allow_joins=False, simple_col=True)[0]
1340 
1341     def _add_q(self, q_object, used_aliases, branch_negated=False,
1342                current_negated=False, allow_joins=True, split_subq=True,
1343                simple_col=False):
1344         """Add a Q-object to the current filter."""
1345         connector = q_object.connector
1346         current_negated = current_negated ^ q_object.negated
1347         branch_negated = branch_negated or q_object.negated
1348         target_clause = self.where_class(connector=connector,
1349                                          negated=q_object.negated)
1350         joinpromoter = JoinPromoter(q_object.connector, len(q_object.children), current_negated)
1351         for child in q_object.children:
1352             if isinstance(child, Node):
1353                 child_clause, needed_inner = self._add_q(
1354                     child, used_aliases, branch_negated,
1355                     current_negated, allow_joins, split_subq, simple_col)
1356                 joinpromoter.add_votes(needed_inner)
1357             else:
1358                 child_clause, needed_inner = self.build_filter(
1359                     child, can_reuse=used_aliases, branch_negated=branch_negated,
1360                     current_negated=current_negated, allow_joins=allow_joins,
1361                     split_subq=split_subq, simple_col=simple_col,
1362                 )
1363                 joinpromoter.add_votes(needed_inner)
1364             if child_clause:
1365                 target_clause.add(child_clause, connector)
1366         needed_inner = joinpromoter.update_join_types(self)
1367         return target_clause, needed_inner
1368 
1369     def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
1370         """Add a FilteredRelation object to the current filter."""
1371         connector = q_object.connector
1372         current_negated ^= q_object.negated
1373         branch_negated = branch_negated or q_object.negated
1374         target_clause = self.where_class(connector=connector, negated=q_object.negated)
1375         for child in q_object.children:
1376             if isinstance(child, Node):
1377                 child_clause = self.build_filtered_relation_q(
1378                     child, reuse=reuse, branch_negated=branch_negated,
1379                     current_negated=current_negated,
1380                 )
1381             else:
1382                 child_clause, _ = self.build_filter(
1383                     child, can_reuse=reuse, branch_negated=branch_negated,
1384                     current_negated=current_negated,
1385                     allow_joins=True, split_subq=False,
1386                     reuse_with_filtered_relation=True,
1387                 )
1388             target_clause.add(child_clause, connector)
1389         return target_clause
1390 
1391     def add_filtered_relation(self, filtered_relation, alias):
1392         filtered_relation.alias = alias
1393         lookups = dict(get_children_from_q(filtered_relation.condition))
1394         for lookup in chain((filtered_relation.relation_name,), lookups):
1395             lookup_parts, field_parts, _ = self.solve_lookup_type(lookup)
1396             shift = 2 if not lookup_parts else 1
1397             if len(field_parts) > (shift + len(lookup_parts)):
1398                 raise ValueError(
1399                     "FilteredRelation's condition doesn't support nested "
1400                     "relations (got %r)." % lookup
1401                 )
1402         self._filtered_relations[filtered_relation.alias] = filtered_relation
1403 
1404     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
1405         """
1406         Walk the list of names and turns them into PathInfo tuples. A single
1407         name in 'names' can generate multiple PathInfos (m2m, for example).
1408 
1409         'names' is the path of names to travel, 'opts' is the model Options we
1410         start the name resolving from, 'allow_many' is as for setup_joins().
1411         If fail_on_missing is set to True, then a name that can't be resolved
1412         will generate a FieldError.
1413 
1414         Return a list of PathInfo tuples. In addition return the final field
1415         (the last used join field) and target (which is a field guaranteed to
1416         contain the same value as the final field). Finally, return those names
1417         that weren't found (which are likely transforms and the final lookup).
1418         """
1419         path, names_with_path = [], []
1420         for pos, name in enumerate(names):
1421             cur_names_with_path = (name, [])
1422             if name == 'pk':
1423                 name = opts.pk.name
1424 
1425             field = None
1426             filtered_relation = None
1427             try:
1428                 field = opts.get_field(name)
1429             except FieldDoesNotExist:
1430                 if name in self.annotation_select:
1431                     field = self.annotation_select[name].output_field
1432                 elif name in self._filtered_relations and pos == 0:
1433                     filtered_relation = self._filtered_relations[name]
1434                     field = opts.get_field(filtered_relation.relation_name)
1435             if field is not None:
1436                 # Fields that contain one-to-many relations with a generic
1437                 # model (like a GenericForeignKey) cannot generate reverse
1438                 # relations and therefore cannot be used for reverse querying.
1439                 if field.is_relation and not field.related_model:
1440                     raise FieldError(
1441                         "Field %r does not generate an automatic reverse "
1442                         "relation and therefore cannot be used for reverse "
1443                         "querying. If it is a GenericForeignKey, consider "
1444                         "adding a GenericRelation." % name
1445                     )
1446                 try:
1447                     model = field.model._meta.concrete_model
1448                 except AttributeError:
1449                     # QuerySet.annotate() may introduce fields that aren't
1450                     # attached to a model.
1451                     model = None
1452             else:
1453                 # We didn't find the current field, so move position back
1454                 # one step.
1455                 pos -= 1
1456                 if pos == -1 or fail_on_missing:
1457                     available = sorted([
1458                         *get_field_names_from_opts(opts),
1459                         *self.annotation_select,
1460                         *self._filtered_relations,
1461                     ])
1462                     raise FieldError("Cannot resolve keyword '%s' into field. "
1463                                      "Choices are: %s" % (name, ", ".join(available)))
1464                 break
1465             # Check if we need any joins for concrete inheritance cases (the
1466             # field lives in parent, but we are currently in one of its
1467             # children)
1468             if model is not opts.model:
1469                 path_to_parent = opts.get_path_to_parent(model)
1470                 if path_to_parent:
1471                     path.extend(path_to_parent)
1472                     cur_names_with_path[1].extend(path_to_parent)
1473                     opts = path_to_parent[-1].to_opts
1474             if hasattr(field, 'get_path_info'):
1475                 pathinfos = field.get_path_info(filtered_relation)
1476                 if not allow_many:
1477                     for inner_pos, p in enumerate(pathinfos):
1478                         if p.m2m:
1479                             cur_names_with_path[1].extend(pathinfos[0:inner_pos + 1])
1480                             names_with_path.append(cur_names_with_path)
1481                             raise MultiJoin(pos + 1, names_with_path)
1482                 last = pathinfos[-1]
1483                 path.extend(pathinfos)
1484                 final_field = last.join_field
1485                 opts = last.to_opts
1486                 targets = last.target_fields
1487                 cur_names_with_path[1].extend(pathinfos)
1488                 names_with_path.append(cur_names_with_path)
1489             else:
1490                 # Local non-relational field.
1491                 final_field = field
1492                 targets = (field,)
1493                 if fail_on_missing and pos + 1 != len(names):
1494                     raise FieldError(
1495                         "Cannot resolve keyword %r into field. Join on '%s'"
1496                         " not permitted." % (names[pos + 1], name))
1497                 break
1498         return path, final_field, targets, names[pos + 1:]
1499 
1500     def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True,
1501                     reuse_with_filtered_relation=False):
1502         """
1503         Compute the necessary table joins for the passage through the fields
1504         given in 'names'. 'opts' is the Options class for the current model
1505         (which gives the table we are starting from), 'alias' is the alias for
1506         the table to start the joining from.
1507 
1508         The 'can_reuse' defines the reverse foreign key joins we can reuse. It
1509         can be None in which case all joins are reusable or a set of aliases
1510         that can be reused. Note that non-reverse foreign keys are always
1511         reusable when using setup_joins().
1512 
1513         The 'reuse_with_filtered_relation' can be used to force 'can_reuse'
1514         parameter and force the relation on the given connections.
1515 
1516         If 'allow_many' is False, then any reverse foreign key seen will
1517         generate a MultiJoin exception.
1518 
1519         Return the final field involved in the joins, the target field (used
1520         for any 'where' constraint), the final 'opts' value, the joins, the
1521         field path traveled to generate the joins, and a transform function
1522         that takes a field and alias and is equivalent to `field.get_col(alias)`
1523         in the simple case but wraps field transforms if they were included in
1524         names.
1525 
1526         The target field is the field containing the concrete value. Final
1527         field can be something different, for example foreign key pointing to
1528         that value. Final field is needed for example in some value
1529         conversions (convert 'obj' in fk__id=obj to pk val using the foreign
1530         key field for example).
1531         """
1532         joins = [alias]
1533         # The transform can't be applied yet, as joins must be trimmed later.
1534         # To avoid making every caller of this method look up transforms
1535         # directly, compute transforms here and create a partial that converts
1536         # fields to the appropriate wrapped version.
1537 
1538         def final_transformer(field, alias):
1539             return field.get_col(alias)
1540 
1541         # Try resolving all the names as fields first. If there's an error,
1542         # treat trailing names as lookups until a field can be resolved.
1543         last_field_exception = None
1544         for pivot in range(len(names), 0, -1):
1545             try:
1546                 path, final_field, targets, rest = self.names_to_path(
1547                     names[:pivot], opts, allow_many, fail_on_missing=True,
1548                 )
1549             except FieldError as exc:
1550                 if pivot == 1:
1551                     # The first item cannot be a lookup, so it's safe
1552                     # to raise the field error here.
1553                     raise
1554                 else:
1555                     last_field_exception = exc
1556             else:
1557                 # The transforms are the remaining items that couldn't be
1558                 # resolved into fields.
1559                 transforms = names[pivot:]
1560                 break
1561         for name in transforms:
1562             def transform(field, alias, *, name, previous):
1563                 try:
1564                     wrapped = previous(field, alias)
1565                     return self.try_transform(wrapped, name)
1566                 except FieldError:
1567                     # FieldError is raised if the transform doesn't exist.
1568                     if isinstance(final_field, Field) and last_field_exception:
1569                         raise last_field_exception
1570                     else:
1571                         raise
1572             final_transformer = functools.partial(transform, name=name, previous=final_transformer)
1573         # Then, add the path to the query's joins. Note that we can't trim
1574         # joins at this stage - we will need the information about join type
1575         # of the trimmed joins.
1576         for join in path:
1577             if join.filtered_relation:
1578                 filtered_relation = join.filtered_relation.clone()
1579                 table_alias = filtered_relation.alias
1580             else:
1581                 filtered_relation = None
1582                 table_alias = None
1583             opts = join.to_opts
1584             if join.direct:
1585                 nullable = self.is_nullable(join.join_field)
1586             else:
1587                 nullable = True
1588             connection = Join(
1589                 opts.db_table, alias, table_alias, INNER, join.join_field,
1590                 nullable, filtered_relation=filtered_relation,
1591             )
1592             reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None
1593             alias = self.join(
1594                 connection, reuse=reuse,
1595                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1596             )
1597             joins.append(alias)
1598             if filtered_relation:
1599                 filtered_relation.path = joins[:]
1600         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)
1601 
1602     def trim_joins(self, targets, joins, path):
1603         """
1604         The 'target' parameter is the final field being joined to, 'joins'
1605         is the full list of join aliases. The 'path' contain the PathInfos
1606         used to create the joins.
1607 
1608         Return the final target field and table alias and the new active
1609         joins.
1610 
1611         Always trim any direct join if the target column is already in the
1612         previous table. Can't trim reverse joins as it's unknown if there's
1613         anything on the other side of the join.
1614         """
1615         joins = joins[:]
1616         for pos, info in enumerate(reversed(path)):
1617             if len(joins) == 1 or not info.direct:
1618                 break
1619             if info.filtered_relation:
1620                 break
1621             join_targets = {t.column for t in info.join_field.foreign_related_fields}
1622             cur_targets = {t.column for t in targets}
1623             if not cur_targets.issubset(join_targets):
1624                 break
1625             targets_dict = {r[1].column: r[0] for r in info.join_field.related_fields if r[1].column in cur_targets}
1626             targets = tuple(targets_dict[t.column] for t in targets)
1627             self.unref_alias(joins.pop())
1628         return targets, joins[-1], joins
1629 
1630     @classmethod
1631     def _gen_col_aliases(cls, exprs):
1632         for expr in exprs:
1633             if isinstance(expr, Col):
1634                 yield expr.alias
1635             else:
1636                 yield from cls._gen_col_aliases(expr.get_source_expressions())
1637 
1638     def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False, simple_col=False):
1639         if not allow_joins and LOOKUP_SEP in name:
1640             raise FieldError("Joined field references are not permitted in this query")
1641         annotation = self.annotations.get(name)
1642         if annotation is not None:
1643             if not allow_joins:
1644                 for alias in self._gen_col_aliases([annotation]):
1645                     if isinstance(self.alias_map[alias], Join):
1646                         raise FieldError(
1647                             'Joined field references are not permitted in '
1648                             'this query'
1649                         )
1650             if summarize:
1651                 # Summarize currently means we are doing an aggregate() query
1652                 # which is executed as a wrapped subquery if any of the
1653                 # aggregate() elements reference an existing annotation. In
1654                 # that case we need to return a Ref to the subquery's annotation.
1655                 return Ref(name, self.annotation_select[name])
1656             else:
1657                 return annotation
1658         else:
1659             field_list = name.split(LOOKUP_SEP)
1660             join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)
1661             targets, final_alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1662             if not allow_joins and len(join_list) > 1:
1663                 raise FieldError('Joined field references are not permitted in this query')
1664             if len(targets) > 1:
1665                 raise FieldError("Referencing multicolumn fields with F() objects "
1666                                  "isn't supported")
1667             # Verify that the last lookup in name is a field or a transform:
1668             # transform_function() raises FieldError if not.
1669             join_info.transform_function(targets[0], final_alias)
1670             if reuse is not None:
1671                 reuse.update(join_list)
1672             col = _get_col(targets[0], join_info.targets[0], join_list[-1], simple_col)
1673             return col
1674 
1675     def split_exclude(self, filter_expr, can_reuse, names_with_path):
1676         """
1677         When doing an exclude against any kind of N-to-many relation, we need
1678         to use a subquery. This method constructs the nested query, given the
1679         original exclude filter (filter_expr) and the portion up to the first
1680         N-to-many relation field.
1681 
1682         For example, if the origin filter is ~Q(child__name='foo'), filter_expr
1683         is ('child__name', 'foo') and can_reuse is a set of joins usable for
1684         filters in the original query.
1685 
1686         We will turn this into equivalent of:
1687             WHERE NOT (pk IN (SELECT parent_id FROM thetable
1688                               WHERE name = 'foo' AND parent_id IS NOT NULL))
1689 
1690         It might be worth it to consider using WHERE NOT EXISTS as that has
1691         saner null handling, and is easier for the backend's optimizer to
1692         handle.
1693         """
1694         filter_lhs, filter_rhs = filter_expr
1695         if isinstance(filter_rhs, F):
1696             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
1697         # Generate the inner query.
1698         query = Query(self.model)
1699         query._filtered_relations = self._filtered_relations
1700         query.add_filter(filter_expr)
1701         query.clear_ordering(True)
1702         # Try to have as simple as possible subquery -> trim leading joins from
1703         # the subquery.
1704         trimmed_prefix, contains_louter = query.trim_start(names_with_path)
1705 
1706         # Add extra check to make sure the selected field will not be null
1707         # since we are adding an IN <subquery> clause. This prevents the
1708         # database from tripping over IN (...,NULL,...) selects and returning
1709         # nothing
1710         col = query.select[0]
1711         select_field = col.target
1712         alias = col.alias
1713         if self.is_nullable(select_field):
1714             lookup_class = select_field.get_lookup('isnull')
1715             lookup = lookup_class(select_field.get_col(alias), False)
1716             query.where.add(lookup, AND)
1717         if alias in can_reuse:
1718             pk = select_field.model._meta.pk
1719             # Need to add a restriction so that outer query's filters are in effect for
1720             # the subquery, too.
1721             query.bump_prefix(self)
1722             lookup_class = select_field.get_lookup('exact')
1723             # Note that the query.select[0].alias is different from alias
1724             # due to bump_prefix above.
1725             lookup = lookup_class(pk.get_col(query.select[0].alias),
1726                                   pk.get_col(alias))
1727             query.where.add(lookup, AND)
1728             query.external_aliases.add(alias)
1729 
1730         condition, needed_inner = self.build_filter(
1731             ('%s__in' % trimmed_prefix, query),
1732             current_negated=True, branch_negated=True, can_reuse=can_reuse)
1733         if contains_louter:
1734             or_null_condition, _ = self.build_filter(
1735                 ('%s__isnull' % trimmed_prefix, True),
1736                 current_negated=True, branch_negated=True, can_reuse=can_reuse)
1737             condition.add(or_null_condition, OR)
1738             # Note that the end result will be:
1739             # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.
1740             # This might look crazy but due to how IN works, this seems to be
1741             # correct. If the IS NOT NULL check is removed then outercol NOT
1742             # IN will return UNKNOWN. If the IS NULL check is removed, then if
1743             # outercol IS NULL we will not match the row.
1744         return condition, needed_inner
1745 
1746     def set_empty(self):
1747         self.where.add(NothingNode(), AND)
1748 
1749     def is_empty(self):
1750         return any(isinstance(c, NothingNode) for c in self.where.children)
1751 
1752     def set_limits(self, low=None, high=None):
1753         """
1754         Adjust the limits on the rows retrieved. Use low/high to set these,
1755         as it makes it more Pythonic to read and write. When the SQL query is
1756         created, convert them to the appropriate offset and limit values.
1757 
1758         Apply any limits passed in here to the existing constraints. Add low
1759         to the current low value and clamp both to any existing high value.
1760         """
1761         if high is not None:
1762             if self.high_mark is not None:
1763                 self.high_mark = min(self.high_mark, self.low_mark + high)
1764             else:
1765                 self.high_mark = self.low_mark + high
1766         if low is not None:
1767             if self.high_mark is not None:
1768                 self.low_mark = min(self.high_mark, self.low_mark + low)
1769             else:
1770                 self.low_mark = self.low_mark + low
1771 
1772         if self.low_mark == self.high_mark:
1773             self.set_empty()
1774 
1775     def clear_limits(self):
1776         """Clear any existing limits."""
1777         self.low_mark, self.high_mark = 0, None
1778 
1779     @property
1780     def is_sliced(self):
1781         return self.low_mark != 0 or self.high_mark is not None
1782 
1783     def has_limit_one(self):
1784         return self.high_mark is not None and (self.high_mark - self.low_mark) == 1
1785 
1786     def can_filter(self):
1787         """
1788         Return True if adding filters to this instance is still possible.
1789 
1790         Typically, this means no limits or offsets have been put on the results.
1791         """
1792         return not self.is_sliced
1793 
1794     def clear_select_clause(self):
1795         """Remove all fields from SELECT clause."""
1796         self.select = ()
1797         self.default_cols = False
1798         self.select_related = False
1799         self.set_extra_mask(())
1800         self.set_annotation_mask(())
1801 
1802     def clear_select_fields(self):
1803         """
1804         Clear the list of fields to select (but not extra_select columns).
1805         Some queryset types completely replace any existing list of select
1806         columns.
1807         """
1808         self.select = ()
1809         self.values_select = ()
1810 
1811     def add_select_col(self, col):
1812         self.select += col,
1813         self.values_select += col.output_field.name,
1814 
1815     def set_select(self, cols):
1816         self.default_cols = False
1817         self.select = tuple(cols)
1818 
1819     def add_distinct_fields(self, *field_names):
1820         """
1821         Add and resolve the given fields to the query's "distinct on" clause.
1822         """
1823         self.distinct_fields = field_names
1824         self.distinct = True
1825 
1826     def add_fields(self, field_names, allow_m2m=True):
1827         """
1828         Add the given (model) fields to the select set. Add the field names in
1829         the order specified.
1830         """
1831         alias = self.get_initial_alias()
1832         opts = self.get_meta()
1833 
1834         try:
1835             cols = []
1836             for name in field_names:
1837                 # Join promotion note - we must not remove any rows here, so
1838                 # if there is no existing joins, use outer join.
1839                 join_info = self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m)
1840                 targets, final_alias, joins = self.trim_joins(
1841                     join_info.targets,
1842                     join_info.joins,
1843                     join_info.path,
1844                 )
1845                 for target in targets:
1846                     cols.append(join_info.transform_function(target, final_alias))
1847             if cols:
1848                 self.set_select(cols)
1849         except MultiJoin:
1850             raise FieldError("Invalid field name: '%s'" % name)
1851         except FieldError:
1852             if LOOKUP_SEP in name:
1853                 # For lookups spanning over relationships, show the error
1854                 # from the model on which the lookup failed.
1855                 raise
1856             else:
1857                 names = sorted([
1858                     *get_field_names_from_opts(opts), *self.extra,
1859                     *self.annotation_select, *self._filtered_relations
1860                 ])
1861                 raise FieldError("Cannot resolve keyword %r into field. "
1862                                  "Choices are: %s" % (name, ", ".join(names)))
1863 
1864     def add_ordering(self, *ordering):
1865         """
1866         Add items from the 'ordering' sequence to the query's "order by"
1867         clause. These items are either field names (not column names) --
1868         possibly with a direction prefix ('-' or '?') -- or OrderBy
1869         expressions.
1870 
1871         If 'ordering' is empty, clear all ordering from the query.
1872         """
1873         errors = []
1874         for item in ordering:
1875             if not hasattr(item, 'resolve_expression') and not ORDER_PATTERN.match(item):
1876                 errors.append(item)
1877             if getattr(item, 'contains_aggregate', False):
1878                 raise FieldError(
1879                     'Using an aggregate in order_by() without also including '
1880                     'it in annotate() is not allowed: %s' % item
1881                 )
1882         if errors:
1883             raise FieldError('Invalid order_by arguments: %s' % errors)
1884         if ordering:
1885             self.order_by += ordering
1886         else:
1887             self.default_ordering = False
1888 
1889     def clear_ordering(self, force_empty):
1890         """
1891         Remove any ordering settings. If 'force_empty' is True, there will be
1892         no ordering in the resulting query (not even the model's default).
1893         """
1894         self.order_by = ()
1895         self.extra_order_by = ()
1896         if force_empty:
1897             self.default_ordering = False
1898 
1899     def set_group_by(self):
1900         """
1901         Expand the GROUP BY clause required by the query.
1902 
1903         This will usually be the set of all non-aggregate fields in the
1904         return data. If the database backend supports grouping by the
1905         primary key, and the query would be equivalent, the optimization
1906         will be made automatically.
1907         """
1908         group_by = list(self.select)
1909         if self.annotation_select:
1910             for alias, annotation in self.annotation_select.items():
1911                 try:
1912                     inspect.getcallargs(annotation.get_group_by_cols, alias=alias)
1913                 except TypeError:
1914                     annotation_class = annotation.__class__
1915                     msg = (
1916                         '`alias=None` must be added to the signature of '
1917                         '%s.%s.get_group_by_cols().'
1918                     ) % (annotation_class.__module__, annotation_class.__qualname__)
1919                     warnings.warn(msg, category=RemovedInDjango40Warning)
1920                     group_by_cols = annotation.get_group_by_cols()
1921                 else:
1922                     group_by_cols = annotation.get_group_by_cols(alias=alias)
1923                 group_by.extend(group_by_cols)
1924         self.group_by = tuple(group_by)
1925 
1926     def add_select_related(self, fields):
1927         """
1928         Set up the select_related data structure so that we only select
1929         certain related models (as opposed to all models, when
1930         self.select_related=True).
1931         """
1932         if isinstance(self.select_related, bool):
1933             field_dict = {}
1934         else:
1935             field_dict = self.select_related
1936         for field in fields:
1937             d = field_dict
1938             for part in field.split(LOOKUP_SEP):
1939                 d = d.setdefault(part, {})
1940         self.select_related = field_dict
1941 
1942     def add_extra(self, select, select_params, where, params, tables, order_by):
1943         """
1944         Add data to the various extra_* attributes for user-created additions
1945         to the query.
1946         """
1947         if select:
1948             # We need to pair any placeholder markers in the 'select'
1949             # dictionary with their parameters in 'select_params' so that
1950             # subsequent updates to the select dictionary also adjust the
1951             # parameters appropriately.
1952             select_pairs = {}
1953             if select_params:
1954                 param_iter = iter(select_params)
1955             else:
1956                 param_iter = iter([])
1957             for name, entry in select.items():
1958                 entry = str(entry)
1959                 entry_params = []
1960                 pos = entry.find("%s")
1961                 while pos != -1:
1962                     if pos == 0 or entry[pos - 1] != '%':
1963                         entry_params.append(next(param_iter))
1964                     pos = entry.find("%s", pos + 2)
1965                 select_pairs[name] = (entry, entry_params)
1966             self.extra.update(select_pairs)
1967         if where or params:
1968             self.where.add(ExtraWhere(where, params), AND)
1969         if tables:
1970             self.extra_tables += tuple(tables)
1971         if order_by:
1972             self.extra_order_by = order_by
1973 
1974     def clear_deferred_loading(self):
1975         """Remove any fields from the deferred loading set."""
1976         self.deferred_loading = (frozenset(), True)
1977 
1978     def add_deferred_loading(self, field_names):
1979         """
1980         Add the given list of model field names to the set of fields to
1981         exclude from loading from the database when automatic column selection
1982         is done. Add the new field names to any existing field names that
1983         are deferred (or removed from any existing field names that are marked
1984         as the only ones for immediate loading).
1985         """
1986         # Fields on related models are stored in the literal double-underscore
1987         # format, so that we can use a set datastructure. We do the foo__bar
1988         # splitting and handling when computing the SQL column names (as part of
1989         # get_columns()).
1990         existing, defer = self.deferred_loading
1991         if defer:
1992             # Add to existing deferred names.
1993             self.deferred_loading = existing.union(field_names), True
1994         else:
1995             # Remove names from the set of any existing "immediate load" names.
1996             self.deferred_loading = existing.difference(field_names), False
1997 
1998     def add_immediate_loading(self, field_names):
1999         """
2000         Add the given list of model field names to the set of fields to
2001         retrieve when the SQL is executed ("immediate loading" fields). The
2002         field names replace any existing immediate loading field names. If
2003         there are field names already specified for deferred loading, remove
2004         those names from the new field_names before storing the new names
2005         for immediate loading. (That is, immediate loading overrides any
2006         existing immediate values, but respects existing deferrals.)
2007         """
2008         existing, defer = self.deferred_loading
2009         field_names = set(field_names)
2010         if 'pk' in field_names:
2011             field_names.remove('pk')
2012             field_names.add(self.get_meta().pk.name)
2013 
2014         if defer:
2015             # Remove any existing deferred names from the current set before
2016             # setting the new names.
2017             self.deferred_loading = field_names.difference(existing), False
2018         else:
2019             # Replace any existing "immediate load" field names.
2020             self.deferred_loading = frozenset(field_names), False
2021 
2022     def get_loaded_field_names(self):
2023         """
2024         If any fields are marked to be deferred, return a dictionary mapping
2025         models to a set of names in those fields that will be loaded. If a
2026         model is not in the returned dictionary, none of its fields are
2027         deferred.
2028 
2029         If no fields are marked for deferral, return an empty dictionary.
2030         """
2031         # We cache this because we call this function multiple times
2032         # (compiler.fill_related_selections, query.iterator)
2033         try:
2034             return self._loaded_field_names_cache
2035         except AttributeError:
2036             collection = {}
2037             self.deferred_to_data(collection, self.get_loaded_field_names_cb)
2038             self._loaded_field_names_cache = collection
2039             return collection
2040 
2041     def get_loaded_field_names_cb(self, target, model, fields):
2042         """Callback used by get_deferred_field_names()."""
2043         target[model] = {f.attname for f in fields}
2044 
2045     def set_annotation_mask(self, names):
2046         """Set the mask of annotations that will be returned by the SELECT."""
2047         if names is None:
2048             self.annotation_select_mask = None
2049         else:
2050             self.annotation_select_mask = set(names)
2051         self._annotation_select_cache = None
2052 
2053     def append_annotation_mask(self, names):
2054         if self.annotation_select_mask is not None:
2055             self.set_annotation_mask(self.annotation_select_mask.union(names))
2056 
2057     def set_extra_mask(self, names):
2058         """
2059         Set the mask of extra select items that will be returned by SELECT.
2060         Don't remove them from the Query since they might be used later.
2061         """
2062         if names is None:
2063             self.extra_select_mask = None
2064         else:
2065             self.extra_select_mask = set(names)
2066         self._extra_select_cache = None
2067 
2068     def set_values(self, fields):
2069         self.select_related = False
2070         self.clear_deferred_loading()
2071         self.clear_select_fields()
2072 
2073         if self.group_by is True:
2074             self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
2075             self.set_group_by()
2076             self.clear_select_fields()
2077 
2078         if fields:
2079             field_names = []
2080             extra_names = []
2081             annotation_names = []
2082             if not self.extra and not self.annotations:
2083                 # Shortcut - if there are no extra or annotations, then
2084                 # the values() clause must be just field names.
2085                 field_names = list(fields)
2086             else:
2087                 self.default_cols = False
2088                 for f in fields:
2089                     if f in self.extra_select:
2090                         extra_names.append(f)
2091                     elif f in self.annotation_select:
2092                         annotation_names.append(f)
2093                     else:
2094                         field_names.append(f)
2095             self.set_extra_mask(extra_names)
2096             self.set_annotation_mask(annotation_names)
2097         else:
2098             field_names = [f.attname for f in self.model._meta.concrete_fields]
2099 
2100         self.values_select = tuple(field_names)
2101         self.add_fields(field_names, True)
2102 
2103     @property
2104     def annotation_select(self):
2105         """
2106         Return the dictionary of aggregate columns that are not masked and
2107         should be used in the SELECT clause. Cache this result for performance.
2108         """
2109         if self._annotation_select_cache is not None:
2110             return self._annotation_select_cache
2111         elif not self.annotations:
2112             return {}
2113         elif self.annotation_select_mask is not None:
2114             self._annotation_select_cache = {
2115                 k: v for k, v in self.annotations.items()
2116                 if k in self.annotation_select_mask
2117             }
2118             return self._annotation_select_cache
2119         else:
2120             return self.annotations
2121 
2122     @property
2123     def extra_select(self):
2124         if self._extra_select_cache is not None:
2125             return self._extra_select_cache
2126         if not self.extra:
2127             return {}
2128         elif self.extra_select_mask is not None:
2129             self._extra_select_cache = {
2130                 k: v for k, v in self.extra.items()
2131                 if k in self.extra_select_mask
2132             }
2133             return self._extra_select_cache
2134         else:
2135             return self.extra
2136 
2137     def trim_start(self, names_with_path):
2138         """
2139         Trim joins from the start of the join path. The candidates for trim
2140         are the PathInfos in names_with_path structure that are m2m joins.
2141 
2142         Also set the select column so the start matches the join.
2143 
2144         This method is meant to be used for generating the subquery joins &
2145         cols in split_exclude().
2146 
2147         Return a lookup usable for doing outerq.filter(lookup=self) and a
2148         boolean indicating if the joins in the prefix contain a LEFT OUTER join.
2149         _"""
2150         all_paths = []
2151         for _, paths in names_with_path:
2152             all_paths.extend(paths)
2153         contains_louter = False
2154         # Trim and operate only on tables that were generated for
2155         # the lookup part of the query. That is, avoid trimming
2156         # joins generated for F() expressions.
2157         lookup_tables = [
2158             t for t in self.alias_map
2159             if t in self._lookup_joins or t == self.base_table
2160         ]
2161         for trimmed_paths, path in enumerate(all_paths):
2162             if path.m2m:
2163                 break
2164             if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type == LOUTER:
2165                 contains_louter = True
2166             alias = lookup_tables[trimmed_paths]
2167             self.unref_alias(alias)
2168         # The path.join_field is a Rel, lets get the other side's field
2169         join_field = path.join_field.field
2170         # Build the filter prefix.
2171         paths_in_prefix = trimmed_paths
2172         trimmed_prefix = []
2173         for name, path in names_with_path:
2174             if paths_in_prefix - len(path) < 0:
2175                 break
2176             trimmed_prefix.append(name)
2177             paths_in_prefix -= len(path)
2178         trimmed_prefix.append(
2179             join_field.foreign_related_fields[0].name)
2180         trimmed_prefix = LOOKUP_SEP.join(trimmed_prefix)
2181         # Lets still see if we can trim the first join from the inner query
2182         # (that is, self). We can't do this for:
2183         # - LEFT JOINs because we would miss those rows that have nothing on
2184         #   the outer side,
2185         # - INNER JOINs from filtered relations because we would miss their
2186         #   filters.
2187         first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]
2188         if first_join.join_type != LOUTER and not first_join.filtered_relation:
2189             select_fields = [r[0] for r in join_field.related_fields]
2190             select_alias = lookup_tables[trimmed_paths + 1]
2191             self.unref_alias(lookup_tables[trimmed_paths])
2192             extra_restriction = join_field.get_extra_restriction(
2193                 self.where_class, None, lookup_tables[trimmed_paths + 1])
2194             if extra_restriction:
2195                 self.where.add(extra_restriction, AND)
2196         else:
2197             # TODO: It might be possible to trim more joins from the start of the
2198             # inner query if it happens to have a longer join chain containing the
2199             # values in select_fields. Lets punt this one for now.
2200             select_fields = [r[1] for r in join_field.related_fields]
2201             select_alias = lookup_tables[trimmed_paths]
2202         # The found starting point is likely a Join instead of a BaseTable reference.
2203         # But the first entry in the query's FROM clause must not be a JOIN.
2204         for table in self.alias_map:
2205             if self.alias_refcount[table] > 0:
2206                 self.alias_map[table] = BaseTable(self.alias_map[table].table_name, table)
2207                 break
2208         self.set_select([f.get_col(select_alias) for f in select_fields])
2209         return trimmed_prefix, contains_louter
2210 
2211     def is_nullable(self, field):
2212         """
2213         Check if the given field should be treated as nullable.
2214 
2215         Some backends treat '' as null and Django treats such fields as
2216         nullable for those backends. In such situations field.null can be
2217         False even if we should treat the field as nullable.
2218         """
2219         # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have
2220         # (nor should it have) knowledge of which connection is going to be
2221         # used. The proper fix would be to defer all decisions where
2222         # is_nullable() is needed to the compiler stage, but that is not easy
2223         # to do currently.
2224         return (
2225             connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
2226             field.empty_strings_allowed
2227         ) or field.null

</code><intended_behavior>Modifications in the `Query` class are necessary to support translating expressions received from `QuerySet.filter()` into valid SQL. This might include extending the `build_filter` and related methods to detect when an argument is an expression rather than a simple filter. The logic should be capable of parsing these expressions, integrating their logic into the SQL where clause, and handling any argument values accordingly. This enhancement should retain the class's current functionality for cases that do not involve the newly supported expressions.</intended_behavior>]
2025-10-15 16:41:15.276 | INFO     | Search completed. Bug locations: [<file>django/db/models/query.py</file>
<class>QuerySet</class>
<method>filter</method>
<code>
888     def filter(self, *args, **kwargs):
889         """
890         Return a new QuerySet instance with the args ANDed to the existing
891         set.
892         """
893         self._not_support_combined_queries('filter')
894         return self._filter_or_exclude(False, *args, **kwargs)

</code><intended_behavior>The `filter` method should be enhanced to parse and apply expressions passed as arguments. This involves extending the method's logic to not only handle keyword arguments representing field lookups and simple value comparisons but also to recognize and correctly interpret expressions involving model fields. The method should delegate the handling of these expressions to the underlying `Query` object, ensuring that complex expressions like `F('some_field').lower() == 'anssi'` are translated into the appropriate SQL. The enhancement must preserve the method's ability to handle its current argument types without regression.</intended_behavior>, <file>django/db/models/query.py</file>
<class>QuerySet</class>
<method>None</method>
<code>
188 class QuerySet:
189     """Represent a lazy database lookup for a set of objects."""
190 
191     def __init__(self, model=None, query=None, using=None, hints=None):
192         self.model = model
193         self._db = using
194         self._hints = hints or {}
195         self.query = query or sql.Query(self.model)
196         self._result_cache = None
197         self._sticky_filter = False
198         self._for_write = False
199         self._prefetch_related_lookups = ()
200         self._prefetch_done = False
201         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
202         self._iterable_class = ModelIterable
203         self._fields = None
204 
205     def as_manager(cls):
206         # Address the circular dependency between `Queryset` and `Manager`.
207         from django.db.models.manager import Manager
208         manager = Manager.from_queryset(cls)()
209         manager._built_with_as_manager = True
210         return manager
211     as_manager.queryset_only = True
212     as_manager = classmethod(as_manager)
213 
214     ########################
215     # PYTHON MAGIC METHODS #
216     ########################
217 
218     def __deepcopy__(self, memo):
219         """Don't populate the QuerySet's cache."""
220         obj = self.__class__()
221         for k, v in self.__dict__.items():
222             if k == '_result_cache':
223                 obj.__dict__[k] = None
224             else:
225                 obj.__dict__[k] = copy.deepcopy(v, memo)
226         return obj
227 
228     def __getstate__(self):
229         # Force the cache to be fully populated.
230         self._fetch_all()
231         return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: get_version()}
232 
233     def __setstate__(self, state):
234         msg = None
235         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)
236         if pickled_version:
237             current_version = get_version()
238             if current_version != pickled_version:
239                 msg = (
240                     "Pickled queryset instance's Django version %s does not "
241                     "match the current version %s." % (pickled_version, current_version)
242                 )
243         else:
244             msg = "Pickled queryset instance's Django version is not specified."
245 
246         if msg:
247             warnings.warn(msg, RuntimeWarning, stacklevel=2)
248 
249         self.__dict__.update(state)
250 
251     def __repr__(self):
252         data = list(self[:REPR_OUTPUT_SIZE + 1])
253         if len(data) > REPR_OUTPUT_SIZE:
254             data[-1] = "...(remaining elements truncated)..."
255         return '<%s %r>' % (self.__class__.__name__, data)
256 
257     def __len__(self):
258         self._fetch_all()
259         return len(self._result_cache)
260 
261     def __iter__(self):
262         """
263         The queryset iterator protocol uses three nested iterators in the
264         default case:
265             1. sql.compiler.execute_sql()
266                - Returns 100 rows at time (constants.GET_ITERATOR_CHUNK_SIZE)
267                  using cursor.fetchmany(). This part is responsible for
268                  doing some column masking, and returning the rows in chunks.
269             2. sql.compiler.results_iter()
270                - Returns one row at time. At this point the rows are still just
271                  tuples. In some cases the return values are converted to
272                  Python values at this location.
273             3. self.iterator()
274                - Responsible for turning the rows into model objects.
275         """
276         self._fetch_all()
277         return iter(self._result_cache)
278 
279     def __bool__(self):
280         self._fetch_all()
281         return bool(self._result_cache)
282 
283     def __getitem__(self, k):
284         """Retrieve an item or slice from the set of results."""
285         if not isinstance(k, (int, slice)):
286             raise TypeError(
287                 'QuerySet indices must be integers or slices, not %s.'
288                 % type(k).__name__
289             )
290         assert ((not isinstance(k, slice) and (k >= 0)) or
291                 (isinstance(k, slice) and (k.start is None or k.start >= 0) and
292                  (k.stop is None or k.stop >= 0))), \
293             "Negative indexing is not supported."
294 
295         if self._result_cache is not None:
296             return self._result_cache[k]
297 
298         if isinstance(k, slice):
299             qs = self._chain()
300             if k.start is not None:
301                 start = int(k.start)
302             else:
303                 start = None
304             if k.stop is not None:
305                 stop = int(k.stop)
306             else:
307                 stop = None
308             qs.query.set_limits(start, stop)
309             return list(qs)[::k.step] if k.step else qs
310 
311         qs = self._chain()
312         qs.query.set_limits(k, k + 1)
313         qs._fetch_all()
314         return qs._result_cache[0]
315 
316     def __and__(self, other):
317         self._merge_sanity_check(other)
318         if isinstance(other, EmptyQuerySet):
319             return other
320         if isinstance(self, EmptyQuerySet):
321             return self
322         combined = self._chain()
323         combined._merge_known_related_objects(other)
324         combined.query.combine(other.query, sql.AND)
325         return combined
326 
327     def __or__(self, other):
328         self._merge_sanity_check(other)
329         if isinstance(self, EmptyQuerySet):
330             return other
331         if isinstance(other, EmptyQuerySet):
332             return self
333         query = self if self.query.can_filter() else self.model._base_manager.filter(pk__in=self.values('pk'))
334         combined = query._chain()
335         combined._merge_known_related_objects(other)
336         if not other.query.can_filter():
337             other = other.model._base_manager.filter(pk__in=other.values('pk'))
338         combined.query.combine(other.query, sql.OR)
339         return combined
340 
341     ####################################
342     # METHODS THAT DO DATABASE QUERIES #
343     ####################################
344 
345     def _iterator(self, use_chunked_fetch, chunk_size):
346         yield from self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size)
347 
348     def iterator(self, chunk_size=2000):
349         """
350         An iterator over the results from applying this QuerySet to the
351         database.
352         """
353         if chunk_size <= 0:
354             raise ValueError('Chunk size must be strictly positive.')
355         use_chunked_fetch = not connections[self.db].settings_dict.get('DISABLE_SERVER_SIDE_CURSORS')
356         return self._iterator(use_chunked_fetch, chunk_size)
357 
358     def aggregate(self, *args, **kwargs):
359         """
360         Return a dictionary containing the calculations (aggregation)
361         over the current queryset.
362 
363         If args is present the expression is passed as a kwarg using
364         the Aggregate object's default alias.
365         """
366         if self.query.distinct_fields:
367             raise NotImplementedError("aggregate() + distinct(fields) not implemented.")
368         self._validate_values_are_expressions((*args, *kwargs.values()), method_name='aggregate')
369         for arg in args:
370             # The default_alias property raises TypeError if default_alias
371             # can't be set automatically or AttributeError if it isn't an
372             # attribute.
373             try:
374                 arg.default_alias
375             except (AttributeError, TypeError):
376                 raise TypeError("Complex aggregates require an alias")
377             kwargs[arg.default_alias] = arg
378 
379         query = self.query.chain()
380         for (alias, aggregate_expr) in kwargs.items():
381             query.add_annotation(aggregate_expr, alias, is_summary=True)
382             if not query.annotations[alias].contains_aggregate:
383                 raise TypeError("%s is not an aggregate expression" % alias)
384         return query.get_aggregation(self.db, kwargs)
385 
386     def count(self):
387         """
388         Perform a SELECT COUNT() and return the number of records as an
389         integer.
390 
391         If the QuerySet is already fully cached, return the length of the
392         cached results set to avoid multiple SELECT COUNT(*) calls.
393         """
394         if self._result_cache is not None:
395             return len(self._result_cache)
396 
397         return self.query.get_count(using=self.db)
398 
399     def get(self, *args, **kwargs):
400         """
401         Perform the query and return a single object matching the given
402         keyword arguments.
403         """
404         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
405         if self.query.can_filter() and not self.query.distinct_fields:
406             clone = clone.order_by()
407         limit = None
408         if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:
409             limit = MAX_GET_RESULTS
410             clone.query.set_limits(high=limit)
411         num = len(clone)
412         if num == 1:
413             return clone._result_cache[0]
414         if not num:
415             raise self.model.DoesNotExist(
416                 "%s matching query does not exist." %
417                 self.model._meta.object_name
418             )
419         raise self.model.MultipleObjectsReturned(
420             'get() returned more than one %s -- it returned %s!' % (
421                 self.model._meta.object_name,
422                 num if not limit or num < limit else 'more than %s' % (limit - 1),
423             )
424         )
425 
426     def create(self, **kwargs):
427         """
428         Create a new object with the given kwargs, saving it to the database
429         and returning the created object.
430         """
431         obj = self.model(**kwargs)
432         self._for_write = True
433         obj.save(force_insert=True, using=self.db)
434         return obj
435 
436     def _populate_pk_values(self, objs):
437         for obj in objs:
438             if obj.pk is None:
439                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
440 
441     def bulk_create(self, objs, batch_size=None, ignore_conflicts=False):
442         """
443         Insert each of the instances into the database. Do *not* call
444         save() on each of the instances, do not send any pre/post_save
445         signals, and do not set the primary key attribute if it is an
446         autoincrement field (except if features.can_return_rows_from_bulk_insert=True).
447         Multi-table models are not supported.
448         """
449         # When you bulk insert you don't get the primary keys back (if it's an
450         # autoincrement, except if can_return_rows_from_bulk_insert=True), so
451         # you can't insert into the child tables which references this. There
452         # are two workarounds:
453         # 1) This could be implemented if you didn't have an autoincrement pk
454         # 2) You could do it by doing O(n) normal inserts into the parent
455         #    tables to get the primary keys back and then doing a single bulk
456         #    insert into the childmost table.
457         # We currently set the primary keys on the objects when using
458         # PostgreSQL via the RETURNING ID clause. It should be possible for
459         # Oracle as well, but the semantics for extracting the primary keys is
460         # trickier so it's not done yet.
461         assert batch_size is None or batch_size > 0
462         # Check that the parents share the same concrete model with the our
463         # model to detect the inheritance pattern ConcreteGrandParent ->
464         # MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy
465         # would not identify that case as involving multiple tables.
466         for parent in self.model._meta.get_parent_list():
467             if parent._meta.concrete_model is not self.model._meta.concrete_model:
468                 raise ValueError("Can't bulk create a multi-table inherited model")
469         if not objs:
470             return objs
471         self._for_write = True
472         connection = connections[self.db]
473         fields = self.model._meta.concrete_fields
474         objs = list(objs)
475         self._populate_pk_values(objs)
476         with transaction.atomic(using=self.db, savepoint=False):
477             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
478             if objs_with_pk:
479                 self._batched_insert(objs_with_pk, fields, batch_size, ignore_conflicts=ignore_conflicts)
480                 for obj_with_pk in objs_with_pk:
481                     obj_with_pk._state.adding = False
482                     obj_with_pk._state.db = self.db
483             if objs_without_pk:
484                 fields = [f for f in fields if not isinstance(f, AutoField)]
485                 ids = self._batched_insert(objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts)
486                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
487                     assert len(ids) == len(objs_without_pk)
488                 for obj_without_pk, pk in zip(objs_without_pk, ids):
489                     obj_without_pk.pk = pk
490                     obj_without_pk._state.adding = False
491                     obj_without_pk._state.db = self.db
492 
493         return objs
494 
495     def bulk_update(self, objs, fields, batch_size=None):
496         """
497         Update the given fields in each of the given objects in the database.
498         """
499         if batch_size is not None and batch_size < 0:
500             raise ValueError('Batch size must be a positive integer.')
501         if not fields:
502             raise ValueError('Field names must be given to bulk_update().')
503         objs = tuple(objs)
504         if any(obj.pk is None for obj in objs):
505             raise ValueError('All bulk_update() objects must have a primary key set.')
506         fields = [self.model._meta.get_field(name) for name in fields]
507         if any(not f.concrete or f.many_to_many for f in fields):
508             raise ValueError('bulk_update() can only be used with concrete fields.')
509         if any(f.primary_key for f in fields):
510             raise ValueError('bulk_update() cannot be used with primary key fields.')
511         if not objs:
512             return
513         # PK is used twice in the resulting update query, once in the filter
514         # and once in the WHEN. Each field will also have one CAST.
515         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)
516         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
517         requires_casting = connections[self.db].features.requires_casted_case_in_updates
518         batches = (objs[i:i + batch_size] for i in range(0, len(objs), batch_size))
519         updates = []
520         for batch_objs in batches:
521             update_kwargs = {}
522             for field in fields:
523                 when_statements = []
524                 for obj in batch_objs:
525                     attr = getattr(obj, field.attname)
526                     if not isinstance(attr, Expression):
527                         attr = Value(attr, output_field=field)
528                     when_statements.append(When(pk=obj.pk, then=attr))
529                 case_statement = Case(*when_statements, output_field=field)
530                 if requires_casting:
531                     case_statement = Cast(case_statement, output_field=field)
532                 update_kwargs[field.attname] = case_statement
533             updates.append(([obj.pk for obj in batch_objs], update_kwargs))
534         with transaction.atomic(using=self.db, savepoint=False):
535             for pks, update_kwargs in updates:
536                 self.filter(pk__in=pks).update(**update_kwargs)
537     bulk_update.alters_data = True
538 
539     def get_or_create(self, defaults=None, **kwargs):
540         """
541         Look up an object with the given kwargs, creating one if necessary.
542         Return a tuple of (object, created), where created is a boolean
543         specifying whether an object was created.
544         """
545         # The get() needs to be targeted at the write database in order
546         # to avoid potential transaction consistency problems.
547         self._for_write = True
548         try:
549             return self.get(**kwargs), False
550         except self.model.DoesNotExist:
551             params = self._extract_model_params(defaults, **kwargs)
552             return self._create_object_from_params(kwargs, params)
553 
554     def update_or_create(self, defaults=None, **kwargs):
555         """
556         Look up an object with the given kwargs, updating one with defaults
557         if it exists, otherwise create a new one.
558         Return a tuple (object, created), where created is a boolean
559         specifying whether an object was created.
560         """
561         defaults = defaults or {}
562         self._for_write = True
563         with transaction.atomic(using=self.db):
564             try:
565                 obj = self.select_for_update().get(**kwargs)
566             except self.model.DoesNotExist:
567                 params = self._extract_model_params(defaults, **kwargs)
568                 # Lock the row so that a concurrent update is blocked until
569                 # after update_or_create() has performed its save.
570                 obj, created = self._create_object_from_params(kwargs, params, lock=True)
571                 if created:
572                     return obj, created
573             for k, v in defaults.items():
574                 setattr(obj, k, v() if callable(v) else v)
575             obj.save(using=self.db)
576         return obj, False
577 
578     def _create_object_from_params(self, lookup, params, lock=False):
579         """
580         Try to create an object using passed params. Used by get_or_create()
581         and update_or_create().
582         """
583         try:
584             with transaction.atomic(using=self.db):
585                 params = {k: v() if callable(v) else v for k, v in params.items()}
586                 obj = self.create(**params)
587             return obj, True
588         except IntegrityError as e:
589             try:
590                 qs = self.select_for_update() if lock else self
591                 return qs.get(**lookup), False
592             except self.model.DoesNotExist:
593                 pass
594             raise e
595 
596     def _extract_model_params(self, defaults, **kwargs):
597         """
598         Prepare `params` for creating a model instance based on the given
599         kwargs; for use by get_or_create() and update_or_create().
600         """
601         defaults = defaults or {}
602         params = {k: v for k, v in kwargs.items() if LOOKUP_SEP not in k}
603         params.update(defaults)
604         property_names = self.model._meta._property_names
605         invalid_params = []
606         for param in params:
607             try:
608                 self.model._meta.get_field(param)
609             except exceptions.FieldDoesNotExist:
610                 # It's okay to use a model's property if it has a setter.
611                 if not (param in property_names and getattr(self.model, param).fset):
612                     invalid_params.append(param)
613         if invalid_params:
614             raise exceptions.FieldError(
615                 "Invalid field name(s) for model %s: '%s'." % (
616                     self.model._meta.object_name,
617                     "', '".join(sorted(invalid_params)),
618                 ))
619         return params
620 
621     def _earliest(self, *fields):
622         """
623         Return the earliest object according to fields (if given) or by the
624         model's Meta.get_latest_by.
625         """
626         if fields:
627             order_by = fields
628         else:
629             order_by = getattr(self.model._meta, 'get_latest_by')
630             if order_by and not isinstance(order_by, (tuple, list)):
631                 order_by = (order_by,)
632         if order_by is None:
633             raise ValueError(
634                 "earliest() and latest() require either fields as positional "
635                 "arguments or 'get_latest_by' in the model's Meta."
636             )
637 
638         assert not self.query.is_sliced, \
639             "Cannot change a query once a slice has been taken."
640         obj = self._chain()
641         obj.query.set_limits(high=1)
642         obj.query.clear_ordering(force_empty=True)
643         obj.query.add_ordering(*order_by)
644         return obj.get()
645 
646     def earliest(self, *fields):
647         return self._earliest(*fields)
648 
649     def latest(self, *fields):
650         return self.reverse()._earliest(*fields)
651 
652     def first(self):
653         """Return the first object of a query or None if no match is found."""
654         for obj in (self if self.ordered else self.order_by('pk'))[:1]:
655             return obj
656 
657     def last(self):
658         """Return the last object of a query or None if no match is found."""
659         for obj in (self.reverse() if self.ordered else self.order_by('-pk'))[:1]:
660             return obj
661 
662     def in_bulk(self, id_list=None, *, field_name='pk'):
663         """
664         Return a dictionary mapping each of the given IDs to the object with
665         that ID. If `id_list` isn't provided, evaluate the entire QuerySet.
666         """
667         assert not self.query.is_sliced, \
668             "Cannot use 'limit' or 'offset' with in_bulk"
669         if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:
670             raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
671         if id_list is not None:
672             if not id_list:
673                 return {}
674             filter_key = '{}__in'.format(field_name)
675             batch_size = connections[self.db].features.max_query_params
676             id_list = tuple(id_list)
677             # If the database has a limit on the number of query parameters
678             # (e.g. SQLite), retrieve objects in batches if necessary.
679             if batch_size and batch_size < len(id_list):
680                 qs = ()
681                 for offset in range(0, len(id_list), batch_size):
682                     batch = id_list[offset:offset + batch_size]
683                     qs += tuple(self.filter(**{filter_key: batch}).order_by())
684             else:
685                 qs = self.filter(**{filter_key: id_list}).order_by()
686         else:
687             qs = self._chain()
688         return {getattr(obj, field_name): obj for obj in qs}
689 
690     def delete(self):
691         """Delete the records in the current QuerySet."""
692         assert not self.query.is_sliced, \
693             "Cannot use 'limit' or 'offset' with delete."
694 
695         if self._fields is not None:
696             raise TypeError("Cannot call delete() after .values() or .values_list()")
697 
698         del_query = self._chain()
699 
700         # The delete is actually 2 queries - one to find related objects,
701         # and one to delete. Make sure that the discovery of related
702         # objects is performed on the same database as the deletion.
703         del_query._for_write = True
704 
705         # Disable non-supported fields.
706         del_query.query.select_for_update = False
707         del_query.query.select_related = False
708         del_query.query.clear_ordering(force_empty=True)
709 
710         collector = Collector(using=del_query.db)
711         collector.collect(del_query)
712         deleted, _rows_count = collector.delete()
713 
714         # Clear the result cache, in case this QuerySet gets reused.
715         self._result_cache = None
716         return deleted, _rows_count
717 
718     delete.alters_data = True
719     delete.queryset_only = True
720 
721     def _raw_delete(self, using):
722         """
723         Delete objects found from the given queryset in single direct SQL
724         query. No signals are sent and there is no protection for cascades.
725         """
726         return sql.DeleteQuery(self.model).delete_qs(self, using)
727     _raw_delete.alters_data = True
728 
729     def update(self, **kwargs):
730         """
731         Update all elements in the current QuerySet, setting all the given
732         fields to the appropriate values.
733         """
734         assert not self.query.is_sliced, \
735             "Cannot update a query once a slice has been taken."
736         self._for_write = True
737         query = self.query.chain(sql.UpdateQuery)
738         query.add_update_values(kwargs)
739         # Clear any annotations so that they won't be present in subqueries.
740         query.annotations = {}
741         with transaction.mark_for_rollback_on_error(using=self.db):
742             rows = query.get_compiler(self.db).execute_sql(CURSOR)
743         self._result_cache = None
744         return rows
745     update.alters_data = True
746 
747     def _update(self, values):
748         """
749         A version of update() that accepts field objects instead of field names.
750         Used primarily for model saving and not intended for use by general
751         code (it requires too much poking around at model internals to be
752         useful at that level).
753         """
754         assert not self.query.is_sliced, \
755             "Cannot update a query once a slice has been taken."
756         query = self.query.chain(sql.UpdateQuery)
757         query.add_update_fields(values)
758         # Clear any annotations so that they won't be present in subqueries.
759         query.annotations = {}
760         self._result_cache = None
761         return query.get_compiler(self.db).execute_sql(CURSOR)
762     _update.alters_data = True
763     _update.queryset_only = False
764 
765     def exists(self):
766         if self._result_cache is None:
767             return self.query.has_results(using=self.db)
768         return bool(self._result_cache)
769 
770     def _prefetch_related_objects(self):
771         # This method can only be called once the result cache has been filled.
772         prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups)
773         self._prefetch_done = True
774 
775     def explain(self, *, format=None, **options):
776         return self.query.explain(using=self.db, format=format, **options)
777 
778     ##################################################
779     # PUBLIC METHODS THAT RETURN A QUERYSET SUBCLASS #
780     ##################################################
781 
782     def raw(self, raw_query, params=None, translations=None, using=None):
783         if using is None:
784             using = self.db
785         qs = RawQuerySet(raw_query, model=self.model, params=params, translations=translations, using=using)
786         qs._prefetch_related_lookups = self._prefetch_related_lookups[:]
787         return qs
788 
789     def _values(self, *fields, **expressions):
790         clone = self._chain()
791         if expressions:
792             clone = clone.annotate(**expressions)
793         clone._fields = fields
794         clone.query.set_values(fields)
795         return clone
796 
797     def values(self, *fields, **expressions):
798         fields += tuple(expressions)
799         clone = self._values(*fields, **expressions)
800         clone._iterable_class = ValuesIterable
801         return clone
802 
803     def values_list(self, *fields, flat=False, named=False):
804         if flat and named:
805             raise TypeError("'flat' and 'named' can't be used together.")
806         if flat and len(fields) > 1:
807             raise TypeError("'flat' is not valid when values_list is called with more than one field.")
808 
809         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
810         _fields = []
811         expressions = {}
812         counter = 1
813         for field in fields:
814             if hasattr(field, 'resolve_expression'):
815                 field_id_prefix = getattr(field, 'default_alias', field.__class__.__name__.lower())
816                 while True:
817                     field_id = field_id_prefix + str(counter)
818                     counter += 1
819                     if field_id not in field_names:
820                         break
821                 expressions[field_id] = field
822                 _fields.append(field_id)
823             else:
824                 _fields.append(field)
825 
826         clone = self._values(*_fields, **expressions)
827         clone._iterable_class = (
828             NamedValuesListIterable if named
829             else FlatValuesListIterable if flat
830             else ValuesListIterable
831         )
832         return clone
833 
834     def dates(self, field_name, kind, order='ASC'):
835         """
836         Return a list of date objects representing all available dates for
837         the given field_name, scoped to 'kind'.
838         """
839         assert kind in ('year', 'month', 'week', 'day'), \
840             "'kind' must be one of 'year', 'month', 'week', or 'day'."
841         assert order in ('ASC', 'DESC'), \
842             "'order' must be either 'ASC' or 'DESC'."
843         return self.annotate(
844             datefield=Trunc(field_name, kind, output_field=DateField()),
845             plain_field=F(field_name)
846         ).values_list(
847             'datefield', flat=True
848         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datefield')
849 
850     def datetimes(self, field_name, kind, order='ASC', tzinfo=None):
851         """
852         Return a list of datetime objects representing all available
853         datetimes for the given field_name, scoped to 'kind'.
854         """
855         assert kind in ('year', 'month', 'week', 'day', 'hour', 'minute', 'second'), \
856             "'kind' must be one of 'year', 'month', 'week', 'day', 'hour', 'minute', or 'second'."
857         assert order in ('ASC', 'DESC'), \
858             "'order' must be either 'ASC' or 'DESC'."
859         if settings.USE_TZ:
860             if tzinfo is None:
861                 tzinfo = timezone.get_current_timezone()
862         else:
863             tzinfo = None
864         return self.annotate(
865             datetimefield=Trunc(field_name, kind, output_field=DateTimeField(), tzinfo=tzinfo),
866             plain_field=F(field_name)
867         ).values_list(
868             'datetimefield', flat=True
869         ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datetimefield')
870 
871     def none(self):
872         """Return an empty QuerySet."""
873         clone = self._chain()
874         clone.query.set_empty()
875         return clone
876 
877     ##################################################################
878     # PUBLIC METHODS THAT ALTER ATTRIBUTES AND RETURN A NEW QUERYSET #
879     ##################################################################
880 
881     def all(self):
882         """
883         Return a new QuerySet that is a copy of the current one. This allows a
884         QuerySet to proxy for a model manager in some cases.
885         """
886         return self._chain()
887 
888     def filter(self, *args, **kwargs):
889         """
890         Return a new QuerySet instance with the args ANDed to the existing
891         set.
892         """
893         self._not_support_combined_queries('filter')
894         return self._filter_or_exclude(False, *args, **kwargs)
895 
896     def exclude(self, *args, **kwargs):
897         """
898         Return a new QuerySet instance with NOT (args) ANDed to the existing
899         set.
900         """
901         self._not_support_combined_queries('exclude')
902         return self._filter_or_exclude(True, *args, **kwargs)
903 
904     def _filter_or_exclude(self, negate, *args, **kwargs):
905         if args or kwargs:
906             assert not self.query.is_sliced, \
907                 "Cannot filter a query once a slice has been taken."
908 
909         clone = self._chain()
910         if negate:
911             clone.query.add_q(~Q(*args, **kwargs))
912         else:
913             clone.query.add_q(Q(*args, **kwargs))
914         return clone
915 
916     def complex_filter(self, filter_obj):
917         """
918         Return a new QuerySet instance with filter_obj added to the filters.
919 
920         filter_obj can be a Q object or a dictionary of keyword lookup
921         arguments.
922 
923         This exists to support framework features such as 'limit_choices_to',
924         and usually it will be more natural to use other methods.
925         """
926         if isinstance(filter_obj, Q):
927             clone = self._chain()
928             clone.query.add_q(filter_obj)
929             return clone
930         else:
931             return self._filter_or_exclude(None, **filter_obj)
932 
933     def _combinator_query(self, combinator, *other_qs, all=False):
934         # Clone the query to inherit the select list and everything
935         clone = self._chain()
936         # Clear limits and ordering so they can be reapplied
937         clone.query.clear_ordering(True)
938         clone.query.clear_limits()
939         clone.query.combined_queries = (self.query,) + tuple(qs.query for qs in other_qs)
940         clone.query.combinator = combinator
941         clone.query.combinator_all = all
942         return clone
943 
944     def union(self, *other_qs, all=False):
945         # If the query is an EmptyQuerySet, combine all nonempty querysets.
946         if isinstance(self, EmptyQuerySet):
947             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]
948             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self
949         return self._combinator_query('union', *other_qs, all=all)
950 
951     def intersection(self, *other_qs):
952         # If any query is an EmptyQuerySet, return it.
953         if isinstance(self, EmptyQuerySet):
954             return self
955         for other in other_qs:
956             if isinstance(other, EmptyQuerySet):
957                 return other
958         return self._combinator_query('intersection', *other_qs)
959 
960     def difference(self, *other_qs):
961         # If the query is an EmptyQuerySet, return it.
962         if isinstance(self, EmptyQuerySet):
963             return self
964         return self._combinator_query('difference', *other_qs)
965 
966     def select_for_update(self, nowait=False, skip_locked=False, of=()):
967         """
968         Return a new QuerySet instance that will select objects with a
969         FOR UPDATE lock.
970         """
971         if nowait and skip_locked:
972             raise ValueError('The nowait option cannot be used with skip_locked.')
973         obj = self._chain()
974         obj._for_write = True
975         obj.query.select_for_update = True
976         obj.query.select_for_update_nowait = nowait
977         obj.query.select_for_update_skip_locked = skip_locked
978         obj.query.select_for_update_of = of
979         return obj
980 
981     def select_related(self, *fields):
982         """
983         Return a new QuerySet instance that will select related objects.
984 
985         If fields are specified, they must be ForeignKey fields and only those
986         related objects are included in the selection.
987 
988         If select_related(None) is called, clear the list.
989         """
990         self._not_support_combined_queries('select_related')
991         if self._fields is not None:
992             raise TypeError("Cannot call select_related() after .values() or .values_list()")
993 
994         obj = self._chain()
995         if fields == (None,):
996             obj.query.select_related = False
997         elif fields:
998             obj.query.add_select_related(fields)
999         else:
1000             obj.query.select_related = True
1001         return obj
1002 
1003     def prefetch_related(self, *lookups):
1004         """
1005         Return a new QuerySet instance that will prefetch the specified
1006         Many-To-One and Many-To-Many related objects when the QuerySet is
1007         evaluated.
1008 
1009         When prefetch_related() is called more than once, append to the list of
1010         prefetch lookups. If prefetch_related(None) is called, clear the list.
1011         """
1012         self._not_support_combined_queries('prefetch_related')
1013         clone = self._chain()
1014         if lookups == (None,):
1015             clone._prefetch_related_lookups = ()
1016         else:
1017             for lookup in lookups:
1018                 if isinstance(lookup, Prefetch):
1019                     lookup = lookup.prefetch_to
1020                 lookup = lookup.split(LOOKUP_SEP, 1)[0]
1021                 if lookup in self.query._filtered_relations:
1022                     raise ValueError('prefetch_related() is not supported with FilteredRelation.')
1023             clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups
1024         return clone
1025 
1026     def annotate(self, *args, **kwargs):
1027         """
1028         Return a query set in which the returned objects have been annotated
1029         with extra data or aggregations.
1030         """
1031         self._not_support_combined_queries('annotate')
1032         self._validate_values_are_expressions(args + tuple(kwargs.values()), method_name='annotate')
1033         annotations = {}
1034         for arg in args:
1035             # The default_alias property may raise a TypeError.
1036             try:
1037                 if arg.default_alias in kwargs:
1038                     raise ValueError("The named annotation '%s' conflicts with the "
1039                                      "default name for another annotation."
1040                                      % arg.default_alias)
1041             except TypeError:
1042                 raise TypeError("Complex annotations require an alias")
1043             annotations[arg.default_alias] = arg
1044         annotations.update(kwargs)
1045 
1046         clone = self._chain()
1047         names = self._fields
1048         if names is None:
1049             names = set(chain.from_iterable(
1050                 (field.name, field.attname) if hasattr(field, 'attname') else (field.name,)
1051                 for field in self.model._meta.get_fields()
1052             ))
1053 
1054         for alias, annotation in annotations.items():
1055             if alias in names:
1056                 raise ValueError("The annotation '%s' conflicts with a field on "
1057                                  "the model." % alias)
1058             if isinstance(annotation, FilteredRelation):
1059                 clone.query.add_filtered_relation(annotation, alias)
1060             else:
1061                 clone.query.add_annotation(annotation, alias, is_summary=False)
1062 
1063         for alias, annotation in clone.query.annotations.items():
1064             if alias in annotations and annotation.contains_aggregate:
1065                 if clone._fields is None:
1066                     clone.query.group_by = True
1067                 else:
1068                     clone.query.set_group_by()
1069                 break
1070 
1071         return clone
1072 
1073     def order_by(self, *field_names):
1074         """Return a new QuerySet instance with the ordering changed."""
1075         assert not self.query.is_sliced, \
1076             "Cannot reorder a query once a slice has been taken."
1077         obj = self._chain()
1078         obj.query.clear_ordering(force_empty=False)
1079         obj.query.add_ordering(*field_names)
1080         return obj
1081 
1082     def distinct(self, *field_names):
1083         """
1084         Return a new QuerySet instance that will select only distinct results.
1085         """
1086         assert not self.query.is_sliced, \
1087             "Cannot create distinct fields once a slice has been taken."
1088         obj = self._chain()
1089         obj.query.add_distinct_fields(*field_names)
1090         return obj
1091 
1092     def extra(self, select=None, where=None, params=None, tables=None,
1093               order_by=None, select_params=None):
1094         """Add extra SQL fragments to the query."""
1095         self._not_support_combined_queries('extra')
1096         assert not self.query.is_sliced, \
1097             "Cannot change a query once a slice has been taken"
1098         clone = self._chain()
1099         clone.query.add_extra(select, select_params, where, params, tables, order_by)
1100         return clone
1101 
1102     def reverse(self):
1103         """Reverse the ordering of the QuerySet."""
1104         if self.query.is_sliced:
1105             raise TypeError('Cannot reverse a query once a slice has been taken.')
1106         clone = self._chain()
1107         clone.query.standard_ordering = not clone.query.standard_ordering
1108         return clone
1109 
1110     def defer(self, *fields):
1111         """
1112         Defer the loading of data for certain fields until they are accessed.
1113         Add the set of deferred fields to any existing set of deferred fields.
1114         The only exception to this is if None is passed in as the only
1115         parameter, in which case removal all deferrals.
1116         """
1117         self._not_support_combined_queries('defer')
1118         if self._fields is not None:
1119             raise TypeError("Cannot call defer() after .values() or .values_list()")
1120         clone = self._chain()
1121         if fields == (None,):
1122             clone.query.clear_deferred_loading()
1123         else:
1124             clone.query.add_deferred_loading(fields)
1125         return clone
1126 
1127     def only(self, *fields):
1128         """
1129         Essentially, the opposite of defer(). Only the fields passed into this
1130         method and that are not already specified as deferred are loaded
1131         immediately when the queryset is evaluated.
1132         """
1133         self._not_support_combined_queries('only')
1134         if self._fields is not None:
1135             raise TypeError("Cannot call only() after .values() or .values_list()")
1136         if fields == (None,):
1137             # Can only pass None to defer(), not only(), as the rest option.
1138             # That won't stop people trying to do this, so let's be explicit.
1139             raise TypeError("Cannot pass None as an argument to only().")
1140         for field in fields:
1141             field = field.split(LOOKUP_SEP, 1)[0]
1142             if field in self.query._filtered_relations:
1143                 raise ValueError('only() is not supported with FilteredRelation.')
1144         clone = self._chain()
1145         clone.query.add_immediate_loading(fields)
1146         return clone
1147 
1148     def using(self, alias):
1149         """Select which database this QuerySet should execute against."""
1150         clone = self._chain()
1151         clone._db = alias
1152         return clone
1153 
1154     ###################################
1155     # PUBLIC INTROSPECTION ATTRIBUTES #
1156     ###################################
1157 
1158     @property
1159     def ordered(self):
1160         """
1161         Return True if the QuerySet is ordered -- i.e. has an order_by()
1162         clause or a default ordering on the model (or is empty).
1163         """
1164         if isinstance(self, EmptyQuerySet):
1165             return True
1166         if self.query.extra_order_by or self.query.order_by:
1167             return True
1168         elif self.query.default_ordering and self.query.get_meta().ordering:
1169             return True
1170         else:
1171             return False
1172 
1173     @property
1174     def db(self):
1175         """Return the database used if this query is executed now."""
1176         if self._for_write:
1177             return self._db or router.db_for_write(self.model, **self._hints)
1178         return self._db or router.db_for_read(self.model, **self._hints)
1179 
1180     ###################
1181     # PRIVATE METHODS #
1182     ###################
1183 
1184     def _insert(self, objs, fields, return_id=False, raw=False, using=None, ignore_conflicts=False):
1185         """
1186         Insert a new record for the given model. This provides an interface to
1187         the InsertQuery class and is how Model.save() is implemented.
1188         """
1189         self._for_write = True
1190         if using is None:
1191             using = self.db
1192         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
1193         query.insert_values(fields, objs, raw=raw)
1194         return query.get_compiler(using=using).execute_sql(return_id)
1195     _insert.alters_data = True
1196     _insert.queryset_only = False
1197 
1198     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):
1199         """
1200         Helper method for bulk_create() to insert objs one batch at a time.
1201         """
1202         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
1203             raise NotSupportedError('This database backend does not support ignoring conflicts.')
1204         ops = connections[self.db].ops
1205         batch_size = (batch_size or max(ops.bulk_batch_size(fields, objs), 1))
1206         inserted_ids = []
1207         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
1208         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
1209             if bulk_return and not ignore_conflicts:
1210                 inserted_id = self._insert(
1211                     item, fields=fields, using=self.db, return_id=True,
1212                     ignore_conflicts=ignore_conflicts,
1213                 )
1214                 if isinstance(inserted_id, list):
1215                     inserted_ids.extend(inserted_id)
1216                 else:
1217                     inserted_ids.append(inserted_id)
1218             else:
1219                 self._insert(item, fields=fields, using=self.db, ignore_conflicts=ignore_conflicts)
1220         return inserted_ids
1221 
1222     def _chain(self, **kwargs):
1223         """
1224         Return a copy of the current QuerySet that's ready for another
1225         operation.
1226         """
1227         obj = self._clone()
1228         if obj._sticky_filter:
1229             obj.query.filter_is_sticky = True
1230             obj._sticky_filter = False
1231         obj.__dict__.update(kwargs)
1232         return obj
1233 
1234     def _clone(self):
1235         """
1236         Return a copy of the current QuerySet. A lightweight alternative
1237         to deepcopy().
1238         """
1239         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
1240         c._sticky_filter = self._sticky_filter
1241         c._for_write = self._for_write
1242         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
1243         c._known_related_objects = self._known_related_objects
1244         c._iterable_class = self._iterable_class
1245         c._fields = self._fields
1246         return c
1247 
1248     def _fetch_all(self):
1249         if self._result_cache is None:
1250             self._result_cache = list(self._iterable_class(self))
1251         if self._prefetch_related_lookups and not self._prefetch_done:
1252             self._prefetch_related_objects()
1253 
1254     def _next_is_sticky(self):
1255         """
1256         Indicate that the next filter call and the one following that should
1257         be treated as a single filter. This is only important when it comes to
1258         determining when to reuse tables for many-to-many filters. Required so
1259         that we can filter naturally on the results of related managers.
1260 
1261         This doesn't return a clone of the current QuerySet (it returns
1262         "self"). The method is only used internally and should be immediately
1263         followed by a filter() that does create a clone.
1264         """
1265         self._sticky_filter = True
1266         return self
1267 
1268     def _merge_sanity_check(self, other):
1269         """Check that two QuerySet classes may be merged."""
1270         if self._fields is not None and (
1271                 set(self.query.values_select) != set(other.query.values_select) or
1272                 set(self.query.extra_select) != set(other.query.extra_select) or
1273                 set(self.query.annotation_select) != set(other.query.annotation_select)):
1274             raise TypeError(
1275                 "Merging '%s' classes must involve the same values in each case."
1276                 % self.__class__.__name__
1277             )
1278 
1279     def _merge_known_related_objects(self, other):
1280         """
1281         Keep track of all known related objects from either QuerySet instance.
1282         """
1283         for field, objects in other._known_related_objects.items():
1284             self._known_related_objects.setdefault(field, {}).update(objects)
1285 
1286     def resolve_expression(self, *args, **kwargs):
1287         if self._fields and len(self._fields) > 1:
1288             # values() queryset can only be used as nested queries
1289             # if they are set up to select only a single field.
1290             raise TypeError('Cannot use multi-field values as a filter value.')
1291         query = self.query.resolve_expression(*args, **kwargs)
1292         query._db = self._db
1293         return query
1294     resolve_expression.queryset_only = True
1295 
1296     def _add_hints(self, **hints):
1297         """
1298         Update hinting information for use by routers. Add new key/values or
1299         overwrite existing key/values.
1300         """
1301         self._hints.update(hints)
1302 
1303     def _has_filters(self):
1304         """
1305         Check if this QuerySet has any filtering going on. This isn't
1306         equivalent with checking if all objects are present in results, for
1307         example, qs[1:]._has_filters() -> False.
1308         """
1309         return self.query.has_filters()
1310 
1311     @staticmethod
1312     def _validate_values_are_expressions(values, method_name):
1313         invalid_args = sorted(str(arg) for arg in values if not hasattr(arg, 'resolve_expression'))
1314         if invalid_args:
1315             raise TypeError(
1316                 'QuerySet.%s() received non-expression(s): %s.' % (
1317                     method_name,
1318                     ', '.join(invalid_args),
1319                 )
1320             )
1321 
1322     def _not_support_combined_queries(self, operation_name):
1323         if self.query.combinator:
1324             raise NotSupportedError(
1325                 'Calling QuerySet.%s() after %s() is not supported.'
1326                 % (operation_name, self.query.combinator)
1327             )

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>None</method>
<code>
145 class Query(BaseExpression):
146     """A single SQL query."""
147 
148     alias_prefix = 'T'
149     subq_aliases = frozenset([alias_prefix])
150 
151     compiler = 'SQLCompiler'
152 
153     def __init__(self, model, where=WhereNode):
154         self.model = model
155         self.alias_refcount = {}
156         # alias_map is the most important data structure regarding joins.
157         # It's used for recording which joins exist in the query and what
158         # types they are. The key is the alias of the joined table (possibly
159         # the table name) and the value is a Join-like object (see
160         # sql.datastructures.Join for more information).
161         self.alias_map = {}
162         # Sometimes the query contains references to aliases in outer queries (as
163         # a result of split_exclude). Correct alias quoting needs to know these
164         # aliases too.
165         self.external_aliases = set()
166         self.table_map = {}     # Maps table names to list of aliases.
167         self.default_cols = True
168         self.default_ordering = True
169         self.standard_ordering = True
170         self.used_aliases = set()
171         self.filter_is_sticky = False
172         self.subquery = False
173 
174         # SQL-related attributes
175         # Select and related select clauses are expressions to use in the
176         # SELECT clause of the query.
177         # The select is used for cases where we want to set up the select
178         # clause to contain other than default fields (values(), subqueries...)
179         # Note that annotations go to annotations dictionary.
180         self.select = ()
181         self.where = where()
182         self.where_class = where
183         # The group_by attribute can have one of the following forms:
184         #  - None: no group by at all in the query
185         #  - A tuple of expressions: group by (at least) those expressions.
186         #    String refs are also allowed for now.
187         #  - True: group by all select fields of the model
188         # See compiler.get_group_by() for details.
189         self.group_by = None
190         self.order_by = ()
191         self.low_mark, self.high_mark = 0, None  # Used for offset/limit
192         self.distinct = False
193         self.distinct_fields = ()
194         self.select_for_update = False
195         self.select_for_update_nowait = False
196         self.select_for_update_skip_locked = False
197         self.select_for_update_of = ()
198 
199         self.select_related = False
200         # Arbitrary limit for select_related to prevents infinite recursion.
201         self.max_depth = 5
202 
203         # Holds the selects defined by a call to values() or values_list()
204         # excluding annotation_select and extra_select.
205         self.values_select = ()
206 
207         # SQL annotation-related attributes
208         self.annotations = {}  # Maps alias -> Annotation Expression
209         self.annotation_select_mask = None
210         self._annotation_select_cache = None
211 
212         # Set combination attributes
213         self.combinator = None
214         self.combinator_all = False
215         self.combined_queries = ()
216 
217         # These are for extensions. The contents are more or less appended
218         # verbatim to the appropriate clause.
219         self.extra = {}  # Maps col_alias -> (col_sql, params).
220         self.extra_select_mask = None
221         self._extra_select_cache = None
222 
223         self.extra_tables = ()
224         self.extra_order_by = ()
225 
226         # A tuple that is a set of model field names and either True, if these
227         # are the fields to defer, or False if these are the only fields to
228         # load.
229         self.deferred_loading = (frozenset(), True)
230 
231         self._filtered_relations = {}
232 
233         self.explain_query = False
234         self.explain_format = None
235         self.explain_options = {}
236 
237     @property
238     def output_field(self):
239         if len(self.select) == 1:
240             return self.select[0].field
241         elif len(self.annotation_select) == 1:
242             return next(iter(self.annotation_select.values())).output_field
243 
244     @property
245     def has_select_fields(self):
246         return bool(self.select or self.annotation_select_mask or self.extra_select_mask)
247 
248     @cached_property
249     def base_table(self):
250         for alias in self.alias_map:
251             return alias
252 
253     def __str__(self):
254         """
255         Return the query as a string of SQL with the parameter values
256         substituted in (use sql_with_params() to see the unsubstituted string).
257 
258         Parameter values won't necessarily be quoted correctly, since that is
259         done by the database interface at execution time.
260         """
261         sql, params = self.sql_with_params()
262         return sql % params
263 
264     def sql_with_params(self):
265         """
266         Return the query as an SQL string and the parameters that will be
267         substituted into the query.
268         """
269         return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()
270 
271     def __deepcopy__(self, memo):
272         """Limit the amount of work when a Query is deepcopied."""
273         result = self.clone()
274         memo[id(self)] = result
275         return result
276 
277     def get_compiler(self, using=None, connection=None):
278         if using is None and connection is None:
279             raise ValueError("Need either using or connection")
280         if using:
281             connection = connections[using]
282         return connection.ops.compiler(self.compiler)(self, connection, using)
283 
284     def get_meta(self):
285         """
286         Return the Options instance (the model._meta) from which to start
287         processing. Normally, this is self.model._meta, but it can be changed
288         by subclasses.
289         """
290         return self.model._meta
291 
292     def clone(self):
293         """
294         Return a copy of the current Query. A lightweight alternative to
295         to deepcopy().
296         """
297         obj = Empty()
298         obj.__class__ = self.__class__
299         # Copy references to everything.
300         obj.__dict__ = self.__dict__.copy()
301         # Clone attributes that can't use shallow copy.
302         obj.alias_refcount = self.alias_refcount.copy()
303         obj.alias_map = self.alias_map.copy()
304         obj.external_aliases = self.external_aliases.copy()
305         obj.table_map = self.table_map.copy()
306         obj.where = self.where.clone()
307         obj.annotations = self.annotations.copy()
308         if self.annotation_select_mask is None:
309             obj.annotation_select_mask = None
310         else:
311             obj.annotation_select_mask = self.annotation_select_mask.copy()
312         # _annotation_select_cache cannot be copied, as doing so breaks the
313         # (necessary) state in which both annotations and
314         # _annotation_select_cache point to the same underlying objects.
315         # It will get re-populated in the cloned queryset the next time it's
316         # used.
317         obj._annotation_select_cache = None
318         obj.extra = self.extra.copy()
319         if self.extra_select_mask is None:
320             obj.extra_select_mask = None
321         else:
322             obj.extra_select_mask = self.extra_select_mask.copy()
323         if self._extra_select_cache is None:
324             obj._extra_select_cache = None
325         else:
326             obj._extra_select_cache = self._extra_select_cache.copy()
327         if 'subq_aliases' in self.__dict__:
328             obj.subq_aliases = self.subq_aliases.copy()
329         obj.used_aliases = self.used_aliases.copy()
330         obj._filtered_relations = self._filtered_relations.copy()
331         # Clear the cached_property
332         try:
333             del obj.base_table
334         except AttributeError:
335             pass
336         return obj
337 
338     def chain(self, klass=None):
339         """
340         Return a copy of the current Query that's ready for another operation.
341         The klass argument changes the type of the Query, e.g. UpdateQuery.
342         """
343         obj = self.clone()
344         if klass and obj.__class__ != klass:
345             obj.__class__ = klass
346         if not obj.filter_is_sticky:
347             obj.used_aliases = set()
348         obj.filter_is_sticky = False
349         if hasattr(obj, '_setup_query'):
350             obj._setup_query()
351         return obj
352 
353     def relabeled_clone(self, change_map):
354         clone = self.clone()
355         clone.change_aliases(change_map)
356         return clone
357 
358     def rewrite_cols(self, annotation, col_cnt):
359         # We must make sure the inner query has the referred columns in it.
360         # If we are aggregating over an annotation, then Django uses Ref()
361         # instances to note this. However, if we are annotating over a column
362         # of a related model, then it might be that column isn't part of the
363         # SELECT clause of the inner query, and we must manually make sure
364         # the column is selected. An example case is:
365         #    .aggregate(Sum('author__awards'))
366         # Resolving this expression results in a join to author, but there
367         # is no guarantee the awards column of author is in the select clause
368         # of the query. Thus we must manually add the column to the inner
369         # query.
370         orig_exprs = annotation.get_source_expressions()
371         new_exprs = []
372         for expr in orig_exprs:
373             # FIXME: These conditions are fairly arbitrary. Identify a better
374             # method of having expressions decide which code path they should
375             # take.
376             if isinstance(expr, Ref):
377                 # Its already a Ref to subquery (see resolve_ref() for
378                 # details)
379                 new_exprs.append(expr)
380             elif isinstance(expr, (WhereNode, Lookup)):
381                 # Decompose the subexpressions further. The code here is
382                 # copied from the else clause, but this condition must appear
383                 # before the contains_aggregate/is_summary condition below.
384                 new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
385                 new_exprs.append(new_expr)
386             else:
387                 # Reuse aliases of expressions already selected in subquery.
388                 for col_alias, selected_annotation in self.annotation_select.items():
389                     if selected_annotation == expr:
390                         new_expr = Ref(col_alias, expr)
391                         break
392                 else:
393                     # An expression that is not selected the subquery.
394                     if isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):
395                         # Reference column or another aggregate. Select it
396                         # under a non-conflicting alias.
397                         col_cnt += 1
398                         col_alias = '__col%d' % col_cnt
399                         self.annotations[col_alias] = expr
400                         self.append_annotation_mask([col_alias])
401                         new_expr = Ref(col_alias, expr)
402                     else:
403                         # Some other expression not referencing database values
404                         # directly. Its subexpression might contain Cols.
405                         new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
406                 new_exprs.append(new_expr)
407         annotation.set_source_expressions(new_exprs)
408         return annotation, col_cnt
409 
410     def get_aggregation(self, using, added_aggregate_names):
411         """
412         Return the dictionary with the values of the existing aggregations.
413         """
414         if not self.annotation_select:
415             return {}
416         existing_annotations = [
417             annotation for alias, annotation
418             in self.annotations.items()
419             if alias not in added_aggregate_names
420         ]
421         # Decide if we need to use a subquery.
422         #
423         # Existing annotations would cause incorrect results as get_aggregation()
424         # must produce just one result and thus must not use GROUP BY. But we
425         # aren't smart enough to remove the existing annotations from the
426         # query, so those would force us to use GROUP BY.
427         #
428         # If the query has limit or distinct, or uses set operations, then
429         # those operations must be done in a subquery so that the query
430         # aggregates on the limit and/or distinct results instead of applying
431         # the distinct and limit after the aggregation.
432         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or
433                 self.distinct or self.combinator):
434             from django.db.models.sql.subqueries import AggregateQuery
435             outer_query = AggregateQuery(self.model)
436             inner_query = self.clone()
437             inner_query.select_for_update = False
438             inner_query.select_related = False
439             inner_query.set_annotation_mask(self.annotation_select)
440             if not self.is_sliced and not self.distinct_fields:
441                 # Queries with distinct_fields need ordering and when a limit
442                 # is applied we must take the slice from the ordered query.
443                 # Otherwise no need for ordering.
444                 inner_query.clear_ordering(True)
445             if not inner_query.distinct:
446                 # If the inner query uses default select and it has some
447                 # aggregate annotations, then we must make sure the inner
448                 # query is grouped by the main model's primary key. However,
449                 # clearing the select clause can alter results if distinct is
450                 # used.
451                 has_existing_aggregate_annotations = any(
452                     annotation for annotation in existing_annotations
453                     if getattr(annotation, 'contains_aggregate', True)
454                 )
455                 if inner_query.default_cols and has_existing_aggregate_annotations:
456                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
457                 inner_query.default_cols = False
458 
459             relabels = {t: 'subquery' for t in inner_query.alias_map}
460             relabels[None] = 'subquery'
461             # Remove any aggregates marked for reduction from the subquery
462             # and move them to the outer AggregateQuery.
463             col_cnt = 0
464             for alias, expression in list(inner_query.annotation_select.items()):
465                 annotation_select_mask = inner_query.annotation_select_mask
466                 if expression.is_summary:
467                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
468                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
469                     del inner_query.annotations[alias]
470                     annotation_select_mask.remove(alias)
471                 # Make sure the annotation_select wont use cached results.
472                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)
473             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
474                 # In case of Model.objects[0:3].count(), there would be no
475                 # field selected in the inner query, yet we must use a subquery.
476                 # So, make sure at least one field is selected.
477                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
478             try:
479                 outer_query.add_subquery(inner_query, using)
480             except EmptyResultSet:
481                 return {
482                     alias: None
483                     for alias in outer_query.annotation_select
484                 }
485         else:
486             outer_query = self
487             self.select = ()
488             self.default_cols = False
489             self.extra = {}
490 
491         outer_query.clear_ordering(True)
492         outer_query.clear_limits()
493         outer_query.select_for_update = False
494         outer_query.select_related = False
495         compiler = outer_query.get_compiler(using)
496         result = compiler.execute_sql(SINGLE)
497         if result is None:
498             result = [None] * len(outer_query.annotation_select)
499 
500         converters = compiler.get_converters(outer_query.annotation_select.values())
501         result = next(compiler.apply_converters((result,), converters))
502 
503         return dict(zip(outer_query.annotation_select, result))
504 
505     def get_count(self, using):
506         """
507         Perform a COUNT() query using the current filter constraints.
508         """
509         obj = self.clone()
510         obj.add_annotation(Count('*'), alias='__count', is_summary=True)
511         number = obj.get_aggregation(using, ['__count'])['__count']
512         if number is None:
513             number = 0
514         return number
515 
516     def has_filters(self):
517         return self.where
518 
519     def has_results(self, using):
520         q = self.clone()
521         if not q.distinct:
522             if q.group_by is True:
523                 q.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
524                 q.set_group_by()
525             q.clear_select_clause()
526         q.clear_ordering(True)
527         q.set_limits(high=1)
528         compiler = q.get_compiler(using=using)
529         return compiler.has_results()
530 
531     def explain(self, using, format=None, **options):
532         q = self.clone()
533         q.explain_query = True
534         q.explain_format = format
535         q.explain_options = options
536         compiler = q.get_compiler(using=using)
537         return '\n'.join(compiler.explain_query())
538 
539     def combine(self, rhs, connector):
540         """
541         Merge the 'rhs' query into the current one (with any 'rhs' effects
542         being applied *after* (that is, "to the right of") anything in the
543         current query. 'rhs' is not modified during a call to this function.
544 
545         The 'connector' parameter describes how to connect filters from the
546         'rhs' query.
547         """
548         assert self.model == rhs.model, \
549             "Cannot combine queries on two different base models."
550         assert not self.is_sliced, \
551             "Cannot combine queries once a slice has been taken."
552         assert self.distinct == rhs.distinct, \
553             "Cannot combine a unique query with a non-unique query."
554         assert self.distinct_fields == rhs.distinct_fields, \
555             "Cannot combine queries with different distinct fields."
556 
557         # Work out how to relabel the rhs aliases, if necessary.
558         change_map = {}
559         conjunction = (connector == AND)
560 
561         # Determine which existing joins can be reused. When combining the
562         # query with AND we must recreate all joins for m2m filters. When
563         # combining with OR we can reuse joins. The reason is that in AND
564         # case a single row can't fulfill a condition like:
565         #     revrel__col=1 & revrel__col=2
566         # But, there might be two different related rows matching this
567         # condition. In OR case a single True is enough, so single row is
568         # enough, too.
569         #
570         # Note that we will be creating duplicate joins for non-m2m joins in
571         # the AND case. The results will be correct but this creates too many
572         # joins. This is something that could be fixed later on.
573         reuse = set() if conjunction else set(self.alias_map)
574         # Base table must be present in the query - this is the same
575         # table on both sides.
576         self.get_initial_alias()
577         joinpromoter = JoinPromoter(connector, 2, False)
578         joinpromoter.add_votes(
579             j for j in self.alias_map if self.alias_map[j].join_type == INNER)
580         rhs_votes = set()
581         # Now, add the joins from rhs query into the new query (skipping base
582         # table).
583         rhs_tables = list(rhs.alias_map)[1:]
584         for alias in rhs_tables:
585             join = rhs.alias_map[alias]
586             # If the left side of the join was already relabeled, use the
587             # updated alias.
588             join = join.relabeled_clone(change_map)
589             new_alias = self.join(join, reuse=reuse)
590             if join.join_type == INNER:
591                 rhs_votes.add(new_alias)
592             # We can't reuse the same join again in the query. If we have two
593             # distinct joins for the same connection in rhs query, then the
594             # combined query must have two joins, too.
595             reuse.discard(new_alias)
596             if alias != new_alias:
597                 change_map[alias] = new_alias
598             if not rhs.alias_refcount[alias]:
599                 # The alias was unused in the rhs query. Unref it so that it
600                 # will be unused in the new query, too. We have to add and
601                 # unref the alias so that join promotion has information of
602                 # the join type for the unused alias.
603                 self.unref_alias(new_alias)
604         joinpromoter.add_votes(rhs_votes)
605         joinpromoter.update_join_types(self)
606 
607         # Now relabel a copy of the rhs where-clause and add it to the current
608         # one.
609         w = rhs.where.clone()
610         w.relabel_aliases(change_map)
611         self.where.add(w, connector)
612 
613         # Selection columns and extra extensions are those provided by 'rhs'.
614         if rhs.select:
615             self.set_select([col.relabeled_clone(change_map) for col in rhs.select])
616         else:
617             self.select = ()
618 
619         if connector == OR:
620             # It would be nice to be able to handle this, but the queries don't
621             # really make sense (or return consistent value sets). Not worth
622             # the extra complexity when you can write a real query instead.
623             if self.extra and rhs.extra:
624                 raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")
625         self.extra.update(rhs.extra)
626         extra_select_mask = set()
627         if self.extra_select_mask is not None:
628             extra_select_mask.update(self.extra_select_mask)
629         if rhs.extra_select_mask is not None:
630             extra_select_mask.update(rhs.extra_select_mask)
631         if extra_select_mask:
632             self.set_extra_mask(extra_select_mask)
633         self.extra_tables += rhs.extra_tables
634 
635         # Ordering uses the 'rhs' ordering, unless it has none, in which case
636         # the current ordering is used.
637         self.order_by = rhs.order_by or self.order_by
638         self.extra_order_by = rhs.extra_order_by or self.extra_order_by
639 
640     def deferred_to_data(self, target, callback):
641         """
642         Convert the self.deferred_loading data structure to an alternate data
643         structure, describing the field that *will* be loaded. This is used to
644         compute the columns to select from the database and also by the
645         QuerySet class to work out which fields are being initialized on each
646         model. Models that have all their fields included aren't mentioned in
647         the result, only those that have field restrictions in place.
648 
649         The "target" parameter is the instance that is populated (in place).
650         The "callback" is a function that is called whenever a (model, field)
651         pair need to be added to "target". It accepts three parameters:
652         "target", and the model and list of fields being added for that model.
653         """
654         field_names, defer = self.deferred_loading
655         if not field_names:
656             return
657         orig_opts = self.get_meta()
658         seen = {}
659         must_include = {orig_opts.concrete_model: {orig_opts.pk}}
660         for field_name in field_names:
661             parts = field_name.split(LOOKUP_SEP)
662             cur_model = self.model._meta.concrete_model
663             opts = orig_opts
664             for name in parts[:-1]:
665                 old_model = cur_model
666                 if name in self._filtered_relations:
667                     name = self._filtered_relations[name].relation_name
668                 source = opts.get_field(name)
669                 if is_reverse_o2o(source):
670                     cur_model = source.related_model
671                 else:
672                     cur_model = source.remote_field.model
673                 opts = cur_model._meta
674                 # Even if we're "just passing through" this model, we must add
675                 # both the current model's pk and the related reference field
676                 # (if it's not a reverse relation) to the things we select.
677                 if not is_reverse_o2o(source):
678                     must_include[old_model].add(source)
679                 add_to_dict(must_include, cur_model, opts.pk)
680             field = opts.get_field(parts[-1])
681             is_reverse_object = field.auto_created and not field.concrete
682             model = field.related_model if is_reverse_object else field.model
683             model = model._meta.concrete_model
684             if model == opts.model:
685                 model = cur_model
686             if not is_reverse_o2o(field):
687                 add_to_dict(seen, model, field)
688 
689         if defer:
690             # We need to load all fields for each model, except those that
691             # appear in "seen" (for all models that appear in "seen"). The only
692             # slight complexity here is handling fields that exist on parent
693             # models.
694             workset = {}
695             for model, values in seen.items():
696                 for field in model._meta.local_fields:
697                     if field not in values:
698                         m = field.model._meta.concrete_model
699                         add_to_dict(workset, m, field)
700             for model, values in must_include.items():
701                 # If we haven't included a model in workset, we don't add the
702                 # corresponding must_include fields for that model, since an
703                 # empty set means "include all fields". That's why there's no
704                 # "else" branch here.
705                 if model in workset:
706                     workset[model].update(values)
707             for model, values in workset.items():
708                 callback(target, model, values)
709         else:
710             for model, values in must_include.items():
711                 if model in seen:
712                     seen[model].update(values)
713                 else:
714                     # As we've passed through this model, but not explicitly
715                     # included any fields, we have to make sure it's mentioned
716                     # so that only the "must include" fields are pulled in.
717                     seen[model] = values
718             # Now ensure that every model in the inheritance chain is mentioned
719             # in the parent list. Again, it must be mentioned to ensure that
720             # only "must include" fields are pulled in.
721             for model in orig_opts.get_parent_list():
722                 seen.setdefault(model, set())
723             for model, values in seen.items():
724                 callback(target, model, values)
725 
726     def table_alias(self, table_name, create=False, filtered_relation=None):
727         """
728         Return a table alias for the given table_name and whether this is a
729         new alias or not.
730 
731         If 'create' is true, a new alias is always created. Otherwise, the
732         most recently created alias for the table (if one exists) is reused.
733         """
734         alias_list = self.table_map.get(table_name)
735         if not create and alias_list:
736             alias = alias_list[0]
737             self.alias_refcount[alias] += 1
738             return alias, False
739 
740         # Create a new alias for this table.
741         if alias_list:
742             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
743             alias_list.append(alias)
744         else:
745             # The first occurrence of a table uses the table name directly.
746             alias = filtered_relation.alias if filtered_relation is not None else table_name
747             self.table_map[table_name] = [alias]
748         self.alias_refcount[alias] = 1
749         return alias, True
750 
751     def ref_alias(self, alias):
752         """Increases the reference count for this alias."""
753         self.alias_refcount[alias] += 1
754 
755     def unref_alias(self, alias, amount=1):
756         """Decreases the reference count for this alias."""
757         self.alias_refcount[alias] -= amount
758 
759     def promote_joins(self, aliases):
760         """
761         Promote recursively the join type of given aliases and its children to
762         an outer join. If 'unconditional' is False, only promote the join if
763         it is nullable or the parent join is an outer join.
764 
765         The children promotion is done to avoid join chains that contain a LOUTER
766         b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,
767         then we must also promote b->c automatically, or otherwise the promotion
768         of a->b doesn't actually change anything in the query results.
769         """
770         aliases = list(aliases)
771         while aliases:
772             alias = aliases.pop(0)
773             if self.alias_map[alias].join_type is None:
774                 # This is the base table (first FROM entry) - this table
775                 # isn't really joined at all in the query, so we should not
776                 # alter its join type.
777                 continue
778             # Only the first alias (skipped above) should have None join_type
779             assert self.alias_map[alias].join_type is not None
780             parent_alias = self.alias_map[alias].parent_alias
781             parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER
782             already_louter = self.alias_map[alias].join_type == LOUTER
783             if ((self.alias_map[alias].nullable or parent_louter) and
784                     not already_louter):
785                 self.alias_map[alias] = self.alias_map[alias].promote()
786                 # Join type of 'alias' changed, so re-examine all aliases that
787                 # refer to this one.
788                 aliases.extend(
789                     join for join in self.alias_map
790                     if self.alias_map[join].parent_alias == alias and join not in aliases
791                 )
792 
793     def demote_joins(self, aliases):
794         """
795         Change join type from LOUTER to INNER for all joins in aliases.
796 
797         Similarly to promote_joins(), this method must ensure no join chains
798         containing first an outer, then an inner join are generated. If we
799         are demoting b->c join in chain a LOUTER b LOUTER c then we must
800         demote a->b automatically, or otherwise the demotion of b->c doesn't
801         actually change anything in the query results. .
802         """
803         aliases = list(aliases)
804         while aliases:
805             alias = aliases.pop(0)
806             if self.alias_map[alias].join_type == LOUTER:
807                 self.alias_map[alias] = self.alias_map[alias].demote()
808                 parent_alias = self.alias_map[alias].parent_alias
809                 if self.alias_map[parent_alias].join_type == INNER:
810                     aliases.append(parent_alias)
811 
812     def reset_refcounts(self, to_counts):
813         """
814         Reset reference counts for aliases so that they match the value passed
815         in `to_counts`.
816         """
817         for alias, cur_refcount in self.alias_refcount.copy().items():
818             unref_amount = cur_refcount - to_counts.get(alias, 0)
819             self.unref_alias(alias, unref_amount)
820 
821     def change_aliases(self, change_map):
822         """
823         Change the aliases in change_map (which maps old-alias -> new-alias),
824         relabelling any references to them in select columns and the where
825         clause.
826         """
827         assert set(change_map).isdisjoint(change_map.values())
828 
829         # 1. Update references in "select" (normal columns plus aliases),
830         # "group by" and "where".
831         self.where.relabel_aliases(change_map)
832         if isinstance(self.group_by, tuple):
833             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])
834         self.select = tuple([col.relabeled_clone(change_map) for col in self.select])
835         self.annotations = self.annotations and {
836             key: col.relabeled_clone(change_map) for key, col in self.annotations.items()
837         }
838 
839         # 2. Rename the alias in the internal table/alias datastructures.
840         for old_alias, new_alias in change_map.items():
841             if old_alias not in self.alias_map:
842                 continue
843             alias_data = self.alias_map[old_alias].relabeled_clone(change_map)
844             self.alias_map[new_alias] = alias_data
845             self.alias_refcount[new_alias] = self.alias_refcount[old_alias]
846             del self.alias_refcount[old_alias]
847             del self.alias_map[old_alias]
848 
849             table_aliases = self.table_map[alias_data.table_name]
850             for pos, alias in enumerate(table_aliases):
851                 if alias == old_alias:
852                     table_aliases[pos] = new_alias
853                     break
854         self.external_aliases = {change_map.get(alias, alias)
855                                  for alias in self.external_aliases}
856 
857     def bump_prefix(self, outer_query):
858         """
859         Change the alias prefix to the next letter in the alphabet in a way
860         that the outer query's aliases and this query's aliases will not
861         conflict. Even tables that previously had no alias will get an alias
862         after this call.
863         """
864         def prefix_gen():
865             """
866             Generate a sequence of characters in alphabetical order:
867                 -> 'A', 'B', 'C', ...
868 
869             When the alphabet is finished, the sequence will continue with the
870             Cartesian product:
871                 -> 'AA', 'AB', 'AC', ...
872             """
873             alphabet = ascii_uppercase
874             prefix = chr(ord(self.alias_prefix) + 1)
875             yield prefix
876             for n in count(1):
877                 seq = alphabet[alphabet.index(prefix):] if prefix else alphabet
878                 for s in product(seq, repeat=n):
879                     yield ''.join(s)
880                 prefix = None
881 
882         if self.alias_prefix != outer_query.alias_prefix:
883             # No clashes between self and outer query should be possible.
884             return
885 
886         # Explicitly avoid infinite loop. The constant divider is based on how
887         # much depth recursive subquery references add to the stack. This value
888         # might need to be adjusted when adding or removing function calls from
889         # the code path in charge of performing these operations.
890         local_recursion_limit = sys.getrecursionlimit() // 16
891         for pos, prefix in enumerate(prefix_gen()):
892             if prefix not in self.subq_aliases:
893                 self.alias_prefix = prefix
894                 break
895             if pos > local_recursion_limit:
896                 raise RecursionError(
897                     'Maximum recursion depth exceeded: too many subqueries.'
898                 )
899         self.subq_aliases = self.subq_aliases.union([self.alias_prefix])
900         outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)
901         self.change_aliases({
902             alias: '%s%d' % (self.alias_prefix, pos)
903             for pos, alias in enumerate(self.alias_map)
904         })
905 
906     def get_initial_alias(self):
907         """
908         Return the first alias for this query, after increasing its reference
909         count.
910         """
911         if self.alias_map:
912             alias = self.base_table
913             self.ref_alias(alias)
914         else:
915             alias = self.join(BaseTable(self.get_meta().db_table, None))
916         return alias
917 
918     def count_active_tables(self):
919         """
920         Return the number of tables in this query with a non-zero reference
921         count. After execution, the reference counts are zeroed, so tables
922         added in compiler will not be seen by this method.
923         """
924         return len([1 for count in self.alias_refcount.values() if count])
925 
926     def join(self, join, reuse=None, reuse_with_filtered_relation=False):
927         """
928         Return an alias for the 'join', either reusing an existing alias for
929         that join or creating a new one. 'join' is either a
930         sql.datastructures.BaseTable or Join.
931 
932         The 'reuse' parameter can be either None which means all joins are
933         reusable, or it can be a set containing the aliases that can be reused.
934 
935         The 'reuse_with_filtered_relation' parameter is used when computing
936         FilteredRelation instances.
937 
938         A join is always created as LOUTER if the lhs alias is LOUTER to make
939         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new
940         joins are created as LOUTER if the join is nullable.
941         """
942         if reuse_with_filtered_relation and reuse:
943             reuse_aliases = [
944                 a for a, j in self.alias_map.items()
945                 if a in reuse and j.equals(join, with_filtered_relation=False)
946             ]
947         else:
948             reuse_aliases = [
949                 a for a, j in self.alias_map.items()
950                 if (reuse is None or a in reuse) and j == join
951             ]
952         if reuse_aliases:
953             if join.table_alias in reuse_aliases:
954                 reuse_alias = join.table_alias
955             else:
956                 # Reuse the most recent alias of the joined table
957                 # (a many-to-many relation may be joined multiple times).
958                 reuse_alias = reuse_aliases[-1]
959             self.ref_alias(reuse_alias)
960             return reuse_alias
961 
962         # No reuse is possible, so we need a new alias.
963         alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)
964         if join.join_type:
965             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:
966                 join_type = LOUTER
967             else:
968                 join_type = INNER
969             join.join_type = join_type
970         join.table_alias = alias
971         self.alias_map[alias] = join
972         return alias
973 
974     def join_parent_model(self, opts, model, alias, seen):
975         """
976         Make sure the given 'model' is joined in the query. If 'model' isn't
977         a parent of 'opts' or if it is None this method is a no-op.
978 
979         The 'alias' is the root alias for starting the join, 'seen' is a dict
980         of model -> alias of existing joins. It must also contain a mapping
981         of None -> some alias. This will be returned in the no-op case.
982         """
983         if model in seen:
984             return seen[model]
985         chain = opts.get_base_chain(model)
986         if not chain:
987             return alias
988         curr_opts = opts
989         for int_model in chain:
990             if int_model in seen:
991                 curr_opts = int_model._meta
992                 alias = seen[int_model]
993                 continue
994             # Proxy model have elements in base chain
995             # with no parents, assign the new options
996             # object and skip to the next base in that
997             # case
998             if not curr_opts.parents[int_model]:
999                 curr_opts = int_model._meta
1000                 continue
1001             link_field = curr_opts.get_ancestor_link(int_model)
1002             join_info = self.setup_joins([link_field.name], curr_opts, alias)
1003             curr_opts = int_model._meta
1004             alias = seen[int_model] = join_info.joins[-1]
1005         return alias or seen[None]
1006 
1007     def add_annotation(self, annotation, alias, is_summary=False):
1008         """Add a single annotation expression to the Query."""
1009         annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
1010                                                    summarize=is_summary)
1011         self.append_annotation_mask([alias])
1012         self.annotations[alias] = annotation
1013 
1014     def resolve_expression(self, query, *args, **kwargs):
1015         clone = self.clone()
1016         # Subqueries need to use a different set of aliases than the outer query.
1017         clone.bump_prefix(query)
1018         clone.subquery = True
1019         # It's safe to drop ordering if the queryset isn't using slicing,
1020         # distinct(*fields) or select_for_update().
1021         if (self.low_mark == 0 and self.high_mark is None and
1022                 not self.distinct_fields and
1023                 not self.select_for_update):
1024             clone.clear_ordering(True)
1025         clone.where.resolve_expression(query, *args, **kwargs)
1026         for key, value in clone.annotations.items():
1027             resolved = value.resolve_expression(query, *args, **kwargs)
1028             if hasattr(resolved, 'external_aliases'):
1029                 resolved.external_aliases.update(clone.alias_map)
1030             clone.annotations[key] = resolved
1031         # Outer query's aliases are considered external.
1032         clone.external_aliases.update(
1033             alias for alias, table in query.alias_map.items()
1034             if (
1035                 isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias
1036             ) or (
1037                 isinstance(table, BaseTable) and table.table_name != table.table_alias
1038             )
1039         )
1040         return clone
1041 
1042     def as_sql(self, compiler, connection):
1043         sql, params = self.get_compiler(connection=connection).as_sql()
1044         if self.subquery:
1045             sql = '(%s)' % sql
1046         return sql, params
1047 
1048     def resolve_lookup_value(self, value, can_reuse, allow_joins, simple_col):
1049         if hasattr(value, 'resolve_expression'):
1050             kwargs = {'reuse': can_reuse, 'allow_joins': allow_joins}
1051             if isinstance(value, F):
1052                 kwargs['simple_col'] = simple_col
1053             value = value.resolve_expression(self, **kwargs)
1054         elif isinstance(value, (list, tuple)):
1055             # The items of the iterable may be expressions and therefore need
1056             # to be resolved independently.
1057             resolved_values = []
1058             for sub_value in value:
1059                 if hasattr(sub_value, 'resolve_expression'):
1060                     if isinstance(sub_value, F):
1061                         resolved_values.append(sub_value.resolve_expression(
1062                             self, reuse=can_reuse, allow_joins=allow_joins,
1063                             simple_col=simple_col,
1064                         ))
1065                     else:
1066                         resolved_values.append(sub_value.resolve_expression(
1067                             self, reuse=can_reuse, allow_joins=allow_joins,
1068                         ))
1069                 else:
1070                     resolved_values.append(sub_value)
1071             value = tuple(resolved_values)
1072         return value
1073 
1074     def solve_lookup_type(self, lookup):
1075         """
1076         Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').
1077         """
1078         lookup_splitted = lookup.split(LOOKUP_SEP)
1079         if self.annotations:
1080             expression, expression_lookups = refs_expression(lookup_splitted, self.annotations)
1081             if expression:
1082                 return expression_lookups, (), expression
1083         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
1084         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
1085         if len(lookup_parts) > 1 and not field_parts:
1086             raise FieldError(
1087                 'Invalid lookup "%s" for model %s".' %
1088                 (lookup, self.get_meta().model.__name__)
1089             )
1090         return lookup_parts, field_parts, False
1091 
1092     def check_query_object_type(self, value, opts, field):
1093         """
1094         Check whether the object passed while querying is of the correct type.
1095         If not, raise a ValueError specifying the wrong object.
1096         """
1097         if hasattr(value, '_meta'):
1098             if not check_rel_lookup_compatibility(value._meta.model, opts, field):
1099                 raise ValueError(
1100                     'Cannot query "%s": Must be "%s" instance.' %
1101                     (value, opts.object_name))
1102 
1103     def check_related_objects(self, field, value, opts):
1104         """Check the type of object passed to query relations."""
1105         if field.is_relation:
1106             # Check that the field and the queryset use the same model in a
1107             # query like .filter(author=Author.objects.all()). For example, the
1108             # opts would be Author's (from the author field) and value.model
1109             # would be Author.objects.all() queryset's .model (Author also).
1110             # The field is the related field on the lhs side.
1111             if (isinstance(value, Query) and not value.has_select_fields and
1112                     not check_rel_lookup_compatibility(value.model, opts, field)):
1113                 raise ValueError(
1114                     'Cannot use QuerySet for "%s": Use a QuerySet for "%s".' %
1115                     (value.model._meta.object_name, opts.object_name)
1116                 )
1117             elif hasattr(value, '_meta'):
1118                 self.check_query_object_type(value, opts, field)
1119             elif hasattr(value, '__iter__'):
1120                 for v in value:
1121                     self.check_query_object_type(v, opts, field)
1122 
1123     def check_filterable(self, expression):
1124         """Raise an error if expression cannot be used in a WHERE clause."""
1125         if not getattr(expression, 'filterable', 'True'):
1126             raise NotSupportedError(
1127                 expression.__class__.__name__ + ' is disallowed in the filter '
1128                 'clause.'
1129             )
1130         if hasattr(expression, 'get_source_expressions'):
1131             for expr in expression.get_source_expressions():
1132                 self.check_filterable(expr)
1133 
1134     def build_lookup(self, lookups, lhs, rhs):
1135         """
1136         Try to extract transforms and lookup from given lhs.
1137 
1138         The lhs value is something that works like SQLExpression.
1139         The rhs value is what the lookup is going to compare against.
1140         The lookups is a list of names to extract using get_lookup()
1141         and get_transform().
1142         """
1143         # __exact is the default lookup if one isn't given.
1144         *transforms, lookup_name = lookups or ['exact']
1145         for name in transforms:
1146             lhs = self.try_transform(lhs, name)
1147         # First try get_lookup() so that the lookup takes precedence if the lhs
1148         # supports both transform and lookup for the name.
1149         lookup_class = lhs.get_lookup(lookup_name)
1150         if not lookup_class:
1151             if lhs.field.is_relation:
1152                 raise FieldError('Related Field got invalid lookup: {}'.format(lookup_name))
1153             # A lookup wasn't found. Try to interpret the name as a transform
1154             # and do an Exact lookup against it.
1155             lhs = self.try_transform(lhs, lookup_name)
1156             lookup_name = 'exact'
1157             lookup_class = lhs.get_lookup(lookup_name)
1158             if not lookup_class:
1159                 return
1160 
1161         lookup = lookup_class(lhs, rhs)
1162         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all
1163         # uses of None as a query value unless the lookup supports it.
1164         if lookup.rhs is None and not lookup.can_use_none_as_rhs:
1165             if lookup_name not in ('exact', 'iexact'):
1166                 raise ValueError("Cannot use None as a query value")
1167             return lhs.get_lookup('isnull')(lhs, True)
1168 
1169         # For Oracle '' is equivalent to null. The check must be done at this
1170         # stage because join promotion can't be done in the compiler. Using
1171         # DEFAULT_DB_ALIAS isn't nice but it's the best that can be done here.
1172         # A similar thing is done in is_nullable(), too.
1173         if (connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
1174                 lookup_name == 'exact' and lookup.rhs == ''):
1175             return lhs.get_lookup('isnull')(lhs, True)
1176 
1177         return lookup
1178 
1179     def try_transform(self, lhs, name):
1180         """
1181         Helper method for build_lookup(). Try to fetch and initialize
1182         a transform for name parameter from lhs.
1183         """
1184         transform_class = lhs.get_transform(name)
1185         if transform_class:
1186             return transform_class(lhs)
1187         else:
1188             output_field = lhs.output_field.__class__
1189             suggested_lookups = difflib.get_close_matches(name, output_field.get_lookups())
1190             if suggested_lookups:
1191                 suggestion = ', perhaps you meant %s?' % ' or '.join(suggested_lookups)
1192             else:
1193                 suggestion = '.'
1194             raise FieldError(
1195                 "Unsupported lookup '%s' for %s or join on the field not "
1196                 "permitted%s" % (name, output_field.__name__, suggestion)
1197             )
1198 
1199     def build_filter(self, filter_expr, branch_negated=False, current_negated=False,
1200                      can_reuse=None, allow_joins=True, split_subq=True,
1201                      reuse_with_filtered_relation=False, simple_col=False):
1202         """
1203         Build a WhereNode for a single filter clause but don't add it
1204         to this Query. Query.add_q() will then add this filter to the where
1205         Node.
1206 
1207         The 'branch_negated' tells us if the current branch contains any
1208         negations. This will be used to determine if subqueries are needed.
1209 
1210         The 'current_negated' is used to determine if the current filter is
1211         negated or not and this will be used to determine if IS NULL filtering
1212         is needed.
1213 
1214         The difference between current_negated and branch_negated is that
1215         branch_negated is set on first negation, but current_negated is
1216         flipped for each negation.
1217 
1218         Note that add_filter will not do any negating itself, that is done
1219         upper in the code by add_q().
1220 
1221         The 'can_reuse' is a set of reusable joins for multijoins.
1222 
1223         If 'reuse_with_filtered_relation' is True, then only joins in can_reuse
1224         will be reused.
1225 
1226         The method will create a filter clause that can be added to the current
1227         query. However, if the filter isn't added to the query then the caller
1228         is responsible for unreffing the joins used.
1229         """
1230         if isinstance(filter_expr, dict):
1231             raise FieldError("Cannot parse keyword query as dict")
1232         arg, value = filter_expr
1233         if not arg:
1234             raise FieldError("Cannot parse keyword query %r" % arg)
1235         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
1236 
1237         self.check_filterable(reffed_expression)
1238 
1239         if not allow_joins and len(parts) > 1:
1240             raise FieldError("Joined field references are not permitted in this query")
1241 
1242         pre_joins = self.alias_refcount.copy()
1243         value = self.resolve_lookup_value(value, can_reuse, allow_joins, simple_col)
1244         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}
1245 
1246         self.check_filterable(value)
1247 
1248         clause = self.where_class()
1249         if reffed_expression:
1250             condition = self.build_lookup(lookups, reffed_expression, value)
1251             clause.add(condition, AND)
1252             return clause, []
1253 
1254         opts = self.get_meta()
1255         alias = self.get_initial_alias()
1256         allow_many = not branch_negated or not split_subq
1257 
1258         try:
1259             join_info = self.setup_joins(
1260                 parts, opts, alias, can_reuse=can_reuse, allow_many=allow_many,
1261                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1262             )
1263 
1264             # Prevent iterator from being consumed by check_related_objects()
1265             if isinstance(value, Iterator):
1266                 value = list(value)
1267             self.check_related_objects(join_info.final_field, value, join_info.opts)
1268 
1269             # split_exclude() needs to know which joins were generated for the
1270             # lookup parts
1271             self._lookup_joins = join_info.joins
1272         except MultiJoin as e:
1273             return self.split_exclude(filter_expr, can_reuse, e.names_with_path)
1274 
1275         # Update used_joins before trimming since they are reused to determine
1276         # which joins could be later promoted to INNER.
1277         used_joins.update(join_info.joins)
1278         targets, alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1279         if can_reuse is not None:
1280             can_reuse.update(join_list)
1281 
1282         if join_info.final_field.is_relation:
1283             # No support for transforms for relational fields
1284             num_lookups = len(lookups)
1285             if num_lookups > 1:
1286                 raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))
1287             if len(targets) == 1:
1288                 col = _get_col(targets[0], join_info.final_field, alias, simple_col)
1289             else:
1290                 col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)
1291         else:
1292             col = _get_col(targets[0], join_info.final_field, alias, simple_col)
1293 
1294         condition = self.build_lookup(lookups, col, value)
1295         lookup_type = condition.lookup_name
1296         clause.add(condition, AND)
1297 
1298         require_outer = lookup_type == 'isnull' and condition.rhs is True and not current_negated
1299         if current_negated and (lookup_type != 'isnull' or condition.rhs is False) and condition.rhs is not None:
1300             require_outer = True
1301             if (lookup_type != 'isnull' and (
1302                     self.is_nullable(targets[0]) or
1303                     self.alias_map[join_list[-1]].join_type == LOUTER)):
1304                 # The condition added here will be SQL like this:
1305                 # NOT (col IS NOT NULL), where the first NOT is added in
1306                 # upper layers of code. The reason for addition is that if col
1307                 # is null, then col != someval will result in SQL "unknown"
1308                 # which isn't the same as in Python. The Python None handling
1309                 # is wanted, and it can be gotten by
1310                 # (col IS NULL OR col != someval)
1311                 #   <=>
1312                 # NOT (col IS NOT NULL AND col = someval).
1313                 lookup_class = targets[0].get_lookup('isnull')
1314                 col = _get_col(targets[0], join_info.targets[0], alias, simple_col)
1315                 clause.add(lookup_class(col, False), AND)
1316         return clause, used_joins if not require_outer else ()
1317 
1318     def add_filter(self, filter_clause):
1319         self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))
1320 
1321     def add_q(self, q_object):
1322         """
1323         A preprocessor for the internal _add_q(). Responsible for doing final
1324         join promotion.
1325         """
1326         # For join promotion this case is doing an AND for the added q_object
1327         # and existing conditions. So, any existing inner join forces the join
1328         # type to remain inner. Existing outer joins can however be demoted.
1329         # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if
1330         # rel_a doesn't produce any rows, then the whole condition must fail.
1331         # So, demotion is OK.
1332         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}
1333         clause, _ = self._add_q(q_object, self.used_aliases)
1334         if clause:
1335             self.where.add(clause, AND)
1336         self.demote_joins(existing_inner)
1337 
1338     def build_where(self, q_object):
1339         return self._add_q(q_object, used_aliases=set(), allow_joins=False, simple_col=True)[0]
1340 
1341     def _add_q(self, q_object, used_aliases, branch_negated=False,
1342                current_negated=False, allow_joins=True, split_subq=True,
1343                simple_col=False):
1344         """Add a Q-object to the current filter."""
1345         connector = q_object.connector
1346         current_negated = current_negated ^ q_object.negated
1347         branch_negated = branch_negated or q_object.negated
1348         target_clause = self.where_class(connector=connector,
1349                                          negated=q_object.negated)
1350         joinpromoter = JoinPromoter(q_object.connector, len(q_object.children), current_negated)
1351         for child in q_object.children:
1352             if isinstance(child, Node):
1353                 child_clause, needed_inner = self._add_q(
1354                     child, used_aliases, branch_negated,
1355                     current_negated, allow_joins, split_subq, simple_col)
1356                 joinpromoter.add_votes(needed_inner)
1357             else:
1358                 child_clause, needed_inner = self.build_filter(
1359                     child, can_reuse=used_aliases, branch_negated=branch_negated,
1360                     current_negated=current_negated, allow_joins=allow_joins,
1361                     split_subq=split_subq, simple_col=simple_col,
1362                 )
1363                 joinpromoter.add_votes(needed_inner)
1364             if child_clause:
1365                 target_clause.add(child_clause, connector)
1366         needed_inner = joinpromoter.update_join_types(self)
1367         return target_clause, needed_inner
1368 
1369     def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
1370         """Add a FilteredRelation object to the current filter."""
1371         connector = q_object.connector
1372         current_negated ^= q_object.negated
1373         branch_negated = branch_negated or q_object.negated
1374         target_clause = self.where_class(connector=connector, negated=q_object.negated)
1375         for child in q_object.children:
1376             if isinstance(child, Node):
1377                 child_clause = self.build_filtered_relation_q(
1378                     child, reuse=reuse, branch_negated=branch_negated,
1379                     current_negated=current_negated,
1380                 )
1381             else:
1382                 child_clause, _ = self.build_filter(
1383                     child, can_reuse=reuse, branch_negated=branch_negated,
1384                     current_negated=current_negated,
1385                     allow_joins=True, split_subq=False,
1386                     reuse_with_filtered_relation=True,
1387                 )
1388             target_clause.add(child_clause, connector)
1389         return target_clause
1390 
1391     def add_filtered_relation(self, filtered_relation, alias):
1392         filtered_relation.alias = alias
1393         lookups = dict(get_children_from_q(filtered_relation.condition))
1394         for lookup in chain((filtered_relation.relation_name,), lookups):
1395             lookup_parts, field_parts, _ = self.solve_lookup_type(lookup)
1396             shift = 2 if not lookup_parts else 1
1397             if len(field_parts) > (shift + len(lookup_parts)):
1398                 raise ValueError(
1399                     "FilteredRelation's condition doesn't support nested "
1400                     "relations (got %r)." % lookup
1401                 )
1402         self._filtered_relations[filtered_relation.alias] = filtered_relation
1403 
1404     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
1405         """
1406         Walk the list of names and turns them into PathInfo tuples. A single
1407         name in 'names' can generate multiple PathInfos (m2m, for example).
1408 
1409         'names' is the path of names to travel, 'opts' is the model Options we
1410         start the name resolving from, 'allow_many' is as for setup_joins().
1411         If fail_on_missing is set to True, then a name that can't be resolved
1412         will generate a FieldError.
1413 
1414         Return a list of PathInfo tuples. In addition return the final field
1415         (the last used join field) and target (which is a field guaranteed to
1416         contain the same value as the final field). Finally, return those names
1417         that weren't found (which are likely transforms and the final lookup).
1418         """
1419         path, names_with_path = [], []
1420         for pos, name in enumerate(names):
1421             cur_names_with_path = (name, [])
1422             if name == 'pk':
1423                 name = opts.pk.name
1424 
1425             field = None
1426             filtered_relation = None
1427             try:
1428                 field = opts.get_field(name)
1429             except FieldDoesNotExist:
1430                 if name in self.annotation_select:
1431                     field = self.annotation_select[name].output_field
1432                 elif name in self._filtered_relations and pos == 0:
1433                     filtered_relation = self._filtered_relations[name]
1434                     field = opts.get_field(filtered_relation.relation_name)
1435             if field is not None:
1436                 # Fields that contain one-to-many relations with a generic
1437                 # model (like a GenericForeignKey) cannot generate reverse
1438                 # relations and therefore cannot be used for reverse querying.
1439                 if field.is_relation and not field.related_model:
1440                     raise FieldError(
1441                         "Field %r does not generate an automatic reverse "
1442                         "relation and therefore cannot be used for reverse "
1443                         "querying. If it is a GenericForeignKey, consider "
1444                         "adding a GenericRelation." % name
1445                     )
1446                 try:
1447                     model = field.model._meta.concrete_model
1448                 except AttributeError:
1449                     # QuerySet.annotate() may introduce fields that aren't
1450                     # attached to a model.
1451                     model = None
1452             else:
1453                 # We didn't find the current field, so move position back
1454                 # one step.
1455                 pos -= 1
1456                 if pos == -1 or fail_on_missing:
1457                     available = sorted([
1458                         *get_field_names_from_opts(opts),
1459                         *self.annotation_select,
1460                         *self._filtered_relations,
1461                     ])
1462                     raise FieldError("Cannot resolve keyword '%s' into field. "
1463                                      "Choices are: %s" % (name, ", ".join(available)))
1464                 break
1465             # Check if we need any joins for concrete inheritance cases (the
1466             # field lives in parent, but we are currently in one of its
1467             # children)
1468             if model is not opts.model:
1469                 path_to_parent = opts.get_path_to_parent(model)
1470                 if path_to_parent:
1471                     path.extend(path_to_parent)
1472                     cur_names_with_path[1].extend(path_to_parent)
1473                     opts = path_to_parent[-1].to_opts
1474             if hasattr(field, 'get_path_info'):
1475                 pathinfos = field.get_path_info(filtered_relation)
1476                 if not allow_many:
1477                     for inner_pos, p in enumerate(pathinfos):
1478                         if p.m2m:
1479                             cur_names_with_path[1].extend(pathinfos[0:inner_pos + 1])
1480                             names_with_path.append(cur_names_with_path)
1481                             raise MultiJoin(pos + 1, names_with_path)
1482                 last = pathinfos[-1]
1483                 path.extend(pathinfos)
1484                 final_field = last.join_field
1485                 opts = last.to_opts
1486                 targets = last.target_fields
1487                 cur_names_with_path[1].extend(pathinfos)
1488                 names_with_path.append(cur_names_with_path)
1489             else:
1490                 # Local non-relational field.
1491                 final_field = field
1492                 targets = (field,)
1493                 if fail_on_missing and pos + 1 != len(names):
1494                     raise FieldError(
1495                         "Cannot resolve keyword %r into field. Join on '%s'"
1496                         " not permitted." % (names[pos + 1], name))
1497                 break
1498         return path, final_field, targets, names[pos + 1:]
1499 
1500     def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True,
1501                     reuse_with_filtered_relation=False):
1502         """
1503         Compute the necessary table joins for the passage through the fields
1504         given in 'names'. 'opts' is the Options class for the current model
1505         (which gives the table we are starting from), 'alias' is the alias for
1506         the table to start the joining from.
1507 
1508         The 'can_reuse' defines the reverse foreign key joins we can reuse. It
1509         can be None in which case all joins are reusable or a set of aliases
1510         that can be reused. Note that non-reverse foreign keys are always
1511         reusable when using setup_joins().
1512 
1513         The 'reuse_with_filtered_relation' can be used to force 'can_reuse'
1514         parameter and force the relation on the given connections.
1515 
1516         If 'allow_many' is False, then any reverse foreign key seen will
1517         generate a MultiJoin exception.
1518 
1519         Return the final field involved in the joins, the target field (used
1520         for any 'where' constraint), the final 'opts' value, the joins, the
1521         field path traveled to generate the joins, and a transform function
1522         that takes a field and alias and is equivalent to `field.get_col(alias)`
1523         in the simple case but wraps field transforms if they were included in
1524         names.
1525 
1526         The target field is the field containing the concrete value. Final
1527         field can be something different, for example foreign key pointing to
1528         that value. Final field is needed for example in some value
1529         conversions (convert 'obj' in fk__id=obj to pk val using the foreign
1530         key field for example).
1531         """
1532         joins = [alias]
1533         # The transform can't be applied yet, as joins must be trimmed later.
1534         # To avoid making every caller of this method look up transforms
1535         # directly, compute transforms here and create a partial that converts
1536         # fields to the appropriate wrapped version.
1537 
1538         def final_transformer(field, alias):
1539             return field.get_col(alias)
1540 
1541         # Try resolving all the names as fields first. If there's an error,
1542         # treat trailing names as lookups until a field can be resolved.
1543         last_field_exception = None
1544         for pivot in range(len(names), 0, -1):
1545             try:
1546                 path, final_field, targets, rest = self.names_to_path(
1547                     names[:pivot], opts, allow_many, fail_on_missing=True,
1548                 )
1549             except FieldError as exc:
1550                 if pivot == 1:
1551                     # The first item cannot be a lookup, so it's safe
1552                     # to raise the field error here.
1553                     raise
1554                 else:
1555                     last_field_exception = exc
1556             else:
1557                 # The transforms are the remaining items that couldn't be
1558                 # resolved into fields.
1559                 transforms = names[pivot:]
1560                 break
1561         for name in transforms:
1562             def transform(field, alias, *, name, previous):
1563                 try:
1564                     wrapped = previous(field, alias)
1565                     return self.try_transform(wrapped, name)
1566                 except FieldError:
1567                     # FieldError is raised if the transform doesn't exist.
1568                     if isinstance(final_field, Field) and last_field_exception:
1569                         raise last_field_exception
1570                     else:
1571                         raise
1572             final_transformer = functools.partial(transform, name=name, previous=final_transformer)
1573         # Then, add the path to the query's joins. Note that we can't trim
1574         # joins at this stage - we will need the information about join type
1575         # of the trimmed joins.
1576         for join in path:
1577             if join.filtered_relation:
1578                 filtered_relation = join.filtered_relation.clone()
1579                 table_alias = filtered_relation.alias
1580             else:
1581                 filtered_relation = None
1582                 table_alias = None
1583             opts = join.to_opts
1584             if join.direct:
1585                 nullable = self.is_nullable(join.join_field)
1586             else:
1587                 nullable = True
1588             connection = Join(
1589                 opts.db_table, alias, table_alias, INNER, join.join_field,
1590                 nullable, filtered_relation=filtered_relation,
1591             )
1592             reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None
1593             alias = self.join(
1594                 connection, reuse=reuse,
1595                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1596             )
1597             joins.append(alias)
1598             if filtered_relation:
1599                 filtered_relation.path = joins[:]
1600         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)
1601 
1602     def trim_joins(self, targets, joins, path):
1603         """
1604         The 'target' parameter is the final field being joined to, 'joins'
1605         is the full list of join aliases. The 'path' contain the PathInfos
1606         used to create the joins.
1607 
1608         Return the final target field and table alias and the new active
1609         joins.
1610 
1611         Always trim any direct join if the target column is already in the
1612         previous table. Can't trim reverse joins as it's unknown if there's
1613         anything on the other side of the join.
1614         """
1615         joins = joins[:]
1616         for pos, info in enumerate(reversed(path)):
1617             if len(joins) == 1 or not info.direct:
1618                 break
1619             if info.filtered_relation:
1620                 break
1621             join_targets = {t.column for t in info.join_field.foreign_related_fields}
1622             cur_targets = {t.column for t in targets}
1623             if not cur_targets.issubset(join_targets):
1624                 break
1625             targets_dict = {r[1].column: r[0] for r in info.join_field.related_fields if r[1].column in cur_targets}
1626             targets = tuple(targets_dict[t.column] for t in targets)
1627             self.unref_alias(joins.pop())
1628         return targets, joins[-1], joins
1629 
1630     @classmethod
1631     def _gen_col_aliases(cls, exprs):
1632         for expr in exprs:
1633             if isinstance(expr, Col):
1634                 yield expr.alias
1635             else:
1636                 yield from cls._gen_col_aliases(expr.get_source_expressions())
1637 
1638     def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False, simple_col=False):
1639         if not allow_joins and LOOKUP_SEP in name:
1640             raise FieldError("Joined field references are not permitted in this query")
1641         annotation = self.annotations.get(name)
1642         if annotation is not None:
1643             if not allow_joins:
1644                 for alias in self._gen_col_aliases([annotation]):
1645                     if isinstance(self.alias_map[alias], Join):
1646                         raise FieldError(
1647                             'Joined field references are not permitted in '
1648                             'this query'
1649                         )
1650             if summarize:
1651                 # Summarize currently means we are doing an aggregate() query
1652                 # which is executed as a wrapped subquery if any of the
1653                 # aggregate() elements reference an existing annotation. In
1654                 # that case we need to return a Ref to the subquery's annotation.
1655                 return Ref(name, self.annotation_select[name])
1656             else:
1657                 return annotation
1658         else:
1659             field_list = name.split(LOOKUP_SEP)
1660             join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)
1661             targets, final_alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1662             if not allow_joins and len(join_list) > 1:
1663                 raise FieldError('Joined field references are not permitted in this query')
1664             if len(targets) > 1:
1665                 raise FieldError("Referencing multicolumn fields with F() objects "
1666                                  "isn't supported")
1667             # Verify that the last lookup in name is a field or a transform:
1668             # transform_function() raises FieldError if not.
1669             join_info.transform_function(targets[0], final_alias)
1670             if reuse is not None:
1671                 reuse.update(join_list)
1672             col = _get_col(targets[0], join_info.targets[0], join_list[-1], simple_col)
1673             return col
1674 
1675     def split_exclude(self, filter_expr, can_reuse, names_with_path):
1676         """
1677         When doing an exclude against any kind of N-to-many relation, we need
1678         to use a subquery. This method constructs the nested query, given the
1679         original exclude filter (filter_expr) and the portion up to the first
1680         N-to-many relation field.
1681 
1682         For example, if the origin filter is ~Q(child__name='foo'), filter_expr
1683         is ('child__name', 'foo') and can_reuse is a set of joins usable for
1684         filters in the original query.
1685 
1686         We will turn this into equivalent of:
1687             WHERE NOT (pk IN (SELECT parent_id FROM thetable
1688                               WHERE name = 'foo' AND parent_id IS NOT NULL))
1689 
1690         It might be worth it to consider using WHERE NOT EXISTS as that has
1691         saner null handling, and is easier for the backend's optimizer to
1692         handle.
1693         """
1694         filter_lhs, filter_rhs = filter_expr
1695         if isinstance(filter_rhs, F):
1696             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
1697         # Generate the inner query.
1698         query = Query(self.model)
1699         query._filtered_relations = self._filtered_relations
1700         query.add_filter(filter_expr)
1701         query.clear_ordering(True)
1702         # Try to have as simple as possible subquery -> trim leading joins from
1703         # the subquery.
1704         trimmed_prefix, contains_louter = query.trim_start(names_with_path)
1705 
1706         # Add extra check to make sure the selected field will not be null
1707         # since we are adding an IN <subquery> clause. This prevents the
1708         # database from tripping over IN (...,NULL,...) selects and returning
1709         # nothing
1710         col = query.select[0]
1711         select_field = col.target
1712         alias = col.alias
1713         if self.is_nullable(select_field):
1714             lookup_class = select_field.get_lookup('isnull')
1715             lookup = lookup_class(select_field.get_col(alias), False)
1716             query.where.add(lookup, AND)
1717         if alias in can_reuse:
1718             pk = select_field.model._meta.pk
1719             # Need to add a restriction so that outer query's filters are in effect for
1720             # the subquery, too.
1721             query.bump_prefix(self)
1722             lookup_class = select_field.get_lookup('exact')
1723             # Note that the query.select[0].alias is different from alias
1724             # due to bump_prefix above.
1725             lookup = lookup_class(pk.get_col(query.select[0].alias),
1726                                   pk.get_col(alias))
1727             query.where.add(lookup, AND)
1728             query.external_aliases.add(alias)
1729 
1730         condition, needed_inner = self.build_filter(
1731             ('%s__in' % trimmed_prefix, query),
1732             current_negated=True, branch_negated=True, can_reuse=can_reuse)
1733         if contains_louter:
1734             or_null_condition, _ = self.build_filter(
1735                 ('%s__isnull' % trimmed_prefix, True),
1736                 current_negated=True, branch_negated=True, can_reuse=can_reuse)
1737             condition.add(or_null_condition, OR)
1738             # Note that the end result will be:
1739             # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.
1740             # This might look crazy but due to how IN works, this seems to be
1741             # correct. If the IS NOT NULL check is removed then outercol NOT
1742             # IN will return UNKNOWN. If the IS NULL check is removed, then if
1743             # outercol IS NULL we will not match the row.
1744         return condition, needed_inner
1745 
1746     def set_empty(self):
1747         self.where.add(NothingNode(), AND)
1748 
1749     def is_empty(self):
1750         return any(isinstance(c, NothingNode) for c in self.where.children)
1751 
1752     def set_limits(self, low=None, high=None):
1753         """
1754         Adjust the limits on the rows retrieved. Use low/high to set these,
1755         as it makes it more Pythonic to read and write. When the SQL query is
1756         created, convert them to the appropriate offset and limit values.
1757 
1758         Apply any limits passed in here to the existing constraints. Add low
1759         to the current low value and clamp both to any existing high value.
1760         """
1761         if high is not None:
1762             if self.high_mark is not None:
1763                 self.high_mark = min(self.high_mark, self.low_mark + high)
1764             else:
1765                 self.high_mark = self.low_mark + high
1766         if low is not None:
1767             if self.high_mark is not None:
1768                 self.low_mark = min(self.high_mark, self.low_mark + low)
1769             else:
1770                 self.low_mark = self.low_mark + low
1771 
1772         if self.low_mark == self.high_mark:
1773             self.set_empty()
1774 
1775     def clear_limits(self):
1776         """Clear any existing limits."""
1777         self.low_mark, self.high_mark = 0, None
1778 
1779     @property
1780     def is_sliced(self):
1781         return self.low_mark != 0 or self.high_mark is not None
1782 
1783     def has_limit_one(self):
1784         return self.high_mark is not None and (self.high_mark - self.low_mark) == 1
1785 
1786     def can_filter(self):
1787         """
1788         Return True if adding filters to this instance is still possible.
1789 
1790         Typically, this means no limits or offsets have been put on the results.
1791         """
1792         return not self.is_sliced
1793 
1794     def clear_select_clause(self):
1795         """Remove all fields from SELECT clause."""
1796         self.select = ()
1797         self.default_cols = False
1798         self.select_related = False
1799         self.set_extra_mask(())
1800         self.set_annotation_mask(())
1801 
1802     def clear_select_fields(self):
1803         """
1804         Clear the list of fields to select (but not extra_select columns).
1805         Some queryset types completely replace any existing list of select
1806         columns.
1807         """
1808         self.select = ()
1809         self.values_select = ()
1810 
1811     def add_select_col(self, col):
1812         self.select += col,
1813         self.values_select += col.output_field.name,
1814 
1815     def set_select(self, cols):
1816         self.default_cols = False
1817         self.select = tuple(cols)
1818 
1819     def add_distinct_fields(self, *field_names):
1820         """
1821         Add and resolve the given fields to the query's "distinct on" clause.
1822         """
1823         self.distinct_fields = field_names
1824         self.distinct = True
1825 
1826     def add_fields(self, field_names, allow_m2m=True):
1827         """
1828         Add the given (model) fields to the select set. Add the field names in
1829         the order specified.
1830         """
1831         alias = self.get_initial_alias()
1832         opts = self.get_meta()
1833 
1834         try:
1835             cols = []
1836             for name in field_names:
1837                 # Join promotion note - we must not remove any rows here, so
1838                 # if there is no existing joins, use outer join.
1839                 join_info = self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m)
1840                 targets, final_alias, joins = self.trim_joins(
1841                     join_info.targets,
1842                     join_info.joins,
1843                     join_info.path,
1844                 )
1845                 for target in targets:
1846                     cols.append(join_info.transform_function(target, final_alias))
1847             if cols:
1848                 self.set_select(cols)
1849         except MultiJoin:
1850             raise FieldError("Invalid field name: '%s'" % name)
1851         except FieldError:
1852             if LOOKUP_SEP in name:
1853                 # For lookups spanning over relationships, show the error
1854                 # from the model on which the lookup failed.
1855                 raise
1856             else:
1857                 names = sorted([
1858                     *get_field_names_from_opts(opts), *self.extra,
1859                     *self.annotation_select, *self._filtered_relations
1860                 ])
1861                 raise FieldError("Cannot resolve keyword %r into field. "
1862                                  "Choices are: %s" % (name, ", ".join(names)))
1863 
1864     def add_ordering(self, *ordering):
1865         """
1866         Add items from the 'ordering' sequence to the query's "order by"
1867         clause. These items are either field names (not column names) --
1868         possibly with a direction prefix ('-' or '?') -- or OrderBy
1869         expressions.
1870 
1871         If 'ordering' is empty, clear all ordering from the query.
1872         """
1873         errors = []
1874         for item in ordering:
1875             if not hasattr(item, 'resolve_expression') and not ORDER_PATTERN.match(item):
1876                 errors.append(item)
1877             if getattr(item, 'contains_aggregate', False):
1878                 raise FieldError(
1879                     'Using an aggregate in order_by() without also including '
1880                     'it in annotate() is not allowed: %s' % item
1881                 )
1882         if errors:
1883             raise FieldError('Invalid order_by arguments: %s' % errors)
1884         if ordering:
1885             self.order_by += ordering
1886         else:
1887             self.default_ordering = False
1888 
1889     def clear_ordering(self, force_empty):
1890         """
1891         Remove any ordering settings. If 'force_empty' is True, there will be
1892         no ordering in the resulting query (not even the model's default).
1893         """
1894         self.order_by = ()
1895         self.extra_order_by = ()
1896         if force_empty:
1897             self.default_ordering = False
1898 
1899     def set_group_by(self):
1900         """
1901         Expand the GROUP BY clause required by the query.
1902 
1903         This will usually be the set of all non-aggregate fields in the
1904         return data. If the database backend supports grouping by the
1905         primary key, and the query would be equivalent, the optimization
1906         will be made automatically.
1907         """
1908         group_by = list(self.select)
1909         if self.annotation_select:
1910             for alias, annotation in self.annotation_select.items():
1911                 try:
1912                     inspect.getcallargs(annotation.get_group_by_cols, alias=alias)
1913                 except TypeError:
1914                     annotation_class = annotation.__class__
1915                     msg = (
1916                         '`alias=None` must be added to the signature of '
1917                         '%s.%s.get_group_by_cols().'
1918                     ) % (annotation_class.__module__, annotation_class.__qualname__)
1919                     warnings.warn(msg, category=RemovedInDjango40Warning)
1920                     group_by_cols = annotation.get_group_by_cols()
1921                 else:
1922                     group_by_cols = annotation.get_group_by_cols(alias=alias)
1923                 group_by.extend(group_by_cols)
1924         self.group_by = tuple(group_by)
1925 
1926     def add_select_related(self, fields):
1927         """
1928         Set up the select_related data structure so that we only select
1929         certain related models (as opposed to all models, when
1930         self.select_related=True).
1931         """
1932         if isinstance(self.select_related, bool):
1933             field_dict = {}
1934         else:
1935             field_dict = self.select_related
1936         for field in fields:
1937             d = field_dict
1938             for part in field.split(LOOKUP_SEP):
1939                 d = d.setdefault(part, {})
1940         self.select_related = field_dict
1941 
1942     def add_extra(self, select, select_params, where, params, tables, order_by):
1943         """
1944         Add data to the various extra_* attributes for user-created additions
1945         to the query.
1946         """
1947         if select:
1948             # We need to pair any placeholder markers in the 'select'
1949             # dictionary with their parameters in 'select_params' so that
1950             # subsequent updates to the select dictionary also adjust the
1951             # parameters appropriately.
1952             select_pairs = {}
1953             if select_params:
1954                 param_iter = iter(select_params)
1955             else:
1956                 param_iter = iter([])
1957             for name, entry in select.items():
1958                 entry = str(entry)
1959                 entry_params = []
1960                 pos = entry.find("%s")
1961                 while pos != -1:
1962                     if pos == 0 or entry[pos - 1] != '%':
1963                         entry_params.append(next(param_iter))
1964                     pos = entry.find("%s", pos + 2)
1965                 select_pairs[name] = (entry, entry_params)
1966             self.extra.update(select_pairs)
1967         if where or params:
1968             self.where.add(ExtraWhere(where, params), AND)
1969         if tables:
1970             self.extra_tables += tuple(tables)
1971         if order_by:
1972             self.extra_order_by = order_by
1973 
1974     def clear_deferred_loading(self):
1975         """Remove any fields from the deferred loading set."""
1976         self.deferred_loading = (frozenset(), True)
1977 
1978     def add_deferred_loading(self, field_names):
1979         """
1980         Add the given list of model field names to the set of fields to
1981         exclude from loading from the database when automatic column selection
1982         is done. Add the new field names to any existing field names that
1983         are deferred (or removed from any existing field names that are marked
1984         as the only ones for immediate loading).
1985         """
1986         # Fields on related models are stored in the literal double-underscore
1987         # format, so that we can use a set datastructure. We do the foo__bar
1988         # splitting and handling when computing the SQL column names (as part of
1989         # get_columns()).
1990         existing, defer = self.deferred_loading
1991         if defer:
1992             # Add to existing deferred names.
1993             self.deferred_loading = existing.union(field_names), True
1994         else:
1995             # Remove names from the set of any existing "immediate load" names.
1996             self.deferred_loading = existing.difference(field_names), False
1997 
1998     def add_immediate_loading(self, field_names):
1999         """
2000         Add the given list of model field names to the set of fields to
2001         retrieve when the SQL is executed ("immediate loading" fields). The
2002         field names replace any existing immediate loading field names. If
2003         there are field names already specified for deferred loading, remove
2004         those names from the new field_names before storing the new names
2005         for immediate loading. (That is, immediate loading overrides any
2006         existing immediate values, but respects existing deferrals.)
2007         """
2008         existing, defer = self.deferred_loading
2009         field_names = set(field_names)
2010         if 'pk' in field_names:
2011             field_names.remove('pk')
2012             field_names.add(self.get_meta().pk.name)
2013 
2014         if defer:
2015             # Remove any existing deferred names from the current set before
2016             # setting the new names.
2017             self.deferred_loading = field_names.difference(existing), False
2018         else:
2019             # Replace any existing "immediate load" field names.
2020             self.deferred_loading = frozenset(field_names), False
2021 
2022     def get_loaded_field_names(self):
2023         """
2024         If any fields are marked to be deferred, return a dictionary mapping
2025         models to a set of names in those fields that will be loaded. If a
2026         model is not in the returned dictionary, none of its fields are
2027         deferred.
2028 
2029         If no fields are marked for deferral, return an empty dictionary.
2030         """
2031         # We cache this because we call this function multiple times
2032         # (compiler.fill_related_selections, query.iterator)
2033         try:
2034             return self._loaded_field_names_cache
2035         except AttributeError:
2036             collection = {}
2037             self.deferred_to_data(collection, self.get_loaded_field_names_cb)
2038             self._loaded_field_names_cache = collection
2039             return collection
2040 
2041     def get_loaded_field_names_cb(self, target, model, fields):
2042         """Callback used by get_deferred_field_names()."""
2043         target[model] = {f.attname for f in fields}
2044 
2045     def set_annotation_mask(self, names):
2046         """Set the mask of annotations that will be returned by the SELECT."""
2047         if names is None:
2048             self.annotation_select_mask = None
2049         else:
2050             self.annotation_select_mask = set(names)
2051         self._annotation_select_cache = None
2052 
2053     def append_annotation_mask(self, names):
2054         if self.annotation_select_mask is not None:
2055             self.set_annotation_mask(self.annotation_select_mask.union(names))
2056 
2057     def set_extra_mask(self, names):
2058         """
2059         Set the mask of extra select items that will be returned by SELECT.
2060         Don't remove them from the Query since they might be used later.
2061         """
2062         if names is None:
2063             self.extra_select_mask = None
2064         else:
2065             self.extra_select_mask = set(names)
2066         self._extra_select_cache = None
2067 
2068     def set_values(self, fields):
2069         self.select_related = False
2070         self.clear_deferred_loading()
2071         self.clear_select_fields()
2072 
2073         if self.group_by is True:
2074             self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
2075             self.set_group_by()
2076             self.clear_select_fields()
2077 
2078         if fields:
2079             field_names = []
2080             extra_names = []
2081             annotation_names = []
2082             if not self.extra and not self.annotations:
2083                 # Shortcut - if there are no extra or annotations, then
2084                 # the values() clause must be just field names.
2085                 field_names = list(fields)
2086             else:
2087                 self.default_cols = False
2088                 for f in fields:
2089                     if f in self.extra_select:
2090                         extra_names.append(f)
2091                     elif f in self.annotation_select:
2092                         annotation_names.append(f)
2093                     else:
2094                         field_names.append(f)
2095             self.set_extra_mask(extra_names)
2096             self.set_annotation_mask(annotation_names)
2097         else:
2098             field_names = [f.attname for f in self.model._meta.concrete_fields]
2099 
2100         self.values_select = tuple(field_names)
2101         self.add_fields(field_names, True)
2102 
2103     @property
2104     def annotation_select(self):
2105         """
2106         Return the dictionary of aggregate columns that are not masked and
2107         should be used in the SELECT clause. Cache this result for performance.
2108         """
2109         if self._annotation_select_cache is not None:
2110             return self._annotation_select_cache
2111         elif not self.annotations:
2112             return {}
2113         elif self.annotation_select_mask is not None:
2114             self._annotation_select_cache = {
2115                 k: v for k, v in self.annotations.items()
2116                 if k in self.annotation_select_mask
2117             }
2118             return self._annotation_select_cache
2119         else:
2120             return self.annotations
2121 
2122     @property
2123     def extra_select(self):
2124         if self._extra_select_cache is not None:
2125             return self._extra_select_cache
2126         if not self.extra:
2127             return {}
2128         elif self.extra_select_mask is not None:
2129             self._extra_select_cache = {
2130                 k: v for k, v in self.extra.items()
2131                 if k in self.extra_select_mask
2132             }
2133             return self._extra_select_cache
2134         else:
2135             return self.extra
2136 
2137     def trim_start(self, names_with_path):
2138         """
2139         Trim joins from the start of the join path. The candidates for trim
2140         are the PathInfos in names_with_path structure that are m2m joins.
2141 
2142         Also set the select column so the start matches the join.
2143 
2144         This method is meant to be used for generating the subquery joins &
2145         cols in split_exclude().
2146 
2147         Return a lookup usable for doing outerq.filter(lookup=self) and a
2148         boolean indicating if the joins in the prefix contain a LEFT OUTER join.
2149         _"""
2150         all_paths = []
2151         for _, paths in names_with_path:
2152             all_paths.extend(paths)
2153         contains_louter = False
2154         # Trim and operate only on tables that were generated for
2155         # the lookup part of the query. That is, avoid trimming
2156         # joins generated for F() expressions.
2157         lookup_tables = [
2158             t for t in self.alias_map
2159             if t in self._lookup_joins or t == self.base_table
2160         ]
2161         for trimmed_paths, path in enumerate(all_paths):
2162             if path.m2m:
2163                 break
2164             if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type == LOUTER:
2165                 contains_louter = True
2166             alias = lookup_tables[trimmed_paths]
2167             self.unref_alias(alias)
2168         # The path.join_field is a Rel, lets get the other side's field
2169         join_field = path.join_field.field
2170         # Build the filter prefix.
2171         paths_in_prefix = trimmed_paths
2172         trimmed_prefix = []
2173         for name, path in names_with_path:
2174             if paths_in_prefix - len(path) < 0:
2175                 break
2176             trimmed_prefix.append(name)
2177             paths_in_prefix -= len(path)
2178         trimmed_prefix.append(
2179             join_field.foreign_related_fields[0].name)
2180         trimmed_prefix = LOOKUP_SEP.join(trimmed_prefix)
2181         # Lets still see if we can trim the first join from the inner query
2182         # (that is, self). We can't do this for:
2183         # - LEFT JOINs because we would miss those rows that have nothing on
2184         #   the outer side,
2185         # - INNER JOINs from filtered relations because we would miss their
2186         #   filters.
2187         first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]
2188         if first_join.join_type != LOUTER and not first_join.filtered_relation:
2189             select_fields = [r[0] for r in join_field.related_fields]
2190             select_alias = lookup_tables[trimmed_paths + 1]
2191             self.unref_alias(lookup_tables[trimmed_paths])
2192             extra_restriction = join_field.get_extra_restriction(
2193                 self.where_class, None, lookup_tables[trimmed_paths + 1])
2194             if extra_restriction:
2195                 self.where.add(extra_restriction, AND)
2196         else:
2197             # TODO: It might be possible to trim more joins from the start of the
2198             # inner query if it happens to have a longer join chain containing the
2199             # values in select_fields. Lets punt this one for now.
2200             select_fields = [r[1] for r in join_field.related_fields]
2201             select_alias = lookup_tables[trimmed_paths]
2202         # The found starting point is likely a Join instead of a BaseTable reference.
2203         # But the first entry in the query's FROM clause must not be a JOIN.
2204         for table in self.alias_map:
2205             if self.alias_refcount[table] > 0:
2206                 self.alias_map[table] = BaseTable(self.alias_map[table].table_name, table)
2207                 break
2208         self.set_select([f.get_col(select_alias) for f in select_fields])
2209         return trimmed_prefix, contains_louter
2210 
2211     def is_nullable(self, field):
2212         """
2213         Check if the given field should be treated as nullable.
2214 
2215         Some backends treat '' as null and Django treats such fields as
2216         nullable for those backends. In such situations field.null can be
2217         False even if we should treat the field as nullable.
2218         """
2219         # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have
2220         # (nor should it have) knowledge of which connection is going to be
2221         # used. The proper fix would be to defer all decisions where
2222         # is_nullable() is needed to the compiler stage, but that is not easy
2223         # to do currently.
2224         return (
2225             connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
2226             field.empty_strings_allowed
2227         ) or field.null

</code><intended_behavior>Modifications in the `Query` class are necessary to support translating expressions received from `QuerySet.filter()` into valid SQL. This might include extending the `build_filter` and related methods to detect when an argument is an expression rather than a simple filter. The logic should be capable of parsing these expressions, integrating their logic into the SQL where clause, and handling any argument values accordingly. This enhancement should retain the class's current functionality for cases that do not involve the newly supported expressions.</intended_behavior>]
2025-10-15 16:41:15.277 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-15 16:41:15.277 | INFO     | Search-only: skipping patch selection
2025-10-15 16:41:15.408 | INFO     | Task django__django-8119 completed successfully.
2025-10-15 16:41:15.409 | INFO     | No patch generated. You can try running ACR again.
