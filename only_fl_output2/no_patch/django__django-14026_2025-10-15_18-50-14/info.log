2025-10-15 18:50:15.116 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-15 18:50:18.074 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=196, output_tokens=12, cost=0.002320
2025-10-15 18:50:18.075 | INFO     | Test agent decides that the issue statement does not contain reproduction steps; skipping reproducer tracing
2025-10-15 18:50:18.078 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 18:50:30.872 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=505, output_tokens=446, cost=0.018430
2025-10-15 18:50:30.880 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 18:50:33.810 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=800, output_tokens=50, cost=0.009500
2025-10-15 18:50:33.811 | DEBUG    | Extracted a valid json.
2025-10-15 18:50:33.811 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_class(\"Sum\")",
        "search_method(\"aggregate\")",
        "search_method(\"annotate\")",
        "search_code(\"COALESCE\")"
    ],
    "bug_locations": []
}
2025-10-15 18:50:33.881 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-15 18:50:33.881 | DEBUG    | <Agent search> Analyzing search results.
2025-10-15 18:50:53.898 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2576, output_tokens=761, cost=0.048590
2025-10-15 18:50:53.915 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 18:51:04.019 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3553, output_tokens=345, cost=0.045880
2025-10-15 18:51:04.028 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 18:51:12.155 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=699, output_tokens=238, cost=0.014130
2025-10-15 18:51:12.156 | DEBUG    | Extracted a valid json.
2025-10-15 18:51:12.156 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations": [
        {
            "file": "django/db/models/aggregates.py",
            "class": "Sum",
            "method": "",
            "intended_behavior": "Modify the `Sum` class to accept an optional parameter named `default` that specifies the default value to use when no rows match the aggregation criteria, resulting in a `NULL`. Preserve the existing functionality and ensure that if the `default` parameter is not provided, the behavior remains unchanged."
        },
        {
            "file": "django/db/models/sql/query.py",
            "class": "Query",
            "method": "add_annotation",
            "intended_behavior": "Enhance the method to detect if an aggregate expression, such as one created by `Sum`, includes a `default` parameter. Adjust the SQL compilation process to wrap the aggregation expression in a `COALESCE` function, using the specified default value when the aggregation result would otherwise be `NULL`. Ensure that this change does not interfere with other parts of the Django ORM that might rely on the existing behavior of returning `NULL` for empty aggregates."
        }
    ]
}
2025-10-15 18:51:12.177 | DEBUG    | Bug location extracted successfully: [<file>django/db/models/aggregates.py</file>
<class>Sum</class>
<method>None</method>
<code>
142 class Sum(FixDurationInputMixin, Aggregate):
143     function = 'SUM'
144     name = 'Sum'
145     allow_distinct = True

</code><intended_behavior>Modify the `Sum` class to accept an optional parameter named `default` that specifies the default value to use when no rows match the aggregation criteria, resulting in a `NULL`. Preserve the existing functionality and ensure that if the `default` parameter is not provided, the behavior remains unchanged.</intended_behavior>, <file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>add_annotation</method>
<code>
1027     def add_annotation(self, annotation, alias, is_summary=False, select=True):
1028         """Add a single annotation expression to the Query."""
1029         annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
1030                                                    summarize=is_summary)
1031         if select:
1032             self.append_annotation_mask([alias])
1033         else:
1034             self.set_annotation_mask(set(self.annotation_select).difference({alias}))
1035         self.annotations[alias] = annotation

</code><intended_behavior>Enhance the method to detect if an aggregate expression, such as one created by `Sum`, includes a `default` parameter. Adjust the SQL compilation process to wrap the aggregation expression in a `COALESCE` function, using the specified default value when the aggregation result would otherwise be `NULL`. Ensure that this change does not interfere with other parts of the Django ORM that might rely on the existing behavior of returning `NULL` for empty aggregates.</intended_behavior>, <file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>None</method>
<code>
139 class Query(BaseExpression):
140     """A single SQL query."""
141 
142     alias_prefix = 'T'
143     subq_aliases = frozenset([alias_prefix])
144 
145     compiler = 'SQLCompiler'
146 
147     def __init__(self, model, where=WhereNode, alias_cols=True):
148         self.model = model
149         self.alias_refcount = {}
150         # alias_map is the most important data structure regarding joins.
151         # It's used for recording which joins exist in the query and what
152         # types they are. The key is the alias of the joined table (possibly
153         # the table name) and the value is a Join-like object (see
154         # sql.datastructures.Join for more information).
155         self.alias_map = {}
156         # Whether to provide alias to columns during reference resolving.
157         self.alias_cols = alias_cols
158         # Sometimes the query contains references to aliases in outer queries (as
159         # a result of split_exclude). Correct alias quoting needs to know these
160         # aliases too.
161         # Map external tables to whether they are aliased.
162         self.external_aliases = {}
163         self.table_map = {}     # Maps table names to list of aliases.
164         self.default_cols = True
165         self.default_ordering = True
166         self.standard_ordering = True
167         self.used_aliases = set()
168         self.filter_is_sticky = False
169         self.subquery = False
170 
171         # SQL-related attributes
172         # Select and related select clauses are expressions to use in the
173         # SELECT clause of the query.
174         # The select is used for cases where we want to set up the select
175         # clause to contain other than default fields (values(), subqueries...)
176         # Note that annotations go to annotations dictionary.
177         self.select = ()
178         self.where = where()
179         self.where_class = where
180         # The group_by attribute can have one of the following forms:
181         #  - None: no group by at all in the query
182         #  - A tuple of expressions: group by (at least) those expressions.
183         #    String refs are also allowed for now.
184         #  - True: group by all select fields of the model
185         # See compiler.get_group_by() for details.
186         self.group_by = None
187         self.order_by = ()
188         self.low_mark, self.high_mark = 0, None  # Used for offset/limit
189         self.distinct = False
190         self.distinct_fields = ()
191         self.select_for_update = False
192         self.select_for_update_nowait = False
193         self.select_for_update_skip_locked = False
194         self.select_for_update_of = ()
195         self.select_for_no_key_update = False
196 
197         self.select_related = False
198         # Arbitrary limit for select_related to prevents infinite recursion.
199         self.max_depth = 5
200 
201         # Holds the selects defined by a call to values() or values_list()
202         # excluding annotation_select and extra_select.
203         self.values_select = ()
204 
205         # SQL annotation-related attributes
206         self.annotations = {}  # Maps alias -> Annotation Expression
207         self.annotation_select_mask = None
208         self._annotation_select_cache = None
209 
210         # Set combination attributes
211         self.combinator = None
212         self.combinator_all = False
213         self.combined_queries = ()
214 
215         # These are for extensions. The contents are more or less appended
216         # verbatim to the appropriate clause.
217         self.extra = {}  # Maps col_alias -> (col_sql, params).
218         self.extra_select_mask = None
219         self._extra_select_cache = None
220 
221         self.extra_tables = ()
222         self.extra_order_by = ()
223 
224         # A tuple that is a set of model field names and either True, if these
225         # are the fields to defer, or False if these are the only fields to
226         # load.
227         self.deferred_loading = (frozenset(), True)
228 
229         self._filtered_relations = {}
230 
231         self.explain_query = False
232         self.explain_format = None
233         self.explain_options = {}
234 
235     @property
236     def output_field(self):
237         if len(self.select) == 1:
238             select = self.select[0]
239             return getattr(select, 'target', None) or select.field
240         elif len(self.annotation_select) == 1:
241             return next(iter(self.annotation_select.values())).output_field
242 
243     @property
244     def has_select_fields(self):
245         return bool(self.select or self.annotation_select_mask or self.extra_select_mask)
246 
247     @cached_property
248     def base_table(self):
249         for alias in self.alias_map:
250             return alias
251 
252     def __str__(self):
253         """
254         Return the query as a string of SQL with the parameter values
255         substituted in (use sql_with_params() to see the unsubstituted string).
256 
257         Parameter values won't necessarily be quoted correctly, since that is
258         done by the database interface at execution time.
259         """
260         sql, params = self.sql_with_params()
261         return sql % params
262 
263     def sql_with_params(self):
264         """
265         Return the query as an SQL string and the parameters that will be
266         substituted into the query.
267         """
268         return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()
269 
270     def __deepcopy__(self, memo):
271         """Limit the amount of work when a Query is deepcopied."""
272         result = self.clone()
273         memo[id(self)] = result
274         return result
275 
276     def get_compiler(self, using=None, connection=None, elide_empty=True):
277         if using is None and connection is None:
278             raise ValueError("Need either using or connection")
279         if using:
280             connection = connections[using]
281         return connection.ops.compiler(self.compiler)(self, connection, using, elide_empty)
282 
283     def get_meta(self):
284         """
285         Return the Options instance (the model._meta) from which to start
286         processing. Normally, this is self.model._meta, but it can be changed
287         by subclasses.
288         """
289         return self.model._meta
290 
291     def clone(self):
292         """
293         Return a copy of the current Query. A lightweight alternative to
294         to deepcopy().
295         """
296         obj = Empty()
297         obj.__class__ = self.__class__
298         # Copy references to everything.
299         obj.__dict__ = self.__dict__.copy()
300         # Clone attributes that can't use shallow copy.
301         obj.alias_refcount = self.alias_refcount.copy()
302         obj.alias_map = self.alias_map.copy()
303         obj.external_aliases = self.external_aliases.copy()
304         obj.table_map = self.table_map.copy()
305         obj.where = self.where.clone()
306         obj.annotations = self.annotations.copy()
307         if self.annotation_select_mask is None:
308             obj.annotation_select_mask = None
309         else:
310             obj.annotation_select_mask = self.annotation_select_mask.copy()
311         obj.combined_queries = tuple(query.clone() for query in self.combined_queries)
312         # _annotation_select_cache cannot be copied, as doing so breaks the
313         # (necessary) state in which both annotations and
314         # _annotation_select_cache point to the same underlying objects.
315         # It will get re-populated in the cloned queryset the next time it's
316         # used.
317         obj._annotation_select_cache = None
318         obj.extra = self.extra.copy()
319         if self.extra_select_mask is None:
320             obj.extra_select_mask = None
321         else:
322             obj.extra_select_mask = self.extra_select_mask.copy()
323         if self._extra_select_cache is None:
324             obj._extra_select_cache = None
325         else:
326             obj._extra_select_cache = self._extra_select_cache.copy()
327         if self.select_related is not False:
328             # Use deepcopy because select_related stores fields in nested
329             # dicts.
330             obj.select_related = copy.deepcopy(obj.select_related)
331         if 'subq_aliases' in self.__dict__:
332             obj.subq_aliases = self.subq_aliases.copy()
333         obj.used_aliases = self.used_aliases.copy()
334         obj._filtered_relations = self._filtered_relations.copy()
335         # Clear the cached_property
336         try:
337             del obj.base_table
338         except AttributeError:
339             pass
340         return obj
341 
342     def chain(self, klass=None):
343         """
344         Return a copy of the current Query that's ready for another operation.
345         The klass argument changes the type of the Query, e.g. UpdateQuery.
346         """
347         obj = self.clone()
348         if klass and obj.__class__ != klass:
349             obj.__class__ = klass
350         if not obj.filter_is_sticky:
351             obj.used_aliases = set()
352         obj.filter_is_sticky = False
353         if hasattr(obj, '_setup_query'):
354             obj._setup_query()
355         return obj
356 
357     def relabeled_clone(self, change_map):
358         clone = self.clone()
359         clone.change_aliases(change_map)
360         return clone
361 
362     def _get_col(self, target, field, alias):
363         if not self.alias_cols:
364             alias = None
365         return target.get_col(alias, field)
366 
367     def rewrite_cols(self, annotation, col_cnt):
368         # We must make sure the inner query has the referred columns in it.
369         # If we are aggregating over an annotation, then Django uses Ref()
370         # instances to note this. However, if we are annotating over a column
371         # of a related model, then it might be that column isn't part of the
372         # SELECT clause of the inner query, and we must manually make sure
373         # the column is selected. An example case is:
374         #    .aggregate(Sum('author__awards'))
375         # Resolving this expression results in a join to author, but there
376         # is no guarantee the awards column of author is in the select clause
377         # of the query. Thus we must manually add the column to the inner
378         # query.
379         orig_exprs = annotation.get_source_expressions()
380         new_exprs = []
381         for expr in orig_exprs:
382             # FIXME: These conditions are fairly arbitrary. Identify a better
383             # method of having expressions decide which code path they should
384             # take.
385             if isinstance(expr, Ref):
386                 # Its already a Ref to subquery (see resolve_ref() for
387                 # details)
388                 new_exprs.append(expr)
389             elif isinstance(expr, (WhereNode, Lookup)):
390                 # Decompose the subexpressions further. The code here is
391                 # copied from the else clause, but this condition must appear
392                 # before the contains_aggregate/is_summary condition below.
393                 new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
394                 new_exprs.append(new_expr)
395             else:
396                 # Reuse aliases of expressions already selected in subquery.
397                 for col_alias, selected_annotation in self.annotation_select.items():
398                     if selected_annotation is expr:
399                         new_expr = Ref(col_alias, expr)
400                         break
401                 else:
402                     # An expression that is not selected the subquery.
403                     if isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):
404                         # Reference column or another aggregate. Select it
405                         # under a non-conflicting alias.
406                         col_cnt += 1
407                         col_alias = '__col%d' % col_cnt
408                         self.annotations[col_alias] = expr
409                         self.append_annotation_mask([col_alias])
410                         new_expr = Ref(col_alias, expr)
411                     else:
412                         # Some other expression not referencing database values
413                         # directly. Its subexpression might contain Cols.
414                         new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
415                 new_exprs.append(new_expr)
416         annotation.set_source_expressions(new_exprs)
417         return annotation, col_cnt
418 
419     def get_aggregation(self, using, added_aggregate_names):
420         """
421         Return the dictionary with the values of the existing aggregations.
422         """
423         if not self.annotation_select:
424             return {}
425         existing_annotations = [
426             annotation for alias, annotation
427             in self.annotations.items()
428             if alias not in added_aggregate_names
429         ]
430         # Decide if we need to use a subquery.
431         #
432         # Existing annotations would cause incorrect results as get_aggregation()
433         # must produce just one result and thus must not use GROUP BY. But we
434         # aren't smart enough to remove the existing annotations from the
435         # query, so those would force us to use GROUP BY.
436         #
437         # If the query has limit or distinct, or uses set operations, then
438         # those operations must be done in a subquery so that the query
439         # aggregates on the limit and/or distinct results instead of applying
440         # the distinct and limit after the aggregation.
441         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or
442                 self.distinct or self.combinator):
443             from django.db.models.sql.subqueries import AggregateQuery
444             inner_query = self.clone()
445             inner_query.subquery = True
446             outer_query = AggregateQuery(self.model, inner_query)
447             inner_query.select_for_update = False
448             inner_query.select_related = False
449             inner_query.set_annotation_mask(self.annotation_select)
450             # Queries with distinct_fields need ordering and when a limit is
451             # applied we must take the slice from the ordered query. Otherwise
452             # no need for ordering.
453             inner_query.clear_ordering(force=False)
454             if not inner_query.distinct:
455                 # If the inner query uses default select and it has some
456                 # aggregate annotations, then we must make sure the inner
457                 # query is grouped by the main model's primary key. However,
458                 # clearing the select clause can alter results if distinct is
459                 # used.
460                 has_existing_aggregate_annotations = any(
461                     annotation for annotation in existing_annotations
462                     if getattr(annotation, 'contains_aggregate', True)
463                 )
464                 if inner_query.default_cols and has_existing_aggregate_annotations:
465                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
466                 inner_query.default_cols = False
467 
468             relabels = {t: 'subquery' for t in inner_query.alias_map}
469             relabels[None] = 'subquery'
470             # Remove any aggregates marked for reduction from the subquery
471             # and move them to the outer AggregateQuery.
472             col_cnt = 0
473             for alias, expression in list(inner_query.annotation_select.items()):
474                 annotation_select_mask = inner_query.annotation_select_mask
475                 if expression.is_summary:
476                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
477                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
478                     del inner_query.annotations[alias]
479                     annotation_select_mask.remove(alias)
480                 # Make sure the annotation_select wont use cached results.
481                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)
482             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
483                 # In case of Model.objects[0:3].count(), there would be no
484                 # field selected in the inner query, yet we must use a subquery.
485                 # So, make sure at least one field is selected.
486                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
487         else:
488             outer_query = self
489             self.select = ()
490             self.default_cols = False
491             self.extra = {}
492 
493         empty_aggregate_result = [
494             expression.empty_aggregate_value
495             for expression in outer_query.annotation_select.values()
496         ]
497         elide_empty = not any(result is NotImplemented for result in empty_aggregate_result)
498         outer_query.clear_ordering(force=True)
499         outer_query.clear_limits()
500         outer_query.select_for_update = False
501         outer_query.select_related = False
502         compiler = outer_query.get_compiler(using, elide_empty=elide_empty)
503         result = compiler.execute_sql(SINGLE)
504         if result is None:
505             result = empty_aggregate_result
506 
507         converters = compiler.get_converters(outer_query.annotation_select.values())
508         result = next(compiler.apply_converters((result,), converters))
509 
510         return dict(zip(outer_query.annotation_select, result))
511 
512     def get_count(self, using):
513         """
514         Perform a COUNT() query using the current filter constraints.
515         """
516         obj = self.clone()
517         obj.add_annotation(Count('*'), alias='__count', is_summary=True)
518         number = obj.get_aggregation(using, ['__count'])['__count']
519         if number is None:
520             number = 0
521         return number
522 
523     def has_filters(self):
524         return self.where
525 
526     def exists(self, using, limit=True):
527         q = self.clone()
528         if not q.distinct:
529             if q.group_by is True:
530                 q.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
531                 # Disable GROUP BY aliases to avoid orphaning references to the
532                 # SELECT clause which is about to be cleared.
533                 q.set_group_by(allow_aliases=False)
534             q.clear_select_clause()
535         if q.combined_queries and q.combinator == 'union':
536             limit_combined = connections[using].features.supports_slicing_ordering_in_compound
537             q.combined_queries = tuple(
538                 combined_query.exists(using, limit=limit_combined)
539                 for combined_query in q.combined_queries
540             )
541         q.clear_ordering(force=True)
542         if limit:
543             q.set_limits(high=1)
544         q.add_extra({'a': 1}, None, None, None, None, None)
545         q.set_extra_mask(['a'])
546         return q
547 
548     def has_results(self, using):
549         q = self.exists(using)
550         compiler = q.get_compiler(using=using)
551         return compiler.has_results()
552 
553     def explain(self, using, format=None, **options):
554         q = self.clone()
555         q.explain_query = True
556         q.explain_format = format
557         q.explain_options = options
558         compiler = q.get_compiler(using=using)
559         return '\n'.join(compiler.explain_query())
560 
561     def combine(self, rhs, connector):
562         """
563         Merge the 'rhs' query into the current one (with any 'rhs' effects
564         being applied *after* (that is, "to the right of") anything in the
565         current query. 'rhs' is not modified during a call to this function.
566 
567         The 'connector' parameter describes how to connect filters from the
568         'rhs' query.
569         """
570         if self.model != rhs.model:
571             raise TypeError('Cannot combine queries on two different base models.')
572         if self.is_sliced:
573             raise TypeError('Cannot combine queries once a slice has been taken.')
574         if self.distinct != rhs.distinct:
575             raise TypeError('Cannot combine a unique query with a non-unique query.')
576         if self.distinct_fields != rhs.distinct_fields:
577             raise TypeError('Cannot combine queries with different distinct fields.')
578 
579         # Work out how to relabel the rhs aliases, if necessary.
580         change_map = {}
581         conjunction = (connector == AND)
582 
583         # Determine which existing joins can be reused. When combining the
584         # query with AND we must recreate all joins for m2m filters. When
585         # combining with OR we can reuse joins. The reason is that in AND
586         # case a single row can't fulfill a condition like:
587         #     revrel__col=1 & revrel__col=2
588         # But, there might be two different related rows matching this
589         # condition. In OR case a single True is enough, so single row is
590         # enough, too.
591         #
592         # Note that we will be creating duplicate joins for non-m2m joins in
593         # the AND case. The results will be correct but this creates too many
594         # joins. This is something that could be fixed later on.
595         reuse = set() if conjunction else set(self.alias_map)
596         # Base table must be present in the query - this is the same
597         # table on both sides.
598         self.get_initial_alias()
599         joinpromoter = JoinPromoter(connector, 2, False)
600         joinpromoter.add_votes(
601             j for j in self.alias_map if self.alias_map[j].join_type == INNER)
602         rhs_votes = set()
603         # Now, add the joins from rhs query into the new query (skipping base
604         # table).
605         rhs_tables = list(rhs.alias_map)[1:]
606         for alias in rhs_tables:
607             join = rhs.alias_map[alias]
608             # If the left side of the join was already relabeled, use the
609             # updated alias.
610             join = join.relabeled_clone(change_map)
611             new_alias = self.join(join, reuse=reuse)
612             if join.join_type == INNER:
613                 rhs_votes.add(new_alias)
614             # We can't reuse the same join again in the query. If we have two
615             # distinct joins for the same connection in rhs query, then the
616             # combined query must have two joins, too.
617             reuse.discard(new_alias)
618             if alias != new_alias:
619                 change_map[alias] = new_alias
620             if not rhs.alias_refcount[alias]:
621                 # The alias was unused in the rhs query. Unref it so that it
622                 # will be unused in the new query, too. We have to add and
623                 # unref the alias so that join promotion has information of
624                 # the join type for the unused alias.
625                 self.unref_alias(new_alias)
626         joinpromoter.add_votes(rhs_votes)
627         joinpromoter.update_join_types(self)
628 
629         # Combine subqueries aliases to ensure aliases relabelling properly
630         # handle subqueries when combining where and select clauses.
631         self.subq_aliases |= rhs.subq_aliases
632 
633         # Now relabel a copy of the rhs where-clause and add it to the current
634         # one.
635         w = rhs.where.clone()
636         w.relabel_aliases(change_map)
637         self.where.add(w, connector)
638 
639         # Selection columns and extra extensions are those provided by 'rhs'.
640         if rhs.select:
641             self.set_select([col.relabeled_clone(change_map) for col in rhs.select])
642         else:
643             self.select = ()
644 
645         if connector == OR:
646             # It would be nice to be able to handle this, but the queries don't
647             # really make sense (or return consistent value sets). Not worth
648             # the extra complexity when you can write a real query instead.
649             if self.extra and rhs.extra:
650                 raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")
651         self.extra.update(rhs.extra)
652         extra_select_mask = set()
653         if self.extra_select_mask is not None:
654             extra_select_mask.update(self.extra_select_mask)
655         if rhs.extra_select_mask is not None:
656             extra_select_mask.update(rhs.extra_select_mask)
657         if extra_select_mask:
658             self.set_extra_mask(extra_select_mask)
659         self.extra_tables += rhs.extra_tables
660 
661         # Ordering uses the 'rhs' ordering, unless it has none, in which case
662         # the current ordering is used.
663         self.order_by = rhs.order_by or self.order_by
664         self.extra_order_by = rhs.extra_order_by or self.extra_order_by
665 
666     def deferred_to_data(self, target, callback):
667         """
668         Convert the self.deferred_loading data structure to an alternate data
669         structure, describing the field that *will* be loaded. This is used to
670         compute the columns to select from the database and also by the
671         QuerySet class to work out which fields are being initialized on each
672         model. Models that have all their fields included aren't mentioned in
673         the result, only those that have field restrictions in place.
674 
675         The "target" parameter is the instance that is populated (in place).
676         The "callback" is a function that is called whenever a (model, field)
677         pair need to be added to "target". It accepts three parameters:
678         "target", and the model and list of fields being added for that model.
679         """
680         field_names, defer = self.deferred_loading
681         if not field_names:
682             return
683         orig_opts = self.get_meta()
684         seen = {}
685         must_include = {orig_opts.concrete_model: {orig_opts.pk}}
686         for field_name in field_names:
687             parts = field_name.split(LOOKUP_SEP)
688             cur_model = self.model._meta.concrete_model
689             opts = orig_opts
690             for name in parts[:-1]:
691                 old_model = cur_model
692                 if name in self._filtered_relations:
693                     name = self._filtered_relations[name].relation_name
694                 source = opts.get_field(name)
695                 if is_reverse_o2o(source):
696                     cur_model = source.related_model
697                 else:
698                     cur_model = source.remote_field.model
699                 opts = cur_model._meta
700                 # Even if we're "just passing through" this model, we must add
701                 # both the current model's pk and the related reference field
702                 # (if it's not a reverse relation) to the things we select.
703                 if not is_reverse_o2o(source):
704                     must_include[old_model].add(source)
705                 add_to_dict(must_include, cur_model, opts.pk)
706             field = opts.get_field(parts[-1])
707             is_reverse_object = field.auto_created and not field.concrete
708             model = field.related_model if is_reverse_object else field.model
709             model = model._meta.concrete_model
710             if model == opts.model:
711                 model = cur_model
712             if not is_reverse_o2o(field):
713                 add_to_dict(seen, model, field)
714 
715         if defer:
716             # We need to load all fields for each model, except those that
717             # appear in "seen" (for all models that appear in "seen"). The only
718             # slight complexity here is handling fields that exist on parent
719             # models.
720             workset = {}
721             for model, values in seen.items():
722                 for field in model._meta.local_fields:
723                     if field not in values:
724                         m = field.model._meta.concrete_model
725                         add_to_dict(workset, m, field)
726             for model, values in must_include.items():
727                 # If we haven't included a model in workset, we don't add the
728                 # corresponding must_include fields for that model, since an
729                 # empty set means "include all fields". That's why there's no
730                 # "else" branch here.
731                 if model in workset:
732                     workset[model].update(values)
733             for model, values in workset.items():
734                 callback(target, model, values)
735         else:
736             for model, values in must_include.items():
737                 if model in seen:
738                     seen[model].update(values)
739                 else:
740                     # As we've passed through this model, but not explicitly
741                     # included any fields, we have to make sure it's mentioned
742                     # so that only the "must include" fields are pulled in.
743                     seen[model] = values
744             # Now ensure that every model in the inheritance chain is mentioned
745             # in the parent list. Again, it must be mentioned to ensure that
746             # only "must include" fields are pulled in.
747             for model in orig_opts.get_parent_list():
748                 seen.setdefault(model, set())
749             for model, values in seen.items():
750                 callback(target, model, values)
751 
752     def table_alias(self, table_name, create=False, filtered_relation=None):
753         """
754         Return a table alias for the given table_name and whether this is a
755         new alias or not.
756 
757         If 'create' is true, a new alias is always created. Otherwise, the
758         most recently created alias for the table (if one exists) is reused.
759         """
760         alias_list = self.table_map.get(table_name)
761         if not create and alias_list:
762             alias = alias_list[0]
763             self.alias_refcount[alias] += 1
764             return alias, False
765 
766         # Create a new alias for this table.
767         if alias_list:
768             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
769             alias_list.append(alias)
770         else:
771             # The first occurrence of a table uses the table name directly.
772             alias = filtered_relation.alias if filtered_relation is not None else table_name
773             self.table_map[table_name] = [alias]
774         self.alias_refcount[alias] = 1
775         return alias, True
776 
777     def ref_alias(self, alias):
778         """Increases the reference count for this alias."""
779         self.alias_refcount[alias] += 1
780 
781     def unref_alias(self, alias, amount=1):
782         """Decreases the reference count for this alias."""
783         self.alias_refcount[alias] -= amount
784 
785     def promote_joins(self, aliases):
786         """
787         Promote recursively the join type of given aliases and its children to
788         an outer join. If 'unconditional' is False, only promote the join if
789         it is nullable or the parent join is an outer join.
790 
791         The children promotion is done to avoid join chains that contain a LOUTER
792         b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,
793         then we must also promote b->c automatically, or otherwise the promotion
794         of a->b doesn't actually change anything in the query results.
795         """
796         aliases = list(aliases)
797         while aliases:
798             alias = aliases.pop(0)
799             if self.alias_map[alias].join_type is None:
800                 # This is the base table (first FROM entry) - this table
801                 # isn't really joined at all in the query, so we should not
802                 # alter its join type.
803                 continue
804             # Only the first alias (skipped above) should have None join_type
805             assert self.alias_map[alias].join_type is not None
806             parent_alias = self.alias_map[alias].parent_alias
807             parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER
808             already_louter = self.alias_map[alias].join_type == LOUTER
809             if ((self.alias_map[alias].nullable or parent_louter) and
810                     not already_louter):
811                 self.alias_map[alias] = self.alias_map[alias].promote()
812                 # Join type of 'alias' changed, so re-examine all aliases that
813                 # refer to this one.
814                 aliases.extend(
815                     join for join in self.alias_map
816                     if self.alias_map[join].parent_alias == alias and join not in aliases
817                 )
818 
819     def demote_joins(self, aliases):
820         """
821         Change join type from LOUTER to INNER for all joins in aliases.
822 
823         Similarly to promote_joins(), this method must ensure no join chains
824         containing first an outer, then an inner join are generated. If we
825         are demoting b->c join in chain a LOUTER b LOUTER c then we must
826         demote a->b automatically, or otherwise the demotion of b->c doesn't
827         actually change anything in the query results. .
828         """
829         aliases = list(aliases)
830         while aliases:
831             alias = aliases.pop(0)
832             if self.alias_map[alias].join_type == LOUTER:
833                 self.alias_map[alias] = self.alias_map[alias].demote()
834                 parent_alias = self.alias_map[alias].parent_alias
835                 if self.alias_map[parent_alias].join_type == INNER:
836                     aliases.append(parent_alias)
837 
838     def reset_refcounts(self, to_counts):
839         """
840         Reset reference counts for aliases so that they match the value passed
841         in `to_counts`.
842         """
843         for alias, cur_refcount in self.alias_refcount.copy().items():
844             unref_amount = cur_refcount - to_counts.get(alias, 0)
845             self.unref_alias(alias, unref_amount)
846 
847     def change_aliases(self, change_map):
848         """
849         Change the aliases in change_map (which maps old-alias -> new-alias),
850         relabelling any references to them in select columns and the where
851         clause.
852         """
853         assert set(change_map).isdisjoint(change_map.values())
854 
855         # 1. Update references in "select" (normal columns plus aliases),
856         # "group by" and "where".
857         self.where.relabel_aliases(change_map)
858         if isinstance(self.group_by, tuple):
859             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])
860         self.select = tuple([col.relabeled_clone(change_map) for col in self.select])
861         self.annotations = self.annotations and {
862             key: col.relabeled_clone(change_map) for key, col in self.annotations.items()
863         }
864 
865         # 2. Rename the alias in the internal table/alias datastructures.
866         for old_alias, new_alias in change_map.items():
867             if old_alias not in self.alias_map:
868                 continue
869             alias_data = self.alias_map[old_alias].relabeled_clone(change_map)
870             self.alias_map[new_alias] = alias_data
871             self.alias_refcount[new_alias] = self.alias_refcount[old_alias]
872             del self.alias_refcount[old_alias]
873             del self.alias_map[old_alias]
874 
875             table_aliases = self.table_map[alias_data.table_name]
876             for pos, alias in enumerate(table_aliases):
877                 if alias == old_alias:
878                     table_aliases[pos] = new_alias
879                     break
880         self.external_aliases = {
881             # Table is aliased or it's being changed and thus is aliased.
882             change_map.get(alias, alias): (aliased or alias in change_map)
883             for alias, aliased in self.external_aliases.items()
884         }
885 
886     def bump_prefix(self, outer_query):
887         """
888         Change the alias prefix to the next letter in the alphabet in a way
889         that the outer query's aliases and this query's aliases will not
890         conflict. Even tables that previously had no alias will get an alias
891         after this call.
892         """
893         def prefix_gen():
894             """
895             Generate a sequence of characters in alphabetical order:
896                 -> 'A', 'B', 'C', ...
897 
898             When the alphabet is finished, the sequence will continue with the
899             Cartesian product:
900                 -> 'AA', 'AB', 'AC', ...
901             """
902             alphabet = ascii_uppercase
903             prefix = chr(ord(self.alias_prefix) + 1)
904             yield prefix
905             for n in count(1):
906                 seq = alphabet[alphabet.index(prefix):] if prefix else alphabet
907                 for s in product(seq, repeat=n):
908                     yield ''.join(s)
909                 prefix = None
910 
911         if self.alias_prefix != outer_query.alias_prefix:
912             # No clashes between self and outer query should be possible.
913             return
914 
915         # Explicitly avoid infinite loop. The constant divider is based on how
916         # much depth recursive subquery references add to the stack. This value
917         # might need to be adjusted when adding or removing function calls from
918         # the code path in charge of performing these operations.
919         local_recursion_limit = sys.getrecursionlimit() // 16
920         for pos, prefix in enumerate(prefix_gen()):
921             if prefix not in self.subq_aliases:
922                 self.alias_prefix = prefix
923                 break
924             if pos > local_recursion_limit:
925                 raise RecursionError(
926                     'Maximum recursion depth exceeded: too many subqueries.'
927                 )
928         self.subq_aliases = self.subq_aliases.union([self.alias_prefix])
929         outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)
930         self.change_aliases({
931             alias: '%s%d' % (self.alias_prefix, pos)
932             for pos, alias in enumerate(self.alias_map)
933         })
934 
935     def get_initial_alias(self):
936         """
937         Return the first alias for this query, after increasing its reference
938         count.
939         """
940         if self.alias_map:
941             alias = self.base_table
942             self.ref_alias(alias)
943         else:
944             alias = self.join(BaseTable(self.get_meta().db_table, None))
945         return alias
946 
947     def count_active_tables(self):
948         """
949         Return the number of tables in this query with a non-zero reference
950         count. After execution, the reference counts are zeroed, so tables
951         added in compiler will not be seen by this method.
952         """
953         return len([1 for count in self.alias_refcount.values() if count])
954 
955     def join(self, join, reuse=None):
956         """
957         Return an alias for the 'join', either reusing an existing alias for
958         that join or creating a new one. 'join' is either a
959         sql.datastructures.BaseTable or Join.
960 
961         The 'reuse' parameter can be either None which means all joins are
962         reusable, or it can be a set containing the aliases that can be reused.
963 
964         A join is always created as LOUTER if the lhs alias is LOUTER to make
965         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new
966         joins are created as LOUTER if the join is nullable.
967         """
968         reuse_aliases = [
969             a for a, j in self.alias_map.items()
970             if (reuse is None or a in reuse) and j.equals(join)
971         ]
972         if reuse_aliases:
973             if join.table_alias in reuse_aliases:
974                 reuse_alias = join.table_alias
975             else:
976                 # Reuse the most recent alias of the joined table
977                 # (a many-to-many relation may be joined multiple times).
978                 reuse_alias = reuse_aliases[-1]
979             self.ref_alias(reuse_alias)
980             return reuse_alias
981 
982         # No reuse is possible, so we need a new alias.
983         alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)
984         if join.join_type:
985             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:
986                 join_type = LOUTER
987             else:
988                 join_type = INNER
989             join.join_type = join_type
990         join.table_alias = alias
991         self.alias_map[alias] = join
992         return alias
993 
994     def join_parent_model(self, opts, model, alias, seen):
995         """
996         Make sure the given 'model' is joined in the query. If 'model' isn't
997         a parent of 'opts' or if it is None this method is a no-op.
998 
999         The 'alias' is the root alias for starting the join, 'seen' is a dict
1000         of model -> alias of existing joins. It must also contain a mapping
1001         of None -> some alias. This will be returned in the no-op case.
1002         """
1003         if model in seen:
1004             return seen[model]
1005         chain = opts.get_base_chain(model)
1006         if not chain:
1007             return alias
1008         curr_opts = opts
1009         for int_model in chain:
1010             if int_model in seen:
1011                 curr_opts = int_model._meta
1012                 alias = seen[int_model]
1013                 continue
1014             # Proxy model have elements in base chain
1015             # with no parents, assign the new options
1016             # object and skip to the next base in that
1017             # case
1018             if not curr_opts.parents[int_model]:
1019                 curr_opts = int_model._meta
1020                 continue
1021             link_field = curr_opts.get_ancestor_link(int_model)
1022             join_info = self.setup_joins([link_field.name], curr_opts, alias)
1023             curr_opts = int_model._meta
1024             alias = seen[int_model] = join_info.joins[-1]
1025         return alias or seen[None]
1026 
1027     def add_annotation(self, annotation, alias, is_summary=False, select=True):
1028         """Add a single annotation expression to the Query."""
1029         annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
1030                                                    summarize=is_summary)
1031         if select:
1032             self.append_annotation_mask([alias])
1033         else:
1034             self.set_annotation_mask(set(self.annotation_select).difference({alias}))
1035         self.annotations[alias] = annotation
1036 
1037     def resolve_expression(self, query, *args, **kwargs):
1038         clone = self.clone()
1039         # Subqueries need to use a different set of aliases than the outer query.
1040         clone.bump_prefix(query)
1041         clone.subquery = True
1042         clone.where.resolve_expression(query, *args, **kwargs)
1043         for key, value in clone.annotations.items():
1044             resolved = value.resolve_expression(query, *args, **kwargs)
1045             if hasattr(resolved, 'external_aliases'):
1046                 resolved.external_aliases.update(clone.external_aliases)
1047             clone.annotations[key] = resolved
1048         # Outer query's aliases are considered external.
1049         for alias, table in query.alias_map.items():
1050             clone.external_aliases[alias] = (
1051                 (isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias) or
1052                 (isinstance(table, BaseTable) and table.table_name != table.table_alias)
1053             )
1054         return clone
1055 
1056     def get_external_cols(self):
1057         exprs = chain(self.annotations.values(), self.where.children)
1058         return [
1059             col for col in self._gen_cols(exprs, include_external=True)
1060             if col.alias in self.external_aliases
1061         ]
1062 
1063     def as_sql(self, compiler, connection):
1064         # Some backends (e.g. Oracle) raise an error when a subquery contains
1065         # unnecessary ORDER BY clause.
1066         if (
1067             self.subquery and
1068             not connection.features.ignores_unnecessary_order_by_in_subqueries
1069         ):
1070             self.clear_ordering(force=False)
1071         sql, params = self.get_compiler(connection=connection).as_sql()
1072         if self.subquery:
1073             sql = '(%s)' % sql
1074         return sql, params
1075 
1076     def resolve_lookup_value(self, value, can_reuse, allow_joins):
1077         if hasattr(value, 'resolve_expression'):
1078             value = value.resolve_expression(
1079                 self, reuse=can_reuse, allow_joins=allow_joins,
1080             )
1081         elif isinstance(value, (list, tuple)):
1082             # The items of the iterable may be expressions and therefore need
1083             # to be resolved independently.
1084             values = (
1085                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
1086                 for sub_value in value
1087             )
1088             type_ = type(value)
1089             if hasattr(type_, '_make'):  # namedtuple
1090                 return type_(*values)
1091             return type_(values)
1092         return value
1093 
1094     def solve_lookup_type(self, lookup):
1095         """
1096         Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').
1097         """
1098         lookup_splitted = lookup.split(LOOKUP_SEP)
1099         if self.annotations:
1100             expression, expression_lookups = refs_expression(lookup_splitted, self.annotations)
1101             if expression:
1102                 return expression_lookups, (), expression
1103         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
1104         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
1105         if len(lookup_parts) > 1 and not field_parts:
1106             raise FieldError(
1107                 'Invalid lookup "%s" for model %s".' %
1108                 (lookup, self.get_meta().model.__name__)
1109             )
1110         return lookup_parts, field_parts, False
1111 
1112     def check_query_object_type(self, value, opts, field):
1113         """
1114         Check whether the object passed while querying is of the correct type.
1115         If not, raise a ValueError specifying the wrong object.
1116         """
1117         if hasattr(value, '_meta'):
1118             if not check_rel_lookup_compatibility(value._meta.model, opts, field):
1119                 raise ValueError(
1120                     'Cannot query "%s": Must be "%s" instance.' %
1121                     (value, opts.object_name))
1122 
1123     def check_related_objects(self, field, value, opts):
1124         """Check the type of object passed to query relations."""
1125         if field.is_relation:
1126             # Check that the field and the queryset use the same model in a
1127             # query like .filter(author=Author.objects.all()). For example, the
1128             # opts would be Author's (from the author field) and value.model
1129             # would be Author.objects.all() queryset's .model (Author also).
1130             # The field is the related field on the lhs side.
1131             if (isinstance(value, Query) and not value.has_select_fields and
1132                     not check_rel_lookup_compatibility(value.model, opts, field)):
1133                 raise ValueError(
1134                     'Cannot use QuerySet for "%s": Use a QuerySet for "%s".' %
1135                     (value.model._meta.object_name, opts.object_name)
1136                 )
1137             elif hasattr(value, '_meta'):
1138                 self.check_query_object_type(value, opts, field)
1139             elif hasattr(value, '__iter__'):
1140                 for v in value:
1141                     self.check_query_object_type(v, opts, field)
1142 
1143     def check_filterable(self, expression):
1144         """Raise an error if expression cannot be used in a WHERE clause."""
1145         if (
1146             hasattr(expression, 'resolve_expression') and
1147             not getattr(expression, 'filterable', True)
1148         ):
1149             raise NotSupportedError(
1150                 expression.__class__.__name__ + ' is disallowed in the filter '
1151                 'clause.'
1152             )
1153         if hasattr(expression, 'get_source_expressions'):
1154             for expr in expression.get_source_expressions():
1155                 self.check_filterable(expr)
1156 
1157     def build_lookup(self, lookups, lhs, rhs):
1158         """
1159         Try to extract transforms and lookup from given lhs.
1160 
1161         The lhs value is something that works like SQLExpression.
1162         The rhs value is what the lookup is going to compare against.
1163         The lookups is a list of names to extract using get_lookup()
1164         and get_transform().
1165         """
1166         # __exact is the default lookup if one isn't given.
1167         *transforms, lookup_name = lookups or ['exact']
1168         for name in transforms:
1169             lhs = self.try_transform(lhs, name)
1170         # First try get_lookup() so that the lookup takes precedence if the lhs
1171         # supports both transform and lookup for the name.
1172         lookup_class = lhs.get_lookup(lookup_name)
1173         if not lookup_class:
1174             if lhs.field.is_relation:
1175                 raise FieldError('Related Field got invalid lookup: {}'.format(lookup_name))
1176             # A lookup wasn't found. Try to interpret the name as a transform
1177             # and do an Exact lookup against it.
1178             lhs = self.try_transform(lhs, lookup_name)
1179             lookup_name = 'exact'
1180             lookup_class = lhs.get_lookup(lookup_name)
1181             if not lookup_class:
1182                 return
1183 
1184         lookup = lookup_class(lhs, rhs)
1185         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all
1186         # uses of None as a query value unless the lookup supports it.
1187         if lookup.rhs is None and not lookup.can_use_none_as_rhs:
1188             if lookup_name not in ('exact', 'iexact'):
1189                 raise ValueError("Cannot use None as a query value")
1190             return lhs.get_lookup('isnull')(lhs, True)
1191 
1192         # For Oracle '' is equivalent to null. The check must be done at this
1193         # stage because join promotion can't be done in the compiler. Using
1194         # DEFAULT_DB_ALIAS isn't nice but it's the best that can be done here.
1195         # A similar thing is done in is_nullable(), too.
1196         if (connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
1197                 lookup_name == 'exact' and lookup.rhs == ''):
1198             return lhs.get_lookup('isnull')(lhs, True)
1199 
1200         return lookup
1201 
1202     def try_transform(self, lhs, name):
1203         """
1204         Helper method for build_lookup(). Try to fetch and initialize
1205         a transform for name parameter from lhs.
1206         """
1207         transform_class = lhs.get_transform(name)
1208         if transform_class:
1209             return transform_class(lhs)
1210         else:
1211             output_field = lhs.output_field.__class__
1212             suggested_lookups = difflib.get_close_matches(name, output_field.get_lookups())
1213             if suggested_lookups:
1214                 suggestion = ', perhaps you meant %s?' % ' or '.join(suggested_lookups)
1215             else:
1216                 suggestion = '.'
1217             raise FieldError(
1218                 "Unsupported lookup '%s' for %s or join on the field not "
1219                 "permitted%s" % (name, output_field.__name__, suggestion)
1220             )
1221 
1222     def build_filter(self, filter_expr, branch_negated=False, current_negated=False,
1223                      can_reuse=None, allow_joins=True, split_subq=True,
1224                      check_filterable=True):
1225         """
1226         Build a WhereNode for a single filter clause but don't add it
1227         to this Query. Query.add_q() will then add this filter to the where
1228         Node.
1229 
1230         The 'branch_negated' tells us if the current branch contains any
1231         negations. This will be used to determine if subqueries are needed.
1232 
1233         The 'current_negated' is used to determine if the current filter is
1234         negated or not and this will be used to determine if IS NULL filtering
1235         is needed.
1236 
1237         The difference between current_negated and branch_negated is that
1238         branch_negated is set on first negation, but current_negated is
1239         flipped for each negation.
1240 
1241         Note that add_filter will not do any negating itself, that is done
1242         upper in the code by add_q().
1243 
1244         The 'can_reuse' is a set of reusable joins for multijoins.
1245 
1246         The method will create a filter clause that can be added to the current
1247         query. However, if the filter isn't added to the query then the caller
1248         is responsible for unreffing the joins used.
1249         """
1250         if isinstance(filter_expr, dict):
1251             raise FieldError("Cannot parse keyword query as dict")
1252         if isinstance(filter_expr, Q):
1253             return self._add_q(
1254                 filter_expr,
1255                 branch_negated=branch_negated,
1256                 current_negated=current_negated,
1257                 used_aliases=can_reuse,
1258                 allow_joins=allow_joins,
1259                 split_subq=split_subq,
1260                 check_filterable=check_filterable,
1261             )
1262         if hasattr(filter_expr, 'resolve_expression'):
1263             if not getattr(filter_expr, 'conditional', False):
1264                 raise TypeError('Cannot filter against a non-conditional expression.')
1265             condition = filter_expr.resolve_expression(self, allow_joins=allow_joins)
1266             if not isinstance(condition, Lookup):
1267                 condition = self.build_lookup(['exact'], condition, True)
1268             clause = self.where_class()
1269             clause.add(condition, AND)
1270             return clause, []
1271         arg, value = filter_expr
1272         if not arg:
1273             raise FieldError("Cannot parse keyword query %r" % arg)
1274         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
1275 
1276         if check_filterable:
1277             self.check_filterable(reffed_expression)
1278 
1279         if not allow_joins and len(parts) > 1:
1280             raise FieldError("Joined field references are not permitted in this query")
1281 
1282         pre_joins = self.alias_refcount.copy()
1283         value = self.resolve_lookup_value(value, can_reuse, allow_joins)
1284         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}
1285 
1286         if check_filterable:
1287             self.check_filterable(value)
1288 
1289         clause = self.where_class()
1290         if reffed_expression:
1291             condition = self.build_lookup(lookups, reffed_expression, value)
1292             clause.add(condition, AND)
1293             return clause, []
1294 
1295         opts = self.get_meta()
1296         alias = self.get_initial_alias()
1297         allow_many = not branch_negated or not split_subq
1298 
1299         try:
1300             join_info = self.setup_joins(
1301                 parts, opts, alias, can_reuse=can_reuse, allow_many=allow_many,
1302             )
1303 
1304             # Prevent iterator from being consumed by check_related_objects()
1305             if isinstance(value, Iterator):
1306                 value = list(value)
1307             self.check_related_objects(join_info.final_field, value, join_info.opts)
1308 
1309             # split_exclude() needs to know which joins were generated for the
1310             # lookup parts
1311             self._lookup_joins = join_info.joins
1312         except MultiJoin as e:
1313             return self.split_exclude(filter_expr, can_reuse, e.names_with_path)
1314 
1315         # Update used_joins before trimming since they are reused to determine
1316         # which joins could be later promoted to INNER.
1317         used_joins.update(join_info.joins)
1318         targets, alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1319         if can_reuse is not None:
1320             can_reuse.update(join_list)
1321 
1322         if join_info.final_field.is_relation:
1323             # No support for transforms for relational fields
1324             num_lookups = len(lookups)
1325             if num_lookups > 1:
1326                 raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))
1327             if len(targets) == 1:
1328                 col = self._get_col(targets[0], join_info.final_field, alias)
1329             else:
1330                 col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)
1331         else:
1332             col = self._get_col(targets[0], join_info.final_field, alias)
1333 
1334         condition = self.build_lookup(lookups, col, value)
1335         lookup_type = condition.lookup_name
1336         clause.add(condition, AND)
1337 
1338         require_outer = lookup_type == 'isnull' and condition.rhs is True and not current_negated
1339         if current_negated and (lookup_type != 'isnull' or condition.rhs is False) and condition.rhs is not None:
1340             require_outer = True
1341             if lookup_type != 'isnull':
1342                 # The condition added here will be SQL like this:
1343                 # NOT (col IS NOT NULL), where the first NOT is added in
1344                 # upper layers of code. The reason for addition is that if col
1345                 # is null, then col != someval will result in SQL "unknown"
1346                 # which isn't the same as in Python. The Python None handling
1347                 # is wanted, and it can be gotten by
1348                 # (col IS NULL OR col != someval)
1349                 #   <=>
1350                 # NOT (col IS NOT NULL AND col = someval).
1351                 if (
1352                     self.is_nullable(targets[0]) or
1353                     self.alias_map[join_list[-1]].join_type == LOUTER
1354                 ):
1355                     lookup_class = targets[0].get_lookup('isnull')
1356                     col = self._get_col(targets[0], join_info.targets[0], alias)
1357                     clause.add(lookup_class(col, False), AND)
1358                 # If someval is a nullable column, someval IS NOT NULL is
1359                 # added.
1360                 if isinstance(value, Col) and self.is_nullable(value.target):
1361                     lookup_class = value.target.get_lookup('isnull')
1362                     clause.add(lookup_class(value, False), AND)
1363         return clause, used_joins if not require_outer else ()
1364 
1365     def add_filter(self, filter_clause):
1366         self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))
1367 
1368     def add_q(self, q_object):
1369         """
1370         A preprocessor for the internal _add_q(). Responsible for doing final
1371         join promotion.
1372         """
1373         # For join promotion this case is doing an AND for the added q_object
1374         # and existing conditions. So, any existing inner join forces the join
1375         # type to remain inner. Existing outer joins can however be demoted.
1376         # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if
1377         # rel_a doesn't produce any rows, then the whole condition must fail.
1378         # So, demotion is OK.
1379         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}
1380         clause, _ = self._add_q(q_object, self.used_aliases)
1381         if clause:
1382             self.where.add(clause, AND)
1383         self.demote_joins(existing_inner)
1384 
1385     def build_where(self, filter_expr):
1386         return self.build_filter(filter_expr, allow_joins=False)[0]
1387 
1388     def _add_q(self, q_object, used_aliases, branch_negated=False,
1389                current_negated=False, allow_joins=True, split_subq=True,
1390                check_filterable=True):
1391         """Add a Q-object to the current filter."""
1392         connector = q_object.connector
1393         current_negated = current_negated ^ q_object.negated
1394         branch_negated = branch_negated or q_object.negated
1395         target_clause = self.where_class(connector=connector,
1396                                          negated=q_object.negated)
1397         joinpromoter = JoinPromoter(q_object.connector, len(q_object.children), current_negated)
1398         for child in q_object.children:
1399             child_clause, needed_inner = self.build_filter(
1400                 child, can_reuse=used_aliases, branch_negated=branch_negated,
1401                 current_negated=current_negated, allow_joins=allow_joins,
1402                 split_subq=split_subq, check_filterable=check_filterable,
1403             )
1404             joinpromoter.add_votes(needed_inner)
1405             if child_clause:
1406                 target_clause.add(child_clause, connector)
1407         needed_inner = joinpromoter.update_join_types(self)
1408         return target_clause, needed_inner
1409 
1410     def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
1411         """Add a FilteredRelation object to the current filter."""
1412         connector = q_object.connector
1413         current_negated ^= q_object.negated
1414         branch_negated = branch_negated or q_object.negated
1415         target_clause = self.where_class(connector=connector, negated=q_object.negated)
1416         for child in q_object.children:
1417             if isinstance(child, Node):
1418                 child_clause = self.build_filtered_relation_q(
1419                     child, reuse=reuse, branch_negated=branch_negated,
1420                     current_negated=current_negated,
1421                 )
1422             else:
1423                 child_clause, _ = self.build_filter(
1424                     child, can_reuse=reuse, branch_negated=branch_negated,
1425                     current_negated=current_negated,
1426                     allow_joins=True, split_subq=False,
1427                 )
1428             target_clause.add(child_clause, connector)
1429         return target_clause
1430 
1431     def add_filtered_relation(self, filtered_relation, alias):
1432         filtered_relation.alias = alias
1433         lookups = dict(get_children_from_q(filtered_relation.condition))
1434         relation_lookup_parts, relation_field_parts, _ = self.solve_lookup_type(filtered_relation.relation_name)
1435         if relation_lookup_parts:
1436             raise ValueError(
1437                 "FilteredRelation's relation_name cannot contain lookups "
1438                 "(got %r)." % filtered_relation.relation_name
1439             )
1440         for lookup in chain(lookups):
1441             lookup_parts, lookup_field_parts, _ = self.solve_lookup_type(lookup)
1442             shift = 2 if not lookup_parts else 1
1443             lookup_field_path = lookup_field_parts[:-shift]
1444             for idx, lookup_field_part in enumerate(lookup_field_path):
1445                 if len(relation_field_parts) > idx:
1446                     if relation_field_parts[idx] != lookup_field_part:
1447                         raise ValueError(
1448                             "FilteredRelation's condition doesn't support "
1449                             "relations outside the %r (got %r)."
1450                             % (filtered_relation.relation_name, lookup)
1451                         )
1452                 else:
1453                     raise ValueError(
1454                         "FilteredRelation's condition doesn't support nested "
1455                         "relations deeper than the relation_name (got %r for "
1456                         "%r)." % (lookup, filtered_relation.relation_name)
1457                     )
1458         self._filtered_relations[filtered_relation.alias] = filtered_relation
1459 
1460     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
1461         """
1462         Walk the list of names and turns them into PathInfo tuples. A single
1463         name in 'names' can generate multiple PathInfos (m2m, for example).
1464 
1465         'names' is the path of names to travel, 'opts' is the model Options we
1466         start the name resolving from, 'allow_many' is as for setup_joins().
1467         If fail_on_missing is set to True, then a name that can't be resolved
1468         will generate a FieldError.
1469 
1470         Return a list of PathInfo tuples. In addition return the final field
1471         (the last used join field) and target (which is a field guaranteed to
1472         contain the same value as the final field). Finally, return those names
1473         that weren't found (which are likely transforms and the final lookup).
1474         """
1475         path, names_with_path = [], []
1476         for pos, name in enumerate(names):
1477             cur_names_with_path = (name, [])
1478             if name == 'pk':
1479                 name = opts.pk.name
1480 
1481             field = None
1482             filtered_relation = None
1483             try:
1484                 field = opts.get_field(name)
1485             except FieldDoesNotExist:
1486                 if name in self.annotation_select:
1487                     field = self.annotation_select[name].output_field
1488                 elif name in self._filtered_relations and pos == 0:
1489                     filtered_relation = self._filtered_relations[name]
1490                     if LOOKUP_SEP in filtered_relation.relation_name:
1491                         parts = filtered_relation.relation_name.split(LOOKUP_SEP)
1492                         filtered_relation_path, field, _, _ = self.names_to_path(
1493                             parts, opts, allow_many, fail_on_missing,
1494                         )
1495                         path.extend(filtered_relation_path[:-1])
1496                     else:
1497                         field = opts.get_field(filtered_relation.relation_name)
1498             if field is not None:
1499                 # Fields that contain one-to-many relations with a generic
1500                 # model (like a GenericForeignKey) cannot generate reverse
1501                 # relations and therefore cannot be used for reverse querying.
1502                 if field.is_relation and not field.related_model:
1503                     raise FieldError(
1504                         "Field %r does not generate an automatic reverse "
1505                         "relation and therefore cannot be used for reverse "
1506                         "querying. If it is a GenericForeignKey, consider "
1507                         "adding a GenericRelation." % name
1508                     )
1509                 try:
1510                     model = field.model._meta.concrete_model
1511                 except AttributeError:
1512                     # QuerySet.annotate() may introduce fields that aren't
1513                     # attached to a model.
1514                     model = None
1515             else:
1516                 # We didn't find the current field, so move position back
1517                 # one step.
1518                 pos -= 1
1519                 if pos == -1 or fail_on_missing:
1520                     available = sorted([
1521                         *get_field_names_from_opts(opts),
1522                         *self.annotation_select,
1523                         *self._filtered_relations,
1524                     ])
1525                     raise FieldError("Cannot resolve keyword '%s' into field. "
1526                                      "Choices are: %s" % (name, ", ".join(available)))
1527                 break
1528             # Check if we need any joins for concrete inheritance cases (the
1529             # field lives in parent, but we are currently in one of its
1530             # children)
1531             if model is not opts.model:
1532                 path_to_parent = opts.get_path_to_parent(model)
1533                 if path_to_parent:
1534                     path.extend(path_to_parent)
1535                     cur_names_with_path[1].extend(path_to_parent)
1536                     opts = path_to_parent[-1].to_opts
1537             if hasattr(field, 'get_path_info'):
1538                 pathinfos = field.get_path_info(filtered_relation)
1539                 if not allow_many:
1540                     for inner_pos, p in enumerate(pathinfos):
1541                         if p.m2m:
1542                             cur_names_with_path[1].extend(pathinfos[0:inner_pos + 1])
1543                             names_with_path.append(cur_names_with_path)
1544                             raise MultiJoin(pos + 1, names_with_path)
1545                 last = pathinfos[-1]
1546                 path.extend(pathinfos)
1547                 final_field = last.join_field
1548                 opts = last.to_opts
1549                 targets = last.target_fields
1550                 cur_names_with_path[1].extend(pathinfos)
1551                 names_with_path.append(cur_names_with_path)
1552             else:
1553                 # Local non-relational field.
1554                 final_field = field
1555                 targets = (field,)
1556                 if fail_on_missing and pos + 1 != len(names):
1557                     raise FieldError(
1558                         "Cannot resolve keyword %r into field. Join on '%s'"
1559                         " not permitted." % (names[pos + 1], name))
1560                 break
1561         return path, final_field, targets, names[pos + 1:]
1562 
1563     def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True):
1564         """
1565         Compute the necessary table joins for the passage through the fields
1566         given in 'names'. 'opts' is the Options class for the current model
1567         (which gives the table we are starting from), 'alias' is the alias for
1568         the table to start the joining from.
1569 
1570         The 'can_reuse' defines the reverse foreign key joins we can reuse. It
1571         can be None in which case all joins are reusable or a set of aliases
1572         that can be reused. Note that non-reverse foreign keys are always
1573         reusable when using setup_joins().
1574 
1575         If 'allow_many' is False, then any reverse foreign key seen will
1576         generate a MultiJoin exception.
1577 
1578         Return the final field involved in the joins, the target field (used
1579         for any 'where' constraint), the final 'opts' value, the joins, the
1580         field path traveled to generate the joins, and a transform function
1581         that takes a field and alias and is equivalent to `field.get_col(alias)`
1582         in the simple case but wraps field transforms if they were included in
1583         names.
1584 
1585         The target field is the field containing the concrete value. Final
1586         field can be something different, for example foreign key pointing to
1587         that value. Final field is needed for example in some value
1588         conversions (convert 'obj' in fk__id=obj to pk val using the foreign
1589         key field for example).
1590         """
1591         joins = [alias]
1592         # The transform can't be applied yet, as joins must be trimmed later.
1593         # To avoid making every caller of this method look up transforms
1594         # directly, compute transforms here and create a partial that converts
1595         # fields to the appropriate wrapped version.
1596 
1597         def final_transformer(field, alias):
1598             if not self.alias_cols:
1599                 alias = None
1600             return field.get_col(alias)
1601 
1602         # Try resolving all the names as fields first. If there's an error,
1603         # treat trailing names as lookups until a field can be resolved.
1604         last_field_exception = None
1605         for pivot in range(len(names), 0, -1):
1606             try:
1607                 path, final_field, targets, rest = self.names_to_path(
1608                     names[:pivot], opts, allow_many, fail_on_missing=True,
1609                 )
1610             except FieldError as exc:
1611                 if pivot == 1:
1612                     # The first item cannot be a lookup, so it's safe
1613                     # to raise the field error here.
1614                     raise
1615                 else:
1616                     last_field_exception = exc
1617             else:
1618                 # The transforms are the remaining items that couldn't be
1619                 # resolved into fields.
1620                 transforms = names[pivot:]
1621                 break
1622         for name in transforms:
1623             def transform(field, alias, *, name, previous):
1624                 try:
1625                     wrapped = previous(field, alias)
1626                     return self.try_transform(wrapped, name)
1627                 except FieldError:
1628                     # FieldError is raised if the transform doesn't exist.
1629                     if isinstance(final_field, Field) and last_field_exception:
1630                         raise last_field_exception
1631                     else:
1632                         raise
1633             final_transformer = functools.partial(transform, name=name, previous=final_transformer)
1634         # Then, add the path to the query's joins. Note that we can't trim
1635         # joins at this stage - we will need the information about join type
1636         # of the trimmed joins.
1637         for join in path:
1638             if join.filtered_relation:
1639                 filtered_relation = join.filtered_relation.clone()
1640                 table_alias = filtered_relation.alias
1641             else:
1642                 filtered_relation = None
1643                 table_alias = None
1644             opts = join.to_opts
1645             if join.direct:
1646                 nullable = self.is_nullable(join.join_field)
1647             else:
1648                 nullable = True
1649             connection = Join(
1650                 opts.db_table, alias, table_alias, INNER, join.join_field,
1651                 nullable, filtered_relation=filtered_relation,
1652             )
1653             reuse = can_reuse if join.m2m else None
1654             alias = self.join(connection, reuse=reuse)
1655             joins.append(alias)
1656             if filtered_relation:
1657                 filtered_relation.path = joins[:]
1658         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)
1659 
1660     def trim_joins(self, targets, joins, path):
1661         """
1662         The 'target' parameter is the final field being joined to, 'joins'
1663         is the full list of join aliases. The 'path' contain the PathInfos
1664         used to create the joins.
1665 
1666         Return the final target field and table alias and the new active
1667         joins.
1668 
1669         Always trim any direct join if the target column is already in the
1670         previous table. Can't trim reverse joins as it's unknown if there's
1671         anything on the other side of the join.
1672         """
1673         joins = joins[:]
1674         for pos, info in enumerate(reversed(path)):
1675             if len(joins) == 1 or not info.direct:
1676                 break
1677             if info.filtered_relation:
1678                 break
1679             join_targets = {t.column for t in info.join_field.foreign_related_fields}
1680             cur_targets = {t.column for t in targets}
1681             if not cur_targets.issubset(join_targets):
1682                 break
1683             targets_dict = {r[1].column: r[0] for r in info.join_field.related_fields if r[1].column in cur_targets}
1684             targets = tuple(targets_dict[t.column] for t in targets)
1685             self.unref_alias(joins.pop())
1686         return targets, joins[-1], joins
1687 
1688     @classmethod
1689     def _gen_cols(cls, exprs, include_external=False):
1690         for expr in exprs:
1691             if isinstance(expr, Col):
1692                 yield expr
1693             elif include_external and callable(getattr(expr, 'get_external_cols', None)):
1694                 yield from expr.get_external_cols()
1695             else:
1696                 yield from cls._gen_cols(
1697                     expr.get_source_expressions(),
1698                     include_external=include_external,
1699                 )
1700 
1701     @classmethod
1702     def _gen_col_aliases(cls, exprs):
1703         yield from (expr.alias for expr in cls._gen_cols(exprs))
1704 
1705     def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False):
1706         annotation = self.annotations.get(name)
1707         if annotation is not None:
1708             if not allow_joins:
1709                 for alias in self._gen_col_aliases([annotation]):
1710                     if isinstance(self.alias_map[alias], Join):
1711                         raise FieldError(
1712                             'Joined field references are not permitted in '
1713                             'this query'
1714                         )
1715             if summarize:
1716                 # Summarize currently means we are doing an aggregate() query
1717                 # which is executed as a wrapped subquery if any of the
1718                 # aggregate() elements reference an existing annotation. In
1719                 # that case we need to return a Ref to the subquery's annotation.
1720                 if name not in self.annotation_select:
1721                     raise FieldError(
1722                         "Cannot aggregate over the '%s' alias. Use annotate() "
1723                         "to promote it." % name
1724                     )
1725                 return Ref(name, self.annotation_select[name])
1726             else:
1727                 return annotation
1728         else:
1729             field_list = name.split(LOOKUP_SEP)
1730             annotation = self.annotations.get(field_list[0])
1731             if annotation is not None:
1732                 for transform in field_list[1:]:
1733                     annotation = self.try_transform(annotation, transform)
1734                 return annotation
1735             join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)
1736             targets, final_alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1737             if not allow_joins and len(join_list) > 1:
1738                 raise FieldError('Joined field references are not permitted in this query')
1739             if len(targets) > 1:
1740                 raise FieldError("Referencing multicolumn fields with F() objects "
1741                                  "isn't supported")
1742             # Verify that the last lookup in name is a field or a transform:
1743             # transform_function() raises FieldError if not.
1744             transform = join_info.transform_function(targets[0], final_alias)
1745             if reuse is not None:
1746                 reuse.update(join_list)
1747             return transform
1748 
1749     def split_exclude(self, filter_expr, can_reuse, names_with_path):
1750         """
1751         When doing an exclude against any kind of N-to-many relation, we need
1752         to use a subquery. This method constructs the nested query, given the
1753         original exclude filter (filter_expr) and the portion up to the first
1754         N-to-many relation field.
1755 
1756         For example, if the origin filter is ~Q(child__name='foo'), filter_expr
1757         is ('child__name', 'foo') and can_reuse is a set of joins usable for
1758         filters in the original query.
1759 
1760         We will turn this into equivalent of:
1761             WHERE NOT EXISTS(
1762                 SELECT 1
1763                 FROM child
1764                 WHERE name = 'foo' AND child.parent_id = parent.id
1765                 LIMIT 1
1766             )
1767         """
1768         filter_lhs, filter_rhs = filter_expr
1769         if isinstance(filter_rhs, OuterRef):
1770             filter_expr = (filter_lhs, OuterRef(filter_rhs))
1771         elif isinstance(filter_rhs, F):
1772             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
1773         # Generate the inner query.
1774         query = Query(self.model)
1775         query._filtered_relations = self._filtered_relations
1776         query.add_filter(filter_expr)
1777         query.clear_ordering(force=True)
1778         # Try to have as simple as possible subquery -> trim leading joins from
1779         # the subquery.
1780         trimmed_prefix, contains_louter = query.trim_start(names_with_path)
1781 
1782         col = query.select[0]
1783         select_field = col.target
1784         alias = col.alias
1785         if alias in can_reuse:
1786             pk = select_field.model._meta.pk
1787             # Need to add a restriction so that outer query's filters are in effect for
1788             # the subquery, too.
1789             query.bump_prefix(self)
1790             lookup_class = select_field.get_lookup('exact')
1791             # Note that the query.select[0].alias is different from alias
1792             # due to bump_prefix above.
1793             lookup = lookup_class(pk.get_col(query.select[0].alias),
1794                                   pk.get_col(alias))
1795             query.where.add(lookup, AND)
1796             query.external_aliases[alias] = True
1797 
1798         lookup_class = select_field.get_lookup('exact')
1799         lookup = lookup_class(col, ResolvedOuterRef(trimmed_prefix))
1800         query.where.add(lookup, AND)
1801         condition, needed_inner = self.build_filter(Exists(query))
1802 
1803         if contains_louter:
1804             or_null_condition, _ = self.build_filter(
1805                 ('%s__isnull' % trimmed_prefix, True),
1806                 current_negated=True, branch_negated=True, can_reuse=can_reuse)
1807             condition.add(or_null_condition, OR)
1808             # Note that the end result will be:
1809             # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.
1810             # This might look crazy but due to how IN works, this seems to be
1811             # correct. If the IS NOT NULL check is removed then outercol NOT
1812             # IN will return UNKNOWN. If the IS NULL check is removed, then if
1813             # outercol IS NULL we will not match the row.
1814         return condition, needed_inner
1815 
1816     def set_empty(self):
1817         self.where.add(NothingNode(), AND)
1818         for query in self.combined_queries:
1819             query.set_empty()
1820 
1821     def is_empty(self):
1822         return any(isinstance(c, NothingNode) for c in self.where.children)
1823 
1824     def set_limits(self, low=None, high=None):
1825         """
1826         Adjust the limits on the rows retrieved. Use low/high to set these,
1827         as it makes it more Pythonic to read and write. When the SQL query is
1828         created, convert them to the appropriate offset and limit values.
1829 
1830         Apply any limits passed in here to the existing constraints. Add low
1831         to the current low value and clamp both to any existing high value.
1832         """
1833         if high is not None:
1834             if self.high_mark is not None:
1835                 self.high_mark = min(self.high_mark, self.low_mark + high)
1836             else:
1837                 self.high_mark = self.low_mark + high
1838         if low is not None:
1839             if self.high_mark is not None:
1840                 self.low_mark = min(self.high_mark, self.low_mark + low)
1841             else:
1842                 self.low_mark = self.low_mark + low
1843 
1844         if self.low_mark == self.high_mark:
1845             self.set_empty()
1846 
1847     def clear_limits(self):
1848         """Clear any existing limits."""
1849         self.low_mark, self.high_mark = 0, None
1850 
1851     @property
1852     def is_sliced(self):
1853         return self.low_mark != 0 or self.high_mark is not None
1854 
1855     def has_limit_one(self):
1856         return self.high_mark is not None and (self.high_mark - self.low_mark) == 1
1857 
1858     def can_filter(self):
1859         """
1860         Return True if adding filters to this instance is still possible.
1861 
1862         Typically, this means no limits or offsets have been put on the results.
1863         """
1864         return not self.is_sliced
1865 
1866     def clear_select_clause(self):
1867         """Remove all fields from SELECT clause."""
1868         self.select = ()
1869         self.default_cols = False
1870         self.select_related = False
1871         self.set_extra_mask(())
1872         self.set_annotation_mask(())
1873 
1874     def clear_select_fields(self):
1875         """
1876         Clear the list of fields to select (but not extra_select columns).
1877         Some queryset types completely replace any existing list of select
1878         columns.
1879         """
1880         self.select = ()
1881         self.values_select = ()
1882 
1883     def add_select_col(self, col, name):
1884         self.select += col,
1885         self.values_select += name,
1886 
1887     def set_select(self, cols):
1888         self.default_cols = False
1889         self.select = tuple(cols)
1890 
1891     def add_distinct_fields(self, *field_names):
1892         """
1893         Add and resolve the given fields to the query's "distinct on" clause.
1894         """
1895         self.distinct_fields = field_names
1896         self.distinct = True
1897 
1898     def add_fields(self, field_names, allow_m2m=True):
1899         """
1900         Add the given (model) fields to the select set. Add the field names in
1901         the order specified.
1902         """
1903         alias = self.get_initial_alias()
1904         opts = self.get_meta()
1905 
1906         try:
1907             cols = []
1908             for name in field_names:
1909                 # Join promotion note - we must not remove any rows here, so
1910                 # if there is no existing joins, use outer join.
1911                 join_info = self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m)
1912                 targets, final_alias, joins = self.trim_joins(
1913                     join_info.targets,
1914                     join_info.joins,
1915                     join_info.path,
1916                 )
1917                 for target in targets:
1918                     cols.append(join_info.transform_function(target, final_alias))
1919             if cols:
1920                 self.set_select(cols)
1921         except MultiJoin:
1922             raise FieldError("Invalid field name: '%s'" % name)
1923         except FieldError:
1924             if LOOKUP_SEP in name:
1925                 # For lookups spanning over relationships, show the error
1926                 # from the model on which the lookup failed.
1927                 raise
1928             elif name in self.annotations:
1929                 raise FieldError(
1930                     "Cannot select the '%s' alias. Use annotate() to promote "
1931                     "it." % name
1932                 )
1933             else:
1934                 names = sorted([
1935                     *get_field_names_from_opts(opts), *self.extra,
1936                     *self.annotation_select, *self._filtered_relations
1937                 ])
1938                 raise FieldError("Cannot resolve keyword %r into field. "
1939                                  "Choices are: %s" % (name, ", ".join(names)))
1940 
1941     def add_ordering(self, *ordering):
1942         """
1943         Add items from the 'ordering' sequence to the query's "order by"
1944         clause. These items are either field names (not column names) --
1945         possibly with a direction prefix ('-' or '?') -- or OrderBy
1946         expressions.
1947 
1948         If 'ordering' is empty, clear all ordering from the query.
1949         """
1950         errors = []
1951         for item in ordering:
1952             if isinstance(item, str):
1953                 if item == '?':
1954                     continue
1955                 if item.startswith('-'):
1956                     item = item[1:]
1957                 if item in self.annotations:
1958                     continue
1959                 if self.extra and item in self.extra:
1960                     continue
1961                 # names_to_path() validates the lookup. A descriptive
1962                 # FieldError will be raise if it's not.
1963                 self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)
1964             elif not hasattr(item, 'resolve_expression'):
1965                 errors.append(item)
1966             if getattr(item, 'contains_aggregate', False):
1967                 raise FieldError(
1968                     'Using an aggregate in order_by() without also including '
1969                     'it in annotate() is not allowed: %s' % item
1970                 )
1971         if errors:
1972             raise FieldError('Invalid order_by arguments: %s' % errors)
1973         if ordering:
1974             self.order_by += ordering
1975         else:
1976             self.default_ordering = False
1977 
1978     def clear_ordering(self, force=False, clear_default=True):
1979         """
1980         Remove any ordering settings if the current query allows it without
1981         side effects, set 'force' to True to clear the ordering regardless.
1982         If 'clear_default' is True, there will be no ordering in the resulting
1983         query (not even the model's default).
1984         """
1985         if not force and (self.is_sliced or self.distinct_fields or self.select_for_update):
1986             return
1987         self.order_by = ()
1988         self.extra_order_by = ()
1989         if clear_default:
1990             self.default_ordering = False
1991 
1992     def set_group_by(self, allow_aliases=True):
1993         """
1994         Expand the GROUP BY clause required by the query.
1995 
1996         This will usually be the set of all non-aggregate fields in the
1997         return data. If the database backend supports grouping by the
1998         primary key, and the query would be equivalent, the optimization
1999         will be made automatically.
2000         """
2001         # Column names from JOINs to check collisions with aliases.
2002         if allow_aliases:
2003             column_names = set()
2004             seen_models = set()
2005             for join in list(self.alias_map.values())[1:]:  # Skip base table.
2006                 model = join.join_field.related_model
2007                 if model not in seen_models:
2008                     column_names.update({
2009                         field.column
2010                         for field in model._meta.local_concrete_fields
2011                     })
2012                     seen_models.add(model)
2013 
2014         group_by = list(self.select)
2015         if self.annotation_select:
2016             for alias, annotation in self.annotation_select.items():
2017                 if not allow_aliases or alias in column_names:
2018                     alias = None
2019                 group_by_cols = annotation.get_group_by_cols(alias=alias)
2020                 group_by.extend(group_by_cols)
2021         self.group_by = tuple(group_by)
2022 
2023     def add_select_related(self, fields):
2024         """
2025         Set up the select_related data structure so that we only select
2026         certain related models (as opposed to all models, when
2027         self.select_related=True).
2028         """
2029         if isinstance(self.select_related, bool):
2030             field_dict = {}
2031         else:
2032             field_dict = self.select_related
2033         for field in fields:
2034             d = field_dict
2035             for part in field.split(LOOKUP_SEP):
2036                 d = d.setdefault(part, {})
2037         self.select_related = field_dict
2038 
2039     def add_extra(self, select, select_params, where, params, tables, order_by):
2040         """
2041         Add data to the various extra_* attributes for user-created additions
2042         to the query.
2043         """
2044         if select:
2045             # We need to pair any placeholder markers in the 'select'
2046             # dictionary with their parameters in 'select_params' so that
2047             # subsequent updates to the select dictionary also adjust the
2048             # parameters appropriately.
2049             select_pairs = {}
2050             if select_params:
2051                 param_iter = iter(select_params)
2052             else:
2053                 param_iter = iter([])
2054             for name, entry in select.items():
2055                 entry = str(entry)
2056                 entry_params = []
2057                 pos = entry.find("%s")
2058                 while pos != -1:
2059                     if pos == 0 or entry[pos - 1] != '%':
2060                         entry_params.append(next(param_iter))
2061                     pos = entry.find("%s", pos + 2)
2062                 select_pairs[name] = (entry, entry_params)
2063             self.extra.update(select_pairs)
2064         if where or params:
2065             self.where.add(ExtraWhere(where, params), AND)
2066         if tables:
2067             self.extra_tables += tuple(tables)
2068         if order_by:
2069             self.extra_order_by = order_by
2070 
2071     def clear_deferred_loading(self):
2072         """Remove any fields from the deferred loading set."""
2073         self.deferred_loading = (frozenset(), True)
2074 
2075     def add_deferred_loading(self, field_names):
2076         """
2077         Add the given list of model field names to the set of fields to
2078         exclude from loading from the database when automatic column selection
2079         is done. Add the new field names to any existing field names that
2080         are deferred (or removed from any existing field names that are marked
2081         as the only ones for immediate loading).
2082         """
2083         # Fields on related models are stored in the literal double-underscore
2084         # format, so that we can use a set datastructure. We do the foo__bar
2085         # splitting and handling when computing the SQL column names (as part of
2086         # get_columns()).
2087         existing, defer = self.deferred_loading
2088         if defer:
2089             # Add to existing deferred names.
2090             self.deferred_loading = existing.union(field_names), True
2091         else:
2092             # Remove names from the set of any existing "immediate load" names.
2093             self.deferred_loading = existing.difference(field_names), False
2094 
2095     def add_immediate_loading(self, field_names):
2096         """
2097         Add the given list of model field names to the set of fields to
2098         retrieve when the SQL is executed ("immediate loading" fields). The
2099         field names replace any existing immediate loading field names. If
2100         there are field names already specified for deferred loading, remove
2101         those names from the new field_names before storing the new names
2102         for immediate loading. (That is, immediate loading overrides any
2103         existing immediate values, but respects existing deferrals.)
2104         """
2105         existing, defer = self.deferred_loading
2106         field_names = set(field_names)
2107         if 'pk' in field_names:
2108             field_names.remove('pk')
2109             field_names.add(self.get_meta().pk.name)
2110 
2111         if defer:
2112             # Remove any existing deferred names from the current set before
2113             # setting the new names.
2114             self.deferred_loading = field_names.difference(existing), False
2115         else:
2116             # Replace any existing "immediate load" field names.
2117             self.deferred_loading = frozenset(field_names), False
2118 
2119     def get_loaded_field_names(self):
2120         """
2121         If any fields are marked to be deferred, return a dictionary mapping
2122         models to a set of names in those fields that will be loaded. If a
2123         model is not in the returned dictionary, none of its fields are
2124         deferred.
2125 
2126         If no fields are marked for deferral, return an empty dictionary.
2127         """
2128         # We cache this because we call this function multiple times
2129         # (compiler.fill_related_selections, query.iterator)
2130         try:
2131             return self._loaded_field_names_cache
2132         except AttributeError:
2133             collection = {}
2134             self.deferred_to_data(collection, self.get_loaded_field_names_cb)
2135             self._loaded_field_names_cache = collection
2136             return collection
2137 
2138     def get_loaded_field_names_cb(self, target, model, fields):
2139         """Callback used by get_deferred_field_names()."""
2140         target[model] = {f.attname for f in fields}
2141 
2142     def set_annotation_mask(self, names):
2143         """Set the mask of annotations that will be returned by the SELECT."""
2144         if names is None:
2145             self.annotation_select_mask = None
2146         else:
2147             self.annotation_select_mask = set(names)
2148         self._annotation_select_cache = None
2149 
2150     def append_annotation_mask(self, names):
2151         if self.annotation_select_mask is not None:
2152             self.set_annotation_mask(self.annotation_select_mask.union(names))
2153 
2154     def set_extra_mask(self, names):
2155         """
2156         Set the mask of extra select items that will be returned by SELECT.
2157         Don't remove them from the Query since they might be used later.
2158         """
2159         if names is None:
2160             self.extra_select_mask = None
2161         else:
2162             self.extra_select_mask = set(names)
2163         self._extra_select_cache = None
2164 
2165     def set_values(self, fields):
2166         self.select_related = False
2167         self.clear_deferred_loading()
2168         self.clear_select_fields()
2169 
2170         if fields:
2171             field_names = []
2172             extra_names = []
2173             annotation_names = []
2174             if not self.extra and not self.annotations:
2175                 # Shortcut - if there are no extra or annotations, then
2176                 # the values() clause must be just field names.
2177                 field_names = list(fields)
2178             else:
2179                 self.default_cols = False
2180                 for f in fields:
2181                     if f in self.extra_select:
2182                         extra_names.append(f)
2183                     elif f in self.annotation_select:
2184                         annotation_names.append(f)
2185                     else:
2186                         field_names.append(f)
2187             self.set_extra_mask(extra_names)
2188             self.set_annotation_mask(annotation_names)
2189             selected = frozenset(field_names + extra_names + annotation_names)
2190         else:
2191             field_names = [f.attname for f in self.model._meta.concrete_fields]
2192             selected = frozenset(field_names)
2193         # Selected annotations must be known before setting the GROUP BY
2194         # clause.
2195         if self.group_by is True:
2196             self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
2197             # Disable GROUP BY aliases to avoid orphaning references to the
2198             # SELECT clause which is about to be cleared.
2199             self.set_group_by(allow_aliases=False)
2200             self.clear_select_fields()
2201         elif self.group_by:
2202             # Resolve GROUP BY annotation references if they are not part of
2203             # the selected fields anymore.
2204             group_by = []
2205             for expr in self.group_by:
2206                 if isinstance(expr, Ref) and expr.refs not in selected:
2207                     expr = self.annotations[expr.refs]
2208                 group_by.append(expr)
2209             self.group_by = tuple(group_by)
2210 
2211         self.values_select = tuple(field_names)
2212         self.add_fields(field_names, True)
2213 
2214     @property
2215     def annotation_select(self):
2216         """
2217         Return the dictionary of aggregate columns that are not masked and
2218         should be used in the SELECT clause. Cache this result for performance.
2219         """
2220         if self._annotation_select_cache is not None:
2221             return self._annotation_select_cache
2222         elif not self.annotations:
2223             return {}
2224         elif self.annotation_select_mask is not None:
2225             self._annotation_select_cache = {
2226                 k: v for k, v in self.annotations.items()
2227                 if k in self.annotation_select_mask
2228             }
2229             return self._annotation_select_cache
2230         else:
2231             return self.annotations
2232 
2233     @property
2234     def extra_select(self):
2235         if self._extra_select_cache is not None:
2236             return self._extra_select_cache
2237         if not self.extra:
2238             return {}
2239         elif self.extra_select_mask is not None:
2240             self._extra_select_cache = {
2241                 k: v for k, v in self.extra.items()
2242                 if k in self.extra_select_mask
2243             }
2244             return self._extra_select_cache
2245         else:
2246             return self.extra
2247 
2248     def trim_start(self, names_with_path):
2249         """
2250         Trim joins from the start of the join path. The candidates for trim
2251         are the PathInfos in names_with_path structure that are m2m joins.
2252 
2253         Also set the select column so the start matches the join.
2254 
2255         This method is meant to be used for generating the subquery joins &
2256         cols in split_exclude().
2257 
2258         Return a lookup usable for doing outerq.filter(lookup=self) and a
2259         boolean indicating if the joins in the prefix contain a LEFT OUTER join.
2260         _"""
2261         all_paths = []
2262         for _, paths in names_with_path:
2263             all_paths.extend(paths)
2264         contains_louter = False
2265         # Trim and operate only on tables that were generated for
2266         # the lookup part of the query. That is, avoid trimming
2267         # joins generated for F() expressions.
2268         lookup_tables = [
2269             t for t in self.alias_map
2270             if t in self._lookup_joins or t == self.base_table
2271         ]
2272         for trimmed_paths, path in enumerate(all_paths):
2273             if path.m2m:
2274                 break
2275             if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type == LOUTER:
2276                 contains_louter = True
2277             alias = lookup_tables[trimmed_paths]
2278             self.unref_alias(alias)
2279         # The path.join_field is a Rel, lets get the other side's field
2280         join_field = path.join_field.field
2281         # Build the filter prefix.
2282         paths_in_prefix = trimmed_paths
2283         trimmed_prefix = []
2284         for name, path in names_with_path:
2285             if paths_in_prefix - len(path) < 0:
2286                 break
2287             trimmed_prefix.append(name)
2288             paths_in_prefix -= len(path)
2289         trimmed_prefix.append(
2290             join_field.foreign_related_fields[0].name)
2291         trimmed_prefix = LOOKUP_SEP.join(trimmed_prefix)
2292         # Lets still see if we can trim the first join from the inner query
2293         # (that is, self). We can't do this for:
2294         # - LEFT JOINs because we would miss those rows that have nothing on
2295         #   the outer side,
2296         # - INNER JOINs from filtered relations because we would miss their
2297         #   filters.
2298         first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]
2299         if first_join.join_type != LOUTER and not first_join.filtered_relation:
2300             select_fields = [r[0] for r in join_field.related_fields]
2301             select_alias = lookup_tables[trimmed_paths + 1]
2302             self.unref_alias(lookup_tables[trimmed_paths])
2303             extra_restriction = join_field.get_extra_restriction(
2304                 self.where_class, None, lookup_tables[trimmed_paths + 1])
2305             if extra_restriction:
2306                 self.where.add(extra_restriction, AND)
2307         else:
2308             # TODO: It might be possible to trim more joins from the start of the
2309             # inner query if it happens to have a longer join chain containing the
2310             # values in select_fields. Lets punt this one for now.
2311             select_fields = [r[1] for r in join_field.related_fields]
2312             select_alias = lookup_tables[trimmed_paths]
2313         # The found starting point is likely a Join instead of a BaseTable reference.
2314         # But the first entry in the query's FROM clause must not be a JOIN.
2315         for table in self.alias_map:
2316             if self.alias_refcount[table] > 0:
2317                 self.alias_map[table] = BaseTable(self.alias_map[table].table_name, table)
2318                 break
2319         self.set_select([f.get_col(select_alias) for f in select_fields])
2320         return trimmed_prefix, contains_louter
2321 
2322     def is_nullable(self, field):
2323         """
2324         Check if the given field should be treated as nullable.
2325 
2326         Some backends treat '' as null and Django treats such fields as
2327         nullable for those backends. In such situations field.null can be
2328         False even if we should treat the field as nullable.
2329         """
2330         # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have
2331         # (nor should it have) knowledge of which connection is going to be
2332         # used. The proper fix would be to defer all decisions where
2333         # is_nullable() is needed to the compiler stage, but that is not easy
2334         # to do currently.
2335         return (
2336             connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
2337             field.empty_strings_allowed
2338         ) or field.null

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>]
2025-10-15 18:51:12.177 | INFO     | Search completed. Bug locations: [<file>django/db/models/aggregates.py</file>
<class>Sum</class>
<method>None</method>
<code>
142 class Sum(FixDurationInputMixin, Aggregate):
143     function = 'SUM'
144     name = 'Sum'
145     allow_distinct = True

</code><intended_behavior>Modify the `Sum` class to accept an optional parameter named `default` that specifies the default value to use when no rows match the aggregation criteria, resulting in a `NULL`. Preserve the existing functionality and ensure that if the `default` parameter is not provided, the behavior remains unchanged.</intended_behavior>, <file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>add_annotation</method>
<code>
1027     def add_annotation(self, annotation, alias, is_summary=False, select=True):
1028         """Add a single annotation expression to the Query."""
1029         annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
1030                                                    summarize=is_summary)
1031         if select:
1032             self.append_annotation_mask([alias])
1033         else:
1034             self.set_annotation_mask(set(self.annotation_select).difference({alias}))
1035         self.annotations[alias] = annotation

</code><intended_behavior>Enhance the method to detect if an aggregate expression, such as one created by `Sum`, includes a `default` parameter. Adjust the SQL compilation process to wrap the aggregation expression in a `COALESCE` function, using the specified default value when the aggregation result would otherwise be `NULL`. Ensure that this change does not interfere with other parts of the Django ORM that might rely on the existing behavior of returning `NULL` for empty aggregates.</intended_behavior>, <file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>None</method>
<code>
139 class Query(BaseExpression):
140     """A single SQL query."""
141 
142     alias_prefix = 'T'
143     subq_aliases = frozenset([alias_prefix])
144 
145     compiler = 'SQLCompiler'
146 
147     def __init__(self, model, where=WhereNode, alias_cols=True):
148         self.model = model
149         self.alias_refcount = {}
150         # alias_map is the most important data structure regarding joins.
151         # It's used for recording which joins exist in the query and what
152         # types they are. The key is the alias of the joined table (possibly
153         # the table name) and the value is a Join-like object (see
154         # sql.datastructures.Join for more information).
155         self.alias_map = {}
156         # Whether to provide alias to columns during reference resolving.
157         self.alias_cols = alias_cols
158         # Sometimes the query contains references to aliases in outer queries (as
159         # a result of split_exclude). Correct alias quoting needs to know these
160         # aliases too.
161         # Map external tables to whether they are aliased.
162         self.external_aliases = {}
163         self.table_map = {}     # Maps table names to list of aliases.
164         self.default_cols = True
165         self.default_ordering = True
166         self.standard_ordering = True
167         self.used_aliases = set()
168         self.filter_is_sticky = False
169         self.subquery = False
170 
171         # SQL-related attributes
172         # Select and related select clauses are expressions to use in the
173         # SELECT clause of the query.
174         # The select is used for cases where we want to set up the select
175         # clause to contain other than default fields (values(), subqueries...)
176         # Note that annotations go to annotations dictionary.
177         self.select = ()
178         self.where = where()
179         self.where_class = where
180         # The group_by attribute can have one of the following forms:
181         #  - None: no group by at all in the query
182         #  - A tuple of expressions: group by (at least) those expressions.
183         #    String refs are also allowed for now.
184         #  - True: group by all select fields of the model
185         # See compiler.get_group_by() for details.
186         self.group_by = None
187         self.order_by = ()
188         self.low_mark, self.high_mark = 0, None  # Used for offset/limit
189         self.distinct = False
190         self.distinct_fields = ()
191         self.select_for_update = False
192         self.select_for_update_nowait = False
193         self.select_for_update_skip_locked = False
194         self.select_for_update_of = ()
195         self.select_for_no_key_update = False
196 
197         self.select_related = False
198         # Arbitrary limit for select_related to prevents infinite recursion.
199         self.max_depth = 5
200 
201         # Holds the selects defined by a call to values() or values_list()
202         # excluding annotation_select and extra_select.
203         self.values_select = ()
204 
205         # SQL annotation-related attributes
206         self.annotations = {}  # Maps alias -> Annotation Expression
207         self.annotation_select_mask = None
208         self._annotation_select_cache = None
209 
210         # Set combination attributes
211         self.combinator = None
212         self.combinator_all = False
213         self.combined_queries = ()
214 
215         # These are for extensions. The contents are more or less appended
216         # verbatim to the appropriate clause.
217         self.extra = {}  # Maps col_alias -> (col_sql, params).
218         self.extra_select_mask = None
219         self._extra_select_cache = None
220 
221         self.extra_tables = ()
222         self.extra_order_by = ()
223 
224         # A tuple that is a set of model field names and either True, if these
225         # are the fields to defer, or False if these are the only fields to
226         # load.
227         self.deferred_loading = (frozenset(), True)
228 
229         self._filtered_relations = {}
230 
231         self.explain_query = False
232         self.explain_format = None
233         self.explain_options = {}
234 
235     @property
236     def output_field(self):
237         if len(self.select) == 1:
238             select = self.select[0]
239             return getattr(select, 'target', None) or select.field
240         elif len(self.annotation_select) == 1:
241             return next(iter(self.annotation_select.values())).output_field
242 
243     @property
244     def has_select_fields(self):
245         return bool(self.select or self.annotation_select_mask or self.extra_select_mask)
246 
247     @cached_property
248     def base_table(self):
249         for alias in self.alias_map:
250             return alias
251 
252     def __str__(self):
253         """
254         Return the query as a string of SQL with the parameter values
255         substituted in (use sql_with_params() to see the unsubstituted string).
256 
257         Parameter values won't necessarily be quoted correctly, since that is
258         done by the database interface at execution time.
259         """
260         sql, params = self.sql_with_params()
261         return sql % params
262 
263     def sql_with_params(self):
264         """
265         Return the query as an SQL string and the parameters that will be
266         substituted into the query.
267         """
268         return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()
269 
270     def __deepcopy__(self, memo):
271         """Limit the amount of work when a Query is deepcopied."""
272         result = self.clone()
273         memo[id(self)] = result
274         return result
275 
276     def get_compiler(self, using=None, connection=None, elide_empty=True):
277         if using is None and connection is None:
278             raise ValueError("Need either using or connection")
279         if using:
280             connection = connections[using]
281         return connection.ops.compiler(self.compiler)(self, connection, using, elide_empty)
282 
283     def get_meta(self):
284         """
285         Return the Options instance (the model._meta) from which to start
286         processing. Normally, this is self.model._meta, but it can be changed
287         by subclasses.
288         """
289         return self.model._meta
290 
291     def clone(self):
292         """
293         Return a copy of the current Query. A lightweight alternative to
294         to deepcopy().
295         """
296         obj = Empty()
297         obj.__class__ = self.__class__
298         # Copy references to everything.
299         obj.__dict__ = self.__dict__.copy()
300         # Clone attributes that can't use shallow copy.
301         obj.alias_refcount = self.alias_refcount.copy()
302         obj.alias_map = self.alias_map.copy()
303         obj.external_aliases = self.external_aliases.copy()
304         obj.table_map = self.table_map.copy()
305         obj.where = self.where.clone()
306         obj.annotations = self.annotations.copy()
307         if self.annotation_select_mask is None:
308             obj.annotation_select_mask = None
309         else:
310             obj.annotation_select_mask = self.annotation_select_mask.copy()
311         obj.combined_queries = tuple(query.clone() for query in self.combined_queries)
312         # _annotation_select_cache cannot be copied, as doing so breaks the
313         # (necessary) state in which both annotations and
314         # _annotation_select_cache point to the same underlying objects.
315         # It will get re-populated in the cloned queryset the next time it's
316         # used.
317         obj._annotation_select_cache = None
318         obj.extra = self.extra.copy()
319         if self.extra_select_mask is None:
320             obj.extra_select_mask = None
321         else:
322             obj.extra_select_mask = self.extra_select_mask.copy()
323         if self._extra_select_cache is None:
324             obj._extra_select_cache = None
325         else:
326             obj._extra_select_cache = self._extra_select_cache.copy()
327         if self.select_related is not False:
328             # Use deepcopy because select_related stores fields in nested
329             # dicts.
330             obj.select_related = copy.deepcopy(obj.select_related)
331         if 'subq_aliases' in self.__dict__:
332             obj.subq_aliases = self.subq_aliases.copy()
333         obj.used_aliases = self.used_aliases.copy()
334         obj._filtered_relations = self._filtered_relations.copy()
335         # Clear the cached_property
336         try:
337             del obj.base_table
338         except AttributeError:
339             pass
340         return obj
341 
342     def chain(self, klass=None):
343         """
344         Return a copy of the current Query that's ready for another operation.
345         The klass argument changes the type of the Query, e.g. UpdateQuery.
346         """
347         obj = self.clone()
348         if klass and obj.__class__ != klass:
349             obj.__class__ = klass
350         if not obj.filter_is_sticky:
351             obj.used_aliases = set()
352         obj.filter_is_sticky = False
353         if hasattr(obj, '_setup_query'):
354             obj._setup_query()
355         return obj
356 
357     def relabeled_clone(self, change_map):
358         clone = self.clone()
359         clone.change_aliases(change_map)
360         return clone
361 
362     def _get_col(self, target, field, alias):
363         if not self.alias_cols:
364             alias = None
365         return target.get_col(alias, field)
366 
367     def rewrite_cols(self, annotation, col_cnt):
368         # We must make sure the inner query has the referred columns in it.
369         # If we are aggregating over an annotation, then Django uses Ref()
370         # instances to note this. However, if we are annotating over a column
371         # of a related model, then it might be that column isn't part of the
372         # SELECT clause of the inner query, and we must manually make sure
373         # the column is selected. An example case is:
374         #    .aggregate(Sum('author__awards'))
375         # Resolving this expression results in a join to author, but there
376         # is no guarantee the awards column of author is in the select clause
377         # of the query. Thus we must manually add the column to the inner
378         # query.
379         orig_exprs = annotation.get_source_expressions()
380         new_exprs = []
381         for expr in orig_exprs:
382             # FIXME: These conditions are fairly arbitrary. Identify a better
383             # method of having expressions decide which code path they should
384             # take.
385             if isinstance(expr, Ref):
386                 # Its already a Ref to subquery (see resolve_ref() for
387                 # details)
388                 new_exprs.append(expr)
389             elif isinstance(expr, (WhereNode, Lookup)):
390                 # Decompose the subexpressions further. The code here is
391                 # copied from the else clause, but this condition must appear
392                 # before the contains_aggregate/is_summary condition below.
393                 new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
394                 new_exprs.append(new_expr)
395             else:
396                 # Reuse aliases of expressions already selected in subquery.
397                 for col_alias, selected_annotation in self.annotation_select.items():
398                     if selected_annotation is expr:
399                         new_expr = Ref(col_alias, expr)
400                         break
401                 else:
402                     # An expression that is not selected the subquery.
403                     if isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):
404                         # Reference column or another aggregate. Select it
405                         # under a non-conflicting alias.
406                         col_cnt += 1
407                         col_alias = '__col%d' % col_cnt
408                         self.annotations[col_alias] = expr
409                         self.append_annotation_mask([col_alias])
410                         new_expr = Ref(col_alias, expr)
411                     else:
412                         # Some other expression not referencing database values
413                         # directly. Its subexpression might contain Cols.
414                         new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
415                 new_exprs.append(new_expr)
416         annotation.set_source_expressions(new_exprs)
417         return annotation, col_cnt
418 
419     def get_aggregation(self, using, added_aggregate_names):
420         """
421         Return the dictionary with the values of the existing aggregations.
422         """
423         if not self.annotation_select:
424             return {}
425         existing_annotations = [
426             annotation for alias, annotation
427             in self.annotations.items()
428             if alias not in added_aggregate_names
429         ]
430         # Decide if we need to use a subquery.
431         #
432         # Existing annotations would cause incorrect results as get_aggregation()
433         # must produce just one result and thus must not use GROUP BY. But we
434         # aren't smart enough to remove the existing annotations from the
435         # query, so those would force us to use GROUP BY.
436         #
437         # If the query has limit or distinct, or uses set operations, then
438         # those operations must be done in a subquery so that the query
439         # aggregates on the limit and/or distinct results instead of applying
440         # the distinct and limit after the aggregation.
441         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or
442                 self.distinct or self.combinator):
443             from django.db.models.sql.subqueries import AggregateQuery
444             inner_query = self.clone()
445             inner_query.subquery = True
446             outer_query = AggregateQuery(self.model, inner_query)
447             inner_query.select_for_update = False
448             inner_query.select_related = False
449             inner_query.set_annotation_mask(self.annotation_select)
450             # Queries with distinct_fields need ordering and when a limit is
451             # applied we must take the slice from the ordered query. Otherwise
452             # no need for ordering.
453             inner_query.clear_ordering(force=False)
454             if not inner_query.distinct:
455                 # If the inner query uses default select and it has some
456                 # aggregate annotations, then we must make sure the inner
457                 # query is grouped by the main model's primary key. However,
458                 # clearing the select clause can alter results if distinct is
459                 # used.
460                 has_existing_aggregate_annotations = any(
461                     annotation for annotation in existing_annotations
462                     if getattr(annotation, 'contains_aggregate', True)
463                 )
464                 if inner_query.default_cols and has_existing_aggregate_annotations:
465                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
466                 inner_query.default_cols = False
467 
468             relabels = {t: 'subquery' for t in inner_query.alias_map}
469             relabels[None] = 'subquery'
470             # Remove any aggregates marked for reduction from the subquery
471             # and move them to the outer AggregateQuery.
472             col_cnt = 0
473             for alias, expression in list(inner_query.annotation_select.items()):
474                 annotation_select_mask = inner_query.annotation_select_mask
475                 if expression.is_summary:
476                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
477                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
478                     del inner_query.annotations[alias]
479                     annotation_select_mask.remove(alias)
480                 # Make sure the annotation_select wont use cached results.
481                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)
482             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
483                 # In case of Model.objects[0:3].count(), there would be no
484                 # field selected in the inner query, yet we must use a subquery.
485                 # So, make sure at least one field is selected.
486                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
487         else:
488             outer_query = self
489             self.select = ()
490             self.default_cols = False
491             self.extra = {}
492 
493         empty_aggregate_result = [
494             expression.empty_aggregate_value
495             for expression in outer_query.annotation_select.values()
496         ]
497         elide_empty = not any(result is NotImplemented for result in empty_aggregate_result)
498         outer_query.clear_ordering(force=True)
499         outer_query.clear_limits()
500         outer_query.select_for_update = False
501         outer_query.select_related = False
502         compiler = outer_query.get_compiler(using, elide_empty=elide_empty)
503         result = compiler.execute_sql(SINGLE)
504         if result is None:
505             result = empty_aggregate_result
506 
507         converters = compiler.get_converters(outer_query.annotation_select.values())
508         result = next(compiler.apply_converters((result,), converters))
509 
510         return dict(zip(outer_query.annotation_select, result))
511 
512     def get_count(self, using):
513         """
514         Perform a COUNT() query using the current filter constraints.
515         """
516         obj = self.clone()
517         obj.add_annotation(Count('*'), alias='__count', is_summary=True)
518         number = obj.get_aggregation(using, ['__count'])['__count']
519         if number is None:
520             number = 0
521         return number
522 
523     def has_filters(self):
524         return self.where
525 
526     def exists(self, using, limit=True):
527         q = self.clone()
528         if not q.distinct:
529             if q.group_by is True:
530                 q.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
531                 # Disable GROUP BY aliases to avoid orphaning references to the
532                 # SELECT clause which is about to be cleared.
533                 q.set_group_by(allow_aliases=False)
534             q.clear_select_clause()
535         if q.combined_queries and q.combinator == 'union':
536             limit_combined = connections[using].features.supports_slicing_ordering_in_compound
537             q.combined_queries = tuple(
538                 combined_query.exists(using, limit=limit_combined)
539                 for combined_query in q.combined_queries
540             )
541         q.clear_ordering(force=True)
542         if limit:
543             q.set_limits(high=1)
544         q.add_extra({'a': 1}, None, None, None, None, None)
545         q.set_extra_mask(['a'])
546         return q
547 
548     def has_results(self, using):
549         q = self.exists(using)
550         compiler = q.get_compiler(using=using)
551         return compiler.has_results()
552 
553     def explain(self, using, format=None, **options):
554         q = self.clone()
555         q.explain_query = True
556         q.explain_format = format
557         q.explain_options = options
558         compiler = q.get_compiler(using=using)
559         return '\n'.join(compiler.explain_query())
560 
561     def combine(self, rhs, connector):
562         """
563         Merge the 'rhs' query into the current one (with any 'rhs' effects
564         being applied *after* (that is, "to the right of") anything in the
565         current query. 'rhs' is not modified during a call to this function.
566 
567         The 'connector' parameter describes how to connect filters from the
568         'rhs' query.
569         """
570         if self.model != rhs.model:
571             raise TypeError('Cannot combine queries on two different base models.')
572         if self.is_sliced:
573             raise TypeError('Cannot combine queries once a slice has been taken.')
574         if self.distinct != rhs.distinct:
575             raise TypeError('Cannot combine a unique query with a non-unique query.')
576         if self.distinct_fields != rhs.distinct_fields:
577             raise TypeError('Cannot combine queries with different distinct fields.')
578 
579         # Work out how to relabel the rhs aliases, if necessary.
580         change_map = {}
581         conjunction = (connector == AND)
582 
583         # Determine which existing joins can be reused. When combining the
584         # query with AND we must recreate all joins for m2m filters. When
585         # combining with OR we can reuse joins. The reason is that in AND
586         # case a single row can't fulfill a condition like:
587         #     revrel__col=1 & revrel__col=2
588         # But, there might be two different related rows matching this
589         # condition. In OR case a single True is enough, so single row is
590         # enough, too.
591         #
592         # Note that we will be creating duplicate joins for non-m2m joins in
593         # the AND case. The results will be correct but this creates too many
594         # joins. This is something that could be fixed later on.
595         reuse = set() if conjunction else set(self.alias_map)
596         # Base table must be present in the query - this is the same
597         # table on both sides.
598         self.get_initial_alias()
599         joinpromoter = JoinPromoter(connector, 2, False)
600         joinpromoter.add_votes(
601             j for j in self.alias_map if self.alias_map[j].join_type == INNER)
602         rhs_votes = set()
603         # Now, add the joins from rhs query into the new query (skipping base
604         # table).
605         rhs_tables = list(rhs.alias_map)[1:]
606         for alias in rhs_tables:
607             join = rhs.alias_map[alias]
608             # If the left side of the join was already relabeled, use the
609             # updated alias.
610             join = join.relabeled_clone(change_map)
611             new_alias = self.join(join, reuse=reuse)
612             if join.join_type == INNER:
613                 rhs_votes.add(new_alias)
614             # We can't reuse the same join again in the query. If we have two
615             # distinct joins for the same connection in rhs query, then the
616             # combined query must have two joins, too.
617             reuse.discard(new_alias)
618             if alias != new_alias:
619                 change_map[alias] = new_alias
620             if not rhs.alias_refcount[alias]:
621                 # The alias was unused in the rhs query. Unref it so that it
622                 # will be unused in the new query, too. We have to add and
623                 # unref the alias so that join promotion has information of
624                 # the join type for the unused alias.
625                 self.unref_alias(new_alias)
626         joinpromoter.add_votes(rhs_votes)
627         joinpromoter.update_join_types(self)
628 
629         # Combine subqueries aliases to ensure aliases relabelling properly
630         # handle subqueries when combining where and select clauses.
631         self.subq_aliases |= rhs.subq_aliases
632 
633         # Now relabel a copy of the rhs where-clause and add it to the current
634         # one.
635         w = rhs.where.clone()
636         w.relabel_aliases(change_map)
637         self.where.add(w, connector)
638 
639         # Selection columns and extra extensions are those provided by 'rhs'.
640         if rhs.select:
641             self.set_select([col.relabeled_clone(change_map) for col in rhs.select])
642         else:
643             self.select = ()
644 
645         if connector == OR:
646             # It would be nice to be able to handle this, but the queries don't
647             # really make sense (or return consistent value sets). Not worth
648             # the extra complexity when you can write a real query instead.
649             if self.extra and rhs.extra:
650                 raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")
651         self.extra.update(rhs.extra)
652         extra_select_mask = set()
653         if self.extra_select_mask is not None:
654             extra_select_mask.update(self.extra_select_mask)
655         if rhs.extra_select_mask is not None:
656             extra_select_mask.update(rhs.extra_select_mask)
657         if extra_select_mask:
658             self.set_extra_mask(extra_select_mask)
659         self.extra_tables += rhs.extra_tables
660 
661         # Ordering uses the 'rhs' ordering, unless it has none, in which case
662         # the current ordering is used.
663         self.order_by = rhs.order_by or self.order_by
664         self.extra_order_by = rhs.extra_order_by or self.extra_order_by
665 
666     def deferred_to_data(self, target, callback):
667         """
668         Convert the self.deferred_loading data structure to an alternate data
669         structure, describing the field that *will* be loaded. This is used to
670         compute the columns to select from the database and also by the
671         QuerySet class to work out which fields are being initialized on each
672         model. Models that have all their fields included aren't mentioned in
673         the result, only those that have field restrictions in place.
674 
675         The "target" parameter is the instance that is populated (in place).
676         The "callback" is a function that is called whenever a (model, field)
677         pair need to be added to "target". It accepts three parameters:
678         "target", and the model and list of fields being added for that model.
679         """
680         field_names, defer = self.deferred_loading
681         if not field_names:
682             return
683         orig_opts = self.get_meta()
684         seen = {}
685         must_include = {orig_opts.concrete_model: {orig_opts.pk}}
686         for field_name in field_names:
687             parts = field_name.split(LOOKUP_SEP)
688             cur_model = self.model._meta.concrete_model
689             opts = orig_opts
690             for name in parts[:-1]:
691                 old_model = cur_model
692                 if name in self._filtered_relations:
693                     name = self._filtered_relations[name].relation_name
694                 source = opts.get_field(name)
695                 if is_reverse_o2o(source):
696                     cur_model = source.related_model
697                 else:
698                     cur_model = source.remote_field.model
699                 opts = cur_model._meta
700                 # Even if we're "just passing through" this model, we must add
701                 # both the current model's pk and the related reference field
702                 # (if it's not a reverse relation) to the things we select.
703                 if not is_reverse_o2o(source):
704                     must_include[old_model].add(source)
705                 add_to_dict(must_include, cur_model, opts.pk)
706             field = opts.get_field(parts[-1])
707             is_reverse_object = field.auto_created and not field.concrete
708             model = field.related_model if is_reverse_object else field.model
709             model = model._meta.concrete_model
710             if model == opts.model:
711                 model = cur_model
712             if not is_reverse_o2o(field):
713                 add_to_dict(seen, model, field)
714 
715         if defer:
716             # We need to load all fields for each model, except those that
717             # appear in "seen" (for all models that appear in "seen"). The only
718             # slight complexity here is handling fields that exist on parent
719             # models.
720             workset = {}
721             for model, values in seen.items():
722                 for field in model._meta.local_fields:
723                     if field not in values:
724                         m = field.model._meta.concrete_model
725                         add_to_dict(workset, m, field)
726             for model, values in must_include.items():
727                 # If we haven't included a model in workset, we don't add the
728                 # corresponding must_include fields for that model, since an
729                 # empty set means "include all fields". That's why there's no
730                 # "else" branch here.
731                 if model in workset:
732                     workset[model].update(values)
733             for model, values in workset.items():
734                 callback(target, model, values)
735         else:
736             for model, values in must_include.items():
737                 if model in seen:
738                     seen[model].update(values)
739                 else:
740                     # As we've passed through this model, but not explicitly
741                     # included any fields, we have to make sure it's mentioned
742                     # so that only the "must include" fields are pulled in.
743                     seen[model] = values
744             # Now ensure that every model in the inheritance chain is mentioned
745             # in the parent list. Again, it must be mentioned to ensure that
746             # only "must include" fields are pulled in.
747             for model in orig_opts.get_parent_list():
748                 seen.setdefault(model, set())
749             for model, values in seen.items():
750                 callback(target, model, values)
751 
752     def table_alias(self, table_name, create=False, filtered_relation=None):
753         """
754         Return a table alias for the given table_name and whether this is a
755         new alias or not.
756 
757         If 'create' is true, a new alias is always created. Otherwise, the
758         most recently created alias for the table (if one exists) is reused.
759         """
760         alias_list = self.table_map.get(table_name)
761         if not create and alias_list:
762             alias = alias_list[0]
763             self.alias_refcount[alias] += 1
764             return alias, False
765 
766         # Create a new alias for this table.
767         if alias_list:
768             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
769             alias_list.append(alias)
770         else:
771             # The first occurrence of a table uses the table name directly.
772             alias = filtered_relation.alias if filtered_relation is not None else table_name
773             self.table_map[table_name] = [alias]
774         self.alias_refcount[alias] = 1
775         return alias, True
776 
777     def ref_alias(self, alias):
778         """Increases the reference count for this alias."""
779         self.alias_refcount[alias] += 1
780 
781     def unref_alias(self, alias, amount=1):
782         """Decreases the reference count for this alias."""
783         self.alias_refcount[alias] -= amount
784 
785     def promote_joins(self, aliases):
786         """
787         Promote recursively the join type of given aliases and its children to
788         an outer join. If 'unconditional' is False, only promote the join if
789         it is nullable or the parent join is an outer join.
790 
791         The children promotion is done to avoid join chains that contain a LOUTER
792         b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,
793         then we must also promote b->c automatically, or otherwise the promotion
794         of a->b doesn't actually change anything in the query results.
795         """
796         aliases = list(aliases)
797         while aliases:
798             alias = aliases.pop(0)
799             if self.alias_map[alias].join_type is None:
800                 # This is the base table (first FROM entry) - this table
801                 # isn't really joined at all in the query, so we should not
802                 # alter its join type.
803                 continue
804             # Only the first alias (skipped above) should have None join_type
805             assert self.alias_map[alias].join_type is not None
806             parent_alias = self.alias_map[alias].parent_alias
807             parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER
808             already_louter = self.alias_map[alias].join_type == LOUTER
809             if ((self.alias_map[alias].nullable or parent_louter) and
810                     not already_louter):
811                 self.alias_map[alias] = self.alias_map[alias].promote()
812                 # Join type of 'alias' changed, so re-examine all aliases that
813                 # refer to this one.
814                 aliases.extend(
815                     join for join in self.alias_map
816                     if self.alias_map[join].parent_alias == alias and join not in aliases
817                 )
818 
819     def demote_joins(self, aliases):
820         """
821         Change join type from LOUTER to INNER for all joins in aliases.
822 
823         Similarly to promote_joins(), this method must ensure no join chains
824         containing first an outer, then an inner join are generated. If we
825         are demoting b->c join in chain a LOUTER b LOUTER c then we must
826         demote a->b automatically, or otherwise the demotion of b->c doesn't
827         actually change anything in the query results. .
828         """
829         aliases = list(aliases)
830         while aliases:
831             alias = aliases.pop(0)
832             if self.alias_map[alias].join_type == LOUTER:
833                 self.alias_map[alias] = self.alias_map[alias].demote()
834                 parent_alias = self.alias_map[alias].parent_alias
835                 if self.alias_map[parent_alias].join_type == INNER:
836                     aliases.append(parent_alias)
837 
838     def reset_refcounts(self, to_counts):
839         """
840         Reset reference counts for aliases so that they match the value passed
841         in `to_counts`.
842         """
843         for alias, cur_refcount in self.alias_refcount.copy().items():
844             unref_amount = cur_refcount - to_counts.get(alias, 0)
845             self.unref_alias(alias, unref_amount)
846 
847     def change_aliases(self, change_map):
848         """
849         Change the aliases in change_map (which maps old-alias -> new-alias),
850         relabelling any references to them in select columns and the where
851         clause.
852         """
853         assert set(change_map).isdisjoint(change_map.values())
854 
855         # 1. Update references in "select" (normal columns plus aliases),
856         # "group by" and "where".
857         self.where.relabel_aliases(change_map)
858         if isinstance(self.group_by, tuple):
859             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])
860         self.select = tuple([col.relabeled_clone(change_map) for col in self.select])
861         self.annotations = self.annotations and {
862             key: col.relabeled_clone(change_map) for key, col in self.annotations.items()
863         }
864 
865         # 2. Rename the alias in the internal table/alias datastructures.
866         for old_alias, new_alias in change_map.items():
867             if old_alias not in self.alias_map:
868                 continue
869             alias_data = self.alias_map[old_alias].relabeled_clone(change_map)
870             self.alias_map[new_alias] = alias_data
871             self.alias_refcount[new_alias] = self.alias_refcount[old_alias]
872             del self.alias_refcount[old_alias]
873             del self.alias_map[old_alias]
874 
875             table_aliases = self.table_map[alias_data.table_name]
876             for pos, alias in enumerate(table_aliases):
877                 if alias == old_alias:
878                     table_aliases[pos] = new_alias
879                     break
880         self.external_aliases = {
881             # Table is aliased or it's being changed and thus is aliased.
882             change_map.get(alias, alias): (aliased or alias in change_map)
883             for alias, aliased in self.external_aliases.items()
884         }
885 
886     def bump_prefix(self, outer_query):
887         """
888         Change the alias prefix to the next letter in the alphabet in a way
889         that the outer query's aliases and this query's aliases will not
890         conflict. Even tables that previously had no alias will get an alias
891         after this call.
892         """
893         def prefix_gen():
894             """
895             Generate a sequence of characters in alphabetical order:
896                 -> 'A', 'B', 'C', ...
897 
898             When the alphabet is finished, the sequence will continue with the
899             Cartesian product:
900                 -> 'AA', 'AB', 'AC', ...
901             """
902             alphabet = ascii_uppercase
903             prefix = chr(ord(self.alias_prefix) + 1)
904             yield prefix
905             for n in count(1):
906                 seq = alphabet[alphabet.index(prefix):] if prefix else alphabet
907                 for s in product(seq, repeat=n):
908                     yield ''.join(s)
909                 prefix = None
910 
911         if self.alias_prefix != outer_query.alias_prefix:
912             # No clashes between self and outer query should be possible.
913             return
914 
915         # Explicitly avoid infinite loop. The constant divider is based on how
916         # much depth recursive subquery references add to the stack. This value
917         # might need to be adjusted when adding or removing function calls from
918         # the code path in charge of performing these operations.
919         local_recursion_limit = sys.getrecursionlimit() // 16
920         for pos, prefix in enumerate(prefix_gen()):
921             if prefix not in self.subq_aliases:
922                 self.alias_prefix = prefix
923                 break
924             if pos > local_recursion_limit:
925                 raise RecursionError(
926                     'Maximum recursion depth exceeded: too many subqueries.'
927                 )
928         self.subq_aliases = self.subq_aliases.union([self.alias_prefix])
929         outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)
930         self.change_aliases({
931             alias: '%s%d' % (self.alias_prefix, pos)
932             for pos, alias in enumerate(self.alias_map)
933         })
934 
935     def get_initial_alias(self):
936         """
937         Return the first alias for this query, after increasing its reference
938         count.
939         """
940         if self.alias_map:
941             alias = self.base_table
942             self.ref_alias(alias)
943         else:
944             alias = self.join(BaseTable(self.get_meta().db_table, None))
945         return alias
946 
947     def count_active_tables(self):
948         """
949         Return the number of tables in this query with a non-zero reference
950         count. After execution, the reference counts are zeroed, so tables
951         added in compiler will not be seen by this method.
952         """
953         return len([1 for count in self.alias_refcount.values() if count])
954 
955     def join(self, join, reuse=None):
956         """
957         Return an alias for the 'join', either reusing an existing alias for
958         that join or creating a new one. 'join' is either a
959         sql.datastructures.BaseTable or Join.
960 
961         The 'reuse' parameter can be either None which means all joins are
962         reusable, or it can be a set containing the aliases that can be reused.
963 
964         A join is always created as LOUTER if the lhs alias is LOUTER to make
965         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new
966         joins are created as LOUTER if the join is nullable.
967         """
968         reuse_aliases = [
969             a for a, j in self.alias_map.items()
970             if (reuse is None or a in reuse) and j.equals(join)
971         ]
972         if reuse_aliases:
973             if join.table_alias in reuse_aliases:
974                 reuse_alias = join.table_alias
975             else:
976                 # Reuse the most recent alias of the joined table
977                 # (a many-to-many relation may be joined multiple times).
978                 reuse_alias = reuse_aliases[-1]
979             self.ref_alias(reuse_alias)
980             return reuse_alias
981 
982         # No reuse is possible, so we need a new alias.
983         alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)
984         if join.join_type:
985             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:
986                 join_type = LOUTER
987             else:
988                 join_type = INNER
989             join.join_type = join_type
990         join.table_alias = alias
991         self.alias_map[alias] = join
992         return alias
993 
994     def join_parent_model(self, opts, model, alias, seen):
995         """
996         Make sure the given 'model' is joined in the query. If 'model' isn't
997         a parent of 'opts' or if it is None this method is a no-op.
998 
999         The 'alias' is the root alias for starting the join, 'seen' is a dict
1000         of model -> alias of existing joins. It must also contain a mapping
1001         of None -> some alias. This will be returned in the no-op case.
1002         """
1003         if model in seen:
1004             return seen[model]
1005         chain = opts.get_base_chain(model)
1006         if not chain:
1007             return alias
1008         curr_opts = opts
1009         for int_model in chain:
1010             if int_model in seen:
1011                 curr_opts = int_model._meta
1012                 alias = seen[int_model]
1013                 continue
1014             # Proxy model have elements in base chain
1015             # with no parents, assign the new options
1016             # object and skip to the next base in that
1017             # case
1018             if not curr_opts.parents[int_model]:
1019                 curr_opts = int_model._meta
1020                 continue
1021             link_field = curr_opts.get_ancestor_link(int_model)
1022             join_info = self.setup_joins([link_field.name], curr_opts, alias)
1023             curr_opts = int_model._meta
1024             alias = seen[int_model] = join_info.joins[-1]
1025         return alias or seen[None]
1026 
1027     def add_annotation(self, annotation, alias, is_summary=False, select=True):
1028         """Add a single annotation expression to the Query."""
1029         annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
1030                                                    summarize=is_summary)
1031         if select:
1032             self.append_annotation_mask([alias])
1033         else:
1034             self.set_annotation_mask(set(self.annotation_select).difference({alias}))
1035         self.annotations[alias] = annotation
1036 
1037     def resolve_expression(self, query, *args, **kwargs):
1038         clone = self.clone()
1039         # Subqueries need to use a different set of aliases than the outer query.
1040         clone.bump_prefix(query)
1041         clone.subquery = True
1042         clone.where.resolve_expression(query, *args, **kwargs)
1043         for key, value in clone.annotations.items():
1044             resolved = value.resolve_expression(query, *args, **kwargs)
1045             if hasattr(resolved, 'external_aliases'):
1046                 resolved.external_aliases.update(clone.external_aliases)
1047             clone.annotations[key] = resolved
1048         # Outer query's aliases are considered external.
1049         for alias, table in query.alias_map.items():
1050             clone.external_aliases[alias] = (
1051                 (isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias) or
1052                 (isinstance(table, BaseTable) and table.table_name != table.table_alias)
1053             )
1054         return clone
1055 
1056     def get_external_cols(self):
1057         exprs = chain(self.annotations.values(), self.where.children)
1058         return [
1059             col for col in self._gen_cols(exprs, include_external=True)
1060             if col.alias in self.external_aliases
1061         ]
1062 
1063     def as_sql(self, compiler, connection):
1064         # Some backends (e.g. Oracle) raise an error when a subquery contains
1065         # unnecessary ORDER BY clause.
1066         if (
1067             self.subquery and
1068             not connection.features.ignores_unnecessary_order_by_in_subqueries
1069         ):
1070             self.clear_ordering(force=False)
1071         sql, params = self.get_compiler(connection=connection).as_sql()
1072         if self.subquery:
1073             sql = '(%s)' % sql
1074         return sql, params
1075 
1076     def resolve_lookup_value(self, value, can_reuse, allow_joins):
1077         if hasattr(value, 'resolve_expression'):
1078             value = value.resolve_expression(
1079                 self, reuse=can_reuse, allow_joins=allow_joins,
1080             )
1081         elif isinstance(value, (list, tuple)):
1082             # The items of the iterable may be expressions and therefore need
1083             # to be resolved independently.
1084             values = (
1085                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
1086                 for sub_value in value
1087             )
1088             type_ = type(value)
1089             if hasattr(type_, '_make'):  # namedtuple
1090                 return type_(*values)
1091             return type_(values)
1092         return value
1093 
1094     def solve_lookup_type(self, lookup):
1095         """
1096         Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').
1097         """
1098         lookup_splitted = lookup.split(LOOKUP_SEP)
1099         if self.annotations:
1100             expression, expression_lookups = refs_expression(lookup_splitted, self.annotations)
1101             if expression:
1102                 return expression_lookups, (), expression
1103         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
1104         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
1105         if len(lookup_parts) > 1 and not field_parts:
1106             raise FieldError(
1107                 'Invalid lookup "%s" for model %s".' %
1108                 (lookup, self.get_meta().model.__name__)
1109             )
1110         return lookup_parts, field_parts, False
1111 
1112     def check_query_object_type(self, value, opts, field):
1113         """
1114         Check whether the object passed while querying is of the correct type.
1115         If not, raise a ValueError specifying the wrong object.
1116         """
1117         if hasattr(value, '_meta'):
1118             if not check_rel_lookup_compatibility(value._meta.model, opts, field):
1119                 raise ValueError(
1120                     'Cannot query "%s": Must be "%s" instance.' %
1121                     (value, opts.object_name))
1122 
1123     def check_related_objects(self, field, value, opts):
1124         """Check the type of object passed to query relations."""
1125         if field.is_relation:
1126             # Check that the field and the queryset use the same model in a
1127             # query like .filter(author=Author.objects.all()). For example, the
1128             # opts would be Author's (from the author field) and value.model
1129             # would be Author.objects.all() queryset's .model (Author also).
1130             # The field is the related field on the lhs side.
1131             if (isinstance(value, Query) and not value.has_select_fields and
1132                     not check_rel_lookup_compatibility(value.model, opts, field)):
1133                 raise ValueError(
1134                     'Cannot use QuerySet for "%s": Use a QuerySet for "%s".' %
1135                     (value.model._meta.object_name, opts.object_name)
1136                 )
1137             elif hasattr(value, '_meta'):
1138                 self.check_query_object_type(value, opts, field)
1139             elif hasattr(value, '__iter__'):
1140                 for v in value:
1141                     self.check_query_object_type(v, opts, field)
1142 
1143     def check_filterable(self, expression):
1144         """Raise an error if expression cannot be used in a WHERE clause."""
1145         if (
1146             hasattr(expression, 'resolve_expression') and
1147             not getattr(expression, 'filterable', True)
1148         ):
1149             raise NotSupportedError(
1150                 expression.__class__.__name__ + ' is disallowed in the filter '
1151                 'clause.'
1152             )
1153         if hasattr(expression, 'get_source_expressions'):
1154             for expr in expression.get_source_expressions():
1155                 self.check_filterable(expr)
1156 
1157     def build_lookup(self, lookups, lhs, rhs):
1158         """
1159         Try to extract transforms and lookup from given lhs.
1160 
1161         The lhs value is something that works like SQLExpression.
1162         The rhs value is what the lookup is going to compare against.
1163         The lookups is a list of names to extract using get_lookup()
1164         and get_transform().
1165         """
1166         # __exact is the default lookup if one isn't given.
1167         *transforms, lookup_name = lookups or ['exact']
1168         for name in transforms:
1169             lhs = self.try_transform(lhs, name)
1170         # First try get_lookup() so that the lookup takes precedence if the lhs
1171         # supports both transform and lookup for the name.
1172         lookup_class = lhs.get_lookup(lookup_name)
1173         if not lookup_class:
1174             if lhs.field.is_relation:
1175                 raise FieldError('Related Field got invalid lookup: {}'.format(lookup_name))
1176             # A lookup wasn't found. Try to interpret the name as a transform
1177             # and do an Exact lookup against it.
1178             lhs = self.try_transform(lhs, lookup_name)
1179             lookup_name = 'exact'
1180             lookup_class = lhs.get_lookup(lookup_name)
1181             if not lookup_class:
1182                 return
1183 
1184         lookup = lookup_class(lhs, rhs)
1185         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all
1186         # uses of None as a query value unless the lookup supports it.
1187         if lookup.rhs is None and not lookup.can_use_none_as_rhs:
1188             if lookup_name not in ('exact', 'iexact'):
1189                 raise ValueError("Cannot use None as a query value")
1190             return lhs.get_lookup('isnull')(lhs, True)
1191 
1192         # For Oracle '' is equivalent to null. The check must be done at this
1193         # stage because join promotion can't be done in the compiler. Using
1194         # DEFAULT_DB_ALIAS isn't nice but it's the best that can be done here.
1195         # A similar thing is done in is_nullable(), too.
1196         if (connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
1197                 lookup_name == 'exact' and lookup.rhs == ''):
1198             return lhs.get_lookup('isnull')(lhs, True)
1199 
1200         return lookup
1201 
1202     def try_transform(self, lhs, name):
1203         """
1204         Helper method for build_lookup(). Try to fetch and initialize
1205         a transform for name parameter from lhs.
1206         """
1207         transform_class = lhs.get_transform(name)
1208         if transform_class:
1209             return transform_class(lhs)
1210         else:
1211             output_field = lhs.output_field.__class__
1212             suggested_lookups = difflib.get_close_matches(name, output_field.get_lookups())
1213             if suggested_lookups:
1214                 suggestion = ', perhaps you meant %s?' % ' or '.join(suggested_lookups)
1215             else:
1216                 suggestion = '.'
1217             raise FieldError(
1218                 "Unsupported lookup '%s' for %s or join on the field not "
1219                 "permitted%s" % (name, output_field.__name__, suggestion)
1220             )
1221 
1222     def build_filter(self, filter_expr, branch_negated=False, current_negated=False,
1223                      can_reuse=None, allow_joins=True, split_subq=True,
1224                      check_filterable=True):
1225         """
1226         Build a WhereNode for a single filter clause but don't add it
1227         to this Query. Query.add_q() will then add this filter to the where
1228         Node.
1229 
1230         The 'branch_negated' tells us if the current branch contains any
1231         negations. This will be used to determine if subqueries are needed.
1232 
1233         The 'current_negated' is used to determine if the current filter is
1234         negated or not and this will be used to determine if IS NULL filtering
1235         is needed.
1236 
1237         The difference between current_negated and branch_negated is that
1238         branch_negated is set on first negation, but current_negated is
1239         flipped for each negation.
1240 
1241         Note that add_filter will not do any negating itself, that is done
1242         upper in the code by add_q().
1243 
1244         The 'can_reuse' is a set of reusable joins for multijoins.
1245 
1246         The method will create a filter clause that can be added to the current
1247         query. However, if the filter isn't added to the query then the caller
1248         is responsible for unreffing the joins used.
1249         """
1250         if isinstance(filter_expr, dict):
1251             raise FieldError("Cannot parse keyword query as dict")
1252         if isinstance(filter_expr, Q):
1253             return self._add_q(
1254                 filter_expr,
1255                 branch_negated=branch_negated,
1256                 current_negated=current_negated,
1257                 used_aliases=can_reuse,
1258                 allow_joins=allow_joins,
1259                 split_subq=split_subq,
1260                 check_filterable=check_filterable,
1261             )
1262         if hasattr(filter_expr, 'resolve_expression'):
1263             if not getattr(filter_expr, 'conditional', False):
1264                 raise TypeError('Cannot filter against a non-conditional expression.')
1265             condition = filter_expr.resolve_expression(self, allow_joins=allow_joins)
1266             if not isinstance(condition, Lookup):
1267                 condition = self.build_lookup(['exact'], condition, True)
1268             clause = self.where_class()
1269             clause.add(condition, AND)
1270             return clause, []
1271         arg, value = filter_expr
1272         if not arg:
1273             raise FieldError("Cannot parse keyword query %r" % arg)
1274         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
1275 
1276         if check_filterable:
1277             self.check_filterable(reffed_expression)
1278 
1279         if not allow_joins and len(parts) > 1:
1280             raise FieldError("Joined field references are not permitted in this query")
1281 
1282         pre_joins = self.alias_refcount.copy()
1283         value = self.resolve_lookup_value(value, can_reuse, allow_joins)
1284         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}
1285 
1286         if check_filterable:
1287             self.check_filterable(value)
1288 
1289         clause = self.where_class()
1290         if reffed_expression:
1291             condition = self.build_lookup(lookups, reffed_expression, value)
1292             clause.add(condition, AND)
1293             return clause, []
1294 
1295         opts = self.get_meta()
1296         alias = self.get_initial_alias()
1297         allow_many = not branch_negated or not split_subq
1298 
1299         try:
1300             join_info = self.setup_joins(
1301                 parts, opts, alias, can_reuse=can_reuse, allow_many=allow_many,
1302             )
1303 
1304             # Prevent iterator from being consumed by check_related_objects()
1305             if isinstance(value, Iterator):
1306                 value = list(value)
1307             self.check_related_objects(join_info.final_field, value, join_info.opts)
1308 
1309             # split_exclude() needs to know which joins were generated for the
1310             # lookup parts
1311             self._lookup_joins = join_info.joins
1312         except MultiJoin as e:
1313             return self.split_exclude(filter_expr, can_reuse, e.names_with_path)
1314 
1315         # Update used_joins before trimming since they are reused to determine
1316         # which joins could be later promoted to INNER.
1317         used_joins.update(join_info.joins)
1318         targets, alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1319         if can_reuse is not None:
1320             can_reuse.update(join_list)
1321 
1322         if join_info.final_field.is_relation:
1323             # No support for transforms for relational fields
1324             num_lookups = len(lookups)
1325             if num_lookups > 1:
1326                 raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))
1327             if len(targets) == 1:
1328                 col = self._get_col(targets[0], join_info.final_field, alias)
1329             else:
1330                 col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)
1331         else:
1332             col = self._get_col(targets[0], join_info.final_field, alias)
1333 
1334         condition = self.build_lookup(lookups, col, value)
1335         lookup_type = condition.lookup_name
1336         clause.add(condition, AND)
1337 
1338         require_outer = lookup_type == 'isnull' and condition.rhs is True and not current_negated
1339         if current_negated and (lookup_type != 'isnull' or condition.rhs is False) and condition.rhs is not None:
1340             require_outer = True
1341             if lookup_type != 'isnull':
1342                 # The condition added here will be SQL like this:
1343                 # NOT (col IS NOT NULL), where the first NOT is added in
1344                 # upper layers of code. The reason for addition is that if col
1345                 # is null, then col != someval will result in SQL "unknown"
1346                 # which isn't the same as in Python. The Python None handling
1347                 # is wanted, and it can be gotten by
1348                 # (col IS NULL OR col != someval)
1349                 #   <=>
1350                 # NOT (col IS NOT NULL AND col = someval).
1351                 if (
1352                     self.is_nullable(targets[0]) or
1353                     self.alias_map[join_list[-1]].join_type == LOUTER
1354                 ):
1355                     lookup_class = targets[0].get_lookup('isnull')
1356                     col = self._get_col(targets[0], join_info.targets[0], alias)
1357                     clause.add(lookup_class(col, False), AND)
1358                 # If someval is a nullable column, someval IS NOT NULL is
1359                 # added.
1360                 if isinstance(value, Col) and self.is_nullable(value.target):
1361                     lookup_class = value.target.get_lookup('isnull')
1362                     clause.add(lookup_class(value, False), AND)
1363         return clause, used_joins if not require_outer else ()
1364 
1365     def add_filter(self, filter_clause):
1366         self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))
1367 
1368     def add_q(self, q_object):
1369         """
1370         A preprocessor for the internal _add_q(). Responsible for doing final
1371         join promotion.
1372         """
1373         # For join promotion this case is doing an AND for the added q_object
1374         # and existing conditions. So, any existing inner join forces the join
1375         # type to remain inner. Existing outer joins can however be demoted.
1376         # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if
1377         # rel_a doesn't produce any rows, then the whole condition must fail.
1378         # So, demotion is OK.
1379         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}
1380         clause, _ = self._add_q(q_object, self.used_aliases)
1381         if clause:
1382             self.where.add(clause, AND)
1383         self.demote_joins(existing_inner)
1384 
1385     def build_where(self, filter_expr):
1386         return self.build_filter(filter_expr, allow_joins=False)[0]
1387 
1388     def _add_q(self, q_object, used_aliases, branch_negated=False,
1389                current_negated=False, allow_joins=True, split_subq=True,
1390                check_filterable=True):
1391         """Add a Q-object to the current filter."""
1392         connector = q_object.connector
1393         current_negated = current_negated ^ q_object.negated
1394         branch_negated = branch_negated or q_object.negated
1395         target_clause = self.where_class(connector=connector,
1396                                          negated=q_object.negated)
1397         joinpromoter = JoinPromoter(q_object.connector, len(q_object.children), current_negated)
1398         for child in q_object.children:
1399             child_clause, needed_inner = self.build_filter(
1400                 child, can_reuse=used_aliases, branch_negated=branch_negated,
1401                 current_negated=current_negated, allow_joins=allow_joins,
1402                 split_subq=split_subq, check_filterable=check_filterable,
1403             )
1404             joinpromoter.add_votes(needed_inner)
1405             if child_clause:
1406                 target_clause.add(child_clause, connector)
1407         needed_inner = joinpromoter.update_join_types(self)
1408         return target_clause, needed_inner
1409 
1410     def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
1411         """Add a FilteredRelation object to the current filter."""
1412         connector = q_object.connector
1413         current_negated ^= q_object.negated
1414         branch_negated = branch_negated or q_object.negated
1415         target_clause = self.where_class(connector=connector, negated=q_object.negated)
1416         for child in q_object.children:
1417             if isinstance(child, Node):
1418                 child_clause = self.build_filtered_relation_q(
1419                     child, reuse=reuse, branch_negated=branch_negated,
1420                     current_negated=current_negated,
1421                 )
1422             else:
1423                 child_clause, _ = self.build_filter(
1424                     child, can_reuse=reuse, branch_negated=branch_negated,
1425                     current_negated=current_negated,
1426                     allow_joins=True, split_subq=False,
1427                 )
1428             target_clause.add(child_clause, connector)
1429         return target_clause
1430 
1431     def add_filtered_relation(self, filtered_relation, alias):
1432         filtered_relation.alias = alias
1433         lookups = dict(get_children_from_q(filtered_relation.condition))
1434         relation_lookup_parts, relation_field_parts, _ = self.solve_lookup_type(filtered_relation.relation_name)
1435         if relation_lookup_parts:
1436             raise ValueError(
1437                 "FilteredRelation's relation_name cannot contain lookups "
1438                 "(got %r)." % filtered_relation.relation_name
1439             )
1440         for lookup in chain(lookups):
1441             lookup_parts, lookup_field_parts, _ = self.solve_lookup_type(lookup)
1442             shift = 2 if not lookup_parts else 1
1443             lookup_field_path = lookup_field_parts[:-shift]
1444             for idx, lookup_field_part in enumerate(lookup_field_path):
1445                 if len(relation_field_parts) > idx:
1446                     if relation_field_parts[idx] != lookup_field_part:
1447                         raise ValueError(
1448                             "FilteredRelation's condition doesn't support "
1449                             "relations outside the %r (got %r)."
1450                             % (filtered_relation.relation_name, lookup)
1451                         )
1452                 else:
1453                     raise ValueError(
1454                         "FilteredRelation's condition doesn't support nested "
1455                         "relations deeper than the relation_name (got %r for "
1456                         "%r)." % (lookup, filtered_relation.relation_name)
1457                     )
1458         self._filtered_relations[filtered_relation.alias] = filtered_relation
1459 
1460     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
1461         """
1462         Walk the list of names and turns them into PathInfo tuples. A single
1463         name in 'names' can generate multiple PathInfos (m2m, for example).
1464 
1465         'names' is the path of names to travel, 'opts' is the model Options we
1466         start the name resolving from, 'allow_many' is as for setup_joins().
1467         If fail_on_missing is set to True, then a name that can't be resolved
1468         will generate a FieldError.
1469 
1470         Return a list of PathInfo tuples. In addition return the final field
1471         (the last used join field) and target (which is a field guaranteed to
1472         contain the same value as the final field). Finally, return those names
1473         that weren't found (which are likely transforms and the final lookup).
1474         """
1475         path, names_with_path = [], []
1476         for pos, name in enumerate(names):
1477             cur_names_with_path = (name, [])
1478             if name == 'pk':
1479                 name = opts.pk.name
1480 
1481             field = None
1482             filtered_relation = None
1483             try:
1484                 field = opts.get_field(name)
1485             except FieldDoesNotExist:
1486                 if name in self.annotation_select:
1487                     field = self.annotation_select[name].output_field
1488                 elif name in self._filtered_relations and pos == 0:
1489                     filtered_relation = self._filtered_relations[name]
1490                     if LOOKUP_SEP in filtered_relation.relation_name:
1491                         parts = filtered_relation.relation_name.split(LOOKUP_SEP)
1492                         filtered_relation_path, field, _, _ = self.names_to_path(
1493                             parts, opts, allow_many, fail_on_missing,
1494                         )
1495                         path.extend(filtered_relation_path[:-1])
1496                     else:
1497                         field = opts.get_field(filtered_relation.relation_name)
1498             if field is not None:
1499                 # Fields that contain one-to-many relations with a generic
1500                 # model (like a GenericForeignKey) cannot generate reverse
1501                 # relations and therefore cannot be used for reverse querying.
1502                 if field.is_relation and not field.related_model:
1503                     raise FieldError(
1504                         "Field %r does not generate an automatic reverse "
1505                         "relation and therefore cannot be used for reverse "
1506                         "querying. If it is a GenericForeignKey, consider "
1507                         "adding a GenericRelation." % name
1508                     )
1509                 try:
1510                     model = field.model._meta.concrete_model
1511                 except AttributeError:
1512                     # QuerySet.annotate() may introduce fields that aren't
1513                     # attached to a model.
1514                     model = None
1515             else:
1516                 # We didn't find the current field, so move position back
1517                 # one step.
1518                 pos -= 1
1519                 if pos == -1 or fail_on_missing:
1520                     available = sorted([
1521                         *get_field_names_from_opts(opts),
1522                         *self.annotation_select,
1523                         *self._filtered_relations,
1524                     ])
1525                     raise FieldError("Cannot resolve keyword '%s' into field. "
1526                                      "Choices are: %s" % (name, ", ".join(available)))
1527                 break
1528             # Check if we need any joins for concrete inheritance cases (the
1529             # field lives in parent, but we are currently in one of its
1530             # children)
1531             if model is not opts.model:
1532                 path_to_parent = opts.get_path_to_parent(model)
1533                 if path_to_parent:
1534                     path.extend(path_to_parent)
1535                     cur_names_with_path[1].extend(path_to_parent)
1536                     opts = path_to_parent[-1].to_opts
1537             if hasattr(field, 'get_path_info'):
1538                 pathinfos = field.get_path_info(filtered_relation)
1539                 if not allow_many:
1540                     for inner_pos, p in enumerate(pathinfos):
1541                         if p.m2m:
1542                             cur_names_with_path[1].extend(pathinfos[0:inner_pos + 1])
1543                             names_with_path.append(cur_names_with_path)
1544                             raise MultiJoin(pos + 1, names_with_path)
1545                 last = pathinfos[-1]
1546                 path.extend(pathinfos)
1547                 final_field = last.join_field
1548                 opts = last.to_opts
1549                 targets = last.target_fields
1550                 cur_names_with_path[1].extend(pathinfos)
1551                 names_with_path.append(cur_names_with_path)
1552             else:
1553                 # Local non-relational field.
1554                 final_field = field
1555                 targets = (field,)
1556                 if fail_on_missing and pos + 1 != len(names):
1557                     raise FieldError(
1558                         "Cannot resolve keyword %r into field. Join on '%s'"
1559                         " not permitted." % (names[pos + 1], name))
1560                 break
1561         return path, final_field, targets, names[pos + 1:]
1562 
1563     def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True):
1564         """
1565         Compute the necessary table joins for the passage through the fields
1566         given in 'names'. 'opts' is the Options class for the current model
1567         (which gives the table we are starting from), 'alias' is the alias for
1568         the table to start the joining from.
1569 
1570         The 'can_reuse' defines the reverse foreign key joins we can reuse. It
1571         can be None in which case all joins are reusable or a set of aliases
1572         that can be reused. Note that non-reverse foreign keys are always
1573         reusable when using setup_joins().
1574 
1575         If 'allow_many' is False, then any reverse foreign key seen will
1576         generate a MultiJoin exception.
1577 
1578         Return the final field involved in the joins, the target field (used
1579         for any 'where' constraint), the final 'opts' value, the joins, the
1580         field path traveled to generate the joins, and a transform function
1581         that takes a field and alias and is equivalent to `field.get_col(alias)`
1582         in the simple case but wraps field transforms if they were included in
1583         names.
1584 
1585         The target field is the field containing the concrete value. Final
1586         field can be something different, for example foreign key pointing to
1587         that value. Final field is needed for example in some value
1588         conversions (convert 'obj' in fk__id=obj to pk val using the foreign
1589         key field for example).
1590         """
1591         joins = [alias]
1592         # The transform can't be applied yet, as joins must be trimmed later.
1593         # To avoid making every caller of this method look up transforms
1594         # directly, compute transforms here and create a partial that converts
1595         # fields to the appropriate wrapped version.
1596 
1597         def final_transformer(field, alias):
1598             if not self.alias_cols:
1599                 alias = None
1600             return field.get_col(alias)
1601 
1602         # Try resolving all the names as fields first. If there's an error,
1603         # treat trailing names as lookups until a field can be resolved.
1604         last_field_exception = None
1605         for pivot in range(len(names), 0, -1):
1606             try:
1607                 path, final_field, targets, rest = self.names_to_path(
1608                     names[:pivot], opts, allow_many, fail_on_missing=True,
1609                 )
1610             except FieldError as exc:
1611                 if pivot == 1:
1612                     # The first item cannot be a lookup, so it's safe
1613                     # to raise the field error here.
1614                     raise
1615                 else:
1616                     last_field_exception = exc
1617             else:
1618                 # The transforms are the remaining items that couldn't be
1619                 # resolved into fields.
1620                 transforms = names[pivot:]
1621                 break
1622         for name in transforms:
1623             def transform(field, alias, *, name, previous):
1624                 try:
1625                     wrapped = previous(field, alias)
1626                     return self.try_transform(wrapped, name)
1627                 except FieldError:
1628                     # FieldError is raised if the transform doesn't exist.
1629                     if isinstance(final_field, Field) and last_field_exception:
1630                         raise last_field_exception
1631                     else:
1632                         raise
1633             final_transformer = functools.partial(transform, name=name, previous=final_transformer)
1634         # Then, add the path to the query's joins. Note that we can't trim
1635         # joins at this stage - we will need the information about join type
1636         # of the trimmed joins.
1637         for join in path:
1638             if join.filtered_relation:
1639                 filtered_relation = join.filtered_relation.clone()
1640                 table_alias = filtered_relation.alias
1641             else:
1642                 filtered_relation = None
1643                 table_alias = None
1644             opts = join.to_opts
1645             if join.direct:
1646                 nullable = self.is_nullable(join.join_field)
1647             else:
1648                 nullable = True
1649             connection = Join(
1650                 opts.db_table, alias, table_alias, INNER, join.join_field,
1651                 nullable, filtered_relation=filtered_relation,
1652             )
1653             reuse = can_reuse if join.m2m else None
1654             alias = self.join(connection, reuse=reuse)
1655             joins.append(alias)
1656             if filtered_relation:
1657                 filtered_relation.path = joins[:]
1658         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)
1659 
1660     def trim_joins(self, targets, joins, path):
1661         """
1662         The 'target' parameter is the final field being joined to, 'joins'
1663         is the full list of join aliases. The 'path' contain the PathInfos
1664         used to create the joins.
1665 
1666         Return the final target field and table alias and the new active
1667         joins.
1668 
1669         Always trim any direct join if the target column is already in the
1670         previous table. Can't trim reverse joins as it's unknown if there's
1671         anything on the other side of the join.
1672         """
1673         joins = joins[:]
1674         for pos, info in enumerate(reversed(path)):
1675             if len(joins) == 1 or not info.direct:
1676                 break
1677             if info.filtered_relation:
1678                 break
1679             join_targets = {t.column for t in info.join_field.foreign_related_fields}
1680             cur_targets = {t.column for t in targets}
1681             if not cur_targets.issubset(join_targets):
1682                 break
1683             targets_dict = {r[1].column: r[0] for r in info.join_field.related_fields if r[1].column in cur_targets}
1684             targets = tuple(targets_dict[t.column] for t in targets)
1685             self.unref_alias(joins.pop())
1686         return targets, joins[-1], joins
1687 
1688     @classmethod
1689     def _gen_cols(cls, exprs, include_external=False):
1690         for expr in exprs:
1691             if isinstance(expr, Col):
1692                 yield expr
1693             elif include_external and callable(getattr(expr, 'get_external_cols', None)):
1694                 yield from expr.get_external_cols()
1695             else:
1696                 yield from cls._gen_cols(
1697                     expr.get_source_expressions(),
1698                     include_external=include_external,
1699                 )
1700 
1701     @classmethod
1702     def _gen_col_aliases(cls, exprs):
1703         yield from (expr.alias for expr in cls._gen_cols(exprs))
1704 
1705     def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False):
1706         annotation = self.annotations.get(name)
1707         if annotation is not None:
1708             if not allow_joins:
1709                 for alias in self._gen_col_aliases([annotation]):
1710                     if isinstance(self.alias_map[alias], Join):
1711                         raise FieldError(
1712                             'Joined field references are not permitted in '
1713                             'this query'
1714                         )
1715             if summarize:
1716                 # Summarize currently means we are doing an aggregate() query
1717                 # which is executed as a wrapped subquery if any of the
1718                 # aggregate() elements reference an existing annotation. In
1719                 # that case we need to return a Ref to the subquery's annotation.
1720                 if name not in self.annotation_select:
1721                     raise FieldError(
1722                         "Cannot aggregate over the '%s' alias. Use annotate() "
1723                         "to promote it." % name
1724                     )
1725                 return Ref(name, self.annotation_select[name])
1726             else:
1727                 return annotation
1728         else:
1729             field_list = name.split(LOOKUP_SEP)
1730             annotation = self.annotations.get(field_list[0])
1731             if annotation is not None:
1732                 for transform in field_list[1:]:
1733                     annotation = self.try_transform(annotation, transform)
1734                 return annotation
1735             join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)
1736             targets, final_alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1737             if not allow_joins and len(join_list) > 1:
1738                 raise FieldError('Joined field references are not permitted in this query')
1739             if len(targets) > 1:
1740                 raise FieldError("Referencing multicolumn fields with F() objects "
1741                                  "isn't supported")
1742             # Verify that the last lookup in name is a field or a transform:
1743             # transform_function() raises FieldError if not.
1744             transform = join_info.transform_function(targets[0], final_alias)
1745             if reuse is not None:
1746                 reuse.update(join_list)
1747             return transform
1748 
1749     def split_exclude(self, filter_expr, can_reuse, names_with_path):
1750         """
1751         When doing an exclude against any kind of N-to-many relation, we need
1752         to use a subquery. This method constructs the nested query, given the
1753         original exclude filter (filter_expr) and the portion up to the first
1754         N-to-many relation field.
1755 
1756         For example, if the origin filter is ~Q(child__name='foo'), filter_expr
1757         is ('child__name', 'foo') and can_reuse is a set of joins usable for
1758         filters in the original query.
1759 
1760         We will turn this into equivalent of:
1761             WHERE NOT EXISTS(
1762                 SELECT 1
1763                 FROM child
1764                 WHERE name = 'foo' AND child.parent_id = parent.id
1765                 LIMIT 1
1766             )
1767         """
1768         filter_lhs, filter_rhs = filter_expr
1769         if isinstance(filter_rhs, OuterRef):
1770             filter_expr = (filter_lhs, OuterRef(filter_rhs))
1771         elif isinstance(filter_rhs, F):
1772             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
1773         # Generate the inner query.
1774         query = Query(self.model)
1775         query._filtered_relations = self._filtered_relations
1776         query.add_filter(filter_expr)
1777         query.clear_ordering(force=True)
1778         # Try to have as simple as possible subquery -> trim leading joins from
1779         # the subquery.
1780         trimmed_prefix, contains_louter = query.trim_start(names_with_path)
1781 
1782         col = query.select[0]
1783         select_field = col.target
1784         alias = col.alias
1785         if alias in can_reuse:
1786             pk = select_field.model._meta.pk
1787             # Need to add a restriction so that outer query's filters are in effect for
1788             # the subquery, too.
1789             query.bump_prefix(self)
1790             lookup_class = select_field.get_lookup('exact')
1791             # Note that the query.select[0].alias is different from alias
1792             # due to bump_prefix above.
1793             lookup = lookup_class(pk.get_col(query.select[0].alias),
1794                                   pk.get_col(alias))
1795             query.where.add(lookup, AND)
1796             query.external_aliases[alias] = True
1797 
1798         lookup_class = select_field.get_lookup('exact')
1799         lookup = lookup_class(col, ResolvedOuterRef(trimmed_prefix))
1800         query.where.add(lookup, AND)
1801         condition, needed_inner = self.build_filter(Exists(query))
1802 
1803         if contains_louter:
1804             or_null_condition, _ = self.build_filter(
1805                 ('%s__isnull' % trimmed_prefix, True),
1806                 current_negated=True, branch_negated=True, can_reuse=can_reuse)
1807             condition.add(or_null_condition, OR)
1808             # Note that the end result will be:
1809             # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.
1810             # This might look crazy but due to how IN works, this seems to be
1811             # correct. If the IS NOT NULL check is removed then outercol NOT
1812             # IN will return UNKNOWN. If the IS NULL check is removed, then if
1813             # outercol IS NULL we will not match the row.
1814         return condition, needed_inner
1815 
1816     def set_empty(self):
1817         self.where.add(NothingNode(), AND)
1818         for query in self.combined_queries:
1819             query.set_empty()
1820 
1821     def is_empty(self):
1822         return any(isinstance(c, NothingNode) for c in self.where.children)
1823 
1824     def set_limits(self, low=None, high=None):
1825         """
1826         Adjust the limits on the rows retrieved. Use low/high to set these,
1827         as it makes it more Pythonic to read and write. When the SQL query is
1828         created, convert them to the appropriate offset and limit values.
1829 
1830         Apply any limits passed in here to the existing constraints. Add low
1831         to the current low value and clamp both to any existing high value.
1832         """
1833         if high is not None:
1834             if self.high_mark is not None:
1835                 self.high_mark = min(self.high_mark, self.low_mark + high)
1836             else:
1837                 self.high_mark = self.low_mark + high
1838         if low is not None:
1839             if self.high_mark is not None:
1840                 self.low_mark = min(self.high_mark, self.low_mark + low)
1841             else:
1842                 self.low_mark = self.low_mark + low
1843 
1844         if self.low_mark == self.high_mark:
1845             self.set_empty()
1846 
1847     def clear_limits(self):
1848         """Clear any existing limits."""
1849         self.low_mark, self.high_mark = 0, None
1850 
1851     @property
1852     def is_sliced(self):
1853         return self.low_mark != 0 or self.high_mark is not None
1854 
1855     def has_limit_one(self):
1856         return self.high_mark is not None and (self.high_mark - self.low_mark) == 1
1857 
1858     def can_filter(self):
1859         """
1860         Return True if adding filters to this instance is still possible.
1861 
1862         Typically, this means no limits or offsets have been put on the results.
1863         """
1864         return not self.is_sliced
1865 
1866     def clear_select_clause(self):
1867         """Remove all fields from SELECT clause."""
1868         self.select = ()
1869         self.default_cols = False
1870         self.select_related = False
1871         self.set_extra_mask(())
1872         self.set_annotation_mask(())
1873 
1874     def clear_select_fields(self):
1875         """
1876         Clear the list of fields to select (but not extra_select columns).
1877         Some queryset types completely replace any existing list of select
1878         columns.
1879         """
1880         self.select = ()
1881         self.values_select = ()
1882 
1883     def add_select_col(self, col, name):
1884         self.select += col,
1885         self.values_select += name,
1886 
1887     def set_select(self, cols):
1888         self.default_cols = False
1889         self.select = tuple(cols)
1890 
1891     def add_distinct_fields(self, *field_names):
1892         """
1893         Add and resolve the given fields to the query's "distinct on" clause.
1894         """
1895         self.distinct_fields = field_names
1896         self.distinct = True
1897 
1898     def add_fields(self, field_names, allow_m2m=True):
1899         """
1900         Add the given (model) fields to the select set. Add the field names in
1901         the order specified.
1902         """
1903         alias = self.get_initial_alias()
1904         opts = self.get_meta()
1905 
1906         try:
1907             cols = []
1908             for name in field_names:
1909                 # Join promotion note - we must not remove any rows here, so
1910                 # if there is no existing joins, use outer join.
1911                 join_info = self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m)
1912                 targets, final_alias, joins = self.trim_joins(
1913                     join_info.targets,
1914                     join_info.joins,
1915                     join_info.path,
1916                 )
1917                 for target in targets:
1918                     cols.append(join_info.transform_function(target, final_alias))
1919             if cols:
1920                 self.set_select(cols)
1921         except MultiJoin:
1922             raise FieldError("Invalid field name: '%s'" % name)
1923         except FieldError:
1924             if LOOKUP_SEP in name:
1925                 # For lookups spanning over relationships, show the error
1926                 # from the model on which the lookup failed.
1927                 raise
1928             elif name in self.annotations:
1929                 raise FieldError(
1930                     "Cannot select the '%s' alias. Use annotate() to promote "
1931                     "it." % name
1932                 )
1933             else:
1934                 names = sorted([
1935                     *get_field_names_from_opts(opts), *self.extra,
1936                     *self.annotation_select, *self._filtered_relations
1937                 ])
1938                 raise FieldError("Cannot resolve keyword %r into field. "
1939                                  "Choices are: %s" % (name, ", ".join(names)))
1940 
1941     def add_ordering(self, *ordering):
1942         """
1943         Add items from the 'ordering' sequence to the query's "order by"
1944         clause. These items are either field names (not column names) --
1945         possibly with a direction prefix ('-' or '?') -- or OrderBy
1946         expressions.
1947 
1948         If 'ordering' is empty, clear all ordering from the query.
1949         """
1950         errors = []
1951         for item in ordering:
1952             if isinstance(item, str):
1953                 if item == '?':
1954                     continue
1955                 if item.startswith('-'):
1956                     item = item[1:]
1957                 if item in self.annotations:
1958                     continue
1959                 if self.extra and item in self.extra:
1960                     continue
1961                 # names_to_path() validates the lookup. A descriptive
1962                 # FieldError will be raise if it's not.
1963                 self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)
1964             elif not hasattr(item, 'resolve_expression'):
1965                 errors.append(item)
1966             if getattr(item, 'contains_aggregate', False):
1967                 raise FieldError(
1968                     'Using an aggregate in order_by() without also including '
1969                     'it in annotate() is not allowed: %s' % item
1970                 )
1971         if errors:
1972             raise FieldError('Invalid order_by arguments: %s' % errors)
1973         if ordering:
1974             self.order_by += ordering
1975         else:
1976             self.default_ordering = False
1977 
1978     def clear_ordering(self, force=False, clear_default=True):
1979         """
1980         Remove any ordering settings if the current query allows it without
1981         side effects, set 'force' to True to clear the ordering regardless.
1982         If 'clear_default' is True, there will be no ordering in the resulting
1983         query (not even the model's default).
1984         """
1985         if not force and (self.is_sliced or self.distinct_fields or self.select_for_update):
1986             return
1987         self.order_by = ()
1988         self.extra_order_by = ()
1989         if clear_default:
1990             self.default_ordering = False
1991 
1992     def set_group_by(self, allow_aliases=True):
1993         """
1994         Expand the GROUP BY clause required by the query.
1995 
1996         This will usually be the set of all non-aggregate fields in the
1997         return data. If the database backend supports grouping by the
1998         primary key, and the query would be equivalent, the optimization
1999         will be made automatically.
2000         """
2001         # Column names from JOINs to check collisions with aliases.
2002         if allow_aliases:
2003             column_names = set()
2004             seen_models = set()
2005             for join in list(self.alias_map.values())[1:]:  # Skip base table.
2006                 model = join.join_field.related_model
2007                 if model not in seen_models:
2008                     column_names.update({
2009                         field.column
2010                         for field in model._meta.local_concrete_fields
2011                     })
2012                     seen_models.add(model)
2013 
2014         group_by = list(self.select)
2015         if self.annotation_select:
2016             for alias, annotation in self.annotation_select.items():
2017                 if not allow_aliases or alias in column_names:
2018                     alias = None
2019                 group_by_cols = annotation.get_group_by_cols(alias=alias)
2020                 group_by.extend(group_by_cols)
2021         self.group_by = tuple(group_by)
2022 
2023     def add_select_related(self, fields):
2024         """
2025         Set up the select_related data structure so that we only select
2026         certain related models (as opposed to all models, when
2027         self.select_related=True).
2028         """
2029         if isinstance(self.select_related, bool):
2030             field_dict = {}
2031         else:
2032             field_dict = self.select_related
2033         for field in fields:
2034             d = field_dict
2035             for part in field.split(LOOKUP_SEP):
2036                 d = d.setdefault(part, {})
2037         self.select_related = field_dict
2038 
2039     def add_extra(self, select, select_params, where, params, tables, order_by):
2040         """
2041         Add data to the various extra_* attributes for user-created additions
2042         to the query.
2043         """
2044         if select:
2045             # We need to pair any placeholder markers in the 'select'
2046             # dictionary with their parameters in 'select_params' so that
2047             # subsequent updates to the select dictionary also adjust the
2048             # parameters appropriately.
2049             select_pairs = {}
2050             if select_params:
2051                 param_iter = iter(select_params)
2052             else:
2053                 param_iter = iter([])
2054             for name, entry in select.items():
2055                 entry = str(entry)
2056                 entry_params = []
2057                 pos = entry.find("%s")
2058                 while pos != -1:
2059                     if pos == 0 or entry[pos - 1] != '%':
2060                         entry_params.append(next(param_iter))
2061                     pos = entry.find("%s", pos + 2)
2062                 select_pairs[name] = (entry, entry_params)
2063             self.extra.update(select_pairs)
2064         if where or params:
2065             self.where.add(ExtraWhere(where, params), AND)
2066         if tables:
2067             self.extra_tables += tuple(tables)
2068         if order_by:
2069             self.extra_order_by = order_by
2070 
2071     def clear_deferred_loading(self):
2072         """Remove any fields from the deferred loading set."""
2073         self.deferred_loading = (frozenset(), True)
2074 
2075     def add_deferred_loading(self, field_names):
2076         """
2077         Add the given list of model field names to the set of fields to
2078         exclude from loading from the database when automatic column selection
2079         is done. Add the new field names to any existing field names that
2080         are deferred (or removed from any existing field names that are marked
2081         as the only ones for immediate loading).
2082         """
2083         # Fields on related models are stored in the literal double-underscore
2084         # format, so that we can use a set datastructure. We do the foo__bar
2085         # splitting and handling when computing the SQL column names (as part of
2086         # get_columns()).
2087         existing, defer = self.deferred_loading
2088         if defer:
2089             # Add to existing deferred names.
2090             self.deferred_loading = existing.union(field_names), True
2091         else:
2092             # Remove names from the set of any existing "immediate load" names.
2093             self.deferred_loading = existing.difference(field_names), False
2094 
2095     def add_immediate_loading(self, field_names):
2096         """
2097         Add the given list of model field names to the set of fields to
2098         retrieve when the SQL is executed ("immediate loading" fields). The
2099         field names replace any existing immediate loading field names. If
2100         there are field names already specified for deferred loading, remove
2101         those names from the new field_names before storing the new names
2102         for immediate loading. (That is, immediate loading overrides any
2103         existing immediate values, but respects existing deferrals.)
2104         """
2105         existing, defer = self.deferred_loading
2106         field_names = set(field_names)
2107         if 'pk' in field_names:
2108             field_names.remove('pk')
2109             field_names.add(self.get_meta().pk.name)
2110 
2111         if defer:
2112             # Remove any existing deferred names from the current set before
2113             # setting the new names.
2114             self.deferred_loading = field_names.difference(existing), False
2115         else:
2116             # Replace any existing "immediate load" field names.
2117             self.deferred_loading = frozenset(field_names), False
2118 
2119     def get_loaded_field_names(self):
2120         """
2121         If any fields are marked to be deferred, return a dictionary mapping
2122         models to a set of names in those fields that will be loaded. If a
2123         model is not in the returned dictionary, none of its fields are
2124         deferred.
2125 
2126         If no fields are marked for deferral, return an empty dictionary.
2127         """
2128         # We cache this because we call this function multiple times
2129         # (compiler.fill_related_selections, query.iterator)
2130         try:
2131             return self._loaded_field_names_cache
2132         except AttributeError:
2133             collection = {}
2134             self.deferred_to_data(collection, self.get_loaded_field_names_cb)
2135             self._loaded_field_names_cache = collection
2136             return collection
2137 
2138     def get_loaded_field_names_cb(self, target, model, fields):
2139         """Callback used by get_deferred_field_names()."""
2140         target[model] = {f.attname for f in fields}
2141 
2142     def set_annotation_mask(self, names):
2143         """Set the mask of annotations that will be returned by the SELECT."""
2144         if names is None:
2145             self.annotation_select_mask = None
2146         else:
2147             self.annotation_select_mask = set(names)
2148         self._annotation_select_cache = None
2149 
2150     def append_annotation_mask(self, names):
2151         if self.annotation_select_mask is not None:
2152             self.set_annotation_mask(self.annotation_select_mask.union(names))
2153 
2154     def set_extra_mask(self, names):
2155         """
2156         Set the mask of extra select items that will be returned by SELECT.
2157         Don't remove them from the Query since they might be used later.
2158         """
2159         if names is None:
2160             self.extra_select_mask = None
2161         else:
2162             self.extra_select_mask = set(names)
2163         self._extra_select_cache = None
2164 
2165     def set_values(self, fields):
2166         self.select_related = False
2167         self.clear_deferred_loading()
2168         self.clear_select_fields()
2169 
2170         if fields:
2171             field_names = []
2172             extra_names = []
2173             annotation_names = []
2174             if not self.extra and not self.annotations:
2175                 # Shortcut - if there are no extra or annotations, then
2176                 # the values() clause must be just field names.
2177                 field_names = list(fields)
2178             else:
2179                 self.default_cols = False
2180                 for f in fields:
2181                     if f in self.extra_select:
2182                         extra_names.append(f)
2183                     elif f in self.annotation_select:
2184                         annotation_names.append(f)
2185                     else:
2186                         field_names.append(f)
2187             self.set_extra_mask(extra_names)
2188             self.set_annotation_mask(annotation_names)
2189             selected = frozenset(field_names + extra_names + annotation_names)
2190         else:
2191             field_names = [f.attname for f in self.model._meta.concrete_fields]
2192             selected = frozenset(field_names)
2193         # Selected annotations must be known before setting the GROUP BY
2194         # clause.
2195         if self.group_by is True:
2196             self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
2197             # Disable GROUP BY aliases to avoid orphaning references to the
2198             # SELECT clause which is about to be cleared.
2199             self.set_group_by(allow_aliases=False)
2200             self.clear_select_fields()
2201         elif self.group_by:
2202             # Resolve GROUP BY annotation references if they are not part of
2203             # the selected fields anymore.
2204             group_by = []
2205             for expr in self.group_by:
2206                 if isinstance(expr, Ref) and expr.refs not in selected:
2207                     expr = self.annotations[expr.refs]
2208                 group_by.append(expr)
2209             self.group_by = tuple(group_by)
2210 
2211         self.values_select = tuple(field_names)
2212         self.add_fields(field_names, True)
2213 
2214     @property
2215     def annotation_select(self):
2216         """
2217         Return the dictionary of aggregate columns that are not masked and
2218         should be used in the SELECT clause. Cache this result for performance.
2219         """
2220         if self._annotation_select_cache is not None:
2221             return self._annotation_select_cache
2222         elif not self.annotations:
2223             return {}
2224         elif self.annotation_select_mask is not None:
2225             self._annotation_select_cache = {
2226                 k: v for k, v in self.annotations.items()
2227                 if k in self.annotation_select_mask
2228             }
2229             return self._annotation_select_cache
2230         else:
2231             return self.annotations
2232 
2233     @property
2234     def extra_select(self):
2235         if self._extra_select_cache is not None:
2236             return self._extra_select_cache
2237         if not self.extra:
2238             return {}
2239         elif self.extra_select_mask is not None:
2240             self._extra_select_cache = {
2241                 k: v for k, v in self.extra.items()
2242                 if k in self.extra_select_mask
2243             }
2244             return self._extra_select_cache
2245         else:
2246             return self.extra
2247 
2248     def trim_start(self, names_with_path):
2249         """
2250         Trim joins from the start of the join path. The candidates for trim
2251         are the PathInfos in names_with_path structure that are m2m joins.
2252 
2253         Also set the select column so the start matches the join.
2254 
2255         This method is meant to be used for generating the subquery joins &
2256         cols in split_exclude().
2257 
2258         Return a lookup usable for doing outerq.filter(lookup=self) and a
2259         boolean indicating if the joins in the prefix contain a LEFT OUTER join.
2260         _"""
2261         all_paths = []
2262         for _, paths in names_with_path:
2263             all_paths.extend(paths)
2264         contains_louter = False
2265         # Trim and operate only on tables that were generated for
2266         # the lookup part of the query. That is, avoid trimming
2267         # joins generated for F() expressions.
2268         lookup_tables = [
2269             t for t in self.alias_map
2270             if t in self._lookup_joins or t == self.base_table
2271         ]
2272         for trimmed_paths, path in enumerate(all_paths):
2273             if path.m2m:
2274                 break
2275             if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type == LOUTER:
2276                 contains_louter = True
2277             alias = lookup_tables[trimmed_paths]
2278             self.unref_alias(alias)
2279         # The path.join_field is a Rel, lets get the other side's field
2280         join_field = path.join_field.field
2281         # Build the filter prefix.
2282         paths_in_prefix = trimmed_paths
2283         trimmed_prefix = []
2284         for name, path in names_with_path:
2285             if paths_in_prefix - len(path) < 0:
2286                 break
2287             trimmed_prefix.append(name)
2288             paths_in_prefix -= len(path)
2289         trimmed_prefix.append(
2290             join_field.foreign_related_fields[0].name)
2291         trimmed_prefix = LOOKUP_SEP.join(trimmed_prefix)
2292         # Lets still see if we can trim the first join from the inner query
2293         # (that is, self). We can't do this for:
2294         # - LEFT JOINs because we would miss those rows that have nothing on
2295         #   the outer side,
2296         # - INNER JOINs from filtered relations because we would miss their
2297         #   filters.
2298         first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]
2299         if first_join.join_type != LOUTER and not first_join.filtered_relation:
2300             select_fields = [r[0] for r in join_field.related_fields]
2301             select_alias = lookup_tables[trimmed_paths + 1]
2302             self.unref_alias(lookup_tables[trimmed_paths])
2303             extra_restriction = join_field.get_extra_restriction(
2304                 self.where_class, None, lookup_tables[trimmed_paths + 1])
2305             if extra_restriction:
2306                 self.where.add(extra_restriction, AND)
2307         else:
2308             # TODO: It might be possible to trim more joins from the start of the
2309             # inner query if it happens to have a longer join chain containing the
2310             # values in select_fields. Lets punt this one for now.
2311             select_fields = [r[1] for r in join_field.related_fields]
2312             select_alias = lookup_tables[trimmed_paths]
2313         # The found starting point is likely a Join instead of a BaseTable reference.
2314         # But the first entry in the query's FROM clause must not be a JOIN.
2315         for table in self.alias_map:
2316             if self.alias_refcount[table] > 0:
2317                 self.alias_map[table] = BaseTable(self.alias_map[table].table_name, table)
2318                 break
2319         self.set_select([f.get_col(select_alias) for f in select_fields])
2320         return trimmed_prefix, contains_louter
2321 
2322     def is_nullable(self, field):
2323         """
2324         Check if the given field should be treated as nullable.
2325 
2326         Some backends treat '' as null and Django treats such fields as
2327         nullable for those backends. In such situations field.null can be
2328         False even if we should treat the field as nullable.
2329         """
2330         # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have
2331         # (nor should it have) knowledge of which connection is going to be
2332         # used. The proper fix would be to defer all decisions where
2333         # is_nullable() is needed to the compiler stage, but that is not easy
2334         # to do currently.
2335         return (
2336             connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
2337             field.empty_strings_allowed
2338         ) or field.null

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>]
2025-10-15 18:51:12.178 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-15 18:51:12.178 | INFO     | Search-only: skipping patch selection
2025-10-15 18:51:12.315 | INFO     | Task django__django-14026 completed successfully.
2025-10-15 18:51:12.316 | INFO     | No patch generated. You can try running ACR again.
