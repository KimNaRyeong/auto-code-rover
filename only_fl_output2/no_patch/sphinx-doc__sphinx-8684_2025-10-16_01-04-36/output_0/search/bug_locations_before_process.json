[
    {
        "file": "sphinx/directives/code.py",
        "class": "CodeBlock",
        "method": "run",
        "intended_behavior": "Within the run method of the CodeBlock class, when processing the dedent option, if it is present without an explicit value (or possibly with a particular value indicating auto-dedentation), the code should perform a full dedentation based on the least common whitespace found in the code block. This mirrors Python's textwrap.dedent behavior and would necessitate parsing and adjusting the current handling of the dedent option. This functionality should be added in such a way that it does not interfere with the existing ability to specify a fixed number of spaces to dedent."
    },
    {
        "file": "sphinx/directives/code.py",
        "class": "LiteralInclude",
        "method": "run",
        "intended_behavior": "The LiteralInclude class\u2019s run method should similarly be modified to handle auto-dedentation when the dedent option is provided without a specific value. The method should automatically calculate the minimum indentation of the included file and remove this amount of leading whitespace. This would be particularly useful for ensuring that included code matches the indentation style of the documentation without manual adjustment. Care should be taken to ensure this automatic deduction only occurs when explicitly requested (to preserve backwards compatibility and explicit control when needed)."
    }
]