[
    {
        "rel_file_path": "sympy/physics/units/quantities.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.12/sympy/physics/units/quantities.py",
        "start": 1,
        "end": 253,
        "class_name": null,
        "method_name": null,
        "code": "1 \"\"\"\n2 Physical quantities.\n3 \"\"\"\n4 \n5 from sympy.core.expr import AtomicExpr\n6 from sympy.core.symbol import Symbol\n7 from sympy.core.sympify import sympify\n8 from sympy.physics.units.dimensions import _QuantityMapper\n9 from sympy.physics.units.prefixes import Prefix\n10 from sympy.utilities.exceptions import (sympy_deprecation_warning,\n11                                         SymPyDeprecationWarning,\n12                                         ignore_warnings)\n13 \n14 \n15 class Quantity(AtomicExpr):\n16     \"\"\"\n17     Physical quantity: can be a unit of measure, a constant or a generic quantity.\n18     \"\"\"\n19 \n20     is_commutative = True\n21     is_real = True\n22     is_number = False\n23     is_nonzero = True\n24     is_physical_constant = False\n25     _diff_wrt = True\n26 \n27     def __new__(cls, name, abbrev=None, dimension=None, scale_factor=None,\n28                 latex_repr=None, pretty_unicode_repr=None,\n29                 pretty_ascii_repr=None, mathml_presentation_repr=None,\n30                 is_prefixed=False,\n31                 **assumptions):\n32 \n33         if not isinstance(name, Symbol):\n34             name = Symbol(name)\n35 \n36         # For Quantity(name, dim, scale, abbrev) to work like in the\n37         # old version of SymPy:\n38         if not isinstance(abbrev, str) and not \\\n39                    isinstance(abbrev, Symbol):\n40             dimension, scale_factor, abbrev = abbrev, dimension, scale_factor\n41 \n42         if dimension is not None:\n43             sympy_deprecation_warning(\n44                 \"\"\"\n45                 The 'dimension' argument to to Quantity() is deprecated.\n46                 Instead use the unit_system.set_quantity_dimension() method.\n47                 \"\"\",\n48                 deprecated_since_version=\"1.3\",\n49                 active_deprecations_target=\"deprecated-quantity-dimension-scale-factor\"\n50             )\n51 \n52         if scale_factor is not None:\n53             sympy_deprecation_warning(\n54                 \"\"\"\n55                 The 'scale_factor' argument to to Quantity() is deprecated.\n56                 Instead use the unit_system.set_quantity_scale_factors()\n57                 method.\n58                 \"\"\",\n59                 deprecated_since_version=\"1.3\",\n60                 active_deprecations_target=\"deprecated-quantity-dimension-scale-factor\"\n61             )\n62 \n63         if abbrev is None:\n64             abbrev = name\n65         elif isinstance(abbrev, str):\n66             abbrev = Symbol(abbrev)\n67 \n68         # HACK: These are here purely for type checking. They actually get assigned below.\n69         cls._is_prefixed = is_prefixed\n70 \n71         obj = AtomicExpr.__new__(cls, name, abbrev)\n72         obj._name = name\n73         obj._abbrev = abbrev\n74         obj._latex_repr = latex_repr\n75         obj._unicode_repr = pretty_unicode_repr\n76         obj._ascii_repr = pretty_ascii_repr\n77         obj._mathml_repr = mathml_presentation_repr\n78         obj._is_prefixed = is_prefixed\n79 \n80         if dimension is not None:\n81             # TODO: remove after deprecation:\n82             with ignore_warnings(SymPyDeprecationWarning):\n83                 obj.set_dimension(dimension)\n84 \n85         if scale_factor is not None:\n86             # TODO: remove after deprecation:\n87             with ignore_warnings(SymPyDeprecationWarning):\n88                 obj.set_scale_factor(scale_factor)\n89 \n90         return obj\n91 \n92     def set_dimension(self, dimension, unit_system=\"SI\"):\n93         sympy_deprecation_warning(\n94             f\"\"\"\n95             Quantity.set_dimension() is deprecated. Use either\n96             unit_system.set_quantity_dimension() or\n97             {self}.set_global_dimension() instead.\n98             \"\"\",\n99             deprecated_since_version=\"1.5\",\n100             active_deprecations_target=\"deprecated-quantity-methods\",\n101         )\n102         from sympy.physics.units import UnitSystem\n103         unit_system = UnitSystem.get_unit_system(unit_system)\n104         unit_system.set_quantity_dimension(self, dimension)\n105 \n106     def set_scale_factor(self, scale_factor, unit_system=\"SI\"):\n107         sympy_deprecation_warning(\n108             f\"\"\"\n109             Quantity.set_scale_factor() is deprecated. Use either\n110             unit_system.set_quantity_scale_factors() or\n111             {self}.set_global_relative_scale_factor() instead.\n112             \"\"\",\n113             deprecated_since_version=\"1.5\",\n114             active_deprecations_target=\"deprecated-quantity-methods\",\n115         )\n116         from sympy.physics.units import UnitSystem\n117         unit_system = UnitSystem.get_unit_system(unit_system)\n118         unit_system.set_quantity_scale_factor(self, scale_factor)\n119 \n120     def set_global_dimension(self, dimension):\n121         _QuantityMapper._quantity_dimension_global[self] = dimension\n122 \n123     def set_global_relative_scale_factor(self, scale_factor, reference_quantity):\n124         \"\"\"\n125         Setting a scale factor that is valid across all unit system.\n126         \"\"\"\n127         from sympy.physics.units import UnitSystem\n128         scale_factor = sympify(scale_factor)\n129         if isinstance(scale_factor, Prefix):\n130             self._is_prefixed = True\n131         # replace all prefixes by their ratio to canonical units:\n132         scale_factor = scale_factor.replace(\n133             lambda x: isinstance(x, Prefix),\n134             lambda x: x.scale_factor\n135         )\n136         scale_factor = sympify(scale_factor)\n137         UnitSystem._quantity_scale_factors_global[self] = (scale_factor, reference_quantity)\n138         UnitSystem._quantity_dimensional_equivalence_map_global[self] = reference_quantity\n139 \n140     @property\n141     def name(self):\n142         return self._name\n143 \n144     @property\n145     def dimension(self):\n146         from sympy.physics.units import UnitSystem\n147         unit_system = UnitSystem.get_default_unit_system()\n148         return unit_system.get_quantity_dimension(self)\n149 \n150     @property\n151     def abbrev(self):\n152         \"\"\"\n153         Symbol representing the unit name.\n154 \n155         Prepend the abbreviation with the prefix symbol if it is defines.\n156         \"\"\"\n157         return self._abbrev\n158 \n159     @property\n160     def scale_factor(self):\n161         \"\"\"\n162         Overall magnitude of the quantity as compared to the canonical units.\n163         \"\"\"\n164         from sympy.physics.units import UnitSystem\n165         unit_system = UnitSystem.get_default_unit_system()\n166         return unit_system.get_quantity_scale_factor(self)\n167 \n168     def _eval_is_positive(self):\n169         return True\n170 \n171     def _eval_is_constant(self):\n172         return True\n173 \n174     def _eval_Abs(self):\n175         return self\n176 \n177     def _eval_subs(self, old, new):\n178         if isinstance(new, Quantity) and self != old:\n179             return self\n180 \n181     @staticmethod\n182     def get_dimensional_expr(expr, unit_system=\"SI\"):\n183         sympy_deprecation_warning(\n184             \"\"\"\n185             Quantity.get_dimensional_expr() is deprecated. It is now\n186             associated with UnitSystem objects. The dimensional relations\n187             depend on the unit system used. Use\n188             unit_system.get_dimensional_expr() instead.\n189             \"\"\",\n190             deprecated_since_version=\"1.5\",\n191             active_deprecations_target=\"deprecated-quantity-methods\",\n192         )\n193         from sympy.physics.units import UnitSystem\n194         unit_system = UnitSystem.get_unit_system(unit_system)\n195         return unit_system.get_dimensional_expr(expr)\n196 \n197     @staticmethod\n198     def _collect_factor_and_dimension(expr, unit_system=\"SI\"):\n199         \"\"\"Return tuple with scale factor expression and dimension expression.\"\"\"\n200         sympy_deprecation_warning(\n201             \"\"\"\n202             Quantity._collect_factor_and_dimension() is deprecated. This\n203             method has been moved to the UnitSystem class. Use\n204             unit_system._collect_factor_and_dimension(expr) instead.\n205             \"\"\",\n206             deprecated_since_version=\"1.5\",\n207             active_deprecations_target=\"deprecated-quantity-methods\",\n208         )\n209         from sympy.physics.units import UnitSystem\n210         unit_system = UnitSystem.get_unit_system(unit_system)\n211         return unit_system._collect_factor_and_dimension(expr)\n212 \n213     def _latex(self, printer):\n214         if self._latex_repr:\n215             return self._latex_repr\n216         else:\n217             return r'\\text{{{}}}'.format(self.args[1] \\\n218                           if len(self.args) >= 2 else self.args[0])\n219 \n220     def convert_to(self, other, unit_system=\"SI\"):\n221         \"\"\"\n222         Convert the quantity to another quantity of same dimensions.\n223 \n224         Examples\n225         ========\n226 \n227         >>> from sympy.physics.units import speed_of_light, meter, second\n228         >>> speed_of_light\n229         speed_of_light\n230         >>> speed_of_light.convert_to(meter/second)\n231         299792458*meter/second\n232 \n233         >>> from sympy.physics.units import liter\n234         >>> liter.convert_to(meter**3)\n235         meter**3/1000\n236         \"\"\"\n237         from .util import convert_to\n238         return convert_to(self, other, unit_system)\n239 \n240     @property\n241     def free_symbols(self):\n242         \"\"\"Return free symbols from quantity.\"\"\"\n243         return set()\n244 \n245     @property\n246     def is_prefixed(self):\n247         \"\"\"Whether or not the quantity is prefixed. Eg. `kilogram` is prefixed, but `gram` is not.\"\"\"\n248         return self._is_prefixed\n249 \n250 class PhysicalConstant(Quantity):\n251     \"\"\"Represents a physical constant, eg. `speed_of_light` or `avogadro_constant`.\"\"\"\n252 \n253     is_physical_constant = True\n",
        "intended_behavior": "The method should accurately detect and handle expressions involving the `exp` function, especially in determining whether the result of such expressions is dimensionless. This behavior is crucial for correctly processing and interpreting physical quantities and expressions within SymPy's units system. It should: Properly evaluate and simplify expressions involving `exp` to recognize dimensionless outcomes. Ensure that the handling of exponential functions within dimensional analysis accurately reflects the mathematical and physical principles, especially regarding dimensionless quantities."
    }
]