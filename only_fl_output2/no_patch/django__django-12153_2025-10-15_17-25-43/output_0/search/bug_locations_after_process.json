[
    {
        "rel_file_path": "django/contrib/auth/migrations/0011_update_proxy_permissions.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.1/django/contrib/auth/migrations/0011_update_proxy_permissions.py",
        "start": 18,
        "end": 50,
        "class_name": null,
        "method_name": "update_proxy_model_permissions",
        "code": "18 def update_proxy_model_permissions(apps, schema_editor, reverse=False):\n19     \"\"\"\n20     Update the content_type of proxy model permissions to use the ContentType\n21     of the proxy model.\n22     \"\"\"\n23     style = color_style()\n24     Permission = apps.get_model('auth', 'Permission')\n25     ContentType = apps.get_model('contenttypes', 'ContentType')\n26     for Model in apps.get_models():\n27         opts = Model._meta\n28         if not opts.proxy:\n29             continue\n30         proxy_default_permissions_codenames = [\n31             '%s_%s' % (action, opts.model_name)\n32             for action in opts.default_permissions\n33         ]\n34         permissions_query = Q(codename__in=proxy_default_permissions_codenames)\n35         for codename, name in opts.permissions:\n36             permissions_query = permissions_query | Q(codename=codename, name=name)\n37         concrete_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=True)\n38         proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)\n39         old_content_type = proxy_content_type if reverse else concrete_content_type\n40         new_content_type = concrete_content_type if reverse else proxy_content_type\n41         try:\n42             with transaction.atomic():\n43                 Permission.objects.filter(\n44                     permissions_query,\n45                     content_type=old_content_type,\n46                 ).update(content_type=new_content_type)\n47         except IntegrityError:\n48             old = '{}_{}'.format(old_content_type.app_label, old_content_type.model)\n49             new = '{}_{}'.format(new_content_type.app_label, new_content_type.model)\n50             sys.stdout.write(style.WARNING(WARNING.format(old=old, new=new, query=permissions_query)))\n",
        "intended_behavior": "The method `update_proxy_model_permissions` should be modified to explicitly handle multi-database environments by ensuring the migration script can either determine the correct database to use for updating permissions or can accept a database argument to specify which database should be used. The migration operation wrapped inside `transaction.atomic()` should explicitly specify the database if multiple databases are configured and a default database is either not set or does not make sense for the operation. This can be achieved by adding a `using` parameter to the `Permission.objects.filter().update()` call, where `using` is determined based on a strategy suitable for the project's multi-database setup. Preserving existing functionality means ensuring that if a default database is configured and appropriate, operations would proceed as before, without requiring modifications to existing configurations that already work."
    }
]