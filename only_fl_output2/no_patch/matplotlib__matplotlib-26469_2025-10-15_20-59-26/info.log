2025-10-15 20:59:26.800 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-15 20:59:30.333 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=388, output_tokens=12, cost=0.004240
2025-10-15 20:59:46.258 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=568, output_tokens=541, cost=0.021910
2025-10-15 20:59:47.616 | INFO     | registered non reproducing test 0
2025-10-15 21:00:04.441 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1474, output_tokens=647, cost=0.034150
2025-10-15 21:00:05.779 | INFO     | registered non reproducing test 1
2025-10-15 21:00:20.995 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1490, output_tokens=637, cost=0.034010
2025-10-15 21:00:22.335 | INFO     | registered non reproducing test 2
2025-10-15 21:00:22.335 | WARNING  | Failed to write a reproducer test; skipping reproducer tracing
2025-10-15 21:00:22.338 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 21:00:26.204 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=695, output_tokens=144, cost=0.011270
2025-10-15 21:00:26.209 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 21:00:28.724 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=498, output_tokens=48, cost=0.006420
2025-10-15 21:00:28.725 | DEBUG    | Extracted a valid json.
2025-10-15 21:00:28.726 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_class(\"PdfPages\")",
        "search_method_in_class(\"close\", \"PdfPages\")",
        "search_code(\"keep_empty\")"
    ],
    "bug_locations": []
}
2025-10-15 21:00:28.799 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-15 21:00:28.799 | DEBUG    | <Agent search> Analyzing search results.
2025-10-15 21:00:43.865 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1675, output_tokens=647, cost=0.036160
2025-10-15 21:00:43.873 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 21:00:58.518 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=2538, output_tokens=581, cost=0.042810
2025-10-15 21:00:58.524 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 21:01:09.914 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=935, output_tokens=472, cost=0.023510
2025-10-15 21:01:09.915 | DEBUG    | Extracted a valid json.
2025-10-15 21:01:09.921 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations": [
        {
            "file": "lib/matplotlib/backends/backend_pdf.py",
            "class": "PdfPages",
            "method": "__init__",
            "intended_behavior": "The default value of the keep_empty parameter should be changed from True to False. This modification ensures that by default, PdfPages will not generate empty PDF files, aligning with the PDF standard that requires at least one page in a valid PDF document. This change must preserve the ability for users to explicitly set keep_empty=True if they desire, until its complete deprecation."
        },
        {
            "file": "lib/matplotlib/backends/backend_pdf.py",
            "class": "PdfPages",
            "method": "close",
            "intended_behavior": "Update the logic to reflect the new default behavior (keep_empty=False). This means that if a PDF file has zero pages, it should not be written to disk unless keep_empty has been explicitly set to True by the user. Additional consideration should be given to how the removal of the file (in case of zero pages and keep_empty=False) is communicated or logged, ensuring clarity for the end-user."
        },
        {
            "file": "lib/matplotlib/backends/backend_pgf.py",
            "class": "PdfPages",
            "method": "__init__",
            "intended_behavior": "Similarly, change the default value of keep_empty to False. Despite the different backend, consistency in how empty PDFs are handled across the project is crucial. This change will ensure that PdfPages instances in the PGF backend also do not create invalid zero-page PDF files by default."
        },
        {
            "file": "lib/matplotlib/backends/backend_pgf.py",
            "class": "PdfPages",
            "method": "close",
            "intended_behavior": "Adjust to prevent the creation of a file when no figures have been added and keep_empty=False. This method should similarly respect the user's choice if keep_empty=True is explicitly set, maintaining backward compatibility during the deprecation phase. Given that PGF backend might handle file creation differently (especially with the involvement of LaTeX), the logic must ensure that an empty document is not created or saved under the new default configuration."
        }
    ]
}
2025-10-15 21:01:09.941 | DEBUG    | Bug location extracted successfully: [<file>lib/matplotlib/backends/backend_pdf.py</file>
<class>PdfPages</class>
<method>__init__</method>
<code>
2674     def __init__(self, filename, keep_empty=True, metadata=None):
2675         """
2676         Create a new PdfPages object.
2677 
2678         Parameters
2679         ----------
2680         filename : str or path-like or file-like
2681             Plots using `PdfPages.savefig` will be written to a file at this
2682             location. The file is opened at once and any older file with the
2683             same name is overwritten.
2684 
2685         keep_empty : bool, optional
2686             If set to False, then empty pdf files will be deleted automatically
2687             when closed.
2688 
2689         metadata : dict, optional
2690             Information dictionary object (see PDF reference section 10.2.1
2691             'Document Information Dictionary'), e.g.:
2692             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
2693 
2694             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
2695             'Creator', 'Producer', 'CreationDate', 'ModDate', and
2696             'Trapped'. Values have been predefined for 'Creator', 'Producer'
2697             and 'CreationDate'. They can be removed by setting them to `None`.
2698         """
2699         self._file = PdfFile(filename, metadata=metadata)
2700         self.keep_empty = keep_empty

</code><intended_behavior>The default value of the keep_empty parameter should be changed from True to False. This modification ensures that by default, PdfPages will not generate empty PDF files, aligning with the PDF standard that requires at least one page in a valid PDF document. This change must preserve the ability for users to explicitly set keep_empty=True if they desire, until its complete deprecation.</intended_behavior>, <file>lib/matplotlib/backends/backend_pgf.py</file>
<class>PdfPages</class>
<method>__init__</method>
<code>
886     def __init__(self, filename, *, keep_empty=True, metadata=None):
887         """
888         Create a new PdfPages object.
889 
890         Parameters
891         ----------
892         filename : str or path-like
893             Plots using `PdfPages.savefig` will be written to a file at this
894             location. Any older file with the same name is overwritten.
895 
896         keep_empty : bool, default: True
897             If set to False, then empty pdf files will be deleted automatically
898             when closed.
899 
900         metadata : dict, optional
901             Information dictionary object (see PDF reference section 10.2.1
902             'Document Information Dictionary'), e.g.:
903             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
904 
905             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
906             'Creator', 'Producer', 'CreationDate', 'ModDate', and
907             'Trapped'. Values have been predefined for 'Creator', 'Producer'
908             and 'CreationDate'. They can be removed by setting them to `None`.
909 
910             Note that some versions of LaTeX engines may ignore the 'Producer'
911             key and set it to themselves.
912         """
913         self._output_name = filename
914         self._n_figures = 0
915         self.keep_empty = keep_empty
916         self._metadata = (metadata or {}).copy()
917         self._info_dict = _create_pdf_info_dict('pgf', self._metadata)
918         self._file = BytesIO()

</code><intended_behavior>The default value of the keep_empty parameter should be changed from True to False. This modification ensures that by default, PdfPages will not generate empty PDF files, aligning with the PDF standard that requires at least one page in a valid PDF document. This change must preserve the ability for users to explicitly set keep_empty=True if they desire, until its complete deprecation.</intended_behavior>, <file>lib/matplotlib/backends/backend_pdf.py</file>
<class>PdfPages</class>
<method>None</method>
<code>
2652 class PdfPages:
2653     """
2654     A multi-page PDF file.
2655 
2656     Examples
2657     --------
2658     >>> import matplotlib.pyplot as plt
2659     >>> # Initialize:
2660     >>> with PdfPages('foo.pdf') as pdf:
2661     ...     # As many times as you like, create a figure fig and save it:
2662     ...     fig = plt.figure()
2663     ...     pdf.savefig(fig)
2664     ...     # When no figure is specified the current figure is saved
2665     ...     pdf.savefig()
2666 
2667     Notes
2668     -----
2669     In reality `PdfPages` is a thin wrapper around `PdfFile`, in order to avoid
2670     confusion when using `~.pyplot.savefig` and forgetting the format argument.
2671     """
2672     __slots__ = ('_file', 'keep_empty')
2673 
2674     def __init__(self, filename, keep_empty=True, metadata=None):
2675         """
2676         Create a new PdfPages object.
2677 
2678         Parameters
2679         ----------
2680         filename : str or path-like or file-like
2681             Plots using `PdfPages.savefig` will be written to a file at this
2682             location. The file is opened at once and any older file with the
2683             same name is overwritten.
2684 
2685         keep_empty : bool, optional
2686             If set to False, then empty pdf files will be deleted automatically
2687             when closed.
2688 
2689         metadata : dict, optional
2690             Information dictionary object (see PDF reference section 10.2.1
2691             'Document Information Dictionary'), e.g.:
2692             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
2693 
2694             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
2695             'Creator', 'Producer', 'CreationDate', 'ModDate', and
2696             'Trapped'. Values have been predefined for 'Creator', 'Producer'
2697             and 'CreationDate'. They can be removed by setting them to `None`.
2698         """
2699         self._file = PdfFile(filename, metadata=metadata)
2700         self.keep_empty = keep_empty
2701 
2702     def __enter__(self):
2703         return self
2704 
2705     def __exit__(self, exc_type, exc_val, exc_tb):
2706         self.close()
2707 
2708     def close(self):
2709         """
2710         Finalize this object, making the underlying file a complete
2711         PDF file.
2712         """
2713         self._file.finalize()
2714         self._file.close()
2715         if (self.get_pagecount() == 0 and not self.keep_empty and
2716                 not self._file.passed_in_file_object):
2717             os.remove(self._file.fh.name)
2718         self._file = None
2719 
2720     def infodict(self):
2721         """
2722         Return a modifiable information dictionary object
2723         (see PDF reference section 10.2.1 'Document Information
2724         Dictionary').
2725         """
2726         return self._file.infoDict
2727 
2728     def savefig(self, figure=None, **kwargs):
2729         """
2730         Save a `.Figure` to this file as a new page.
2731 
2732         Any other keyword arguments are passed to `~.Figure.savefig`.
2733 
2734         Parameters
2735         ----------
2736         figure : `.Figure` or int, default: the active figure
2737             The figure, or index of the figure, that is saved to the file.
2738         """
2739         if not isinstance(figure, Figure):
2740             if figure is None:
2741                 manager = Gcf.get_active()
2742             else:
2743                 manager = Gcf.get_fig_manager(figure)
2744             if manager is None:
2745                 raise ValueError(f"No figure {figure}")
2746             figure = manager.canvas.figure
2747         # Force use of pdf backend, as PdfPages is tightly coupled with it.
2748         with cbook._setattr_cm(figure, canvas=FigureCanvasPdf(figure)):
2749             figure.savefig(self, format="pdf", **kwargs)
2750 
2751     def get_pagecount(self):
2752         """Return the current number of pages in the multipage pdf file."""
2753         return len(self._file.pageList)
2754 
2755     def attach_note(self, text, positionRect=[-100, -100, 0, 0]):
2756         """
2757         Add a new text note to the page to be saved next. The optional
2758         positionRect specifies the position of the new note on the
2759         page. It is outside the page per default to make sure it is
2760         invisible on printouts.
2761         """
2762         self._file.newTextnote(text, positionRect)

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>lib/matplotlib/backends/backend_pgf.py</file>
<class>PdfPages</class>
<method>None</method>
<code>
862 class PdfPages:
863     """
864     A multi-page PDF file using the pgf backend
865 
866     Examples
867     --------
868     >>> import matplotlib.pyplot as plt
869     >>> # Initialize:
870     >>> with PdfPages('foo.pdf') as pdf:
871     ...     # As many times as you like, create a figure fig and save it:
872     ...     fig = plt.figure()
873     ...     pdf.savefig(fig)
874     ...     # When no figure is specified the current figure is saved
875     ...     pdf.savefig()
876     """
877     __slots__ = (
878         '_output_name',
879         'keep_empty',
880         '_n_figures',
881         '_file',
882         '_info_dict',
883         '_metadata',
884     )
885 
886     def __init__(self, filename, *, keep_empty=True, metadata=None):
887         """
888         Create a new PdfPages object.
889 
890         Parameters
891         ----------
892         filename : str or path-like
893             Plots using `PdfPages.savefig` will be written to a file at this
894             location. Any older file with the same name is overwritten.
895 
896         keep_empty : bool, default: True
897             If set to False, then empty pdf files will be deleted automatically
898             when closed.
899 
900         metadata : dict, optional
901             Information dictionary object (see PDF reference section 10.2.1
902             'Document Information Dictionary'), e.g.:
903             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
904 
905             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
906             'Creator', 'Producer', 'CreationDate', 'ModDate', and
907             'Trapped'. Values have been predefined for 'Creator', 'Producer'
908             and 'CreationDate'. They can be removed by setting them to `None`.
909 
910             Note that some versions of LaTeX engines may ignore the 'Producer'
911             key and set it to themselves.
912         """
913         self._output_name = filename
914         self._n_figures = 0
915         self.keep_empty = keep_empty
916         self._metadata = (metadata or {}).copy()
917         self._info_dict = _create_pdf_info_dict('pgf', self._metadata)
918         self._file = BytesIO()
919 
920     def _write_header(self, width_inches, height_inches):
921         pdfinfo = ','.join(
922             _metadata_to_str(k, v) for k, v in self._info_dict.items())
923         latex_header = "\n".join([
924             r"\documentclass[12pt]{article}",
925             r"\usepackage[pdfinfo={%s}]{hyperref}" % pdfinfo,
926             r"\usepackage[papersize={%fin,%fin}, margin=0in]{geometry}"
927             % (width_inches, height_inches),
928             r"\usepackage{pgf}",
929             _get_preamble(),
930             r"\setlength{\parindent}{0pt}",
931             r"\begin{document}%",
932         ])
933         self._file.write(latex_header.encode('utf-8'))
934 
935     def __enter__(self):
936         return self
937 
938     def __exit__(self, exc_type, exc_val, exc_tb):
939         self.close()
940 
941     def close(self):
942         """
943         Finalize this object, running LaTeX in a temporary directory
944         and moving the final pdf file to *filename*.
945         """
946         self._file.write(rb'\end{document}\n')
947         if self._n_figures > 0:
948             self._run_latex()
949         elif self.keep_empty:
950             open(self._output_name, 'wb').close()
951         self._file.close()
952 
953     def _run_latex(self):
954         texcommand = mpl.rcParams["pgf.texsystem"]
955         with TemporaryDirectory() as tmpdir:
956             tex_source = pathlib.Path(tmpdir, "pdf_pages.tex")
957             tex_source.write_bytes(self._file.getvalue())
958             cbook._check_and_log_subprocess(
959                 [texcommand, "-interaction=nonstopmode", "-halt-on-error",
960                  tex_source],
961                 _log, cwd=tmpdir)
962             shutil.move(tex_source.with_suffix(".pdf"), self._output_name)
963 
964     def savefig(self, figure=None, **kwargs):
965         """
966         Save a `.Figure` to this file as a new page.
967 
968         Any other keyword arguments are passed to `~.Figure.savefig`.
969 
970         Parameters
971         ----------
972         figure : `.Figure` or int, default: the active figure
973             The figure, or index of the figure, that is saved to the file.
974         """
975         if not isinstance(figure, Figure):
976             if figure is None:
977                 manager = Gcf.get_active()
978             else:
979                 manager = Gcf.get_fig_manager(figure)
980             if manager is None:
981                 raise ValueError(f"No figure {figure}")
982             figure = manager.canvas.figure
983 
984         with cbook._setattr_cm(figure, canvas=FigureCanvasPgf(figure)):
985             width, height = figure.get_size_inches()
986             if self._n_figures == 0:
987                 self._write_header(width, height)
988             else:
989                 # \pdfpagewidth and \pdfpageheight exist on pdftex, xetex, and
990                 # luatex<0.85; they were renamed to \pagewidth and \pageheight
991                 # on luatex>=0.85.
992                 self._file.write(
993                     (
994                         r'\newpage'
995                         r'\ifdefined\pdfpagewidth\pdfpagewidth'
996                         fr'\else\pagewidth\fi={width}in'
997                         r'\ifdefined\pdfpageheight\pdfpageheight'
998                         fr'\else\pageheight\fi={height}in'
999                         '%%\n'
1000                     ).encode("ascii")
1001                 )
1002             figure.savefig(self._file, format="pgf", **kwargs)
1003             self._n_figures += 1
1004 
1005     def get_pagecount(self):
1006         """Return the current number of pages in the multipage pdf file."""
1007         return self._n_figures

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>lib/matplotlib/backends/backend_pdf.py</file>
<class>PdfPages</class>
<method>close</method>
<code>
2708     def close(self):
2709         """
2710         Finalize this object, making the underlying file a complete
2711         PDF file.
2712         """
2713         self._file.finalize()
2714         self._file.close()
2715         if (self.get_pagecount() == 0 and not self.keep_empty and
2716                 not self._file.passed_in_file_object):
2717             os.remove(self._file.fh.name)
2718         self._file = None

</code><intended_behavior>Update the logic to reflect the new default behavior (keep_empty=False). This means that if a PDF file has zero pages, it should not be written to disk unless keep_empty has been explicitly set to True by the user. Additional consideration should be given to how the removal of the file (in case of zero pages and keep_empty=False) is communicated or logged, ensuring clarity for the end-user.</intended_behavior>, <file>lib/matplotlib/backends/backend_pgf.py</file>
<class>PdfPages</class>
<method>close</method>
<code>
941     def close(self):
942         """
943         Finalize this object, running LaTeX in a temporary directory
944         and moving the final pdf file to *filename*.
945         """
946         self._file.write(rb'\end{document}\n')
947         if self._n_figures > 0:
948             self._run_latex()
949         elif self.keep_empty:
950             open(self._output_name, 'wb').close()
951         self._file.close()

</code><intended_behavior>Update the logic to reflect the new default behavior (keep_empty=False). This means that if a PDF file has zero pages, it should not be written to disk unless keep_empty has been explicitly set to True by the user. Additional consideration should be given to how the removal of the file (in case of zero pages and keep_empty=False) is communicated or logged, ensuring clarity for the end-user.</intended_behavior>, <file>lib/matplotlib/backends/backend_pdf.py</file>
<class>PdfPages</class>
<method>None</method>
<code>
2652 class PdfPages:
2653     """
2654     A multi-page PDF file.
2655 
2656     Examples
2657     --------
2658     >>> import matplotlib.pyplot as plt
2659     >>> # Initialize:
2660     >>> with PdfPages('foo.pdf') as pdf:
2661     ...     # As many times as you like, create a figure fig and save it:
2662     ...     fig = plt.figure()
2663     ...     pdf.savefig(fig)
2664     ...     # When no figure is specified the current figure is saved
2665     ...     pdf.savefig()
2666 
2667     Notes
2668     -----
2669     In reality `PdfPages` is a thin wrapper around `PdfFile`, in order to avoid
2670     confusion when using `~.pyplot.savefig` and forgetting the format argument.
2671     """
2672     __slots__ = ('_file', 'keep_empty')
2673 
2674     def __init__(self, filename, keep_empty=True, metadata=None):
2675         """
2676         Create a new PdfPages object.
2677 
2678         Parameters
2679         ----------
2680         filename : str or path-like or file-like
2681             Plots using `PdfPages.savefig` will be written to a file at this
2682             location. The file is opened at once and any older file with the
2683             same name is overwritten.
2684 
2685         keep_empty : bool, optional
2686             If set to False, then empty pdf files will be deleted automatically
2687             when closed.
2688 
2689         metadata : dict, optional
2690             Information dictionary object (see PDF reference section 10.2.1
2691             'Document Information Dictionary'), e.g.:
2692             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
2693 
2694             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
2695             'Creator', 'Producer', 'CreationDate', 'ModDate', and
2696             'Trapped'. Values have been predefined for 'Creator', 'Producer'
2697             and 'CreationDate'. They can be removed by setting them to `None`.
2698         """
2699         self._file = PdfFile(filename, metadata=metadata)
2700         self.keep_empty = keep_empty
2701 
2702     def __enter__(self):
2703         return self
2704 
2705     def __exit__(self, exc_type, exc_val, exc_tb):
2706         self.close()
2707 
2708     def close(self):
2709         """
2710         Finalize this object, making the underlying file a complete
2711         PDF file.
2712         """
2713         self._file.finalize()
2714         self._file.close()
2715         if (self.get_pagecount() == 0 and not self.keep_empty and
2716                 not self._file.passed_in_file_object):
2717             os.remove(self._file.fh.name)
2718         self._file = None
2719 
2720     def infodict(self):
2721         """
2722         Return a modifiable information dictionary object
2723         (see PDF reference section 10.2.1 'Document Information
2724         Dictionary').
2725         """
2726         return self._file.infoDict
2727 
2728     def savefig(self, figure=None, **kwargs):
2729         """
2730         Save a `.Figure` to this file as a new page.
2731 
2732         Any other keyword arguments are passed to `~.Figure.savefig`.
2733 
2734         Parameters
2735         ----------
2736         figure : `.Figure` or int, default: the active figure
2737             The figure, or index of the figure, that is saved to the file.
2738         """
2739         if not isinstance(figure, Figure):
2740             if figure is None:
2741                 manager = Gcf.get_active()
2742             else:
2743                 manager = Gcf.get_fig_manager(figure)
2744             if manager is None:
2745                 raise ValueError(f"No figure {figure}")
2746             figure = manager.canvas.figure
2747         # Force use of pdf backend, as PdfPages is tightly coupled with it.
2748         with cbook._setattr_cm(figure, canvas=FigureCanvasPdf(figure)):
2749             figure.savefig(self, format="pdf", **kwargs)
2750 
2751     def get_pagecount(self):
2752         """Return the current number of pages in the multipage pdf file."""
2753         return len(self._file.pageList)
2754 
2755     def attach_note(self, text, positionRect=[-100, -100, 0, 0]):
2756         """
2757         Add a new text note to the page to be saved next. The optional
2758         positionRect specifies the position of the new note on the
2759         page. It is outside the page per default to make sure it is
2760         invisible on printouts.
2761         """
2762         self._file.newTextnote(text, positionRect)

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>lib/matplotlib/backends/backend_pgf.py</file>
<class>PdfPages</class>
<method>None</method>
<code>
862 class PdfPages:
863     """
864     A multi-page PDF file using the pgf backend
865 
866     Examples
867     --------
868     >>> import matplotlib.pyplot as plt
869     >>> # Initialize:
870     >>> with PdfPages('foo.pdf') as pdf:
871     ...     # As many times as you like, create a figure fig and save it:
872     ...     fig = plt.figure()
873     ...     pdf.savefig(fig)
874     ...     # When no figure is specified the current figure is saved
875     ...     pdf.savefig()
876     """
877     __slots__ = (
878         '_output_name',
879         'keep_empty',
880         '_n_figures',
881         '_file',
882         '_info_dict',
883         '_metadata',
884     )
885 
886     def __init__(self, filename, *, keep_empty=True, metadata=None):
887         """
888         Create a new PdfPages object.
889 
890         Parameters
891         ----------
892         filename : str or path-like
893             Plots using `PdfPages.savefig` will be written to a file at this
894             location. Any older file with the same name is overwritten.
895 
896         keep_empty : bool, default: True
897             If set to False, then empty pdf files will be deleted automatically
898             when closed.
899 
900         metadata : dict, optional
901             Information dictionary object (see PDF reference section 10.2.1
902             'Document Information Dictionary'), e.g.:
903             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
904 
905             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
906             'Creator', 'Producer', 'CreationDate', 'ModDate', and
907             'Trapped'. Values have been predefined for 'Creator', 'Producer'
908             and 'CreationDate'. They can be removed by setting them to `None`.
909 
910             Note that some versions of LaTeX engines may ignore the 'Producer'
911             key and set it to themselves.
912         """
913         self._output_name = filename
914         self._n_figures = 0
915         self.keep_empty = keep_empty
916         self._metadata = (metadata or {}).copy()
917         self._info_dict = _create_pdf_info_dict('pgf', self._metadata)
918         self._file = BytesIO()
919 
920     def _write_header(self, width_inches, height_inches):
921         pdfinfo = ','.join(
922             _metadata_to_str(k, v) for k, v in self._info_dict.items())
923         latex_header = "\n".join([
924             r"\documentclass[12pt]{article}",
925             r"\usepackage[pdfinfo={%s}]{hyperref}" % pdfinfo,
926             r"\usepackage[papersize={%fin,%fin}, margin=0in]{geometry}"
927             % (width_inches, height_inches),
928             r"\usepackage{pgf}",
929             _get_preamble(),
930             r"\setlength{\parindent}{0pt}",
931             r"\begin{document}%",
932         ])
933         self._file.write(latex_header.encode('utf-8'))
934 
935     def __enter__(self):
936         return self
937 
938     def __exit__(self, exc_type, exc_val, exc_tb):
939         self.close()
940 
941     def close(self):
942         """
943         Finalize this object, running LaTeX in a temporary directory
944         and moving the final pdf file to *filename*.
945         """
946         self._file.write(rb'\end{document}\n')
947         if self._n_figures > 0:
948             self._run_latex()
949         elif self.keep_empty:
950             open(self._output_name, 'wb').close()
951         self._file.close()
952 
953     def _run_latex(self):
954         texcommand = mpl.rcParams["pgf.texsystem"]
955         with TemporaryDirectory() as tmpdir:
956             tex_source = pathlib.Path(tmpdir, "pdf_pages.tex")
957             tex_source.write_bytes(self._file.getvalue())
958             cbook._check_and_log_subprocess(
959                 [texcommand, "-interaction=nonstopmode", "-halt-on-error",
960                  tex_source],
961                 _log, cwd=tmpdir)
962             shutil.move(tex_source.with_suffix(".pdf"), self._output_name)
963 
964     def savefig(self, figure=None, **kwargs):
965         """
966         Save a `.Figure` to this file as a new page.
967 
968         Any other keyword arguments are passed to `~.Figure.savefig`.
969 
970         Parameters
971         ----------
972         figure : `.Figure` or int, default: the active figure
973             The figure, or index of the figure, that is saved to the file.
974         """
975         if not isinstance(figure, Figure):
976             if figure is None:
977                 manager = Gcf.get_active()
978             else:
979                 manager = Gcf.get_fig_manager(figure)
980             if manager is None:
981                 raise ValueError(f"No figure {figure}")
982             figure = manager.canvas.figure
983 
984         with cbook._setattr_cm(figure, canvas=FigureCanvasPgf(figure)):
985             width, height = figure.get_size_inches()
986             if self._n_figures == 0:
987                 self._write_header(width, height)
988             else:
989                 # \pdfpagewidth and \pdfpageheight exist on pdftex, xetex, and
990                 # luatex<0.85; they were renamed to \pagewidth and \pageheight
991                 # on luatex>=0.85.
992                 self._file.write(
993                     (
994                         r'\newpage'
995                         r'\ifdefined\pdfpagewidth\pdfpagewidth'
996                         fr'\else\pagewidth\fi={width}in'
997                         r'\ifdefined\pdfpageheight\pdfpageheight'
998                         fr'\else\pageheight\fi={height}in'
999                         '%%\n'
1000                     ).encode("ascii")
1001                 )
1002             figure.savefig(self._file, format="pgf", **kwargs)
1003             self._n_figures += 1
1004 
1005     def get_pagecount(self):
1006         """Return the current number of pages in the multipage pdf file."""
1007         return self._n_figures

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>lib/matplotlib/backends/backend_pdf.py</file>
<class>PdfPages</class>
<method>__init__</method>
<code>
2674     def __init__(self, filename, keep_empty=True, metadata=None):
2675         """
2676         Create a new PdfPages object.
2677 
2678         Parameters
2679         ----------
2680         filename : str or path-like or file-like
2681             Plots using `PdfPages.savefig` will be written to a file at this
2682             location. The file is opened at once and any older file with the
2683             same name is overwritten.
2684 
2685         keep_empty : bool, optional
2686             If set to False, then empty pdf files will be deleted automatically
2687             when closed.
2688 
2689         metadata : dict, optional
2690             Information dictionary object (see PDF reference section 10.2.1
2691             'Document Information Dictionary'), e.g.:
2692             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
2693 
2694             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
2695             'Creator', 'Producer', 'CreationDate', 'ModDate', and
2696             'Trapped'. Values have been predefined for 'Creator', 'Producer'
2697             and 'CreationDate'. They can be removed by setting them to `None`.
2698         """
2699         self._file = PdfFile(filename, metadata=metadata)
2700         self.keep_empty = keep_empty

</code><intended_behavior>Similarly, change the default value of keep_empty to False. Despite the different backend, consistency in how empty PDFs are handled across the project is crucial. This change will ensure that PdfPages instances in the PGF backend also do not create invalid zero-page PDF files by default.</intended_behavior>, <file>lib/matplotlib/backends/backend_pgf.py</file>
<class>PdfPages</class>
<method>__init__</method>
<code>
886     def __init__(self, filename, *, keep_empty=True, metadata=None):
887         """
888         Create a new PdfPages object.
889 
890         Parameters
891         ----------
892         filename : str or path-like
893             Plots using `PdfPages.savefig` will be written to a file at this
894             location. Any older file with the same name is overwritten.
895 
896         keep_empty : bool, default: True
897             If set to False, then empty pdf files will be deleted automatically
898             when closed.
899 
900         metadata : dict, optional
901             Information dictionary object (see PDF reference section 10.2.1
902             'Document Information Dictionary'), e.g.:
903             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
904 
905             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
906             'Creator', 'Producer', 'CreationDate', 'ModDate', and
907             'Trapped'. Values have been predefined for 'Creator', 'Producer'
908             and 'CreationDate'. They can be removed by setting them to `None`.
909 
910             Note that some versions of LaTeX engines may ignore the 'Producer'
911             key and set it to themselves.
912         """
913         self._output_name = filename
914         self._n_figures = 0
915         self.keep_empty = keep_empty
916         self._metadata = (metadata or {}).copy()
917         self._info_dict = _create_pdf_info_dict('pgf', self._metadata)
918         self._file = BytesIO()

</code><intended_behavior>Similarly, change the default value of keep_empty to False. Despite the different backend, consistency in how empty PDFs are handled across the project is crucial. This change will ensure that PdfPages instances in the PGF backend also do not create invalid zero-page PDF files by default.</intended_behavior>, <file>lib/matplotlib/backends/backend_pdf.py</file>
<class>PdfPages</class>
<method>None</method>
<code>
2652 class PdfPages:
2653     """
2654     A multi-page PDF file.
2655 
2656     Examples
2657     --------
2658     >>> import matplotlib.pyplot as plt
2659     >>> # Initialize:
2660     >>> with PdfPages('foo.pdf') as pdf:
2661     ...     # As many times as you like, create a figure fig and save it:
2662     ...     fig = plt.figure()
2663     ...     pdf.savefig(fig)
2664     ...     # When no figure is specified the current figure is saved
2665     ...     pdf.savefig()
2666 
2667     Notes
2668     -----
2669     In reality `PdfPages` is a thin wrapper around `PdfFile`, in order to avoid
2670     confusion when using `~.pyplot.savefig` and forgetting the format argument.
2671     """
2672     __slots__ = ('_file', 'keep_empty')
2673 
2674     def __init__(self, filename, keep_empty=True, metadata=None):
2675         """
2676         Create a new PdfPages object.
2677 
2678         Parameters
2679         ----------
2680         filename : str or path-like or file-like
2681             Plots using `PdfPages.savefig` will be written to a file at this
2682             location. The file is opened at once and any older file with the
2683             same name is overwritten.
2684 
2685         keep_empty : bool, optional
2686             If set to False, then empty pdf files will be deleted automatically
2687             when closed.
2688 
2689         metadata : dict, optional
2690             Information dictionary object (see PDF reference section 10.2.1
2691             'Document Information Dictionary'), e.g.:
2692             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
2693 
2694             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
2695             'Creator', 'Producer', 'CreationDate', 'ModDate', and
2696             'Trapped'. Values have been predefined for 'Creator', 'Producer'
2697             and 'CreationDate'. They can be removed by setting them to `None`.
2698         """
2699         self._file = PdfFile(filename, metadata=metadata)
2700         self.keep_empty = keep_empty
2701 
2702     def __enter__(self):
2703         return self
2704 
2705     def __exit__(self, exc_type, exc_val, exc_tb):
2706         self.close()
2707 
2708     def close(self):
2709         """
2710         Finalize this object, making the underlying file a complete
2711         PDF file.
2712         """
2713         self._file.finalize()
2714         self._file.close()
2715         if (self.get_pagecount() == 0 and not self.keep_empty and
2716                 not self._file.passed_in_file_object):
2717             os.remove(self._file.fh.name)
2718         self._file = None
2719 
2720     def infodict(self):
2721         """
2722         Return a modifiable information dictionary object
2723         (see PDF reference section 10.2.1 'Document Information
2724         Dictionary').
2725         """
2726         return self._file.infoDict
2727 
2728     def savefig(self, figure=None, **kwargs):
2729         """
2730         Save a `.Figure` to this file as a new page.
2731 
2732         Any other keyword arguments are passed to `~.Figure.savefig`.
2733 
2734         Parameters
2735         ----------
2736         figure : `.Figure` or int, default: the active figure
2737             The figure, or index of the figure, that is saved to the file.
2738         """
2739         if not isinstance(figure, Figure):
2740             if figure is None:
2741                 manager = Gcf.get_active()
2742             else:
2743                 manager = Gcf.get_fig_manager(figure)
2744             if manager is None:
2745                 raise ValueError(f"No figure {figure}")
2746             figure = manager.canvas.figure
2747         # Force use of pdf backend, as PdfPages is tightly coupled with it.
2748         with cbook._setattr_cm(figure, canvas=FigureCanvasPdf(figure)):
2749             figure.savefig(self, format="pdf", **kwargs)
2750 
2751     def get_pagecount(self):
2752         """Return the current number of pages in the multipage pdf file."""
2753         return len(self._file.pageList)
2754 
2755     def attach_note(self, text, positionRect=[-100, -100, 0, 0]):
2756         """
2757         Add a new text note to the page to be saved next. The optional
2758         positionRect specifies the position of the new note on the
2759         page. It is outside the page per default to make sure it is
2760         invisible on printouts.
2761         """
2762         self._file.newTextnote(text, positionRect)

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>lib/matplotlib/backends/backend_pgf.py</file>
<class>PdfPages</class>
<method>None</method>
<code>
862 class PdfPages:
863     """
864     A multi-page PDF file using the pgf backend
865 
866     Examples
867     --------
868     >>> import matplotlib.pyplot as plt
869     >>> # Initialize:
870     >>> with PdfPages('foo.pdf') as pdf:
871     ...     # As many times as you like, create a figure fig and save it:
872     ...     fig = plt.figure()
873     ...     pdf.savefig(fig)
874     ...     # When no figure is specified the current figure is saved
875     ...     pdf.savefig()
876     """
877     __slots__ = (
878         '_output_name',
879         'keep_empty',
880         '_n_figures',
881         '_file',
882         '_info_dict',
883         '_metadata',
884     )
885 
886     def __init__(self, filename, *, keep_empty=True, metadata=None):
887         """
888         Create a new PdfPages object.
889 
890         Parameters
891         ----------
892         filename : str or path-like
893             Plots using `PdfPages.savefig` will be written to a file at this
894             location. Any older file with the same name is overwritten.
895 
896         keep_empty : bool, default: True
897             If set to False, then empty pdf files will be deleted automatically
898             when closed.
899 
900         metadata : dict, optional
901             Information dictionary object (see PDF reference section 10.2.1
902             'Document Information Dictionary'), e.g.:
903             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
904 
905             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
906             'Creator', 'Producer', 'CreationDate', 'ModDate', and
907             'Trapped'. Values have been predefined for 'Creator', 'Producer'
908             and 'CreationDate'. They can be removed by setting them to `None`.
909 
910             Note that some versions of LaTeX engines may ignore the 'Producer'
911             key and set it to themselves.
912         """
913         self._output_name = filename
914         self._n_figures = 0
915         self.keep_empty = keep_empty
916         self._metadata = (metadata or {}).copy()
917         self._info_dict = _create_pdf_info_dict('pgf', self._metadata)
918         self._file = BytesIO()
919 
920     def _write_header(self, width_inches, height_inches):
921         pdfinfo = ','.join(
922             _metadata_to_str(k, v) for k, v in self._info_dict.items())
923         latex_header = "\n".join([
924             r"\documentclass[12pt]{article}",
925             r"\usepackage[pdfinfo={%s}]{hyperref}" % pdfinfo,
926             r"\usepackage[papersize={%fin,%fin}, margin=0in]{geometry}"
927             % (width_inches, height_inches),
928             r"\usepackage{pgf}",
929             _get_preamble(),
930             r"\setlength{\parindent}{0pt}",
931             r"\begin{document}%",
932         ])
933         self._file.write(latex_header.encode('utf-8'))
934 
935     def __enter__(self):
936         return self
937 
938     def __exit__(self, exc_type, exc_val, exc_tb):
939         self.close()
940 
941     def close(self):
942         """
943         Finalize this object, running LaTeX in a temporary directory
944         and moving the final pdf file to *filename*.
945         """
946         self._file.write(rb'\end{document}\n')
947         if self._n_figures > 0:
948             self._run_latex()
949         elif self.keep_empty:
950             open(self._output_name, 'wb').close()
951         self._file.close()
952 
953     def _run_latex(self):
954         texcommand = mpl.rcParams["pgf.texsystem"]
955         with TemporaryDirectory() as tmpdir:
956             tex_source = pathlib.Path(tmpdir, "pdf_pages.tex")
957             tex_source.write_bytes(self._file.getvalue())
958             cbook._check_and_log_subprocess(
959                 [texcommand, "-interaction=nonstopmode", "-halt-on-error",
960                  tex_source],
961                 _log, cwd=tmpdir)
962             shutil.move(tex_source.with_suffix(".pdf"), self._output_name)
963 
964     def savefig(self, figure=None, **kwargs):
965         """
966         Save a `.Figure` to this file as a new page.
967 
968         Any other keyword arguments are passed to `~.Figure.savefig`.
969 
970         Parameters
971         ----------
972         figure : `.Figure` or int, default: the active figure
973             The figure, or index of the figure, that is saved to the file.
974         """
975         if not isinstance(figure, Figure):
976             if figure is None:
977                 manager = Gcf.get_active()
978             else:
979                 manager = Gcf.get_fig_manager(figure)
980             if manager is None:
981                 raise ValueError(f"No figure {figure}")
982             figure = manager.canvas.figure
983 
984         with cbook._setattr_cm(figure, canvas=FigureCanvasPgf(figure)):
985             width, height = figure.get_size_inches()
986             if self._n_figures == 0:
987                 self._write_header(width, height)
988             else:
989                 # \pdfpagewidth and \pdfpageheight exist on pdftex, xetex, and
990                 # luatex<0.85; they were renamed to \pagewidth and \pageheight
991                 # on luatex>=0.85.
992                 self._file.write(
993                     (
994                         r'\newpage'
995                         r'\ifdefined\pdfpagewidth\pdfpagewidth'
996                         fr'\else\pagewidth\fi={width}in'
997                         r'\ifdefined\pdfpageheight\pdfpageheight'
998                         fr'\else\pageheight\fi={height}in'
999                         '%%\n'
1000                     ).encode("ascii")
1001                 )
1002             figure.savefig(self._file, format="pgf", **kwargs)
1003             self._n_figures += 1
1004 
1005     def get_pagecount(self):
1006         """Return the current number of pages in the multipage pdf file."""
1007         return self._n_figures

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>lib/matplotlib/backends/backend_pdf.py</file>
<class>PdfPages</class>
<method>close</method>
<code>
2708     def close(self):
2709         """
2710         Finalize this object, making the underlying file a complete
2711         PDF file.
2712         """
2713         self._file.finalize()
2714         self._file.close()
2715         if (self.get_pagecount() == 0 and not self.keep_empty and
2716                 not self._file.passed_in_file_object):
2717             os.remove(self._file.fh.name)
2718         self._file = None

</code><intended_behavior>Adjust to prevent the creation of a file when no figures have been added and keep_empty=False. This method should similarly respect the user's choice if keep_empty=True is explicitly set, maintaining backward compatibility during the deprecation phase. Given that PGF backend might handle file creation differently (especially with the involvement of LaTeX), the logic must ensure that an empty document is not created or saved under the new default configuration.</intended_behavior>, <file>lib/matplotlib/backends/backend_pgf.py</file>
<class>PdfPages</class>
<method>close</method>
<code>
941     def close(self):
942         """
943         Finalize this object, running LaTeX in a temporary directory
944         and moving the final pdf file to *filename*.
945         """
946         self._file.write(rb'\end{document}\n')
947         if self._n_figures > 0:
948             self._run_latex()
949         elif self.keep_empty:
950             open(self._output_name, 'wb').close()
951         self._file.close()

</code><intended_behavior>Adjust to prevent the creation of a file when no figures have been added and keep_empty=False. This method should similarly respect the user's choice if keep_empty=True is explicitly set, maintaining backward compatibility during the deprecation phase. Given that PGF backend might handle file creation differently (especially with the involvement of LaTeX), the logic must ensure that an empty document is not created or saved under the new default configuration.</intended_behavior>, <file>lib/matplotlib/backends/backend_pdf.py</file>
<class>PdfPages</class>
<method>None</method>
<code>
2652 class PdfPages:
2653     """
2654     A multi-page PDF file.
2655 
2656     Examples
2657     --------
2658     >>> import matplotlib.pyplot as plt
2659     >>> # Initialize:
2660     >>> with PdfPages('foo.pdf') as pdf:
2661     ...     # As many times as you like, create a figure fig and save it:
2662     ...     fig = plt.figure()
2663     ...     pdf.savefig(fig)
2664     ...     # When no figure is specified the current figure is saved
2665     ...     pdf.savefig()
2666 
2667     Notes
2668     -----
2669     In reality `PdfPages` is a thin wrapper around `PdfFile`, in order to avoid
2670     confusion when using `~.pyplot.savefig` and forgetting the format argument.
2671     """
2672     __slots__ = ('_file', 'keep_empty')
2673 
2674     def __init__(self, filename, keep_empty=True, metadata=None):
2675         """
2676         Create a new PdfPages object.
2677 
2678         Parameters
2679         ----------
2680         filename : str or path-like or file-like
2681             Plots using `PdfPages.savefig` will be written to a file at this
2682             location. The file is opened at once and any older file with the
2683             same name is overwritten.
2684 
2685         keep_empty : bool, optional
2686             If set to False, then empty pdf files will be deleted automatically
2687             when closed.
2688 
2689         metadata : dict, optional
2690             Information dictionary object (see PDF reference section 10.2.1
2691             'Document Information Dictionary'), e.g.:
2692             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
2693 
2694             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
2695             'Creator', 'Producer', 'CreationDate', 'ModDate', and
2696             'Trapped'. Values have been predefined for 'Creator', 'Producer'
2697             and 'CreationDate'. They can be removed by setting them to `None`.
2698         """
2699         self._file = PdfFile(filename, metadata=metadata)
2700         self.keep_empty = keep_empty
2701 
2702     def __enter__(self):
2703         return self
2704 
2705     def __exit__(self, exc_type, exc_val, exc_tb):
2706         self.close()
2707 
2708     def close(self):
2709         """
2710         Finalize this object, making the underlying file a complete
2711         PDF file.
2712         """
2713         self._file.finalize()
2714         self._file.close()
2715         if (self.get_pagecount() == 0 and not self.keep_empty and
2716                 not self._file.passed_in_file_object):
2717             os.remove(self._file.fh.name)
2718         self._file = None
2719 
2720     def infodict(self):
2721         """
2722         Return a modifiable information dictionary object
2723         (see PDF reference section 10.2.1 'Document Information
2724         Dictionary').
2725         """
2726         return self._file.infoDict
2727 
2728     def savefig(self, figure=None, **kwargs):
2729         """
2730         Save a `.Figure` to this file as a new page.
2731 
2732         Any other keyword arguments are passed to `~.Figure.savefig`.
2733 
2734         Parameters
2735         ----------
2736         figure : `.Figure` or int, default: the active figure
2737             The figure, or index of the figure, that is saved to the file.
2738         """
2739         if not isinstance(figure, Figure):
2740             if figure is None:
2741                 manager = Gcf.get_active()
2742             else:
2743                 manager = Gcf.get_fig_manager(figure)
2744             if manager is None:
2745                 raise ValueError(f"No figure {figure}")
2746             figure = manager.canvas.figure
2747         # Force use of pdf backend, as PdfPages is tightly coupled with it.
2748         with cbook._setattr_cm(figure, canvas=FigureCanvasPdf(figure)):
2749             figure.savefig(self, format="pdf", **kwargs)
2750 
2751     def get_pagecount(self):
2752         """Return the current number of pages in the multipage pdf file."""
2753         return len(self._file.pageList)
2754 
2755     def attach_note(self, text, positionRect=[-100, -100, 0, 0]):
2756         """
2757         Add a new text note to the page to be saved next. The optional
2758         positionRect specifies the position of the new note on the
2759         page. It is outside the page per default to make sure it is
2760         invisible on printouts.
2761         """
2762         self._file.newTextnote(text, positionRect)

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>lib/matplotlib/backends/backend_pgf.py</file>
<class>PdfPages</class>
<method>None</method>
<code>
862 class PdfPages:
863     """
864     A multi-page PDF file using the pgf backend
865 
866     Examples
867     --------
868     >>> import matplotlib.pyplot as plt
869     >>> # Initialize:
870     >>> with PdfPages('foo.pdf') as pdf:
871     ...     # As many times as you like, create a figure fig and save it:
872     ...     fig = plt.figure()
873     ...     pdf.savefig(fig)
874     ...     # When no figure is specified the current figure is saved
875     ...     pdf.savefig()
876     """
877     __slots__ = (
878         '_output_name',
879         'keep_empty',
880         '_n_figures',
881         '_file',
882         '_info_dict',
883         '_metadata',
884     )
885 
886     def __init__(self, filename, *, keep_empty=True, metadata=None):
887         """
888         Create a new PdfPages object.
889 
890         Parameters
891         ----------
892         filename : str or path-like
893             Plots using `PdfPages.savefig` will be written to a file at this
894             location. Any older file with the same name is overwritten.
895 
896         keep_empty : bool, default: True
897             If set to False, then empty pdf files will be deleted automatically
898             when closed.
899 
900         metadata : dict, optional
901             Information dictionary object (see PDF reference section 10.2.1
902             'Document Information Dictionary'), e.g.:
903             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
904 
905             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
906             'Creator', 'Producer', 'CreationDate', 'ModDate', and
907             'Trapped'. Values have been predefined for 'Creator', 'Producer'
908             and 'CreationDate'. They can be removed by setting them to `None`.
909 
910             Note that some versions of LaTeX engines may ignore the 'Producer'
911             key and set it to themselves.
912         """
913         self._output_name = filename
914         self._n_figures = 0
915         self.keep_empty = keep_empty
916         self._metadata = (metadata or {}).copy()
917         self._info_dict = _create_pdf_info_dict('pgf', self._metadata)
918         self._file = BytesIO()
919 
920     def _write_header(self, width_inches, height_inches):
921         pdfinfo = ','.join(
922             _metadata_to_str(k, v) for k, v in self._info_dict.items())
923         latex_header = "\n".join([
924             r"\documentclass[12pt]{article}",
925             r"\usepackage[pdfinfo={%s}]{hyperref}" % pdfinfo,
926             r"\usepackage[papersize={%fin,%fin}, margin=0in]{geometry}"
927             % (width_inches, height_inches),
928             r"\usepackage{pgf}",
929             _get_preamble(),
930             r"\setlength{\parindent}{0pt}",
931             r"\begin{document}%",
932         ])
933         self._file.write(latex_header.encode('utf-8'))
934 
935     def __enter__(self):
936         return self
937 
938     def __exit__(self, exc_type, exc_val, exc_tb):
939         self.close()
940 
941     def close(self):
942         """
943         Finalize this object, running LaTeX in a temporary directory
944         and moving the final pdf file to *filename*.
945         """
946         self._file.write(rb'\end{document}\n')
947         if self._n_figures > 0:
948             self._run_latex()
949         elif self.keep_empty:
950             open(self._output_name, 'wb').close()
951         self._file.close()
952 
953     def _run_latex(self):
954         texcommand = mpl.rcParams["pgf.texsystem"]
955         with TemporaryDirectory() as tmpdir:
956             tex_source = pathlib.Path(tmpdir, "pdf_pages.tex")
957             tex_source.write_bytes(self._file.getvalue())
958             cbook._check_and_log_subprocess(
959                 [texcommand, "-interaction=nonstopmode", "-halt-on-error",
960                  tex_source],
961                 _log, cwd=tmpdir)
962             shutil.move(tex_source.with_suffix(".pdf"), self._output_name)
963 
964     def savefig(self, figure=None, **kwargs):
965         """
966         Save a `.Figure` to this file as a new page.
967 
968         Any other keyword arguments are passed to `~.Figure.savefig`.
969 
970         Parameters
971         ----------
972         figure : `.Figure` or int, default: the active figure
973             The figure, or index of the figure, that is saved to the file.
974         """
975         if not isinstance(figure, Figure):
976             if figure is None:
977                 manager = Gcf.get_active()
978             else:
979                 manager = Gcf.get_fig_manager(figure)
980             if manager is None:
981                 raise ValueError(f"No figure {figure}")
982             figure = manager.canvas.figure
983 
984         with cbook._setattr_cm(figure, canvas=FigureCanvasPgf(figure)):
985             width, height = figure.get_size_inches()
986             if self._n_figures == 0:
987                 self._write_header(width, height)
988             else:
989                 # \pdfpagewidth and \pdfpageheight exist on pdftex, xetex, and
990                 # luatex<0.85; they were renamed to \pagewidth and \pageheight
991                 # on luatex>=0.85.
992                 self._file.write(
993                     (
994                         r'\newpage'
995                         r'\ifdefined\pdfpagewidth\pdfpagewidth'
996                         fr'\else\pagewidth\fi={width}in'
997                         r'\ifdefined\pdfpageheight\pdfpageheight'
998                         fr'\else\pageheight\fi={height}in'
999                         '%%\n'
1000                     ).encode("ascii")
1001                 )
1002             figure.savefig(self._file, format="pgf", **kwargs)
1003             self._n_figures += 1
1004 
1005     def get_pagecount(self):
1006         """Return the current number of pages in the multipage pdf file."""
1007         return self._n_figures

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>]
2025-10-15 21:01:09.941 | INFO     | Search completed. Bug locations: [<file>lib/matplotlib/backends/backend_pdf.py</file>
<class>PdfPages</class>
<method>__init__</method>
<code>
2674     def __init__(self, filename, keep_empty=True, metadata=None):
2675         """
2676         Create a new PdfPages object.
2677 
2678         Parameters
2679         ----------
2680         filename : str or path-like or file-like
2681             Plots using `PdfPages.savefig` will be written to a file at this
2682             location. The file is opened at once and any older file with the
2683             same name is overwritten.
2684 
2685         keep_empty : bool, optional
2686             If set to False, then empty pdf files will be deleted automatically
2687             when closed.
2688 
2689         metadata : dict, optional
2690             Information dictionary object (see PDF reference section 10.2.1
2691             'Document Information Dictionary'), e.g.:
2692             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
2693 
2694             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
2695             'Creator', 'Producer', 'CreationDate', 'ModDate', and
2696             'Trapped'. Values have been predefined for 'Creator', 'Producer'
2697             and 'CreationDate'. They can be removed by setting them to `None`.
2698         """
2699         self._file = PdfFile(filename, metadata=metadata)
2700         self.keep_empty = keep_empty

</code><intended_behavior>The default value of the keep_empty parameter should be changed from True to False. This modification ensures that by default, PdfPages will not generate empty PDF files, aligning with the PDF standard that requires at least one page in a valid PDF document. This change must preserve the ability for users to explicitly set keep_empty=True if they desire, until its complete deprecation.</intended_behavior>, <file>lib/matplotlib/backends/backend_pgf.py</file>
<class>PdfPages</class>
<method>__init__</method>
<code>
886     def __init__(self, filename, *, keep_empty=True, metadata=None):
887         """
888         Create a new PdfPages object.
889 
890         Parameters
891         ----------
892         filename : str or path-like
893             Plots using `PdfPages.savefig` will be written to a file at this
894             location. Any older file with the same name is overwritten.
895 
896         keep_empty : bool, default: True
897             If set to False, then empty pdf files will be deleted automatically
898             when closed.
899 
900         metadata : dict, optional
901             Information dictionary object (see PDF reference section 10.2.1
902             'Document Information Dictionary'), e.g.:
903             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
904 
905             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
906             'Creator', 'Producer', 'CreationDate', 'ModDate', and
907             'Trapped'. Values have been predefined for 'Creator', 'Producer'
908             and 'CreationDate'. They can be removed by setting them to `None`.
909 
910             Note that some versions of LaTeX engines may ignore the 'Producer'
911             key and set it to themselves.
912         """
913         self._output_name = filename
914         self._n_figures = 0
915         self.keep_empty = keep_empty
916         self._metadata = (metadata or {}).copy()
917         self._info_dict = _create_pdf_info_dict('pgf', self._metadata)
918         self._file = BytesIO()

</code><intended_behavior>The default value of the keep_empty parameter should be changed from True to False. This modification ensures that by default, PdfPages will not generate empty PDF files, aligning with the PDF standard that requires at least one page in a valid PDF document. This change must preserve the ability for users to explicitly set keep_empty=True if they desire, until its complete deprecation.</intended_behavior>, <file>lib/matplotlib/backends/backend_pdf.py</file>
<class>PdfPages</class>
<method>None</method>
<code>
2652 class PdfPages:
2653     """
2654     A multi-page PDF file.
2655 
2656     Examples
2657     --------
2658     >>> import matplotlib.pyplot as plt
2659     >>> # Initialize:
2660     >>> with PdfPages('foo.pdf') as pdf:
2661     ...     # As many times as you like, create a figure fig and save it:
2662     ...     fig = plt.figure()
2663     ...     pdf.savefig(fig)
2664     ...     # When no figure is specified the current figure is saved
2665     ...     pdf.savefig()
2666 
2667     Notes
2668     -----
2669     In reality `PdfPages` is a thin wrapper around `PdfFile`, in order to avoid
2670     confusion when using `~.pyplot.savefig` and forgetting the format argument.
2671     """
2672     __slots__ = ('_file', 'keep_empty')
2673 
2674     def __init__(self, filename, keep_empty=True, metadata=None):
2675         """
2676         Create a new PdfPages object.
2677 
2678         Parameters
2679         ----------
2680         filename : str or path-like or file-like
2681             Plots using `PdfPages.savefig` will be written to a file at this
2682             location. The file is opened at once and any older file with the
2683             same name is overwritten.
2684 
2685         keep_empty : bool, optional
2686             If set to False, then empty pdf files will be deleted automatically
2687             when closed.
2688 
2689         metadata : dict, optional
2690             Information dictionary object (see PDF reference section 10.2.1
2691             'Document Information Dictionary'), e.g.:
2692             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
2693 
2694             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
2695             'Creator', 'Producer', 'CreationDate', 'ModDate', and
2696             'Trapped'. Values have been predefined for 'Creator', 'Producer'
2697             and 'CreationDate'. They can be removed by setting them to `None`.
2698         """
2699         self._file = PdfFile(filename, metadata=metadata)
2700         self.keep_empty = keep_empty
2701 
2702     def __enter__(self):
2703         return self
2704 
2705     def __exit__(self, exc_type, exc_val, exc_tb):
2706         self.close()
2707 
2708     def close(self):
2709         """
2710         Finalize this object, making the underlying file a complete
2711         PDF file.
2712         """
2713         self._file.finalize()
2714         self._file.close()
2715         if (self.get_pagecount() == 0 and not self.keep_empty and
2716                 not self._file.passed_in_file_object):
2717             os.remove(self._file.fh.name)
2718         self._file = None
2719 
2720     def infodict(self):
2721         """
2722         Return a modifiable information dictionary object
2723         (see PDF reference section 10.2.1 'Document Information
2724         Dictionary').
2725         """
2726         return self._file.infoDict
2727 
2728     def savefig(self, figure=None, **kwargs):
2729         """
2730         Save a `.Figure` to this file as a new page.
2731 
2732         Any other keyword arguments are passed to `~.Figure.savefig`.
2733 
2734         Parameters
2735         ----------
2736         figure : `.Figure` or int, default: the active figure
2737             The figure, or index of the figure, that is saved to the file.
2738         """
2739         if not isinstance(figure, Figure):
2740             if figure is None:
2741                 manager = Gcf.get_active()
2742             else:
2743                 manager = Gcf.get_fig_manager(figure)
2744             if manager is None:
2745                 raise ValueError(f"No figure {figure}")
2746             figure = manager.canvas.figure
2747         # Force use of pdf backend, as PdfPages is tightly coupled with it.
2748         with cbook._setattr_cm(figure, canvas=FigureCanvasPdf(figure)):
2749             figure.savefig(self, format="pdf", **kwargs)
2750 
2751     def get_pagecount(self):
2752         """Return the current number of pages in the multipage pdf file."""
2753         return len(self._file.pageList)
2754 
2755     def attach_note(self, text, positionRect=[-100, -100, 0, 0]):
2756         """
2757         Add a new text note to the page to be saved next. The optional
2758         positionRect specifies the position of the new note on the
2759         page. It is outside the page per default to make sure it is
2760         invisible on printouts.
2761         """
2762         self._file.newTextnote(text, positionRect)

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>lib/matplotlib/backends/backend_pgf.py</file>
<class>PdfPages</class>
<method>None</method>
<code>
862 class PdfPages:
863     """
864     A multi-page PDF file using the pgf backend
865 
866     Examples
867     --------
868     >>> import matplotlib.pyplot as plt
869     >>> # Initialize:
870     >>> with PdfPages('foo.pdf') as pdf:
871     ...     # As many times as you like, create a figure fig and save it:
872     ...     fig = plt.figure()
873     ...     pdf.savefig(fig)
874     ...     # When no figure is specified the current figure is saved
875     ...     pdf.savefig()
876     """
877     __slots__ = (
878         '_output_name',
879         'keep_empty',
880         '_n_figures',
881         '_file',
882         '_info_dict',
883         '_metadata',
884     )
885 
886     def __init__(self, filename, *, keep_empty=True, metadata=None):
887         """
888         Create a new PdfPages object.
889 
890         Parameters
891         ----------
892         filename : str or path-like
893             Plots using `PdfPages.savefig` will be written to a file at this
894             location. Any older file with the same name is overwritten.
895 
896         keep_empty : bool, default: True
897             If set to False, then empty pdf files will be deleted automatically
898             when closed.
899 
900         metadata : dict, optional
901             Information dictionary object (see PDF reference section 10.2.1
902             'Document Information Dictionary'), e.g.:
903             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
904 
905             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
906             'Creator', 'Producer', 'CreationDate', 'ModDate', and
907             'Trapped'. Values have been predefined for 'Creator', 'Producer'
908             and 'CreationDate'. They can be removed by setting them to `None`.
909 
910             Note that some versions of LaTeX engines may ignore the 'Producer'
911             key and set it to themselves.
912         """
913         self._output_name = filename
914         self._n_figures = 0
915         self.keep_empty = keep_empty
916         self._metadata = (metadata or {}).copy()
917         self._info_dict = _create_pdf_info_dict('pgf', self._metadata)
918         self._file = BytesIO()
919 
920     def _write_header(self, width_inches, height_inches):
921         pdfinfo = ','.join(
922             _metadata_to_str(k, v) for k, v in self._info_dict.items())
923         latex_header = "\n".join([
924             r"\documentclass[12pt]{article}",
925             r"\usepackage[pdfinfo={%s}]{hyperref}" % pdfinfo,
926             r"\usepackage[papersize={%fin,%fin}, margin=0in]{geometry}"
927             % (width_inches, height_inches),
928             r"\usepackage{pgf}",
929             _get_preamble(),
930             r"\setlength{\parindent}{0pt}",
931             r"\begin{document}%",
932         ])
933         self._file.write(latex_header.encode('utf-8'))
934 
935     def __enter__(self):
936         return self
937 
938     def __exit__(self, exc_type, exc_val, exc_tb):
939         self.close()
940 
941     def close(self):
942         """
943         Finalize this object, running LaTeX in a temporary directory
944         and moving the final pdf file to *filename*.
945         """
946         self._file.write(rb'\end{document}\n')
947         if self._n_figures > 0:
948             self._run_latex()
949         elif self.keep_empty:
950             open(self._output_name, 'wb').close()
951         self._file.close()
952 
953     def _run_latex(self):
954         texcommand = mpl.rcParams["pgf.texsystem"]
955         with TemporaryDirectory() as tmpdir:
956             tex_source = pathlib.Path(tmpdir, "pdf_pages.tex")
957             tex_source.write_bytes(self._file.getvalue())
958             cbook._check_and_log_subprocess(
959                 [texcommand, "-interaction=nonstopmode", "-halt-on-error",
960                  tex_source],
961                 _log, cwd=tmpdir)
962             shutil.move(tex_source.with_suffix(".pdf"), self._output_name)
963 
964     def savefig(self, figure=None, **kwargs):
965         """
966         Save a `.Figure` to this file as a new page.
967 
968         Any other keyword arguments are passed to `~.Figure.savefig`.
969 
970         Parameters
971         ----------
972         figure : `.Figure` or int, default: the active figure
973             The figure, or index of the figure, that is saved to the file.
974         """
975         if not isinstance(figure, Figure):
976             if figure is None:
977                 manager = Gcf.get_active()
978             else:
979                 manager = Gcf.get_fig_manager(figure)
980             if manager is None:
981                 raise ValueError(f"No figure {figure}")
982             figure = manager.canvas.figure
983 
984         with cbook._setattr_cm(figure, canvas=FigureCanvasPgf(figure)):
985             width, height = figure.get_size_inches()
986             if self._n_figures == 0:
987                 self._write_header(width, height)
988             else:
989                 # \pdfpagewidth and \pdfpageheight exist on pdftex, xetex, and
990                 # luatex<0.85; they were renamed to \pagewidth and \pageheight
991                 # on luatex>=0.85.
992                 self._file.write(
993                     (
994                         r'\newpage'
995                         r'\ifdefined\pdfpagewidth\pdfpagewidth'
996                         fr'\else\pagewidth\fi={width}in'
997                         r'\ifdefined\pdfpageheight\pdfpageheight'
998                         fr'\else\pageheight\fi={height}in'
999                         '%%\n'
1000                     ).encode("ascii")
1001                 )
1002             figure.savefig(self._file, format="pgf", **kwargs)
1003             self._n_figures += 1
1004 
1005     def get_pagecount(self):
1006         """Return the current number of pages in the multipage pdf file."""
1007         return self._n_figures

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>lib/matplotlib/backends/backend_pdf.py</file>
<class>PdfPages</class>
<method>close</method>
<code>
2708     def close(self):
2709         """
2710         Finalize this object, making the underlying file a complete
2711         PDF file.
2712         """
2713         self._file.finalize()
2714         self._file.close()
2715         if (self.get_pagecount() == 0 and not self.keep_empty and
2716                 not self._file.passed_in_file_object):
2717             os.remove(self._file.fh.name)
2718         self._file = None

</code><intended_behavior>Update the logic to reflect the new default behavior (keep_empty=False). This means that if a PDF file has zero pages, it should not be written to disk unless keep_empty has been explicitly set to True by the user. Additional consideration should be given to how the removal of the file (in case of zero pages and keep_empty=False) is communicated or logged, ensuring clarity for the end-user.</intended_behavior>, <file>lib/matplotlib/backends/backend_pgf.py</file>
<class>PdfPages</class>
<method>close</method>
<code>
941     def close(self):
942         """
943         Finalize this object, running LaTeX in a temporary directory
944         and moving the final pdf file to *filename*.
945         """
946         self._file.write(rb'\end{document}\n')
947         if self._n_figures > 0:
948             self._run_latex()
949         elif self.keep_empty:
950             open(self._output_name, 'wb').close()
951         self._file.close()

</code><intended_behavior>Update the logic to reflect the new default behavior (keep_empty=False). This means that if a PDF file has zero pages, it should not be written to disk unless keep_empty has been explicitly set to True by the user. Additional consideration should be given to how the removal of the file (in case of zero pages and keep_empty=False) is communicated or logged, ensuring clarity for the end-user.</intended_behavior>, <file>lib/matplotlib/backends/backend_pdf.py</file>
<class>PdfPages</class>
<method>None</method>
<code>
2652 class PdfPages:
2653     """
2654     A multi-page PDF file.
2655 
2656     Examples
2657     --------
2658     >>> import matplotlib.pyplot as plt
2659     >>> # Initialize:
2660     >>> with PdfPages('foo.pdf') as pdf:
2661     ...     # As many times as you like, create a figure fig and save it:
2662     ...     fig = plt.figure()
2663     ...     pdf.savefig(fig)
2664     ...     # When no figure is specified the current figure is saved
2665     ...     pdf.savefig()
2666 
2667     Notes
2668     -----
2669     In reality `PdfPages` is a thin wrapper around `PdfFile`, in order to avoid
2670     confusion when using `~.pyplot.savefig` and forgetting the format argument.
2671     """
2672     __slots__ = ('_file', 'keep_empty')
2673 
2674     def __init__(self, filename, keep_empty=True, metadata=None):
2675         """
2676         Create a new PdfPages object.
2677 
2678         Parameters
2679         ----------
2680         filename : str or path-like or file-like
2681             Plots using `PdfPages.savefig` will be written to a file at this
2682             location. The file is opened at once and any older file with the
2683             same name is overwritten.
2684 
2685         keep_empty : bool, optional
2686             If set to False, then empty pdf files will be deleted automatically
2687             when closed.
2688 
2689         metadata : dict, optional
2690             Information dictionary object (see PDF reference section 10.2.1
2691             'Document Information Dictionary'), e.g.:
2692             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
2693 
2694             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
2695             'Creator', 'Producer', 'CreationDate', 'ModDate', and
2696             'Trapped'. Values have been predefined for 'Creator', 'Producer'
2697             and 'CreationDate'. They can be removed by setting them to `None`.
2698         """
2699         self._file = PdfFile(filename, metadata=metadata)
2700         self.keep_empty = keep_empty
2701 
2702     def __enter__(self):
2703         return self
2704 
2705     def __exit__(self, exc_type, exc_val, exc_tb):
2706         self.close()
2707 
2708     def close(self):
2709         """
2710         Finalize this object, making the underlying file a complete
2711         PDF file.
2712         """
2713         self._file.finalize()
2714         self._file.close()
2715         if (self.get_pagecount() == 0 and not self.keep_empty and
2716                 not self._file.passed_in_file_object):
2717             os.remove(self._file.fh.name)
2718         self._file = None
2719 
2720     def infodict(self):
2721         """
2722         Return a modifiable information dictionary object
2723         (see PDF reference section 10.2.1 'Document Information
2724         Dictionary').
2725         """
2726         return self._file.infoDict
2727 
2728     def savefig(self, figure=None, **kwargs):
2729         """
2730         Save a `.Figure` to this file as a new page.
2731 
2732         Any other keyword arguments are passed to `~.Figure.savefig`.
2733 
2734         Parameters
2735         ----------
2736         figure : `.Figure` or int, default: the active figure
2737             The figure, or index of the figure, that is saved to the file.
2738         """
2739         if not isinstance(figure, Figure):
2740             if figure is None:
2741                 manager = Gcf.get_active()
2742             else:
2743                 manager = Gcf.get_fig_manager(figure)
2744             if manager is None:
2745                 raise ValueError(f"No figure {figure}")
2746             figure = manager.canvas.figure
2747         # Force use of pdf backend, as PdfPages is tightly coupled with it.
2748         with cbook._setattr_cm(figure, canvas=FigureCanvasPdf(figure)):
2749             figure.savefig(self, format="pdf", **kwargs)
2750 
2751     def get_pagecount(self):
2752         """Return the current number of pages in the multipage pdf file."""
2753         return len(self._file.pageList)
2754 
2755     def attach_note(self, text, positionRect=[-100, -100, 0, 0]):
2756         """
2757         Add a new text note to the page to be saved next. The optional
2758         positionRect specifies the position of the new note on the
2759         page. It is outside the page per default to make sure it is
2760         invisible on printouts.
2761         """
2762         self._file.newTextnote(text, positionRect)

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>lib/matplotlib/backends/backend_pgf.py</file>
<class>PdfPages</class>
<method>None</method>
<code>
862 class PdfPages:
863     """
864     A multi-page PDF file using the pgf backend
865 
866     Examples
867     --------
868     >>> import matplotlib.pyplot as plt
869     >>> # Initialize:
870     >>> with PdfPages('foo.pdf') as pdf:
871     ...     # As many times as you like, create a figure fig and save it:
872     ...     fig = plt.figure()
873     ...     pdf.savefig(fig)
874     ...     # When no figure is specified the current figure is saved
875     ...     pdf.savefig()
876     """
877     __slots__ = (
878         '_output_name',
879         'keep_empty',
880         '_n_figures',
881         '_file',
882         '_info_dict',
883         '_metadata',
884     )
885 
886     def __init__(self, filename, *, keep_empty=True, metadata=None):
887         """
888         Create a new PdfPages object.
889 
890         Parameters
891         ----------
892         filename : str or path-like
893             Plots using `PdfPages.savefig` will be written to a file at this
894             location. Any older file with the same name is overwritten.
895 
896         keep_empty : bool, default: True
897             If set to False, then empty pdf files will be deleted automatically
898             when closed.
899 
900         metadata : dict, optional
901             Information dictionary object (see PDF reference section 10.2.1
902             'Document Information Dictionary'), e.g.:
903             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
904 
905             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
906             'Creator', 'Producer', 'CreationDate', 'ModDate', and
907             'Trapped'. Values have been predefined for 'Creator', 'Producer'
908             and 'CreationDate'. They can be removed by setting them to `None`.
909 
910             Note that some versions of LaTeX engines may ignore the 'Producer'
911             key and set it to themselves.
912         """
913         self._output_name = filename
914         self._n_figures = 0
915         self.keep_empty = keep_empty
916         self._metadata = (metadata or {}).copy()
917         self._info_dict = _create_pdf_info_dict('pgf', self._metadata)
918         self._file = BytesIO()
919 
920     def _write_header(self, width_inches, height_inches):
921         pdfinfo = ','.join(
922             _metadata_to_str(k, v) for k, v in self._info_dict.items())
923         latex_header = "\n".join([
924             r"\documentclass[12pt]{article}",
925             r"\usepackage[pdfinfo={%s}]{hyperref}" % pdfinfo,
926             r"\usepackage[papersize={%fin,%fin}, margin=0in]{geometry}"
927             % (width_inches, height_inches),
928             r"\usepackage{pgf}",
929             _get_preamble(),
930             r"\setlength{\parindent}{0pt}",
931             r"\begin{document}%",
932         ])
933         self._file.write(latex_header.encode('utf-8'))
934 
935     def __enter__(self):
936         return self
937 
938     def __exit__(self, exc_type, exc_val, exc_tb):
939         self.close()
940 
941     def close(self):
942         """
943         Finalize this object, running LaTeX in a temporary directory
944         and moving the final pdf file to *filename*.
945         """
946         self._file.write(rb'\end{document}\n')
947         if self._n_figures > 0:
948             self._run_latex()
949         elif self.keep_empty:
950             open(self._output_name, 'wb').close()
951         self._file.close()
952 
953     def _run_latex(self):
954         texcommand = mpl.rcParams["pgf.texsystem"]
955         with TemporaryDirectory() as tmpdir:
956             tex_source = pathlib.Path(tmpdir, "pdf_pages.tex")
957             tex_source.write_bytes(self._file.getvalue())
958             cbook._check_and_log_subprocess(
959                 [texcommand, "-interaction=nonstopmode", "-halt-on-error",
960                  tex_source],
961                 _log, cwd=tmpdir)
962             shutil.move(tex_source.with_suffix(".pdf"), self._output_name)
963 
964     def savefig(self, figure=None, **kwargs):
965         """
966         Save a `.Figure` to this file as a new page.
967 
968         Any other keyword arguments are passed to `~.Figure.savefig`.
969 
970         Parameters
971         ----------
972         figure : `.Figure` or int, default: the active figure
973             The figure, or index of the figure, that is saved to the file.
974         """
975         if not isinstance(figure, Figure):
976             if figure is None:
977                 manager = Gcf.get_active()
978             else:
979                 manager = Gcf.get_fig_manager(figure)
980             if manager is None:
981                 raise ValueError(f"No figure {figure}")
982             figure = manager.canvas.figure
983 
984         with cbook._setattr_cm(figure, canvas=FigureCanvasPgf(figure)):
985             width, height = figure.get_size_inches()
986             if self._n_figures == 0:
987                 self._write_header(width, height)
988             else:
989                 # \pdfpagewidth and \pdfpageheight exist on pdftex, xetex, and
990                 # luatex<0.85; they were renamed to \pagewidth and \pageheight
991                 # on luatex>=0.85.
992                 self._file.write(
993                     (
994                         r'\newpage'
995                         r'\ifdefined\pdfpagewidth\pdfpagewidth'
996                         fr'\else\pagewidth\fi={width}in'
997                         r'\ifdefined\pdfpageheight\pdfpageheight'
998                         fr'\else\pageheight\fi={height}in'
999                         '%%\n'
1000                     ).encode("ascii")
1001                 )
1002             figure.savefig(self._file, format="pgf", **kwargs)
1003             self._n_figures += 1
1004 
1005     def get_pagecount(self):
1006         """Return the current number of pages in the multipage pdf file."""
1007         return self._n_figures

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>lib/matplotlib/backends/backend_pdf.py</file>
<class>PdfPages</class>
<method>__init__</method>
<code>
2674     def __init__(self, filename, keep_empty=True, metadata=None):
2675         """
2676         Create a new PdfPages object.
2677 
2678         Parameters
2679         ----------
2680         filename : str or path-like or file-like
2681             Plots using `PdfPages.savefig` will be written to a file at this
2682             location. The file is opened at once and any older file with the
2683             same name is overwritten.
2684 
2685         keep_empty : bool, optional
2686             If set to False, then empty pdf files will be deleted automatically
2687             when closed.
2688 
2689         metadata : dict, optional
2690             Information dictionary object (see PDF reference section 10.2.1
2691             'Document Information Dictionary'), e.g.:
2692             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
2693 
2694             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
2695             'Creator', 'Producer', 'CreationDate', 'ModDate', and
2696             'Trapped'. Values have been predefined for 'Creator', 'Producer'
2697             and 'CreationDate'. They can be removed by setting them to `None`.
2698         """
2699         self._file = PdfFile(filename, metadata=metadata)
2700         self.keep_empty = keep_empty

</code><intended_behavior>Similarly, change the default value of keep_empty to False. Despite the different backend, consistency in how empty PDFs are handled across the project is crucial. This change will ensure that PdfPages instances in the PGF backend also do not create invalid zero-page PDF files by default.</intended_behavior>, <file>lib/matplotlib/backends/backend_pgf.py</file>
<class>PdfPages</class>
<method>__init__</method>
<code>
886     def __init__(self, filename, *, keep_empty=True, metadata=None):
887         """
888         Create a new PdfPages object.
889 
890         Parameters
891         ----------
892         filename : str or path-like
893             Plots using `PdfPages.savefig` will be written to a file at this
894             location. Any older file with the same name is overwritten.
895 
896         keep_empty : bool, default: True
897             If set to False, then empty pdf files will be deleted automatically
898             when closed.
899 
900         metadata : dict, optional
901             Information dictionary object (see PDF reference section 10.2.1
902             'Document Information Dictionary'), e.g.:
903             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
904 
905             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
906             'Creator', 'Producer', 'CreationDate', 'ModDate', and
907             'Trapped'. Values have been predefined for 'Creator', 'Producer'
908             and 'CreationDate'. They can be removed by setting them to `None`.
909 
910             Note that some versions of LaTeX engines may ignore the 'Producer'
911             key and set it to themselves.
912         """
913         self._output_name = filename
914         self._n_figures = 0
915         self.keep_empty = keep_empty
916         self._metadata = (metadata or {}).copy()
917         self._info_dict = _create_pdf_info_dict('pgf', self._metadata)
918         self._file = BytesIO()

</code><intended_behavior>Similarly, change the default value of keep_empty to False. Despite the different backend, consistency in how empty PDFs are handled across the project is crucial. This change will ensure that PdfPages instances in the PGF backend also do not create invalid zero-page PDF files by default.</intended_behavior>, <file>lib/matplotlib/backends/backend_pdf.py</file>
<class>PdfPages</class>
<method>None</method>
<code>
2652 class PdfPages:
2653     """
2654     A multi-page PDF file.
2655 
2656     Examples
2657     --------
2658     >>> import matplotlib.pyplot as plt
2659     >>> # Initialize:
2660     >>> with PdfPages('foo.pdf') as pdf:
2661     ...     # As many times as you like, create a figure fig and save it:
2662     ...     fig = plt.figure()
2663     ...     pdf.savefig(fig)
2664     ...     # When no figure is specified the current figure is saved
2665     ...     pdf.savefig()
2666 
2667     Notes
2668     -----
2669     In reality `PdfPages` is a thin wrapper around `PdfFile`, in order to avoid
2670     confusion when using `~.pyplot.savefig` and forgetting the format argument.
2671     """
2672     __slots__ = ('_file', 'keep_empty')
2673 
2674     def __init__(self, filename, keep_empty=True, metadata=None):
2675         """
2676         Create a new PdfPages object.
2677 
2678         Parameters
2679         ----------
2680         filename : str or path-like or file-like
2681             Plots using `PdfPages.savefig` will be written to a file at this
2682             location. The file is opened at once and any older file with the
2683             same name is overwritten.
2684 
2685         keep_empty : bool, optional
2686             If set to False, then empty pdf files will be deleted automatically
2687             when closed.
2688 
2689         metadata : dict, optional
2690             Information dictionary object (see PDF reference section 10.2.1
2691             'Document Information Dictionary'), e.g.:
2692             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
2693 
2694             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
2695             'Creator', 'Producer', 'CreationDate', 'ModDate', and
2696             'Trapped'. Values have been predefined for 'Creator', 'Producer'
2697             and 'CreationDate'. They can be removed by setting them to `None`.
2698         """
2699         self._file = PdfFile(filename, metadata=metadata)
2700         self.keep_empty = keep_empty
2701 
2702     def __enter__(self):
2703         return self
2704 
2705     def __exit__(self, exc_type, exc_val, exc_tb):
2706         self.close()
2707 
2708     def close(self):
2709         """
2710         Finalize this object, making the underlying file a complete
2711         PDF file.
2712         """
2713         self._file.finalize()
2714         self._file.close()
2715         if (self.get_pagecount() == 0 and not self.keep_empty and
2716                 not self._file.passed_in_file_object):
2717             os.remove(self._file.fh.name)
2718         self._file = None
2719 
2720     def infodict(self):
2721         """
2722         Return a modifiable information dictionary object
2723         (see PDF reference section 10.2.1 'Document Information
2724         Dictionary').
2725         """
2726         return self._file.infoDict
2727 
2728     def savefig(self, figure=None, **kwargs):
2729         """
2730         Save a `.Figure` to this file as a new page.
2731 
2732         Any other keyword arguments are passed to `~.Figure.savefig`.
2733 
2734         Parameters
2735         ----------
2736         figure : `.Figure` or int, default: the active figure
2737             The figure, or index of the figure, that is saved to the file.
2738         """
2739         if not isinstance(figure, Figure):
2740             if figure is None:
2741                 manager = Gcf.get_active()
2742             else:
2743                 manager = Gcf.get_fig_manager(figure)
2744             if manager is None:
2745                 raise ValueError(f"No figure {figure}")
2746             figure = manager.canvas.figure
2747         # Force use of pdf backend, as PdfPages is tightly coupled with it.
2748         with cbook._setattr_cm(figure, canvas=FigureCanvasPdf(figure)):
2749             figure.savefig(self, format="pdf", **kwargs)
2750 
2751     def get_pagecount(self):
2752         """Return the current number of pages in the multipage pdf file."""
2753         return len(self._file.pageList)
2754 
2755     def attach_note(self, text, positionRect=[-100, -100, 0, 0]):
2756         """
2757         Add a new text note to the page to be saved next. The optional
2758         positionRect specifies the position of the new note on the
2759         page. It is outside the page per default to make sure it is
2760         invisible on printouts.
2761         """
2762         self._file.newTextnote(text, positionRect)

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>lib/matplotlib/backends/backend_pgf.py</file>
<class>PdfPages</class>
<method>None</method>
<code>
862 class PdfPages:
863     """
864     A multi-page PDF file using the pgf backend
865 
866     Examples
867     --------
868     >>> import matplotlib.pyplot as plt
869     >>> # Initialize:
870     >>> with PdfPages('foo.pdf') as pdf:
871     ...     # As many times as you like, create a figure fig and save it:
872     ...     fig = plt.figure()
873     ...     pdf.savefig(fig)
874     ...     # When no figure is specified the current figure is saved
875     ...     pdf.savefig()
876     """
877     __slots__ = (
878         '_output_name',
879         'keep_empty',
880         '_n_figures',
881         '_file',
882         '_info_dict',
883         '_metadata',
884     )
885 
886     def __init__(self, filename, *, keep_empty=True, metadata=None):
887         """
888         Create a new PdfPages object.
889 
890         Parameters
891         ----------
892         filename : str or path-like
893             Plots using `PdfPages.savefig` will be written to a file at this
894             location. Any older file with the same name is overwritten.
895 
896         keep_empty : bool, default: True
897             If set to False, then empty pdf files will be deleted automatically
898             when closed.
899 
900         metadata : dict, optional
901             Information dictionary object (see PDF reference section 10.2.1
902             'Document Information Dictionary'), e.g.:
903             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
904 
905             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
906             'Creator', 'Producer', 'CreationDate', 'ModDate', and
907             'Trapped'. Values have been predefined for 'Creator', 'Producer'
908             and 'CreationDate'. They can be removed by setting them to `None`.
909 
910             Note that some versions of LaTeX engines may ignore the 'Producer'
911             key and set it to themselves.
912         """
913         self._output_name = filename
914         self._n_figures = 0
915         self.keep_empty = keep_empty
916         self._metadata = (metadata or {}).copy()
917         self._info_dict = _create_pdf_info_dict('pgf', self._metadata)
918         self._file = BytesIO()
919 
920     def _write_header(self, width_inches, height_inches):
921         pdfinfo = ','.join(
922             _metadata_to_str(k, v) for k, v in self._info_dict.items())
923         latex_header = "\n".join([
924             r"\documentclass[12pt]{article}",
925             r"\usepackage[pdfinfo={%s}]{hyperref}" % pdfinfo,
926             r"\usepackage[papersize={%fin,%fin}, margin=0in]{geometry}"
927             % (width_inches, height_inches),
928             r"\usepackage{pgf}",
929             _get_preamble(),
930             r"\setlength{\parindent}{0pt}",
931             r"\begin{document}%",
932         ])
933         self._file.write(latex_header.encode('utf-8'))
934 
935     def __enter__(self):
936         return self
937 
938     def __exit__(self, exc_type, exc_val, exc_tb):
939         self.close()
940 
941     def close(self):
942         """
943         Finalize this object, running LaTeX in a temporary directory
944         and moving the final pdf file to *filename*.
945         """
946         self._file.write(rb'\end{document}\n')
947         if self._n_figures > 0:
948             self._run_latex()
949         elif self.keep_empty:
950             open(self._output_name, 'wb').close()
951         self._file.close()
952 
953     def _run_latex(self):
954         texcommand = mpl.rcParams["pgf.texsystem"]
955         with TemporaryDirectory() as tmpdir:
956             tex_source = pathlib.Path(tmpdir, "pdf_pages.tex")
957             tex_source.write_bytes(self._file.getvalue())
958             cbook._check_and_log_subprocess(
959                 [texcommand, "-interaction=nonstopmode", "-halt-on-error",
960                  tex_source],
961                 _log, cwd=tmpdir)
962             shutil.move(tex_source.with_suffix(".pdf"), self._output_name)
963 
964     def savefig(self, figure=None, **kwargs):
965         """
966         Save a `.Figure` to this file as a new page.
967 
968         Any other keyword arguments are passed to `~.Figure.savefig`.
969 
970         Parameters
971         ----------
972         figure : `.Figure` or int, default: the active figure
973             The figure, or index of the figure, that is saved to the file.
974         """
975         if not isinstance(figure, Figure):
976             if figure is None:
977                 manager = Gcf.get_active()
978             else:
979                 manager = Gcf.get_fig_manager(figure)
980             if manager is None:
981                 raise ValueError(f"No figure {figure}")
982             figure = manager.canvas.figure
983 
984         with cbook._setattr_cm(figure, canvas=FigureCanvasPgf(figure)):
985             width, height = figure.get_size_inches()
986             if self._n_figures == 0:
987                 self._write_header(width, height)
988             else:
989                 # \pdfpagewidth and \pdfpageheight exist on pdftex, xetex, and
990                 # luatex<0.85; they were renamed to \pagewidth and \pageheight
991                 # on luatex>=0.85.
992                 self._file.write(
993                     (
994                         r'\newpage'
995                         r'\ifdefined\pdfpagewidth\pdfpagewidth'
996                         fr'\else\pagewidth\fi={width}in'
997                         r'\ifdefined\pdfpageheight\pdfpageheight'
998                         fr'\else\pageheight\fi={height}in'
999                         '%%\n'
1000                     ).encode("ascii")
1001                 )
1002             figure.savefig(self._file, format="pgf", **kwargs)
1003             self._n_figures += 1
1004 
1005     def get_pagecount(self):
1006         """Return the current number of pages in the multipage pdf file."""
1007         return self._n_figures

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>lib/matplotlib/backends/backend_pdf.py</file>
<class>PdfPages</class>
<method>close</method>
<code>
2708     def close(self):
2709         """
2710         Finalize this object, making the underlying file a complete
2711         PDF file.
2712         """
2713         self._file.finalize()
2714         self._file.close()
2715         if (self.get_pagecount() == 0 and not self.keep_empty and
2716                 not self._file.passed_in_file_object):
2717             os.remove(self._file.fh.name)
2718         self._file = None

</code><intended_behavior>Adjust to prevent the creation of a file when no figures have been added and keep_empty=False. This method should similarly respect the user's choice if keep_empty=True is explicitly set, maintaining backward compatibility during the deprecation phase. Given that PGF backend might handle file creation differently (especially with the involvement of LaTeX), the logic must ensure that an empty document is not created or saved under the new default configuration.</intended_behavior>, <file>lib/matplotlib/backends/backend_pgf.py</file>
<class>PdfPages</class>
<method>close</method>
<code>
941     def close(self):
942         """
943         Finalize this object, running LaTeX in a temporary directory
944         and moving the final pdf file to *filename*.
945         """
946         self._file.write(rb'\end{document}\n')
947         if self._n_figures > 0:
948             self._run_latex()
949         elif self.keep_empty:
950             open(self._output_name, 'wb').close()
951         self._file.close()

</code><intended_behavior>Adjust to prevent the creation of a file when no figures have been added and keep_empty=False. This method should similarly respect the user's choice if keep_empty=True is explicitly set, maintaining backward compatibility during the deprecation phase. Given that PGF backend might handle file creation differently (especially with the involvement of LaTeX), the logic must ensure that an empty document is not created or saved under the new default configuration.</intended_behavior>, <file>lib/matplotlib/backends/backend_pdf.py</file>
<class>PdfPages</class>
<method>None</method>
<code>
2652 class PdfPages:
2653     """
2654     A multi-page PDF file.
2655 
2656     Examples
2657     --------
2658     >>> import matplotlib.pyplot as plt
2659     >>> # Initialize:
2660     >>> with PdfPages('foo.pdf') as pdf:
2661     ...     # As many times as you like, create a figure fig and save it:
2662     ...     fig = plt.figure()
2663     ...     pdf.savefig(fig)
2664     ...     # When no figure is specified the current figure is saved
2665     ...     pdf.savefig()
2666 
2667     Notes
2668     -----
2669     In reality `PdfPages` is a thin wrapper around `PdfFile`, in order to avoid
2670     confusion when using `~.pyplot.savefig` and forgetting the format argument.
2671     """
2672     __slots__ = ('_file', 'keep_empty')
2673 
2674     def __init__(self, filename, keep_empty=True, metadata=None):
2675         """
2676         Create a new PdfPages object.
2677 
2678         Parameters
2679         ----------
2680         filename : str or path-like or file-like
2681             Plots using `PdfPages.savefig` will be written to a file at this
2682             location. The file is opened at once and any older file with the
2683             same name is overwritten.
2684 
2685         keep_empty : bool, optional
2686             If set to False, then empty pdf files will be deleted automatically
2687             when closed.
2688 
2689         metadata : dict, optional
2690             Information dictionary object (see PDF reference section 10.2.1
2691             'Document Information Dictionary'), e.g.:
2692             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
2693 
2694             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
2695             'Creator', 'Producer', 'CreationDate', 'ModDate', and
2696             'Trapped'. Values have been predefined for 'Creator', 'Producer'
2697             and 'CreationDate'. They can be removed by setting them to `None`.
2698         """
2699         self._file = PdfFile(filename, metadata=metadata)
2700         self.keep_empty = keep_empty
2701 
2702     def __enter__(self):
2703         return self
2704 
2705     def __exit__(self, exc_type, exc_val, exc_tb):
2706         self.close()
2707 
2708     def close(self):
2709         """
2710         Finalize this object, making the underlying file a complete
2711         PDF file.
2712         """
2713         self._file.finalize()
2714         self._file.close()
2715         if (self.get_pagecount() == 0 and not self.keep_empty and
2716                 not self._file.passed_in_file_object):
2717             os.remove(self._file.fh.name)
2718         self._file = None
2719 
2720     def infodict(self):
2721         """
2722         Return a modifiable information dictionary object
2723         (see PDF reference section 10.2.1 'Document Information
2724         Dictionary').
2725         """
2726         return self._file.infoDict
2727 
2728     def savefig(self, figure=None, **kwargs):
2729         """
2730         Save a `.Figure` to this file as a new page.
2731 
2732         Any other keyword arguments are passed to `~.Figure.savefig`.
2733 
2734         Parameters
2735         ----------
2736         figure : `.Figure` or int, default: the active figure
2737             The figure, or index of the figure, that is saved to the file.
2738         """
2739         if not isinstance(figure, Figure):
2740             if figure is None:
2741                 manager = Gcf.get_active()
2742             else:
2743                 manager = Gcf.get_fig_manager(figure)
2744             if manager is None:
2745                 raise ValueError(f"No figure {figure}")
2746             figure = manager.canvas.figure
2747         # Force use of pdf backend, as PdfPages is tightly coupled with it.
2748         with cbook._setattr_cm(figure, canvas=FigureCanvasPdf(figure)):
2749             figure.savefig(self, format="pdf", **kwargs)
2750 
2751     def get_pagecount(self):
2752         """Return the current number of pages in the multipage pdf file."""
2753         return len(self._file.pageList)
2754 
2755     def attach_note(self, text, positionRect=[-100, -100, 0, 0]):
2756         """
2757         Add a new text note to the page to be saved next. The optional
2758         positionRect specifies the position of the new note on the
2759         page. It is outside the page per default to make sure it is
2760         invisible on printouts.
2761         """
2762         self._file.newTextnote(text, positionRect)

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>lib/matplotlib/backends/backend_pgf.py</file>
<class>PdfPages</class>
<method>None</method>
<code>
862 class PdfPages:
863     """
864     A multi-page PDF file using the pgf backend
865 
866     Examples
867     --------
868     >>> import matplotlib.pyplot as plt
869     >>> # Initialize:
870     >>> with PdfPages('foo.pdf') as pdf:
871     ...     # As many times as you like, create a figure fig and save it:
872     ...     fig = plt.figure()
873     ...     pdf.savefig(fig)
874     ...     # When no figure is specified the current figure is saved
875     ...     pdf.savefig()
876     """
877     __slots__ = (
878         '_output_name',
879         'keep_empty',
880         '_n_figures',
881         '_file',
882         '_info_dict',
883         '_metadata',
884     )
885 
886     def __init__(self, filename, *, keep_empty=True, metadata=None):
887         """
888         Create a new PdfPages object.
889 
890         Parameters
891         ----------
892         filename : str or path-like
893             Plots using `PdfPages.savefig` will be written to a file at this
894             location. Any older file with the same name is overwritten.
895 
896         keep_empty : bool, default: True
897             If set to False, then empty pdf files will be deleted automatically
898             when closed.
899 
900         metadata : dict, optional
901             Information dictionary object (see PDF reference section 10.2.1
902             'Document Information Dictionary'), e.g.:
903             ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.
904 
905             The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
906             'Creator', 'Producer', 'CreationDate', 'ModDate', and
907             'Trapped'. Values have been predefined for 'Creator', 'Producer'
908             and 'CreationDate'. They can be removed by setting them to `None`.
909 
910             Note that some versions of LaTeX engines may ignore the 'Producer'
911             key and set it to themselves.
912         """
913         self._output_name = filename
914         self._n_figures = 0
915         self.keep_empty = keep_empty
916         self._metadata = (metadata or {}).copy()
917         self._info_dict = _create_pdf_info_dict('pgf', self._metadata)
918         self._file = BytesIO()
919 
920     def _write_header(self, width_inches, height_inches):
921         pdfinfo = ','.join(
922             _metadata_to_str(k, v) for k, v in self._info_dict.items())
923         latex_header = "\n".join([
924             r"\documentclass[12pt]{article}",
925             r"\usepackage[pdfinfo={%s}]{hyperref}" % pdfinfo,
926             r"\usepackage[papersize={%fin,%fin}, margin=0in]{geometry}"
927             % (width_inches, height_inches),
928             r"\usepackage{pgf}",
929             _get_preamble(),
930             r"\setlength{\parindent}{0pt}",
931             r"\begin{document}%",
932         ])
933         self._file.write(latex_header.encode('utf-8'))
934 
935     def __enter__(self):
936         return self
937 
938     def __exit__(self, exc_type, exc_val, exc_tb):
939         self.close()
940 
941     def close(self):
942         """
943         Finalize this object, running LaTeX in a temporary directory
944         and moving the final pdf file to *filename*.
945         """
946         self._file.write(rb'\end{document}\n')
947         if self._n_figures > 0:
948             self._run_latex()
949         elif self.keep_empty:
950             open(self._output_name, 'wb').close()
951         self._file.close()
952 
953     def _run_latex(self):
954         texcommand = mpl.rcParams["pgf.texsystem"]
955         with TemporaryDirectory() as tmpdir:
956             tex_source = pathlib.Path(tmpdir, "pdf_pages.tex")
957             tex_source.write_bytes(self._file.getvalue())
958             cbook._check_and_log_subprocess(
959                 [texcommand, "-interaction=nonstopmode", "-halt-on-error",
960                  tex_source],
961                 _log, cwd=tmpdir)
962             shutil.move(tex_source.with_suffix(".pdf"), self._output_name)
963 
964     def savefig(self, figure=None, **kwargs):
965         """
966         Save a `.Figure` to this file as a new page.
967 
968         Any other keyword arguments are passed to `~.Figure.savefig`.
969 
970         Parameters
971         ----------
972         figure : `.Figure` or int, default: the active figure
973             The figure, or index of the figure, that is saved to the file.
974         """
975         if not isinstance(figure, Figure):
976             if figure is None:
977                 manager = Gcf.get_active()
978             else:
979                 manager = Gcf.get_fig_manager(figure)
980             if manager is None:
981                 raise ValueError(f"No figure {figure}")
982             figure = manager.canvas.figure
983 
984         with cbook._setattr_cm(figure, canvas=FigureCanvasPgf(figure)):
985             width, height = figure.get_size_inches()
986             if self._n_figures == 0:
987                 self._write_header(width, height)
988             else:
989                 # \pdfpagewidth and \pdfpageheight exist on pdftex, xetex, and
990                 # luatex<0.85; they were renamed to \pagewidth and \pageheight
991                 # on luatex>=0.85.
992                 self._file.write(
993                     (
994                         r'\newpage'
995                         r'\ifdefined\pdfpagewidth\pdfpagewidth'
996                         fr'\else\pagewidth\fi={width}in'
997                         r'\ifdefined\pdfpageheight\pdfpageheight'
998                         fr'\else\pageheight\fi={height}in'
999                         '%%\n'
1000                     ).encode("ascii")
1001                 )
1002             figure.savefig(self._file, format="pgf", **kwargs)
1003             self._n_figures += 1
1004 
1005     def get_pagecount(self):
1006         """Return the current number of pages in the multipage pdf file."""
1007         return self._n_figures

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>]
2025-10-15 21:01:09.942 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-15 21:01:09.942 | INFO     | Search-only: skipping patch selection
2025-10-15 21:01:10.118 | INFO     | Task matplotlib__matplotlib-26469 completed successfully.
2025-10-15 21:01:10.119 | INFO     | No patch generated. You can try running ACR again.
