2025-10-15 15:53:48.299 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-15 15:53:52.854 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=295, output_tokens=12, cost=0.003310
2025-10-15 15:53:52.862 | INFO     | Test agent decides that the issue statement does not contain reproduction steps; skipping reproducer tracing
2025-10-15 15:53:52.866 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 15:54:05.755 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=604, output_tokens=419, cost=0.018610
2025-10-15 15:54:05.764 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 15:54:09.639 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=773, output_tokens=57, cost=0.009440
2025-10-15 15:54:09.640 | DEBUG    | Extracted a valid json.
2025-10-15 15:54:09.640 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_class(\"FileSystemStorage\")",
        "search_code(\"tempfile.NamedTemporaryFile\")",
        "search_code(\"os.rename\")",
        "search_code(\"FILE_UPLOAD_PERMISSIONS\")"
    ],
    "bug_locations": []
}
2025-10-15 15:54:09.740 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-15 15:54:09.740 | DEBUG    | <Agent search> Analyzing search results.
2025-10-15 15:54:35.653 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1938, output_tokens=931, cost=0.047310
2025-10-15 15:54:35.666 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-15 15:54:43.257 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3085, output_tokens=294, cost=0.039670
2025-10-15 15:54:43.264 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-15 15:54:55.285 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=648, output_tokens=255, cost=0.014130
2025-10-15 15:54:55.286 | DEBUG    | Extracted a valid json.
2025-10-15 15:54:55.286 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations": [
        {
            "file": "django/core/files/storage.py",
            "class": "FileSystemStorage",
            "method": "_save",
            "intended_behavior": "Within the `_save` method, after a file is saved to its destination on the filesystem, the method should ensure that `FILE_UPLOAD_PERMISSIONS` is applied to the file. If `FILE_UPLOAD_PERMISSIONS` is not `None`, it should use `os.chmod` to set the file's permissions to the value defined by `FILE_UPLOAD_PERMISSIONS`. This ensures that regardless of the initial permissions set on the temporary file, the final file will have consistent and expected permission settings."
        },
        {
            "file": "django/conf/global_settings.py",
            "intended_behavior": "The default value of `FILE_UPLOAD_PERMISSIONS` should be changed from `None` to `0o644`. This change establishes a secure and sensible default permission set for newly uploaded files, addressing the inconsistency issue raised. By altering this setting, any file upload handled by `FileSystemStorage` will have permissions set to `0o644` by default unless explicitly overridden by the developer in the project's settings."
        }
    ]
}
2025-10-15 15:54:55.293 | DEBUG    | Bug location extracted successfully: [<file>django/core/files/storage.py</file>
<class>FileSystemStorage</class>
<method>_save</method>
<code>
226     def _save(self, name, content):
227         full_path = self.path(name)
228 
229         # Create any intermediate directories that do not exist.
230         directory = os.path.dirname(full_path)
231         try:
232             if self.directory_permissions_mode is not None:
233                 # os.makedirs applies the global umask, so we reset it,
234                 # for consistency with file_permissions_mode behavior.
235                 old_umask = os.umask(0)
236                 try:
237                     os.makedirs(directory, self.directory_permissions_mode, exist_ok=True)
238                 finally:
239                     os.umask(old_umask)
240             else:
241                 os.makedirs(directory, exist_ok=True)
242         except FileExistsError:
243             raise FileExistsError('%s exists and is not a directory.' % directory)
244 
245         # There's a potential race condition between get_available_name and
246         # saving the file; it's possible that two threads might return the
247         # same name, at which point all sorts of fun happens. So we need to
248         # try to create the file, but if it already exists we have to go back
249         # to get_available_name() and try again.
250 
251         while True:
252             try:
253                 # This file has a file path that we can move.
254                 if hasattr(content, 'temporary_file_path'):
255                     file_move_safe(content.temporary_file_path(), full_path)
256 
257                 # This is a normal uploadedfile that we can stream.
258                 else:
259                     # The current umask value is masked out by os.open!
260                     fd = os.open(full_path, self.OS_OPEN_FLAGS, 0o666)
261                     _file = None
262                     try:
263                         locks.lock(fd, locks.LOCK_EX)
264                         for chunk in content.chunks():
265                             if _file is None:
266                                 mode = 'wb' if isinstance(chunk, bytes) else 'wt'
267                                 _file = os.fdopen(fd, mode)
268                             _file.write(chunk)
269                     finally:
270                         locks.unlock(fd)
271                         if _file is not None:
272                             _file.close()
273                         else:
274                             os.close(fd)
275             except FileExistsError:
276                 # A new name is needed if the file exists.
277                 name = self.get_available_name(name)
278                 full_path = self.path(name)
279             else:
280                 # OK, the file save worked. Break out of the loop.
281                 break
282 
283         if self.file_permissions_mode is not None:
284             os.chmod(full_path, self.file_permissions_mode)
285 
286         # Store filenames with forward slashes, even on Windows.
287         return name.replace('\\', '/')

</code><intended_behavior>Within the `_save` method, after a file is saved to its destination on the filesystem, the method should ensure that `FILE_UPLOAD_PERMISSIONS` is applied to the file. If `FILE_UPLOAD_PERMISSIONS` is not `None`, it should use `os.chmod` to set the file's permissions to the value defined by `FILE_UPLOAD_PERMISSIONS`. This ensures that regardless of the initial permissions set on the temporary file, the final file will have consistent and expected permission settings.</intended_behavior>, <file>django/core/files/storage.py</file>
<class>FileSystemStorage</class>
<method>None</method>
<code>
170 class FileSystemStorage(Storage):
171     """
172     Standard filesystem storage
173     """
174     # The combination of O_CREAT and O_EXCL makes os.open() raise OSError if
175     # the file already exists before it's opened.
176     OS_OPEN_FLAGS = os.O_WRONLY | os.O_CREAT | os.O_EXCL | getattr(os, 'O_BINARY', 0)
177 
178     def __init__(self, location=None, base_url=None, file_permissions_mode=None,
179                  directory_permissions_mode=None):
180         self._location = location
181         self._base_url = base_url
182         self._file_permissions_mode = file_permissions_mode
183         self._directory_permissions_mode = directory_permissions_mode
184         setting_changed.connect(self._clear_cached_properties)
185 
186     def _clear_cached_properties(self, setting, **kwargs):
187         """Reset setting based property values."""
188         if setting == 'MEDIA_ROOT':
189             self.__dict__.pop('base_location', None)
190             self.__dict__.pop('location', None)
191         elif setting == 'MEDIA_URL':
192             self.__dict__.pop('base_url', None)
193         elif setting == 'FILE_UPLOAD_PERMISSIONS':
194             self.__dict__.pop('file_permissions_mode', None)
195         elif setting == 'FILE_UPLOAD_DIRECTORY_PERMISSIONS':
196             self.__dict__.pop('directory_permissions_mode', None)
197 
198     def _value_or_setting(self, value, setting):
199         return setting if value is None else value
200 
201     @cached_property
202     def base_location(self):
203         return self._value_or_setting(self._location, settings.MEDIA_ROOT)
204 
205     @cached_property
206     def location(self):
207         return os.path.abspath(self.base_location)
208 
209     @cached_property
210     def base_url(self):
211         if self._base_url is not None and not self._base_url.endswith('/'):
212             self._base_url += '/'
213         return self._value_or_setting(self._base_url, settings.MEDIA_URL)
214 
215     @cached_property
216     def file_permissions_mode(self):
217         return self._value_or_setting(self._file_permissions_mode, settings.FILE_UPLOAD_PERMISSIONS)
218 
219     @cached_property
220     def directory_permissions_mode(self):
221         return self._value_or_setting(self._directory_permissions_mode, settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS)
222 
223     def _open(self, name, mode='rb'):
224         return File(open(self.path(name), mode))
225 
226     def _save(self, name, content):
227         full_path = self.path(name)
228 
229         # Create any intermediate directories that do not exist.
230         directory = os.path.dirname(full_path)
231         try:
232             if self.directory_permissions_mode is not None:
233                 # os.makedirs applies the global umask, so we reset it,
234                 # for consistency with file_permissions_mode behavior.
235                 old_umask = os.umask(0)
236                 try:
237                     os.makedirs(directory, self.directory_permissions_mode, exist_ok=True)
238                 finally:
239                     os.umask(old_umask)
240             else:
241                 os.makedirs(directory, exist_ok=True)
242         except FileExistsError:
243             raise FileExistsError('%s exists and is not a directory.' % directory)
244 
245         # There's a potential race condition between get_available_name and
246         # saving the file; it's possible that two threads might return the
247         # same name, at which point all sorts of fun happens. So we need to
248         # try to create the file, but if it already exists we have to go back
249         # to get_available_name() and try again.
250 
251         while True:
252             try:
253                 # This file has a file path that we can move.
254                 if hasattr(content, 'temporary_file_path'):
255                     file_move_safe(content.temporary_file_path(), full_path)
256 
257                 # This is a normal uploadedfile that we can stream.
258                 else:
259                     # The current umask value is masked out by os.open!
260                     fd = os.open(full_path, self.OS_OPEN_FLAGS, 0o666)
261                     _file = None
262                     try:
263                         locks.lock(fd, locks.LOCK_EX)
264                         for chunk in content.chunks():
265                             if _file is None:
266                                 mode = 'wb' if isinstance(chunk, bytes) else 'wt'
267                                 _file = os.fdopen(fd, mode)
268                             _file.write(chunk)
269                     finally:
270                         locks.unlock(fd)
271                         if _file is not None:
272                             _file.close()
273                         else:
274                             os.close(fd)
275             except FileExistsError:
276                 # A new name is needed if the file exists.
277                 name = self.get_available_name(name)
278                 full_path = self.path(name)
279             else:
280                 # OK, the file save worked. Break out of the loop.
281                 break
282 
283         if self.file_permissions_mode is not None:
284             os.chmod(full_path, self.file_permissions_mode)
285 
286         # Store filenames with forward slashes, even on Windows.
287         return name.replace('\\', '/')
288 
289     def delete(self, name):
290         assert name, "The name argument is not allowed to be empty."
291         name = self.path(name)
292         # If the file or directory exists, delete it from the filesystem.
293         try:
294             if os.path.isdir(name):
295                 os.rmdir(name)
296             else:
297                 os.remove(name)
298         except FileNotFoundError:
299             # FileNotFoundError is raised if the file or directory was removed
300             # concurrently.
301             pass
302 
303     def exists(self, name):
304         return os.path.exists(self.path(name))
305 
306     def listdir(self, path):
307         path = self.path(path)
308         directories, files = [], []
309         for entry in os.scandir(path):
310             if entry.is_dir():
311                 directories.append(entry.name)
312             else:
313                 files.append(entry.name)
314         return directories, files
315 
316     def path(self, name):
317         return safe_join(self.location, name)
318 
319     def size(self, name):
320         return os.path.getsize(self.path(name))
321 
322     def url(self, name):
323         if self.base_url is None:
324             raise ValueError("This file is not accessible via a URL.")
325         url = filepath_to_uri(name)
326         if url is not None:
327             url = url.lstrip('/')
328         return urljoin(self.base_url, url)
329 
330     def _datetime_from_timestamp(self, ts):
331         """
332         If timezone support is enabled, make an aware datetime object in UTC;
333         otherwise make a naive one in the local timezone.
334         """
335         if settings.USE_TZ:
336             # Safe to use .replace() because UTC doesn't have DST
337             return datetime.utcfromtimestamp(ts).replace(tzinfo=timezone.utc)
338         else:
339             return datetime.fromtimestamp(ts)
340 
341     def get_accessed_time(self, name):
342         return self._datetime_from_timestamp(os.path.getatime(self.path(name)))
343 
344     def get_created_time(self, name):
345         return self._datetime_from_timestamp(os.path.getctime(self.path(name)))
346 
347     def get_modified_time(self, name):
348         return self._datetime_from_timestamp(os.path.getmtime(self.path(name)))

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>django/conf/global_settings.py</file>
<class>None</class>
<method>None</method>
<code>
1 """
2 Default Django settings. Override these with settings in the module pointed to
3 by the DJANGO_SETTINGS_MODULE environment variable.
4 """
5 
6 
7 # This is defined here as a do-nothing function because we can't import
8 # django.utils.translation -- that module depends on the settings.
9 def gettext_noop(s):
10     return s
11 
12 
13 ####################
14 # CORE             #
15 ####################
16 
17 DEBUG = False
18 
19 # Whether the framework should propagate raw exceptions rather than catching
20 # them. This is useful under some testing situations and should never be used
21 # on a live site.
22 DEBUG_PROPAGATE_EXCEPTIONS = False
23 
24 # People who get code error notifications.
25 # In the format [('Full Name', 'email@example.com'), ('Full Name', 'anotheremail@example.com')]
26 ADMINS = []
27 
28 # List of IP addresses, as strings, that:
29 #   * See debug comments, when DEBUG is true
30 #   * Receive x-headers
31 INTERNAL_IPS = []
32 
33 # Hosts/domain names that are valid for this site.
34 # "*" matches anything, ".example.com" matches example.com and all subdomains
35 ALLOWED_HOSTS = []
36 
37 # Local time zone for this installation. All choices can be found here:
38 # https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all
39 # systems may support all possibilities). When USE_TZ is True, this is
40 # interpreted as the default user time zone.
41 TIME_ZONE = 'America/Chicago'
42 
43 # If you set this to True, Django will use timezone-aware datetimes.
44 USE_TZ = False
45 
46 # Language code for this installation. All choices can be found here:
47 # http://www.i18nguy.com/unicode/language-identifiers.html
48 LANGUAGE_CODE = 'en-us'
49 
50 # Languages we provide translations for, out of the box.
51 LANGUAGES = [
52     ('af', gettext_noop('Afrikaans')),
53     ('ar', gettext_noop('Arabic')),
54     ('ast', gettext_noop('Asturian')),
55     ('az', gettext_noop('Azerbaijani')),
56     ('bg', gettext_noop('Bulgarian')),
57     ('be', gettext_noop('Belarusian')),
58     ('bn', gettext_noop('Bengali')),
59     ('br', gettext_noop('Breton')),
60     ('bs', gettext_noop('Bosnian')),
61     ('ca', gettext_noop('Catalan')),
62     ('cs', gettext_noop('Czech')),
63     ('cy', gettext_noop('Welsh')),
64     ('da', gettext_noop('Danish')),
65     ('de', gettext_noop('German')),
66     ('dsb', gettext_noop('Lower Sorbian')),
67     ('el', gettext_noop('Greek')),
68     ('en', gettext_noop('English')),
69     ('en-au', gettext_noop('Australian English')),
70     ('en-gb', gettext_noop('British English')),
71     ('eo', gettext_noop('Esperanto')),
72     ('es', gettext_noop('Spanish')),
73     ('es-ar', gettext_noop('Argentinian Spanish')),
74     ('es-co', gettext_noop('Colombian Spanish')),
75     ('es-mx', gettext_noop('Mexican Spanish')),
76     ('es-ni', gettext_noop('Nicaraguan Spanish')),
77     ('es-ve', gettext_noop('Venezuelan Spanish')),
78     ('et', gettext_noop('Estonian')),
79     ('eu', gettext_noop('Basque')),
80     ('fa', gettext_noop('Persian')),
81     ('fi', gettext_noop('Finnish')),
82     ('fr', gettext_noop('French')),
83     ('fy', gettext_noop('Frisian')),
84     ('ga', gettext_noop('Irish')),
85     ('gd', gettext_noop('Scottish Gaelic')),
86     ('gl', gettext_noop('Galician')),
87     ('he', gettext_noop('Hebrew')),
88     ('hi', gettext_noop('Hindi')),
89     ('hr', gettext_noop('Croatian')),
90     ('hsb', gettext_noop('Upper Sorbian')),
91     ('hu', gettext_noop('Hungarian')),
92     ('hy', gettext_noop('Armenian')),
93     ('ia', gettext_noop('Interlingua')),
94     ('id', gettext_noop('Indonesian')),
95     ('io', gettext_noop('Ido')),
96     ('is', gettext_noop('Icelandic')),
97     ('it', gettext_noop('Italian')),
98     ('ja', gettext_noop('Japanese')),
99     ('ka', gettext_noop('Georgian')),
100     ('kab', gettext_noop('Kabyle')),
101     ('kk', gettext_noop('Kazakh')),
102     ('km', gettext_noop('Khmer')),
103     ('kn', gettext_noop('Kannada')),
104     ('ko', gettext_noop('Korean')),
105     ('lb', gettext_noop('Luxembourgish')),
106     ('lt', gettext_noop('Lithuanian')),
107     ('lv', gettext_noop('Latvian')),
108     ('mk', gettext_noop('Macedonian')),
109     ('ml', gettext_noop('Malayalam')),
110     ('mn', gettext_noop('Mongolian')),
111     ('mr', gettext_noop('Marathi')),
112     ('my', gettext_noop('Burmese')),
113     ('nb', gettext_noop('Norwegian Bokmål')),
114     ('ne', gettext_noop('Nepali')),
115     ('nl', gettext_noop('Dutch')),
116     ('nn', gettext_noop('Norwegian Nynorsk')),
117     ('os', gettext_noop('Ossetic')),
118     ('pa', gettext_noop('Punjabi')),
119     ('pl', gettext_noop('Polish')),
120     ('pt', gettext_noop('Portuguese')),
121     ('pt-br', gettext_noop('Brazilian Portuguese')),
122     ('ro', gettext_noop('Romanian')),
123     ('ru', gettext_noop('Russian')),
124     ('sk', gettext_noop('Slovak')),
125     ('sl', gettext_noop('Slovenian')),
126     ('sq', gettext_noop('Albanian')),
127     ('sr', gettext_noop('Serbian')),
128     ('sr-latn', gettext_noop('Serbian Latin')),
129     ('sv', gettext_noop('Swedish')),
130     ('sw', gettext_noop('Swahili')),
131     ('ta', gettext_noop('Tamil')),
132     ('te', gettext_noop('Telugu')),
133     ('th', gettext_noop('Thai')),
134     ('tr', gettext_noop('Turkish')),
135     ('tt', gettext_noop('Tatar')),
136     ('udm', gettext_noop('Udmurt')),
137     ('uk', gettext_noop('Ukrainian')),
138     ('ur', gettext_noop('Urdu')),
139     ('vi', gettext_noop('Vietnamese')),
140     ('zh-hans', gettext_noop('Simplified Chinese')),
141     ('zh-hant', gettext_noop('Traditional Chinese')),
142 ]
143 
144 # Languages using BiDi (right-to-left) layout
145 LANGUAGES_BIDI = ["he", "ar", "fa", "ur"]
146 
147 # If you set this to False, Django will make some optimizations so as not
148 # to load the internationalization machinery.
149 USE_I18N = True
150 LOCALE_PATHS = []
151 
152 # Settings for language cookie
153 LANGUAGE_COOKIE_NAME = 'django_language'
154 LANGUAGE_COOKIE_AGE = None
155 LANGUAGE_COOKIE_DOMAIN = None
156 LANGUAGE_COOKIE_PATH = '/'
157 
158 
159 # If you set this to True, Django will format dates, numbers and calendars
160 # according to user current locale.
161 USE_L10N = False
162 
163 # Not-necessarily-technical managers of the site. They get broken link
164 # notifications and other various emails.
165 MANAGERS = ADMINS
166 
167 # Default charset to use for all HttpResponse objects, if a MIME type isn't
168 # manually specified. It's used to construct the Content-Type header.
169 DEFAULT_CHARSET = 'utf-8'
170 
171 # Encoding of files read from disk (template and initial SQL files).
172 FILE_CHARSET = 'utf-8'
173 
174 # Email address that error messages come from.
175 SERVER_EMAIL = 'root@localhost'
176 
177 # Database connection info. If left empty, will default to the dummy backend.
178 DATABASES = {}
179 
180 # Classes used to implement DB routing behavior.
181 DATABASE_ROUTERS = []
182 
183 # The email backend to use. For possible shortcuts see django.core.mail.
184 # The default is to use the SMTP backend.
185 # Third-party backends can be specified by providing a Python path
186 # to a module that defines an EmailBackend class.
187 EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
188 
189 # Host for sending email.
190 EMAIL_HOST = 'localhost'
191 
192 # Port for sending email.
193 EMAIL_PORT = 25
194 
195 # Whether to send SMTP 'Date' header in the local time zone or in UTC.
196 EMAIL_USE_LOCALTIME = False
197 
198 # Optional SMTP authentication information for EMAIL_HOST.
199 EMAIL_HOST_USER = ''
200 EMAIL_HOST_PASSWORD = ''
201 EMAIL_USE_TLS = False
202 EMAIL_USE_SSL = False
203 EMAIL_SSL_CERTFILE = None
204 EMAIL_SSL_KEYFILE = None
205 EMAIL_TIMEOUT = None
206 
207 # List of strings representing installed apps.
208 INSTALLED_APPS = []
209 
210 TEMPLATES = []
211 
212 # Default form rendering class.
213 FORM_RENDERER = 'django.forms.renderers.DjangoTemplates'
214 
215 # Default email address to use for various automated correspondence from
216 # the site managers.
217 DEFAULT_FROM_EMAIL = 'webmaster@localhost'
218 
219 # Subject-line prefix for email messages send with django.core.mail.mail_admins
220 # or ...mail_managers.  Make sure to include the trailing space.
221 EMAIL_SUBJECT_PREFIX = '[Django] '
222 
223 # Whether to append trailing slashes to URLs.
224 APPEND_SLASH = True
225 
226 # Whether to prepend the "www." subdomain to URLs that don't have it.
227 PREPEND_WWW = False
228 
229 # Override the server-derived value of SCRIPT_NAME
230 FORCE_SCRIPT_NAME = None
231 
232 # List of compiled regular expression objects representing User-Agent strings
233 # that are not allowed to visit any page, systemwide. Use this for bad
234 # robots/crawlers. Here are a few examples:
235 #     import re
236 #     DISALLOWED_USER_AGENTS = [
237 #         re.compile(r'^NaverBot.*'),
238 #         re.compile(r'^EmailSiphon.*'),
239 #         re.compile(r'^SiteSucker.*'),
240 #         re.compile(r'^sohu-search'),
241 #     ]
242 DISALLOWED_USER_AGENTS = []
243 
244 ABSOLUTE_URL_OVERRIDES = {}
245 
246 # List of compiled regular expression objects representing URLs that need not
247 # be reported by BrokenLinkEmailsMiddleware. Here are a few examples:
248 #    import re
249 #    IGNORABLE_404_URLS = [
250 #        re.compile(r'^/apple-touch-icon.*\.png$'),
251 #        re.compile(r'^/favicon.ico$'),
252 #        re.compile(r'^/robots.txt$'),
253 #        re.compile(r'^/phpmyadmin/'),
254 #        re.compile(r'\.(cgi|php|pl)$'),
255 #    ]
256 IGNORABLE_404_URLS = []
257 
258 # A secret key for this particular Django installation. Used in secret-key
259 # hashing algorithms. Set this in your settings, or Django will complain
260 # loudly.
261 SECRET_KEY = ''
262 
263 # Default file storage mechanism that holds media.
264 DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
265 
266 # Absolute filesystem path to the directory that will hold user-uploaded files.
267 # Example: "/var/www/example.com/media/"
268 MEDIA_ROOT = ''
269 
270 # URL that handles the media served from MEDIA_ROOT.
271 # Examples: "http://example.com/media/", "http://media.example.com/"
272 MEDIA_URL = ''
273 
274 # Absolute path to the directory static files should be collected to.
275 # Example: "/var/www/example.com/static/"
276 STATIC_ROOT = None
277 
278 # URL that handles the static files served from STATIC_ROOT.
279 # Example: "http://example.com/static/", "http://static.example.com/"
280 STATIC_URL = None
281 
282 # List of upload handler classes to be applied in order.
283 FILE_UPLOAD_HANDLERS = [
284     'django.core.files.uploadhandler.MemoryFileUploadHandler',
285     'django.core.files.uploadhandler.TemporaryFileUploadHandler',
286 ]
287 
288 # Maximum size, in bytes, of a request before it will be streamed to the
289 # file system instead of into memory.
290 FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB
291 
292 # Maximum size in bytes of request data (excluding file uploads) that will be
293 # read before a SuspiciousOperation (RequestDataTooBig) is raised.
294 DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB
295 
296 # Maximum number of GET/POST parameters that will be read before a
297 # SuspiciousOperation (TooManyFieldsSent) is raised.
298 DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000
299 
300 # Directory in which upload streamed files will be temporarily saved. A value of
301 # `None` will make Django use the operating system's default temporary directory
302 # (i.e. "/tmp" on *nix systems).
303 FILE_UPLOAD_TEMP_DIR = None
304 
305 # The numeric mode to set newly-uploaded files to. The value should be a mode
306 # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.
307 FILE_UPLOAD_PERMISSIONS = None
308 
309 # The numeric mode to assign to newly-created directories, when uploading files.
310 # The value should be a mode as you'd pass to os.chmod;
311 # see https://docs.python.org/library/os.html#files-and-directories.
312 FILE_UPLOAD_DIRECTORY_PERMISSIONS = None
313 
314 # Python module path where user will place custom format definition.
315 # The directory where this setting is pointing should contain subdirectories
316 # named as the locales, containing a formats.py file
317 # (i.e. "myproject.locale" for myproject/locale/en/formats.py etc. use)
318 FORMAT_MODULE_PATH = None
319 
320 # Default formatting for date objects. See all available format strings here:
321 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
322 DATE_FORMAT = 'N j, Y'
323 
324 # Default formatting for datetime objects. See all available format strings here:
325 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
326 DATETIME_FORMAT = 'N j, Y, P'
327 
328 # Default formatting for time objects. See all available format strings here:
329 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
330 TIME_FORMAT = 'P'
331 
332 # Default formatting for date objects when only the year and month are relevant.
333 # See all available format strings here:
334 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
335 YEAR_MONTH_FORMAT = 'F Y'
336 
337 # Default formatting for date objects when only the month and day are relevant.
338 # See all available format strings here:
339 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
340 MONTH_DAY_FORMAT = 'F j'
341 
342 # Default short formatting for date objects. See all available format strings here:
343 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
344 SHORT_DATE_FORMAT = 'm/d/Y'
345 
346 # Default short formatting for datetime objects.
347 # See all available format strings here:
348 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
349 SHORT_DATETIME_FORMAT = 'm/d/Y P'
350 
351 # Default formats to be used when parsing dates from input boxes, in order
352 # See all available format string here:
353 # https://docs.python.org/library/datetime.html#strftime-behavior
354 # * Note that these format strings are different from the ones to display dates
355 DATE_INPUT_FORMATS = [
356     '%Y-%m-%d', '%m/%d/%Y', '%m/%d/%y',  # '2006-10-25', '10/25/2006', '10/25/06'
357     '%b %d %Y', '%b %d, %Y',             # 'Oct 25 2006', 'Oct 25, 2006'
358     '%d %b %Y', '%d %b, %Y',             # '25 Oct 2006', '25 Oct, 2006'
359     '%B %d %Y', '%B %d, %Y',             # 'October 25 2006', 'October 25, 2006'
360     '%d %B %Y', '%d %B, %Y',             # '25 October 2006', '25 October, 2006'
361 ]
362 
363 # Default formats to be used when parsing times from input boxes, in order
364 # See all available format string here:
365 # https://docs.python.org/library/datetime.html#strftime-behavior
366 # * Note that these format strings are different from the ones to display dates
367 TIME_INPUT_FORMATS = [
368     '%H:%M:%S',     # '14:30:59'
369     '%H:%M:%S.%f',  # '14:30:59.000200'
370     '%H:%M',        # '14:30'
371 ]
372 
373 # Default formats to be used when parsing dates and times from input boxes,
374 # in order
375 # See all available format string here:
376 # https://docs.python.org/library/datetime.html#strftime-behavior
377 # * Note that these format strings are different from the ones to display dates
378 DATETIME_INPUT_FORMATS = [
379     '%Y-%m-%d %H:%M:%S',     # '2006-10-25 14:30:59'
380     '%Y-%m-%d %H:%M:%S.%f',  # '2006-10-25 14:30:59.000200'
381     '%Y-%m-%d %H:%M',        # '2006-10-25 14:30'
382     '%Y-%m-%d',              # '2006-10-25'
383     '%m/%d/%Y %H:%M:%S',     # '10/25/2006 14:30:59'
384     '%m/%d/%Y %H:%M:%S.%f',  # '10/25/2006 14:30:59.000200'
385     '%m/%d/%Y %H:%M',        # '10/25/2006 14:30'
386     '%m/%d/%Y',              # '10/25/2006'
387     '%m/%d/%y %H:%M:%S',     # '10/25/06 14:30:59'
388     '%m/%d/%y %H:%M:%S.%f',  # '10/25/06 14:30:59.000200'
389     '%m/%d/%y %H:%M',        # '10/25/06 14:30'
390     '%m/%d/%y',              # '10/25/06'
391 ]
392 
393 # First day of week, to be used on calendars
394 # 0 means Sunday, 1 means Monday...
395 FIRST_DAY_OF_WEEK = 0
396 
397 # Decimal separator symbol
398 DECIMAL_SEPARATOR = '.'
399 
400 # Boolean that sets whether to add thousand separator when formatting numbers
401 USE_THOUSAND_SEPARATOR = False
402 
403 # Number of digits that will be together, when splitting them by
404 # THOUSAND_SEPARATOR. 0 means no grouping, 3 means splitting by thousands...
405 NUMBER_GROUPING = 0
406 
407 # Thousand separator symbol
408 THOUSAND_SEPARATOR = ','
409 
410 # The tablespaces to use for each model when not specified otherwise.
411 DEFAULT_TABLESPACE = ''
412 DEFAULT_INDEX_TABLESPACE = ''
413 
414 # Default X-Frame-Options header value
415 X_FRAME_OPTIONS = 'SAMEORIGIN'
416 
417 USE_X_FORWARDED_HOST = False
418 USE_X_FORWARDED_PORT = False
419 
420 # The Python dotted path to the WSGI application that Django's internal server
421 # (runserver) will use. If `None`, the return value of
422 # 'django.core.wsgi.get_wsgi_application' is used, thus preserving the same
423 # behavior as previous versions of Django. Otherwise this should point to an
424 # actual WSGI application object.
425 WSGI_APPLICATION = None
426 
427 # If your Django app is behind a proxy that sets a header to specify secure
428 # connections, AND that proxy ensures that user-submitted headers with the
429 # same name are ignored (so that people can't spoof it), set this value to
430 # a tuple of (header_name, header_value). For any requests that come in with
431 # that header/value, request.is_secure() will return True.
432 # WARNING! Only set this if you fully understand what you're doing. Otherwise,
433 # you may be opening yourself up to a security risk.
434 SECURE_PROXY_SSL_HEADER = None
435 
436 ##############
437 # MIDDLEWARE #
438 ##############
439 
440 # List of middleware to use. Order is important; in the request phase, these
441 # middleware will be applied in the order given, and in the response
442 # phase the middleware will be applied in reverse order.
443 MIDDLEWARE = []
444 
445 ############
446 # SESSIONS #
447 ############
448 
449 # Cache to store session data if using the cache session backend.
450 SESSION_CACHE_ALIAS = 'default'
451 # Cookie name. This can be whatever you want.
452 SESSION_COOKIE_NAME = 'sessionid'
453 # Age of cookie, in seconds (default: 2 weeks).
454 SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2
455 # A string like "example.com", or None for standard domain cookie.
456 SESSION_COOKIE_DOMAIN = None
457 # Whether the session cookie should be secure (https:// only).
458 SESSION_COOKIE_SECURE = False
459 # The path of the session cookie.
460 SESSION_COOKIE_PATH = '/'
461 # Whether to use the non-RFC standard httpOnly flag (IE, FF3+, others)
462 SESSION_COOKIE_HTTPONLY = True
463 # Whether to set the flag restricting cookie leaks on cross-site requests.
464 # This can be 'Lax', 'Strict', or None to disable the flag.
465 SESSION_COOKIE_SAMESITE = 'Lax'
466 # Whether to save the session data on every request.
467 SESSION_SAVE_EVERY_REQUEST = False
468 # Whether a user's session cookie expires when the Web browser is closed.
469 SESSION_EXPIRE_AT_BROWSER_CLOSE = False
470 # The module to store session data
471 SESSION_ENGINE = 'django.contrib.sessions.backends.db'
472 # Directory to store session files if using the file session module. If None,
473 # the backend will use a sensible default.
474 SESSION_FILE_PATH = None
475 # class to serialize session data
476 SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'
477 
478 #########
479 # CACHE #
480 #########
481 
482 # The cache backends to use.
483 CACHES = {
484     'default': {
485         'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
486     }
487 }
488 CACHE_MIDDLEWARE_KEY_PREFIX = ''
489 CACHE_MIDDLEWARE_SECONDS = 600
490 CACHE_MIDDLEWARE_ALIAS = 'default'
491 
492 ##################
493 # AUTHENTICATION #
494 ##################
495 
496 AUTH_USER_MODEL = 'auth.User'
497 
498 AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend']
499 
500 LOGIN_URL = '/accounts/login/'
501 
502 LOGIN_REDIRECT_URL = '/accounts/profile/'
503 
504 LOGOUT_REDIRECT_URL = None
505 
506 # The number of days a password reset link is valid for
507 PASSWORD_RESET_TIMEOUT_DAYS = 3
508 
509 # the first hasher in this list is the preferred algorithm.  any
510 # password using different algorithms will be converted automatically
511 # upon login
512 PASSWORD_HASHERS = [
513     'django.contrib.auth.hashers.PBKDF2PasswordHasher',
514     'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
515     'django.contrib.auth.hashers.Argon2PasswordHasher',
516     'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
517 ]
518 
519 AUTH_PASSWORD_VALIDATORS = []
520 
521 ###########
522 # SIGNING #
523 ###########
524 
525 SIGNING_BACKEND = 'django.core.signing.TimestampSigner'
526 
527 ########
528 # CSRF #
529 ########
530 
531 # Dotted path to callable to be used as view when a request is
532 # rejected by the CSRF middleware.
533 CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'
534 
535 # Settings for CSRF cookie.
536 CSRF_COOKIE_NAME = 'csrftoken'
537 CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52
538 CSRF_COOKIE_DOMAIN = None
539 CSRF_COOKIE_PATH = '/'
540 CSRF_COOKIE_SECURE = False
541 CSRF_COOKIE_HTTPONLY = False
542 CSRF_COOKIE_SAMESITE = 'Lax'
543 CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'
544 CSRF_TRUSTED_ORIGINS = []
545 CSRF_USE_SESSIONS = False
546 
547 ############
548 # MESSAGES #
549 ############
550 
551 # Class to use as messages backend
552 MESSAGE_STORAGE = 'django.contrib.messages.storage.fallback.FallbackStorage'
553 
554 # Default values of MESSAGE_LEVEL and MESSAGE_TAGS are defined within
555 # django.contrib.messages to avoid imports in this settings file.
556 
557 ###########
558 # LOGGING #
559 ###########
560 
561 # The callable to use to configure logging
562 LOGGING_CONFIG = 'logging.config.dictConfig'
563 
564 # Custom logging configuration.
565 LOGGING = {}
566 
567 # Default exception reporter filter class used in case none has been
568 # specifically assigned to the HttpRequest instance.
569 DEFAULT_EXCEPTION_REPORTER_FILTER = 'django.views.debug.SafeExceptionReporterFilter'
570 
571 ###########
572 # TESTING #
573 ###########
574 
575 # The name of the class to use to run the test suite
576 TEST_RUNNER = 'django.test.runner.DiscoverRunner'
577 
578 # Apps that don't need to be serialized at test database creation time
579 # (only apps with migrations are to start with)
580 TEST_NON_SERIALIZED_APPS = []
581 
582 ############
583 # FIXTURES #
584 ############
585 
586 # The list of directories to search for fixtures
587 FIXTURE_DIRS = []
588 
589 ###############
590 # STATICFILES #
591 ###############
592 
593 # A list of locations of additional static files
594 STATICFILES_DIRS = []
595 
596 # The default file storage backend used during the build process
597 STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
598 
599 # List of finder classes that know how to find static files in
600 # various locations.
601 STATICFILES_FINDERS = [
602     'django.contrib.staticfiles.finders.FileSystemFinder',
603     'django.contrib.staticfiles.finders.AppDirectoriesFinder',
604     # 'django.contrib.staticfiles.finders.DefaultStorageFinder',
605 ]
606 
607 ##############
608 # MIGRATIONS #
609 ##############
610 
611 # Migration module overrides for apps, by app label.
612 MIGRATION_MODULES = {}
613 
614 #################
615 # SYSTEM CHECKS #
616 #################
617 
618 # List of all issues generated by system checks that should be silenced. Light
619 # issues like warnings, infos or debugs will not generate a message. Silencing
620 # serious issues like errors and criticals does not result in hiding the
621 # message, but Django will not stop you from e.g. running server.
622 SILENCED_SYSTEM_CHECKS = []
623 
624 #######################
625 # SECURITY MIDDLEWARE #
626 #######################
627 SECURE_BROWSER_XSS_FILTER = False
628 SECURE_CONTENT_TYPE_NOSNIFF = False
629 SECURE_HSTS_INCLUDE_SUBDOMAINS = False
630 SECURE_HSTS_PRELOAD = False
631 SECURE_HSTS_SECONDS = 0
632 SECURE_REDIRECT_EXEMPT = []
633 SECURE_SSL_HOST = None
634 SECURE_SSL_REDIRECT = False

</code><intended_behavior>The default value of `FILE_UPLOAD_PERMISSIONS` should be changed from `None` to `0o644`. This change establishes a secure and sensible default permission set for newly uploaded files, addressing the inconsistency issue raised. By altering this setting, any file upload handled by `FileSystemStorage` will have permissions set to `0o644` by default unless explicitly overridden by the developer in the project's settings.</intended_behavior>]
2025-10-15 15:54:55.293 | INFO     | Search completed. Bug locations: [<file>django/core/files/storage.py</file>
<class>FileSystemStorage</class>
<method>_save</method>
<code>
226     def _save(self, name, content):
227         full_path = self.path(name)
228 
229         # Create any intermediate directories that do not exist.
230         directory = os.path.dirname(full_path)
231         try:
232             if self.directory_permissions_mode is not None:
233                 # os.makedirs applies the global umask, so we reset it,
234                 # for consistency with file_permissions_mode behavior.
235                 old_umask = os.umask(0)
236                 try:
237                     os.makedirs(directory, self.directory_permissions_mode, exist_ok=True)
238                 finally:
239                     os.umask(old_umask)
240             else:
241                 os.makedirs(directory, exist_ok=True)
242         except FileExistsError:
243             raise FileExistsError('%s exists and is not a directory.' % directory)
244 
245         # There's a potential race condition between get_available_name and
246         # saving the file; it's possible that two threads might return the
247         # same name, at which point all sorts of fun happens. So we need to
248         # try to create the file, but if it already exists we have to go back
249         # to get_available_name() and try again.
250 
251         while True:
252             try:
253                 # This file has a file path that we can move.
254                 if hasattr(content, 'temporary_file_path'):
255                     file_move_safe(content.temporary_file_path(), full_path)
256 
257                 # This is a normal uploadedfile that we can stream.
258                 else:
259                     # The current umask value is masked out by os.open!
260                     fd = os.open(full_path, self.OS_OPEN_FLAGS, 0o666)
261                     _file = None
262                     try:
263                         locks.lock(fd, locks.LOCK_EX)
264                         for chunk in content.chunks():
265                             if _file is None:
266                                 mode = 'wb' if isinstance(chunk, bytes) else 'wt'
267                                 _file = os.fdopen(fd, mode)
268                             _file.write(chunk)
269                     finally:
270                         locks.unlock(fd)
271                         if _file is not None:
272                             _file.close()
273                         else:
274                             os.close(fd)
275             except FileExistsError:
276                 # A new name is needed if the file exists.
277                 name = self.get_available_name(name)
278                 full_path = self.path(name)
279             else:
280                 # OK, the file save worked. Break out of the loop.
281                 break
282 
283         if self.file_permissions_mode is not None:
284             os.chmod(full_path, self.file_permissions_mode)
285 
286         # Store filenames with forward slashes, even on Windows.
287         return name.replace('\\', '/')

</code><intended_behavior>Within the `_save` method, after a file is saved to its destination on the filesystem, the method should ensure that `FILE_UPLOAD_PERMISSIONS` is applied to the file. If `FILE_UPLOAD_PERMISSIONS` is not `None`, it should use `os.chmod` to set the file's permissions to the value defined by `FILE_UPLOAD_PERMISSIONS`. This ensures that regardless of the initial permissions set on the temporary file, the final file will have consistent and expected permission settings.</intended_behavior>, <file>django/core/files/storage.py</file>
<class>FileSystemStorage</class>
<method>None</method>
<code>
170 class FileSystemStorage(Storage):
171     """
172     Standard filesystem storage
173     """
174     # The combination of O_CREAT and O_EXCL makes os.open() raise OSError if
175     # the file already exists before it's opened.
176     OS_OPEN_FLAGS = os.O_WRONLY | os.O_CREAT | os.O_EXCL | getattr(os, 'O_BINARY', 0)
177 
178     def __init__(self, location=None, base_url=None, file_permissions_mode=None,
179                  directory_permissions_mode=None):
180         self._location = location
181         self._base_url = base_url
182         self._file_permissions_mode = file_permissions_mode
183         self._directory_permissions_mode = directory_permissions_mode
184         setting_changed.connect(self._clear_cached_properties)
185 
186     def _clear_cached_properties(self, setting, **kwargs):
187         """Reset setting based property values."""
188         if setting == 'MEDIA_ROOT':
189             self.__dict__.pop('base_location', None)
190             self.__dict__.pop('location', None)
191         elif setting == 'MEDIA_URL':
192             self.__dict__.pop('base_url', None)
193         elif setting == 'FILE_UPLOAD_PERMISSIONS':
194             self.__dict__.pop('file_permissions_mode', None)
195         elif setting == 'FILE_UPLOAD_DIRECTORY_PERMISSIONS':
196             self.__dict__.pop('directory_permissions_mode', None)
197 
198     def _value_or_setting(self, value, setting):
199         return setting if value is None else value
200 
201     @cached_property
202     def base_location(self):
203         return self._value_or_setting(self._location, settings.MEDIA_ROOT)
204 
205     @cached_property
206     def location(self):
207         return os.path.abspath(self.base_location)
208 
209     @cached_property
210     def base_url(self):
211         if self._base_url is not None and not self._base_url.endswith('/'):
212             self._base_url += '/'
213         return self._value_or_setting(self._base_url, settings.MEDIA_URL)
214 
215     @cached_property
216     def file_permissions_mode(self):
217         return self._value_or_setting(self._file_permissions_mode, settings.FILE_UPLOAD_PERMISSIONS)
218 
219     @cached_property
220     def directory_permissions_mode(self):
221         return self._value_or_setting(self._directory_permissions_mode, settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS)
222 
223     def _open(self, name, mode='rb'):
224         return File(open(self.path(name), mode))
225 
226     def _save(self, name, content):
227         full_path = self.path(name)
228 
229         # Create any intermediate directories that do not exist.
230         directory = os.path.dirname(full_path)
231         try:
232             if self.directory_permissions_mode is not None:
233                 # os.makedirs applies the global umask, so we reset it,
234                 # for consistency with file_permissions_mode behavior.
235                 old_umask = os.umask(0)
236                 try:
237                     os.makedirs(directory, self.directory_permissions_mode, exist_ok=True)
238                 finally:
239                     os.umask(old_umask)
240             else:
241                 os.makedirs(directory, exist_ok=True)
242         except FileExistsError:
243             raise FileExistsError('%s exists and is not a directory.' % directory)
244 
245         # There's a potential race condition between get_available_name and
246         # saving the file; it's possible that two threads might return the
247         # same name, at which point all sorts of fun happens. So we need to
248         # try to create the file, but if it already exists we have to go back
249         # to get_available_name() and try again.
250 
251         while True:
252             try:
253                 # This file has a file path that we can move.
254                 if hasattr(content, 'temporary_file_path'):
255                     file_move_safe(content.temporary_file_path(), full_path)
256 
257                 # This is a normal uploadedfile that we can stream.
258                 else:
259                     # The current umask value is masked out by os.open!
260                     fd = os.open(full_path, self.OS_OPEN_FLAGS, 0o666)
261                     _file = None
262                     try:
263                         locks.lock(fd, locks.LOCK_EX)
264                         for chunk in content.chunks():
265                             if _file is None:
266                                 mode = 'wb' if isinstance(chunk, bytes) else 'wt'
267                                 _file = os.fdopen(fd, mode)
268                             _file.write(chunk)
269                     finally:
270                         locks.unlock(fd)
271                         if _file is not None:
272                             _file.close()
273                         else:
274                             os.close(fd)
275             except FileExistsError:
276                 # A new name is needed if the file exists.
277                 name = self.get_available_name(name)
278                 full_path = self.path(name)
279             else:
280                 # OK, the file save worked. Break out of the loop.
281                 break
282 
283         if self.file_permissions_mode is not None:
284             os.chmod(full_path, self.file_permissions_mode)
285 
286         # Store filenames with forward slashes, even on Windows.
287         return name.replace('\\', '/')
288 
289     def delete(self, name):
290         assert name, "The name argument is not allowed to be empty."
291         name = self.path(name)
292         # If the file or directory exists, delete it from the filesystem.
293         try:
294             if os.path.isdir(name):
295                 os.rmdir(name)
296             else:
297                 os.remove(name)
298         except FileNotFoundError:
299             # FileNotFoundError is raised if the file or directory was removed
300             # concurrently.
301             pass
302 
303     def exists(self, name):
304         return os.path.exists(self.path(name))
305 
306     def listdir(self, path):
307         path = self.path(path)
308         directories, files = [], []
309         for entry in os.scandir(path):
310             if entry.is_dir():
311                 directories.append(entry.name)
312             else:
313                 files.append(entry.name)
314         return directories, files
315 
316     def path(self, name):
317         return safe_join(self.location, name)
318 
319     def size(self, name):
320         return os.path.getsize(self.path(name))
321 
322     def url(self, name):
323         if self.base_url is None:
324             raise ValueError("This file is not accessible via a URL.")
325         url = filepath_to_uri(name)
326         if url is not None:
327             url = url.lstrip('/')
328         return urljoin(self.base_url, url)
329 
330     def _datetime_from_timestamp(self, ts):
331         """
332         If timezone support is enabled, make an aware datetime object in UTC;
333         otherwise make a naive one in the local timezone.
334         """
335         if settings.USE_TZ:
336             # Safe to use .replace() because UTC doesn't have DST
337             return datetime.utcfromtimestamp(ts).replace(tzinfo=timezone.utc)
338         else:
339             return datetime.fromtimestamp(ts)
340 
341     def get_accessed_time(self, name):
342         return self._datetime_from_timestamp(os.path.getatime(self.path(name)))
343 
344     def get_created_time(self, name):
345         return self._datetime_from_timestamp(os.path.getctime(self.path(name)))
346 
347     def get_modified_time(self, name):
348         return self._datetime_from_timestamp(os.path.getmtime(self.path(name)))

</code><intended_behavior>This class provides additional context to the issue.</intended_behavior>, <file>django/conf/global_settings.py</file>
<class>None</class>
<method>None</method>
<code>
1 """
2 Default Django settings. Override these with settings in the module pointed to
3 by the DJANGO_SETTINGS_MODULE environment variable.
4 """
5 
6 
7 # This is defined here as a do-nothing function because we can't import
8 # django.utils.translation -- that module depends on the settings.
9 def gettext_noop(s):
10     return s
11 
12 
13 ####################
14 # CORE             #
15 ####################
16 
17 DEBUG = False
18 
19 # Whether the framework should propagate raw exceptions rather than catching
20 # them. This is useful under some testing situations and should never be used
21 # on a live site.
22 DEBUG_PROPAGATE_EXCEPTIONS = False
23 
24 # People who get code error notifications.
25 # In the format [('Full Name', 'email@example.com'), ('Full Name', 'anotheremail@example.com')]
26 ADMINS = []
27 
28 # List of IP addresses, as strings, that:
29 #   * See debug comments, when DEBUG is true
30 #   * Receive x-headers
31 INTERNAL_IPS = []
32 
33 # Hosts/domain names that are valid for this site.
34 # "*" matches anything, ".example.com" matches example.com and all subdomains
35 ALLOWED_HOSTS = []
36 
37 # Local time zone for this installation. All choices can be found here:
38 # https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all
39 # systems may support all possibilities). When USE_TZ is True, this is
40 # interpreted as the default user time zone.
41 TIME_ZONE = 'America/Chicago'
42 
43 # If you set this to True, Django will use timezone-aware datetimes.
44 USE_TZ = False
45 
46 # Language code for this installation. All choices can be found here:
47 # http://www.i18nguy.com/unicode/language-identifiers.html
48 LANGUAGE_CODE = 'en-us'
49 
50 # Languages we provide translations for, out of the box.
51 LANGUAGES = [
52     ('af', gettext_noop('Afrikaans')),
53     ('ar', gettext_noop('Arabic')),
54     ('ast', gettext_noop('Asturian')),
55     ('az', gettext_noop('Azerbaijani')),
56     ('bg', gettext_noop('Bulgarian')),
57     ('be', gettext_noop('Belarusian')),
58     ('bn', gettext_noop('Bengali')),
59     ('br', gettext_noop('Breton')),
60     ('bs', gettext_noop('Bosnian')),
61     ('ca', gettext_noop('Catalan')),
62     ('cs', gettext_noop('Czech')),
63     ('cy', gettext_noop('Welsh')),
64     ('da', gettext_noop('Danish')),
65     ('de', gettext_noop('German')),
66     ('dsb', gettext_noop('Lower Sorbian')),
67     ('el', gettext_noop('Greek')),
68     ('en', gettext_noop('English')),
69     ('en-au', gettext_noop('Australian English')),
70     ('en-gb', gettext_noop('British English')),
71     ('eo', gettext_noop('Esperanto')),
72     ('es', gettext_noop('Spanish')),
73     ('es-ar', gettext_noop('Argentinian Spanish')),
74     ('es-co', gettext_noop('Colombian Spanish')),
75     ('es-mx', gettext_noop('Mexican Spanish')),
76     ('es-ni', gettext_noop('Nicaraguan Spanish')),
77     ('es-ve', gettext_noop('Venezuelan Spanish')),
78     ('et', gettext_noop('Estonian')),
79     ('eu', gettext_noop('Basque')),
80     ('fa', gettext_noop('Persian')),
81     ('fi', gettext_noop('Finnish')),
82     ('fr', gettext_noop('French')),
83     ('fy', gettext_noop('Frisian')),
84     ('ga', gettext_noop('Irish')),
85     ('gd', gettext_noop('Scottish Gaelic')),
86     ('gl', gettext_noop('Galician')),
87     ('he', gettext_noop('Hebrew')),
88     ('hi', gettext_noop('Hindi')),
89     ('hr', gettext_noop('Croatian')),
90     ('hsb', gettext_noop('Upper Sorbian')),
91     ('hu', gettext_noop('Hungarian')),
92     ('hy', gettext_noop('Armenian')),
93     ('ia', gettext_noop('Interlingua')),
94     ('id', gettext_noop('Indonesian')),
95     ('io', gettext_noop('Ido')),
96     ('is', gettext_noop('Icelandic')),
97     ('it', gettext_noop('Italian')),
98     ('ja', gettext_noop('Japanese')),
99     ('ka', gettext_noop('Georgian')),
100     ('kab', gettext_noop('Kabyle')),
101     ('kk', gettext_noop('Kazakh')),
102     ('km', gettext_noop('Khmer')),
103     ('kn', gettext_noop('Kannada')),
104     ('ko', gettext_noop('Korean')),
105     ('lb', gettext_noop('Luxembourgish')),
106     ('lt', gettext_noop('Lithuanian')),
107     ('lv', gettext_noop('Latvian')),
108     ('mk', gettext_noop('Macedonian')),
109     ('ml', gettext_noop('Malayalam')),
110     ('mn', gettext_noop('Mongolian')),
111     ('mr', gettext_noop('Marathi')),
112     ('my', gettext_noop('Burmese')),
113     ('nb', gettext_noop('Norwegian Bokmål')),
114     ('ne', gettext_noop('Nepali')),
115     ('nl', gettext_noop('Dutch')),
116     ('nn', gettext_noop('Norwegian Nynorsk')),
117     ('os', gettext_noop('Ossetic')),
118     ('pa', gettext_noop('Punjabi')),
119     ('pl', gettext_noop('Polish')),
120     ('pt', gettext_noop('Portuguese')),
121     ('pt-br', gettext_noop('Brazilian Portuguese')),
122     ('ro', gettext_noop('Romanian')),
123     ('ru', gettext_noop('Russian')),
124     ('sk', gettext_noop('Slovak')),
125     ('sl', gettext_noop('Slovenian')),
126     ('sq', gettext_noop('Albanian')),
127     ('sr', gettext_noop('Serbian')),
128     ('sr-latn', gettext_noop('Serbian Latin')),
129     ('sv', gettext_noop('Swedish')),
130     ('sw', gettext_noop('Swahili')),
131     ('ta', gettext_noop('Tamil')),
132     ('te', gettext_noop('Telugu')),
133     ('th', gettext_noop('Thai')),
134     ('tr', gettext_noop('Turkish')),
135     ('tt', gettext_noop('Tatar')),
136     ('udm', gettext_noop('Udmurt')),
137     ('uk', gettext_noop('Ukrainian')),
138     ('ur', gettext_noop('Urdu')),
139     ('vi', gettext_noop('Vietnamese')),
140     ('zh-hans', gettext_noop('Simplified Chinese')),
141     ('zh-hant', gettext_noop('Traditional Chinese')),
142 ]
143 
144 # Languages using BiDi (right-to-left) layout
145 LANGUAGES_BIDI = ["he", "ar", "fa", "ur"]
146 
147 # If you set this to False, Django will make some optimizations so as not
148 # to load the internationalization machinery.
149 USE_I18N = True
150 LOCALE_PATHS = []
151 
152 # Settings for language cookie
153 LANGUAGE_COOKIE_NAME = 'django_language'
154 LANGUAGE_COOKIE_AGE = None
155 LANGUAGE_COOKIE_DOMAIN = None
156 LANGUAGE_COOKIE_PATH = '/'
157 
158 
159 # If you set this to True, Django will format dates, numbers and calendars
160 # according to user current locale.
161 USE_L10N = False
162 
163 # Not-necessarily-technical managers of the site. They get broken link
164 # notifications and other various emails.
165 MANAGERS = ADMINS
166 
167 # Default charset to use for all HttpResponse objects, if a MIME type isn't
168 # manually specified. It's used to construct the Content-Type header.
169 DEFAULT_CHARSET = 'utf-8'
170 
171 # Encoding of files read from disk (template and initial SQL files).
172 FILE_CHARSET = 'utf-8'
173 
174 # Email address that error messages come from.
175 SERVER_EMAIL = 'root@localhost'
176 
177 # Database connection info. If left empty, will default to the dummy backend.
178 DATABASES = {}
179 
180 # Classes used to implement DB routing behavior.
181 DATABASE_ROUTERS = []
182 
183 # The email backend to use. For possible shortcuts see django.core.mail.
184 # The default is to use the SMTP backend.
185 # Third-party backends can be specified by providing a Python path
186 # to a module that defines an EmailBackend class.
187 EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
188 
189 # Host for sending email.
190 EMAIL_HOST = 'localhost'
191 
192 # Port for sending email.
193 EMAIL_PORT = 25
194 
195 # Whether to send SMTP 'Date' header in the local time zone or in UTC.
196 EMAIL_USE_LOCALTIME = False
197 
198 # Optional SMTP authentication information for EMAIL_HOST.
199 EMAIL_HOST_USER = ''
200 EMAIL_HOST_PASSWORD = ''
201 EMAIL_USE_TLS = False
202 EMAIL_USE_SSL = False
203 EMAIL_SSL_CERTFILE = None
204 EMAIL_SSL_KEYFILE = None
205 EMAIL_TIMEOUT = None
206 
207 # List of strings representing installed apps.
208 INSTALLED_APPS = []
209 
210 TEMPLATES = []
211 
212 # Default form rendering class.
213 FORM_RENDERER = 'django.forms.renderers.DjangoTemplates'
214 
215 # Default email address to use for various automated correspondence from
216 # the site managers.
217 DEFAULT_FROM_EMAIL = 'webmaster@localhost'
218 
219 # Subject-line prefix for email messages send with django.core.mail.mail_admins
220 # or ...mail_managers.  Make sure to include the trailing space.
221 EMAIL_SUBJECT_PREFIX = '[Django] '
222 
223 # Whether to append trailing slashes to URLs.
224 APPEND_SLASH = True
225 
226 # Whether to prepend the "www." subdomain to URLs that don't have it.
227 PREPEND_WWW = False
228 
229 # Override the server-derived value of SCRIPT_NAME
230 FORCE_SCRIPT_NAME = None
231 
232 # List of compiled regular expression objects representing User-Agent strings
233 # that are not allowed to visit any page, systemwide. Use this for bad
234 # robots/crawlers. Here are a few examples:
235 #     import re
236 #     DISALLOWED_USER_AGENTS = [
237 #         re.compile(r'^NaverBot.*'),
238 #         re.compile(r'^EmailSiphon.*'),
239 #         re.compile(r'^SiteSucker.*'),
240 #         re.compile(r'^sohu-search'),
241 #     ]
242 DISALLOWED_USER_AGENTS = []
243 
244 ABSOLUTE_URL_OVERRIDES = {}
245 
246 # List of compiled regular expression objects representing URLs that need not
247 # be reported by BrokenLinkEmailsMiddleware. Here are a few examples:
248 #    import re
249 #    IGNORABLE_404_URLS = [
250 #        re.compile(r'^/apple-touch-icon.*\.png$'),
251 #        re.compile(r'^/favicon.ico$'),
252 #        re.compile(r'^/robots.txt$'),
253 #        re.compile(r'^/phpmyadmin/'),
254 #        re.compile(r'\.(cgi|php|pl)$'),
255 #    ]
256 IGNORABLE_404_URLS = []
257 
258 # A secret key for this particular Django installation. Used in secret-key
259 # hashing algorithms. Set this in your settings, or Django will complain
260 # loudly.
261 SECRET_KEY = ''
262 
263 # Default file storage mechanism that holds media.
264 DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
265 
266 # Absolute filesystem path to the directory that will hold user-uploaded files.
267 # Example: "/var/www/example.com/media/"
268 MEDIA_ROOT = ''
269 
270 # URL that handles the media served from MEDIA_ROOT.
271 # Examples: "http://example.com/media/", "http://media.example.com/"
272 MEDIA_URL = ''
273 
274 # Absolute path to the directory static files should be collected to.
275 # Example: "/var/www/example.com/static/"
276 STATIC_ROOT = None
277 
278 # URL that handles the static files served from STATIC_ROOT.
279 # Example: "http://example.com/static/", "http://static.example.com/"
280 STATIC_URL = None
281 
282 # List of upload handler classes to be applied in order.
283 FILE_UPLOAD_HANDLERS = [
284     'django.core.files.uploadhandler.MemoryFileUploadHandler',
285     'django.core.files.uploadhandler.TemporaryFileUploadHandler',
286 ]
287 
288 # Maximum size, in bytes, of a request before it will be streamed to the
289 # file system instead of into memory.
290 FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB
291 
292 # Maximum size in bytes of request data (excluding file uploads) that will be
293 # read before a SuspiciousOperation (RequestDataTooBig) is raised.
294 DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB
295 
296 # Maximum number of GET/POST parameters that will be read before a
297 # SuspiciousOperation (TooManyFieldsSent) is raised.
298 DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000
299 
300 # Directory in which upload streamed files will be temporarily saved. A value of
301 # `None` will make Django use the operating system's default temporary directory
302 # (i.e. "/tmp" on *nix systems).
303 FILE_UPLOAD_TEMP_DIR = None
304 
305 # The numeric mode to set newly-uploaded files to. The value should be a mode
306 # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.
307 FILE_UPLOAD_PERMISSIONS = None
308 
309 # The numeric mode to assign to newly-created directories, when uploading files.
310 # The value should be a mode as you'd pass to os.chmod;
311 # see https://docs.python.org/library/os.html#files-and-directories.
312 FILE_UPLOAD_DIRECTORY_PERMISSIONS = None
313 
314 # Python module path where user will place custom format definition.
315 # The directory where this setting is pointing should contain subdirectories
316 # named as the locales, containing a formats.py file
317 # (i.e. "myproject.locale" for myproject/locale/en/formats.py etc. use)
318 FORMAT_MODULE_PATH = None
319 
320 # Default formatting for date objects. See all available format strings here:
321 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
322 DATE_FORMAT = 'N j, Y'
323 
324 # Default formatting for datetime objects. See all available format strings here:
325 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
326 DATETIME_FORMAT = 'N j, Y, P'
327 
328 # Default formatting for time objects. See all available format strings here:
329 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
330 TIME_FORMAT = 'P'
331 
332 # Default formatting for date objects when only the year and month are relevant.
333 # See all available format strings here:
334 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
335 YEAR_MONTH_FORMAT = 'F Y'
336 
337 # Default formatting for date objects when only the month and day are relevant.
338 # See all available format strings here:
339 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
340 MONTH_DAY_FORMAT = 'F j'
341 
342 # Default short formatting for date objects. See all available format strings here:
343 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
344 SHORT_DATE_FORMAT = 'm/d/Y'
345 
346 # Default short formatting for datetime objects.
347 # See all available format strings here:
348 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
349 SHORT_DATETIME_FORMAT = 'm/d/Y P'
350 
351 # Default formats to be used when parsing dates from input boxes, in order
352 # See all available format string here:
353 # https://docs.python.org/library/datetime.html#strftime-behavior
354 # * Note that these format strings are different from the ones to display dates
355 DATE_INPUT_FORMATS = [
356     '%Y-%m-%d', '%m/%d/%Y', '%m/%d/%y',  # '2006-10-25', '10/25/2006', '10/25/06'
357     '%b %d %Y', '%b %d, %Y',             # 'Oct 25 2006', 'Oct 25, 2006'
358     '%d %b %Y', '%d %b, %Y',             # '25 Oct 2006', '25 Oct, 2006'
359     '%B %d %Y', '%B %d, %Y',             # 'October 25 2006', 'October 25, 2006'
360     '%d %B %Y', '%d %B, %Y',             # '25 October 2006', '25 October, 2006'
361 ]
362 
363 # Default formats to be used when parsing times from input boxes, in order
364 # See all available format string here:
365 # https://docs.python.org/library/datetime.html#strftime-behavior
366 # * Note that these format strings are different from the ones to display dates
367 TIME_INPUT_FORMATS = [
368     '%H:%M:%S',     # '14:30:59'
369     '%H:%M:%S.%f',  # '14:30:59.000200'
370     '%H:%M',        # '14:30'
371 ]
372 
373 # Default formats to be used when parsing dates and times from input boxes,
374 # in order
375 # See all available format string here:
376 # https://docs.python.org/library/datetime.html#strftime-behavior
377 # * Note that these format strings are different from the ones to display dates
378 DATETIME_INPUT_FORMATS = [
379     '%Y-%m-%d %H:%M:%S',     # '2006-10-25 14:30:59'
380     '%Y-%m-%d %H:%M:%S.%f',  # '2006-10-25 14:30:59.000200'
381     '%Y-%m-%d %H:%M',        # '2006-10-25 14:30'
382     '%Y-%m-%d',              # '2006-10-25'
383     '%m/%d/%Y %H:%M:%S',     # '10/25/2006 14:30:59'
384     '%m/%d/%Y %H:%M:%S.%f',  # '10/25/2006 14:30:59.000200'
385     '%m/%d/%Y %H:%M',        # '10/25/2006 14:30'
386     '%m/%d/%Y',              # '10/25/2006'
387     '%m/%d/%y %H:%M:%S',     # '10/25/06 14:30:59'
388     '%m/%d/%y %H:%M:%S.%f',  # '10/25/06 14:30:59.000200'
389     '%m/%d/%y %H:%M',        # '10/25/06 14:30'
390     '%m/%d/%y',              # '10/25/06'
391 ]
392 
393 # First day of week, to be used on calendars
394 # 0 means Sunday, 1 means Monday...
395 FIRST_DAY_OF_WEEK = 0
396 
397 # Decimal separator symbol
398 DECIMAL_SEPARATOR = '.'
399 
400 # Boolean that sets whether to add thousand separator when formatting numbers
401 USE_THOUSAND_SEPARATOR = False
402 
403 # Number of digits that will be together, when splitting them by
404 # THOUSAND_SEPARATOR. 0 means no grouping, 3 means splitting by thousands...
405 NUMBER_GROUPING = 0
406 
407 # Thousand separator symbol
408 THOUSAND_SEPARATOR = ','
409 
410 # The tablespaces to use for each model when not specified otherwise.
411 DEFAULT_TABLESPACE = ''
412 DEFAULT_INDEX_TABLESPACE = ''
413 
414 # Default X-Frame-Options header value
415 X_FRAME_OPTIONS = 'SAMEORIGIN'
416 
417 USE_X_FORWARDED_HOST = False
418 USE_X_FORWARDED_PORT = False
419 
420 # The Python dotted path to the WSGI application that Django's internal server
421 # (runserver) will use. If `None`, the return value of
422 # 'django.core.wsgi.get_wsgi_application' is used, thus preserving the same
423 # behavior as previous versions of Django. Otherwise this should point to an
424 # actual WSGI application object.
425 WSGI_APPLICATION = None
426 
427 # If your Django app is behind a proxy that sets a header to specify secure
428 # connections, AND that proxy ensures that user-submitted headers with the
429 # same name are ignored (so that people can't spoof it), set this value to
430 # a tuple of (header_name, header_value). For any requests that come in with
431 # that header/value, request.is_secure() will return True.
432 # WARNING! Only set this if you fully understand what you're doing. Otherwise,
433 # you may be opening yourself up to a security risk.
434 SECURE_PROXY_SSL_HEADER = None
435 
436 ##############
437 # MIDDLEWARE #
438 ##############
439 
440 # List of middleware to use. Order is important; in the request phase, these
441 # middleware will be applied in the order given, and in the response
442 # phase the middleware will be applied in reverse order.
443 MIDDLEWARE = []
444 
445 ############
446 # SESSIONS #
447 ############
448 
449 # Cache to store session data if using the cache session backend.
450 SESSION_CACHE_ALIAS = 'default'
451 # Cookie name. This can be whatever you want.
452 SESSION_COOKIE_NAME = 'sessionid'
453 # Age of cookie, in seconds (default: 2 weeks).
454 SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2
455 # A string like "example.com", or None for standard domain cookie.
456 SESSION_COOKIE_DOMAIN = None
457 # Whether the session cookie should be secure (https:// only).
458 SESSION_COOKIE_SECURE = False
459 # The path of the session cookie.
460 SESSION_COOKIE_PATH = '/'
461 # Whether to use the non-RFC standard httpOnly flag (IE, FF3+, others)
462 SESSION_COOKIE_HTTPONLY = True
463 # Whether to set the flag restricting cookie leaks on cross-site requests.
464 # This can be 'Lax', 'Strict', or None to disable the flag.
465 SESSION_COOKIE_SAMESITE = 'Lax'
466 # Whether to save the session data on every request.
467 SESSION_SAVE_EVERY_REQUEST = False
468 # Whether a user's session cookie expires when the Web browser is closed.
469 SESSION_EXPIRE_AT_BROWSER_CLOSE = False
470 # The module to store session data
471 SESSION_ENGINE = 'django.contrib.sessions.backends.db'
472 # Directory to store session files if using the file session module. If None,
473 # the backend will use a sensible default.
474 SESSION_FILE_PATH = None
475 # class to serialize session data
476 SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'
477 
478 #########
479 # CACHE #
480 #########
481 
482 # The cache backends to use.
483 CACHES = {
484     'default': {
485         'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
486     }
487 }
488 CACHE_MIDDLEWARE_KEY_PREFIX = ''
489 CACHE_MIDDLEWARE_SECONDS = 600
490 CACHE_MIDDLEWARE_ALIAS = 'default'
491 
492 ##################
493 # AUTHENTICATION #
494 ##################
495 
496 AUTH_USER_MODEL = 'auth.User'
497 
498 AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend']
499 
500 LOGIN_URL = '/accounts/login/'
501 
502 LOGIN_REDIRECT_URL = '/accounts/profile/'
503 
504 LOGOUT_REDIRECT_URL = None
505 
506 # The number of days a password reset link is valid for
507 PASSWORD_RESET_TIMEOUT_DAYS = 3
508 
509 # the first hasher in this list is the preferred algorithm.  any
510 # password using different algorithms will be converted automatically
511 # upon login
512 PASSWORD_HASHERS = [
513     'django.contrib.auth.hashers.PBKDF2PasswordHasher',
514     'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
515     'django.contrib.auth.hashers.Argon2PasswordHasher',
516     'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
517 ]
518 
519 AUTH_PASSWORD_VALIDATORS = []
520 
521 ###########
522 # SIGNING #
523 ###########
524 
525 SIGNING_BACKEND = 'django.core.signing.TimestampSigner'
526 
527 ########
528 # CSRF #
529 ########
530 
531 # Dotted path to callable to be used as view when a request is
532 # rejected by the CSRF middleware.
533 CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'
534 
535 # Settings for CSRF cookie.
536 CSRF_COOKIE_NAME = 'csrftoken'
537 CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52
538 CSRF_COOKIE_DOMAIN = None
539 CSRF_COOKIE_PATH = '/'
540 CSRF_COOKIE_SECURE = False
541 CSRF_COOKIE_HTTPONLY = False
542 CSRF_COOKIE_SAMESITE = 'Lax'
543 CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'
544 CSRF_TRUSTED_ORIGINS = []
545 CSRF_USE_SESSIONS = False
546 
547 ############
548 # MESSAGES #
549 ############
550 
551 # Class to use as messages backend
552 MESSAGE_STORAGE = 'django.contrib.messages.storage.fallback.FallbackStorage'
553 
554 # Default values of MESSAGE_LEVEL and MESSAGE_TAGS are defined within
555 # django.contrib.messages to avoid imports in this settings file.
556 
557 ###########
558 # LOGGING #
559 ###########
560 
561 # The callable to use to configure logging
562 LOGGING_CONFIG = 'logging.config.dictConfig'
563 
564 # Custom logging configuration.
565 LOGGING = {}
566 
567 # Default exception reporter filter class used in case none has been
568 # specifically assigned to the HttpRequest instance.
569 DEFAULT_EXCEPTION_REPORTER_FILTER = 'django.views.debug.SafeExceptionReporterFilter'
570 
571 ###########
572 # TESTING #
573 ###########
574 
575 # The name of the class to use to run the test suite
576 TEST_RUNNER = 'django.test.runner.DiscoverRunner'
577 
578 # Apps that don't need to be serialized at test database creation time
579 # (only apps with migrations are to start with)
580 TEST_NON_SERIALIZED_APPS = []
581 
582 ############
583 # FIXTURES #
584 ############
585 
586 # The list of directories to search for fixtures
587 FIXTURE_DIRS = []
588 
589 ###############
590 # STATICFILES #
591 ###############
592 
593 # A list of locations of additional static files
594 STATICFILES_DIRS = []
595 
596 # The default file storage backend used during the build process
597 STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
598 
599 # List of finder classes that know how to find static files in
600 # various locations.
601 STATICFILES_FINDERS = [
602     'django.contrib.staticfiles.finders.FileSystemFinder',
603     'django.contrib.staticfiles.finders.AppDirectoriesFinder',
604     # 'django.contrib.staticfiles.finders.DefaultStorageFinder',
605 ]
606 
607 ##############
608 # MIGRATIONS #
609 ##############
610 
611 # Migration module overrides for apps, by app label.
612 MIGRATION_MODULES = {}
613 
614 #################
615 # SYSTEM CHECKS #
616 #################
617 
618 # List of all issues generated by system checks that should be silenced. Light
619 # issues like warnings, infos or debugs will not generate a message. Silencing
620 # serious issues like errors and criticals does not result in hiding the
621 # message, but Django will not stop you from e.g. running server.
622 SILENCED_SYSTEM_CHECKS = []
623 
624 #######################
625 # SECURITY MIDDLEWARE #
626 #######################
627 SECURE_BROWSER_XSS_FILTER = False
628 SECURE_CONTENT_TYPE_NOSNIFF = False
629 SECURE_HSTS_INCLUDE_SUBDOMAINS = False
630 SECURE_HSTS_PRELOAD = False
631 SECURE_HSTS_SECONDS = 0
632 SECURE_REDIRECT_EXEMPT = []
633 SECURE_SSL_HOST = None
634 SECURE_SSL_REDIRECT = False

</code><intended_behavior>The default value of `FILE_UPLOAD_PERMISSIONS` should be changed from `None` to `0o644`. This change establishes a secure and sensible default permission set for newly uploaded files, addressing the inconsistency issue raised. By altering this setting, any file upload handled by `FileSystemStorage` will have permissions set to `0o644` by default unless explicitly overridden by the developer in the project's settings.</intended_behavior>]
2025-10-15 15:54:55.294 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-15 15:54:55.294 | INFO     | Search-only: skipping patch selection
2025-10-15 15:54:55.444 | INFO     | Task django__django-10914 completed successfully.
2025-10-15 15:54:55.445 | INFO     | No patch generated. You can try running ACR again.
