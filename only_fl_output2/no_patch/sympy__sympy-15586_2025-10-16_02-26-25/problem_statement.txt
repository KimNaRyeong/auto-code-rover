Can't get an inverted float matrix with sympy and numpy
Trying to get an inverted matrix with sympy and numpy.

```
import numpy as np
from sympy import *
init_printing()


X0 = MatrixSymbol('X0',2,2)
xx = np.random.rand(4,4) 
#xx = np.random.randint(10,size=(4,4)) # this line makes it workable
X0Inv = X0**-1
np.linalg.inv(xx)
symInv = lambdify(X0,X0Inv)
symInv(xx)
```

lambify fails with the following message:
```
TypeError                                 Traceback (most recent call last)
<ipython-input-20-c2193b2ae217> in <module>()
     10 np.linalg.inv(xx)
     11 symInv = lambdify(X0,X0Inv)
---> 12 symInv(xx)

/opt/anaconda3/lib/python3.6/site-packages/numpy/__init__.py in <lambda>(X0)

TypeError: ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''
```
[stackoverflow discussion](https://stackoverflow.com/questions/53488588/python-get-an-inverted-float-matrix-with-sympy-and-numpy)

[live version of the code](https://pyfiddle.io/fiddle/5d120532-1198-40a1-9fdc-4eb988bce2f7/?i=true)


