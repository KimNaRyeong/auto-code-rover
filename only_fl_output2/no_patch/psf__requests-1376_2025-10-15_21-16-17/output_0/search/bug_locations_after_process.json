[
    {
        "rel_file_path": "requests/models.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/psf__requests/setup_psf__requests__1.2/requests/models.py",
        "start": 87,
        "end": 135,
        "class_name": "RequestEncodingMixin",
        "method_name": "_encode_files",
        "code": "87     def _encode_files(files, data):\n88         \"\"\"Build the body for a multipart/form-data request.\n89 \n90         Will successfully encode files when passed as a dict or a list of\n91         2-tuples. Order is retained if data is a list of 2-tuples but abritrary\n92         if parameters are supplied as a dict.\n93 \n94         \"\"\"\n95         if (not files) or isinstance(data, str):\n96             return None\n97 \n98         new_fields = []\n99         fields = to_key_val_list(data or {})\n100         files = to_key_val_list(files or {})\n101 \n102         for field, val in fields:\n103             if isinstance(val, basestring) or not hasattr(val, '__iter__'):\n104                 val = [val]\n105             for v in val:\n106                 if v is not None:\n107                     new_fields.append(\n108                         (field.decode('utf-8') if isinstance(field, bytes) else field,\n109                          v.encode('utf-8') if isinstance(v, str) else v))\n110 \n111         for (k, v) in files:\n112             # support for explicit filename\n113             ft = None\n114             if isinstance(v, (tuple, list)):\n115                 if len(v) == 2:\n116                     fn, fp = v\n117                 else:\n118                     fn, fp, ft = v\n119             else:\n120                 fn = guess_filename(v) or k\n121                 fp = v\n122             if isinstance(fp, str):\n123                 fp = StringIO(fp)\n124             if isinstance(fp, bytes):\n125                 fp = BytesIO(fp)\n126 \n127             if ft:\n128                 new_v = (fn, fp.read(), ft)\n129             else:\n130                 new_v = (fn, fp.read())\n131             new_fields.append((k, new_v))\n132 \n133         body, content_type = encode_multipart_formdata(new_fields)\n134 \n135         return body, content_type\n",
        "intended_behavior": "The method _encode_files should correctly handle and encode field names that are already in bytes format, ensuring they are accurately represented in the request body without introducing any additional encoding prefixes or artifacts. It should ensure that encoded field names do not get misrepresented or altered in a way that would cause the recipient to interpret them incorrectly. Specifically, when processing data for a multipart/form-data request, if a field name is encoded (e.g., {'stuff'.encode('utf-8'): 'elixr'}), the request body should include this field name as \"stuff\" rather than introducing any Python bytes literal markers (such as b'stuff'). This behavior preserves the integrity and intended format of the request body, ensuring compatibility and correct interpretation by servers receiving the request."
    },
    {
        "rel_file_path": "requests/models.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/psf__requests/setup_psf__requests__1.2/requests/models.py",
        "start": 37,
        "end": 135,
        "class_name": "RequestEncodingMixin",
        "method_name": null,
        "code": "37 class RequestEncodingMixin(object):\n38     @property\n39     def path_url(self):\n40         \"\"\"Build the path URL to use.\"\"\"\n41 \n42         url = []\n43 \n44         p = urlsplit(self.url)\n45 \n46         path = p.path\n47         if not path:\n48             path = '/'\n49 \n50         url.append(path)\n51 \n52         query = p.query\n53         if query:\n54             url.append('?')\n55             url.append(query)\n56 \n57         return ''.join(url)\n58 \n59     @staticmethod\n60     def _encode_params(data):\n61         \"\"\"Encode parameters in a piece of data.\n62 \n63         Will successfully encode parameters when passed as a dict or a list of\n64         2-tuples. Order is retained if data is a list of 2-tuples but arbitrary\n65         if parameters are supplied as a dict.\n66         \"\"\"\n67 \n68         if isinstance(data, (str, bytes)):\n69             return data\n70         elif hasattr(data, 'read'):\n71             return data\n72         elif hasattr(data, '__iter__'):\n73             result = []\n74             for k, vs in to_key_val_list(data):\n75                 if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):\n76                     vs = [vs]\n77                 for v in vs:\n78                     if v is not None:\n79                         result.append(\n80                             (k.encode('utf-8') if isinstance(k, str) else k,\n81                              v.encode('utf-8') if isinstance(v, str) else v))\n82             return urlencode(result, doseq=True)\n83         else:\n84             return data\n85 \n86     @staticmethod\n87     def _encode_files(files, data):\n88         \"\"\"Build the body for a multipart/form-data request.\n89 \n90         Will successfully encode files when passed as a dict or a list of\n91         2-tuples. Order is retained if data is a list of 2-tuples but abritrary\n92         if parameters are supplied as a dict.\n93 \n94         \"\"\"\n95         if (not files) or isinstance(data, str):\n96             return None\n97 \n98         new_fields = []\n99         fields = to_key_val_list(data or {})\n100         files = to_key_val_list(files or {})\n101 \n102         for field, val in fields:\n103             if isinstance(val, basestring) or not hasattr(val, '__iter__'):\n104                 val = [val]\n105             for v in val:\n106                 if v is not None:\n107                     new_fields.append(\n108                         (field.decode('utf-8') if isinstance(field, bytes) else field,\n109                          v.encode('utf-8') if isinstance(v, str) else v))\n110 \n111         for (k, v) in files:\n112             # support for explicit filename\n113             ft = None\n114             if isinstance(v, (tuple, list)):\n115                 if len(v) == 2:\n116                     fn, fp = v\n117                 else:\n118                     fn, fp, ft = v\n119             else:\n120                 fn = guess_filename(v) or k\n121                 fp = v\n122             if isinstance(fp, str):\n123                 fp = StringIO(fp)\n124             if isinstance(fp, bytes):\n125                 fp = BytesIO(fp)\n126 \n127             if ft:\n128                 new_v = (fn, fp.read(), ft)\n129             else:\n130                 new_v = (fn, fp.read())\n131             new_fields.append((k, new_v))\n132 \n133         body, content_type = encode_multipart_formdata(new_fields)\n134 \n135         return body, content_type\n",
        "intended_behavior": "This class provides additional context to the issue."
    }
]