[
    {
        "rel_file_path": "django/utils/dateparse.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/utils/dateparse.py",
        "start": 125,
        "end": 147,
        "class_name": null,
        "method_name": "parse_duration",
        "code": "125 def parse_duration(value):\n126     \"\"\"Parse a duration string and return a datetime.timedelta.\n127 \n128     The preferred format for durations in Django is '%d %H:%M:%S.%f'.\n129 \n130     Also supports ISO 8601 representation and PostgreSQL's day-time interval\n131     format.\n132     \"\"\"\n133     match = (\n134         standard_duration_re.match(value) or\n135         iso8601_duration_re.match(value) or\n136         postgres_interval_re.match(value)\n137     )\n138     if match:\n139         kw = match.groupdict()\n140         sign = -1 if kw.pop('sign', '+') == '-' else 1\n141         if kw.get('microseconds'):\n142             kw['microseconds'] = kw['microseconds'].ljust(6, '0')\n143         if kw.get('seconds') and kw.get('microseconds') and kw['seconds'].startswith('-'):\n144             kw['microseconds'] = '-' + kw['microseconds']\n145         kw = {k: float(v.replace(',', '.')) for k, v in kw.items() if v is not None}\n146         days = datetime.timedelta(kw.pop('days', .0) or .0)\n147         return days + sign * datetime.timedelta(**kw)\n",
        "intended_behavior": "The intended behavior of the `parse_duration` method is to accurately parse an ISO 8601 duration string into a correctly signed `datetime.timedelta` object, even if the duration only specifies days. This requires ensuring that the sign of the duration (positive or negative) is properly applied to the `datetime.timedelta` result, consistent with the input string.\n\nTo resolve the issue, the method must be adjusted to ensure that the sign is correctly applied even when the parsed duration only contains days and no other time components. One potential approach to preserve existing functionality while fixing the bug might involve modifying the way the `days` component of the duration and its sign are treated. Specifically, the adjustment could ensure that:\n\n- The `days` component maintains its sign correctly irrespective of the presence or absence of other duration components.\n- The sign is applied to the total duration effectively, which includes scenarios when the duration is exclusively composed of days. This might mean applying the sign directly to the `days` component before or while combining it with the rest of the time components to form the final timedelta object.\n\nThis fix should not interfere with the correct parsing and sign application for durations that include time components other than days, preserving the method's existing functionality while correcting the handling of durations that are exclusively in days."
    }
]