[
    {
        "rel_file_path": "lib/matplotlib/cbook/__init__.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.5/lib/matplotlib/cbook/__init__.py",
        "start": 2153,
        "end": 2171,
        "class_name": null,
        "method_name": "_g_sig_digits",
        "code": "2153 def _g_sig_digits(value, delta):\n2154     \"\"\"\n2155     Return the number of significant digits to %g-format *value*, assuming that\n2156     it is known with an error of *delta*.\n2157     \"\"\"\n2158     if delta == 0:\n2159         # delta = 0 may occur when trying to format values over a tiny range;\n2160         # in that case, replace it by the distance to the closest float.\n2161         delta = np.spacing(value)\n2162     # If e.g. value = 45.67 and delta = 0.02, then we want to round to 2 digits\n2163     # after the decimal point (floor(log10(0.02)) = -2); 45.67 contributes 2\n2164     # digits before the decimal point (floor(log10(45.67)) + 1 = 2): the total\n2165     # is 4 significant digits.  A value of 0 contributes 1 \"digit\" before the\n2166     # decimal point.\n2167     # For inf or nan, the precision doesn't matter.\n2168     return max(\n2169         0,\n2170         (math.floor(math.log10(abs(value))) + 1 if value else 1)\n2171         - math.floor(math.log10(delta))) if math.isfinite(value) else 0\n",
        "intended_behavior": "The `_g_sig_digits` function needs to safely handle cases when `delta` could be zero or negative to avoid math domain errors. This could involve checking if `delta` is positive before attempting to calculate its logarithm. If `delta` is non-positive, the function should either avoid the logarithmic operation by defaulting to a preset number of significant digits or by another means that retains its purpose without causing errors."
    },
    {
        "rel_file_path": "lib/matplotlib/artist.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.5/lib/matplotlib/artist.py",
        "start": 1277,
        "end": 1321,
        "class_name": null,
        "method_name": "format_cursor_data",
        "code": "1277     def format_cursor_data(self, data):\n1278         \"\"\"\n1279         Return a string representation of *data*.\n1280 \n1281         .. note::\n1282             This method is intended to be overridden by artist subclasses.\n1283             As an end-user of Matplotlib you will most likely not call this\n1284             method yourself.\n1285 \n1286         The default implementation converts ints and floats and arrays of ints\n1287         and floats into a comma-separated string enclosed in square brackets,\n1288         unless the artist has an associated colorbar, in which case scalar\n1289         values are formatted using the colorbar's formatter.\n1290 \n1291         See Also\n1292         --------\n1293         get_cursor_data\n1294         \"\"\"\n1295         if np.ndim(data) == 0 and isinstance(self, ScalarMappable):\n1296             # This block logically belongs to ScalarMappable, but can't be\n1297             # implemented in it because most ScalarMappable subclasses inherit\n1298             # from Artist first and from ScalarMappable second, so\n1299             # Artist.format_cursor_data would always have precedence over\n1300             # ScalarMappable.format_cursor_data.\n1301             n = self.cmap.N\n1302             if np.ma.getmask(data):\n1303                 return \"[]\"\n1304             normed = self.norm(data)\n1305             if np.isfinite(normed):\n1306                 # Midpoints of neighboring color intervals.\n1307                 neighbors = self.norm.inverse(\n1308                     (int(self.norm(data) * n) + np.array([0, 1])) / n)\n1309                 delta = abs(neighbors - data).max()\n1310                 g_sig_digits = cbook._g_sig_digits(data, delta)\n1311             else:\n1312                 g_sig_digits = 3  # Consistent with default below.\n1313             return \"[{:-#.{}g}]\".format(data, g_sig_digits)\n1314         else:\n1315             try:\n1316                 data[0]\n1317             except (TypeError, IndexError):\n1318                 data = [data]\n1319             data_str = ', '.join('{:0.3g}'.format(item) for item in data\n1320                                  if isinstance(item, Number))\n1321             return \"[\" + data_str + \"]\"\n",
        "intended_behavior": "While the primary issue does not directly originate from this method, ensuring that the inputs to `_g_sig_digits` from this method are always valid for logarithmic operations could be an additional safeguard. Specifically, when determining `delta` for cursor data representation, ensure it\u2019s calculated in a way that it remains positive. Moreover, given the method deals with formatting data for visual representation, it could also benefit from handling exceptions gracefully, maintaining user interaction without spewing errors for edge cases in data."
    },
    {
        "rel_file_path": "lib/matplotlib/artist.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.5/lib/matplotlib/artist.py",
        "start": 1277,
        "end": 1321,
        "class_name": "Artist",
        "method_name": "format_cursor_data",
        "code": "1277     def format_cursor_data(self, data):\n1278         \"\"\"\n1279         Return a string representation of *data*.\n1280 \n1281         .. note::\n1282             This method is intended to be overridden by artist subclasses.\n1283             As an end-user of Matplotlib you will most likely not call this\n1284             method yourself.\n1285 \n1286         The default implementation converts ints and floats and arrays of ints\n1287         and floats into a comma-separated string enclosed in square brackets,\n1288         unless the artist has an associated colorbar, in which case scalar\n1289         values are formatted using the colorbar's formatter.\n1290 \n1291         See Also\n1292         --------\n1293         get_cursor_data\n1294         \"\"\"\n1295         if np.ndim(data) == 0 and isinstance(self, ScalarMappable):\n1296             # This block logically belongs to ScalarMappable, but can't be\n1297             # implemented in it because most ScalarMappable subclasses inherit\n1298             # from Artist first and from ScalarMappable second, so\n1299             # Artist.format_cursor_data would always have precedence over\n1300             # ScalarMappable.format_cursor_data.\n1301             n = self.cmap.N\n1302             if np.ma.getmask(data):\n1303                 return \"[]\"\n1304             normed = self.norm(data)\n1305             if np.isfinite(normed):\n1306                 # Midpoints of neighboring color intervals.\n1307                 neighbors = self.norm.inverse(\n1308                     (int(self.norm(data) * n) + np.array([0, 1])) / n)\n1309                 delta = abs(neighbors - data).max()\n1310                 g_sig_digits = cbook._g_sig_digits(data, delta)\n1311             else:\n1312                 g_sig_digits = 3  # Consistent with default below.\n1313             return \"[{:-#.{}g}]\".format(data, g_sig_digits)\n1314         else:\n1315             try:\n1316                 data[0]\n1317             except (TypeError, IndexError):\n1318                 data = [data]\n1319             data_str = ', '.join('{:0.3g}'.format(item) for item in data\n1320                                  if isinstance(item, Number))\n1321             return \"[\" + data_str + \"]\"\n",
        "intended_behavior": "While the primary issue does not directly originate from this method, ensuring that the inputs to `_g_sig_digits` from this method are always valid for logarithmic operations could be an additional safeguard. Specifically, when determining `delta` for cursor data representation, ensure it\u2019s calculated in a way that it remains positive. Moreover, given the method deals with formatting data for visual representation, it could also benefit from handling exceptions gracefully, maintaining user interaction without spewing errors for edge cases in data."
    }
]