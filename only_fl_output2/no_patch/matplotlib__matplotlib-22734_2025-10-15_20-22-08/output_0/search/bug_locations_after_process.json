[
    {
        "rel_file_path": "lib/matplotlib/tri/tripcolor.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.5/lib/matplotlib/tri/tripcolor.py",
        "start": 9,
        "end": 158,
        "class_name": null,
        "method_name": "tripcolor",
        "code": "9 def tripcolor(ax, *args, alpha=1.0, norm=None, cmap=None, vmin=None,\n10               vmax=None, shading='flat', facecolors=None, **kwargs):\n11     \"\"\"\n12     Create a pseudocolor plot of an unstructured triangular grid.\n13 \n14     Call signatures::\n15 \n16       tripcolor(triangulation, C, *, ...)\n17       tripcolor(x, y, C, *, [triangles=triangles], [mask=mask], ...)\n18 \n19     The triangular grid can be specified either by passing a `.Triangulation`\n20     object as the first parameter, or by passing the points *x*, *y* and\n21     optionally the *triangles* and a *mask*. See `.Triangulation` for an\n22     explanation of these parameters.\n23 \n24     If neither of *triangulation* or *triangles* are given, the triangulation\n25     is calculated on the fly. In this case, it does not make sense to provide\n26     colors at the triangle faces via *C* or *facecolors* because there are\n27     multiple possible triangulations for a group of points and you don't know\n28     which triangles will be constructed.\n29 \n30     Parameters\n31     ----------\n32     triangulation : `.Triangulation`\n33         An already created triangular grid.\n34     x, y, triangles, mask\n35         Parameters defining the triangular grid. See `.Triangulation`.\n36         This is mutually exclusive with specifying *triangulation*.\n37     C : array-like\n38         The color values, either for the points or for the triangles. Which one\n39         is automatically inferred from the length of *C*, i.e. does it match\n40         the number of points or the number of triangles. If there are the same\n41         number of points and triangles in the triangulation it is assumed that\n42         color values are defined at points; to force the use of color values at\n43         triangles use the keyword argument ``facecolors=C`` instead of just\n44         ``C``.\n45         This parameter is position-only.\n46     facecolors : array-like, optional\n47         Can be used alternatively to *C* to specify colors at the triangle\n48         faces. This parameter takes precedence over *C*.\n49     shading : {'flat', 'gouraud'}, default: 'flat'\n50         If  'flat' and the color values *C* are defined at points, the color\n51         values used for each triangle are from the mean C of the triangle's\n52         three points. If *shading* is 'gouraud' then color values must be\n53         defined at points.\n54     other_parameters\n55         All other parameters are the same as for `~.Axes.pcolor`.\n56 \n57     Notes\n58     -----\n59     It is possible to pass the triangles positionally, i.e.\n60     ``tripcolor(x, y, triangles, C, ...)``. However, this is discouraged.\n61     For more clarity, pass *triangles* via keyword argument.\n62     \"\"\"\n63     _api.check_in_list(['flat', 'gouraud'], shading=shading)\n64 \n65     tri, args, kwargs = Triangulation.get_from_args_and_kwargs(*args, **kwargs)\n66 \n67     # Parse the color to be in one of (the other variable will be None):\n68     # - facecolors: if specified at the triangle faces\n69     # - point_colors: if specified at the points\n70     if facecolors is not None:\n71         if args:\n72             _api.warn_external(\n73                 \"Positional parameter C has no effect when the keyword \"\n74                 \"facecolors is given\")\n75         point_colors = None\n76         if len(facecolors) != len(tri.triangles):\n77             raise ValueError(\"The length of facecolors must match the number \"\n78                              \"of triangles\")\n79     else:\n80         # Color from positional parameter C\n81         if not args:\n82             raise ValueError(\n83                 \"Missing color parameter. Please pass C positionally or \"\n84                 \"facecolors via keyword\")\n85         elif len(args) > 1:\n86             _api.warn_external(\n87                 \"Additional positional parameters {args[1:]!r} are ignored\")\n88         C = np.asarray(args[0])\n89         if len(C) == len(tri.x):\n90             # having this before the len(tri.triangles) comparison gives\n91             # precedence to nodes if there are as many nodes as triangles\n92             point_colors = C\n93             facecolors = None\n94         elif len(C) == len(tri.triangles):\n95             point_colors = None\n96             facecolors = C\n97         else:\n98             raise ValueError('The length of C must match either the number '\n99                              'of points or the number of triangles')\n100 \n101     # Handling of linewidths, shading, edgecolors and antialiased as\n102     # in Axes.pcolor\n103     linewidths = (0.25,)\n104     if 'linewidth' in kwargs:\n105         kwargs['linewidths'] = kwargs.pop('linewidth')\n106     kwargs.setdefault('linewidths', linewidths)\n107 \n108     edgecolors = 'none'\n109     if 'edgecolor' in kwargs:\n110         kwargs['edgecolors'] = kwargs.pop('edgecolor')\n111     ec = kwargs.setdefault('edgecolors', edgecolors)\n112 \n113     if 'antialiased' in kwargs:\n114         kwargs['antialiaseds'] = kwargs.pop('antialiased')\n115     if 'antialiaseds' not in kwargs and ec.lower() == \"none\":\n116         kwargs['antialiaseds'] = False\n117 \n118     if shading == 'gouraud':\n119         if facecolors is not None:\n120             raise ValueError(\n121                 \"shading='gouraud' can only be used when the colors \"\n122                 \"are specified at the points, not at the faces.\")\n123         collection = TriMesh(tri, **kwargs)\n124         colors = point_colors\n125     else:\n126         # Vertices of triangles.\n127         maskedTris = tri.get_masked_triangles()\n128         verts = np.stack((tri.x[maskedTris], tri.y[maskedTris]), axis=-1)\n129 \n130         # Color values.\n131         if facecolors is None:\n132             # One color per triangle, the mean of the 3 vertex color values.\n133             colors = point_colors[maskedTris].mean(axis=1)\n134         elif tri.mask is not None:\n135             # Remove color values of masked triangles.\n136             colors = facecolors[~tri.mask]\n137         else:\n138             colors = facecolors\n139 \n140         collection = PolyCollection(verts, **kwargs)\n141 \n142     collection.set_alpha(alpha)\n143     collection.set_array(colors)\n144     _api.check_isinstance((Normalize, None), norm=norm)\n145     collection.set_cmap(cmap)\n146     collection.set_norm(norm)\n147     collection._scale_norm(norm, vmin, vmax)\n148     ax.grid(False)\n149 \n150     minx = tri.x.min()\n151     maxx = tri.x.max()\n152     miny = tri.y.min()\n153     maxy = tri.y.max()\n154     corners = (minx, miny), (maxx, maxy)\n155     ax.update_datalim(corners)\n156     ax.autoscale_view()\n157     ax.add_collection(collection)\n158     return collection\n",
        "intended_behavior": "The implementation of 'tripcolor' should ensure that the 'clim' argument, composed of 'vmin' and 'vmax', directly influences the normalization of color mapping as intended by the caller. This means when 'vmin' and 'vmax' are provided, these parameters should be used to set the limits of the color scale effectively, ensuring that the color mapping reflects the range specified by the user. The existing functionality to automatically handle normalization based on 'vmin', 'vmax', and 'norm' should be preserved, but with added assurance that 'vmin' and 'vmax' do not get ignored. This could involve verifying the correct passage of these parameters to '_scale_norm' and ensuring their values are accurately reflected in the final plot. The objective here is to correct the handling so that if 'vmin' and 'vmax' are provided (either directly or through 'clim'), the color range of the plot accurately represents this specified range."
    },
    {
        "rel_file_path": "lib/matplotlib/cm.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.5/lib/matplotlib/cm.py",
        "start": 367,
        "end": 387,
        "class_name": null,
        "method_name": "_scale_norm",
        "code": "367     def _scale_norm(self, norm, vmin, vmax):\n368         \"\"\"\n369         Helper for initial scaling.\n370 \n371         Used by public functions that create a ScalarMappable and support\n372         parameters *vmin*, *vmax* and *norm*. This makes sure that a *norm*\n373         will take precedence over *vmin*, *vmax*.\n374 \n375         Note that this method does not set the norm.\n376         \"\"\"\n377         if vmin is not None or vmax is not None:\n378             self.set_clim(vmin, vmax)\n379             if norm is not None:\n380                 raise ValueError(\n381                     \"Passing parameters norm and vmin/vmax simultaneously is \"\n382                     \"not supported. Please pass vmin/vmax directly to the \"\n383                     \"norm when creating it.\")\n384 \n385         # always resolve the autoscaling so we have concrete limits\n386         # rather than deferring to draw time.\n387         self.autoscale_None()\n",
        "intended_behavior": "While '_scale_norm' correctly identifies the precedence of 'norm' over 'vmin' and 'vmax', the method must ensure when 'vmin' and 'vmax' are provided (without specifying 'norm'), these parameters effectively constrain the color limits as intended. The method already aims to set color limits based on 'vmin' and 'vmax' or adjust according to 'norm'. However, the presence of the bug indicates a possible flaw in this logic or its integration with 'tripcolor'. The intended behavior here is to tightly integrate '_scale_norm' functionality with 'tripcolor', making sure that color limiting (scaling) respects 'vmin' and 'vmax' boundaries directly specified by the user, thereby addressing the issue where 'clim' appears to be disregarded."
    },
    {
        "rel_file_path": "lib/matplotlib/cm.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.5/lib/matplotlib/cm.py",
        "start": 367,
        "end": 387,
        "class_name": "ScalarMappable",
        "method_name": "_scale_norm",
        "code": "367     def _scale_norm(self, norm, vmin, vmax):\n368         \"\"\"\n369         Helper for initial scaling.\n370 \n371         Used by public functions that create a ScalarMappable and support\n372         parameters *vmin*, *vmax* and *norm*. This makes sure that a *norm*\n373         will take precedence over *vmin*, *vmax*.\n374 \n375         Note that this method does not set the norm.\n376         \"\"\"\n377         if vmin is not None or vmax is not None:\n378             self.set_clim(vmin, vmax)\n379             if norm is not None:\n380                 raise ValueError(\n381                     \"Passing parameters norm and vmin/vmax simultaneously is \"\n382                     \"not supported. Please pass vmin/vmax directly to the \"\n383                     \"norm when creating it.\")\n384 \n385         # always resolve the autoscaling so we have concrete limits\n386         # rather than deferring to draw time.\n387         self.autoscale_None()\n",
        "intended_behavior": "While '_scale_norm' correctly identifies the precedence of 'norm' over 'vmin' and 'vmax', the method must ensure when 'vmin' and 'vmax' are provided (without specifying 'norm'), these parameters effectively constrain the color limits as intended. The method already aims to set color limits based on 'vmin' and 'vmax' or adjust according to 'norm'. However, the presence of the bug indicates a possible flaw in this logic or its integration with 'tripcolor'. The intended behavior here is to tightly integrate '_scale_norm' functionality with 'tripcolor', making sure that color limiting (scaling) respects 'vmin' and 'vmax' boundaries directly specified by the user, thereby addressing the issue where 'clim' appears to be disregarded."
    }
]