[
    {
        "rel_file_path": "django/db/models/query.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.1/django/db/models/query.py",
        "start": 436,
        "end": 444,
        "class_name": null,
        "method_name": "create",
        "code": "436     def create(self, **kwargs):\n437         \"\"\"\n438         Create a new object with the given kwargs, saving it to the database\n439         and returning the created object.\n440         \"\"\"\n441         obj = self.model(**kwargs)\n442         self._for_write = True\n443         obj.save(force_insert=True, using=self.db)\n444         return obj\n",
        "intended_behavior": "This method handles the creation of model instances. To resolve the issue, it should ensure that when creating instances of models that use multi-table inheritance (where the child inherits from a parent class which has a custom primary key), it correctly handles the insertion of data into both parent and child tables without triggering an unnecessary update query for the parent model. The method should insert the correct values into the parent model's table at the time of initial creation, based on the defined fields and their defaults, and link the child model's instance to its parent without requiring a follow-up update to set or correct the parent's fields. The resolution for this issue should specifically address the problem of Django generating an extra update query for the parent model when the child model is created. This involves ensuring that Django's ORM layer correctly identifies and handles the parent model's custom primary key during the creation process, setting all necessary fields in a single, initial INSERT query for each table involved in the multi-table inheritance scenario without compromising the integrity or expected functionality of other model creation operations within the framework."
    },
    {
        "rel_file_path": "django/db/models/query.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.1/django/db/models/query.py",
        "start": 436,
        "end": 444,
        "class_name": "QuerySet",
        "method_name": "create",
        "code": "436     def create(self, **kwargs):\n437         \"\"\"\n438         Create a new object with the given kwargs, saving it to the database\n439         and returning the created object.\n440         \"\"\"\n441         obj = self.model(**kwargs)\n442         self._for_write = True\n443         obj.save(force_insert=True, using=self.db)\n444         return obj\n",
        "intended_behavior": "This method handles the creation of model instances. To resolve the issue, it should ensure that when creating instances of models that use multi-table inheritance (where the child inherits from a parent class which has a custom primary key), it correctly handles the insertion of data into both parent and child tables without triggering an unnecessary update query for the parent model. The method should insert the correct values into the parent model's table at the time of initial creation, based on the defined fields and their defaults, and link the child model's instance to its parent without requiring a follow-up update to set or correct the parent's fields. The resolution for this issue should specifically address the problem of Django generating an extra update query for the parent model when the child model is created. This involves ensuring that Django's ORM layer correctly identifies and handles the parent model's custom primary key during the creation process, setting all necessary fields in a single, initial INSERT query for each table involved in the multi-table inheritance scenario without compromising the integrity or expected functionality of other model creation operations within the framework."
    }
]