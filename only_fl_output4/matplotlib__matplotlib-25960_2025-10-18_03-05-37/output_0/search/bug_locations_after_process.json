[
    {
        "rel_file_path": "lib/matplotlib/figure.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.7/lib/matplotlib/figure.py",
        "start": 1545,
        "end": 1600,
        "class_name": null,
        "method_name": "subfigures",
        "code": "1545     def subfigures(self, nrows=1, ncols=1, squeeze=True,\n1546                    wspace=None, hspace=None,\n1547                    width_ratios=None, height_ratios=None,\n1548                    **kwargs):\n1549         \"\"\"\n1550         Add a set of subfigures to this figure or subfigure.\n1551 \n1552         A subfigure has the same artist methods as a figure, and is logically\n1553         the same as a figure, but cannot print itself.\n1554         See :doc:`/gallery/subplots_axes_and_figures/subfigures`.\n1555 \n1556         .. note::\n1557             The *subfigure* concept is new in v3.4, and the API is still provisional.\n1558 \n1559         Parameters\n1560         ----------\n1561         nrows, ncols : int, default: 1\n1562             Number of rows/columns of the subfigure grid.\n1563 \n1564         squeeze : bool, default: True\n1565             If True, extra dimensions are squeezed out from the returned\n1566             array of subfigures.\n1567 \n1568         wspace, hspace : float, default: None\n1569             The amount of width/height reserved for space between subfigures,\n1570             expressed as a fraction of the average subfigure width/height.\n1571             If not given, the values will be inferred from a figure or\n1572             rcParams when necessary.\n1573 \n1574         width_ratios : array-like of length *ncols*, optional\n1575             Defines the relative widths of the columns. Each column gets a\n1576             relative width of ``width_ratios[i] / sum(width_ratios)``.\n1577             If not given, all columns will have the same width.\n1578 \n1579         height_ratios : array-like of length *nrows*, optional\n1580             Defines the relative heights of the rows. Each row gets a\n1581             relative height of ``height_ratios[i] / sum(height_ratios)``.\n1582             If not given, all rows will have the same height.\n1583         \"\"\"\n1584         gs = GridSpec(nrows=nrows, ncols=ncols, figure=self,\n1585                       wspace=wspace, hspace=hspace,\n1586                       width_ratios=width_ratios,\n1587                       height_ratios=height_ratios)\n1588 \n1589         sfarr = np.empty((nrows, ncols), dtype=object)\n1590         for i in range(ncols):\n1591             for j in range(nrows):\n1592                 sfarr[j, i] = self.add_subfigure(gs[j, i], **kwargs)\n1593 \n1594         if squeeze:\n1595             # Discarding unneeded dimensions that equal 1.  If we only have one\n1596             # subfigure, just return it instead of a 1-element array.\n1597             return sfarr.item() if sfarr.size == 1 else sfarr.squeeze()\n1598         else:\n1599             # Returned axis array will be always 2-d, even if nrows=ncols=1.\n1600             return sfarr\n",
        "intended_behavior": "The method `subfigures` should ensure that the values provided to `wspace` and `hspace` parameters effectively adjust the spacing between subfigures within a figure. This method constructs a `GridSpec` with `wspace` and `hspace` parameters, which are intended to set the fraction of the average subfigure width/height to be reserved for space between subfigures. To resolve the issue, the method should be reviewed and possibly adjusted to guarantee that these parameters are correctly utilized within the layout engine, especially when layout adjustments or constraints (like `tight_layout` or `constrained_layout`) are applied to the figure. This might involve ensuring that `GridSpec` settings are not being overridden or ignored in subsequent layout calculations and rendering steps, preserving the intended functionality of customizable subfigure spacing."
    },
    {
        "rel_file_path": "lib/matplotlib/figure.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.7/lib/matplotlib/figure.py",
        "start": 1545,
        "end": 1600,
        "class_name": "FigureBase",
        "method_name": "subfigures",
        "code": "1545     def subfigures(self, nrows=1, ncols=1, squeeze=True,\n1546                    wspace=None, hspace=None,\n1547                    width_ratios=None, height_ratios=None,\n1548                    **kwargs):\n1549         \"\"\"\n1550         Add a set of subfigures to this figure or subfigure.\n1551 \n1552         A subfigure has the same artist methods as a figure, and is logically\n1553         the same as a figure, but cannot print itself.\n1554         See :doc:`/gallery/subplots_axes_and_figures/subfigures`.\n1555 \n1556         .. note::\n1557             The *subfigure* concept is new in v3.4, and the API is still provisional.\n1558 \n1559         Parameters\n1560         ----------\n1561         nrows, ncols : int, default: 1\n1562             Number of rows/columns of the subfigure grid.\n1563 \n1564         squeeze : bool, default: True\n1565             If True, extra dimensions are squeezed out from the returned\n1566             array of subfigures.\n1567 \n1568         wspace, hspace : float, default: None\n1569             The amount of width/height reserved for space between subfigures,\n1570             expressed as a fraction of the average subfigure width/height.\n1571             If not given, the values will be inferred from a figure or\n1572             rcParams when necessary.\n1573 \n1574         width_ratios : array-like of length *ncols*, optional\n1575             Defines the relative widths of the columns. Each column gets a\n1576             relative width of ``width_ratios[i] / sum(width_ratios)``.\n1577             If not given, all columns will have the same width.\n1578 \n1579         height_ratios : array-like of length *nrows*, optional\n1580             Defines the relative heights of the rows. Each row gets a\n1581             relative height of ``height_ratios[i] / sum(height_ratios)``.\n1582             If not given, all rows will have the same height.\n1583         \"\"\"\n1584         gs = GridSpec(nrows=nrows, ncols=ncols, figure=self,\n1585                       wspace=wspace, hspace=hspace,\n1586                       width_ratios=width_ratios,\n1587                       height_ratios=height_ratios)\n1588 \n1589         sfarr = np.empty((nrows, ncols), dtype=object)\n1590         for i in range(ncols):\n1591             for j in range(nrows):\n1592                 sfarr[j, i] = self.add_subfigure(gs[j, i], **kwargs)\n1593 \n1594         if squeeze:\n1595             # Discarding unneeded dimensions that equal 1.  If we only have one\n1596             # subfigure, just return it instead of a 1-element array.\n1597             return sfarr.item() if sfarr.size == 1 else sfarr.squeeze()\n1598         else:\n1599             # Returned axis array will be always 2-d, even if nrows=ncols=1.\n1600             return sfarr\n",
        "intended_behavior": "The method `subfigures` should ensure that the values provided to `wspace` and `hspace` parameters effectively adjust the spacing between subfigures within a figure. This method constructs a `GridSpec` with `wspace` and `hspace` parameters, which are intended to set the fraction of the average subfigure width/height to be reserved for space between subfigures. To resolve the issue, the method should be reviewed and possibly adjusted to guarantee that these parameters are correctly utilized within the layout engine, especially when layout adjustments or constraints (like `tight_layout` or `constrained_layout`) are applied to the figure. This might involve ensuring that `GridSpec` settings are not being overridden or ignored in subsequent layout calculations and rendering steps, preserving the intended functionality of customizable subfigure spacing."
    }
]