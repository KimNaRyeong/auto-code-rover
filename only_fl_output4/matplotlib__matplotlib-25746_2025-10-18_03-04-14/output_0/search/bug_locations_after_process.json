[
    {
        "rel_file_path": "lib/matplotlib/axes/_base.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.7/lib/matplotlib/axes/_base.py",
        "start": 3307,
        "end": 3385,
        "class_name": null,
        "method_name": "tick_params",
        "code": "3307     def tick_params(self, axis='both', **kwargs):\n3308         \"\"\"\n3309         Change the appearance of ticks, tick labels, and gridlines.\n3310 \n3311         Tick properties that are not explicitly set using the keyword\n3312         arguments remain unchanged unless *reset* is True. For the current\n3313         style settings, see `.Axis.get_tick_params`.\n3314 \n3315         Parameters\n3316         ----------\n3317         axis : {'x', 'y', 'both'}, default: 'both'\n3318             The axis to which the parameters are applied.\n3319         which : {'major', 'minor', 'both'}, default: 'major'\n3320             The group of ticks to which the parameters are applied.\n3321         reset : bool, default: False\n3322             Whether to reset the ticks to defaults before updating them.\n3323 \n3324         Other Parameters\n3325         ----------------\n3326         direction : {'in', 'out', 'inout'}\n3327             Puts ticks inside the Axes, outside the Axes, or both.\n3328         length : float\n3329             Tick length in points.\n3330         width : float\n3331             Tick width in points.\n3332         color : color\n3333             Tick color.\n3334         pad : float\n3335             Distance in points between tick and label.\n3336         labelsize : float or str\n3337             Tick label font size in points or as a string (e.g., 'large').\n3338         labelcolor : color\n3339             Tick label color.\n3340         colors : color\n3341             Tick color and label color.\n3342         zorder : float\n3343             Tick and label zorder.\n3344         bottom, top, left, right : bool\n3345             Whether to draw the respective ticks.\n3346         labelbottom, labeltop, labelleft, labelright : bool\n3347             Whether to draw the respective tick labels.\n3348         labelrotation : float\n3349             Tick label rotation\n3350         grid_color : color\n3351             Gridline color.\n3352         grid_alpha : float\n3353             Transparency of gridlines: 0 (transparent) to 1 (opaque).\n3354         grid_linewidth : float\n3355             Width of gridlines in points.\n3356         grid_linestyle : str\n3357             Any valid `.Line2D` line style spec.\n3358 \n3359         Examples\n3360         --------\n3361         ::\n3362 \n3363             ax.tick_params(direction='out', length=6, width=2, colors='r',\n3364                            grid_color='r', grid_alpha=0.5)\n3365 \n3366         This will make all major ticks be red, pointing out of the box,\n3367         and with dimensions 6 points by 2 points.  Tick labels will\n3368         also be red.  Gridlines will be red and translucent.\n3369 \n3370         \"\"\"\n3371         _api.check_in_list(['x', 'y', 'both'], axis=axis)\n3372         if axis in ['x', 'both']:\n3373             xkw = dict(kwargs)\n3374             xkw.pop('left', None)\n3375             xkw.pop('right', None)\n3376             xkw.pop('labelleft', None)\n3377             xkw.pop('labelright', None)\n3378             self.xaxis.set_tick_params(**xkw)\n3379         if axis in ['y', 'both']:\n3380             ykw = dict(kwargs)\n3381             ykw.pop('top', None)\n3382             ykw.pop('bottom', None)\n3383             ykw.pop('labeltop', None)\n3384             ykw.pop('labelbottom', None)\n3385             self.yaxis.set_tick_params(**ykw)\n",
        "intended_behavior": "The method `tick_params` within this file should be enhanced to allow a `fontfamily` or `labelfont` keyword argument. This addition will enable users to specify the font family for tick labels directly through `tick_params`, simplifying the process of customizing tick label appearance without altering the global font family settings or manually setting tick labels through other more cumbersome methods. The implementation must ensure that this new kwarg is optional, defaults to not altering the font family if not specified, and integrates smoothly with the existing logic for handling tick parameter adjustments. The method should parse this argument and apply it to the tick labels' font settings accordingly. Care must be taken to preserve the method's existing functionality and only extend it with the new capability."
    },
    {
        "rel_file_path": "lib/matplotlib/axes/_base.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.7/lib/matplotlib/axes/_base.py",
        "start": 3307,
        "end": 3385,
        "class_name": "_AxesBase",
        "method_name": "tick_params",
        "code": "3307     def tick_params(self, axis='both', **kwargs):\n3308         \"\"\"\n3309         Change the appearance of ticks, tick labels, and gridlines.\n3310 \n3311         Tick properties that are not explicitly set using the keyword\n3312         arguments remain unchanged unless *reset* is True. For the current\n3313         style settings, see `.Axis.get_tick_params`.\n3314 \n3315         Parameters\n3316         ----------\n3317         axis : {'x', 'y', 'both'}, default: 'both'\n3318             The axis to which the parameters are applied.\n3319         which : {'major', 'minor', 'both'}, default: 'major'\n3320             The group of ticks to which the parameters are applied.\n3321         reset : bool, default: False\n3322             Whether to reset the ticks to defaults before updating them.\n3323 \n3324         Other Parameters\n3325         ----------------\n3326         direction : {'in', 'out', 'inout'}\n3327             Puts ticks inside the Axes, outside the Axes, or both.\n3328         length : float\n3329             Tick length in points.\n3330         width : float\n3331             Tick width in points.\n3332         color : color\n3333             Tick color.\n3334         pad : float\n3335             Distance in points between tick and label.\n3336         labelsize : float or str\n3337             Tick label font size in points or as a string (e.g., 'large').\n3338         labelcolor : color\n3339             Tick label color.\n3340         colors : color\n3341             Tick color and label color.\n3342         zorder : float\n3343             Tick and label zorder.\n3344         bottom, top, left, right : bool\n3345             Whether to draw the respective ticks.\n3346         labelbottom, labeltop, labelleft, labelright : bool\n3347             Whether to draw the respective tick labels.\n3348         labelrotation : float\n3349             Tick label rotation\n3350         grid_color : color\n3351             Gridline color.\n3352         grid_alpha : float\n3353             Transparency of gridlines: 0 (transparent) to 1 (opaque).\n3354         grid_linewidth : float\n3355             Width of gridlines in points.\n3356         grid_linestyle : str\n3357             Any valid `.Line2D` line style spec.\n3358 \n3359         Examples\n3360         --------\n3361         ::\n3362 \n3363             ax.tick_params(direction='out', length=6, width=2, colors='r',\n3364                            grid_color='r', grid_alpha=0.5)\n3365 \n3366         This will make all major ticks be red, pointing out of the box,\n3367         and with dimensions 6 points by 2 points.  Tick labels will\n3368         also be red.  Gridlines will be red and translucent.\n3369 \n3370         \"\"\"\n3371         _api.check_in_list(['x', 'y', 'both'], axis=axis)\n3372         if axis in ['x', 'both']:\n3373             xkw = dict(kwargs)\n3374             xkw.pop('left', None)\n3375             xkw.pop('right', None)\n3376             xkw.pop('labelleft', None)\n3377             xkw.pop('labelright', None)\n3378             self.xaxis.set_tick_params(**xkw)\n3379         if axis in ['y', 'both']:\n3380             ykw = dict(kwargs)\n3381             ykw.pop('top', None)\n3382             ykw.pop('bottom', None)\n3383             ykw.pop('labeltop', None)\n3384             ykw.pop('labelbottom', None)\n3385             self.yaxis.set_tick_params(**ykw)\n",
        "intended_behavior": "The method `tick_params` within this file should be enhanced to allow a `fontfamily` or `labelfont` keyword argument. This addition will enable users to specify the font family for tick labels directly through `tick_params`, simplifying the process of customizing tick label appearance without altering the global font family settings or manually setting tick labels through other more cumbersome methods. The implementation must ensure that this new kwarg is optional, defaults to not altering the font family if not specified, and integrates smoothly with the existing logic for handling tick parameter adjustments. The method should parse this argument and apply it to the tick labels' font settings accordingly. Care must be taken to preserve the method's existing functionality and only extend it with the new capability."
    }
]