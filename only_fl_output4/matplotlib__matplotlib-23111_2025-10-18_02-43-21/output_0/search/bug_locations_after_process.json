[
    {
        "rel_file_path": "lib/matplotlib/cbook/__init__.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.5/lib/matplotlib/cbook/__init__.py",
        "start": 2153,
        "end": 2171,
        "class_name": null,
        "method_name": "_g_sig_digits",
        "code": "2153 def _g_sig_digits(value, delta):\n2154     \"\"\"\n2155     Return the number of significant digits to %g-format *value*, assuming that\n2156     it is known with an error of *delta*.\n2157     \"\"\"\n2158     if delta == 0:\n2159         # delta = 0 may occur when trying to format values over a tiny range;\n2160         # in that case, replace it by the distance to the closest float.\n2161         delta = np.spacing(value)\n2162     # If e.g. value = 45.67 and delta = 0.02, then we want to round to 2 digits\n2163     # after the decimal point (floor(log10(0.02)) = -2); 45.67 contributes 2\n2164     # digits before the decimal point (floor(log10(45.67)) + 1 = 2): the total\n2165     # is 4 significant digits.  A value of 0 contributes 1 \"digit\" before the\n2166     # decimal point.\n2167     # For inf or nan, the precision doesn't matter.\n2168     return max(\n2169         0,\n2170         (math.floor(math.log10(abs(value))) + 1 if value else 1)\n2171         - math.floor(math.log10(delta))) if math.isfinite(value) else 0\n",
        "intended_behavior": "The `_g_sig_digits` function should be modified to handle cases where `delta` is less than or equal to zero. This can be achieved by adding a check before the logarithm operation to ensure `delta` is positive. If `delta` is non-positive, the function could either return a default significant digit value (such as 0) or adjust `delta` to a minimum positive threshold value to allow the log operation to proceed without throwing a domain error. This change preserves the existing functionality of determining significant digits while preventing math domain errors."
    },
    {
        "rel_file_path": "lib/matplotlib/backend_bases.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.5/lib/matplotlib/backend_bases.py",
        "start": 3012,
        "end": 3030,
        "class_name": null,
        "method_name": "_mouse_event_to_message",
        "code": "3012     def _mouse_event_to_message(event):\n3013         if event.inaxes and event.inaxes.get_navigate():\n3014             try:\n3015                 s = event.inaxes.format_coord(event.xdata, event.ydata)\n3016             except (ValueError, OverflowError):\n3017                 pass\n3018             else:\n3019                 s = s.rstrip()\n3020                 artists = [a for a in event.inaxes._mouseover_set\n3021                            if a.contains(event)[0] and a.get_visible()]\n3022                 if artists:\n3023                     a = cbook._topmost_artist(artists)\n3024                     if a is not event.inaxes.patch:\n3025                         data = a.get_cursor_data(event)\n3026                         if data is not None:\n3027                             data_str = a.format_cursor_data(data).rstrip()\n3028                             if data_str:\n3029                                 s = s + '\\n' + data_str\n3030                 return s\n",
        "intended_behavior": "The intention within `_mouse_event_to_message` is to safely and correctly display cursor data, including when encountering unusual data conditions such as uniform negative values. While the method itself may not directly calculate `delta` or significant digits, it should ensure any invocation of methods that do, such as indirectly calling `_g_sig_digits` through `format_cursor_data`, are robust against data that could lead to errors. This could involve pre-validating data or post-processing format results to catch and handle exceptions. Ensuring robustness in how data values are handled before they lead to errors would address the issue without altering the method's primary functionality of presenting cursor information."
    },
    {
        "rel_file_path": "lib/matplotlib/backend_bases.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.5/lib/matplotlib/backend_bases.py",
        "start": 3012,
        "end": 3030,
        "class_name": "NavigationToolbar2",
        "method_name": "_mouse_event_to_message",
        "code": "3012     def _mouse_event_to_message(event):\n3013         if event.inaxes and event.inaxes.get_navigate():\n3014             try:\n3015                 s = event.inaxes.format_coord(event.xdata, event.ydata)\n3016             except (ValueError, OverflowError):\n3017                 pass\n3018             else:\n3019                 s = s.rstrip()\n3020                 artists = [a for a in event.inaxes._mouseover_set\n3021                            if a.contains(event)[0] and a.get_visible()]\n3022                 if artists:\n3023                     a = cbook._topmost_artist(artists)\n3024                     if a is not event.inaxes.patch:\n3025                         data = a.get_cursor_data(event)\n3026                         if data is not None:\n3027                             data_str = a.format_cursor_data(data).rstrip()\n3028                             if data_str:\n3029                                 s = s + '\\n' + data_str\n3030                 return s\n",
        "intended_behavior": "The intention within `_mouse_event_to_message` is to safely and correctly display cursor data, including when encountering unusual data conditions such as uniform negative values. While the method itself may not directly calculate `delta` or significant digits, it should ensure any invocation of methods that do, such as indirectly calling `_g_sig_digits` through `format_cursor_data`, are robust against data that could lead to errors. This could involve pre-validating data or post-processing format results to catch and handle exceptions. Ensuring robustness in how data values are handled before they lead to errors would address the issue without altering the method's primary functionality of presenting cursor information."
    }
]