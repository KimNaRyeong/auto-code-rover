[
    {
        "rel_file_path": "django/utils/http.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.1/django/utils/http.py",
        "start": 158,
        "end": 191,
        "class_name": null,
        "method_name": "parse_http_date",
        "code": "158 def parse_http_date(date):\n159     \"\"\"\n160     Parse a date format as specified by HTTP RFC7231 section 7.1.1.1.\n161 \n162     The three formats allowed by the RFC are accepted, even if only the first\n163     one is still in widespread use.\n164 \n165     Return an integer expressed in seconds since the epoch, in UTC.\n166     \"\"\"\n167     # email.utils.parsedate() does the job for RFC1123 dates; unfortunately\n168     # RFC7231 makes it mandatory to support RFC850 dates too. So we roll\n169     # our own RFC-compliant parsing.\n170     for regex in RFC1123_DATE, RFC850_DATE, ASCTIME_DATE:\n171         m = regex.match(date)\n172         if m is not None:\n173             break\n174     else:\n175         raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n176     try:\n177         year = int(m.group('year'))\n178         if year < 100:\n179             if year < 70:\n180                 year += 2000\n181             else:\n182                 year += 1900\n183         month = MONTHS.index(m.group('mon').lower()) + 1\n184         day = int(m.group('day'))\n185         hour = int(m.group('hour'))\n186         min = int(m.group('min'))\n187         sec = int(m.group('sec'))\n188         result = datetime.datetime(year, month, day, hour, min, sec)\n189         return calendar.timegm(result.utctimetuple())\n190     except Exception as exc:\n191         raise ValueError(\"%r is not a valid date\" % date) from exc\n",
        "intended_behavior": "The existing functionality of interpreting two-digit years should be preserved, but it needs to be adjusted to align with the directives of RFC 7231. This adjustment involves dynamically determining the century of a two-digit year based on the current year. If a two-digit year, when interpreted as being in the 20th or 21st century, appears to be more than 50 years in the future, it should instead be interpreted as the most recent past year with the same last two digits. Specifically, this means replacing the simplistic check that statically assigns a century to a two-digit year, with a more sophisticated logic that: 1. Retrieves the current year. 2. Compares the two-digit year with the last two digits of the current year. 3. If the computed year (with the century assumed as 1900 or 2000 added) is over 50 years ahead of the current year, it should instead treat it as the most recent past year with the same last two digits. This change ensures compliance with RFC 7231 and addresses potential misinterpretations of two-digit years, thereby resolving the stated issue."
    }
]