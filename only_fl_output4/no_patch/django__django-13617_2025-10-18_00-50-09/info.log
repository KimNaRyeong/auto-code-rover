2025-10-18 00:50:09.515 | INFO     | Starting overall retry 0 with model gpt-4-0125-preview
2025-10-18 00:50:12.148 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1069, output_tokens=12, cost=0.011050
2025-10-18 00:50:12.148 | INFO     | Test agent decides that the issue statement does not contain reproduction steps; skipping reproducer tracing
2025-10-18 00:50:12.152 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 00:50:17.424 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=1358, output_tokens=216, cost=0.020060
2025-10-18 00:50:17.429 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 00:50:19.940 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=570, output_tokens=81, cost=0.008130
2025-10-18 00:50:19.941 | DEBUG    | Extracted a valid json.
2025-10-18 00:50:19.941 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [
        "search_class(\"Query\")",
        "search_method_in_class(\"group_by\", \"Query\")",
        "search_code(\"class Query(BaseExpression):\")",
        "search_code_in_file(\"if isinstance(expr, Ref) and expr.refs not in field_names:\", \"django/db/models/sql/query.py\")"
    ],
    "bug_locations": []
}
2025-10-18 00:50:20.018 | DEBUG    | Obtained search results from API invocation. Going into next retrieval round.
2025-10-18 00:50:20.019 | DEBUG    | <Agent search> Analyzing search results.
2025-10-18 00:50:33.422 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3123, output_tokens=657, cost=0.050940
2025-10-18 00:50:33.436 | DEBUG    | <Agent search> Selecting APIs to call.
2025-10-18 00:50:42.495 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=3996, output_tokens=400, cost=0.051960
2025-10-18 00:50:42.504 | DEBUG    | Trying to convert API calls/bug locations into json. Try 1 of 5.
2025-10-18 00:50:49.333 | INFO     | Model (gpt-4-0125-preview) API request cost info: input_tokens=754, output_tokens=260, cost=0.015340
2025-10-18 00:50:49.334 | DEBUG    | Extracted a valid json.
2025-10-18 00:50:49.335 | DEBUG    | Agent proxy return the following json: {
    "API_calls": [],
    "bug_locations": [
        {
            "file": "django/db/models/sql/query.py",
            "class": "Query",
            "method": "",
            "intended_behavior": "To resolve the issue, the code should be modified to correctly handle annotations that contain subqueries within GROUP BY clauses. Specifically, the patch suggests adjusting the condition to include annotation_names when constructing the group_by list. This change aims to ensure that:\n\n  - Annotated fields, especially those involving subqueries, are recognized and handled correctly in the GROUP_BY clause construction process. This involves using the alias of annotated subqueries directly rather than treating them as new expressions to be evaluated or incorrectly adding fields to the GROUP BY clause that shouldn't be there.\n  - The existing functionality where annotations without subqueries and other groupings are handled correctly should remain intact. The change should specifically address the mishandling of subquery annotations without disrupting the valid processing of other types of annotations or expressions within the GROUP_BY clause.\n\nThe overall intended behavior is to ensure accurate and efficient execution of queries involving complex annotations and groupings, upholding the ORM's ability to express and execute sophisticated queries without resorting to raw SQL or encountering incorrect results."
        }
    ]
}
2025-10-18 00:50:49.352 | DEBUG    | Bug location extracted successfully: [<file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>None</method>
<code>
139 class Query(BaseExpression):
140     """A single SQL query."""
141 
142     alias_prefix = 'T'
143     subq_aliases = frozenset([alias_prefix])
144 
145     compiler = 'SQLCompiler'
146 
147     def __init__(self, model, where=WhereNode, alias_cols=True):
148         self.model = model
149         self.alias_refcount = {}
150         # alias_map is the most important data structure regarding joins.
151         # It's used for recording which joins exist in the query and what
152         # types they are. The key is the alias of the joined table (possibly
153         # the table name) and the value is a Join-like object (see
154         # sql.datastructures.Join for more information).
155         self.alias_map = {}
156         # Whether to provide alias to columns during reference resolving.
157         self.alias_cols = alias_cols
158         # Sometimes the query contains references to aliases in outer queries (as
159         # a result of split_exclude). Correct alias quoting needs to know these
160         # aliases too.
161         # Map external tables to whether they are aliased.
162         self.external_aliases = {}
163         self.table_map = {}     # Maps table names to list of aliases.
164         self.default_cols = True
165         self.default_ordering = True
166         self.standard_ordering = True
167         self.used_aliases = set()
168         self.filter_is_sticky = False
169         self.subquery = False
170 
171         # SQL-related attributes
172         # Select and related select clauses are expressions to use in the
173         # SELECT clause of the query.
174         # The select is used for cases where we want to set up the select
175         # clause to contain other than default fields (values(), subqueries...)
176         # Note that annotations go to annotations dictionary.
177         self.select = ()
178         self.where = where()
179         self.where_class = where
180         # The group_by attribute can have one of the following forms:
181         #  - None: no group by at all in the query
182         #  - A tuple of expressions: group by (at least) those expressions.
183         #    String refs are also allowed for now.
184         #  - True: group by all select fields of the model
185         # See compiler.get_group_by() for details.
186         self.group_by = None
187         self.order_by = ()
188         self.low_mark, self.high_mark = 0, None  # Used for offset/limit
189         self.distinct = False
190         self.distinct_fields = ()
191         self.select_for_update = False
192         self.select_for_update_nowait = False
193         self.select_for_update_skip_locked = False
194         self.select_for_update_of = ()
195         self.select_for_no_key_update = False
196 
197         self.select_related = False
198         # Arbitrary limit for select_related to prevents infinite recursion.
199         self.max_depth = 5
200 
201         # Holds the selects defined by a call to values() or values_list()
202         # excluding annotation_select and extra_select.
203         self.values_select = ()
204 
205         # SQL annotation-related attributes
206         self.annotations = {}  # Maps alias -> Annotation Expression
207         self.annotation_select_mask = None
208         self._annotation_select_cache = None
209 
210         # Set combination attributes
211         self.combinator = None
212         self.combinator_all = False
213         self.combined_queries = ()
214 
215         # These are for extensions. The contents are more or less appended
216         # verbatim to the appropriate clause.
217         self.extra = {}  # Maps col_alias -> (col_sql, params).
218         self.extra_select_mask = None
219         self._extra_select_cache = None
220 
221         self.extra_tables = ()
222         self.extra_order_by = ()
223 
224         # A tuple that is a set of model field names and either True, if these
225         # are the fields to defer, or False if these are the only fields to
226         # load.
227         self.deferred_loading = (frozenset(), True)
228 
229         self._filtered_relations = {}
230 
231         self.explain_query = False
232         self.explain_format = None
233         self.explain_options = {}
234 
235     @property
236     def output_field(self):
237         if len(self.select) == 1:
238             select = self.select[0]
239             return getattr(select, 'target', None) or select.field
240         elif len(self.annotation_select) == 1:
241             return next(iter(self.annotation_select.values())).output_field
242 
243     @property
244     def has_select_fields(self):
245         return bool(self.select or self.annotation_select_mask or self.extra_select_mask)
246 
247     @cached_property
248     def base_table(self):
249         for alias in self.alias_map:
250             return alias
251 
252     @property
253     def identity(self):
254         identity = (
255             (arg, make_hashable(value))
256             for arg, value in self.__dict__.items()
257         )
258         return (self.__class__, *identity)
259 
260     def __str__(self):
261         """
262         Return the query as a string of SQL with the parameter values
263         substituted in (use sql_with_params() to see the unsubstituted string).
264 
265         Parameter values won't necessarily be quoted correctly, since that is
266         done by the database interface at execution time.
267         """
268         sql, params = self.sql_with_params()
269         return sql % params
270 
271     def sql_with_params(self):
272         """
273         Return the query as an SQL string and the parameters that will be
274         substituted into the query.
275         """
276         return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()
277 
278     def __deepcopy__(self, memo):
279         """Limit the amount of work when a Query is deepcopied."""
280         result = self.clone()
281         memo[id(self)] = result
282         return result
283 
284     def get_compiler(self, using=None, connection=None):
285         if using is None and connection is None:
286             raise ValueError("Need either using or connection")
287         if using:
288             connection = connections[using]
289         return connection.ops.compiler(self.compiler)(self, connection, using)
290 
291     def get_meta(self):
292         """
293         Return the Options instance (the model._meta) from which to start
294         processing. Normally, this is self.model._meta, but it can be changed
295         by subclasses.
296         """
297         return self.model._meta
298 
299     def clone(self):
300         """
301         Return a copy of the current Query. A lightweight alternative to
302         to deepcopy().
303         """
304         obj = Empty()
305         obj.__class__ = self.__class__
306         # Copy references to everything.
307         obj.__dict__ = self.__dict__.copy()
308         # Clone attributes that can't use shallow copy.
309         obj.alias_refcount = self.alias_refcount.copy()
310         obj.alias_map = self.alias_map.copy()
311         obj.external_aliases = self.external_aliases.copy()
312         obj.table_map = self.table_map.copy()
313         obj.where = self.where.clone()
314         obj.annotations = self.annotations.copy()
315         if self.annotation_select_mask is None:
316             obj.annotation_select_mask = None
317         else:
318             obj.annotation_select_mask = self.annotation_select_mask.copy()
319         obj.combined_queries = tuple(query.clone() for query in self.combined_queries)
320         # _annotation_select_cache cannot be copied, as doing so breaks the
321         # (necessary) state in which both annotations and
322         # _annotation_select_cache point to the same underlying objects.
323         # It will get re-populated in the cloned queryset the next time it's
324         # used.
325         obj._annotation_select_cache = None
326         obj.extra = self.extra.copy()
327         if self.extra_select_mask is None:
328             obj.extra_select_mask = None
329         else:
330             obj.extra_select_mask = self.extra_select_mask.copy()
331         if self._extra_select_cache is None:
332             obj._extra_select_cache = None
333         else:
334             obj._extra_select_cache = self._extra_select_cache.copy()
335         if self.select_related is not False:
336             # Use deepcopy because select_related stores fields in nested
337             # dicts.
338             obj.select_related = copy.deepcopy(obj.select_related)
339         if 'subq_aliases' in self.__dict__:
340             obj.subq_aliases = self.subq_aliases.copy()
341         obj.used_aliases = self.used_aliases.copy()
342         obj._filtered_relations = self._filtered_relations.copy()
343         # Clear the cached_property
344         try:
345             del obj.base_table
346         except AttributeError:
347             pass
348         return obj
349 
350     def chain(self, klass=None):
351         """
352         Return a copy of the current Query that's ready for another operation.
353         The klass argument changes the type of the Query, e.g. UpdateQuery.
354         """
355         obj = self.clone()
356         if klass and obj.__class__ != klass:
357             obj.__class__ = klass
358         if not obj.filter_is_sticky:
359             obj.used_aliases = set()
360         obj.filter_is_sticky = False
361         if hasattr(obj, '_setup_query'):
362             obj._setup_query()
363         return obj
364 
365     def relabeled_clone(self, change_map):
366         clone = self.clone()
367         clone.change_aliases(change_map)
368         return clone
369 
370     def _get_col(self, target, field, alias):
371         if not self.alias_cols:
372             alias = None
373         return target.get_col(alias, field)
374 
375     def rewrite_cols(self, annotation, col_cnt):
376         # We must make sure the inner query has the referred columns in it.
377         # If we are aggregating over an annotation, then Django uses Ref()
378         # instances to note this. However, if we are annotating over a column
379         # of a related model, then it might be that column isn't part of the
380         # SELECT clause of the inner query, and we must manually make sure
381         # the column is selected. An example case is:
382         #    .aggregate(Sum('author__awards'))
383         # Resolving this expression results in a join to author, but there
384         # is no guarantee the awards column of author is in the select clause
385         # of the query. Thus we must manually add the column to the inner
386         # query.
387         orig_exprs = annotation.get_source_expressions()
388         new_exprs = []
389         for expr in orig_exprs:
390             # FIXME: These conditions are fairly arbitrary. Identify a better
391             # method of having expressions decide which code path they should
392             # take.
393             if isinstance(expr, Ref):
394                 # Its already a Ref to subquery (see resolve_ref() for
395                 # details)
396                 new_exprs.append(expr)
397             elif isinstance(expr, (WhereNode, Lookup)):
398                 # Decompose the subexpressions further. The code here is
399                 # copied from the else clause, but this condition must appear
400                 # before the contains_aggregate/is_summary condition below.
401                 new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
402                 new_exprs.append(new_expr)
403             else:
404                 # Reuse aliases of expressions already selected in subquery.
405                 for col_alias, selected_annotation in self.annotation_select.items():
406                     if selected_annotation is expr:
407                         new_expr = Ref(col_alias, expr)
408                         break
409                 else:
410                     # An expression that is not selected the subquery.
411                     if isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):
412                         # Reference column or another aggregate. Select it
413                         # under a non-conflicting alias.
414                         col_cnt += 1
415                         col_alias = '__col%d' % col_cnt
416                         self.annotations[col_alias] = expr
417                         self.append_annotation_mask([col_alias])
418                         new_expr = Ref(col_alias, expr)
419                     else:
420                         # Some other expression not referencing database values
421                         # directly. Its subexpression might contain Cols.
422                         new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
423                 new_exprs.append(new_expr)
424         annotation.set_source_expressions(new_exprs)
425         return annotation, col_cnt
426 
427     def get_aggregation(self, using, added_aggregate_names):
428         """
429         Return the dictionary with the values of the existing aggregations.
430         """
431         if not self.annotation_select:
432             return {}
433         existing_annotations = [
434             annotation for alias, annotation
435             in self.annotations.items()
436             if alias not in added_aggregate_names
437         ]
438         # Decide if we need to use a subquery.
439         #
440         # Existing annotations would cause incorrect results as get_aggregation()
441         # must produce just one result and thus must not use GROUP BY. But we
442         # aren't smart enough to remove the existing annotations from the
443         # query, so those would force us to use GROUP BY.
444         #
445         # If the query has limit or distinct, or uses set operations, then
446         # those operations must be done in a subquery so that the query
447         # aggregates on the limit and/or distinct results instead of applying
448         # the distinct and limit after the aggregation.
449         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or
450                 self.distinct or self.combinator):
451             from django.db.models.sql.subqueries import AggregateQuery
452             outer_query = AggregateQuery(self.model)
453             inner_query = self.clone()
454             inner_query.select_for_update = False
455             inner_query.select_related = False
456             inner_query.set_annotation_mask(self.annotation_select)
457             if not self.is_sliced and not self.distinct_fields:
458                 # Queries with distinct_fields need ordering and when a limit
459                 # is applied we must take the slice from the ordered query.
460                 # Otherwise no need for ordering.
461                 inner_query.clear_ordering(True)
462             if not inner_query.distinct:
463                 # If the inner query uses default select and it has some
464                 # aggregate annotations, then we must make sure the inner
465                 # query is grouped by the main model's primary key. However,
466                 # clearing the select clause can alter results if distinct is
467                 # used.
468                 has_existing_aggregate_annotations = any(
469                     annotation for annotation in existing_annotations
470                     if getattr(annotation, 'contains_aggregate', True)
471                 )
472                 if inner_query.default_cols and has_existing_aggregate_annotations:
473                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
474                 inner_query.default_cols = False
475 
476             relabels = {t: 'subquery' for t in inner_query.alias_map}
477             relabels[None] = 'subquery'
478             # Remove any aggregates marked for reduction from the subquery
479             # and move them to the outer AggregateQuery.
480             col_cnt = 0
481             for alias, expression in list(inner_query.annotation_select.items()):
482                 annotation_select_mask = inner_query.annotation_select_mask
483                 if expression.is_summary:
484                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
485                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
486                     del inner_query.annotations[alias]
487                     annotation_select_mask.remove(alias)
488                 # Make sure the annotation_select wont use cached results.
489                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)
490             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
491                 # In case of Model.objects[0:3].count(), there would be no
492                 # field selected in the inner query, yet we must use a subquery.
493                 # So, make sure at least one field is selected.
494                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
495             try:
496                 outer_query.add_subquery(inner_query, using)
497             except EmptyResultSet:
498                 return {
499                     alias: None
500                     for alias in outer_query.annotation_select
501                 }
502         else:
503             outer_query = self
504             self.select = ()
505             self.default_cols = False
506             self.extra = {}
507 
508         outer_query.clear_ordering(True)
509         outer_query.clear_limits()
510         outer_query.select_for_update = False
511         outer_query.select_related = False
512         compiler = outer_query.get_compiler(using)
513         result = compiler.execute_sql(SINGLE)
514         if result is None:
515             result = [None] * len(outer_query.annotation_select)
516 
517         converters = compiler.get_converters(outer_query.annotation_select.values())
518         result = next(compiler.apply_converters((result,), converters))
519 
520         return dict(zip(outer_query.annotation_select, result))
521 
522     def get_count(self, using):
523         """
524         Perform a COUNT() query using the current filter constraints.
525         """
526         obj = self.clone()
527         obj.add_annotation(Count('*'), alias='__count', is_summary=True)
528         number = obj.get_aggregation(using, ['__count'])['__count']
529         if number is None:
530             number = 0
531         return number
532 
533     def has_filters(self):
534         return self.where
535 
536     def exists(self):
537         q = self.clone()
538         if not q.distinct:
539             if q.group_by is True:
540                 q.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
541                 # Disable GROUP BY aliases to avoid orphaning references to the
542                 # SELECT clause which is about to be cleared.
543                 q.set_group_by(allow_aliases=False)
544             q.clear_select_clause()
545         q.clear_ordering(True)
546         q.set_limits(high=1)
547         q.add_extra({'a': 1}, None, None, None, None, None)
548         q.set_extra_mask(['a'])
549         return q
550 
551     def has_results(self, using):
552         q = self.exists()
553         compiler = q.get_compiler(using=using)
554         return compiler.has_results()
555 
556     def explain(self, using, format=None, **options):
557         q = self.clone()
558         q.explain_query = True
559         q.explain_format = format
560         q.explain_options = options
561         compiler = q.get_compiler(using=using)
562         return '\n'.join(compiler.explain_query())
563 
564     def combine(self, rhs, connector):
565         """
566         Merge the 'rhs' query into the current one (with any 'rhs' effects
567         being applied *after* (that is, "to the right of") anything in the
568         current query. 'rhs' is not modified during a call to this function.
569 
570         The 'connector' parameter describes how to connect filters from the
571         'rhs' query.
572         """
573         assert self.model == rhs.model, \
574             "Cannot combine queries on two different base models."
575         assert not self.is_sliced, \
576             "Cannot combine queries once a slice has been taken."
577         assert self.distinct == rhs.distinct, \
578             "Cannot combine a unique query with a non-unique query."
579         assert self.distinct_fields == rhs.distinct_fields, \
580             "Cannot combine queries with different distinct fields."
581 
582         # Work out how to relabel the rhs aliases, if necessary.
583         change_map = {}
584         conjunction = (connector == AND)
585 
586         # Determine which existing joins can be reused. When combining the
587         # query with AND we must recreate all joins for m2m filters. When
588         # combining with OR we can reuse joins. The reason is that in AND
589         # case a single row can't fulfill a condition like:
590         #     revrel__col=1 & revrel__col=2
591         # But, there might be two different related rows matching this
592         # condition. In OR case a single True is enough, so single row is
593         # enough, too.
594         #
595         # Note that we will be creating duplicate joins for non-m2m joins in
596         # the AND case. The results will be correct but this creates too many
597         # joins. This is something that could be fixed later on.
598         reuse = set() if conjunction else set(self.alias_map)
599         # Base table must be present in the query - this is the same
600         # table on both sides.
601         self.get_initial_alias()
602         joinpromoter = JoinPromoter(connector, 2, False)
603         joinpromoter.add_votes(
604             j for j in self.alias_map if self.alias_map[j].join_type == INNER)
605         rhs_votes = set()
606         # Now, add the joins from rhs query into the new query (skipping base
607         # table).
608         rhs_tables = list(rhs.alias_map)[1:]
609         for alias in rhs_tables:
610             join = rhs.alias_map[alias]
611             # If the left side of the join was already relabeled, use the
612             # updated alias.
613             join = join.relabeled_clone(change_map)
614             new_alias = self.join(join, reuse=reuse)
615             if join.join_type == INNER:
616                 rhs_votes.add(new_alias)
617             # We can't reuse the same join again in the query. If we have two
618             # distinct joins for the same connection in rhs query, then the
619             # combined query must have two joins, too.
620             reuse.discard(new_alias)
621             if alias != new_alias:
622                 change_map[alias] = new_alias
623             if not rhs.alias_refcount[alias]:
624                 # The alias was unused in the rhs query. Unref it so that it
625                 # will be unused in the new query, too. We have to add and
626                 # unref the alias so that join promotion has information of
627                 # the join type for the unused alias.
628                 self.unref_alias(new_alias)
629         joinpromoter.add_votes(rhs_votes)
630         joinpromoter.update_join_types(self)
631 
632         # Now relabel a copy of the rhs where-clause and add it to the current
633         # one.
634         w = rhs.where.clone()
635         w.relabel_aliases(change_map)
636         self.where.add(w, connector)
637 
638         # Selection columns and extra extensions are those provided by 'rhs'.
639         if rhs.select:
640             self.set_select([col.relabeled_clone(change_map) for col in rhs.select])
641         else:
642             self.select = ()
643 
644         if connector == OR:
645             # It would be nice to be able to handle this, but the queries don't
646             # really make sense (or return consistent value sets). Not worth
647             # the extra complexity when you can write a real query instead.
648             if self.extra and rhs.extra:
649                 raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")
650         self.extra.update(rhs.extra)
651         extra_select_mask = set()
652         if self.extra_select_mask is not None:
653             extra_select_mask.update(self.extra_select_mask)
654         if rhs.extra_select_mask is not None:
655             extra_select_mask.update(rhs.extra_select_mask)
656         if extra_select_mask:
657             self.set_extra_mask(extra_select_mask)
658         self.extra_tables += rhs.extra_tables
659 
660         # Ordering uses the 'rhs' ordering, unless it has none, in which case
661         # the current ordering is used.
662         self.order_by = rhs.order_by or self.order_by
663         self.extra_order_by = rhs.extra_order_by or self.extra_order_by
664 
665     def deferred_to_data(self, target, callback):
666         """
667         Convert the self.deferred_loading data structure to an alternate data
668         structure, describing the field that *will* be loaded. This is used to
669         compute the columns to select from the database and also by the
670         QuerySet class to work out which fields are being initialized on each
671         model. Models that have all their fields included aren't mentioned in
672         the result, only those that have field restrictions in place.
673 
674         The "target" parameter is the instance that is populated (in place).
675         The "callback" is a function that is called whenever a (model, field)
676         pair need to be added to "target". It accepts three parameters:
677         "target", and the model and list of fields being added for that model.
678         """
679         field_names, defer = self.deferred_loading
680         if not field_names:
681             return
682         orig_opts = self.get_meta()
683         seen = {}
684         must_include = {orig_opts.concrete_model: {orig_opts.pk}}
685         for field_name in field_names:
686             parts = field_name.split(LOOKUP_SEP)
687             cur_model = self.model._meta.concrete_model
688             opts = orig_opts
689             for name in parts[:-1]:
690                 old_model = cur_model
691                 if name in self._filtered_relations:
692                     name = self._filtered_relations[name].relation_name
693                 source = opts.get_field(name)
694                 if is_reverse_o2o(source):
695                     cur_model = source.related_model
696                 else:
697                     cur_model = source.remote_field.model
698                 opts = cur_model._meta
699                 # Even if we're "just passing through" this model, we must add
700                 # both the current model's pk and the related reference field
701                 # (if it's not a reverse relation) to the things we select.
702                 if not is_reverse_o2o(source):
703                     must_include[old_model].add(source)
704                 add_to_dict(must_include, cur_model, opts.pk)
705             field = opts.get_field(parts[-1])
706             is_reverse_object = field.auto_created and not field.concrete
707             model = field.related_model if is_reverse_object else field.model
708             model = model._meta.concrete_model
709             if model == opts.model:
710                 model = cur_model
711             if not is_reverse_o2o(field):
712                 add_to_dict(seen, model, field)
713 
714         if defer:
715             # We need to load all fields for each model, except those that
716             # appear in "seen" (for all models that appear in "seen"). The only
717             # slight complexity here is handling fields that exist on parent
718             # models.
719             workset = {}
720             for model, values in seen.items():
721                 for field in model._meta.local_fields:
722                     if field not in values:
723                         m = field.model._meta.concrete_model
724                         add_to_dict(workset, m, field)
725             for model, values in must_include.items():
726                 # If we haven't included a model in workset, we don't add the
727                 # corresponding must_include fields for that model, since an
728                 # empty set means "include all fields". That's why there's no
729                 # "else" branch here.
730                 if model in workset:
731                     workset[model].update(values)
732             for model, values in workset.items():
733                 callback(target, model, values)
734         else:
735             for model, values in must_include.items():
736                 if model in seen:
737                     seen[model].update(values)
738                 else:
739                     # As we've passed through this model, but not explicitly
740                     # included any fields, we have to make sure it's mentioned
741                     # so that only the "must include" fields are pulled in.
742                     seen[model] = values
743             # Now ensure that every model in the inheritance chain is mentioned
744             # in the parent list. Again, it must be mentioned to ensure that
745             # only "must include" fields are pulled in.
746             for model in orig_opts.get_parent_list():
747                 seen.setdefault(model, set())
748             for model, values in seen.items():
749                 callback(target, model, values)
750 
751     def table_alias(self, table_name, create=False, filtered_relation=None):
752         """
753         Return a table alias for the given table_name and whether this is a
754         new alias or not.
755 
756         If 'create' is true, a new alias is always created. Otherwise, the
757         most recently created alias for the table (if one exists) is reused.
758         """
759         alias_list = self.table_map.get(table_name)
760         if not create and alias_list:
761             alias = alias_list[0]
762             self.alias_refcount[alias] += 1
763             return alias, False
764 
765         # Create a new alias for this table.
766         if alias_list:
767             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
768             alias_list.append(alias)
769         else:
770             # The first occurrence of a table uses the table name directly.
771             alias = filtered_relation.alias if filtered_relation is not None else table_name
772             self.table_map[table_name] = [alias]
773         self.alias_refcount[alias] = 1
774         return alias, True
775 
776     def ref_alias(self, alias):
777         """Increases the reference count for this alias."""
778         self.alias_refcount[alias] += 1
779 
780     def unref_alias(self, alias, amount=1):
781         """Decreases the reference count for this alias."""
782         self.alias_refcount[alias] -= amount
783 
784     def promote_joins(self, aliases):
785         """
786         Promote recursively the join type of given aliases and its children to
787         an outer join. If 'unconditional' is False, only promote the join if
788         it is nullable or the parent join is an outer join.
789 
790         The children promotion is done to avoid join chains that contain a LOUTER
791         b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,
792         then we must also promote b->c automatically, or otherwise the promotion
793         of a->b doesn't actually change anything in the query results.
794         """
795         aliases = list(aliases)
796         while aliases:
797             alias = aliases.pop(0)
798             if self.alias_map[alias].join_type is None:
799                 # This is the base table (first FROM entry) - this table
800                 # isn't really joined at all in the query, so we should not
801                 # alter its join type.
802                 continue
803             # Only the first alias (skipped above) should have None join_type
804             assert self.alias_map[alias].join_type is not None
805             parent_alias = self.alias_map[alias].parent_alias
806             parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER
807             already_louter = self.alias_map[alias].join_type == LOUTER
808             if ((self.alias_map[alias].nullable or parent_louter) and
809                     not already_louter):
810                 self.alias_map[alias] = self.alias_map[alias].promote()
811                 # Join type of 'alias' changed, so re-examine all aliases that
812                 # refer to this one.
813                 aliases.extend(
814                     join for join in self.alias_map
815                     if self.alias_map[join].parent_alias == alias and join not in aliases
816                 )
817 
818     def demote_joins(self, aliases):
819         """
820         Change join type from LOUTER to INNER for all joins in aliases.
821 
822         Similarly to promote_joins(), this method must ensure no join chains
823         containing first an outer, then an inner join are generated. If we
824         are demoting b->c join in chain a LOUTER b LOUTER c then we must
825         demote a->b automatically, or otherwise the demotion of b->c doesn't
826         actually change anything in the query results. .
827         """
828         aliases = list(aliases)
829         while aliases:
830             alias = aliases.pop(0)
831             if self.alias_map[alias].join_type == LOUTER:
832                 self.alias_map[alias] = self.alias_map[alias].demote()
833                 parent_alias = self.alias_map[alias].parent_alias
834                 if self.alias_map[parent_alias].join_type == INNER:
835                     aliases.append(parent_alias)
836 
837     def reset_refcounts(self, to_counts):
838         """
839         Reset reference counts for aliases so that they match the value passed
840         in `to_counts`.
841         """
842         for alias, cur_refcount in self.alias_refcount.copy().items():
843             unref_amount = cur_refcount - to_counts.get(alias, 0)
844             self.unref_alias(alias, unref_amount)
845 
846     def change_aliases(self, change_map):
847         """
848         Change the aliases in change_map (which maps old-alias -> new-alias),
849         relabelling any references to them in select columns and the where
850         clause.
851         """
852         assert set(change_map).isdisjoint(change_map.values())
853 
854         # 1. Update references in "select" (normal columns plus aliases),
855         # "group by" and "where".
856         self.where.relabel_aliases(change_map)
857         if isinstance(self.group_by, tuple):
858             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])
859         self.select = tuple([col.relabeled_clone(change_map) for col in self.select])
860         self.annotations = self.annotations and {
861             key: col.relabeled_clone(change_map) for key, col in self.annotations.items()
862         }
863 
864         # 2. Rename the alias in the internal table/alias datastructures.
865         for old_alias, new_alias in change_map.items():
866             if old_alias not in self.alias_map:
867                 continue
868             alias_data = self.alias_map[old_alias].relabeled_clone(change_map)
869             self.alias_map[new_alias] = alias_data
870             self.alias_refcount[new_alias] = self.alias_refcount[old_alias]
871             del self.alias_refcount[old_alias]
872             del self.alias_map[old_alias]
873 
874             table_aliases = self.table_map[alias_data.table_name]
875             for pos, alias in enumerate(table_aliases):
876                 if alias == old_alias:
877                     table_aliases[pos] = new_alias
878                     break
879         self.external_aliases = {
880             # Table is aliased or it's being changed and thus is aliased.
881             change_map.get(alias, alias): (aliased or alias in change_map)
882             for alias, aliased in self.external_aliases.items()
883         }
884 
885     def bump_prefix(self, outer_query):
886         """
887         Change the alias prefix to the next letter in the alphabet in a way
888         that the outer query's aliases and this query's aliases will not
889         conflict. Even tables that previously had no alias will get an alias
890         after this call.
891         """
892         def prefix_gen():
893             """
894             Generate a sequence of characters in alphabetical order:
895                 -> 'A', 'B', 'C', ...
896 
897             When the alphabet is finished, the sequence will continue with the
898             Cartesian product:
899                 -> 'AA', 'AB', 'AC', ...
900             """
901             alphabet = ascii_uppercase
902             prefix = chr(ord(self.alias_prefix) + 1)
903             yield prefix
904             for n in count(1):
905                 seq = alphabet[alphabet.index(prefix):] if prefix else alphabet
906                 for s in product(seq, repeat=n):
907                     yield ''.join(s)
908                 prefix = None
909 
910         if self.alias_prefix != outer_query.alias_prefix:
911             # No clashes between self and outer query should be possible.
912             return
913 
914         # Explicitly avoid infinite loop. The constant divider is based on how
915         # much depth recursive subquery references add to the stack. This value
916         # might need to be adjusted when adding or removing function calls from
917         # the code path in charge of performing these operations.
918         local_recursion_limit = sys.getrecursionlimit() // 16
919         for pos, prefix in enumerate(prefix_gen()):
920             if prefix not in self.subq_aliases:
921                 self.alias_prefix = prefix
922                 break
923             if pos > local_recursion_limit:
924                 raise RecursionError(
925                     'Maximum recursion depth exceeded: too many subqueries.'
926                 )
927         self.subq_aliases = self.subq_aliases.union([self.alias_prefix])
928         outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)
929         self.change_aliases({
930             alias: '%s%d' % (self.alias_prefix, pos)
931             for pos, alias in enumerate(self.alias_map)
932         })
933 
934     def get_initial_alias(self):
935         """
936         Return the first alias for this query, after increasing its reference
937         count.
938         """
939         if self.alias_map:
940             alias = self.base_table
941             self.ref_alias(alias)
942         else:
943             alias = self.join(BaseTable(self.get_meta().db_table, None))
944         return alias
945 
946     def count_active_tables(self):
947         """
948         Return the number of tables in this query with a non-zero reference
949         count. After execution, the reference counts are zeroed, so tables
950         added in compiler will not be seen by this method.
951         """
952         return len([1 for count in self.alias_refcount.values() if count])
953 
954     def join(self, join, reuse=None, reuse_with_filtered_relation=False):
955         """
956         Return an alias for the 'join', either reusing an existing alias for
957         that join or creating a new one. 'join' is either a
958         sql.datastructures.BaseTable or Join.
959 
960         The 'reuse' parameter can be either None which means all joins are
961         reusable, or it can be a set containing the aliases that can be reused.
962 
963         The 'reuse_with_filtered_relation' parameter is used when computing
964         FilteredRelation instances.
965 
966         A join is always created as LOUTER if the lhs alias is LOUTER to make
967         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new
968         joins are created as LOUTER if the join is nullable.
969         """
970         if reuse_with_filtered_relation and reuse:
971             reuse_aliases = [
972                 a for a, j in self.alias_map.items()
973                 if a in reuse and j.equals(join, with_filtered_relation=False)
974             ]
975         else:
976             reuse_aliases = [
977                 a for a, j in self.alias_map.items()
978                 if (reuse is None or a in reuse) and j == join
979             ]
980         if reuse_aliases:
981             if join.table_alias in reuse_aliases:
982                 reuse_alias = join.table_alias
983             else:
984                 # Reuse the most recent alias of the joined table
985                 # (a many-to-many relation may be joined multiple times).
986                 reuse_alias = reuse_aliases[-1]
987             self.ref_alias(reuse_alias)
988             return reuse_alias
989 
990         # No reuse is possible, so we need a new alias.
991         alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)
992         if join.join_type:
993             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:
994                 join_type = LOUTER
995             else:
996                 join_type = INNER
997             join.join_type = join_type
998         join.table_alias = alias
999         self.alias_map[alias] = join
1000         return alias
1001 
1002     def join_parent_model(self, opts, model, alias, seen):
1003         """
1004         Make sure the given 'model' is joined in the query. If 'model' isn't
1005         a parent of 'opts' or if it is None this method is a no-op.
1006 
1007         The 'alias' is the root alias for starting the join, 'seen' is a dict
1008         of model -> alias of existing joins. It must also contain a mapping
1009         of None -> some alias. This will be returned in the no-op case.
1010         """
1011         if model in seen:
1012             return seen[model]
1013         chain = opts.get_base_chain(model)
1014         if not chain:
1015             return alias
1016         curr_opts = opts
1017         for int_model in chain:
1018             if int_model in seen:
1019                 curr_opts = int_model._meta
1020                 alias = seen[int_model]
1021                 continue
1022             # Proxy model have elements in base chain
1023             # with no parents, assign the new options
1024             # object and skip to the next base in that
1025             # case
1026             if not curr_opts.parents[int_model]:
1027                 curr_opts = int_model._meta
1028                 continue
1029             link_field = curr_opts.get_ancestor_link(int_model)
1030             join_info = self.setup_joins([link_field.name], curr_opts, alias)
1031             curr_opts = int_model._meta
1032             alias = seen[int_model] = join_info.joins[-1]
1033         return alias or seen[None]
1034 
1035     def add_annotation(self, annotation, alias, is_summary=False, select=True):
1036         """Add a single annotation expression to the Query."""
1037         annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
1038                                                    summarize=is_summary)
1039         if select:
1040             self.append_annotation_mask([alias])
1041         else:
1042             self.set_annotation_mask(set(self.annotation_select).difference({alias}))
1043         self.annotations[alias] = annotation
1044 
1045     def resolve_expression(self, query, *args, **kwargs):
1046         clone = self.clone()
1047         # Subqueries need to use a different set of aliases than the outer query.
1048         clone.bump_prefix(query)
1049         clone.subquery = True
1050         # It's safe to drop ordering if the queryset isn't using slicing,
1051         # distinct(*fields) or select_for_update().
1052         if (self.low_mark == 0 and self.high_mark is None and
1053                 not self.distinct_fields and
1054                 not self.select_for_update):
1055             clone.clear_ordering(True)
1056         clone.where.resolve_expression(query, *args, **kwargs)
1057         for key, value in clone.annotations.items():
1058             resolved = value.resolve_expression(query, *args, **kwargs)
1059             if hasattr(resolved, 'external_aliases'):
1060                 resolved.external_aliases.update(clone.external_aliases)
1061             clone.annotations[key] = resolved
1062         # Outer query's aliases are considered external.
1063         for alias, table in query.alias_map.items():
1064             clone.external_aliases[alias] = (
1065                 (isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias) or
1066                 (isinstance(table, BaseTable) and table.table_name != table.table_alias)
1067             )
1068         return clone
1069 
1070     def get_external_cols(self):
1071         exprs = chain(self.annotations.values(), self.where.children)
1072         return [
1073             col for col in self._gen_cols(exprs)
1074             if col.alias in self.external_aliases
1075         ]
1076 
1077     def as_sql(self, compiler, connection):
1078         sql, params = self.get_compiler(connection=connection).as_sql()
1079         if self.subquery:
1080             sql = '(%s)' % sql
1081         return sql, params
1082 
1083     def resolve_lookup_value(self, value, can_reuse, allow_joins):
1084         if hasattr(value, 'resolve_expression'):
1085             value = value.resolve_expression(
1086                 self, reuse=can_reuse, allow_joins=allow_joins,
1087             )
1088         elif isinstance(value, (list, tuple)):
1089             # The items of the iterable may be expressions and therefore need
1090             # to be resolved independently.
1091             values = (
1092                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
1093                 for sub_value in value
1094             )
1095             type_ = type(value)
1096             if hasattr(type_, '_make'):  # namedtuple
1097                 return type_(*values)
1098             return type_(values)
1099         return value
1100 
1101     def solve_lookup_type(self, lookup):
1102         """
1103         Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').
1104         """
1105         lookup_splitted = lookup.split(LOOKUP_SEP)
1106         if self.annotations:
1107             expression, expression_lookups = refs_expression(lookup_splitted, self.annotations)
1108             if expression:
1109                 return expression_lookups, (), expression
1110         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
1111         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
1112         if len(lookup_parts) > 1 and not field_parts:
1113             raise FieldError(
1114                 'Invalid lookup "%s" for model %s".' %
1115                 (lookup, self.get_meta().model.__name__)
1116             )
1117         return lookup_parts, field_parts, False
1118 
1119     def check_query_object_type(self, value, opts, field):
1120         """
1121         Check whether the object passed while querying is of the correct type.
1122         If not, raise a ValueError specifying the wrong object.
1123         """
1124         if hasattr(value, '_meta'):
1125             if not check_rel_lookup_compatibility(value._meta.model, opts, field):
1126                 raise ValueError(
1127                     'Cannot query "%s": Must be "%s" instance.' %
1128                     (value, opts.object_name))
1129 
1130     def check_related_objects(self, field, value, opts):
1131         """Check the type of object passed to query relations."""
1132         if field.is_relation:
1133             # Check that the field and the queryset use the same model in a
1134             # query like .filter(author=Author.objects.all()). For example, the
1135             # opts would be Author's (from the author field) and value.model
1136             # would be Author.objects.all() queryset's .model (Author also).
1137             # The field is the related field on the lhs side.
1138             if (isinstance(value, Query) and not value.has_select_fields and
1139                     not check_rel_lookup_compatibility(value.model, opts, field)):
1140                 raise ValueError(
1141                     'Cannot use QuerySet for "%s": Use a QuerySet for "%s".' %
1142                     (value.model._meta.object_name, opts.object_name)
1143                 )
1144             elif hasattr(value, '_meta'):
1145                 self.check_query_object_type(value, opts, field)
1146             elif hasattr(value, '__iter__'):
1147                 for v in value:
1148                     self.check_query_object_type(v, opts, field)
1149 
1150     def check_filterable(self, expression):
1151         """Raise an error if expression cannot be used in a WHERE clause."""
1152         if (
1153             hasattr(expression, 'resolve_expression') and
1154             not getattr(expression, 'filterable', True)
1155         ):
1156             raise NotSupportedError(
1157                 expression.__class__.__name__ + ' is disallowed in the filter '
1158                 'clause.'
1159             )
1160         if hasattr(expression, 'get_source_expressions'):
1161             for expr in expression.get_source_expressions():
1162                 self.check_filterable(expr)
1163 
1164     def build_lookup(self, lookups, lhs, rhs):
1165         """
1166         Try to extract transforms and lookup from given lhs.
1167 
1168         The lhs value is something that works like SQLExpression.
1169         The rhs value is what the lookup is going to compare against.
1170         The lookups is a list of names to extract using get_lookup()
1171         and get_transform().
1172         """
1173         # __exact is the default lookup if one isn't given.
1174         *transforms, lookup_name = lookups or ['exact']
1175         for name in transforms:
1176             lhs = self.try_transform(lhs, name)
1177         # First try get_lookup() so that the lookup takes precedence if the lhs
1178         # supports both transform and lookup for the name.
1179         lookup_class = lhs.get_lookup(lookup_name)
1180         if not lookup_class:
1181             if lhs.field.is_relation:
1182                 raise FieldError('Related Field got invalid lookup: {}'.format(lookup_name))
1183             # A lookup wasn't found. Try to interpret the name as a transform
1184             # and do an Exact lookup against it.
1185             lhs = self.try_transform(lhs, lookup_name)
1186             lookup_name = 'exact'
1187             lookup_class = lhs.get_lookup(lookup_name)
1188             if not lookup_class:
1189                 return
1190 
1191         lookup = lookup_class(lhs, rhs)
1192         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all
1193         # uses of None as a query value unless the lookup supports it.
1194         if lookup.rhs is None and not lookup.can_use_none_as_rhs:
1195             if lookup_name not in ('exact', 'iexact'):
1196                 raise ValueError("Cannot use None as a query value")
1197             return lhs.get_lookup('isnull')(lhs, True)
1198 
1199         # For Oracle '' is equivalent to null. The check must be done at this
1200         # stage because join promotion can't be done in the compiler. Using
1201         # DEFAULT_DB_ALIAS isn't nice but it's the best that can be done here.
1202         # A similar thing is done in is_nullable(), too.
1203         if (connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
1204                 lookup_name == 'exact' and lookup.rhs == ''):
1205             return lhs.get_lookup('isnull')(lhs, True)
1206 
1207         return lookup
1208 
1209     def try_transform(self, lhs, name):
1210         """
1211         Helper method for build_lookup(). Try to fetch and initialize
1212         a transform for name parameter from lhs.
1213         """
1214         transform_class = lhs.get_transform(name)
1215         if transform_class:
1216             return transform_class(lhs)
1217         else:
1218             output_field = lhs.output_field.__class__
1219             suggested_lookups = difflib.get_close_matches(name, output_field.get_lookups())
1220             if suggested_lookups:
1221                 suggestion = ', perhaps you meant %s?' % ' or '.join(suggested_lookups)
1222             else:
1223                 suggestion = '.'
1224             raise FieldError(
1225                 "Unsupported lookup '%s' for %s or join on the field not "
1226                 "permitted%s" % (name, output_field.__name__, suggestion)
1227             )
1228 
1229     def build_filter(self, filter_expr, branch_negated=False, current_negated=False,
1230                      can_reuse=None, allow_joins=True, split_subq=True,
1231                      reuse_with_filtered_relation=False, check_filterable=True):
1232         """
1233         Build a WhereNode for a single filter clause but don't add it
1234         to this Query. Query.add_q() will then add this filter to the where
1235         Node.
1236 
1237         The 'branch_negated' tells us if the current branch contains any
1238         negations. This will be used to determine if subqueries are needed.
1239 
1240         The 'current_negated' is used to determine if the current filter is
1241         negated or not and this will be used to determine if IS NULL filtering
1242         is needed.
1243 
1244         The difference between current_negated and branch_negated is that
1245         branch_negated is set on first negation, but current_negated is
1246         flipped for each negation.
1247 
1248         Note that add_filter will not do any negating itself, that is done
1249         upper in the code by add_q().
1250 
1251         The 'can_reuse' is a set of reusable joins for multijoins.
1252 
1253         If 'reuse_with_filtered_relation' is True, then only joins in can_reuse
1254         will be reused.
1255 
1256         The method will create a filter clause that can be added to the current
1257         query. However, if the filter isn't added to the query then the caller
1258         is responsible for unreffing the joins used.
1259         """
1260         if isinstance(filter_expr, dict):
1261             raise FieldError("Cannot parse keyword query as dict")
1262         if isinstance(filter_expr, Q):
1263             return self._add_q(
1264                 filter_expr,
1265                 branch_negated=branch_negated,
1266                 current_negated=current_negated,
1267                 used_aliases=can_reuse,
1268                 allow_joins=allow_joins,
1269                 split_subq=split_subq,
1270                 check_filterable=check_filterable,
1271             )
1272         if hasattr(filter_expr, 'resolve_expression'):
1273             if not getattr(filter_expr, 'conditional', False):
1274                 raise TypeError('Cannot filter against a non-conditional expression.')
1275             condition = self.build_lookup(
1276                 ['exact'], filter_expr.resolve_expression(self, allow_joins=allow_joins), True
1277             )
1278             clause = self.where_class()
1279             clause.add(condition, AND)
1280             return clause, []
1281         arg, value = filter_expr
1282         if not arg:
1283             raise FieldError("Cannot parse keyword query %r" % arg)
1284         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
1285 
1286         if check_filterable:
1287             self.check_filterable(reffed_expression)
1288 
1289         if not allow_joins and len(parts) > 1:
1290             raise FieldError("Joined field references are not permitted in this query")
1291 
1292         pre_joins = self.alias_refcount.copy()
1293         value = self.resolve_lookup_value(value, can_reuse, allow_joins)
1294         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}
1295 
1296         if check_filterable:
1297             self.check_filterable(value)
1298 
1299         clause = self.where_class()
1300         if reffed_expression:
1301             condition = self.build_lookup(lookups, reffed_expression, value)
1302             clause.add(condition, AND)
1303             return clause, []
1304 
1305         opts = self.get_meta()
1306         alias = self.get_initial_alias()
1307         allow_many = not branch_negated or not split_subq
1308 
1309         try:
1310             join_info = self.setup_joins(
1311                 parts, opts, alias, can_reuse=can_reuse, allow_many=allow_many,
1312                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1313             )
1314 
1315             # Prevent iterator from being consumed by check_related_objects()
1316             if isinstance(value, Iterator):
1317                 value = list(value)
1318             self.check_related_objects(join_info.final_field, value, join_info.opts)
1319 
1320             # split_exclude() needs to know which joins were generated for the
1321             # lookup parts
1322             self._lookup_joins = join_info.joins
1323         except MultiJoin as e:
1324             return self.split_exclude(filter_expr, can_reuse, e.names_with_path)
1325 
1326         # Update used_joins before trimming since they are reused to determine
1327         # which joins could be later promoted to INNER.
1328         used_joins.update(join_info.joins)
1329         targets, alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1330         if can_reuse is not None:
1331             can_reuse.update(join_list)
1332 
1333         if join_info.final_field.is_relation:
1334             # No support for transforms for relational fields
1335             num_lookups = len(lookups)
1336             if num_lookups > 1:
1337                 raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))
1338             if len(targets) == 1:
1339                 col = self._get_col(targets[0], join_info.final_field, alias)
1340             else:
1341                 col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)
1342         else:
1343             col = self._get_col(targets[0], join_info.final_field, alias)
1344 
1345         condition = self.build_lookup(lookups, col, value)
1346         lookup_type = condition.lookup_name
1347         clause.add(condition, AND)
1348 
1349         require_outer = lookup_type == 'isnull' and condition.rhs is True and not current_negated
1350         if current_negated and (lookup_type != 'isnull' or condition.rhs is False) and condition.rhs is not None:
1351             require_outer = True
1352             if lookup_type != 'isnull':
1353                 # The condition added here will be SQL like this:
1354                 # NOT (col IS NOT NULL), where the first NOT is added in
1355                 # upper layers of code. The reason for addition is that if col
1356                 # is null, then col != someval will result in SQL "unknown"
1357                 # which isn't the same as in Python. The Python None handling
1358                 # is wanted, and it can be gotten by
1359                 # (col IS NULL OR col != someval)
1360                 #   <=>
1361                 # NOT (col IS NOT NULL AND col = someval).
1362                 if (
1363                     self.is_nullable(targets[0]) or
1364                     self.alias_map[join_list[-1]].join_type == LOUTER
1365                 ):
1366                     lookup_class = targets[0].get_lookup('isnull')
1367                     col = self._get_col(targets[0], join_info.targets[0], alias)
1368                     clause.add(lookup_class(col, False), AND)
1369                 # If someval is a nullable column, someval IS NOT NULL is
1370                 # added.
1371                 if isinstance(value, Col) and self.is_nullable(value.target):
1372                     lookup_class = value.target.get_lookup('isnull')
1373                     clause.add(lookup_class(value, False), AND)
1374         return clause, used_joins if not require_outer else ()
1375 
1376     def add_filter(self, filter_clause):
1377         self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))
1378 
1379     def add_q(self, q_object):
1380         """
1381         A preprocessor for the internal _add_q(). Responsible for doing final
1382         join promotion.
1383         """
1384         # For join promotion this case is doing an AND for the added q_object
1385         # and existing conditions. So, any existing inner join forces the join
1386         # type to remain inner. Existing outer joins can however be demoted.
1387         # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if
1388         # rel_a doesn't produce any rows, then the whole condition must fail.
1389         # So, demotion is OK.
1390         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}
1391         clause, _ = self._add_q(q_object, self.used_aliases)
1392         if clause:
1393             self.where.add(clause, AND)
1394         self.demote_joins(existing_inner)
1395 
1396     def build_where(self, filter_expr):
1397         return self.build_filter(filter_expr, allow_joins=False)[0]
1398 
1399     def _add_q(self, q_object, used_aliases, branch_negated=False,
1400                current_negated=False, allow_joins=True, split_subq=True,
1401                check_filterable=True):
1402         """Add a Q-object to the current filter."""
1403         connector = q_object.connector
1404         current_negated = current_negated ^ q_object.negated
1405         branch_negated = branch_negated or q_object.negated
1406         target_clause = self.where_class(connector=connector,
1407                                          negated=q_object.negated)
1408         joinpromoter = JoinPromoter(q_object.connector, len(q_object.children), current_negated)
1409         for child in q_object.children:
1410             child_clause, needed_inner = self.build_filter(
1411                 child, can_reuse=used_aliases, branch_negated=branch_negated,
1412                 current_negated=current_negated, allow_joins=allow_joins,
1413                 split_subq=split_subq, check_filterable=check_filterable,
1414             )
1415             joinpromoter.add_votes(needed_inner)
1416             if child_clause:
1417                 target_clause.add(child_clause, connector)
1418         needed_inner = joinpromoter.update_join_types(self)
1419         return target_clause, needed_inner
1420 
1421     def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
1422         """Add a FilteredRelation object to the current filter."""
1423         connector = q_object.connector
1424         current_negated ^= q_object.negated
1425         branch_negated = branch_negated or q_object.negated
1426         target_clause = self.where_class(connector=connector, negated=q_object.negated)
1427         for child in q_object.children:
1428             if isinstance(child, Node):
1429                 child_clause = self.build_filtered_relation_q(
1430                     child, reuse=reuse, branch_negated=branch_negated,
1431                     current_negated=current_negated,
1432                 )
1433             else:
1434                 child_clause, _ = self.build_filter(
1435                     child, can_reuse=reuse, branch_negated=branch_negated,
1436                     current_negated=current_negated,
1437                     allow_joins=True, split_subq=False,
1438                     reuse_with_filtered_relation=True,
1439                 )
1440             target_clause.add(child_clause, connector)
1441         return target_clause
1442 
1443     def add_filtered_relation(self, filtered_relation, alias):
1444         filtered_relation.alias = alias
1445         lookups = dict(get_children_from_q(filtered_relation.condition))
1446         relation_lookup_parts, relation_field_parts, _ = self.solve_lookup_type(filtered_relation.relation_name)
1447         if relation_lookup_parts:
1448             raise ValueError(
1449                 "FilteredRelation's relation_name cannot contain lookups "
1450                 "(got %r)." % filtered_relation.relation_name
1451             )
1452         for lookup in chain(lookups):
1453             lookup_parts, lookup_field_parts, _ = self.solve_lookup_type(lookup)
1454             shift = 2 if not lookup_parts else 1
1455             lookup_field_path = lookup_field_parts[:-shift]
1456             for idx, lookup_field_part in enumerate(lookup_field_path):
1457                 if len(relation_field_parts) > idx:
1458                     if relation_field_parts[idx] != lookup_field_part:
1459                         raise ValueError(
1460                             "FilteredRelation's condition doesn't support "
1461                             "relations outside the %r (got %r)."
1462                             % (filtered_relation.relation_name, lookup)
1463                         )
1464                 else:
1465                     raise ValueError(
1466                         "FilteredRelation's condition doesn't support nested "
1467                         "relations deeper than the relation_name (got %r for "
1468                         "%r)." % (lookup, filtered_relation.relation_name)
1469                     )
1470         self._filtered_relations[filtered_relation.alias] = filtered_relation
1471 
1472     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
1473         """
1474         Walk the list of names and turns them into PathInfo tuples. A single
1475         name in 'names' can generate multiple PathInfos (m2m, for example).
1476 
1477         'names' is the path of names to travel, 'opts' is the model Options we
1478         start the name resolving from, 'allow_many' is as for setup_joins().
1479         If fail_on_missing is set to True, then a name that can't be resolved
1480         will generate a FieldError.
1481 
1482         Return a list of PathInfo tuples. In addition return the final field
1483         (the last used join field) and target (which is a field guaranteed to
1484         contain the same value as the final field). Finally, return those names
1485         that weren't found (which are likely transforms and the final lookup).
1486         """
1487         path, names_with_path = [], []
1488         for pos, name in enumerate(names):
1489             cur_names_with_path = (name, [])
1490             if name == 'pk':
1491                 name = opts.pk.name
1492 
1493             field = None
1494             filtered_relation = None
1495             try:
1496                 field = opts.get_field(name)
1497             except FieldDoesNotExist:
1498                 if name in self.annotation_select:
1499                     field = self.annotation_select[name].output_field
1500                 elif name in self._filtered_relations and pos == 0:
1501                     filtered_relation = self._filtered_relations[name]
1502                     if LOOKUP_SEP in filtered_relation.relation_name:
1503                         parts = filtered_relation.relation_name.split(LOOKUP_SEP)
1504                         filtered_relation_path, field, _, _ = self.names_to_path(
1505                             parts, opts, allow_many, fail_on_missing,
1506                         )
1507                         path.extend(filtered_relation_path[:-1])
1508                     else:
1509                         field = opts.get_field(filtered_relation.relation_name)
1510             if field is not None:
1511                 # Fields that contain one-to-many relations with a generic
1512                 # model (like a GenericForeignKey) cannot generate reverse
1513                 # relations and therefore cannot be used for reverse querying.
1514                 if field.is_relation and not field.related_model:
1515                     raise FieldError(
1516                         "Field %r does not generate an automatic reverse "
1517                         "relation and therefore cannot be used for reverse "
1518                         "querying. If it is a GenericForeignKey, consider "
1519                         "adding a GenericRelation." % name
1520                     )
1521                 try:
1522                     model = field.model._meta.concrete_model
1523                 except AttributeError:
1524                     # QuerySet.annotate() may introduce fields that aren't
1525                     # attached to a model.
1526                     model = None
1527             else:
1528                 # We didn't find the current field, so move position back
1529                 # one step.
1530                 pos -= 1
1531                 if pos == -1 or fail_on_missing:
1532                     available = sorted([
1533                         *get_field_names_from_opts(opts),
1534                         *self.annotation_select,
1535                         *self._filtered_relations,
1536                     ])
1537                     raise FieldError("Cannot resolve keyword '%s' into field. "
1538                                      "Choices are: %s" % (name, ", ".join(available)))
1539                 break
1540             # Check if we need any joins for concrete inheritance cases (the
1541             # field lives in parent, but we are currently in one of its
1542             # children)
1543             if model is not opts.model:
1544                 path_to_parent = opts.get_path_to_parent(model)
1545                 if path_to_parent:
1546                     path.extend(path_to_parent)
1547                     cur_names_with_path[1].extend(path_to_parent)
1548                     opts = path_to_parent[-1].to_opts
1549             if hasattr(field, 'get_path_info'):
1550                 pathinfos = field.get_path_info(filtered_relation)
1551                 if not allow_many:
1552                     for inner_pos, p in enumerate(pathinfos):
1553                         if p.m2m:
1554                             cur_names_with_path[1].extend(pathinfos[0:inner_pos + 1])
1555                             names_with_path.append(cur_names_with_path)
1556                             raise MultiJoin(pos + 1, names_with_path)
1557                 last = pathinfos[-1]
1558                 path.extend(pathinfos)
1559                 final_field = last.join_field
1560                 opts = last.to_opts
1561                 targets = last.target_fields
1562                 cur_names_with_path[1].extend(pathinfos)
1563                 names_with_path.append(cur_names_with_path)
1564             else:
1565                 # Local non-relational field.
1566                 final_field = field
1567                 targets = (field,)
1568                 if fail_on_missing and pos + 1 != len(names):
1569                     raise FieldError(
1570                         "Cannot resolve keyword %r into field. Join on '%s'"
1571                         " not permitted." % (names[pos + 1], name))
1572                 break
1573         return path, final_field, targets, names[pos + 1:]
1574 
1575     def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True,
1576                     reuse_with_filtered_relation=False):
1577         """
1578         Compute the necessary table joins for the passage through the fields
1579         given in 'names'. 'opts' is the Options class for the current model
1580         (which gives the table we are starting from), 'alias' is the alias for
1581         the table to start the joining from.
1582 
1583         The 'can_reuse' defines the reverse foreign key joins we can reuse. It
1584         can be None in which case all joins are reusable or a set of aliases
1585         that can be reused. Note that non-reverse foreign keys are always
1586         reusable when using setup_joins().
1587 
1588         The 'reuse_with_filtered_relation' can be used to force 'can_reuse'
1589         parameter and force the relation on the given connections.
1590 
1591         If 'allow_many' is False, then any reverse foreign key seen will
1592         generate a MultiJoin exception.
1593 
1594         Return the final field involved in the joins, the target field (used
1595         for any 'where' constraint), the final 'opts' value, the joins, the
1596         field path traveled to generate the joins, and a transform function
1597         that takes a field and alias and is equivalent to `field.get_col(alias)`
1598         in the simple case but wraps field transforms if they were included in
1599         names.
1600 
1601         The target field is the field containing the concrete value. Final
1602         field can be something different, for example foreign key pointing to
1603         that value. Final field is needed for example in some value
1604         conversions (convert 'obj' in fk__id=obj to pk val using the foreign
1605         key field for example).
1606         """
1607         joins = [alias]
1608         # The transform can't be applied yet, as joins must be trimmed later.
1609         # To avoid making every caller of this method look up transforms
1610         # directly, compute transforms here and create a partial that converts
1611         # fields to the appropriate wrapped version.
1612 
1613         def final_transformer(field, alias):
1614             return field.get_col(alias)
1615 
1616         # Try resolving all the names as fields first. If there's an error,
1617         # treat trailing names as lookups until a field can be resolved.
1618         last_field_exception = None
1619         for pivot in range(len(names), 0, -1):
1620             try:
1621                 path, final_field, targets, rest = self.names_to_path(
1622                     names[:pivot], opts, allow_many, fail_on_missing=True,
1623                 )
1624             except FieldError as exc:
1625                 if pivot == 1:
1626                     # The first item cannot be a lookup, so it's safe
1627                     # to raise the field error here.
1628                     raise
1629                 else:
1630                     last_field_exception = exc
1631             else:
1632                 # The transforms are the remaining items that couldn't be
1633                 # resolved into fields.
1634                 transforms = names[pivot:]
1635                 break
1636         for name in transforms:
1637             def transform(field, alias, *, name, previous):
1638                 try:
1639                     wrapped = previous(field, alias)
1640                     return self.try_transform(wrapped, name)
1641                 except FieldError:
1642                     # FieldError is raised if the transform doesn't exist.
1643                     if isinstance(final_field, Field) and last_field_exception:
1644                         raise last_field_exception
1645                     else:
1646                         raise
1647             final_transformer = functools.partial(transform, name=name, previous=final_transformer)
1648         # Then, add the path to the query's joins. Note that we can't trim
1649         # joins at this stage - we will need the information about join type
1650         # of the trimmed joins.
1651         for join in path:
1652             if join.filtered_relation:
1653                 filtered_relation = join.filtered_relation.clone()
1654                 table_alias = filtered_relation.alias
1655             else:
1656                 filtered_relation = None
1657                 table_alias = None
1658             opts = join.to_opts
1659             if join.direct:
1660                 nullable = self.is_nullable(join.join_field)
1661             else:
1662                 nullable = True
1663             connection = Join(
1664                 opts.db_table, alias, table_alias, INNER, join.join_field,
1665                 nullable, filtered_relation=filtered_relation,
1666             )
1667             reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None
1668             alias = self.join(
1669                 connection, reuse=reuse,
1670                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1671             )
1672             joins.append(alias)
1673             if filtered_relation:
1674                 filtered_relation.path = joins[:]
1675         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)
1676 
1677     def trim_joins(self, targets, joins, path):
1678         """
1679         The 'target' parameter is the final field being joined to, 'joins'
1680         is the full list of join aliases. The 'path' contain the PathInfos
1681         used to create the joins.
1682 
1683         Return the final target field and table alias and the new active
1684         joins.
1685 
1686         Always trim any direct join if the target column is already in the
1687         previous table. Can't trim reverse joins as it's unknown if there's
1688         anything on the other side of the join.
1689         """
1690         joins = joins[:]
1691         for pos, info in enumerate(reversed(path)):
1692             if len(joins) == 1 or not info.direct:
1693                 break
1694             if info.filtered_relation:
1695                 break
1696             join_targets = {t.column for t in info.join_field.foreign_related_fields}
1697             cur_targets = {t.column for t in targets}
1698             if not cur_targets.issubset(join_targets):
1699                 break
1700             targets_dict = {r[1].column: r[0] for r in info.join_field.related_fields if r[1].column in cur_targets}
1701             targets = tuple(targets_dict[t.column] for t in targets)
1702             self.unref_alias(joins.pop())
1703         return targets, joins[-1], joins
1704 
1705     @classmethod
1706     def _gen_cols(cls, exprs):
1707         for expr in exprs:
1708             if isinstance(expr, Col):
1709                 yield expr
1710             else:
1711                 yield from cls._gen_cols(expr.get_source_expressions())
1712 
1713     @classmethod
1714     def _gen_col_aliases(cls, exprs):
1715         yield from (expr.alias for expr in cls._gen_cols(exprs))
1716 
1717     def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False):
1718         if not allow_joins and LOOKUP_SEP in name:
1719             raise FieldError("Joined field references are not permitted in this query")
1720         annotation = self.annotations.get(name)
1721         if annotation is not None:
1722             if not allow_joins:
1723                 for alias in self._gen_col_aliases([annotation]):
1724                     if isinstance(self.alias_map[alias], Join):
1725                         raise FieldError(
1726                             'Joined field references are not permitted in '
1727                             'this query'
1728                         )
1729             if summarize:
1730                 # Summarize currently means we are doing an aggregate() query
1731                 # which is executed as a wrapped subquery if any of the
1732                 # aggregate() elements reference an existing annotation. In
1733                 # that case we need to return a Ref to the subquery's annotation.
1734                 if name not in self.annotation_select:
1735                     raise FieldError(
1736                         "Cannot aggregate over the '%s' alias. Use annotate() "
1737                         "to promote it." % name
1738                     )
1739                 return Ref(name, self.annotation_select[name])
1740             else:
1741                 return annotation
1742         else:
1743             field_list = name.split(LOOKUP_SEP)
1744             join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)
1745             targets, final_alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1746             if not allow_joins and len(join_list) > 1:
1747                 raise FieldError('Joined field references are not permitted in this query')
1748             if len(targets) > 1:
1749                 raise FieldError("Referencing multicolumn fields with F() objects "
1750                                  "isn't supported")
1751             # Verify that the last lookup in name is a field or a transform:
1752             # transform_function() raises FieldError if not.
1753             join_info.transform_function(targets[0], final_alias)
1754             if reuse is not None:
1755                 reuse.update(join_list)
1756             return self._get_col(targets[0], join_info.targets[0], join_list[-1])
1757 
1758     def split_exclude(self, filter_expr, can_reuse, names_with_path):
1759         """
1760         When doing an exclude against any kind of N-to-many relation, we need
1761         to use a subquery. This method constructs the nested query, given the
1762         original exclude filter (filter_expr) and the portion up to the first
1763         N-to-many relation field.
1764 
1765         For example, if the origin filter is ~Q(child__name='foo'), filter_expr
1766         is ('child__name', 'foo') and can_reuse is a set of joins usable for
1767         filters in the original query.
1768 
1769         We will turn this into equivalent of:
1770             WHERE NOT EXISTS(
1771                 SELECT 1
1772                 FROM child
1773                 WHERE name = 'foo' AND child.parent_id = parent.id
1774                 LIMIT 1
1775             )
1776         """
1777         filter_lhs, filter_rhs = filter_expr
1778         if isinstance(filter_rhs, OuterRef):
1779             filter_expr = (filter_lhs, OuterRef(filter_rhs))
1780         elif isinstance(filter_rhs, F):
1781             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
1782         # Generate the inner query.
1783         query = Query(self.model)
1784         query._filtered_relations = self._filtered_relations
1785         query.add_filter(filter_expr)
1786         query.clear_ordering(True)
1787         # Try to have as simple as possible subquery -> trim leading joins from
1788         # the subquery.
1789         trimmed_prefix, contains_louter = query.trim_start(names_with_path)
1790 
1791         col = query.select[0]
1792         select_field = col.target
1793         alias = col.alias
1794         if alias in can_reuse:
1795             pk = select_field.model._meta.pk
1796             # Need to add a restriction so that outer query's filters are in effect for
1797             # the subquery, too.
1798             query.bump_prefix(self)
1799             lookup_class = select_field.get_lookup('exact')
1800             # Note that the query.select[0].alias is different from alias
1801             # due to bump_prefix above.
1802             lookup = lookup_class(pk.get_col(query.select[0].alias),
1803                                   pk.get_col(alias))
1804             query.where.add(lookup, AND)
1805             query.external_aliases[alias] = True
1806 
1807         lookup_class = select_field.get_lookup('exact')
1808         lookup = lookup_class(col, ResolvedOuterRef(trimmed_prefix))
1809         query.where.add(lookup, AND)
1810         condition, needed_inner = self.build_filter(Exists(query))
1811 
1812         if contains_louter:
1813             or_null_condition, _ = self.build_filter(
1814                 ('%s__isnull' % trimmed_prefix, True),
1815                 current_negated=True, branch_negated=True, can_reuse=can_reuse)
1816             condition.add(or_null_condition, OR)
1817             # Note that the end result will be:
1818             # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.
1819             # This might look crazy but due to how IN works, this seems to be
1820             # correct. If the IS NOT NULL check is removed then outercol NOT
1821             # IN will return UNKNOWN. If the IS NULL check is removed, then if
1822             # outercol IS NULL we will not match the row.
1823         return condition, needed_inner
1824 
1825     def set_empty(self):
1826         self.where.add(NothingNode(), AND)
1827         for query in self.combined_queries:
1828             query.set_empty()
1829 
1830     def is_empty(self):
1831         return any(isinstance(c, NothingNode) for c in self.where.children)
1832 
1833     def set_limits(self, low=None, high=None):
1834         """
1835         Adjust the limits on the rows retrieved. Use low/high to set these,
1836         as it makes it more Pythonic to read and write. When the SQL query is
1837         created, convert them to the appropriate offset and limit values.
1838 
1839         Apply any limits passed in here to the existing constraints. Add low
1840         to the current low value and clamp both to any existing high value.
1841         """
1842         if high is not None:
1843             if self.high_mark is not None:
1844                 self.high_mark = min(self.high_mark, self.low_mark + high)
1845             else:
1846                 self.high_mark = self.low_mark + high
1847         if low is not None:
1848             if self.high_mark is not None:
1849                 self.low_mark = min(self.high_mark, self.low_mark + low)
1850             else:
1851                 self.low_mark = self.low_mark + low
1852 
1853         if self.low_mark == self.high_mark:
1854             self.set_empty()
1855 
1856     def clear_limits(self):
1857         """Clear any existing limits."""
1858         self.low_mark, self.high_mark = 0, None
1859 
1860     @property
1861     def is_sliced(self):
1862         return self.low_mark != 0 or self.high_mark is not None
1863 
1864     def has_limit_one(self):
1865         return self.high_mark is not None and (self.high_mark - self.low_mark) == 1
1866 
1867     def can_filter(self):
1868         """
1869         Return True if adding filters to this instance is still possible.
1870 
1871         Typically, this means no limits or offsets have been put on the results.
1872         """
1873         return not self.is_sliced
1874 
1875     def clear_select_clause(self):
1876         """Remove all fields from SELECT clause."""
1877         self.select = ()
1878         self.default_cols = False
1879         self.select_related = False
1880         self.set_extra_mask(())
1881         self.set_annotation_mask(())
1882 
1883     def clear_select_fields(self):
1884         """
1885         Clear the list of fields to select (but not extra_select columns).
1886         Some queryset types completely replace any existing list of select
1887         columns.
1888         """
1889         self.select = ()
1890         self.values_select = ()
1891 
1892     def add_select_col(self, col):
1893         self.select += col,
1894         self.values_select += col.output_field.name,
1895 
1896     def set_select(self, cols):
1897         self.default_cols = False
1898         self.select = tuple(cols)
1899 
1900     def add_distinct_fields(self, *field_names):
1901         """
1902         Add and resolve the given fields to the query's "distinct on" clause.
1903         """
1904         self.distinct_fields = field_names
1905         self.distinct = True
1906 
1907     def add_fields(self, field_names, allow_m2m=True):
1908         """
1909         Add the given (model) fields to the select set. Add the field names in
1910         the order specified.
1911         """
1912         alias = self.get_initial_alias()
1913         opts = self.get_meta()
1914 
1915         try:
1916             cols = []
1917             for name in field_names:
1918                 # Join promotion note - we must not remove any rows here, so
1919                 # if there is no existing joins, use outer join.
1920                 join_info = self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m)
1921                 targets, final_alias, joins = self.trim_joins(
1922                     join_info.targets,
1923                     join_info.joins,
1924                     join_info.path,
1925                 )
1926                 for target in targets:
1927                     cols.append(join_info.transform_function(target, final_alias))
1928             if cols:
1929                 self.set_select(cols)
1930         except MultiJoin:
1931             raise FieldError("Invalid field name: '%s'" % name)
1932         except FieldError:
1933             if LOOKUP_SEP in name:
1934                 # For lookups spanning over relationships, show the error
1935                 # from the model on which the lookup failed.
1936                 raise
1937             elif name in self.annotations:
1938                 raise FieldError(
1939                     "Cannot select the '%s' alias. Use annotate() to promote "
1940                     "it." % name
1941                 )
1942             else:
1943                 names = sorted([
1944                     *get_field_names_from_opts(opts), *self.extra,
1945                     *self.annotation_select, *self._filtered_relations
1946                 ])
1947                 raise FieldError("Cannot resolve keyword %r into field. "
1948                                  "Choices are: %s" % (name, ", ".join(names)))
1949 
1950     def add_ordering(self, *ordering):
1951         """
1952         Add items from the 'ordering' sequence to the query's "order by"
1953         clause. These items are either field names (not column names) --
1954         possibly with a direction prefix ('-' or '?') -- or OrderBy
1955         expressions.
1956 
1957         If 'ordering' is empty, clear all ordering from the query.
1958         """
1959         errors = []
1960         for item in ordering:
1961             if isinstance(item, str):
1962                 if '.' in item:
1963                     warnings.warn(
1964                         'Passing column raw column aliases to order_by() is '
1965                         'deprecated. Wrap %r in a RawSQL expression before '
1966                         'passing it to order_by().' % item,
1967                         category=RemovedInDjango40Warning,
1968                         stacklevel=3,
1969                     )
1970                     continue
1971                 if item == '?':
1972                     continue
1973                 if item.startswith('-'):
1974                     item = item[1:]
1975                 if item in self.annotations:
1976                     continue
1977                 if self.extra and item in self.extra:
1978                     continue
1979                 # names_to_path() validates the lookup. A descriptive
1980                 # FieldError will be raise if it's not.
1981                 self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)
1982             elif not hasattr(item, 'resolve_expression'):
1983                 errors.append(item)
1984             if getattr(item, 'contains_aggregate', False):
1985                 raise FieldError(
1986                     'Using an aggregate in order_by() without also including '
1987                     'it in annotate() is not allowed: %s' % item
1988                 )
1989         if errors:
1990             raise FieldError('Invalid order_by arguments: %s' % errors)
1991         if ordering:
1992             self.order_by += ordering
1993         else:
1994             self.default_ordering = False
1995 
1996     def clear_ordering(self, force_empty):
1997         """
1998         Remove any ordering settings. If 'force_empty' is True, there will be
1999         no ordering in the resulting query (not even the model's default).
2000         """
2001         self.order_by = ()
2002         self.extra_order_by = ()
2003         if force_empty:
2004             self.default_ordering = False
2005 
2006     def set_group_by(self, allow_aliases=True):
2007         """
2008         Expand the GROUP BY clause required by the query.
2009 
2010         This will usually be the set of all non-aggregate fields in the
2011         return data. If the database backend supports grouping by the
2012         primary key, and the query would be equivalent, the optimization
2013         will be made automatically.
2014         """
2015         # Column names from JOINs to check collisions with aliases.
2016         if allow_aliases:
2017             column_names = set()
2018             seen_models = set()
2019             for join in list(self.alias_map.values())[1:]:  # Skip base table.
2020                 model = join.join_field.related_model
2021                 if model not in seen_models:
2022                     column_names.update({
2023                         field.column
2024                         for field in model._meta.local_concrete_fields
2025                     })
2026                     seen_models.add(model)
2027 
2028         group_by = list(self.select)
2029         if self.annotation_select:
2030             for alias, annotation in self.annotation_select.items():
2031                 signature = inspect.signature(annotation.get_group_by_cols)
2032                 if 'alias' not in signature.parameters:
2033                     annotation_class = annotation.__class__
2034                     msg = (
2035                         '`alias=None` must be added to the signature of '
2036                         '%s.%s.get_group_by_cols().'
2037                     ) % (annotation_class.__module__, annotation_class.__qualname__)
2038                     warnings.warn(msg, category=RemovedInDjango40Warning)
2039                     group_by_cols = annotation.get_group_by_cols()
2040                 else:
2041                     if not allow_aliases or alias in column_names:
2042                         alias = None
2043                     group_by_cols = annotation.get_group_by_cols(alias=alias)
2044                 group_by.extend(group_by_cols)
2045         self.group_by = tuple(group_by)
2046 
2047     def add_select_related(self, fields):
2048         """
2049         Set up the select_related data structure so that we only select
2050         certain related models (as opposed to all models, when
2051         self.select_related=True).
2052         """
2053         if isinstance(self.select_related, bool):
2054             field_dict = {}
2055         else:
2056             field_dict = self.select_related
2057         for field in fields:
2058             d = field_dict
2059             for part in field.split(LOOKUP_SEP):
2060                 d = d.setdefault(part, {})
2061         self.select_related = field_dict
2062 
2063     def add_extra(self, select, select_params, where, params, tables, order_by):
2064         """
2065         Add data to the various extra_* attributes for user-created additions
2066         to the query.
2067         """
2068         if select:
2069             # We need to pair any placeholder markers in the 'select'
2070             # dictionary with their parameters in 'select_params' so that
2071             # subsequent updates to the select dictionary also adjust the
2072             # parameters appropriately.
2073             select_pairs = {}
2074             if select_params:
2075                 param_iter = iter(select_params)
2076             else:
2077                 param_iter = iter([])
2078             for name, entry in select.items():
2079                 entry = str(entry)
2080                 entry_params = []
2081                 pos = entry.find("%s")
2082                 while pos != -1:
2083                     if pos == 0 or entry[pos - 1] != '%':
2084                         entry_params.append(next(param_iter))
2085                     pos = entry.find("%s", pos + 2)
2086                 select_pairs[name] = (entry, entry_params)
2087             self.extra.update(select_pairs)
2088         if where or params:
2089             self.where.add(ExtraWhere(where, params), AND)
2090         if tables:
2091             self.extra_tables += tuple(tables)
2092         if order_by:
2093             self.extra_order_by = order_by
2094 
2095     def clear_deferred_loading(self):
2096         """Remove any fields from the deferred loading set."""
2097         self.deferred_loading = (frozenset(), True)
2098 
2099     def add_deferred_loading(self, field_names):
2100         """
2101         Add the given list of model field names to the set of fields to
2102         exclude from loading from the database when automatic column selection
2103         is done. Add the new field names to any existing field names that
2104         are deferred (or removed from any existing field names that are marked
2105         as the only ones for immediate loading).
2106         """
2107         # Fields on related models are stored in the literal double-underscore
2108         # format, so that we can use a set datastructure. We do the foo__bar
2109         # splitting and handling when computing the SQL column names (as part of
2110         # get_columns()).
2111         existing, defer = self.deferred_loading
2112         if defer:
2113             # Add to existing deferred names.
2114             self.deferred_loading = existing.union(field_names), True
2115         else:
2116             # Remove names from the set of any existing "immediate load" names.
2117             self.deferred_loading = existing.difference(field_names), False
2118 
2119     def add_immediate_loading(self, field_names):
2120         """
2121         Add the given list of model field names to the set of fields to
2122         retrieve when the SQL is executed ("immediate loading" fields). The
2123         field names replace any existing immediate loading field names. If
2124         there are field names already specified for deferred loading, remove
2125         those names from the new field_names before storing the new names
2126         for immediate loading. (That is, immediate loading overrides any
2127         existing immediate values, but respects existing deferrals.)
2128         """
2129         existing, defer = self.deferred_loading
2130         field_names = set(field_names)
2131         if 'pk' in field_names:
2132             field_names.remove('pk')
2133             field_names.add(self.get_meta().pk.name)
2134 
2135         if defer:
2136             # Remove any existing deferred names from the current set before
2137             # setting the new names.
2138             self.deferred_loading = field_names.difference(existing), False
2139         else:
2140             # Replace any existing "immediate load" field names.
2141             self.deferred_loading = frozenset(field_names), False
2142 
2143     def get_loaded_field_names(self):
2144         """
2145         If any fields are marked to be deferred, return a dictionary mapping
2146         models to a set of names in those fields that will be loaded. If a
2147         model is not in the returned dictionary, none of its fields are
2148         deferred.
2149 
2150         If no fields are marked for deferral, return an empty dictionary.
2151         """
2152         # We cache this because we call this function multiple times
2153         # (compiler.fill_related_selections, query.iterator)
2154         try:
2155             return self._loaded_field_names_cache
2156         except AttributeError:
2157             collection = {}
2158             self.deferred_to_data(collection, self.get_loaded_field_names_cb)
2159             self._loaded_field_names_cache = collection
2160             return collection
2161 
2162     def get_loaded_field_names_cb(self, target, model, fields):
2163         """Callback used by get_deferred_field_names()."""
2164         target[model] = {f.attname for f in fields}
2165 
2166     def set_annotation_mask(self, names):
2167         """Set the mask of annotations that will be returned by the SELECT."""
2168         if names is None:
2169             self.annotation_select_mask = None
2170         else:
2171             self.annotation_select_mask = set(names)
2172         self._annotation_select_cache = None
2173 
2174     def append_annotation_mask(self, names):
2175         if self.annotation_select_mask is not None:
2176             self.set_annotation_mask(self.annotation_select_mask.union(names))
2177 
2178     def set_extra_mask(self, names):
2179         """
2180         Set the mask of extra select items that will be returned by SELECT.
2181         Don't remove them from the Query since they might be used later.
2182         """
2183         if names is None:
2184             self.extra_select_mask = None
2185         else:
2186             self.extra_select_mask = set(names)
2187         self._extra_select_cache = None
2188 
2189     def set_values(self, fields):
2190         self.select_related = False
2191         self.clear_deferred_loading()
2192         self.clear_select_fields()
2193 
2194         if fields:
2195             field_names = []
2196             extra_names = []
2197             annotation_names = []
2198             if not self.extra and not self.annotations:
2199                 # Shortcut - if there are no extra or annotations, then
2200                 # the values() clause must be just field names.
2201                 field_names = list(fields)
2202             else:
2203                 self.default_cols = False
2204                 for f in fields:
2205                     if f in self.extra_select:
2206                         extra_names.append(f)
2207                     elif f in self.annotation_select:
2208                         annotation_names.append(f)
2209                     else:
2210                         field_names.append(f)
2211             self.set_extra_mask(extra_names)
2212             self.set_annotation_mask(annotation_names)
2213         else:
2214             field_names = [f.attname for f in self.model._meta.concrete_fields]
2215         # Selected annotations must be known before setting the GROUP BY
2216         # clause.
2217         if self.group_by is True:
2218             self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
2219             # Disable GROUP BY aliases to avoid orphaning references to the
2220             # SELECT clause which is about to be cleared.
2221             self.set_group_by(allow_aliases=False)
2222             self.clear_select_fields()
2223         elif self.group_by:
2224             # Resolve GROUP BY annotation references if they are not part of
2225             # the selected fields anymore.
2226             group_by = []
2227             for expr in self.group_by:
2228                 if isinstance(expr, Ref) and expr.refs not in field_names:
2229                     expr = self.annotations[expr.refs]
2230                 group_by.append(expr)
2231             self.group_by = tuple(group_by)
2232 
2233         self.values_select = tuple(field_names)
2234         self.add_fields(field_names, True)
2235 
2236     @property
2237     def annotation_select(self):
2238         """
2239         Return the dictionary of aggregate columns that are not masked and
2240         should be used in the SELECT clause. Cache this result for performance.
2241         """
2242         if self._annotation_select_cache is not None:
2243             return self._annotation_select_cache
2244         elif not self.annotations:
2245             return {}
2246         elif self.annotation_select_mask is not None:
2247             self._annotation_select_cache = {
2248                 k: v for k, v in self.annotations.items()
2249                 if k in self.annotation_select_mask
2250             }
2251             return self._annotation_select_cache
2252         else:
2253             return self.annotations
2254 
2255     @property
2256     def extra_select(self):
2257         if self._extra_select_cache is not None:
2258             return self._extra_select_cache
2259         if not self.extra:
2260             return {}
2261         elif self.extra_select_mask is not None:
2262             self._extra_select_cache = {
2263                 k: v for k, v in self.extra.items()
2264                 if k in self.extra_select_mask
2265             }
2266             return self._extra_select_cache
2267         else:
2268             return self.extra
2269 
2270     def trim_start(self, names_with_path):
2271         """
2272         Trim joins from the start of the join path. The candidates for trim
2273         are the PathInfos in names_with_path structure that are m2m joins.
2274 
2275         Also set the select column so the start matches the join.
2276 
2277         This method is meant to be used for generating the subquery joins &
2278         cols in split_exclude().
2279 
2280         Return a lookup usable for doing outerq.filter(lookup=self) and a
2281         boolean indicating if the joins in the prefix contain a LEFT OUTER join.
2282         _"""
2283         all_paths = []
2284         for _, paths in names_with_path:
2285             all_paths.extend(paths)
2286         contains_louter = False
2287         # Trim and operate only on tables that were generated for
2288         # the lookup part of the query. That is, avoid trimming
2289         # joins generated for F() expressions.
2290         lookup_tables = [
2291             t for t in self.alias_map
2292             if t in self._lookup_joins or t == self.base_table
2293         ]
2294         for trimmed_paths, path in enumerate(all_paths):
2295             if path.m2m:
2296                 break
2297             if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type == LOUTER:
2298                 contains_louter = True
2299             alias = lookup_tables[trimmed_paths]
2300             self.unref_alias(alias)
2301         # The path.join_field is a Rel, lets get the other side's field
2302         join_field = path.join_field.field
2303         # Build the filter prefix.
2304         paths_in_prefix = trimmed_paths
2305         trimmed_prefix = []
2306         for name, path in names_with_path:
2307             if paths_in_prefix - len(path) < 0:
2308                 break
2309             trimmed_prefix.append(name)
2310             paths_in_prefix -= len(path)
2311         trimmed_prefix.append(
2312             join_field.foreign_related_fields[0].name)
2313         trimmed_prefix = LOOKUP_SEP.join(trimmed_prefix)
2314         # Lets still see if we can trim the first join from the inner query
2315         # (that is, self). We can't do this for:
2316         # - LEFT JOINs because we would miss those rows that have nothing on
2317         #   the outer side,
2318         # - INNER JOINs from filtered relations because we would miss their
2319         #   filters.
2320         first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]
2321         if first_join.join_type != LOUTER and not first_join.filtered_relation:
2322             select_fields = [r[0] for r in join_field.related_fields]
2323             select_alias = lookup_tables[trimmed_paths + 1]
2324             self.unref_alias(lookup_tables[trimmed_paths])
2325             extra_restriction = join_field.get_extra_restriction(
2326                 self.where_class, None, lookup_tables[trimmed_paths + 1])
2327             if extra_restriction:
2328                 self.where.add(extra_restriction, AND)
2329         else:
2330             # TODO: It might be possible to trim more joins from the start of the
2331             # inner query if it happens to have a longer join chain containing the
2332             # values in select_fields. Lets punt this one for now.
2333             select_fields = [r[1] for r in join_field.related_fields]
2334             select_alias = lookup_tables[trimmed_paths]
2335         # The found starting point is likely a Join instead of a BaseTable reference.
2336         # But the first entry in the query's FROM clause must not be a JOIN.
2337         for table in self.alias_map:
2338             if self.alias_refcount[table] > 0:
2339                 self.alias_map[table] = BaseTable(self.alias_map[table].table_name, table)
2340                 break
2341         self.set_select([f.get_col(select_alias) for f in select_fields])
2342         return trimmed_prefix, contains_louter
2343 
2344     def is_nullable(self, field):
2345         """
2346         Check if the given field should be treated as nullable.
2347 
2348         Some backends treat '' as null and Django treats such fields as
2349         nullable for those backends. In such situations field.null can be
2350         False even if we should treat the field as nullable.
2351         """
2352         # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have
2353         # (nor should it have) knowledge of which connection is going to be
2354         # used. The proper fix would be to defer all decisions where
2355         # is_nullable() is needed to the compiler stage, but that is not easy
2356         # to do currently.
2357         return (
2358             connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
2359             field.empty_strings_allowed
2360         ) or field.null

</code><intended_behavior>To resolve the issue, the code should be modified to correctly handle annotations that contain subqueries within GROUP BY clauses. Specifically, the patch suggests adjusting the condition to include annotation_names when constructing the group_by list. This change aims to ensure that:

  - Annotated fields, especially those involving subqueries, are recognized and handled correctly in the GROUP_BY clause construction process. This involves using the alias of annotated subqueries directly rather than treating them as new expressions to be evaluated or incorrectly adding fields to the GROUP BY clause that shouldn't be there.
  - The existing functionality where annotations without subqueries and other groupings are handled correctly should remain intact. The change should specifically address the mishandling of subquery annotations without disrupting the valid processing of other types of annotations or expressions within the GROUP_BY clause.

The overall intended behavior is to ensure accurate and efficient execution of queries involving complex annotations and groupings, upholding the ORM's ability to express and execute sophisticated queries without resorting to raw SQL or encountering incorrect results.</intended_behavior>]
2025-10-18 00:50:49.352 | INFO     | Search completed. Bug locations: [<file>django/db/models/sql/query.py</file>
<class>Query</class>
<method>None</method>
<code>
139 class Query(BaseExpression):
140     """A single SQL query."""
141 
142     alias_prefix = 'T'
143     subq_aliases = frozenset([alias_prefix])
144 
145     compiler = 'SQLCompiler'
146 
147     def __init__(self, model, where=WhereNode, alias_cols=True):
148         self.model = model
149         self.alias_refcount = {}
150         # alias_map is the most important data structure regarding joins.
151         # It's used for recording which joins exist in the query and what
152         # types they are. The key is the alias of the joined table (possibly
153         # the table name) and the value is a Join-like object (see
154         # sql.datastructures.Join for more information).
155         self.alias_map = {}
156         # Whether to provide alias to columns during reference resolving.
157         self.alias_cols = alias_cols
158         # Sometimes the query contains references to aliases in outer queries (as
159         # a result of split_exclude). Correct alias quoting needs to know these
160         # aliases too.
161         # Map external tables to whether they are aliased.
162         self.external_aliases = {}
163         self.table_map = {}     # Maps table names to list of aliases.
164         self.default_cols = True
165         self.default_ordering = True
166         self.standard_ordering = True
167         self.used_aliases = set()
168         self.filter_is_sticky = False
169         self.subquery = False
170 
171         # SQL-related attributes
172         # Select and related select clauses are expressions to use in the
173         # SELECT clause of the query.
174         # The select is used for cases where we want to set up the select
175         # clause to contain other than default fields (values(), subqueries...)
176         # Note that annotations go to annotations dictionary.
177         self.select = ()
178         self.where = where()
179         self.where_class = where
180         # The group_by attribute can have one of the following forms:
181         #  - None: no group by at all in the query
182         #  - A tuple of expressions: group by (at least) those expressions.
183         #    String refs are also allowed for now.
184         #  - True: group by all select fields of the model
185         # See compiler.get_group_by() for details.
186         self.group_by = None
187         self.order_by = ()
188         self.low_mark, self.high_mark = 0, None  # Used for offset/limit
189         self.distinct = False
190         self.distinct_fields = ()
191         self.select_for_update = False
192         self.select_for_update_nowait = False
193         self.select_for_update_skip_locked = False
194         self.select_for_update_of = ()
195         self.select_for_no_key_update = False
196 
197         self.select_related = False
198         # Arbitrary limit for select_related to prevents infinite recursion.
199         self.max_depth = 5
200 
201         # Holds the selects defined by a call to values() or values_list()
202         # excluding annotation_select and extra_select.
203         self.values_select = ()
204 
205         # SQL annotation-related attributes
206         self.annotations = {}  # Maps alias -> Annotation Expression
207         self.annotation_select_mask = None
208         self._annotation_select_cache = None
209 
210         # Set combination attributes
211         self.combinator = None
212         self.combinator_all = False
213         self.combined_queries = ()
214 
215         # These are for extensions. The contents are more or less appended
216         # verbatim to the appropriate clause.
217         self.extra = {}  # Maps col_alias -> (col_sql, params).
218         self.extra_select_mask = None
219         self._extra_select_cache = None
220 
221         self.extra_tables = ()
222         self.extra_order_by = ()
223 
224         # A tuple that is a set of model field names and either True, if these
225         # are the fields to defer, or False if these are the only fields to
226         # load.
227         self.deferred_loading = (frozenset(), True)
228 
229         self._filtered_relations = {}
230 
231         self.explain_query = False
232         self.explain_format = None
233         self.explain_options = {}
234 
235     @property
236     def output_field(self):
237         if len(self.select) == 1:
238             select = self.select[0]
239             return getattr(select, 'target', None) or select.field
240         elif len(self.annotation_select) == 1:
241             return next(iter(self.annotation_select.values())).output_field
242 
243     @property
244     def has_select_fields(self):
245         return bool(self.select or self.annotation_select_mask or self.extra_select_mask)
246 
247     @cached_property
248     def base_table(self):
249         for alias in self.alias_map:
250             return alias
251 
252     @property
253     def identity(self):
254         identity = (
255             (arg, make_hashable(value))
256             for arg, value in self.__dict__.items()
257         )
258         return (self.__class__, *identity)
259 
260     def __str__(self):
261         """
262         Return the query as a string of SQL with the parameter values
263         substituted in (use sql_with_params() to see the unsubstituted string).
264 
265         Parameter values won't necessarily be quoted correctly, since that is
266         done by the database interface at execution time.
267         """
268         sql, params = self.sql_with_params()
269         return sql % params
270 
271     def sql_with_params(self):
272         """
273         Return the query as an SQL string and the parameters that will be
274         substituted into the query.
275         """
276         return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()
277 
278     def __deepcopy__(self, memo):
279         """Limit the amount of work when a Query is deepcopied."""
280         result = self.clone()
281         memo[id(self)] = result
282         return result
283 
284     def get_compiler(self, using=None, connection=None):
285         if using is None and connection is None:
286             raise ValueError("Need either using or connection")
287         if using:
288             connection = connections[using]
289         return connection.ops.compiler(self.compiler)(self, connection, using)
290 
291     def get_meta(self):
292         """
293         Return the Options instance (the model._meta) from which to start
294         processing. Normally, this is self.model._meta, but it can be changed
295         by subclasses.
296         """
297         return self.model._meta
298 
299     def clone(self):
300         """
301         Return a copy of the current Query. A lightweight alternative to
302         to deepcopy().
303         """
304         obj = Empty()
305         obj.__class__ = self.__class__
306         # Copy references to everything.
307         obj.__dict__ = self.__dict__.copy()
308         # Clone attributes that can't use shallow copy.
309         obj.alias_refcount = self.alias_refcount.copy()
310         obj.alias_map = self.alias_map.copy()
311         obj.external_aliases = self.external_aliases.copy()
312         obj.table_map = self.table_map.copy()
313         obj.where = self.where.clone()
314         obj.annotations = self.annotations.copy()
315         if self.annotation_select_mask is None:
316             obj.annotation_select_mask = None
317         else:
318             obj.annotation_select_mask = self.annotation_select_mask.copy()
319         obj.combined_queries = tuple(query.clone() for query in self.combined_queries)
320         # _annotation_select_cache cannot be copied, as doing so breaks the
321         # (necessary) state in which both annotations and
322         # _annotation_select_cache point to the same underlying objects.
323         # It will get re-populated in the cloned queryset the next time it's
324         # used.
325         obj._annotation_select_cache = None
326         obj.extra = self.extra.copy()
327         if self.extra_select_mask is None:
328             obj.extra_select_mask = None
329         else:
330             obj.extra_select_mask = self.extra_select_mask.copy()
331         if self._extra_select_cache is None:
332             obj._extra_select_cache = None
333         else:
334             obj._extra_select_cache = self._extra_select_cache.copy()
335         if self.select_related is not False:
336             # Use deepcopy because select_related stores fields in nested
337             # dicts.
338             obj.select_related = copy.deepcopy(obj.select_related)
339         if 'subq_aliases' in self.__dict__:
340             obj.subq_aliases = self.subq_aliases.copy()
341         obj.used_aliases = self.used_aliases.copy()
342         obj._filtered_relations = self._filtered_relations.copy()
343         # Clear the cached_property
344         try:
345             del obj.base_table
346         except AttributeError:
347             pass
348         return obj
349 
350     def chain(self, klass=None):
351         """
352         Return a copy of the current Query that's ready for another operation.
353         The klass argument changes the type of the Query, e.g. UpdateQuery.
354         """
355         obj = self.clone()
356         if klass and obj.__class__ != klass:
357             obj.__class__ = klass
358         if not obj.filter_is_sticky:
359             obj.used_aliases = set()
360         obj.filter_is_sticky = False
361         if hasattr(obj, '_setup_query'):
362             obj._setup_query()
363         return obj
364 
365     def relabeled_clone(self, change_map):
366         clone = self.clone()
367         clone.change_aliases(change_map)
368         return clone
369 
370     def _get_col(self, target, field, alias):
371         if not self.alias_cols:
372             alias = None
373         return target.get_col(alias, field)
374 
375     def rewrite_cols(self, annotation, col_cnt):
376         # We must make sure the inner query has the referred columns in it.
377         # If we are aggregating over an annotation, then Django uses Ref()
378         # instances to note this. However, if we are annotating over a column
379         # of a related model, then it might be that column isn't part of the
380         # SELECT clause of the inner query, and we must manually make sure
381         # the column is selected. An example case is:
382         #    .aggregate(Sum('author__awards'))
383         # Resolving this expression results in a join to author, but there
384         # is no guarantee the awards column of author is in the select clause
385         # of the query. Thus we must manually add the column to the inner
386         # query.
387         orig_exprs = annotation.get_source_expressions()
388         new_exprs = []
389         for expr in orig_exprs:
390             # FIXME: These conditions are fairly arbitrary. Identify a better
391             # method of having expressions decide which code path they should
392             # take.
393             if isinstance(expr, Ref):
394                 # Its already a Ref to subquery (see resolve_ref() for
395                 # details)
396                 new_exprs.append(expr)
397             elif isinstance(expr, (WhereNode, Lookup)):
398                 # Decompose the subexpressions further. The code here is
399                 # copied from the else clause, but this condition must appear
400                 # before the contains_aggregate/is_summary condition below.
401                 new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
402                 new_exprs.append(new_expr)
403             else:
404                 # Reuse aliases of expressions already selected in subquery.
405                 for col_alias, selected_annotation in self.annotation_select.items():
406                     if selected_annotation is expr:
407                         new_expr = Ref(col_alias, expr)
408                         break
409                 else:
410                     # An expression that is not selected the subquery.
411                     if isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):
412                         # Reference column or another aggregate. Select it
413                         # under a non-conflicting alias.
414                         col_cnt += 1
415                         col_alias = '__col%d' % col_cnt
416                         self.annotations[col_alias] = expr
417                         self.append_annotation_mask([col_alias])
418                         new_expr = Ref(col_alias, expr)
419                     else:
420                         # Some other expression not referencing database values
421                         # directly. Its subexpression might contain Cols.
422                         new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
423                 new_exprs.append(new_expr)
424         annotation.set_source_expressions(new_exprs)
425         return annotation, col_cnt
426 
427     def get_aggregation(self, using, added_aggregate_names):
428         """
429         Return the dictionary with the values of the existing aggregations.
430         """
431         if not self.annotation_select:
432             return {}
433         existing_annotations = [
434             annotation for alias, annotation
435             in self.annotations.items()
436             if alias not in added_aggregate_names
437         ]
438         # Decide if we need to use a subquery.
439         #
440         # Existing annotations would cause incorrect results as get_aggregation()
441         # must produce just one result and thus must not use GROUP BY. But we
442         # aren't smart enough to remove the existing annotations from the
443         # query, so those would force us to use GROUP BY.
444         #
445         # If the query has limit or distinct, or uses set operations, then
446         # those operations must be done in a subquery so that the query
447         # aggregates on the limit and/or distinct results instead of applying
448         # the distinct and limit after the aggregation.
449         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or
450                 self.distinct or self.combinator):
451             from django.db.models.sql.subqueries import AggregateQuery
452             outer_query = AggregateQuery(self.model)
453             inner_query = self.clone()
454             inner_query.select_for_update = False
455             inner_query.select_related = False
456             inner_query.set_annotation_mask(self.annotation_select)
457             if not self.is_sliced and not self.distinct_fields:
458                 # Queries with distinct_fields need ordering and when a limit
459                 # is applied we must take the slice from the ordered query.
460                 # Otherwise no need for ordering.
461                 inner_query.clear_ordering(True)
462             if not inner_query.distinct:
463                 # If the inner query uses default select and it has some
464                 # aggregate annotations, then we must make sure the inner
465                 # query is grouped by the main model's primary key. However,
466                 # clearing the select clause can alter results if distinct is
467                 # used.
468                 has_existing_aggregate_annotations = any(
469                     annotation for annotation in existing_annotations
470                     if getattr(annotation, 'contains_aggregate', True)
471                 )
472                 if inner_query.default_cols and has_existing_aggregate_annotations:
473                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
474                 inner_query.default_cols = False
475 
476             relabels = {t: 'subquery' for t in inner_query.alias_map}
477             relabels[None] = 'subquery'
478             # Remove any aggregates marked for reduction from the subquery
479             # and move them to the outer AggregateQuery.
480             col_cnt = 0
481             for alias, expression in list(inner_query.annotation_select.items()):
482                 annotation_select_mask = inner_query.annotation_select_mask
483                 if expression.is_summary:
484                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
485                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
486                     del inner_query.annotations[alias]
487                     annotation_select_mask.remove(alias)
488                 # Make sure the annotation_select wont use cached results.
489                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)
490             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
491                 # In case of Model.objects[0:3].count(), there would be no
492                 # field selected in the inner query, yet we must use a subquery.
493                 # So, make sure at least one field is selected.
494                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
495             try:
496                 outer_query.add_subquery(inner_query, using)
497             except EmptyResultSet:
498                 return {
499                     alias: None
500                     for alias in outer_query.annotation_select
501                 }
502         else:
503             outer_query = self
504             self.select = ()
505             self.default_cols = False
506             self.extra = {}
507 
508         outer_query.clear_ordering(True)
509         outer_query.clear_limits()
510         outer_query.select_for_update = False
511         outer_query.select_related = False
512         compiler = outer_query.get_compiler(using)
513         result = compiler.execute_sql(SINGLE)
514         if result is None:
515             result = [None] * len(outer_query.annotation_select)
516 
517         converters = compiler.get_converters(outer_query.annotation_select.values())
518         result = next(compiler.apply_converters((result,), converters))
519 
520         return dict(zip(outer_query.annotation_select, result))
521 
522     def get_count(self, using):
523         """
524         Perform a COUNT() query using the current filter constraints.
525         """
526         obj = self.clone()
527         obj.add_annotation(Count('*'), alias='__count', is_summary=True)
528         number = obj.get_aggregation(using, ['__count'])['__count']
529         if number is None:
530             number = 0
531         return number
532 
533     def has_filters(self):
534         return self.where
535 
536     def exists(self):
537         q = self.clone()
538         if not q.distinct:
539             if q.group_by is True:
540                 q.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
541                 # Disable GROUP BY aliases to avoid orphaning references to the
542                 # SELECT clause which is about to be cleared.
543                 q.set_group_by(allow_aliases=False)
544             q.clear_select_clause()
545         q.clear_ordering(True)
546         q.set_limits(high=1)
547         q.add_extra({'a': 1}, None, None, None, None, None)
548         q.set_extra_mask(['a'])
549         return q
550 
551     def has_results(self, using):
552         q = self.exists()
553         compiler = q.get_compiler(using=using)
554         return compiler.has_results()
555 
556     def explain(self, using, format=None, **options):
557         q = self.clone()
558         q.explain_query = True
559         q.explain_format = format
560         q.explain_options = options
561         compiler = q.get_compiler(using=using)
562         return '\n'.join(compiler.explain_query())
563 
564     def combine(self, rhs, connector):
565         """
566         Merge the 'rhs' query into the current one (with any 'rhs' effects
567         being applied *after* (that is, "to the right of") anything in the
568         current query. 'rhs' is not modified during a call to this function.
569 
570         The 'connector' parameter describes how to connect filters from the
571         'rhs' query.
572         """
573         assert self.model == rhs.model, \
574             "Cannot combine queries on two different base models."
575         assert not self.is_sliced, \
576             "Cannot combine queries once a slice has been taken."
577         assert self.distinct == rhs.distinct, \
578             "Cannot combine a unique query with a non-unique query."
579         assert self.distinct_fields == rhs.distinct_fields, \
580             "Cannot combine queries with different distinct fields."
581 
582         # Work out how to relabel the rhs aliases, if necessary.
583         change_map = {}
584         conjunction = (connector == AND)
585 
586         # Determine which existing joins can be reused. When combining the
587         # query with AND we must recreate all joins for m2m filters. When
588         # combining with OR we can reuse joins. The reason is that in AND
589         # case a single row can't fulfill a condition like:
590         #     revrel__col=1 & revrel__col=2
591         # But, there might be two different related rows matching this
592         # condition. In OR case a single True is enough, so single row is
593         # enough, too.
594         #
595         # Note that we will be creating duplicate joins for non-m2m joins in
596         # the AND case. The results will be correct but this creates too many
597         # joins. This is something that could be fixed later on.
598         reuse = set() if conjunction else set(self.alias_map)
599         # Base table must be present in the query - this is the same
600         # table on both sides.
601         self.get_initial_alias()
602         joinpromoter = JoinPromoter(connector, 2, False)
603         joinpromoter.add_votes(
604             j for j in self.alias_map if self.alias_map[j].join_type == INNER)
605         rhs_votes = set()
606         # Now, add the joins from rhs query into the new query (skipping base
607         # table).
608         rhs_tables = list(rhs.alias_map)[1:]
609         for alias in rhs_tables:
610             join = rhs.alias_map[alias]
611             # If the left side of the join was already relabeled, use the
612             # updated alias.
613             join = join.relabeled_clone(change_map)
614             new_alias = self.join(join, reuse=reuse)
615             if join.join_type == INNER:
616                 rhs_votes.add(new_alias)
617             # We can't reuse the same join again in the query. If we have two
618             # distinct joins for the same connection in rhs query, then the
619             # combined query must have two joins, too.
620             reuse.discard(new_alias)
621             if alias != new_alias:
622                 change_map[alias] = new_alias
623             if not rhs.alias_refcount[alias]:
624                 # The alias was unused in the rhs query. Unref it so that it
625                 # will be unused in the new query, too. We have to add and
626                 # unref the alias so that join promotion has information of
627                 # the join type for the unused alias.
628                 self.unref_alias(new_alias)
629         joinpromoter.add_votes(rhs_votes)
630         joinpromoter.update_join_types(self)
631 
632         # Now relabel a copy of the rhs where-clause and add it to the current
633         # one.
634         w = rhs.where.clone()
635         w.relabel_aliases(change_map)
636         self.where.add(w, connector)
637 
638         # Selection columns and extra extensions are those provided by 'rhs'.
639         if rhs.select:
640             self.set_select([col.relabeled_clone(change_map) for col in rhs.select])
641         else:
642             self.select = ()
643 
644         if connector == OR:
645             # It would be nice to be able to handle this, but the queries don't
646             # really make sense (or return consistent value sets). Not worth
647             # the extra complexity when you can write a real query instead.
648             if self.extra and rhs.extra:
649                 raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")
650         self.extra.update(rhs.extra)
651         extra_select_mask = set()
652         if self.extra_select_mask is not None:
653             extra_select_mask.update(self.extra_select_mask)
654         if rhs.extra_select_mask is not None:
655             extra_select_mask.update(rhs.extra_select_mask)
656         if extra_select_mask:
657             self.set_extra_mask(extra_select_mask)
658         self.extra_tables += rhs.extra_tables
659 
660         # Ordering uses the 'rhs' ordering, unless it has none, in which case
661         # the current ordering is used.
662         self.order_by = rhs.order_by or self.order_by
663         self.extra_order_by = rhs.extra_order_by or self.extra_order_by
664 
665     def deferred_to_data(self, target, callback):
666         """
667         Convert the self.deferred_loading data structure to an alternate data
668         structure, describing the field that *will* be loaded. This is used to
669         compute the columns to select from the database and also by the
670         QuerySet class to work out which fields are being initialized on each
671         model. Models that have all their fields included aren't mentioned in
672         the result, only those that have field restrictions in place.
673 
674         The "target" parameter is the instance that is populated (in place).
675         The "callback" is a function that is called whenever a (model, field)
676         pair need to be added to "target". It accepts three parameters:
677         "target", and the model and list of fields being added for that model.
678         """
679         field_names, defer = self.deferred_loading
680         if not field_names:
681             return
682         orig_opts = self.get_meta()
683         seen = {}
684         must_include = {orig_opts.concrete_model: {orig_opts.pk}}
685         for field_name in field_names:
686             parts = field_name.split(LOOKUP_SEP)
687             cur_model = self.model._meta.concrete_model
688             opts = orig_opts
689             for name in parts[:-1]:
690                 old_model = cur_model
691                 if name in self._filtered_relations:
692                     name = self._filtered_relations[name].relation_name
693                 source = opts.get_field(name)
694                 if is_reverse_o2o(source):
695                     cur_model = source.related_model
696                 else:
697                     cur_model = source.remote_field.model
698                 opts = cur_model._meta
699                 # Even if we're "just passing through" this model, we must add
700                 # both the current model's pk and the related reference field
701                 # (if it's not a reverse relation) to the things we select.
702                 if not is_reverse_o2o(source):
703                     must_include[old_model].add(source)
704                 add_to_dict(must_include, cur_model, opts.pk)
705             field = opts.get_field(parts[-1])
706             is_reverse_object = field.auto_created and not field.concrete
707             model = field.related_model if is_reverse_object else field.model
708             model = model._meta.concrete_model
709             if model == opts.model:
710                 model = cur_model
711             if not is_reverse_o2o(field):
712                 add_to_dict(seen, model, field)
713 
714         if defer:
715             # We need to load all fields for each model, except those that
716             # appear in "seen" (for all models that appear in "seen"). The only
717             # slight complexity here is handling fields that exist on parent
718             # models.
719             workset = {}
720             for model, values in seen.items():
721                 for field in model._meta.local_fields:
722                     if field not in values:
723                         m = field.model._meta.concrete_model
724                         add_to_dict(workset, m, field)
725             for model, values in must_include.items():
726                 # If we haven't included a model in workset, we don't add the
727                 # corresponding must_include fields for that model, since an
728                 # empty set means "include all fields". That's why there's no
729                 # "else" branch here.
730                 if model in workset:
731                     workset[model].update(values)
732             for model, values in workset.items():
733                 callback(target, model, values)
734         else:
735             for model, values in must_include.items():
736                 if model in seen:
737                     seen[model].update(values)
738                 else:
739                     # As we've passed through this model, but not explicitly
740                     # included any fields, we have to make sure it's mentioned
741                     # so that only the "must include" fields are pulled in.
742                     seen[model] = values
743             # Now ensure that every model in the inheritance chain is mentioned
744             # in the parent list. Again, it must be mentioned to ensure that
745             # only "must include" fields are pulled in.
746             for model in orig_opts.get_parent_list():
747                 seen.setdefault(model, set())
748             for model, values in seen.items():
749                 callback(target, model, values)
750 
751     def table_alias(self, table_name, create=False, filtered_relation=None):
752         """
753         Return a table alias for the given table_name and whether this is a
754         new alias or not.
755 
756         If 'create' is true, a new alias is always created. Otherwise, the
757         most recently created alias for the table (if one exists) is reused.
758         """
759         alias_list = self.table_map.get(table_name)
760         if not create and alias_list:
761             alias = alias_list[0]
762             self.alias_refcount[alias] += 1
763             return alias, False
764 
765         # Create a new alias for this table.
766         if alias_list:
767             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
768             alias_list.append(alias)
769         else:
770             # The first occurrence of a table uses the table name directly.
771             alias = filtered_relation.alias if filtered_relation is not None else table_name
772             self.table_map[table_name] = [alias]
773         self.alias_refcount[alias] = 1
774         return alias, True
775 
776     def ref_alias(self, alias):
777         """Increases the reference count for this alias."""
778         self.alias_refcount[alias] += 1
779 
780     def unref_alias(self, alias, amount=1):
781         """Decreases the reference count for this alias."""
782         self.alias_refcount[alias] -= amount
783 
784     def promote_joins(self, aliases):
785         """
786         Promote recursively the join type of given aliases and its children to
787         an outer join. If 'unconditional' is False, only promote the join if
788         it is nullable or the parent join is an outer join.
789 
790         The children promotion is done to avoid join chains that contain a LOUTER
791         b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,
792         then we must also promote b->c automatically, or otherwise the promotion
793         of a->b doesn't actually change anything in the query results.
794         """
795         aliases = list(aliases)
796         while aliases:
797             alias = aliases.pop(0)
798             if self.alias_map[alias].join_type is None:
799                 # This is the base table (first FROM entry) - this table
800                 # isn't really joined at all in the query, so we should not
801                 # alter its join type.
802                 continue
803             # Only the first alias (skipped above) should have None join_type
804             assert self.alias_map[alias].join_type is not None
805             parent_alias = self.alias_map[alias].parent_alias
806             parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER
807             already_louter = self.alias_map[alias].join_type == LOUTER
808             if ((self.alias_map[alias].nullable or parent_louter) and
809                     not already_louter):
810                 self.alias_map[alias] = self.alias_map[alias].promote()
811                 # Join type of 'alias' changed, so re-examine all aliases that
812                 # refer to this one.
813                 aliases.extend(
814                     join for join in self.alias_map
815                     if self.alias_map[join].parent_alias == alias and join not in aliases
816                 )
817 
818     def demote_joins(self, aliases):
819         """
820         Change join type from LOUTER to INNER for all joins in aliases.
821 
822         Similarly to promote_joins(), this method must ensure no join chains
823         containing first an outer, then an inner join are generated. If we
824         are demoting b->c join in chain a LOUTER b LOUTER c then we must
825         demote a->b automatically, or otherwise the demotion of b->c doesn't
826         actually change anything in the query results. .
827         """
828         aliases = list(aliases)
829         while aliases:
830             alias = aliases.pop(0)
831             if self.alias_map[alias].join_type == LOUTER:
832                 self.alias_map[alias] = self.alias_map[alias].demote()
833                 parent_alias = self.alias_map[alias].parent_alias
834                 if self.alias_map[parent_alias].join_type == INNER:
835                     aliases.append(parent_alias)
836 
837     def reset_refcounts(self, to_counts):
838         """
839         Reset reference counts for aliases so that they match the value passed
840         in `to_counts`.
841         """
842         for alias, cur_refcount in self.alias_refcount.copy().items():
843             unref_amount = cur_refcount - to_counts.get(alias, 0)
844             self.unref_alias(alias, unref_amount)
845 
846     def change_aliases(self, change_map):
847         """
848         Change the aliases in change_map (which maps old-alias -> new-alias),
849         relabelling any references to them in select columns and the where
850         clause.
851         """
852         assert set(change_map).isdisjoint(change_map.values())
853 
854         # 1. Update references in "select" (normal columns plus aliases),
855         # "group by" and "where".
856         self.where.relabel_aliases(change_map)
857         if isinstance(self.group_by, tuple):
858             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])
859         self.select = tuple([col.relabeled_clone(change_map) for col in self.select])
860         self.annotations = self.annotations and {
861             key: col.relabeled_clone(change_map) for key, col in self.annotations.items()
862         }
863 
864         # 2. Rename the alias in the internal table/alias datastructures.
865         for old_alias, new_alias in change_map.items():
866             if old_alias not in self.alias_map:
867                 continue
868             alias_data = self.alias_map[old_alias].relabeled_clone(change_map)
869             self.alias_map[new_alias] = alias_data
870             self.alias_refcount[new_alias] = self.alias_refcount[old_alias]
871             del self.alias_refcount[old_alias]
872             del self.alias_map[old_alias]
873 
874             table_aliases = self.table_map[alias_data.table_name]
875             for pos, alias in enumerate(table_aliases):
876                 if alias == old_alias:
877                     table_aliases[pos] = new_alias
878                     break
879         self.external_aliases = {
880             # Table is aliased or it's being changed and thus is aliased.
881             change_map.get(alias, alias): (aliased or alias in change_map)
882             for alias, aliased in self.external_aliases.items()
883         }
884 
885     def bump_prefix(self, outer_query):
886         """
887         Change the alias prefix to the next letter in the alphabet in a way
888         that the outer query's aliases and this query's aliases will not
889         conflict. Even tables that previously had no alias will get an alias
890         after this call.
891         """
892         def prefix_gen():
893             """
894             Generate a sequence of characters in alphabetical order:
895                 -> 'A', 'B', 'C', ...
896 
897             When the alphabet is finished, the sequence will continue with the
898             Cartesian product:
899                 -> 'AA', 'AB', 'AC', ...
900             """
901             alphabet = ascii_uppercase
902             prefix = chr(ord(self.alias_prefix) + 1)
903             yield prefix
904             for n in count(1):
905                 seq = alphabet[alphabet.index(prefix):] if prefix else alphabet
906                 for s in product(seq, repeat=n):
907                     yield ''.join(s)
908                 prefix = None
909 
910         if self.alias_prefix != outer_query.alias_prefix:
911             # No clashes between self and outer query should be possible.
912             return
913 
914         # Explicitly avoid infinite loop. The constant divider is based on how
915         # much depth recursive subquery references add to the stack. This value
916         # might need to be adjusted when adding or removing function calls from
917         # the code path in charge of performing these operations.
918         local_recursion_limit = sys.getrecursionlimit() // 16
919         for pos, prefix in enumerate(prefix_gen()):
920             if prefix not in self.subq_aliases:
921                 self.alias_prefix = prefix
922                 break
923             if pos > local_recursion_limit:
924                 raise RecursionError(
925                     'Maximum recursion depth exceeded: too many subqueries.'
926                 )
927         self.subq_aliases = self.subq_aliases.union([self.alias_prefix])
928         outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)
929         self.change_aliases({
930             alias: '%s%d' % (self.alias_prefix, pos)
931             for pos, alias in enumerate(self.alias_map)
932         })
933 
934     def get_initial_alias(self):
935         """
936         Return the first alias for this query, after increasing its reference
937         count.
938         """
939         if self.alias_map:
940             alias = self.base_table
941             self.ref_alias(alias)
942         else:
943             alias = self.join(BaseTable(self.get_meta().db_table, None))
944         return alias
945 
946     def count_active_tables(self):
947         """
948         Return the number of tables in this query with a non-zero reference
949         count. After execution, the reference counts are zeroed, so tables
950         added in compiler will not be seen by this method.
951         """
952         return len([1 for count in self.alias_refcount.values() if count])
953 
954     def join(self, join, reuse=None, reuse_with_filtered_relation=False):
955         """
956         Return an alias for the 'join', either reusing an existing alias for
957         that join or creating a new one. 'join' is either a
958         sql.datastructures.BaseTable or Join.
959 
960         The 'reuse' parameter can be either None which means all joins are
961         reusable, or it can be a set containing the aliases that can be reused.
962 
963         The 'reuse_with_filtered_relation' parameter is used when computing
964         FilteredRelation instances.
965 
966         A join is always created as LOUTER if the lhs alias is LOUTER to make
967         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new
968         joins are created as LOUTER if the join is nullable.
969         """
970         if reuse_with_filtered_relation and reuse:
971             reuse_aliases = [
972                 a for a, j in self.alias_map.items()
973                 if a in reuse and j.equals(join, with_filtered_relation=False)
974             ]
975         else:
976             reuse_aliases = [
977                 a for a, j in self.alias_map.items()
978                 if (reuse is None or a in reuse) and j == join
979             ]
980         if reuse_aliases:
981             if join.table_alias in reuse_aliases:
982                 reuse_alias = join.table_alias
983             else:
984                 # Reuse the most recent alias of the joined table
985                 # (a many-to-many relation may be joined multiple times).
986                 reuse_alias = reuse_aliases[-1]
987             self.ref_alias(reuse_alias)
988             return reuse_alias
989 
990         # No reuse is possible, so we need a new alias.
991         alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)
992         if join.join_type:
993             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:
994                 join_type = LOUTER
995             else:
996                 join_type = INNER
997             join.join_type = join_type
998         join.table_alias = alias
999         self.alias_map[alias] = join
1000         return alias
1001 
1002     def join_parent_model(self, opts, model, alias, seen):
1003         """
1004         Make sure the given 'model' is joined in the query. If 'model' isn't
1005         a parent of 'opts' or if it is None this method is a no-op.
1006 
1007         The 'alias' is the root alias for starting the join, 'seen' is a dict
1008         of model -> alias of existing joins. It must also contain a mapping
1009         of None -> some alias. This will be returned in the no-op case.
1010         """
1011         if model in seen:
1012             return seen[model]
1013         chain = opts.get_base_chain(model)
1014         if not chain:
1015             return alias
1016         curr_opts = opts
1017         for int_model in chain:
1018             if int_model in seen:
1019                 curr_opts = int_model._meta
1020                 alias = seen[int_model]
1021                 continue
1022             # Proxy model have elements in base chain
1023             # with no parents, assign the new options
1024             # object and skip to the next base in that
1025             # case
1026             if not curr_opts.parents[int_model]:
1027                 curr_opts = int_model._meta
1028                 continue
1029             link_field = curr_opts.get_ancestor_link(int_model)
1030             join_info = self.setup_joins([link_field.name], curr_opts, alias)
1031             curr_opts = int_model._meta
1032             alias = seen[int_model] = join_info.joins[-1]
1033         return alias or seen[None]
1034 
1035     def add_annotation(self, annotation, alias, is_summary=False, select=True):
1036         """Add a single annotation expression to the Query."""
1037         annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
1038                                                    summarize=is_summary)
1039         if select:
1040             self.append_annotation_mask([alias])
1041         else:
1042             self.set_annotation_mask(set(self.annotation_select).difference({alias}))
1043         self.annotations[alias] = annotation
1044 
1045     def resolve_expression(self, query, *args, **kwargs):
1046         clone = self.clone()
1047         # Subqueries need to use a different set of aliases than the outer query.
1048         clone.bump_prefix(query)
1049         clone.subquery = True
1050         # It's safe to drop ordering if the queryset isn't using slicing,
1051         # distinct(*fields) or select_for_update().
1052         if (self.low_mark == 0 and self.high_mark is None and
1053                 not self.distinct_fields and
1054                 not self.select_for_update):
1055             clone.clear_ordering(True)
1056         clone.where.resolve_expression(query, *args, **kwargs)
1057         for key, value in clone.annotations.items():
1058             resolved = value.resolve_expression(query, *args, **kwargs)
1059             if hasattr(resolved, 'external_aliases'):
1060                 resolved.external_aliases.update(clone.external_aliases)
1061             clone.annotations[key] = resolved
1062         # Outer query's aliases are considered external.
1063         for alias, table in query.alias_map.items():
1064             clone.external_aliases[alias] = (
1065                 (isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias) or
1066                 (isinstance(table, BaseTable) and table.table_name != table.table_alias)
1067             )
1068         return clone
1069 
1070     def get_external_cols(self):
1071         exprs = chain(self.annotations.values(), self.where.children)
1072         return [
1073             col for col in self._gen_cols(exprs)
1074             if col.alias in self.external_aliases
1075         ]
1076 
1077     def as_sql(self, compiler, connection):
1078         sql, params = self.get_compiler(connection=connection).as_sql()
1079         if self.subquery:
1080             sql = '(%s)' % sql
1081         return sql, params
1082 
1083     def resolve_lookup_value(self, value, can_reuse, allow_joins):
1084         if hasattr(value, 'resolve_expression'):
1085             value = value.resolve_expression(
1086                 self, reuse=can_reuse, allow_joins=allow_joins,
1087             )
1088         elif isinstance(value, (list, tuple)):
1089             # The items of the iterable may be expressions and therefore need
1090             # to be resolved independently.
1091             values = (
1092                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
1093                 for sub_value in value
1094             )
1095             type_ = type(value)
1096             if hasattr(type_, '_make'):  # namedtuple
1097                 return type_(*values)
1098             return type_(values)
1099         return value
1100 
1101     def solve_lookup_type(self, lookup):
1102         """
1103         Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').
1104         """
1105         lookup_splitted = lookup.split(LOOKUP_SEP)
1106         if self.annotations:
1107             expression, expression_lookups = refs_expression(lookup_splitted, self.annotations)
1108             if expression:
1109                 return expression_lookups, (), expression
1110         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
1111         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
1112         if len(lookup_parts) > 1 and not field_parts:
1113             raise FieldError(
1114                 'Invalid lookup "%s" for model %s".' %
1115                 (lookup, self.get_meta().model.__name__)
1116             )
1117         return lookup_parts, field_parts, False
1118 
1119     def check_query_object_type(self, value, opts, field):
1120         """
1121         Check whether the object passed while querying is of the correct type.
1122         If not, raise a ValueError specifying the wrong object.
1123         """
1124         if hasattr(value, '_meta'):
1125             if not check_rel_lookup_compatibility(value._meta.model, opts, field):
1126                 raise ValueError(
1127                     'Cannot query "%s": Must be "%s" instance.' %
1128                     (value, opts.object_name))
1129 
1130     def check_related_objects(self, field, value, opts):
1131         """Check the type of object passed to query relations."""
1132         if field.is_relation:
1133             # Check that the field and the queryset use the same model in a
1134             # query like .filter(author=Author.objects.all()). For example, the
1135             # opts would be Author's (from the author field) and value.model
1136             # would be Author.objects.all() queryset's .model (Author also).
1137             # The field is the related field on the lhs side.
1138             if (isinstance(value, Query) and not value.has_select_fields and
1139                     not check_rel_lookup_compatibility(value.model, opts, field)):
1140                 raise ValueError(
1141                     'Cannot use QuerySet for "%s": Use a QuerySet for "%s".' %
1142                     (value.model._meta.object_name, opts.object_name)
1143                 )
1144             elif hasattr(value, '_meta'):
1145                 self.check_query_object_type(value, opts, field)
1146             elif hasattr(value, '__iter__'):
1147                 for v in value:
1148                     self.check_query_object_type(v, opts, field)
1149 
1150     def check_filterable(self, expression):
1151         """Raise an error if expression cannot be used in a WHERE clause."""
1152         if (
1153             hasattr(expression, 'resolve_expression') and
1154             not getattr(expression, 'filterable', True)
1155         ):
1156             raise NotSupportedError(
1157                 expression.__class__.__name__ + ' is disallowed in the filter '
1158                 'clause.'
1159             )
1160         if hasattr(expression, 'get_source_expressions'):
1161             for expr in expression.get_source_expressions():
1162                 self.check_filterable(expr)
1163 
1164     def build_lookup(self, lookups, lhs, rhs):
1165         """
1166         Try to extract transforms and lookup from given lhs.
1167 
1168         The lhs value is something that works like SQLExpression.
1169         The rhs value is what the lookup is going to compare against.
1170         The lookups is a list of names to extract using get_lookup()
1171         and get_transform().
1172         """
1173         # __exact is the default lookup if one isn't given.
1174         *transforms, lookup_name = lookups or ['exact']
1175         for name in transforms:
1176             lhs = self.try_transform(lhs, name)
1177         # First try get_lookup() so that the lookup takes precedence if the lhs
1178         # supports both transform and lookup for the name.
1179         lookup_class = lhs.get_lookup(lookup_name)
1180         if not lookup_class:
1181             if lhs.field.is_relation:
1182                 raise FieldError('Related Field got invalid lookup: {}'.format(lookup_name))
1183             # A lookup wasn't found. Try to interpret the name as a transform
1184             # and do an Exact lookup against it.
1185             lhs = self.try_transform(lhs, lookup_name)
1186             lookup_name = 'exact'
1187             lookup_class = lhs.get_lookup(lookup_name)
1188             if not lookup_class:
1189                 return
1190 
1191         lookup = lookup_class(lhs, rhs)
1192         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all
1193         # uses of None as a query value unless the lookup supports it.
1194         if lookup.rhs is None and not lookup.can_use_none_as_rhs:
1195             if lookup_name not in ('exact', 'iexact'):
1196                 raise ValueError("Cannot use None as a query value")
1197             return lhs.get_lookup('isnull')(lhs, True)
1198 
1199         # For Oracle '' is equivalent to null. The check must be done at this
1200         # stage because join promotion can't be done in the compiler. Using
1201         # DEFAULT_DB_ALIAS isn't nice but it's the best that can be done here.
1202         # A similar thing is done in is_nullable(), too.
1203         if (connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
1204                 lookup_name == 'exact' and lookup.rhs == ''):
1205             return lhs.get_lookup('isnull')(lhs, True)
1206 
1207         return lookup
1208 
1209     def try_transform(self, lhs, name):
1210         """
1211         Helper method for build_lookup(). Try to fetch and initialize
1212         a transform for name parameter from lhs.
1213         """
1214         transform_class = lhs.get_transform(name)
1215         if transform_class:
1216             return transform_class(lhs)
1217         else:
1218             output_field = lhs.output_field.__class__
1219             suggested_lookups = difflib.get_close_matches(name, output_field.get_lookups())
1220             if suggested_lookups:
1221                 suggestion = ', perhaps you meant %s?' % ' or '.join(suggested_lookups)
1222             else:
1223                 suggestion = '.'
1224             raise FieldError(
1225                 "Unsupported lookup '%s' for %s or join on the field not "
1226                 "permitted%s" % (name, output_field.__name__, suggestion)
1227             )
1228 
1229     def build_filter(self, filter_expr, branch_negated=False, current_negated=False,
1230                      can_reuse=None, allow_joins=True, split_subq=True,
1231                      reuse_with_filtered_relation=False, check_filterable=True):
1232         """
1233         Build a WhereNode for a single filter clause but don't add it
1234         to this Query. Query.add_q() will then add this filter to the where
1235         Node.
1236 
1237         The 'branch_negated' tells us if the current branch contains any
1238         negations. This will be used to determine if subqueries are needed.
1239 
1240         The 'current_negated' is used to determine if the current filter is
1241         negated or not and this will be used to determine if IS NULL filtering
1242         is needed.
1243 
1244         The difference between current_negated and branch_negated is that
1245         branch_negated is set on first negation, but current_negated is
1246         flipped for each negation.
1247 
1248         Note that add_filter will not do any negating itself, that is done
1249         upper in the code by add_q().
1250 
1251         The 'can_reuse' is a set of reusable joins for multijoins.
1252 
1253         If 'reuse_with_filtered_relation' is True, then only joins in can_reuse
1254         will be reused.
1255 
1256         The method will create a filter clause that can be added to the current
1257         query. However, if the filter isn't added to the query then the caller
1258         is responsible for unreffing the joins used.
1259         """
1260         if isinstance(filter_expr, dict):
1261             raise FieldError("Cannot parse keyword query as dict")
1262         if isinstance(filter_expr, Q):
1263             return self._add_q(
1264                 filter_expr,
1265                 branch_negated=branch_negated,
1266                 current_negated=current_negated,
1267                 used_aliases=can_reuse,
1268                 allow_joins=allow_joins,
1269                 split_subq=split_subq,
1270                 check_filterable=check_filterable,
1271             )
1272         if hasattr(filter_expr, 'resolve_expression'):
1273             if not getattr(filter_expr, 'conditional', False):
1274                 raise TypeError('Cannot filter against a non-conditional expression.')
1275             condition = self.build_lookup(
1276                 ['exact'], filter_expr.resolve_expression(self, allow_joins=allow_joins), True
1277             )
1278             clause = self.where_class()
1279             clause.add(condition, AND)
1280             return clause, []
1281         arg, value = filter_expr
1282         if not arg:
1283             raise FieldError("Cannot parse keyword query %r" % arg)
1284         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
1285 
1286         if check_filterable:
1287             self.check_filterable(reffed_expression)
1288 
1289         if not allow_joins and len(parts) > 1:
1290             raise FieldError("Joined field references are not permitted in this query")
1291 
1292         pre_joins = self.alias_refcount.copy()
1293         value = self.resolve_lookup_value(value, can_reuse, allow_joins)
1294         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}
1295 
1296         if check_filterable:
1297             self.check_filterable(value)
1298 
1299         clause = self.where_class()
1300         if reffed_expression:
1301             condition = self.build_lookup(lookups, reffed_expression, value)
1302             clause.add(condition, AND)
1303             return clause, []
1304 
1305         opts = self.get_meta()
1306         alias = self.get_initial_alias()
1307         allow_many = not branch_negated or not split_subq
1308 
1309         try:
1310             join_info = self.setup_joins(
1311                 parts, opts, alias, can_reuse=can_reuse, allow_many=allow_many,
1312                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1313             )
1314 
1315             # Prevent iterator from being consumed by check_related_objects()
1316             if isinstance(value, Iterator):
1317                 value = list(value)
1318             self.check_related_objects(join_info.final_field, value, join_info.opts)
1319 
1320             # split_exclude() needs to know which joins were generated for the
1321             # lookup parts
1322             self._lookup_joins = join_info.joins
1323         except MultiJoin as e:
1324             return self.split_exclude(filter_expr, can_reuse, e.names_with_path)
1325 
1326         # Update used_joins before trimming since they are reused to determine
1327         # which joins could be later promoted to INNER.
1328         used_joins.update(join_info.joins)
1329         targets, alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1330         if can_reuse is not None:
1331             can_reuse.update(join_list)
1332 
1333         if join_info.final_field.is_relation:
1334             # No support for transforms for relational fields
1335             num_lookups = len(lookups)
1336             if num_lookups > 1:
1337                 raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))
1338             if len(targets) == 1:
1339                 col = self._get_col(targets[0], join_info.final_field, alias)
1340             else:
1341                 col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)
1342         else:
1343             col = self._get_col(targets[0], join_info.final_field, alias)
1344 
1345         condition = self.build_lookup(lookups, col, value)
1346         lookup_type = condition.lookup_name
1347         clause.add(condition, AND)
1348 
1349         require_outer = lookup_type == 'isnull' and condition.rhs is True and not current_negated
1350         if current_negated and (lookup_type != 'isnull' or condition.rhs is False) and condition.rhs is not None:
1351             require_outer = True
1352             if lookup_type != 'isnull':
1353                 # The condition added here will be SQL like this:
1354                 # NOT (col IS NOT NULL), where the first NOT is added in
1355                 # upper layers of code. The reason for addition is that if col
1356                 # is null, then col != someval will result in SQL "unknown"
1357                 # which isn't the same as in Python. The Python None handling
1358                 # is wanted, and it can be gotten by
1359                 # (col IS NULL OR col != someval)
1360                 #   <=>
1361                 # NOT (col IS NOT NULL AND col = someval).
1362                 if (
1363                     self.is_nullable(targets[0]) or
1364                     self.alias_map[join_list[-1]].join_type == LOUTER
1365                 ):
1366                     lookup_class = targets[0].get_lookup('isnull')
1367                     col = self._get_col(targets[0], join_info.targets[0], alias)
1368                     clause.add(lookup_class(col, False), AND)
1369                 # If someval is a nullable column, someval IS NOT NULL is
1370                 # added.
1371                 if isinstance(value, Col) and self.is_nullable(value.target):
1372                     lookup_class = value.target.get_lookup('isnull')
1373                     clause.add(lookup_class(value, False), AND)
1374         return clause, used_joins if not require_outer else ()
1375 
1376     def add_filter(self, filter_clause):
1377         self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))
1378 
1379     def add_q(self, q_object):
1380         """
1381         A preprocessor for the internal _add_q(). Responsible for doing final
1382         join promotion.
1383         """
1384         # For join promotion this case is doing an AND for the added q_object
1385         # and existing conditions. So, any existing inner join forces the join
1386         # type to remain inner. Existing outer joins can however be demoted.
1387         # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if
1388         # rel_a doesn't produce any rows, then the whole condition must fail.
1389         # So, demotion is OK.
1390         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}
1391         clause, _ = self._add_q(q_object, self.used_aliases)
1392         if clause:
1393             self.where.add(clause, AND)
1394         self.demote_joins(existing_inner)
1395 
1396     def build_where(self, filter_expr):
1397         return self.build_filter(filter_expr, allow_joins=False)[0]
1398 
1399     def _add_q(self, q_object, used_aliases, branch_negated=False,
1400                current_negated=False, allow_joins=True, split_subq=True,
1401                check_filterable=True):
1402         """Add a Q-object to the current filter."""
1403         connector = q_object.connector
1404         current_negated = current_negated ^ q_object.negated
1405         branch_negated = branch_negated or q_object.negated
1406         target_clause = self.where_class(connector=connector,
1407                                          negated=q_object.negated)
1408         joinpromoter = JoinPromoter(q_object.connector, len(q_object.children), current_negated)
1409         for child in q_object.children:
1410             child_clause, needed_inner = self.build_filter(
1411                 child, can_reuse=used_aliases, branch_negated=branch_negated,
1412                 current_negated=current_negated, allow_joins=allow_joins,
1413                 split_subq=split_subq, check_filterable=check_filterable,
1414             )
1415             joinpromoter.add_votes(needed_inner)
1416             if child_clause:
1417                 target_clause.add(child_clause, connector)
1418         needed_inner = joinpromoter.update_join_types(self)
1419         return target_clause, needed_inner
1420 
1421     def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
1422         """Add a FilteredRelation object to the current filter."""
1423         connector = q_object.connector
1424         current_negated ^= q_object.negated
1425         branch_negated = branch_negated or q_object.negated
1426         target_clause = self.where_class(connector=connector, negated=q_object.negated)
1427         for child in q_object.children:
1428             if isinstance(child, Node):
1429                 child_clause = self.build_filtered_relation_q(
1430                     child, reuse=reuse, branch_negated=branch_negated,
1431                     current_negated=current_negated,
1432                 )
1433             else:
1434                 child_clause, _ = self.build_filter(
1435                     child, can_reuse=reuse, branch_negated=branch_negated,
1436                     current_negated=current_negated,
1437                     allow_joins=True, split_subq=False,
1438                     reuse_with_filtered_relation=True,
1439                 )
1440             target_clause.add(child_clause, connector)
1441         return target_clause
1442 
1443     def add_filtered_relation(self, filtered_relation, alias):
1444         filtered_relation.alias = alias
1445         lookups = dict(get_children_from_q(filtered_relation.condition))
1446         relation_lookup_parts, relation_field_parts, _ = self.solve_lookup_type(filtered_relation.relation_name)
1447         if relation_lookup_parts:
1448             raise ValueError(
1449                 "FilteredRelation's relation_name cannot contain lookups "
1450                 "(got %r)." % filtered_relation.relation_name
1451             )
1452         for lookup in chain(lookups):
1453             lookup_parts, lookup_field_parts, _ = self.solve_lookup_type(lookup)
1454             shift = 2 if not lookup_parts else 1
1455             lookup_field_path = lookup_field_parts[:-shift]
1456             for idx, lookup_field_part in enumerate(lookup_field_path):
1457                 if len(relation_field_parts) > idx:
1458                     if relation_field_parts[idx] != lookup_field_part:
1459                         raise ValueError(
1460                             "FilteredRelation's condition doesn't support "
1461                             "relations outside the %r (got %r)."
1462                             % (filtered_relation.relation_name, lookup)
1463                         )
1464                 else:
1465                     raise ValueError(
1466                         "FilteredRelation's condition doesn't support nested "
1467                         "relations deeper than the relation_name (got %r for "
1468                         "%r)." % (lookup, filtered_relation.relation_name)
1469                     )
1470         self._filtered_relations[filtered_relation.alias] = filtered_relation
1471 
1472     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
1473         """
1474         Walk the list of names and turns them into PathInfo tuples. A single
1475         name in 'names' can generate multiple PathInfos (m2m, for example).
1476 
1477         'names' is the path of names to travel, 'opts' is the model Options we
1478         start the name resolving from, 'allow_many' is as for setup_joins().
1479         If fail_on_missing is set to True, then a name that can't be resolved
1480         will generate a FieldError.
1481 
1482         Return a list of PathInfo tuples. In addition return the final field
1483         (the last used join field) and target (which is a field guaranteed to
1484         contain the same value as the final field). Finally, return those names
1485         that weren't found (which are likely transforms and the final lookup).
1486         """
1487         path, names_with_path = [], []
1488         for pos, name in enumerate(names):
1489             cur_names_with_path = (name, [])
1490             if name == 'pk':
1491                 name = opts.pk.name
1492 
1493             field = None
1494             filtered_relation = None
1495             try:
1496                 field = opts.get_field(name)
1497             except FieldDoesNotExist:
1498                 if name in self.annotation_select:
1499                     field = self.annotation_select[name].output_field
1500                 elif name in self._filtered_relations and pos == 0:
1501                     filtered_relation = self._filtered_relations[name]
1502                     if LOOKUP_SEP in filtered_relation.relation_name:
1503                         parts = filtered_relation.relation_name.split(LOOKUP_SEP)
1504                         filtered_relation_path, field, _, _ = self.names_to_path(
1505                             parts, opts, allow_many, fail_on_missing,
1506                         )
1507                         path.extend(filtered_relation_path[:-1])
1508                     else:
1509                         field = opts.get_field(filtered_relation.relation_name)
1510             if field is not None:
1511                 # Fields that contain one-to-many relations with a generic
1512                 # model (like a GenericForeignKey) cannot generate reverse
1513                 # relations and therefore cannot be used for reverse querying.
1514                 if field.is_relation and not field.related_model:
1515                     raise FieldError(
1516                         "Field %r does not generate an automatic reverse "
1517                         "relation and therefore cannot be used for reverse "
1518                         "querying. If it is a GenericForeignKey, consider "
1519                         "adding a GenericRelation." % name
1520                     )
1521                 try:
1522                     model = field.model._meta.concrete_model
1523                 except AttributeError:
1524                     # QuerySet.annotate() may introduce fields that aren't
1525                     # attached to a model.
1526                     model = None
1527             else:
1528                 # We didn't find the current field, so move position back
1529                 # one step.
1530                 pos -= 1
1531                 if pos == -1 or fail_on_missing:
1532                     available = sorted([
1533                         *get_field_names_from_opts(opts),
1534                         *self.annotation_select,
1535                         *self._filtered_relations,
1536                     ])
1537                     raise FieldError("Cannot resolve keyword '%s' into field. "
1538                                      "Choices are: %s" % (name, ", ".join(available)))
1539                 break
1540             # Check if we need any joins for concrete inheritance cases (the
1541             # field lives in parent, but we are currently in one of its
1542             # children)
1543             if model is not opts.model:
1544                 path_to_parent = opts.get_path_to_parent(model)
1545                 if path_to_parent:
1546                     path.extend(path_to_parent)
1547                     cur_names_with_path[1].extend(path_to_parent)
1548                     opts = path_to_parent[-1].to_opts
1549             if hasattr(field, 'get_path_info'):
1550                 pathinfos = field.get_path_info(filtered_relation)
1551                 if not allow_many:
1552                     for inner_pos, p in enumerate(pathinfos):
1553                         if p.m2m:
1554                             cur_names_with_path[1].extend(pathinfos[0:inner_pos + 1])
1555                             names_with_path.append(cur_names_with_path)
1556                             raise MultiJoin(pos + 1, names_with_path)
1557                 last = pathinfos[-1]
1558                 path.extend(pathinfos)
1559                 final_field = last.join_field
1560                 opts = last.to_opts
1561                 targets = last.target_fields
1562                 cur_names_with_path[1].extend(pathinfos)
1563                 names_with_path.append(cur_names_with_path)
1564             else:
1565                 # Local non-relational field.
1566                 final_field = field
1567                 targets = (field,)
1568                 if fail_on_missing and pos + 1 != len(names):
1569                     raise FieldError(
1570                         "Cannot resolve keyword %r into field. Join on '%s'"
1571                         " not permitted." % (names[pos + 1], name))
1572                 break
1573         return path, final_field, targets, names[pos + 1:]
1574 
1575     def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True,
1576                     reuse_with_filtered_relation=False):
1577         """
1578         Compute the necessary table joins for the passage through the fields
1579         given in 'names'. 'opts' is the Options class for the current model
1580         (which gives the table we are starting from), 'alias' is the alias for
1581         the table to start the joining from.
1582 
1583         The 'can_reuse' defines the reverse foreign key joins we can reuse. It
1584         can be None in which case all joins are reusable or a set of aliases
1585         that can be reused. Note that non-reverse foreign keys are always
1586         reusable when using setup_joins().
1587 
1588         The 'reuse_with_filtered_relation' can be used to force 'can_reuse'
1589         parameter and force the relation on the given connections.
1590 
1591         If 'allow_many' is False, then any reverse foreign key seen will
1592         generate a MultiJoin exception.
1593 
1594         Return the final field involved in the joins, the target field (used
1595         for any 'where' constraint), the final 'opts' value, the joins, the
1596         field path traveled to generate the joins, and a transform function
1597         that takes a field and alias and is equivalent to `field.get_col(alias)`
1598         in the simple case but wraps field transforms if they were included in
1599         names.
1600 
1601         The target field is the field containing the concrete value. Final
1602         field can be something different, for example foreign key pointing to
1603         that value. Final field is needed for example in some value
1604         conversions (convert 'obj' in fk__id=obj to pk val using the foreign
1605         key field for example).
1606         """
1607         joins = [alias]
1608         # The transform can't be applied yet, as joins must be trimmed later.
1609         # To avoid making every caller of this method look up transforms
1610         # directly, compute transforms here and create a partial that converts
1611         # fields to the appropriate wrapped version.
1612 
1613         def final_transformer(field, alias):
1614             return field.get_col(alias)
1615 
1616         # Try resolving all the names as fields first. If there's an error,
1617         # treat trailing names as lookups until a field can be resolved.
1618         last_field_exception = None
1619         for pivot in range(len(names), 0, -1):
1620             try:
1621                 path, final_field, targets, rest = self.names_to_path(
1622                     names[:pivot], opts, allow_many, fail_on_missing=True,
1623                 )
1624             except FieldError as exc:
1625                 if pivot == 1:
1626                     # The first item cannot be a lookup, so it's safe
1627                     # to raise the field error here.
1628                     raise
1629                 else:
1630                     last_field_exception = exc
1631             else:
1632                 # The transforms are the remaining items that couldn't be
1633                 # resolved into fields.
1634                 transforms = names[pivot:]
1635                 break
1636         for name in transforms:
1637             def transform(field, alias, *, name, previous):
1638                 try:
1639                     wrapped = previous(field, alias)
1640                     return self.try_transform(wrapped, name)
1641                 except FieldError:
1642                     # FieldError is raised if the transform doesn't exist.
1643                     if isinstance(final_field, Field) and last_field_exception:
1644                         raise last_field_exception
1645                     else:
1646                         raise
1647             final_transformer = functools.partial(transform, name=name, previous=final_transformer)
1648         # Then, add the path to the query's joins. Note that we can't trim
1649         # joins at this stage - we will need the information about join type
1650         # of the trimmed joins.
1651         for join in path:
1652             if join.filtered_relation:
1653                 filtered_relation = join.filtered_relation.clone()
1654                 table_alias = filtered_relation.alias
1655             else:
1656                 filtered_relation = None
1657                 table_alias = None
1658             opts = join.to_opts
1659             if join.direct:
1660                 nullable = self.is_nullable(join.join_field)
1661             else:
1662                 nullable = True
1663             connection = Join(
1664                 opts.db_table, alias, table_alias, INNER, join.join_field,
1665                 nullable, filtered_relation=filtered_relation,
1666             )
1667             reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None
1668             alias = self.join(
1669                 connection, reuse=reuse,
1670                 reuse_with_filtered_relation=reuse_with_filtered_relation,
1671             )
1672             joins.append(alias)
1673             if filtered_relation:
1674                 filtered_relation.path = joins[:]
1675         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)
1676 
1677     def trim_joins(self, targets, joins, path):
1678         """
1679         The 'target' parameter is the final field being joined to, 'joins'
1680         is the full list of join aliases. The 'path' contain the PathInfos
1681         used to create the joins.
1682 
1683         Return the final target field and table alias and the new active
1684         joins.
1685 
1686         Always trim any direct join if the target column is already in the
1687         previous table. Can't trim reverse joins as it's unknown if there's
1688         anything on the other side of the join.
1689         """
1690         joins = joins[:]
1691         for pos, info in enumerate(reversed(path)):
1692             if len(joins) == 1 or not info.direct:
1693                 break
1694             if info.filtered_relation:
1695                 break
1696             join_targets = {t.column for t in info.join_field.foreign_related_fields}
1697             cur_targets = {t.column for t in targets}
1698             if not cur_targets.issubset(join_targets):
1699                 break
1700             targets_dict = {r[1].column: r[0] for r in info.join_field.related_fields if r[1].column in cur_targets}
1701             targets = tuple(targets_dict[t.column] for t in targets)
1702             self.unref_alias(joins.pop())
1703         return targets, joins[-1], joins
1704 
1705     @classmethod
1706     def _gen_cols(cls, exprs):
1707         for expr in exprs:
1708             if isinstance(expr, Col):
1709                 yield expr
1710             else:
1711                 yield from cls._gen_cols(expr.get_source_expressions())
1712 
1713     @classmethod
1714     def _gen_col_aliases(cls, exprs):
1715         yield from (expr.alias for expr in cls._gen_cols(exprs))
1716 
1717     def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False):
1718         if not allow_joins and LOOKUP_SEP in name:
1719             raise FieldError("Joined field references are not permitted in this query")
1720         annotation = self.annotations.get(name)
1721         if annotation is not None:
1722             if not allow_joins:
1723                 for alias in self._gen_col_aliases([annotation]):
1724                     if isinstance(self.alias_map[alias], Join):
1725                         raise FieldError(
1726                             'Joined field references are not permitted in '
1727                             'this query'
1728                         )
1729             if summarize:
1730                 # Summarize currently means we are doing an aggregate() query
1731                 # which is executed as a wrapped subquery if any of the
1732                 # aggregate() elements reference an existing annotation. In
1733                 # that case we need to return a Ref to the subquery's annotation.
1734                 if name not in self.annotation_select:
1735                     raise FieldError(
1736                         "Cannot aggregate over the '%s' alias. Use annotate() "
1737                         "to promote it." % name
1738                     )
1739                 return Ref(name, self.annotation_select[name])
1740             else:
1741                 return annotation
1742         else:
1743             field_list = name.split(LOOKUP_SEP)
1744             join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)
1745             targets, final_alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1746             if not allow_joins and len(join_list) > 1:
1747                 raise FieldError('Joined field references are not permitted in this query')
1748             if len(targets) > 1:
1749                 raise FieldError("Referencing multicolumn fields with F() objects "
1750                                  "isn't supported")
1751             # Verify that the last lookup in name is a field or a transform:
1752             # transform_function() raises FieldError if not.
1753             join_info.transform_function(targets[0], final_alias)
1754             if reuse is not None:
1755                 reuse.update(join_list)
1756             return self._get_col(targets[0], join_info.targets[0], join_list[-1])
1757 
1758     def split_exclude(self, filter_expr, can_reuse, names_with_path):
1759         """
1760         When doing an exclude against any kind of N-to-many relation, we need
1761         to use a subquery. This method constructs the nested query, given the
1762         original exclude filter (filter_expr) and the portion up to the first
1763         N-to-many relation field.
1764 
1765         For example, if the origin filter is ~Q(child__name='foo'), filter_expr
1766         is ('child__name', 'foo') and can_reuse is a set of joins usable for
1767         filters in the original query.
1768 
1769         We will turn this into equivalent of:
1770             WHERE NOT EXISTS(
1771                 SELECT 1
1772                 FROM child
1773                 WHERE name = 'foo' AND child.parent_id = parent.id
1774                 LIMIT 1
1775             )
1776         """
1777         filter_lhs, filter_rhs = filter_expr
1778         if isinstance(filter_rhs, OuterRef):
1779             filter_expr = (filter_lhs, OuterRef(filter_rhs))
1780         elif isinstance(filter_rhs, F):
1781             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
1782         # Generate the inner query.
1783         query = Query(self.model)
1784         query._filtered_relations = self._filtered_relations
1785         query.add_filter(filter_expr)
1786         query.clear_ordering(True)
1787         # Try to have as simple as possible subquery -> trim leading joins from
1788         # the subquery.
1789         trimmed_prefix, contains_louter = query.trim_start(names_with_path)
1790 
1791         col = query.select[0]
1792         select_field = col.target
1793         alias = col.alias
1794         if alias in can_reuse:
1795             pk = select_field.model._meta.pk
1796             # Need to add a restriction so that outer query's filters are in effect for
1797             # the subquery, too.
1798             query.bump_prefix(self)
1799             lookup_class = select_field.get_lookup('exact')
1800             # Note that the query.select[0].alias is different from alias
1801             # due to bump_prefix above.
1802             lookup = lookup_class(pk.get_col(query.select[0].alias),
1803                                   pk.get_col(alias))
1804             query.where.add(lookup, AND)
1805             query.external_aliases[alias] = True
1806 
1807         lookup_class = select_field.get_lookup('exact')
1808         lookup = lookup_class(col, ResolvedOuterRef(trimmed_prefix))
1809         query.where.add(lookup, AND)
1810         condition, needed_inner = self.build_filter(Exists(query))
1811 
1812         if contains_louter:
1813             or_null_condition, _ = self.build_filter(
1814                 ('%s__isnull' % trimmed_prefix, True),
1815                 current_negated=True, branch_negated=True, can_reuse=can_reuse)
1816             condition.add(or_null_condition, OR)
1817             # Note that the end result will be:
1818             # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.
1819             # This might look crazy but due to how IN works, this seems to be
1820             # correct. If the IS NOT NULL check is removed then outercol NOT
1821             # IN will return UNKNOWN. If the IS NULL check is removed, then if
1822             # outercol IS NULL we will not match the row.
1823         return condition, needed_inner
1824 
1825     def set_empty(self):
1826         self.where.add(NothingNode(), AND)
1827         for query in self.combined_queries:
1828             query.set_empty()
1829 
1830     def is_empty(self):
1831         return any(isinstance(c, NothingNode) for c in self.where.children)
1832 
1833     def set_limits(self, low=None, high=None):
1834         """
1835         Adjust the limits on the rows retrieved. Use low/high to set these,
1836         as it makes it more Pythonic to read and write. When the SQL query is
1837         created, convert them to the appropriate offset and limit values.
1838 
1839         Apply any limits passed in here to the existing constraints. Add low
1840         to the current low value and clamp both to any existing high value.
1841         """
1842         if high is not None:
1843             if self.high_mark is not None:
1844                 self.high_mark = min(self.high_mark, self.low_mark + high)
1845             else:
1846                 self.high_mark = self.low_mark + high
1847         if low is not None:
1848             if self.high_mark is not None:
1849                 self.low_mark = min(self.high_mark, self.low_mark + low)
1850             else:
1851                 self.low_mark = self.low_mark + low
1852 
1853         if self.low_mark == self.high_mark:
1854             self.set_empty()
1855 
1856     def clear_limits(self):
1857         """Clear any existing limits."""
1858         self.low_mark, self.high_mark = 0, None
1859 
1860     @property
1861     def is_sliced(self):
1862         return self.low_mark != 0 or self.high_mark is not None
1863 
1864     def has_limit_one(self):
1865         return self.high_mark is not None and (self.high_mark - self.low_mark) == 1
1866 
1867     def can_filter(self):
1868         """
1869         Return True if adding filters to this instance is still possible.
1870 
1871         Typically, this means no limits or offsets have been put on the results.
1872         """
1873         return not self.is_sliced
1874 
1875     def clear_select_clause(self):
1876         """Remove all fields from SELECT clause."""
1877         self.select = ()
1878         self.default_cols = False
1879         self.select_related = False
1880         self.set_extra_mask(())
1881         self.set_annotation_mask(())
1882 
1883     def clear_select_fields(self):
1884         """
1885         Clear the list of fields to select (but not extra_select columns).
1886         Some queryset types completely replace any existing list of select
1887         columns.
1888         """
1889         self.select = ()
1890         self.values_select = ()
1891 
1892     def add_select_col(self, col):
1893         self.select += col,
1894         self.values_select += col.output_field.name,
1895 
1896     def set_select(self, cols):
1897         self.default_cols = False
1898         self.select = tuple(cols)
1899 
1900     def add_distinct_fields(self, *field_names):
1901         """
1902         Add and resolve the given fields to the query's "distinct on" clause.
1903         """
1904         self.distinct_fields = field_names
1905         self.distinct = True
1906 
1907     def add_fields(self, field_names, allow_m2m=True):
1908         """
1909         Add the given (model) fields to the select set. Add the field names in
1910         the order specified.
1911         """
1912         alias = self.get_initial_alias()
1913         opts = self.get_meta()
1914 
1915         try:
1916             cols = []
1917             for name in field_names:
1918                 # Join promotion note - we must not remove any rows here, so
1919                 # if there is no existing joins, use outer join.
1920                 join_info = self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m)
1921                 targets, final_alias, joins = self.trim_joins(
1922                     join_info.targets,
1923                     join_info.joins,
1924                     join_info.path,
1925                 )
1926                 for target in targets:
1927                     cols.append(join_info.transform_function(target, final_alias))
1928             if cols:
1929                 self.set_select(cols)
1930         except MultiJoin:
1931             raise FieldError("Invalid field name: '%s'" % name)
1932         except FieldError:
1933             if LOOKUP_SEP in name:
1934                 # For lookups spanning over relationships, show the error
1935                 # from the model on which the lookup failed.
1936                 raise
1937             elif name in self.annotations:
1938                 raise FieldError(
1939                     "Cannot select the '%s' alias. Use annotate() to promote "
1940                     "it." % name
1941                 )
1942             else:
1943                 names = sorted([
1944                     *get_field_names_from_opts(opts), *self.extra,
1945                     *self.annotation_select, *self._filtered_relations
1946                 ])
1947                 raise FieldError("Cannot resolve keyword %r into field. "
1948                                  "Choices are: %s" % (name, ", ".join(names)))
1949 
1950     def add_ordering(self, *ordering):
1951         """
1952         Add items from the 'ordering' sequence to the query's "order by"
1953         clause. These items are either field names (not column names) --
1954         possibly with a direction prefix ('-' or '?') -- or OrderBy
1955         expressions.
1956 
1957         If 'ordering' is empty, clear all ordering from the query.
1958         """
1959         errors = []
1960         for item in ordering:
1961             if isinstance(item, str):
1962                 if '.' in item:
1963                     warnings.warn(
1964                         'Passing column raw column aliases to order_by() is '
1965                         'deprecated. Wrap %r in a RawSQL expression before '
1966                         'passing it to order_by().' % item,
1967                         category=RemovedInDjango40Warning,
1968                         stacklevel=3,
1969                     )
1970                     continue
1971                 if item == '?':
1972                     continue
1973                 if item.startswith('-'):
1974                     item = item[1:]
1975                 if item in self.annotations:
1976                     continue
1977                 if self.extra and item in self.extra:
1978                     continue
1979                 # names_to_path() validates the lookup. A descriptive
1980                 # FieldError will be raise if it's not.
1981                 self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)
1982             elif not hasattr(item, 'resolve_expression'):
1983                 errors.append(item)
1984             if getattr(item, 'contains_aggregate', False):
1985                 raise FieldError(
1986                     'Using an aggregate in order_by() without also including '
1987                     'it in annotate() is not allowed: %s' % item
1988                 )
1989         if errors:
1990             raise FieldError('Invalid order_by arguments: %s' % errors)
1991         if ordering:
1992             self.order_by += ordering
1993         else:
1994             self.default_ordering = False
1995 
1996     def clear_ordering(self, force_empty):
1997         """
1998         Remove any ordering settings. If 'force_empty' is True, there will be
1999         no ordering in the resulting query (not even the model's default).
2000         """
2001         self.order_by = ()
2002         self.extra_order_by = ()
2003         if force_empty:
2004             self.default_ordering = False
2005 
2006     def set_group_by(self, allow_aliases=True):
2007         """
2008         Expand the GROUP BY clause required by the query.
2009 
2010         This will usually be the set of all non-aggregate fields in the
2011         return data. If the database backend supports grouping by the
2012         primary key, and the query would be equivalent, the optimization
2013         will be made automatically.
2014         """
2015         # Column names from JOINs to check collisions with aliases.
2016         if allow_aliases:
2017             column_names = set()
2018             seen_models = set()
2019             for join in list(self.alias_map.values())[1:]:  # Skip base table.
2020                 model = join.join_field.related_model
2021                 if model not in seen_models:
2022                     column_names.update({
2023                         field.column
2024                         for field in model._meta.local_concrete_fields
2025                     })
2026                     seen_models.add(model)
2027 
2028         group_by = list(self.select)
2029         if self.annotation_select:
2030             for alias, annotation in self.annotation_select.items():
2031                 signature = inspect.signature(annotation.get_group_by_cols)
2032                 if 'alias' not in signature.parameters:
2033                     annotation_class = annotation.__class__
2034                     msg = (
2035                         '`alias=None` must be added to the signature of '
2036                         '%s.%s.get_group_by_cols().'
2037                     ) % (annotation_class.__module__, annotation_class.__qualname__)
2038                     warnings.warn(msg, category=RemovedInDjango40Warning)
2039                     group_by_cols = annotation.get_group_by_cols()
2040                 else:
2041                     if not allow_aliases or alias in column_names:
2042                         alias = None
2043                     group_by_cols = annotation.get_group_by_cols(alias=alias)
2044                 group_by.extend(group_by_cols)
2045         self.group_by = tuple(group_by)
2046 
2047     def add_select_related(self, fields):
2048         """
2049         Set up the select_related data structure so that we only select
2050         certain related models (as opposed to all models, when
2051         self.select_related=True).
2052         """
2053         if isinstance(self.select_related, bool):
2054             field_dict = {}
2055         else:
2056             field_dict = self.select_related
2057         for field in fields:
2058             d = field_dict
2059             for part in field.split(LOOKUP_SEP):
2060                 d = d.setdefault(part, {})
2061         self.select_related = field_dict
2062 
2063     def add_extra(self, select, select_params, where, params, tables, order_by):
2064         """
2065         Add data to the various extra_* attributes for user-created additions
2066         to the query.
2067         """
2068         if select:
2069             # We need to pair any placeholder markers in the 'select'
2070             # dictionary with their parameters in 'select_params' so that
2071             # subsequent updates to the select dictionary also adjust the
2072             # parameters appropriately.
2073             select_pairs = {}
2074             if select_params:
2075                 param_iter = iter(select_params)
2076             else:
2077                 param_iter = iter([])
2078             for name, entry in select.items():
2079                 entry = str(entry)
2080                 entry_params = []
2081                 pos = entry.find("%s")
2082                 while pos != -1:
2083                     if pos == 0 or entry[pos - 1] != '%':
2084                         entry_params.append(next(param_iter))
2085                     pos = entry.find("%s", pos + 2)
2086                 select_pairs[name] = (entry, entry_params)
2087             self.extra.update(select_pairs)
2088         if where or params:
2089             self.where.add(ExtraWhere(where, params), AND)
2090         if tables:
2091             self.extra_tables += tuple(tables)
2092         if order_by:
2093             self.extra_order_by = order_by
2094 
2095     def clear_deferred_loading(self):
2096         """Remove any fields from the deferred loading set."""
2097         self.deferred_loading = (frozenset(), True)
2098 
2099     def add_deferred_loading(self, field_names):
2100         """
2101         Add the given list of model field names to the set of fields to
2102         exclude from loading from the database when automatic column selection
2103         is done. Add the new field names to any existing field names that
2104         are deferred (or removed from any existing field names that are marked
2105         as the only ones for immediate loading).
2106         """
2107         # Fields on related models are stored in the literal double-underscore
2108         # format, so that we can use a set datastructure. We do the foo__bar
2109         # splitting and handling when computing the SQL column names (as part of
2110         # get_columns()).
2111         existing, defer = self.deferred_loading
2112         if defer:
2113             # Add to existing deferred names.
2114             self.deferred_loading = existing.union(field_names), True
2115         else:
2116             # Remove names from the set of any existing "immediate load" names.
2117             self.deferred_loading = existing.difference(field_names), False
2118 
2119     def add_immediate_loading(self, field_names):
2120         """
2121         Add the given list of model field names to the set of fields to
2122         retrieve when the SQL is executed ("immediate loading" fields). The
2123         field names replace any existing immediate loading field names. If
2124         there are field names already specified for deferred loading, remove
2125         those names from the new field_names before storing the new names
2126         for immediate loading. (That is, immediate loading overrides any
2127         existing immediate values, but respects existing deferrals.)
2128         """
2129         existing, defer = self.deferred_loading
2130         field_names = set(field_names)
2131         if 'pk' in field_names:
2132             field_names.remove('pk')
2133             field_names.add(self.get_meta().pk.name)
2134 
2135         if defer:
2136             # Remove any existing deferred names from the current set before
2137             # setting the new names.
2138             self.deferred_loading = field_names.difference(existing), False
2139         else:
2140             # Replace any existing "immediate load" field names.
2141             self.deferred_loading = frozenset(field_names), False
2142 
2143     def get_loaded_field_names(self):
2144         """
2145         If any fields are marked to be deferred, return a dictionary mapping
2146         models to a set of names in those fields that will be loaded. If a
2147         model is not in the returned dictionary, none of its fields are
2148         deferred.
2149 
2150         If no fields are marked for deferral, return an empty dictionary.
2151         """
2152         # We cache this because we call this function multiple times
2153         # (compiler.fill_related_selections, query.iterator)
2154         try:
2155             return self._loaded_field_names_cache
2156         except AttributeError:
2157             collection = {}
2158             self.deferred_to_data(collection, self.get_loaded_field_names_cb)
2159             self._loaded_field_names_cache = collection
2160             return collection
2161 
2162     def get_loaded_field_names_cb(self, target, model, fields):
2163         """Callback used by get_deferred_field_names()."""
2164         target[model] = {f.attname for f in fields}
2165 
2166     def set_annotation_mask(self, names):
2167         """Set the mask of annotations that will be returned by the SELECT."""
2168         if names is None:
2169             self.annotation_select_mask = None
2170         else:
2171             self.annotation_select_mask = set(names)
2172         self._annotation_select_cache = None
2173 
2174     def append_annotation_mask(self, names):
2175         if self.annotation_select_mask is not None:
2176             self.set_annotation_mask(self.annotation_select_mask.union(names))
2177 
2178     def set_extra_mask(self, names):
2179         """
2180         Set the mask of extra select items that will be returned by SELECT.
2181         Don't remove them from the Query since they might be used later.
2182         """
2183         if names is None:
2184             self.extra_select_mask = None
2185         else:
2186             self.extra_select_mask = set(names)
2187         self._extra_select_cache = None
2188 
2189     def set_values(self, fields):
2190         self.select_related = False
2191         self.clear_deferred_loading()
2192         self.clear_select_fields()
2193 
2194         if fields:
2195             field_names = []
2196             extra_names = []
2197             annotation_names = []
2198             if not self.extra and not self.annotations:
2199                 # Shortcut - if there are no extra or annotations, then
2200                 # the values() clause must be just field names.
2201                 field_names = list(fields)
2202             else:
2203                 self.default_cols = False
2204                 for f in fields:
2205                     if f in self.extra_select:
2206                         extra_names.append(f)
2207                     elif f in self.annotation_select:
2208                         annotation_names.append(f)
2209                     else:
2210                         field_names.append(f)
2211             self.set_extra_mask(extra_names)
2212             self.set_annotation_mask(annotation_names)
2213         else:
2214             field_names = [f.attname for f in self.model._meta.concrete_fields]
2215         # Selected annotations must be known before setting the GROUP BY
2216         # clause.
2217         if self.group_by is True:
2218             self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
2219             # Disable GROUP BY aliases to avoid orphaning references to the
2220             # SELECT clause which is about to be cleared.
2221             self.set_group_by(allow_aliases=False)
2222             self.clear_select_fields()
2223         elif self.group_by:
2224             # Resolve GROUP BY annotation references if they are not part of
2225             # the selected fields anymore.
2226             group_by = []
2227             for expr in self.group_by:
2228                 if isinstance(expr, Ref) and expr.refs not in field_names:
2229                     expr = self.annotations[expr.refs]
2230                 group_by.append(expr)
2231             self.group_by = tuple(group_by)
2232 
2233         self.values_select = tuple(field_names)
2234         self.add_fields(field_names, True)
2235 
2236     @property
2237     def annotation_select(self):
2238         """
2239         Return the dictionary of aggregate columns that are not masked and
2240         should be used in the SELECT clause. Cache this result for performance.
2241         """
2242         if self._annotation_select_cache is not None:
2243             return self._annotation_select_cache
2244         elif not self.annotations:
2245             return {}
2246         elif self.annotation_select_mask is not None:
2247             self._annotation_select_cache = {
2248                 k: v for k, v in self.annotations.items()
2249                 if k in self.annotation_select_mask
2250             }
2251             return self._annotation_select_cache
2252         else:
2253             return self.annotations
2254 
2255     @property
2256     def extra_select(self):
2257         if self._extra_select_cache is not None:
2258             return self._extra_select_cache
2259         if not self.extra:
2260             return {}
2261         elif self.extra_select_mask is not None:
2262             self._extra_select_cache = {
2263                 k: v for k, v in self.extra.items()
2264                 if k in self.extra_select_mask
2265             }
2266             return self._extra_select_cache
2267         else:
2268             return self.extra
2269 
2270     def trim_start(self, names_with_path):
2271         """
2272         Trim joins from the start of the join path. The candidates for trim
2273         are the PathInfos in names_with_path structure that are m2m joins.
2274 
2275         Also set the select column so the start matches the join.
2276 
2277         This method is meant to be used for generating the subquery joins &
2278         cols in split_exclude().
2279 
2280         Return a lookup usable for doing outerq.filter(lookup=self) and a
2281         boolean indicating if the joins in the prefix contain a LEFT OUTER join.
2282         _"""
2283         all_paths = []
2284         for _, paths in names_with_path:
2285             all_paths.extend(paths)
2286         contains_louter = False
2287         # Trim and operate only on tables that were generated for
2288         # the lookup part of the query. That is, avoid trimming
2289         # joins generated for F() expressions.
2290         lookup_tables = [
2291             t for t in self.alias_map
2292             if t in self._lookup_joins or t == self.base_table
2293         ]
2294         for trimmed_paths, path in enumerate(all_paths):
2295             if path.m2m:
2296                 break
2297             if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type == LOUTER:
2298                 contains_louter = True
2299             alias = lookup_tables[trimmed_paths]
2300             self.unref_alias(alias)
2301         # The path.join_field is a Rel, lets get the other side's field
2302         join_field = path.join_field.field
2303         # Build the filter prefix.
2304         paths_in_prefix = trimmed_paths
2305         trimmed_prefix = []
2306         for name, path in names_with_path:
2307             if paths_in_prefix - len(path) < 0:
2308                 break
2309             trimmed_prefix.append(name)
2310             paths_in_prefix -= len(path)
2311         trimmed_prefix.append(
2312             join_field.foreign_related_fields[0].name)
2313         trimmed_prefix = LOOKUP_SEP.join(trimmed_prefix)
2314         # Lets still see if we can trim the first join from the inner query
2315         # (that is, self). We can't do this for:
2316         # - LEFT JOINs because we would miss those rows that have nothing on
2317         #   the outer side,
2318         # - INNER JOINs from filtered relations because we would miss their
2319         #   filters.
2320         first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]
2321         if first_join.join_type != LOUTER and not first_join.filtered_relation:
2322             select_fields = [r[0] for r in join_field.related_fields]
2323             select_alias = lookup_tables[trimmed_paths + 1]
2324             self.unref_alias(lookup_tables[trimmed_paths])
2325             extra_restriction = join_field.get_extra_restriction(
2326                 self.where_class, None, lookup_tables[trimmed_paths + 1])
2327             if extra_restriction:
2328                 self.where.add(extra_restriction, AND)
2329         else:
2330             # TODO: It might be possible to trim more joins from the start of the
2331             # inner query if it happens to have a longer join chain containing the
2332             # values in select_fields. Lets punt this one for now.
2333             select_fields = [r[1] for r in join_field.related_fields]
2334             select_alias = lookup_tables[trimmed_paths]
2335         # The found starting point is likely a Join instead of a BaseTable reference.
2336         # But the first entry in the query's FROM clause must not be a JOIN.
2337         for table in self.alias_map:
2338             if self.alias_refcount[table] > 0:
2339                 self.alias_map[table] = BaseTable(self.alias_map[table].table_name, table)
2340                 break
2341         self.set_select([f.get_col(select_alias) for f in select_fields])
2342         return trimmed_prefix, contains_louter
2343 
2344     def is_nullable(self, field):
2345         """
2346         Check if the given field should be treated as nullable.
2347 
2348         Some backends treat '' as null and Django treats such fields as
2349         nullable for those backends. In such situations field.null can be
2350         False even if we should treat the field as nullable.
2351         """
2352         # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have
2353         # (nor should it have) knowledge of which connection is going to be
2354         # used. The proper fix would be to defer all decisions where
2355         # is_nullable() is needed to the compiler stage, but that is not easy
2356         # to do currently.
2357         return (
2358             connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
2359             field.empty_strings_allowed
2360         ) or field.null

</code><intended_behavior>To resolve the issue, the code should be modified to correctly handle annotations that contain subqueries within GROUP BY clauses. Specifically, the patch suggests adjusting the condition to include annotation_names when constructing the group_by list. This change aims to ensure that:

  - Annotated fields, especially those involving subqueries, are recognized and handled correctly in the GROUP_BY clause construction process. This involves using the alias of annotated subqueries directly rather than treating them as new expressions to be evaluated or incorrectly adding fields to the GROUP BY clause that shouldn't be there.
  - The existing functionality where annotations without subqueries and other groupings are handled correctly should remain intact. The change should specifically address the mishandling of subquery annotations without disrupting the valid processing of other types of annotations or expressions within the GROUP_BY clause.

The overall intended behavior is to ensure accurate and efficient execution of queries involving complex annotations and groupings, upholding the ORM's ability to express and execute sophisticated queries without resorting to raw SQL or encountering incorrect results.</intended_behavior>]
2025-10-18 00:50:49.353 | INFO     | Overall retry 0 succeeded; ending workflow
2025-10-18 00:50:49.353 | INFO     | Search-only: skipping patch selection
2025-10-18 00:50:49.500 | INFO     | Task django__django-13617 completed successfully.
2025-10-18 00:50:49.501 | INFO     | No patch generated. You can try running ACR again.
