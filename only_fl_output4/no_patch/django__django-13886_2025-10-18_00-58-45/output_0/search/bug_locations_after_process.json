[
    {
        "rel_file_path": "django/db/models/sql/query.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/db/models/sql/query.py",
        "start": 1713,
        "end": 1718,
        "class_name": "Query",
        "method_name": "_gen_cols",
        "code": "1713     def _gen_cols(cls, exprs):\n1714         for expr in exprs:\n1715             if isinstance(expr, Col):\n1716                 yield expr\n1717             else:\n1718                 yield from cls._gen_cols(expr.get_source_expressions())\n",
        "intended_behavior": "While the `_gen_cols` method effectively iterates through expressions to yield column objects, the resolution lacks a step for validating the existence or validity of model fields referenced in those expressions. To resolve the issue, the intended behavior should include a step where each field referenced within an expression (especially in the context of functional indexes) is validated against the set of existing model fields. This validation step should be capable of catching and reporting any references to non-existent fields, contributing to a system check mechanism that can preemptively notify developers of misconfigured functional indexes. This enhancement must preserve the method's ability to traverse and yield column expressions but with added validation to catch misconfigurations earlier in the development process."
    },
    {
        "rel_file_path": "django/db/models/sql/query.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/db/models/sql/query.py",
        "start": 143,
        "end": 2372,
        "class_name": "Query",
        "method_name": null,
        "code": "143 class Query(BaseExpression):\n144     \"\"\"A single SQL query.\"\"\"\n145 \n146     alias_prefix = 'T'\n147     subq_aliases = frozenset([alias_prefix])\n148 \n149     compiler = 'SQLCompiler'\n150 \n151     def __init__(self, model, where=WhereNode, alias_cols=True):\n152         self.model = model\n153         self.alias_refcount = {}\n154         # alias_map is the most important data structure regarding joins.\n155         # It's used for recording which joins exist in the query and what\n156         # types they are. The key is the alias of the joined table (possibly\n157         # the table name) and the value is a Join-like object (see\n158         # sql.datastructures.Join for more information).\n159         self.alias_map = {}\n160         # Whether to provide alias to columns during reference resolving.\n161         self.alias_cols = alias_cols\n162         # Sometimes the query contains references to aliases in outer queries (as\n163         # a result of split_exclude). Correct alias quoting needs to know these\n164         # aliases too.\n165         # Map external tables to whether they are aliased.\n166         self.external_aliases = {}\n167         self.table_map = {}     # Maps table names to list of aliases.\n168         self.default_cols = True\n169         self.default_ordering = True\n170         self.standard_ordering = True\n171         self.used_aliases = set()\n172         self.filter_is_sticky = False\n173         self.subquery = False\n174 \n175         # SQL-related attributes\n176         # Select and related select clauses are expressions to use in the\n177         # SELECT clause of the query.\n178         # The select is used for cases where we want to set up the select\n179         # clause to contain other than default fields (values(), subqueries...)\n180         # Note that annotations go to annotations dictionary.\n181         self.select = ()\n182         self.where = where()\n183         self.where_class = where\n184         # The group_by attribute can have one of the following forms:\n185         #  - None: no group by at all in the query\n186         #  - A tuple of expressions: group by (at least) those expressions.\n187         #    String refs are also allowed for now.\n188         #  - True: group by all select fields of the model\n189         # See compiler.get_group_by() for details.\n190         self.group_by = None\n191         self.order_by = ()\n192         self.low_mark, self.high_mark = 0, None  # Used for offset/limit\n193         self.distinct = False\n194         self.distinct_fields = ()\n195         self.select_for_update = False\n196         self.select_for_update_nowait = False\n197         self.select_for_update_skip_locked = False\n198         self.select_for_update_of = ()\n199         self.select_for_no_key_update = False\n200 \n201         self.select_related = False\n202         # Arbitrary limit for select_related to prevents infinite recursion.\n203         self.max_depth = 5\n204 \n205         # Holds the selects defined by a call to values() or values_list()\n206         # excluding annotation_select and extra_select.\n207         self.values_select = ()\n208 \n209         # SQL annotation-related attributes\n210         self.annotations = {}  # Maps alias -> Annotation Expression\n211         self.annotation_select_mask = None\n212         self._annotation_select_cache = None\n213 \n214         # Set combination attributes\n215         self.combinator = None\n216         self.combinator_all = False\n217         self.combined_queries = ()\n218 \n219         # These are for extensions. The contents are more or less appended\n220         # verbatim to the appropriate clause.\n221         self.extra = {}  # Maps col_alias -> (col_sql, params).\n222         self.extra_select_mask = None\n223         self._extra_select_cache = None\n224 \n225         self.extra_tables = ()\n226         self.extra_order_by = ()\n227 \n228         # A tuple that is a set of model field names and either True, if these\n229         # are the fields to defer, or False if these are the only fields to\n230         # load.\n231         self.deferred_loading = (frozenset(), True)\n232 \n233         self._filtered_relations = {}\n234 \n235         self.explain_query = False\n236         self.explain_format = None\n237         self.explain_options = {}\n238 \n239     @property\n240     def output_field(self):\n241         if len(self.select) == 1:\n242             select = self.select[0]\n243             return getattr(select, 'target', None) or select.field\n244         elif len(self.annotation_select) == 1:\n245             return next(iter(self.annotation_select.values())).output_field\n246 \n247     @property\n248     def has_select_fields(self):\n249         return bool(self.select or self.annotation_select_mask or self.extra_select_mask)\n250 \n251     @cached_property\n252     def base_table(self):\n253         for alias in self.alias_map:\n254             return alias\n255 \n256     @property\n257     def identity(self):\n258         identity = (\n259             (arg, make_hashable(value))\n260             for arg, value in self.__dict__.items()\n261         )\n262         return (self.__class__, *identity)\n263 \n264     def __str__(self):\n265         \"\"\"\n266         Return the query as a string of SQL with the parameter values\n267         substituted in (use sql_with_params() to see the unsubstituted string).\n268 \n269         Parameter values won't necessarily be quoted correctly, since that is\n270         done by the database interface at execution time.\n271         \"\"\"\n272         sql, params = self.sql_with_params()\n273         return sql % params\n274 \n275     def sql_with_params(self):\n276         \"\"\"\n277         Return the query as an SQL string and the parameters that will be\n278         substituted into the query.\n279         \"\"\"\n280         return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()\n281 \n282     def __deepcopy__(self, memo):\n283         \"\"\"Limit the amount of work when a Query is deepcopied.\"\"\"\n284         result = self.clone()\n285         memo[id(self)] = result\n286         return result\n287 \n288     def get_compiler(self, using=None, connection=None):\n289         if using is None and connection is None:\n290             raise ValueError(\"Need either using or connection\")\n291         if using:\n292             connection = connections[using]\n293         return connection.ops.compiler(self.compiler)(self, connection, using)\n294 \n295     def get_meta(self):\n296         \"\"\"\n297         Return the Options instance (the model._meta) from which to start\n298         processing. Normally, this is self.model._meta, but it can be changed\n299         by subclasses.\n300         \"\"\"\n301         return self.model._meta\n302 \n303     def clone(self):\n304         \"\"\"\n305         Return a copy of the current Query. A lightweight alternative to\n306         to deepcopy().\n307         \"\"\"\n308         obj = Empty()\n309         obj.__class__ = self.__class__\n310         # Copy references to everything.\n311         obj.__dict__ = self.__dict__.copy()\n312         # Clone attributes that can't use shallow copy.\n313         obj.alias_refcount = self.alias_refcount.copy()\n314         obj.alias_map = self.alias_map.copy()\n315         obj.external_aliases = self.external_aliases.copy()\n316         obj.table_map = self.table_map.copy()\n317         obj.where = self.where.clone()\n318         obj.annotations = self.annotations.copy()\n319         if self.annotation_select_mask is None:\n320             obj.annotation_select_mask = None\n321         else:\n322             obj.annotation_select_mask = self.annotation_select_mask.copy()\n323         obj.combined_queries = tuple(query.clone() for query in self.combined_queries)\n324         # _annotation_select_cache cannot be copied, as doing so breaks the\n325         # (necessary) state in which both annotations and\n326         # _annotation_select_cache point to the same underlying objects.\n327         # It will get re-populated in the cloned queryset the next time it's\n328         # used.\n329         obj._annotation_select_cache = None\n330         obj.extra = self.extra.copy()\n331         if self.extra_select_mask is None:\n332             obj.extra_select_mask = None\n333         else:\n334             obj.extra_select_mask = self.extra_select_mask.copy()\n335         if self._extra_select_cache is None:\n336             obj._extra_select_cache = None\n337         else:\n338             obj._extra_select_cache = self._extra_select_cache.copy()\n339         if self.select_related is not False:\n340             # Use deepcopy because select_related stores fields in nested\n341             # dicts.\n342             obj.select_related = copy.deepcopy(obj.select_related)\n343         if 'subq_aliases' in self.__dict__:\n344             obj.subq_aliases = self.subq_aliases.copy()\n345         obj.used_aliases = self.used_aliases.copy()\n346         obj._filtered_relations = self._filtered_relations.copy()\n347         # Clear the cached_property\n348         try:\n349             del obj.base_table\n350         except AttributeError:\n351             pass\n352         return obj\n353 \n354     def chain(self, klass=None):\n355         \"\"\"\n356         Return a copy of the current Query that's ready for another operation.\n357         The klass argument changes the type of the Query, e.g. UpdateQuery.\n358         \"\"\"\n359         obj = self.clone()\n360         if klass and obj.__class__ != klass:\n361             obj.__class__ = klass\n362         if not obj.filter_is_sticky:\n363             obj.used_aliases = set()\n364         obj.filter_is_sticky = False\n365         if hasattr(obj, '_setup_query'):\n366             obj._setup_query()\n367         return obj\n368 \n369     def relabeled_clone(self, change_map):\n370         clone = self.clone()\n371         clone.change_aliases(change_map)\n372         return clone\n373 \n374     def _get_col(self, target, field, alias):\n375         if not self.alias_cols:\n376             alias = None\n377         return target.get_col(alias, field)\n378 \n379     def rewrite_cols(self, annotation, col_cnt):\n380         # We must make sure the inner query has the referred columns in it.\n381         # If we are aggregating over an annotation, then Django uses Ref()\n382         # instances to note this. However, if we are annotating over a column\n383         # of a related model, then it might be that column isn't part of the\n384         # SELECT clause of the inner query, and we must manually make sure\n385         # the column is selected. An example case is:\n386         #    .aggregate(Sum('author__awards'))\n387         # Resolving this expression results in a join to author, but there\n388         # is no guarantee the awards column of author is in the select clause\n389         # of the query. Thus we must manually add the column to the inner\n390         # query.\n391         orig_exprs = annotation.get_source_expressions()\n392         new_exprs = []\n393         for expr in orig_exprs:\n394             # FIXME: These conditions are fairly arbitrary. Identify a better\n395             # method of having expressions decide which code path they should\n396             # take.\n397             if isinstance(expr, Ref):\n398                 # Its already a Ref to subquery (see resolve_ref() for\n399                 # details)\n400                 new_exprs.append(expr)\n401             elif isinstance(expr, (WhereNode, Lookup)):\n402                 # Decompose the subexpressions further. The code here is\n403                 # copied from the else clause, but this condition must appear\n404                 # before the contains_aggregate/is_summary condition below.\n405                 new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)\n406                 new_exprs.append(new_expr)\n407             else:\n408                 # Reuse aliases of expressions already selected in subquery.\n409                 for col_alias, selected_annotation in self.annotation_select.items():\n410                     if selected_annotation is expr:\n411                         new_expr = Ref(col_alias, expr)\n412                         break\n413                 else:\n414                     # An expression that is not selected the subquery.\n415                     if isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):\n416                         # Reference column or another aggregate. Select it\n417                         # under a non-conflicting alias.\n418                         col_cnt += 1\n419                         col_alias = '__col%d' % col_cnt\n420                         self.annotations[col_alias] = expr\n421                         self.append_annotation_mask([col_alias])\n422                         new_expr = Ref(col_alias, expr)\n423                     else:\n424                         # Some other expression not referencing database values\n425                         # directly. Its subexpression might contain Cols.\n426                         new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)\n427                 new_exprs.append(new_expr)\n428         annotation.set_source_expressions(new_exprs)\n429         return annotation, col_cnt\n430 \n431     def get_aggregation(self, using, added_aggregate_names):\n432         \"\"\"\n433         Return the dictionary with the values of the existing aggregations.\n434         \"\"\"\n435         if not self.annotation_select:\n436             return {}\n437         existing_annotations = [\n438             annotation for alias, annotation\n439             in self.annotations.items()\n440             if alias not in added_aggregate_names\n441         ]\n442         # Decide if we need to use a subquery.\n443         #\n444         # Existing annotations would cause incorrect results as get_aggregation()\n445         # must produce just one result and thus must not use GROUP BY. But we\n446         # aren't smart enough to remove the existing annotations from the\n447         # query, so those would force us to use GROUP BY.\n448         #\n449         # If the query has limit or distinct, or uses set operations, then\n450         # those operations must be done in a subquery so that the query\n451         # aggregates on the limit and/or distinct results instead of applying\n452         # the distinct and limit after the aggregation.\n453         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or\n454                 self.distinct or self.combinator):\n455             from django.db.models.sql.subqueries import AggregateQuery\n456             inner_query = self.clone()\n457             inner_query.subquery = True\n458             outer_query = AggregateQuery(self.model, inner_query)\n459             inner_query.select_for_update = False\n460             inner_query.select_related = False\n461             inner_query.set_annotation_mask(self.annotation_select)\n462             if not self.is_sliced and not self.distinct_fields:\n463                 # Queries with distinct_fields need ordering and when a limit\n464                 # is applied we must take the slice from the ordered query.\n465                 # Otherwise no need for ordering.\n466                 inner_query.clear_ordering(True)\n467             if not inner_query.distinct:\n468                 # If the inner query uses default select and it has some\n469                 # aggregate annotations, then we must make sure the inner\n470                 # query is grouped by the main model's primary key. However,\n471                 # clearing the select clause can alter results if distinct is\n472                 # used.\n473                 has_existing_aggregate_annotations = any(\n474                     annotation for annotation in existing_annotations\n475                     if getattr(annotation, 'contains_aggregate', True)\n476                 )\n477                 if inner_query.default_cols and has_existing_aggregate_annotations:\n478                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n479                 inner_query.default_cols = False\n480 \n481             relabels = {t: 'subquery' for t in inner_query.alias_map}\n482             relabels[None] = 'subquery'\n483             # Remove any aggregates marked for reduction from the subquery\n484             # and move them to the outer AggregateQuery.\n485             col_cnt = 0\n486             for alias, expression in list(inner_query.annotation_select.items()):\n487                 annotation_select_mask = inner_query.annotation_select_mask\n488                 if expression.is_summary:\n489                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)\n490                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)\n491                     del inner_query.annotations[alias]\n492                     annotation_select_mask.remove(alias)\n493                 # Make sure the annotation_select wont use cached results.\n494                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n495             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:\n496                 # In case of Model.objects[0:3].count(), there would be no\n497                 # field selected in the inner query, yet we must use a subquery.\n498                 # So, make sure at least one field is selected.\n499                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n500         else:\n501             outer_query = self\n502             self.select = ()\n503             self.default_cols = False\n504             self.extra = {}\n505 \n506         outer_query.clear_ordering(True)\n507         outer_query.clear_limits()\n508         outer_query.select_for_update = False\n509         outer_query.select_related = False\n510         compiler = outer_query.get_compiler(using)\n511         result = compiler.execute_sql(SINGLE)\n512         if result is None:\n513             result = [None] * len(outer_query.annotation_select)\n514 \n515         converters = compiler.get_converters(outer_query.annotation_select.values())\n516         result = next(compiler.apply_converters((result,), converters))\n517 \n518         return dict(zip(outer_query.annotation_select, result))\n519 \n520     def get_count(self, using):\n521         \"\"\"\n522         Perform a COUNT() query using the current filter constraints.\n523         \"\"\"\n524         obj = self.clone()\n525         obj.add_annotation(Count('*'), alias='__count', is_summary=True)\n526         number = obj.get_aggregation(using, ['__count'])['__count']\n527         if number is None:\n528             number = 0\n529         return number\n530 \n531     def has_filters(self):\n532         return self.where\n533 \n534     def exists(self, using, limit=True):\n535         q = self.clone()\n536         if not q.distinct:\n537             if q.group_by is True:\n538                 q.add_fields((f.attname for f in self.model._meta.concrete_fields), False)\n539                 # Disable GROUP BY aliases to avoid orphaning references to the\n540                 # SELECT clause which is about to be cleared.\n541                 q.set_group_by(allow_aliases=False)\n542             q.clear_select_clause()\n543         if q.combined_queries and q.combinator == 'union':\n544             limit_combined = connections[using].features.supports_slicing_ordering_in_compound\n545             q.combined_queries = tuple(\n546                 combined_query.exists(using, limit=limit_combined)\n547                 for combined_query in q.combined_queries\n548             )\n549         q.clear_ordering(True)\n550         if limit:\n551             q.set_limits(high=1)\n552         q.add_extra({'a': 1}, None, None, None, None, None)\n553         q.set_extra_mask(['a'])\n554         return q\n555 \n556     def has_results(self, using):\n557         q = self.exists(using)\n558         compiler = q.get_compiler(using=using)\n559         return compiler.has_results()\n560 \n561     def explain(self, using, format=None, **options):\n562         q = self.clone()\n563         q.explain_query = True\n564         q.explain_format = format\n565         q.explain_options = options\n566         compiler = q.get_compiler(using=using)\n567         return '\\n'.join(compiler.explain_query())\n568 \n569     def combine(self, rhs, connector):\n570         \"\"\"\n571         Merge the 'rhs' query into the current one (with any 'rhs' effects\n572         being applied *after* (that is, \"to the right of\") anything in the\n573         current query. 'rhs' is not modified during a call to this function.\n574 \n575         The 'connector' parameter describes how to connect filters from the\n576         'rhs' query.\n577         \"\"\"\n578         assert self.model == rhs.model, \\\n579             \"Cannot combine queries on two different base models.\"\n580         assert not self.is_sliced, \\\n581             \"Cannot combine queries once a slice has been taken.\"\n582         assert self.distinct == rhs.distinct, \\\n583             \"Cannot combine a unique query with a non-unique query.\"\n584         assert self.distinct_fields == rhs.distinct_fields, \\\n585             \"Cannot combine queries with different distinct fields.\"\n586 \n587         # Work out how to relabel the rhs aliases, if necessary.\n588         change_map = {}\n589         conjunction = (connector == AND)\n590 \n591         # Determine which existing joins can be reused. When combining the\n592         # query with AND we must recreate all joins for m2m filters. When\n593         # combining with OR we can reuse joins. The reason is that in AND\n594         # case a single row can't fulfill a condition like:\n595         #     revrel__col=1 & revrel__col=2\n596         # But, there might be two different related rows matching this\n597         # condition. In OR case a single True is enough, so single row is\n598         # enough, too.\n599         #\n600         # Note that we will be creating duplicate joins for non-m2m joins in\n601         # the AND case. The results will be correct but this creates too many\n602         # joins. This is something that could be fixed later on.\n603         reuse = set() if conjunction else set(self.alias_map)\n604         # Base table must be present in the query - this is the same\n605         # table on both sides.\n606         self.get_initial_alias()\n607         joinpromoter = JoinPromoter(connector, 2, False)\n608         joinpromoter.add_votes(\n609             j for j in self.alias_map if self.alias_map[j].join_type == INNER)\n610         rhs_votes = set()\n611         # Now, add the joins from rhs query into the new query (skipping base\n612         # table).\n613         rhs_tables = list(rhs.alias_map)[1:]\n614         for alias in rhs_tables:\n615             join = rhs.alias_map[alias]\n616             # If the left side of the join was already relabeled, use the\n617             # updated alias.\n618             join = join.relabeled_clone(change_map)\n619             new_alias = self.join(join, reuse=reuse)\n620             if join.join_type == INNER:\n621                 rhs_votes.add(new_alias)\n622             # We can't reuse the same join again in the query. If we have two\n623             # distinct joins for the same connection in rhs query, then the\n624             # combined query must have two joins, too.\n625             reuse.discard(new_alias)\n626             if alias != new_alias:\n627                 change_map[alias] = new_alias\n628             if not rhs.alias_refcount[alias]:\n629                 # The alias was unused in the rhs query. Unref it so that it\n630                 # will be unused in the new query, too. We have to add and\n631                 # unref the alias so that join promotion has information of\n632                 # the join type for the unused alias.\n633                 self.unref_alias(new_alias)\n634         joinpromoter.add_votes(rhs_votes)\n635         joinpromoter.update_join_types(self)\n636 \n637         # Now relabel a copy of the rhs where-clause and add it to the current\n638         # one.\n639         w = rhs.where.clone()\n640         w.relabel_aliases(change_map)\n641         self.where.add(w, connector)\n642 \n643         # Selection columns and extra extensions are those provided by 'rhs'.\n644         if rhs.select:\n645             self.set_select([col.relabeled_clone(change_map) for col in rhs.select])\n646         else:\n647             self.select = ()\n648 \n649         if connector == OR:\n650             # It would be nice to be able to handle this, but the queries don't\n651             # really make sense (or return consistent value sets). Not worth\n652             # the extra complexity when you can write a real query instead.\n653             if self.extra and rhs.extra:\n654                 raise ValueError(\"When merging querysets using 'or', you cannot have extra(select=...) on both sides.\")\n655         self.extra.update(rhs.extra)\n656         extra_select_mask = set()\n657         if self.extra_select_mask is not None:\n658             extra_select_mask.update(self.extra_select_mask)\n659         if rhs.extra_select_mask is not None:\n660             extra_select_mask.update(rhs.extra_select_mask)\n661         if extra_select_mask:\n662             self.set_extra_mask(extra_select_mask)\n663         self.extra_tables += rhs.extra_tables\n664 \n665         # Ordering uses the 'rhs' ordering, unless it has none, in which case\n666         # the current ordering is used.\n667         self.order_by = rhs.order_by or self.order_by\n668         self.extra_order_by = rhs.extra_order_by or self.extra_order_by\n669 \n670     def deferred_to_data(self, target, callback):\n671         \"\"\"\n672         Convert the self.deferred_loading data structure to an alternate data\n673         structure, describing the field that *will* be loaded. This is used to\n674         compute the columns to select from the database and also by the\n675         QuerySet class to work out which fields are being initialized on each\n676         model. Models that have all their fields included aren't mentioned in\n677         the result, only those that have field restrictions in place.\n678 \n679         The \"target\" parameter is the instance that is populated (in place).\n680         The \"callback\" is a function that is called whenever a (model, field)\n681         pair need to be added to \"target\". It accepts three parameters:\n682         \"target\", and the model and list of fields being added for that model.\n683         \"\"\"\n684         field_names, defer = self.deferred_loading\n685         if not field_names:\n686             return\n687         orig_opts = self.get_meta()\n688         seen = {}\n689         must_include = {orig_opts.concrete_model: {orig_opts.pk}}\n690         for field_name in field_names:\n691             parts = field_name.split(LOOKUP_SEP)\n692             cur_model = self.model._meta.concrete_model\n693             opts = orig_opts\n694             for name in parts[:-1]:\n695                 old_model = cur_model\n696                 if name in self._filtered_relations:\n697                     name = self._filtered_relations[name].relation_name\n698                 source = opts.get_field(name)\n699                 if is_reverse_o2o(source):\n700                     cur_model = source.related_model\n701                 else:\n702                     cur_model = source.remote_field.model\n703                 opts = cur_model._meta\n704                 # Even if we're \"just passing through\" this model, we must add\n705                 # both the current model's pk and the related reference field\n706                 # (if it's not a reverse relation) to the things we select.\n707                 if not is_reverse_o2o(source):\n708                     must_include[old_model].add(source)\n709                 add_to_dict(must_include, cur_model, opts.pk)\n710             field = opts.get_field(parts[-1])\n711             is_reverse_object = field.auto_created and not field.concrete\n712             model = field.related_model if is_reverse_object else field.model\n713             model = model._meta.concrete_model\n714             if model == opts.model:\n715                 model = cur_model\n716             if not is_reverse_o2o(field):\n717                 add_to_dict(seen, model, field)\n718 \n719         if defer:\n720             # We need to load all fields for each model, except those that\n721             # appear in \"seen\" (for all models that appear in \"seen\"). The only\n722             # slight complexity here is handling fields that exist on parent\n723             # models.\n724             workset = {}\n725             for model, values in seen.items():\n726                 for field in model._meta.local_fields:\n727                     if field not in values:\n728                         m = field.model._meta.concrete_model\n729                         add_to_dict(workset, m, field)\n730             for model, values in must_include.items():\n731                 # If we haven't included a model in workset, we don't add the\n732                 # corresponding must_include fields for that model, since an\n733                 # empty set means \"include all fields\". That's why there's no\n734                 # \"else\" branch here.\n735                 if model in workset:\n736                     workset[model].update(values)\n737             for model, values in workset.items():\n738                 callback(target, model, values)\n739         else:\n740             for model, values in must_include.items():\n741                 if model in seen:\n742                     seen[model].update(values)\n743                 else:\n744                     # As we've passed through this model, but not explicitly\n745                     # included any fields, we have to make sure it's mentioned\n746                     # so that only the \"must include\" fields are pulled in.\n747                     seen[model] = values\n748             # Now ensure that every model in the inheritance chain is mentioned\n749             # in the parent list. Again, it must be mentioned to ensure that\n750             # only \"must include\" fields are pulled in.\n751             for model in orig_opts.get_parent_list():\n752                 seen.setdefault(model, set())\n753             for model, values in seen.items():\n754                 callback(target, model, values)\n755 \n756     def table_alias(self, table_name, create=False, filtered_relation=None):\n757         \"\"\"\n758         Return a table alias for the given table_name and whether this is a\n759         new alias or not.\n760 \n761         If 'create' is true, a new alias is always created. Otherwise, the\n762         most recently created alias for the table (if one exists) is reused.\n763         \"\"\"\n764         alias_list = self.table_map.get(table_name)\n765         if not create and alias_list:\n766             alias = alias_list[0]\n767             self.alias_refcount[alias] += 1\n768             return alias, False\n769 \n770         # Create a new alias for this table.\n771         if alias_list:\n772             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n773             alias_list.append(alias)\n774         else:\n775             # The first occurrence of a table uses the table name directly.\n776             alias = filtered_relation.alias if filtered_relation is not None else table_name\n777             self.table_map[table_name] = [alias]\n778         self.alias_refcount[alias] = 1\n779         return alias, True\n780 \n781     def ref_alias(self, alias):\n782         \"\"\"Increases the reference count for this alias.\"\"\"\n783         self.alias_refcount[alias] += 1\n784 \n785     def unref_alias(self, alias, amount=1):\n786         \"\"\"Decreases the reference count for this alias.\"\"\"\n787         self.alias_refcount[alias] -= amount\n788 \n789     def promote_joins(self, aliases):\n790         \"\"\"\n791         Promote recursively the join type of given aliases and its children to\n792         an outer join. If 'unconditional' is False, only promote the join if\n793         it is nullable or the parent join is an outer join.\n794 \n795         The children promotion is done to avoid join chains that contain a LOUTER\n796         b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,\n797         then we must also promote b->c automatically, or otherwise the promotion\n798         of a->b doesn't actually change anything in the query results.\n799         \"\"\"\n800         aliases = list(aliases)\n801         while aliases:\n802             alias = aliases.pop(0)\n803             if self.alias_map[alias].join_type is None:\n804                 # This is the base table (first FROM entry) - this table\n805                 # isn't really joined at all in the query, so we should not\n806                 # alter its join type.\n807                 continue\n808             # Only the first alias (skipped above) should have None join_type\n809             assert self.alias_map[alias].join_type is not None\n810             parent_alias = self.alias_map[alias].parent_alias\n811             parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER\n812             already_louter = self.alias_map[alias].join_type == LOUTER\n813             if ((self.alias_map[alias].nullable or parent_louter) and\n814                     not already_louter):\n815                 self.alias_map[alias] = self.alias_map[alias].promote()\n816                 # Join type of 'alias' changed, so re-examine all aliases that\n817                 # refer to this one.\n818                 aliases.extend(\n819                     join for join in self.alias_map\n820                     if self.alias_map[join].parent_alias == alias and join not in aliases\n821                 )\n822 \n823     def demote_joins(self, aliases):\n824         \"\"\"\n825         Change join type from LOUTER to INNER for all joins in aliases.\n826 \n827         Similarly to promote_joins(), this method must ensure no join chains\n828         containing first an outer, then an inner join are generated. If we\n829         are demoting b->c join in chain a LOUTER b LOUTER c then we must\n830         demote a->b automatically, or otherwise the demotion of b->c doesn't\n831         actually change anything in the query results. .\n832         \"\"\"\n833         aliases = list(aliases)\n834         while aliases:\n835             alias = aliases.pop(0)\n836             if self.alias_map[alias].join_type == LOUTER:\n837                 self.alias_map[alias] = self.alias_map[alias].demote()\n838                 parent_alias = self.alias_map[alias].parent_alias\n839                 if self.alias_map[parent_alias].join_type == INNER:\n840                     aliases.append(parent_alias)\n841 \n842     def reset_refcounts(self, to_counts):\n843         \"\"\"\n844         Reset reference counts for aliases so that they match the value passed\n845         in `to_counts`.\n846         \"\"\"\n847         for alias, cur_refcount in self.alias_refcount.copy().items():\n848             unref_amount = cur_refcount - to_counts.get(alias, 0)\n849             self.unref_alias(alias, unref_amount)\n850 \n851     def change_aliases(self, change_map):\n852         \"\"\"\n853         Change the aliases in change_map (which maps old-alias -> new-alias),\n854         relabelling any references to them in select columns and the where\n855         clause.\n856         \"\"\"\n857         assert set(change_map).isdisjoint(change_map.values())\n858 \n859         # 1. Update references in \"select\" (normal columns plus aliases),\n860         # \"group by\" and \"where\".\n861         self.where.relabel_aliases(change_map)\n862         if isinstance(self.group_by, tuple):\n863             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])\n864         self.select = tuple([col.relabeled_clone(change_map) for col in self.select])\n865         self.annotations = self.annotations and {\n866             key: col.relabeled_clone(change_map) for key, col in self.annotations.items()\n867         }\n868 \n869         # 2. Rename the alias in the internal table/alias datastructures.\n870         for old_alias, new_alias in change_map.items():\n871             if old_alias not in self.alias_map:\n872                 continue\n873             alias_data = self.alias_map[old_alias].relabeled_clone(change_map)\n874             self.alias_map[new_alias] = alias_data\n875             self.alias_refcount[new_alias] = self.alias_refcount[old_alias]\n876             del self.alias_refcount[old_alias]\n877             del self.alias_map[old_alias]\n878 \n879             table_aliases = self.table_map[alias_data.table_name]\n880             for pos, alias in enumerate(table_aliases):\n881                 if alias == old_alias:\n882                     table_aliases[pos] = new_alias\n883                     break\n884         self.external_aliases = {\n885             # Table is aliased or it's being changed and thus is aliased.\n886             change_map.get(alias, alias): (aliased or alias in change_map)\n887             for alias, aliased in self.external_aliases.items()\n888         }\n889 \n890     def bump_prefix(self, outer_query):\n891         \"\"\"\n892         Change the alias prefix to the next letter in the alphabet in a way\n893         that the outer query's aliases and this query's aliases will not\n894         conflict. Even tables that previously had no alias will get an alias\n895         after this call.\n896         \"\"\"\n897         def prefix_gen():\n898             \"\"\"\n899             Generate a sequence of characters in alphabetical order:\n900                 -> 'A', 'B', 'C', ...\n901 \n902             When the alphabet is finished, the sequence will continue with the\n903             Cartesian product:\n904                 -> 'AA', 'AB', 'AC', ...\n905             \"\"\"\n906             alphabet = ascii_uppercase\n907             prefix = chr(ord(self.alias_prefix) + 1)\n908             yield prefix\n909             for n in count(1):\n910                 seq = alphabet[alphabet.index(prefix):] if prefix else alphabet\n911                 for s in product(seq, repeat=n):\n912                     yield ''.join(s)\n913                 prefix = None\n914 \n915         if self.alias_prefix != outer_query.alias_prefix:\n916             # No clashes between self and outer query should be possible.\n917             return\n918 \n919         # Explicitly avoid infinite loop. The constant divider is based on how\n920         # much depth recursive subquery references add to the stack. This value\n921         # might need to be adjusted when adding or removing function calls from\n922         # the code path in charge of performing these operations.\n923         local_recursion_limit = sys.getrecursionlimit() // 16\n924         for pos, prefix in enumerate(prefix_gen()):\n925             if prefix not in self.subq_aliases:\n926                 self.alias_prefix = prefix\n927                 break\n928             if pos > local_recursion_limit:\n929                 raise RecursionError(\n930                     'Maximum recursion depth exceeded: too many subqueries.'\n931                 )\n932         self.subq_aliases = self.subq_aliases.union([self.alias_prefix])\n933         outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)\n934         self.change_aliases({\n935             alias: '%s%d' % (self.alias_prefix, pos)\n936             for pos, alias in enumerate(self.alias_map)\n937         })\n938 \n939     def get_initial_alias(self):\n940         \"\"\"\n941         Return the first alias for this query, after increasing its reference\n942         count.\n943         \"\"\"\n944         if self.alias_map:\n945             alias = self.base_table\n946             self.ref_alias(alias)\n947         else:\n948             alias = self.join(BaseTable(self.get_meta().db_table, None))\n949         return alias\n950 \n951     def count_active_tables(self):\n952         \"\"\"\n953         Return the number of tables in this query with a non-zero reference\n954         count. After execution, the reference counts are zeroed, so tables\n955         added in compiler will not be seen by this method.\n956         \"\"\"\n957         return len([1 for count in self.alias_refcount.values() if count])\n958 \n959     def join(self, join, reuse=None, reuse_with_filtered_relation=False):\n960         \"\"\"\n961         Return an alias for the 'join', either reusing an existing alias for\n962         that join or creating a new one. 'join' is either a\n963         sql.datastructures.BaseTable or Join.\n964 \n965         The 'reuse' parameter can be either None which means all joins are\n966         reusable, or it can be a set containing the aliases that can be reused.\n967 \n968         The 'reuse_with_filtered_relation' parameter is used when computing\n969         FilteredRelation instances.\n970 \n971         A join is always created as LOUTER if the lhs alias is LOUTER to make\n972         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new\n973         joins are created as LOUTER if the join is nullable.\n974         \"\"\"\n975         if reuse_with_filtered_relation and reuse:\n976             reuse_aliases = [\n977                 a for a, j in self.alias_map.items()\n978                 if a in reuse and j.equals(join, with_filtered_relation=False)\n979             ]\n980         else:\n981             reuse_aliases = [\n982                 a for a, j in self.alias_map.items()\n983                 if (reuse is None or a in reuse) and j == join\n984             ]\n985         if reuse_aliases:\n986             if join.table_alias in reuse_aliases:\n987                 reuse_alias = join.table_alias\n988             else:\n989                 # Reuse the most recent alias of the joined table\n990                 # (a many-to-many relation may be joined multiple times).\n991                 reuse_alias = reuse_aliases[-1]\n992             self.ref_alias(reuse_alias)\n993             return reuse_alias\n994 \n995         # No reuse is possible, so we need a new alias.\n996         alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)\n997         if join.join_type:\n998             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:\n999                 join_type = LOUTER\n1000             else:\n1001                 join_type = INNER\n1002             join.join_type = join_type\n1003         join.table_alias = alias\n1004         self.alias_map[alias] = join\n1005         return alias\n1006 \n1007     def join_parent_model(self, opts, model, alias, seen):\n1008         \"\"\"\n1009         Make sure the given 'model' is joined in the query. If 'model' isn't\n1010         a parent of 'opts' or if it is None this method is a no-op.\n1011 \n1012         The 'alias' is the root alias for starting the join, 'seen' is a dict\n1013         of model -> alias of existing joins. It must also contain a mapping\n1014         of None -> some alias. This will be returned in the no-op case.\n1015         \"\"\"\n1016         if model in seen:\n1017             return seen[model]\n1018         chain = opts.get_base_chain(model)\n1019         if not chain:\n1020             return alias\n1021         curr_opts = opts\n1022         for int_model in chain:\n1023             if int_model in seen:\n1024                 curr_opts = int_model._meta\n1025                 alias = seen[int_model]\n1026                 continue\n1027             # Proxy model have elements in base chain\n1028             # with no parents, assign the new options\n1029             # object and skip to the next base in that\n1030             # case\n1031             if not curr_opts.parents[int_model]:\n1032                 curr_opts = int_model._meta\n1033                 continue\n1034             link_field = curr_opts.get_ancestor_link(int_model)\n1035             join_info = self.setup_joins([link_field.name], curr_opts, alias)\n1036             curr_opts = int_model._meta\n1037             alias = seen[int_model] = join_info.joins[-1]\n1038         return alias or seen[None]\n1039 \n1040     def add_annotation(self, annotation, alias, is_summary=False, select=True):\n1041         \"\"\"Add a single annotation expression to the Query.\"\"\"\n1042         annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,\n1043                                                    summarize=is_summary)\n1044         if select:\n1045             self.append_annotation_mask([alias])\n1046         else:\n1047             self.set_annotation_mask(set(self.annotation_select).difference({alias}))\n1048         self.annotations[alias] = annotation\n1049 \n1050     def resolve_expression(self, query, *args, **kwargs):\n1051         clone = self.clone()\n1052         # Subqueries need to use a different set of aliases than the outer query.\n1053         clone.bump_prefix(query)\n1054         clone.subquery = True\n1055         # It's safe to drop ordering if the queryset isn't using slicing,\n1056         # distinct(*fields) or select_for_update().\n1057         if (self.low_mark == 0 and self.high_mark is None and\n1058                 not self.distinct_fields and\n1059                 not self.select_for_update):\n1060             clone.clear_ordering(True)\n1061         clone.where.resolve_expression(query, *args, **kwargs)\n1062         for key, value in clone.annotations.items():\n1063             resolved = value.resolve_expression(query, *args, **kwargs)\n1064             if hasattr(resolved, 'external_aliases'):\n1065                 resolved.external_aliases.update(clone.external_aliases)\n1066             clone.annotations[key] = resolved\n1067         # Outer query's aliases are considered external.\n1068         for alias, table in query.alias_map.items():\n1069             clone.external_aliases[alias] = (\n1070                 (isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias) or\n1071                 (isinstance(table, BaseTable) and table.table_name != table.table_alias)\n1072             )\n1073         return clone\n1074 \n1075     def get_external_cols(self):\n1076         exprs = chain(self.annotations.values(), self.where.children)\n1077         return [\n1078             col for col in self._gen_cols(exprs)\n1079             if col.alias in self.external_aliases\n1080         ]\n1081 \n1082     def as_sql(self, compiler, connection):\n1083         sql, params = self.get_compiler(connection=connection).as_sql()\n1084         if self.subquery:\n1085             sql = '(%s)' % sql\n1086         return sql, params\n1087 \n1088     def resolve_lookup_value(self, value, can_reuse, allow_joins):\n1089         if hasattr(value, 'resolve_expression'):\n1090             value = value.resolve_expression(\n1091                 self, reuse=can_reuse, allow_joins=allow_joins,\n1092             )\n1093         elif isinstance(value, (list, tuple)):\n1094             # The items of the iterable may be expressions and therefore need\n1095             # to be resolved independently.\n1096             values = (\n1097                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n1098                 for sub_value in value\n1099             )\n1100             type_ = type(value)\n1101             if hasattr(type_, '_make'):  # namedtuple\n1102                 return type_(*values)\n1103             return type_(values)\n1104         return value\n1105 \n1106     def solve_lookup_type(self, lookup):\n1107         \"\"\"\n1108         Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').\n1109         \"\"\"\n1110         lookup_splitted = lookup.split(LOOKUP_SEP)\n1111         if self.annotations:\n1112             expression, expression_lookups = refs_expression(lookup_splitted, self.annotations)\n1113             if expression:\n1114                 return expression_lookups, (), expression\n1115         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())\n1116         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]\n1117         if len(lookup_parts) > 1 and not field_parts:\n1118             raise FieldError(\n1119                 'Invalid lookup \"%s\" for model %s\".' %\n1120                 (lookup, self.get_meta().model.__name__)\n1121             )\n1122         return lookup_parts, field_parts, False\n1123 \n1124     def check_query_object_type(self, value, opts, field):\n1125         \"\"\"\n1126         Check whether the object passed while querying is of the correct type.\n1127         If not, raise a ValueError specifying the wrong object.\n1128         \"\"\"\n1129         if hasattr(value, '_meta'):\n1130             if not check_rel_lookup_compatibility(value._meta.model, opts, field):\n1131                 raise ValueError(\n1132                     'Cannot query \"%s\": Must be \"%s\" instance.' %\n1133                     (value, opts.object_name))\n1134 \n1135     def check_related_objects(self, field, value, opts):\n1136         \"\"\"Check the type of object passed to query relations.\"\"\"\n1137         if field.is_relation:\n1138             # Check that the field and the queryset use the same model in a\n1139             # query like .filter(author=Author.objects.all()). For example, the\n1140             # opts would be Author's (from the author field) and value.model\n1141             # would be Author.objects.all() queryset's .model (Author also).\n1142             # The field is the related field on the lhs side.\n1143             if (isinstance(value, Query) and not value.has_select_fields and\n1144                     not check_rel_lookup_compatibility(value.model, opts, field)):\n1145                 raise ValueError(\n1146                     'Cannot use QuerySet for \"%s\": Use a QuerySet for \"%s\".' %\n1147                     (value.model._meta.object_name, opts.object_name)\n1148                 )\n1149             elif hasattr(value, '_meta'):\n1150                 self.check_query_object_type(value, opts, field)\n1151             elif hasattr(value, '__iter__'):\n1152                 for v in value:\n1153                     self.check_query_object_type(v, opts, field)\n1154 \n1155     def check_filterable(self, expression):\n1156         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n1157         if (\n1158             hasattr(expression, 'resolve_expression') and\n1159             not getattr(expression, 'filterable', True)\n1160         ):\n1161             raise NotSupportedError(\n1162                 expression.__class__.__name__ + ' is disallowed in the filter '\n1163                 'clause.'\n1164             )\n1165         if hasattr(expression, 'get_source_expressions'):\n1166             for expr in expression.get_source_expressions():\n1167                 self.check_filterable(expr)\n1168 \n1169     def build_lookup(self, lookups, lhs, rhs):\n1170         \"\"\"\n1171         Try to extract transforms and lookup from given lhs.\n1172 \n1173         The lhs value is something that works like SQLExpression.\n1174         The rhs value is what the lookup is going to compare against.\n1175         The lookups is a list of names to extract using get_lookup()\n1176         and get_transform().\n1177         \"\"\"\n1178         # __exact is the default lookup if one isn't given.\n1179         *transforms, lookup_name = lookups or ['exact']\n1180         for name in transforms:\n1181             lhs = self.try_transform(lhs, name)\n1182         # First try get_lookup() so that the lookup takes precedence if the lhs\n1183         # supports both transform and lookup for the name.\n1184         lookup_class = lhs.get_lookup(lookup_name)\n1185         if not lookup_class:\n1186             if lhs.field.is_relation:\n1187                 raise FieldError('Related Field got invalid lookup: {}'.format(lookup_name))\n1188             # A lookup wasn't found. Try to interpret the name as a transform\n1189             # and do an Exact lookup against it.\n1190             lhs = self.try_transform(lhs, lookup_name)\n1191             lookup_name = 'exact'\n1192             lookup_class = lhs.get_lookup(lookup_name)\n1193             if not lookup_class:\n1194                 return\n1195 \n1196         lookup = lookup_class(lhs, rhs)\n1197         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all\n1198         # uses of None as a query value unless the lookup supports it.\n1199         if lookup.rhs is None and not lookup.can_use_none_as_rhs:\n1200             if lookup_name not in ('exact', 'iexact'):\n1201                 raise ValueError(\"Cannot use None as a query value\")\n1202             return lhs.get_lookup('isnull')(lhs, True)\n1203 \n1204         # For Oracle '' is equivalent to null. The check must be done at this\n1205         # stage because join promotion can't be done in the compiler. Using\n1206         # DEFAULT_DB_ALIAS isn't nice but it's the best that can be done here.\n1207         # A similar thing is done in is_nullable(), too.\n1208         if (connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and\n1209                 lookup_name == 'exact' and lookup.rhs == ''):\n1210             return lhs.get_lookup('isnull')(lhs, True)\n1211 \n1212         return lookup\n1213 \n1214     def try_transform(self, lhs, name):\n1215         \"\"\"\n1216         Helper method for build_lookup(). Try to fetch and initialize\n1217         a transform for name parameter from lhs.\n1218         \"\"\"\n1219         transform_class = lhs.get_transform(name)\n1220         if transform_class:\n1221             return transform_class(lhs)\n1222         else:\n1223             output_field = lhs.output_field.__class__\n1224             suggested_lookups = difflib.get_close_matches(name, output_field.get_lookups())\n1225             if suggested_lookups:\n1226                 suggestion = ', perhaps you meant %s?' % ' or '.join(suggested_lookups)\n1227             else:\n1228                 suggestion = '.'\n1229             raise FieldError(\n1230                 \"Unsupported lookup '%s' for %s or join on the field not \"\n1231                 \"permitted%s\" % (name, output_field.__name__, suggestion)\n1232             )\n1233 \n1234     def build_filter(self, filter_expr, branch_negated=False, current_negated=False,\n1235                      can_reuse=None, allow_joins=True, split_subq=True,\n1236                      reuse_with_filtered_relation=False, check_filterable=True):\n1237         \"\"\"\n1238         Build a WhereNode for a single filter clause but don't add it\n1239         to this Query. Query.add_q() will then add this filter to the where\n1240         Node.\n1241 \n1242         The 'branch_negated' tells us if the current branch contains any\n1243         negations. This will be used to determine if subqueries are needed.\n1244 \n1245         The 'current_negated' is used to determine if the current filter is\n1246         negated or not and this will be used to determine if IS NULL filtering\n1247         is needed.\n1248 \n1249         The difference between current_negated and branch_negated is that\n1250         branch_negated is set on first negation, but current_negated is\n1251         flipped for each negation.\n1252 \n1253         Note that add_filter will not do any negating itself, that is done\n1254         upper in the code by add_q().\n1255 \n1256         The 'can_reuse' is a set of reusable joins for multijoins.\n1257 \n1258         If 'reuse_with_filtered_relation' is True, then only joins in can_reuse\n1259         will be reused.\n1260 \n1261         The method will create a filter clause that can be added to the current\n1262         query. However, if the filter isn't added to the query then the caller\n1263         is responsible for unreffing the joins used.\n1264         \"\"\"\n1265         if isinstance(filter_expr, dict):\n1266             raise FieldError(\"Cannot parse keyword query as dict\")\n1267         if isinstance(filter_expr, Q):\n1268             return self._add_q(\n1269                 filter_expr,\n1270                 branch_negated=branch_negated,\n1271                 current_negated=current_negated,\n1272                 used_aliases=can_reuse,\n1273                 allow_joins=allow_joins,\n1274                 split_subq=split_subq,\n1275                 check_filterable=check_filterable,\n1276             )\n1277         if hasattr(filter_expr, 'resolve_expression'):\n1278             if not getattr(filter_expr, 'conditional', False):\n1279                 raise TypeError('Cannot filter against a non-conditional expression.')\n1280             condition = self.build_lookup(\n1281                 ['exact'], filter_expr.resolve_expression(self, allow_joins=allow_joins), True\n1282             )\n1283             clause = self.where_class()\n1284             clause.add(condition, AND)\n1285             return clause, []\n1286         arg, value = filter_expr\n1287         if not arg:\n1288             raise FieldError(\"Cannot parse keyword query %r\" % arg)\n1289         lookups, parts, reffed_expression = self.solve_lookup_type(arg)\n1290 \n1291         if check_filterable:\n1292             self.check_filterable(reffed_expression)\n1293 \n1294         if not allow_joins and len(parts) > 1:\n1295             raise FieldError(\"Joined field references are not permitted in this query\")\n1296 \n1297         pre_joins = self.alias_refcount.copy()\n1298         value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n1299         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n1300 \n1301         if check_filterable:\n1302             self.check_filterable(value)\n1303 \n1304         clause = self.where_class()\n1305         if reffed_expression:\n1306             condition = self.build_lookup(lookups, reffed_expression, value)\n1307             clause.add(condition, AND)\n1308             return clause, []\n1309 \n1310         opts = self.get_meta()\n1311         alias = self.get_initial_alias()\n1312         allow_many = not branch_negated or not split_subq\n1313 \n1314         try:\n1315             join_info = self.setup_joins(\n1316                 parts, opts, alias, can_reuse=can_reuse, allow_many=allow_many,\n1317                 reuse_with_filtered_relation=reuse_with_filtered_relation,\n1318             )\n1319 \n1320             # Prevent iterator from being consumed by check_related_objects()\n1321             if isinstance(value, Iterator):\n1322                 value = list(value)\n1323             self.check_related_objects(join_info.final_field, value, join_info.opts)\n1324 \n1325             # split_exclude() needs to know which joins were generated for the\n1326             # lookup parts\n1327             self._lookup_joins = join_info.joins\n1328         except MultiJoin as e:\n1329             return self.split_exclude(filter_expr, can_reuse, e.names_with_path)\n1330 \n1331         # Update used_joins before trimming since they are reused to determine\n1332         # which joins could be later promoted to INNER.\n1333         used_joins.update(join_info.joins)\n1334         targets, alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)\n1335         if can_reuse is not None:\n1336             can_reuse.update(join_list)\n1337 \n1338         if join_info.final_field.is_relation:\n1339             # No support for transforms for relational fields\n1340             num_lookups = len(lookups)\n1341             if num_lookups > 1:\n1342                 raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))\n1343             if len(targets) == 1:\n1344                 col = self._get_col(targets[0], join_info.final_field, alias)\n1345             else:\n1346                 col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)\n1347         else:\n1348             col = self._get_col(targets[0], join_info.final_field, alias)\n1349 \n1350         condition = self.build_lookup(lookups, col, value)\n1351         lookup_type = condition.lookup_name\n1352         clause.add(condition, AND)\n1353 \n1354         require_outer = lookup_type == 'isnull' and condition.rhs is True and not current_negated\n1355         if current_negated and (lookup_type != 'isnull' or condition.rhs is False) and condition.rhs is not None:\n1356             require_outer = True\n1357             if lookup_type != 'isnull':\n1358                 # The condition added here will be SQL like this:\n1359                 # NOT (col IS NOT NULL), where the first NOT is added in\n1360                 # upper layers of code. The reason for addition is that if col\n1361                 # is null, then col != someval will result in SQL \"unknown\"\n1362                 # which isn't the same as in Python. The Python None handling\n1363                 # is wanted, and it can be gotten by\n1364                 # (col IS NULL OR col != someval)\n1365                 #   <=>\n1366                 # NOT (col IS NOT NULL AND col = someval).\n1367                 if (\n1368                     self.is_nullable(targets[0]) or\n1369                     self.alias_map[join_list[-1]].join_type == LOUTER\n1370                 ):\n1371                     lookup_class = targets[0].get_lookup('isnull')\n1372                     col = self._get_col(targets[0], join_info.targets[0], alias)\n1373                     clause.add(lookup_class(col, False), AND)\n1374                 # If someval is a nullable column, someval IS NOT NULL is\n1375                 # added.\n1376                 if isinstance(value, Col) and self.is_nullable(value.target):\n1377                     lookup_class = value.target.get_lookup('isnull')\n1378                     clause.add(lookup_class(value, False), AND)\n1379         return clause, used_joins if not require_outer else ()\n1380 \n1381     def add_filter(self, filter_clause):\n1382         self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))\n1383 \n1384     def add_q(self, q_object):\n1385         \"\"\"\n1386         A preprocessor for the internal _add_q(). Responsible for doing final\n1387         join promotion.\n1388         \"\"\"\n1389         # For join promotion this case is doing an AND for the added q_object\n1390         # and existing conditions. So, any existing inner join forces the join\n1391         # type to remain inner. Existing outer joins can however be demoted.\n1392         # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if\n1393         # rel_a doesn't produce any rows, then the whole condition must fail.\n1394         # So, demotion is OK.\n1395         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}\n1396         clause, _ = self._add_q(q_object, self.used_aliases)\n1397         if clause:\n1398             self.where.add(clause, AND)\n1399         self.demote_joins(existing_inner)\n1400 \n1401     def build_where(self, filter_expr):\n1402         return self.build_filter(filter_expr, allow_joins=False)[0]\n1403 \n1404     def _add_q(self, q_object, used_aliases, branch_negated=False,\n1405                current_negated=False, allow_joins=True, split_subq=True,\n1406                check_filterable=True):\n1407         \"\"\"Add a Q-object to the current filter.\"\"\"\n1408         connector = q_object.connector\n1409         current_negated = current_negated ^ q_object.negated\n1410         branch_negated = branch_negated or q_object.negated\n1411         target_clause = self.where_class(connector=connector,\n1412                                          negated=q_object.negated)\n1413         joinpromoter = JoinPromoter(q_object.connector, len(q_object.children), current_negated)\n1414         for child in q_object.children:\n1415             child_clause, needed_inner = self.build_filter(\n1416                 child, can_reuse=used_aliases, branch_negated=branch_negated,\n1417                 current_negated=current_negated, allow_joins=allow_joins,\n1418                 split_subq=split_subq, check_filterable=check_filterable,\n1419             )\n1420             joinpromoter.add_votes(needed_inner)\n1421             if child_clause:\n1422                 target_clause.add(child_clause, connector)\n1423         needed_inner = joinpromoter.update_join_types(self)\n1424         return target_clause, needed_inner\n1425 \n1426     def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):\n1427         \"\"\"Add a FilteredRelation object to the current filter.\"\"\"\n1428         connector = q_object.connector\n1429         current_negated ^= q_object.negated\n1430         branch_negated = branch_negated or q_object.negated\n1431         target_clause = self.where_class(connector=connector, negated=q_object.negated)\n1432         for child in q_object.children:\n1433             if isinstance(child, Node):\n1434                 child_clause = self.build_filtered_relation_q(\n1435                     child, reuse=reuse, branch_negated=branch_negated,\n1436                     current_negated=current_negated,\n1437                 )\n1438             else:\n1439                 child_clause, _ = self.build_filter(\n1440                     child, can_reuse=reuse, branch_negated=branch_negated,\n1441                     current_negated=current_negated,\n1442                     allow_joins=True, split_subq=False,\n1443                     reuse_with_filtered_relation=True,\n1444                 )\n1445             target_clause.add(child_clause, connector)\n1446         return target_clause\n1447 \n1448     def add_filtered_relation(self, filtered_relation, alias):\n1449         filtered_relation.alias = alias\n1450         lookups = dict(get_children_from_q(filtered_relation.condition))\n1451         relation_lookup_parts, relation_field_parts, _ = self.solve_lookup_type(filtered_relation.relation_name)\n1452         if relation_lookup_parts:\n1453             raise ValueError(\n1454                 \"FilteredRelation's relation_name cannot contain lookups \"\n1455                 \"(got %r).\" % filtered_relation.relation_name\n1456             )\n1457         for lookup in chain(lookups):\n1458             lookup_parts, lookup_field_parts, _ = self.solve_lookup_type(lookup)\n1459             shift = 2 if not lookup_parts else 1\n1460             lookup_field_path = lookup_field_parts[:-shift]\n1461             for idx, lookup_field_part in enumerate(lookup_field_path):\n1462                 if len(relation_field_parts) > idx:\n1463                     if relation_field_parts[idx] != lookup_field_part:\n1464                         raise ValueError(\n1465                             \"FilteredRelation's condition doesn't support \"\n1466                             \"relations outside the %r (got %r).\"\n1467                             % (filtered_relation.relation_name, lookup)\n1468                         )\n1469                 else:\n1470                     raise ValueError(\n1471                         \"FilteredRelation's condition doesn't support nested \"\n1472                         \"relations deeper than the relation_name (got %r for \"\n1473                         \"%r).\" % (lookup, filtered_relation.relation_name)\n1474                     )\n1475         self._filtered_relations[filtered_relation.alias] = filtered_relation\n1476 \n1477     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):\n1478         \"\"\"\n1479         Walk the list of names and turns them into PathInfo tuples. A single\n1480         name in 'names' can generate multiple PathInfos (m2m, for example).\n1481 \n1482         'names' is the path of names to travel, 'opts' is the model Options we\n1483         start the name resolving from, 'allow_many' is as for setup_joins().\n1484         If fail_on_missing is set to True, then a name that can't be resolved\n1485         will generate a FieldError.\n1486 \n1487         Return a list of PathInfo tuples. In addition return the final field\n1488         (the last used join field) and target (which is a field guaranteed to\n1489         contain the same value as the final field). Finally, return those names\n1490         that weren't found (which are likely transforms and the final lookup).\n1491         \"\"\"\n1492         path, names_with_path = [], []\n1493         for pos, name in enumerate(names):\n1494             cur_names_with_path = (name, [])\n1495             if name == 'pk':\n1496                 name = opts.pk.name\n1497 \n1498             field = None\n1499             filtered_relation = None\n1500             try:\n1501                 field = opts.get_field(name)\n1502             except FieldDoesNotExist:\n1503                 if name in self.annotation_select:\n1504                     field = self.annotation_select[name].output_field\n1505                 elif name in self._filtered_relations and pos == 0:\n1506                     filtered_relation = self._filtered_relations[name]\n1507                     if LOOKUP_SEP in filtered_relation.relation_name:\n1508                         parts = filtered_relation.relation_name.split(LOOKUP_SEP)\n1509                         filtered_relation_path, field, _, _ = self.names_to_path(\n1510                             parts, opts, allow_many, fail_on_missing,\n1511                         )\n1512                         path.extend(filtered_relation_path[:-1])\n1513                     else:\n1514                         field = opts.get_field(filtered_relation.relation_name)\n1515             if field is not None:\n1516                 # Fields that contain one-to-many relations with a generic\n1517                 # model (like a GenericForeignKey) cannot generate reverse\n1518                 # relations and therefore cannot be used for reverse querying.\n1519                 if field.is_relation and not field.related_model:\n1520                     raise FieldError(\n1521                         \"Field %r does not generate an automatic reverse \"\n1522                         \"relation and therefore cannot be used for reverse \"\n1523                         \"querying. If it is a GenericForeignKey, consider \"\n1524                         \"adding a GenericRelation.\" % name\n1525                     )\n1526                 try:\n1527                     model = field.model._meta.concrete_model\n1528                 except AttributeError:\n1529                     # QuerySet.annotate() may introduce fields that aren't\n1530                     # attached to a model.\n1531                     model = None\n1532             else:\n1533                 # We didn't find the current field, so move position back\n1534                 # one step.\n1535                 pos -= 1\n1536                 if pos == -1 or fail_on_missing:\n1537                     available = sorted([\n1538                         *get_field_names_from_opts(opts),\n1539                         *self.annotation_select,\n1540                         *self._filtered_relations,\n1541                     ])\n1542                     raise FieldError(\"Cannot resolve keyword '%s' into field. \"\n1543                                      \"Choices are: %s\" % (name, \", \".join(available)))\n1544                 break\n1545             # Check if we need any joins for concrete inheritance cases (the\n1546             # field lives in parent, but we are currently in one of its\n1547             # children)\n1548             if model is not opts.model:\n1549                 path_to_parent = opts.get_path_to_parent(model)\n1550                 if path_to_parent:\n1551                     path.extend(path_to_parent)\n1552                     cur_names_with_path[1].extend(path_to_parent)\n1553                     opts = path_to_parent[-1].to_opts\n1554             if hasattr(field, 'get_path_info'):\n1555                 pathinfos = field.get_path_info(filtered_relation)\n1556                 if not allow_many:\n1557                     for inner_pos, p in enumerate(pathinfos):\n1558                         if p.m2m:\n1559                             cur_names_with_path[1].extend(pathinfos[0:inner_pos + 1])\n1560                             names_with_path.append(cur_names_with_path)\n1561                             raise MultiJoin(pos + 1, names_with_path)\n1562                 last = pathinfos[-1]\n1563                 path.extend(pathinfos)\n1564                 final_field = last.join_field\n1565                 opts = last.to_opts\n1566                 targets = last.target_fields\n1567                 cur_names_with_path[1].extend(pathinfos)\n1568                 names_with_path.append(cur_names_with_path)\n1569             else:\n1570                 # Local non-relational field.\n1571                 final_field = field\n1572                 targets = (field,)\n1573                 if fail_on_missing and pos + 1 != len(names):\n1574                     raise FieldError(\n1575                         \"Cannot resolve keyword %r into field. Join on '%s'\"\n1576                         \" not permitted.\" % (names[pos + 1], name))\n1577                 break\n1578         return path, final_field, targets, names[pos + 1:]\n1579 \n1580     def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True,\n1581                     reuse_with_filtered_relation=False):\n1582         \"\"\"\n1583         Compute the necessary table joins for the passage through the fields\n1584         given in 'names'. 'opts' is the Options class for the current model\n1585         (which gives the table we are starting from), 'alias' is the alias for\n1586         the table to start the joining from.\n1587 \n1588         The 'can_reuse' defines the reverse foreign key joins we can reuse. It\n1589         can be None in which case all joins are reusable or a set of aliases\n1590         that can be reused. Note that non-reverse foreign keys are always\n1591         reusable when using setup_joins().\n1592 \n1593         The 'reuse_with_filtered_relation' can be used to force 'can_reuse'\n1594         parameter and force the relation on the given connections.\n1595 \n1596         If 'allow_many' is False, then any reverse foreign key seen will\n1597         generate a MultiJoin exception.\n1598 \n1599         Return the final field involved in the joins, the target field (used\n1600         for any 'where' constraint), the final 'opts' value, the joins, the\n1601         field path traveled to generate the joins, and a transform function\n1602         that takes a field and alias and is equivalent to `field.get_col(alias)`\n1603         in the simple case but wraps field transforms if they were included in\n1604         names.\n1605 \n1606         The target field is the field containing the concrete value. Final\n1607         field can be something different, for example foreign key pointing to\n1608         that value. Final field is needed for example in some value\n1609         conversions (convert 'obj' in fk__id=obj to pk val using the foreign\n1610         key field for example).\n1611         \"\"\"\n1612         joins = [alias]\n1613         # The transform can't be applied yet, as joins must be trimmed later.\n1614         # To avoid making every caller of this method look up transforms\n1615         # directly, compute transforms here and create a partial that converts\n1616         # fields to the appropriate wrapped version.\n1617 \n1618         def final_transformer(field, alias):\n1619             if not self.alias_cols:\n1620                 alias = None\n1621             return field.get_col(alias)\n1622 \n1623         # Try resolving all the names as fields first. If there's an error,\n1624         # treat trailing names as lookups until a field can be resolved.\n1625         last_field_exception = None\n1626         for pivot in range(len(names), 0, -1):\n1627             try:\n1628                 path, final_field, targets, rest = self.names_to_path(\n1629                     names[:pivot], opts, allow_many, fail_on_missing=True,\n1630                 )\n1631             except FieldError as exc:\n1632                 if pivot == 1:\n1633                     # The first item cannot be a lookup, so it's safe\n1634                     # to raise the field error here.\n1635                     raise\n1636                 else:\n1637                     last_field_exception = exc\n1638             else:\n1639                 # The transforms are the remaining items that couldn't be\n1640                 # resolved into fields.\n1641                 transforms = names[pivot:]\n1642                 break\n1643         for name in transforms:\n1644             def transform(field, alias, *, name, previous):\n1645                 try:\n1646                     wrapped = previous(field, alias)\n1647                     return self.try_transform(wrapped, name)\n1648                 except FieldError:\n1649                     # FieldError is raised if the transform doesn't exist.\n1650                     if isinstance(final_field, Field) and last_field_exception:\n1651                         raise last_field_exception\n1652                     else:\n1653                         raise\n1654             final_transformer = functools.partial(transform, name=name, previous=final_transformer)\n1655         # Then, add the path to the query's joins. Note that we can't trim\n1656         # joins at this stage - we will need the information about join type\n1657         # of the trimmed joins.\n1658         for join in path:\n1659             if join.filtered_relation:\n1660                 filtered_relation = join.filtered_relation.clone()\n1661                 table_alias = filtered_relation.alias\n1662             else:\n1663                 filtered_relation = None\n1664                 table_alias = None\n1665             opts = join.to_opts\n1666             if join.direct:\n1667                 nullable = self.is_nullable(join.join_field)\n1668             else:\n1669                 nullable = True\n1670             connection = Join(\n1671                 opts.db_table, alias, table_alias, INNER, join.join_field,\n1672                 nullable, filtered_relation=filtered_relation,\n1673             )\n1674             reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None\n1675             alias = self.join(\n1676                 connection, reuse=reuse,\n1677                 reuse_with_filtered_relation=reuse_with_filtered_relation,\n1678             )\n1679             joins.append(alias)\n1680             if filtered_relation:\n1681                 filtered_relation.path = joins[:]\n1682         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)\n1683 \n1684     def trim_joins(self, targets, joins, path):\n1685         \"\"\"\n1686         The 'target' parameter is the final field being joined to, 'joins'\n1687         is the full list of join aliases. The 'path' contain the PathInfos\n1688         used to create the joins.\n1689 \n1690         Return the final target field and table alias and the new active\n1691         joins.\n1692 \n1693         Always trim any direct join if the target column is already in the\n1694         previous table. Can't trim reverse joins as it's unknown if there's\n1695         anything on the other side of the join.\n1696         \"\"\"\n1697         joins = joins[:]\n1698         for pos, info in enumerate(reversed(path)):\n1699             if len(joins) == 1 or not info.direct:\n1700                 break\n1701             if info.filtered_relation:\n1702                 break\n1703             join_targets = {t.column for t in info.join_field.foreign_related_fields}\n1704             cur_targets = {t.column for t in targets}\n1705             if not cur_targets.issubset(join_targets):\n1706                 break\n1707             targets_dict = {r[1].column: r[0] for r in info.join_field.related_fields if r[1].column in cur_targets}\n1708             targets = tuple(targets_dict[t.column] for t in targets)\n1709             self.unref_alias(joins.pop())\n1710         return targets, joins[-1], joins\n1711 \n1712     @classmethod\n1713     def _gen_cols(cls, exprs):\n1714         for expr in exprs:\n1715             if isinstance(expr, Col):\n1716                 yield expr\n1717             else:\n1718                 yield from cls._gen_cols(expr.get_source_expressions())\n1719 \n1720     @classmethod\n1721     def _gen_col_aliases(cls, exprs):\n1722         yield from (expr.alias for expr in cls._gen_cols(exprs))\n1723 \n1724     def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False):\n1725         annotation = self.annotations.get(name)\n1726         if annotation is not None:\n1727             if not allow_joins:\n1728                 for alias in self._gen_col_aliases([annotation]):\n1729                     if isinstance(self.alias_map[alias], Join):\n1730                         raise FieldError(\n1731                             'Joined field references are not permitted in '\n1732                             'this query'\n1733                         )\n1734             if summarize:\n1735                 # Summarize currently means we are doing an aggregate() query\n1736                 # which is executed as a wrapped subquery if any of the\n1737                 # aggregate() elements reference an existing annotation. In\n1738                 # that case we need to return a Ref to the subquery's annotation.\n1739                 if name not in self.annotation_select:\n1740                     raise FieldError(\n1741                         \"Cannot aggregate over the '%s' alias. Use annotate() \"\n1742                         \"to promote it.\" % name\n1743                     )\n1744                 return Ref(name, self.annotation_select[name])\n1745             else:\n1746                 return annotation\n1747         else:\n1748             field_list = name.split(LOOKUP_SEP)\n1749             annotation = self.annotations.get(field_list[0])\n1750             if annotation is not None:\n1751                 for transform in field_list[1:]:\n1752                     annotation = self.try_transform(annotation, transform)\n1753                 return annotation\n1754             join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)\n1755             targets, final_alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)\n1756             if not allow_joins and len(join_list) > 1:\n1757                 raise FieldError('Joined field references are not permitted in this query')\n1758             if len(targets) > 1:\n1759                 raise FieldError(\"Referencing multicolumn fields with F() objects \"\n1760                                  \"isn't supported\")\n1761             # Verify that the last lookup in name is a field or a transform:\n1762             # transform_function() raises FieldError if not.\n1763             transform = join_info.transform_function(targets[0], final_alias)\n1764             if reuse is not None:\n1765                 reuse.update(join_list)\n1766             return transform\n1767 \n1768     def split_exclude(self, filter_expr, can_reuse, names_with_path):\n1769         \"\"\"\n1770         When doing an exclude against any kind of N-to-many relation, we need\n1771         to use a subquery. This method constructs the nested query, given the\n1772         original exclude filter (filter_expr) and the portion up to the first\n1773         N-to-many relation field.\n1774 \n1775         For example, if the origin filter is ~Q(child__name='foo'), filter_expr\n1776         is ('child__name', 'foo') and can_reuse is a set of joins usable for\n1777         filters in the original query.\n1778 \n1779         We will turn this into equivalent of:\n1780             WHERE NOT EXISTS(\n1781                 SELECT 1\n1782                 FROM child\n1783                 WHERE name = 'foo' AND child.parent_id = parent.id\n1784                 LIMIT 1\n1785             )\n1786         \"\"\"\n1787         filter_lhs, filter_rhs = filter_expr\n1788         if isinstance(filter_rhs, OuterRef):\n1789             filter_expr = (filter_lhs, OuterRef(filter_rhs))\n1790         elif isinstance(filter_rhs, F):\n1791             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))\n1792         # Generate the inner query.\n1793         query = Query(self.model)\n1794         query._filtered_relations = self._filtered_relations\n1795         query.add_filter(filter_expr)\n1796         query.clear_ordering(True)\n1797         # Try to have as simple as possible subquery -> trim leading joins from\n1798         # the subquery.\n1799         trimmed_prefix, contains_louter = query.trim_start(names_with_path)\n1800 \n1801         col = query.select[0]\n1802         select_field = col.target\n1803         alias = col.alias\n1804         if alias in can_reuse:\n1805             pk = select_field.model._meta.pk\n1806             # Need to add a restriction so that outer query's filters are in effect for\n1807             # the subquery, too.\n1808             query.bump_prefix(self)\n1809             lookup_class = select_field.get_lookup('exact')\n1810             # Note that the query.select[0].alias is different from alias\n1811             # due to bump_prefix above.\n1812             lookup = lookup_class(pk.get_col(query.select[0].alias),\n1813                                   pk.get_col(alias))\n1814             query.where.add(lookup, AND)\n1815             query.external_aliases[alias] = True\n1816 \n1817         lookup_class = select_field.get_lookup('exact')\n1818         lookup = lookup_class(col, ResolvedOuterRef(trimmed_prefix))\n1819         query.where.add(lookup, AND)\n1820         condition, needed_inner = self.build_filter(Exists(query))\n1821 \n1822         if contains_louter:\n1823             or_null_condition, _ = self.build_filter(\n1824                 ('%s__isnull' % trimmed_prefix, True),\n1825                 current_negated=True, branch_negated=True, can_reuse=can_reuse)\n1826             condition.add(or_null_condition, OR)\n1827             # Note that the end result will be:\n1828             # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.\n1829             # This might look crazy but due to how IN works, this seems to be\n1830             # correct. If the IS NOT NULL check is removed then outercol NOT\n1831             # IN will return UNKNOWN. If the IS NULL check is removed, then if\n1832             # outercol IS NULL we will not match the row.\n1833         return condition, needed_inner\n1834 \n1835     def set_empty(self):\n1836         self.where.add(NothingNode(), AND)\n1837         for query in self.combined_queries:\n1838             query.set_empty()\n1839 \n1840     def is_empty(self):\n1841         return any(isinstance(c, NothingNode) for c in self.where.children)\n1842 \n1843     def set_limits(self, low=None, high=None):\n1844         \"\"\"\n1845         Adjust the limits on the rows retrieved. Use low/high to set these,\n1846         as it makes it more Pythonic to read and write. When the SQL query is\n1847         created, convert them to the appropriate offset and limit values.\n1848 \n1849         Apply any limits passed in here to the existing constraints. Add low\n1850         to the current low value and clamp both to any existing high value.\n1851         \"\"\"\n1852         if high is not None:\n1853             if self.high_mark is not None:\n1854                 self.high_mark = min(self.high_mark, self.low_mark + high)\n1855             else:\n1856                 self.high_mark = self.low_mark + high\n1857         if low is not None:\n1858             if self.high_mark is not None:\n1859                 self.low_mark = min(self.high_mark, self.low_mark + low)\n1860             else:\n1861                 self.low_mark = self.low_mark + low\n1862 \n1863         if self.low_mark == self.high_mark:\n1864             self.set_empty()\n1865 \n1866     def clear_limits(self):\n1867         \"\"\"Clear any existing limits.\"\"\"\n1868         self.low_mark, self.high_mark = 0, None\n1869 \n1870     @property\n1871     def is_sliced(self):\n1872         return self.low_mark != 0 or self.high_mark is not None\n1873 \n1874     def has_limit_one(self):\n1875         return self.high_mark is not None and (self.high_mark - self.low_mark) == 1\n1876 \n1877     def can_filter(self):\n1878         \"\"\"\n1879         Return True if adding filters to this instance is still possible.\n1880 \n1881         Typically, this means no limits or offsets have been put on the results.\n1882         \"\"\"\n1883         return not self.is_sliced\n1884 \n1885     def clear_select_clause(self):\n1886         \"\"\"Remove all fields from SELECT clause.\"\"\"\n1887         self.select = ()\n1888         self.default_cols = False\n1889         self.select_related = False\n1890         self.set_extra_mask(())\n1891         self.set_annotation_mask(())\n1892 \n1893     def clear_select_fields(self):\n1894         \"\"\"\n1895         Clear the list of fields to select (but not extra_select columns).\n1896         Some queryset types completely replace any existing list of select\n1897         columns.\n1898         \"\"\"\n1899         self.select = ()\n1900         self.values_select = ()\n1901 \n1902     def add_select_col(self, col, name):\n1903         self.select += col,\n1904         self.values_select += name,\n1905 \n1906     def set_select(self, cols):\n1907         self.default_cols = False\n1908         self.select = tuple(cols)\n1909 \n1910     def add_distinct_fields(self, *field_names):\n1911         \"\"\"\n1912         Add and resolve the given fields to the query's \"distinct on\" clause.\n1913         \"\"\"\n1914         self.distinct_fields = field_names\n1915         self.distinct = True\n1916 \n1917     def add_fields(self, field_names, allow_m2m=True):\n1918         \"\"\"\n1919         Add the given (model) fields to the select set. Add the field names in\n1920         the order specified.\n1921         \"\"\"\n1922         alias = self.get_initial_alias()\n1923         opts = self.get_meta()\n1924 \n1925         try:\n1926             cols = []\n1927             for name in field_names:\n1928                 # Join promotion note - we must not remove any rows here, so\n1929                 # if there is no existing joins, use outer join.\n1930                 join_info = self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m)\n1931                 targets, final_alias, joins = self.trim_joins(\n1932                     join_info.targets,\n1933                     join_info.joins,\n1934                     join_info.path,\n1935                 )\n1936                 for target in targets:\n1937                     cols.append(join_info.transform_function(target, final_alias))\n1938             if cols:\n1939                 self.set_select(cols)\n1940         except MultiJoin:\n1941             raise FieldError(\"Invalid field name: '%s'\" % name)\n1942         except FieldError:\n1943             if LOOKUP_SEP in name:\n1944                 # For lookups spanning over relationships, show the error\n1945                 # from the model on which the lookup failed.\n1946                 raise\n1947             elif name in self.annotations:\n1948                 raise FieldError(\n1949                     \"Cannot select the '%s' alias. Use annotate() to promote \"\n1950                     \"it.\" % name\n1951                 )\n1952             else:\n1953                 names = sorted([\n1954                     *get_field_names_from_opts(opts), *self.extra,\n1955                     *self.annotation_select, *self._filtered_relations\n1956                 ])\n1957                 raise FieldError(\"Cannot resolve keyword %r into field. \"\n1958                                  \"Choices are: %s\" % (name, \", \".join(names)))\n1959 \n1960     def add_ordering(self, *ordering):\n1961         \"\"\"\n1962         Add items from the 'ordering' sequence to the query's \"order by\"\n1963         clause. These items are either field names (not column names) --\n1964         possibly with a direction prefix ('-' or '?') -- or OrderBy\n1965         expressions.\n1966 \n1967         If 'ordering' is empty, clear all ordering from the query.\n1968         \"\"\"\n1969         errors = []\n1970         for item in ordering:\n1971             if isinstance(item, str):\n1972                 if '.' in item:\n1973                     warnings.warn(\n1974                         'Passing column raw column aliases to order_by() is '\n1975                         'deprecated. Wrap %r in a RawSQL expression before '\n1976                         'passing it to order_by().' % item,\n1977                         category=RemovedInDjango40Warning,\n1978                         stacklevel=3,\n1979                     )\n1980                     continue\n1981                 if item == '?':\n1982                     continue\n1983                 if item.startswith('-'):\n1984                     item = item[1:]\n1985                 if item in self.annotations:\n1986                     continue\n1987                 if self.extra and item in self.extra:\n1988                     continue\n1989                 # names_to_path() validates the lookup. A descriptive\n1990                 # FieldError will be raise if it's not.\n1991                 self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)\n1992             elif not hasattr(item, 'resolve_expression'):\n1993                 errors.append(item)\n1994             if getattr(item, 'contains_aggregate', False):\n1995                 raise FieldError(\n1996                     'Using an aggregate in order_by() without also including '\n1997                     'it in annotate() is not allowed: %s' % item\n1998                 )\n1999         if errors:\n2000             raise FieldError('Invalid order_by arguments: %s' % errors)\n2001         if ordering:\n2002             self.order_by += ordering\n2003         else:\n2004             self.default_ordering = False\n2005 \n2006     def clear_ordering(self, force_empty):\n2007         \"\"\"\n2008         Remove any ordering settings. If 'force_empty' is True, there will be\n2009         no ordering in the resulting query (not even the model's default).\n2010         \"\"\"\n2011         self.order_by = ()\n2012         self.extra_order_by = ()\n2013         if force_empty:\n2014             self.default_ordering = False\n2015 \n2016     def set_group_by(self, allow_aliases=True):\n2017         \"\"\"\n2018         Expand the GROUP BY clause required by the query.\n2019 \n2020         This will usually be the set of all non-aggregate fields in the\n2021         return data. If the database backend supports grouping by the\n2022         primary key, and the query would be equivalent, the optimization\n2023         will be made automatically.\n2024         \"\"\"\n2025         # Column names from JOINs to check collisions with aliases.\n2026         if allow_aliases:\n2027             column_names = set()\n2028             seen_models = set()\n2029             for join in list(self.alias_map.values())[1:]:  # Skip base table.\n2030                 model = join.join_field.related_model\n2031                 if model not in seen_models:\n2032                     column_names.update({\n2033                         field.column\n2034                         for field in model._meta.local_concrete_fields\n2035                     })\n2036                     seen_models.add(model)\n2037 \n2038         group_by = list(self.select)\n2039         if self.annotation_select:\n2040             for alias, annotation in self.annotation_select.items():\n2041                 signature = inspect.signature(annotation.get_group_by_cols)\n2042                 if 'alias' not in signature.parameters:\n2043                     annotation_class = annotation.__class__\n2044                     msg = (\n2045                         '`alias=None` must be added to the signature of '\n2046                         '%s.%s.get_group_by_cols().'\n2047                     ) % (annotation_class.__module__, annotation_class.__qualname__)\n2048                     warnings.warn(msg, category=RemovedInDjango40Warning)\n2049                     group_by_cols = annotation.get_group_by_cols()\n2050                 else:\n2051                     if not allow_aliases or alias in column_names:\n2052                         alias = None\n2053                     group_by_cols = annotation.get_group_by_cols(alias=alias)\n2054                 group_by.extend(group_by_cols)\n2055         self.group_by = tuple(group_by)\n2056 \n2057     def add_select_related(self, fields):\n2058         \"\"\"\n2059         Set up the select_related data structure so that we only select\n2060         certain related models (as opposed to all models, when\n2061         self.select_related=True).\n2062         \"\"\"\n2063         if isinstance(self.select_related, bool):\n2064             field_dict = {}\n2065         else:\n2066             field_dict = self.select_related\n2067         for field in fields:\n2068             d = field_dict\n2069             for part in field.split(LOOKUP_SEP):\n2070                 d = d.setdefault(part, {})\n2071         self.select_related = field_dict\n2072 \n2073     def add_extra(self, select, select_params, where, params, tables, order_by):\n2074         \"\"\"\n2075         Add data to the various extra_* attributes for user-created additions\n2076         to the query.\n2077         \"\"\"\n2078         if select:\n2079             # We need to pair any placeholder markers in the 'select'\n2080             # dictionary with their parameters in 'select_params' so that\n2081             # subsequent updates to the select dictionary also adjust the\n2082             # parameters appropriately.\n2083             select_pairs = {}\n2084             if select_params:\n2085                 param_iter = iter(select_params)\n2086             else:\n2087                 param_iter = iter([])\n2088             for name, entry in select.items():\n2089                 entry = str(entry)\n2090                 entry_params = []\n2091                 pos = entry.find(\"%s\")\n2092                 while pos != -1:\n2093                     if pos == 0 or entry[pos - 1] != '%':\n2094                         entry_params.append(next(param_iter))\n2095                     pos = entry.find(\"%s\", pos + 2)\n2096                 select_pairs[name] = (entry, entry_params)\n2097             self.extra.update(select_pairs)\n2098         if where or params:\n2099             self.where.add(ExtraWhere(where, params), AND)\n2100         if tables:\n2101             self.extra_tables += tuple(tables)\n2102         if order_by:\n2103             self.extra_order_by = order_by\n2104 \n2105     def clear_deferred_loading(self):\n2106         \"\"\"Remove any fields from the deferred loading set.\"\"\"\n2107         self.deferred_loading = (frozenset(), True)\n2108 \n2109     def add_deferred_loading(self, field_names):\n2110         \"\"\"\n2111         Add the given list of model field names to the set of fields to\n2112         exclude from loading from the database when automatic column selection\n2113         is done. Add the new field names to any existing field names that\n2114         are deferred (or removed from any existing field names that are marked\n2115         as the only ones for immediate loading).\n2116         \"\"\"\n2117         # Fields on related models are stored in the literal double-underscore\n2118         # format, so that we can use a set datastructure. We do the foo__bar\n2119         # splitting and handling when computing the SQL column names (as part of\n2120         # get_columns()).\n2121         existing, defer = self.deferred_loading\n2122         if defer:\n2123             # Add to existing deferred names.\n2124             self.deferred_loading = existing.union(field_names), True\n2125         else:\n2126             # Remove names from the set of any existing \"immediate load\" names.\n2127             self.deferred_loading = existing.difference(field_names), False\n2128 \n2129     def add_immediate_loading(self, field_names):\n2130         \"\"\"\n2131         Add the given list of model field names to the set of fields to\n2132         retrieve when the SQL is executed (\"immediate loading\" fields). The\n2133         field names replace any existing immediate loading field names. If\n2134         there are field names already specified for deferred loading, remove\n2135         those names from the new field_names before storing the new names\n2136         for immediate loading. (That is, immediate loading overrides any\n2137         existing immediate values, but respects existing deferrals.)\n2138         \"\"\"\n2139         existing, defer = self.deferred_loading\n2140         field_names = set(field_names)\n2141         if 'pk' in field_names:\n2142             field_names.remove('pk')\n2143             field_names.add(self.get_meta().pk.name)\n2144 \n2145         if defer:\n2146             # Remove any existing deferred names from the current set before\n2147             # setting the new names.\n2148             self.deferred_loading = field_names.difference(existing), False\n2149         else:\n2150             # Replace any existing \"immediate load\" field names.\n2151             self.deferred_loading = frozenset(field_names), False\n2152 \n2153     def get_loaded_field_names(self):\n2154         \"\"\"\n2155         If any fields are marked to be deferred, return a dictionary mapping\n2156         models to a set of names in those fields that will be loaded. If a\n2157         model is not in the returned dictionary, none of its fields are\n2158         deferred.\n2159 \n2160         If no fields are marked for deferral, return an empty dictionary.\n2161         \"\"\"\n2162         # We cache this because we call this function multiple times\n2163         # (compiler.fill_related_selections, query.iterator)\n2164         try:\n2165             return self._loaded_field_names_cache\n2166         except AttributeError:\n2167             collection = {}\n2168             self.deferred_to_data(collection, self.get_loaded_field_names_cb)\n2169             self._loaded_field_names_cache = collection\n2170             return collection\n2171 \n2172     def get_loaded_field_names_cb(self, target, model, fields):\n2173         \"\"\"Callback used by get_deferred_field_names().\"\"\"\n2174         target[model] = {f.attname for f in fields}\n2175 \n2176     def set_annotation_mask(self, names):\n2177         \"\"\"Set the mask of annotations that will be returned by the SELECT.\"\"\"\n2178         if names is None:\n2179             self.annotation_select_mask = None\n2180         else:\n2181             self.annotation_select_mask = set(names)\n2182         self._annotation_select_cache = None\n2183 \n2184     def append_annotation_mask(self, names):\n2185         if self.annotation_select_mask is not None:\n2186             self.set_annotation_mask(self.annotation_select_mask.union(names))\n2187 \n2188     def set_extra_mask(self, names):\n2189         \"\"\"\n2190         Set the mask of extra select items that will be returned by SELECT.\n2191         Don't remove them from the Query since they might be used later.\n2192         \"\"\"\n2193         if names is None:\n2194             self.extra_select_mask = None\n2195         else:\n2196             self.extra_select_mask = set(names)\n2197         self._extra_select_cache = None\n2198 \n2199     def set_values(self, fields):\n2200         self.select_related = False\n2201         self.clear_deferred_loading()\n2202         self.clear_select_fields()\n2203 \n2204         if fields:\n2205             field_names = []\n2206             extra_names = []\n2207             annotation_names = []\n2208             if not self.extra and not self.annotations:\n2209                 # Shortcut - if there are no extra or annotations, then\n2210                 # the values() clause must be just field names.\n2211                 field_names = list(fields)\n2212             else:\n2213                 self.default_cols = False\n2214                 for f in fields:\n2215                     if f in self.extra_select:\n2216                         extra_names.append(f)\n2217                     elif f in self.annotation_select:\n2218                         annotation_names.append(f)\n2219                     else:\n2220                         field_names.append(f)\n2221             self.set_extra_mask(extra_names)\n2222             self.set_annotation_mask(annotation_names)\n2223             selected = frozenset(field_names + extra_names + annotation_names)\n2224         else:\n2225             field_names = [f.attname for f in self.model._meta.concrete_fields]\n2226             selected = frozenset(field_names)\n2227         # Selected annotations must be known before setting the GROUP BY\n2228         # clause.\n2229         if self.group_by is True:\n2230             self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)\n2231             # Disable GROUP BY aliases to avoid orphaning references to the\n2232             # SELECT clause which is about to be cleared.\n2233             self.set_group_by(allow_aliases=False)\n2234             self.clear_select_fields()\n2235         elif self.group_by:\n2236             # Resolve GROUP BY annotation references if they are not part of\n2237             # the selected fields anymore.\n2238             group_by = []\n2239             for expr in self.group_by:\n2240                 if isinstance(expr, Ref) and expr.refs not in selected:\n2241                     expr = self.annotations[expr.refs]\n2242                 group_by.append(expr)\n2243             self.group_by = tuple(group_by)\n2244 \n2245         self.values_select = tuple(field_names)\n2246         self.add_fields(field_names, True)\n2247 \n2248     @property\n2249     def annotation_select(self):\n2250         \"\"\"\n2251         Return the dictionary of aggregate columns that are not masked and\n2252         should be used in the SELECT clause. Cache this result for performance.\n2253         \"\"\"\n2254         if self._annotation_select_cache is not None:\n2255             return self._annotation_select_cache\n2256         elif not self.annotations:\n2257             return {}\n2258         elif self.annotation_select_mask is not None:\n2259             self._annotation_select_cache = {\n2260                 k: v for k, v in self.annotations.items()\n2261                 if k in self.annotation_select_mask\n2262             }\n2263             return self._annotation_select_cache\n2264         else:\n2265             return self.annotations\n2266 \n2267     @property\n2268     def extra_select(self):\n2269         if self._extra_select_cache is not None:\n2270             return self._extra_select_cache\n2271         if not self.extra:\n2272             return {}\n2273         elif self.extra_select_mask is not None:\n2274             self._extra_select_cache = {\n2275                 k: v for k, v in self.extra.items()\n2276                 if k in self.extra_select_mask\n2277             }\n2278             return self._extra_select_cache\n2279         else:\n2280             return self.extra\n2281 \n2282     def trim_start(self, names_with_path):\n2283         \"\"\"\n2284         Trim joins from the start of the join path. The candidates for trim\n2285         are the PathInfos in names_with_path structure that are m2m joins.\n2286 \n2287         Also set the select column so the start matches the join.\n2288 \n2289         This method is meant to be used for generating the subquery joins &\n2290         cols in split_exclude().\n2291 \n2292         Return a lookup usable for doing outerq.filter(lookup=self) and a\n2293         boolean indicating if the joins in the prefix contain a LEFT OUTER join.\n2294         _\"\"\"\n2295         all_paths = []\n2296         for _, paths in names_with_path:\n2297             all_paths.extend(paths)\n2298         contains_louter = False\n2299         # Trim and operate only on tables that were generated for\n2300         # the lookup part of the query. That is, avoid trimming\n2301         # joins generated for F() expressions.\n2302         lookup_tables = [\n2303             t for t in self.alias_map\n2304             if t in self._lookup_joins or t == self.base_table\n2305         ]\n2306         for trimmed_paths, path in enumerate(all_paths):\n2307             if path.m2m:\n2308                 break\n2309             if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type == LOUTER:\n2310                 contains_louter = True\n2311             alias = lookup_tables[trimmed_paths]\n2312             self.unref_alias(alias)\n2313         # The path.join_field is a Rel, lets get the other side's field\n2314         join_field = path.join_field.field\n2315         # Build the filter prefix.\n2316         paths_in_prefix = trimmed_paths\n2317         trimmed_prefix = []\n2318         for name, path in names_with_path:\n2319             if paths_in_prefix - len(path) < 0:\n2320                 break\n2321             trimmed_prefix.append(name)\n2322             paths_in_prefix -= len(path)\n2323         trimmed_prefix.append(\n2324             join_field.foreign_related_fields[0].name)\n2325         trimmed_prefix = LOOKUP_SEP.join(trimmed_prefix)\n2326         # Lets still see if we can trim the first join from the inner query\n2327         # (that is, self). We can't do this for:\n2328         # - LEFT JOINs because we would miss those rows that have nothing on\n2329         #   the outer side,\n2330         # - INNER JOINs from filtered relations because we would miss their\n2331         #   filters.\n2332         first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]\n2333         if first_join.join_type != LOUTER and not first_join.filtered_relation:\n2334             select_fields = [r[0] for r in join_field.related_fields]\n2335             select_alias = lookup_tables[trimmed_paths + 1]\n2336             self.unref_alias(lookup_tables[trimmed_paths])\n2337             extra_restriction = join_field.get_extra_restriction(\n2338                 self.where_class, None, lookup_tables[trimmed_paths + 1])\n2339             if extra_restriction:\n2340                 self.where.add(extra_restriction, AND)\n2341         else:\n2342             # TODO: It might be possible to trim more joins from the start of the\n2343             # inner query if it happens to have a longer join chain containing the\n2344             # values in select_fields. Lets punt this one for now.\n2345             select_fields = [r[1] for r in join_field.related_fields]\n2346             select_alias = lookup_tables[trimmed_paths]\n2347         # The found starting point is likely a Join instead of a BaseTable reference.\n2348         # But the first entry in the query's FROM clause must not be a JOIN.\n2349         for table in self.alias_map:\n2350             if self.alias_refcount[table] > 0:\n2351                 self.alias_map[table] = BaseTable(self.alias_map[table].table_name, table)\n2352                 break\n2353         self.set_select([f.get_col(select_alias) for f in select_fields])\n2354         return trimmed_prefix, contains_louter\n2355 \n2356     def is_nullable(self, field):\n2357         \"\"\"\n2358         Check if the given field should be treated as nullable.\n2359 \n2360         Some backends treat '' as null and Django treats such fields as\n2361         nullable for those backends. In such situations field.null can be\n2362         False even if we should treat the field as nullable.\n2363         \"\"\"\n2364         # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have\n2365         # (nor should it have) knowledge of which connection is going to be\n2366         # used. The proper fix would be to defer all decisions where\n2367         # is_nullable() is needed to the compiler stage, but that is not easy\n2368         # to do currently.\n2369         return (\n2370             connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and\n2371             field.empty_strings_allowed\n2372         ) or field.null\n",
        "intended_behavior": "This class provides additional context to the issue."
    },
    {
        "rel_file_path": "django/core/checks/model_checks.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/core/checks/model_checks.py",
        "start": 1,
        "end": 210,
        "class_name": null,
        "method_name": null,
        "code": "1 import inspect\n2 import types\n3 from collections import defaultdict\n4 from itertools import chain\n5 \n6 from django.apps import apps\n7 from django.conf import settings\n8 from django.core.checks import Error, Tags, Warning, register\n9 \n10 \n11 @register(Tags.models)\n12 def check_all_models(app_configs=None, **kwargs):\n13     db_table_models = defaultdict(list)\n14     indexes = defaultdict(list)\n15     constraints = defaultdict(list)\n16     errors = []\n17     if app_configs is None:\n18         models = apps.get_models()\n19     else:\n20         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n21     for model in models:\n22         if model._meta.managed and not model._meta.proxy:\n23             db_table_models[model._meta.db_table].append(model._meta.label)\n24         if not inspect.ismethod(model.check):\n25             errors.append(\n26                 Error(\n27                     \"The '%s.check()' class method is currently overridden by %r.\"\n28                     % (model.__name__, model.check),\n29                     obj=model,\n30                     id='models.E020'\n31                 )\n32             )\n33         else:\n34             errors.extend(model.check(**kwargs))\n35         for model_index in model._meta.indexes:\n36             indexes[model_index.name].append(model._meta.label)\n37         for model_constraint in model._meta.constraints:\n38             constraints[model_constraint.name].append(model._meta.label)\n39     if settings.DATABASE_ROUTERS:\n40         error_class, error_id = Warning, 'models.W035'\n41         error_hint = (\n42             'You have configured settings.DATABASE_ROUTERS. Verify that %s '\n43             'are correctly routed to separate databases.'\n44         )\n45     else:\n46         error_class, error_id = Error, 'models.E028'\n47         error_hint = None\n48     for db_table, model_labels in db_table_models.items():\n49         if len(model_labels) != 1:\n50             model_labels_str = ', '.join(model_labels)\n51             errors.append(\n52                 error_class(\n53                     \"db_table '%s' is used by multiple models: %s.\"\n54                     % (db_table, model_labels_str),\n55                     obj=db_table,\n56                     hint=(error_hint % model_labels_str) if error_hint else None,\n57                     id=error_id,\n58                 )\n59             )\n60     for index_name, model_labels in indexes.items():\n61         if len(model_labels) > 1:\n62             model_labels = set(model_labels)\n63             errors.append(\n64                 Error(\n65                     \"index name '%s' is not unique %s %s.\" % (\n66                         index_name,\n67                         'for model' if len(model_labels) == 1 else 'among models:',\n68                         ', '.join(sorted(model_labels)),\n69                     ),\n70                     id='models.E029' if len(model_labels) == 1 else 'models.E030',\n71                 ),\n72             )\n73     for constraint_name, model_labels in constraints.items():\n74         if len(model_labels) > 1:\n75             model_labels = set(model_labels)\n76             errors.append(\n77                 Error(\n78                     \"constraint name '%s' is not unique %s %s.\" % (\n79                         constraint_name,\n80                         'for model' if len(model_labels) == 1 else 'among models:',\n81                         ', '.join(sorted(model_labels)),\n82                     ),\n83                     id='models.E031' if len(model_labels) == 1 else 'models.E032',\n84                 ),\n85             )\n86     return errors\n87 \n88 \n89 def _check_lazy_references(apps, ignore=None):\n90     \"\"\"\n91     Ensure all lazy (i.e. string) model references have been resolved.\n92 \n93     Lazy references are used in various places throughout Django, primarily in\n94     related fields and model signals. Identify those common cases and provide\n95     more helpful error messages for them.\n96 \n97     The ignore parameter is used by StateApps to exclude swappable models from\n98     this check.\n99     \"\"\"\n100     pending_models = set(apps._pending_operations) - (ignore or set())\n101 \n102     # Short circuit if there aren't any errors.\n103     if not pending_models:\n104         return []\n105 \n106     from django.db.models import signals\n107     model_signals = {\n108         signal: name for name, signal in vars(signals).items()\n109         if isinstance(signal, signals.ModelSignal)\n110     }\n111 \n112     def extract_operation(obj):\n113         \"\"\"\n114         Take a callable found in Apps._pending_operations and identify the\n115         original callable passed to Apps.lazy_model_operation(). If that\n116         callable was a partial, return the inner, non-partial function and\n117         any arguments and keyword arguments that were supplied with it.\n118 \n119         obj is a callback defined locally in Apps.lazy_model_operation() and\n120         annotated there with a `func` attribute so as to imitate a partial.\n121         \"\"\"\n122         operation, args, keywords = obj, [], {}\n123         while hasattr(operation, 'func'):\n124             args.extend(getattr(operation, 'args', []))\n125             keywords.update(getattr(operation, 'keywords', {}))\n126             operation = operation.func\n127         return operation, args, keywords\n128 \n129     def app_model_error(model_key):\n130         try:\n131             apps.get_app_config(model_key[0])\n132             model_error = \"app '%s' doesn't provide model '%s'\" % model_key\n133         except LookupError:\n134             model_error = \"app '%s' isn't installed\" % model_key[0]\n135         return model_error\n136 \n137     # Here are several functions which return CheckMessage instances for the\n138     # most common usages of lazy operations throughout Django. These functions\n139     # take the model that was being waited on as an (app_label, modelname)\n140     # pair, the original lazy function, and its positional and keyword args as\n141     # determined by extract_operation().\n142 \n143     def field_error(model_key, func, args, keywords):\n144         error_msg = (\n145             \"The field %(field)s was declared with a lazy reference \"\n146             \"to '%(model)s', but %(model_error)s.\"\n147         )\n148         params = {\n149             'model': '.'.join(model_key),\n150             'field': keywords['field'],\n151             'model_error': app_model_error(model_key),\n152         }\n153         return Error(error_msg % params, obj=keywords['field'], id='fields.E307')\n154 \n155     def signal_connect_error(model_key, func, args, keywords):\n156         error_msg = (\n157             \"%(receiver)s was connected to the '%(signal)s' signal with a \"\n158             \"lazy reference to the sender '%(model)s', but %(model_error)s.\"\n159         )\n160         receiver = args[0]\n161         # The receiver is either a function or an instance of class\n162         # defining a `__call__` method.\n163         if isinstance(receiver, types.FunctionType):\n164             description = \"The function '%s'\" % receiver.__name__\n165         elif isinstance(receiver, types.MethodType):\n166             description = \"Bound method '%s.%s'\" % (receiver.__self__.__class__.__name__, receiver.__name__)\n167         else:\n168             description = \"An instance of class '%s'\" % receiver.__class__.__name__\n169         signal_name = model_signals.get(func.__self__, 'unknown')\n170         params = {\n171             'model': '.'.join(model_key),\n172             'receiver': description,\n173             'signal': signal_name,\n174             'model_error': app_model_error(model_key),\n175         }\n176         return Error(error_msg % params, obj=receiver.__module__, id='signals.E001')\n177 \n178     def default_error(model_key, func, args, keywords):\n179         error_msg = \"%(op)s contains a lazy reference to %(model)s, but %(model_error)s.\"\n180         params = {\n181             'op': func,\n182             'model': '.'.join(model_key),\n183             'model_error': app_model_error(model_key),\n184         }\n185         return Error(error_msg % params, obj=func, id='models.E022')\n186 \n187     # Maps common uses of lazy operations to corresponding error functions\n188     # defined above. If a key maps to None, no error will be produced.\n189     # default_error() will be used for usages that don't appear in this dict.\n190     known_lazy = {\n191         ('django.db.models.fields.related', 'resolve_related_class'): field_error,\n192         ('django.db.models.fields.related', 'set_managed'): None,\n193         ('django.dispatch.dispatcher', 'connect'): signal_connect_error,\n194     }\n195 \n196     def build_error(model_key, func, args, keywords):\n197         key = (func.__module__, func.__name__)\n198         error_fn = known_lazy.get(key, default_error)\n199         return error_fn(model_key, func, args, keywords) if error_fn else None\n200 \n201     return sorted(filter(None, (\n202         build_error(model_key, *extract_operation(func))\n203         for model_key in pending_models\n204         for func in apps._pending_operations[model_key]\n205     )), key=lambda error: error.msg)\n206 \n207 \n208 @register(Tags.models)\n209 def check_lazy_references(app_configs=None, **kwargs):\n210     return _check_lazy_references(apps)\n",
        "intended_behavior": "Given the issue's implication that system checks for invalid model field names in functional indexes are lacking, a new method or enhancing an existing one here should be responsible for invoking checks against all models' indexes defined in Meta classes. This method should leverage Django\u2019s system check framework to verify that no functional indexes reference invalid fields. The check should catch instances where expressions forming part of an index reference fields not defined on the model, leveraging the logic from `_gen_cols` or similar to resolve expressions to their constituent fields. The check's outcome would ideally be a warning or error within the Django check framework that informs the user of misconfigured indexes, particularly those that might otherwise lead to runtime errors."
    }
]