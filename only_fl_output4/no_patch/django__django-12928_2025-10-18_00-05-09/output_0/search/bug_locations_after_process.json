[
    {
        "rel_file_path": "django/template/backends/django.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/template/backends/django.py",
        "start": 32,
        "end": 36,
        "class_name": "DjangoTemplates",
        "method_name": "get_template",
        "code": "32     def get_template(self, template_name):\n33         try:\n34             return Template(self.engine.get_template(template_name), self)\n35         except TemplateDoesNotExist as exc:\n36             reraise(exc, self)\n",
        "intended_behavior": "Modify this method to implement caching that checks the last modified time of template files when `DEBUG` is `True` and an `autoreload` option is enabled within the `TEMPLATES` settings. If the template has been modified since it was last cached, the method should invalidate the current cache entry, reload the template from the file system, cache this newly loaded version, and return it. This mechanism preserves the existing functionality by maintaining caching benefits but adds developing convenience with auto-reloading capabilities. The caching logic should be bypassed or operate differently when `DEBUG` is `False` to ensure production environments do not incur unnecessary file system checks, adhering to performance best practices. This enhancement will require careful consideration of performance implications to ensure that the development convenience does not lead to significant degradation in template rendering performance during development."
    },
    {
        "rel_file_path": "django/template/backends/django.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/django__django/setup_django__django__3.2/django/template/backends/django.py",
        "start": 14,
        "end": 45,
        "class_name": "DjangoTemplates",
        "method_name": null,
        "code": "14 class DjangoTemplates(BaseEngine):\n15 \n16     app_dirname = 'templates'\n17 \n18     def __init__(self, params):\n19         params = params.copy()\n20         options = params.pop('OPTIONS').copy()\n21         options.setdefault('autoescape', True)\n22         options.setdefault('debug', settings.DEBUG)\n23         options.setdefault('file_charset', 'utf-8')\n24         libraries = options.get('libraries', {})\n25         options['libraries'] = self.get_templatetag_libraries(libraries)\n26         super().__init__(params)\n27         self.engine = Engine(self.dirs, self.app_dirs, **options)\n28 \n29     def from_string(self, template_code):\n30         return Template(self.engine.from_string(template_code), self)\n31 \n32     def get_template(self, template_name):\n33         try:\n34             return Template(self.engine.get_template(template_name), self)\n35         except TemplateDoesNotExist as exc:\n36             reraise(exc, self)\n37 \n38     def get_templatetag_libraries(self, custom_libraries):\n39         \"\"\"\n40         Return a collation of template tag libraries from installed\n41         applications and the supplied custom_libraries argument.\n42         \"\"\"\n43         libraries = get_installed_libraries()\n44         libraries.update(custom_libraries)\n45         return libraries\n",
        "intended_behavior": "This class provides additional context to the issue."
    }
]