Float constructor should allow to set binary precision
I discussed this in some other issues, but I don't think I've opened an issue for it. 

The Float constructor only allows you to set the decimal precision. It then converts this to binary precision and saves that in `Float._prec`. 

The problem here is that there are fewer decimal precisions than binary precisions. For example:

```
In [9]: Float(1.0, 15)._prec
Out[9]: 53

In [10]: Float(1.0, 16)._prec
Out[10]: 56
```

So for instance, if you had a float that used 54 binary digits, it would be difficult to create a Float from it. I'm not even sure if it's possible, since in the current constructor, the `prec` argument overrides the fourth argument of a tuple input. 

One issue here is that everywhere else in theÂ Sympy and mpmath code, `prec` refers to binary precision and `dps` refers to decimal precision. But currently, the second argument to `Float` is called `prec`, but refers to the decimal precision. So ideally, it should be 

```
Float(s, dps=15, prec=53)
```

where `Float(s, prec=54)` would override the default value of `dps=15`, and calling both (even consistently), like `Float(s, dps=15, prec=54)` would be an error.

Since the keyword argument name has to change, it would be a backwards compatibility break for anyone who calls Float like `Float(s, prec=20)`.  Ideally this would require a deprecation cycle, but it's not possible to detect if someone is calling `Float(s, prec=20)` meaning the old way (20 decimal digits) or the new way (20 binary digits). The good news is that `N` and `evalf` call this argument `n`, so there's no need to change things there. 
