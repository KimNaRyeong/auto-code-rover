[
    {
        "rel_file_path": "src/_pytest/pastebin.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/pytest-dev__pytest/setup_pytest-dev__pytest__5.1/src/_pytest/pastebin.py",
        "start": 1,
        "end": 103,
        "class_name": null,
        "method_name": null,
        "code": "1 \"\"\" submit failure or test session information to a pastebin service. \"\"\"\n2 import tempfile\n3 \n4 import pytest\n5 \n6 \n7 def pytest_addoption(parser):\n8     group = parser.getgroup(\"terminal reporting\")\n9     group._addoption(\n10         \"--pastebin\",\n11         metavar=\"mode\",\n12         action=\"store\",\n13         dest=\"pastebin\",\n14         default=None,\n15         choices=[\"failed\", \"all\"],\n16         help=\"send failed|all info to bpaste.net pastebin service.\",\n17     )\n18 \n19 \n20 @pytest.hookimpl(trylast=True)\n21 def pytest_configure(config):\n22     if config.option.pastebin == \"all\":\n23         tr = config.pluginmanager.getplugin(\"terminalreporter\")\n24         # if no terminal reporter plugin is present, nothing we can do here;\n25         # this can happen when this function executes in a slave node\n26         # when using pytest-xdist, for example\n27         if tr is not None:\n28             # pastebin file will be utf-8 encoded binary file\n29             config._pastebinfile = tempfile.TemporaryFile(\"w+b\")\n30             oldwrite = tr._tw.write\n31 \n32             def tee_write(s, **kwargs):\n33                 oldwrite(s, **kwargs)\n34                 if isinstance(s, str):\n35                     s = s.encode(\"utf-8\")\n36                 config._pastebinfile.write(s)\n37 \n38             tr._tw.write = tee_write\n39 \n40 \n41 def pytest_unconfigure(config):\n42     if hasattr(config, \"_pastebinfile\"):\n43         # get terminal contents and delete file\n44         config._pastebinfile.seek(0)\n45         sessionlog = config._pastebinfile.read()\n46         config._pastebinfile.close()\n47         del config._pastebinfile\n48         # undo our patching in the terminal reporter\n49         tr = config.pluginmanager.getplugin(\"terminalreporter\")\n50         del tr._tw.__dict__[\"write\"]\n51         # write summary\n52         tr.write_sep(\"=\", \"Sending information to Paste Service\")\n53         pastebinurl = create_new_paste(sessionlog)\n54         tr.write_line(\"pastebin session-log: %s\\n\" % pastebinurl)\n55 \n56 \n57 def create_new_paste(contents):\n58     \"\"\"\n59     Creates a new paste using bpaste.net service.\n60 \n61     :contents: paste contents as utf-8 encoded bytes\n62     :returns: url to the pasted contents or error message\n63     \"\"\"\n64     import re\n65     from urllib.request import urlopen\n66     from urllib.parse import urlencode\n67 \n68     params = {\"code\": contents, \"lexer\": \"python3\", \"expiry\": \"1week\"}\n69     url = \"https://bpaste.net\"\n70     try:\n71         response = (\n72             urlopen(url, data=urlencode(params).encode(\"ascii\")).read().decode(\"utf-8\")\n73         )\n74     except OSError as exc_info:  # urllib errors\n75         return \"bad response: %s\" % exc_info\n76     m = re.search(r'href=\"/raw/(\\w+)\"', response)\n77     if m:\n78         return \"{}/show/{}\".format(url, m.group(1))\n79     else:\n80         return \"bad response: invalid format ('\" + response + \"')\"\n81 \n82 \n83 def pytest_terminal_summary(terminalreporter):\n84     import _pytest.config\n85 \n86     if terminalreporter.config.option.pastebin != \"failed\":\n87         return\n88     tr = terminalreporter\n89     if \"failed\" in tr.stats:\n90         terminalreporter.write_sep(\"=\", \"Sending information to Paste Service\")\n91         for rep in terminalreporter.stats.get(\"failed\"):\n92             try:\n93                 msg = rep.longrepr.reprtraceback.reprentries[-1].reprfileloc\n94             except AttributeError:\n95                 msg = tr._getfailureheadline(rep)\n96             tw = _pytest.config.create_terminal_writer(\n97                 terminalreporter.config, stringio=True\n98             )\n99             rep.toterminal(tw)\n100             s = tw.stringio.getvalue()\n101             assert len(s)\n102             pastebinurl = create_new_paste(s)\n103             tr.write_line(\"{} --> {}\".format(msg, pastebinurl))\n",
        "intended_behavior": "This file likely contains the implementation logic for the `--pastebin` feature that includes constructing and sending requests to `bpaste.net`. The correct course of action is to find the portion of code that specifies `lexer=python3` for these requests and change it to `lexer=text`. This update should ensure that pytest's output is interpreted by `bpaste.net` as plain text, which should, in turn, eliminate the 'HTTP Error 400: Bad Request' issues."
    }
]