[
    {
        "rel_file_path": "lib/matplotlib/figure.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.0/lib/matplotlib/figure.py",
        "start": 1425,
        "end": 1595,
        "class_name": null,
        "method_name": "subplots",
        "code": "1425     def subplots(self, nrows=1, ncols=1, sharex=False, sharey=False,\n1426                  squeeze=True, subplot_kw=None, gridspec_kw=None):\n1427         \"\"\"\n1428         Add a set of subplots to this figure.\n1429 \n1430         This utility wrapper makes it convenient to create common layouts of\n1431         subplots in a single call.\n1432 \n1433         Parameters\n1434         ----------\n1435         nrows, ncols : int, optional, default: 1\n1436             Number of rows/columns of the subplot grid.\n1437 \n1438         sharex, sharey : bool or {'none', 'all', 'row', 'col'}, default: False\n1439             Controls sharing of properties among x (`sharex`) or y (`sharey`)\n1440             axes:\n1441 \n1442                 - True or 'all': x- or y-axis will be shared among all\n1443                   subplots.\n1444                 - False or 'none': each subplot x- or y-axis will be\n1445                   independent.\n1446                 - 'row': each subplot row will share an x- or y-axis.\n1447                 - 'col': each subplot column will share an x- or y-axis.\n1448 \n1449             When subplots have a shared x-axis along a column, only the x tick\n1450             labels of the bottom subplot are created. Similarly, when subplots\n1451             have a shared y-axis along a row, only the y tick labels of the\n1452             first column subplot are created. To later turn other subplots'\n1453             ticklabels on, use `~matplotlib.axes.Axes.tick_params`.\n1454 \n1455         squeeze : bool, optional, default: True\n1456             - If True, extra dimensions are squeezed out from the returned\n1457               array of Axes:\n1458 \n1459                 - if only one subplot is constructed (nrows=ncols=1), the\n1460                   resulting single Axes object is returned as a scalar.\n1461                 - for Nx1 or 1xM subplots, the returned object is a 1D numpy\n1462                   object array of Axes objects.\n1463                 - for NxM, subplots with N>1 and M>1 are returned\n1464                   as a 2D array.\n1465 \n1466             - If False, no squeezing at all is done: the returned Axes object\n1467               is always a 2D array containing Axes instances, even if it ends\n1468               up being 1x1.\n1469 \n1470         subplot_kw : dict, optional\n1471             Dict with keywords passed to the\n1472             :meth:`~matplotlib.figure.Figure.add_subplot` call used to create\n1473             each subplot.\n1474 \n1475         gridspec_kw : dict, optional\n1476             Dict with keywords passed to the\n1477             `~matplotlib.gridspec.GridSpec` constructor used to create\n1478             the grid the subplots are placed on.\n1479 \n1480         Returns\n1481         -------\n1482         ax : `~.axes.Axes` object or array of Axes objects.\n1483             *ax* can be either a single `~matplotlib.axes.Axes` object or\n1484             an array of Axes objects if more than one subplot was created. The\n1485             dimensions of the resulting array can be controlled with the\n1486             squeeze keyword, see above.\n1487 \n1488         Examples\n1489         --------\n1490         ::\n1491 \n1492             # First create some toy data:\n1493             x = np.linspace(0, 2*np.pi, 400)\n1494             y = np.sin(x**2)\n1495 \n1496             # Create a figure\n1497             plt.figure()\n1498 \n1499             # Creates a subplot\n1500             ax = fig.subplots()\n1501             ax.plot(x, y)\n1502             ax.set_title('Simple plot')\n1503 \n1504             # Creates two subplots and unpacks the output array immediately\n1505             ax1, ax2 = fig.subplots(1, 2, sharey=True)\n1506             ax1.plot(x, y)\n1507             ax1.set_title('Sharing Y axis')\n1508             ax2.scatter(x, y)\n1509 \n1510             # Creates four polar axes, and accesses them through the\n1511             # returned array\n1512             axes = fig.subplots(2, 2, subplot_kw=dict(polar=True))\n1513             axes[0, 0].plot(x, y)\n1514             axes[1, 1].scatter(x, y)\n1515 \n1516             # Share a X axis with each column of subplots\n1517             fig.subplots(2, 2, sharex='col')\n1518 \n1519             # Share a Y axis with each row of subplots\n1520             fig.subplots(2, 2, sharey='row')\n1521 \n1522             # Share both X and Y axes with all subplots\n1523             fig.subplots(2, 2, sharex='all', sharey='all')\n1524 \n1525             # Note that this is the same as\n1526             fig.subplots(2, 2, sharex=True, sharey=True)\n1527 \n1528             See Also\n1529             --------\n1530             .pyplot.subplots\n1531             .Figure.add_subplot\n1532             .pyplot.subplot\n1533             \"\"\"\n1534 \n1535         if isinstance(sharex, bool):\n1536             sharex = \"all\" if sharex else \"none\"\n1537         if isinstance(sharey, bool):\n1538             sharey = \"all\" if sharey else \"none\"\n1539         # This check was added because it is very easy to type\n1540         # `subplots(1, 2, 1)` when `subplot(1, 2, 1)` was intended.\n1541         # In most cases, no error will ever occur, but mysterious behavior\n1542         # will result because what was intended to be the subplot index is\n1543         # instead treated as a bool for sharex.\n1544         if isinstance(sharex, Integral):\n1545             cbook._warn_external(\n1546                 \"sharex argument to subplots() was an integer.  Did you \"\n1547                 \"intend to use subplot() (without 's')?\")\n1548         cbook._check_in_list([\"all\", \"row\", \"col\", \"none\"],\n1549                              sharex=sharex, sharey=sharey)\n1550         if subplot_kw is None:\n1551             subplot_kw = {}\n1552         if gridspec_kw is None:\n1553             gridspec_kw = {}\n1554         # don't mutate kwargs passed by user...\n1555         subplot_kw = subplot_kw.copy()\n1556         gridspec_kw = gridspec_kw.copy()\n1557 \n1558         if self.get_constrained_layout():\n1559             gs = GridSpec(nrows, ncols, figure=self, **gridspec_kw)\n1560         else:\n1561             # this should turn constrained_layout off if we don't want it\n1562             gs = GridSpec(nrows, ncols, figure=None, **gridspec_kw)\n1563         self._gridspecs.append(gs)\n1564 \n1565         # Create array to hold all axes.\n1566         axarr = np.empty((nrows, ncols), dtype=object)\n1567         for row in range(nrows):\n1568             for col in range(ncols):\n1569                 shared_with = {\"none\": None, \"all\": axarr[0, 0],\n1570                                \"row\": axarr[row, 0], \"col\": axarr[0, col]}\n1571                 subplot_kw[\"sharex\"] = shared_with[sharex]\n1572                 subplot_kw[\"sharey\"] = shared_with[sharey]\n1573                 axarr[row, col] = self.add_subplot(gs[row, col], **subplot_kw)\n1574 \n1575         # turn off redundant tick labeling\n1576         if sharex in [\"col\", \"all\"]:\n1577             # turn off all but the bottom row\n1578             for ax in axarr[:-1, :].flat:\n1579                 ax.xaxis.set_tick_params(which='both',\n1580                                          labelbottom=False, labeltop=False)\n1581                 ax.xaxis.offsetText.set_visible(False)\n1582         if sharey in [\"row\", \"all\"]:\n1583             # turn off all but the first column\n1584             for ax in axarr[:, 1:].flat:\n1585                 ax.yaxis.set_tick_params(which='both',\n1586                                          labelleft=False, labelright=False)\n1587                 ax.yaxis.offsetText.set_visible(False)\n1588 \n1589         if squeeze:\n1590             # Discarding unneeded dimensions that equal 1.  If we only have one\n1591             # subplot, just return it instead of a 1-element array.\n1592             return axarr.item() if axarr.size == 1 else axarr.squeeze()\n1593         else:\n1594             # Returned axis array will be always 2-d, even if nrows=ncols=1.\n1595             return axarr\n",
        "intended_behavior": "This method should include a validation step for the `figsize` parameter to ensure neither width nor height are zero (or potentially below a minimal threshold that would be considered invalid for rendering). If such dimensions are specified, the method should raise a ValueError with a clear message advising the user that zero or near-zero dimensions are not supported for figure creation due to limitations in rendering engines like libpng."
    },
    {
        "rel_file_path": "lib/matplotlib/figure.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.0/lib/matplotlib/figure.py",
        "start": 1425,
        "end": 1595,
        "class_name": "Figure",
        "method_name": "subplots",
        "code": "1425     def subplots(self, nrows=1, ncols=1, sharex=False, sharey=False,\n1426                  squeeze=True, subplot_kw=None, gridspec_kw=None):\n1427         \"\"\"\n1428         Add a set of subplots to this figure.\n1429 \n1430         This utility wrapper makes it convenient to create common layouts of\n1431         subplots in a single call.\n1432 \n1433         Parameters\n1434         ----------\n1435         nrows, ncols : int, optional, default: 1\n1436             Number of rows/columns of the subplot grid.\n1437 \n1438         sharex, sharey : bool or {'none', 'all', 'row', 'col'}, default: False\n1439             Controls sharing of properties among x (`sharex`) or y (`sharey`)\n1440             axes:\n1441 \n1442                 - True or 'all': x- or y-axis will be shared among all\n1443                   subplots.\n1444                 - False or 'none': each subplot x- or y-axis will be\n1445                   independent.\n1446                 - 'row': each subplot row will share an x- or y-axis.\n1447                 - 'col': each subplot column will share an x- or y-axis.\n1448 \n1449             When subplots have a shared x-axis along a column, only the x tick\n1450             labels of the bottom subplot are created. Similarly, when subplots\n1451             have a shared y-axis along a row, only the y tick labels of the\n1452             first column subplot are created. To later turn other subplots'\n1453             ticklabels on, use `~matplotlib.axes.Axes.tick_params`.\n1454 \n1455         squeeze : bool, optional, default: True\n1456             - If True, extra dimensions are squeezed out from the returned\n1457               array of Axes:\n1458 \n1459                 - if only one subplot is constructed (nrows=ncols=1), the\n1460                   resulting single Axes object is returned as a scalar.\n1461                 - for Nx1 or 1xM subplots, the returned object is a 1D numpy\n1462                   object array of Axes objects.\n1463                 - for NxM, subplots with N>1 and M>1 are returned\n1464                   as a 2D array.\n1465 \n1466             - If False, no squeezing at all is done: the returned Axes object\n1467               is always a 2D array containing Axes instances, even if it ends\n1468               up being 1x1.\n1469 \n1470         subplot_kw : dict, optional\n1471             Dict with keywords passed to the\n1472             :meth:`~matplotlib.figure.Figure.add_subplot` call used to create\n1473             each subplot.\n1474 \n1475         gridspec_kw : dict, optional\n1476             Dict with keywords passed to the\n1477             `~matplotlib.gridspec.GridSpec` constructor used to create\n1478             the grid the subplots are placed on.\n1479 \n1480         Returns\n1481         -------\n1482         ax : `~.axes.Axes` object or array of Axes objects.\n1483             *ax* can be either a single `~matplotlib.axes.Axes` object or\n1484             an array of Axes objects if more than one subplot was created. The\n1485             dimensions of the resulting array can be controlled with the\n1486             squeeze keyword, see above.\n1487 \n1488         Examples\n1489         --------\n1490         ::\n1491 \n1492             # First create some toy data:\n1493             x = np.linspace(0, 2*np.pi, 400)\n1494             y = np.sin(x**2)\n1495 \n1496             # Create a figure\n1497             plt.figure()\n1498 \n1499             # Creates a subplot\n1500             ax = fig.subplots()\n1501             ax.plot(x, y)\n1502             ax.set_title('Simple plot')\n1503 \n1504             # Creates two subplots and unpacks the output array immediately\n1505             ax1, ax2 = fig.subplots(1, 2, sharey=True)\n1506             ax1.plot(x, y)\n1507             ax1.set_title('Sharing Y axis')\n1508             ax2.scatter(x, y)\n1509 \n1510             # Creates four polar axes, and accesses them through the\n1511             # returned array\n1512             axes = fig.subplots(2, 2, subplot_kw=dict(polar=True))\n1513             axes[0, 0].plot(x, y)\n1514             axes[1, 1].scatter(x, y)\n1515 \n1516             # Share a X axis with each column of subplots\n1517             fig.subplots(2, 2, sharex='col')\n1518 \n1519             # Share a Y axis with each row of subplots\n1520             fig.subplots(2, 2, sharey='row')\n1521 \n1522             # Share both X and Y axes with all subplots\n1523             fig.subplots(2, 2, sharex='all', sharey='all')\n1524 \n1525             # Note that this is the same as\n1526             fig.subplots(2, 2, sharex=True, sharey=True)\n1527 \n1528             See Also\n1529             --------\n1530             .pyplot.subplots\n1531             .Figure.add_subplot\n1532             .pyplot.subplot\n1533             \"\"\"\n1534 \n1535         if isinstance(sharex, bool):\n1536             sharex = \"all\" if sharex else \"none\"\n1537         if isinstance(sharey, bool):\n1538             sharey = \"all\" if sharey else \"none\"\n1539         # This check was added because it is very easy to type\n1540         # `subplots(1, 2, 1)` when `subplot(1, 2, 1)` was intended.\n1541         # In most cases, no error will ever occur, but mysterious behavior\n1542         # will result because what was intended to be the subplot index is\n1543         # instead treated as a bool for sharex.\n1544         if isinstance(sharex, Integral):\n1545             cbook._warn_external(\n1546                 \"sharex argument to subplots() was an integer.  Did you \"\n1547                 \"intend to use subplot() (without 's')?\")\n1548         cbook._check_in_list([\"all\", \"row\", \"col\", \"none\"],\n1549                              sharex=sharex, sharey=sharey)\n1550         if subplot_kw is None:\n1551             subplot_kw = {}\n1552         if gridspec_kw is None:\n1553             gridspec_kw = {}\n1554         # don't mutate kwargs passed by user...\n1555         subplot_kw = subplot_kw.copy()\n1556         gridspec_kw = gridspec_kw.copy()\n1557 \n1558         if self.get_constrained_layout():\n1559             gs = GridSpec(nrows, ncols, figure=self, **gridspec_kw)\n1560         else:\n1561             # this should turn constrained_layout off if we don't want it\n1562             gs = GridSpec(nrows, ncols, figure=None, **gridspec_kw)\n1563         self._gridspecs.append(gs)\n1564 \n1565         # Create array to hold all axes.\n1566         axarr = np.empty((nrows, ncols), dtype=object)\n1567         for row in range(nrows):\n1568             for col in range(ncols):\n1569                 shared_with = {\"none\": None, \"all\": axarr[0, 0],\n1570                                \"row\": axarr[row, 0], \"col\": axarr[0, col]}\n1571                 subplot_kw[\"sharex\"] = shared_with[sharex]\n1572                 subplot_kw[\"sharey\"] = shared_with[sharey]\n1573                 axarr[row, col] = self.add_subplot(gs[row, col], **subplot_kw)\n1574 \n1575         # turn off redundant tick labeling\n1576         if sharex in [\"col\", \"all\"]:\n1577             # turn off all but the bottom row\n1578             for ax in axarr[:-1, :].flat:\n1579                 ax.xaxis.set_tick_params(which='both',\n1580                                          labelbottom=False, labeltop=False)\n1581                 ax.xaxis.offsetText.set_visible(False)\n1582         if sharey in [\"row\", \"all\"]:\n1583             # turn off all but the first column\n1584             for ax in axarr[:, 1:].flat:\n1585                 ax.yaxis.set_tick_params(which='both',\n1586                                          labelleft=False, labelright=False)\n1587                 ax.yaxis.offsetText.set_visible(False)\n1588 \n1589         if squeeze:\n1590             # Discarding unneeded dimensions that equal 1.  If we only have one\n1591             # subplot, just return it instead of a 1-element array.\n1592             return axarr.item() if axarr.size == 1 else axarr.squeeze()\n1593         else:\n1594             # Returned axis array will be always 2-d, even if nrows=ncols=1.\n1595             return axarr\n",
        "intended_behavior": "This method should include a validation step for the `figsize` parameter to ensure neither width nor height are zero (or potentially below a minimal threshold that would be considered invalid for rendering). If such dimensions are specified, the method should raise a ValueError with a clear message advising the user that zero or near-zero dimensions are not supported for figure creation due to limitations in rendering engines like libpng."
    },
    {
        "rel_file_path": "lib/matplotlib/pyplot.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/matplotlib__matplotlib/setup_matplotlib__matplotlib__3.0/lib/matplotlib/pyplot.py",
        "start": 1024,
        "end": 1147,
        "class_name": null,
        "method_name": "subplots",
        "code": "1024 def subplots(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True,\n1025              subplot_kw=None, gridspec_kw=None, **fig_kw):\n1026     \"\"\"\n1027     Create a figure and a set of subplots.\n1028 \n1029     This utility wrapper makes it convenient to create common layouts of\n1030     subplots, including the enclosing figure object, in a single call.\n1031 \n1032     Parameters\n1033     ----------\n1034     nrows, ncols : int, optional, default: 1\n1035         Number of rows/columns of the subplot grid.\n1036 \n1037     sharex, sharey : bool or {'none', 'all', 'row', 'col'}, default: False\n1038         Controls sharing of properties among x (`sharex`) or y (`sharey`)\n1039         axes:\n1040 \n1041             - True or 'all': x- or y-axis will be shared among all\n1042               subplots.\n1043             - False or 'none': each subplot x- or y-axis will be\n1044               independent.\n1045             - 'row': each subplot row will share an x- or y-axis.\n1046             - 'col': each subplot column will share an x- or y-axis.\n1047 \n1048         When subplots have a shared x-axis along a column, only the x tick\n1049         labels of the bottom subplot are created. Similarly, when subplots\n1050         have a shared y-axis along a row, only the y tick labels of the first\n1051         column subplot are created. To later turn other subplots' ticklabels\n1052         on, use `~matplotlib.axes.Axes.tick_params`.\n1053 \n1054     squeeze : bool, optional, default: True\n1055         - If True, extra dimensions are squeezed out from the returned\n1056           array of `~matplotlib.axes.Axes`:\n1057 \n1058             - if only one subplot is constructed (nrows=ncols=1), the\n1059               resulting single Axes object is returned as a scalar.\n1060             - for Nx1 or 1xM subplots, the returned object is a 1D numpy\n1061               object array of Axes objects.\n1062             - for NxM, subplots with N>1 and M>1 are returned as a 2D array.\n1063 \n1064         - If False, no squeezing at all is done: the returned Axes object is\n1065           always a 2D array containing Axes instances, even if it ends up\n1066           being 1x1.\n1067 \n1068     num : integer or string, optional, default: None\n1069         A `.pyplot.figure` keyword that sets the figure number or label.\n1070 \n1071     subplot_kw : dict, optional\n1072         Dict with keywords passed to the\n1073         `~matplotlib.figure.Figure.add_subplot` call used to create each\n1074         subplot.\n1075 \n1076     gridspec_kw : dict, optional\n1077         Dict with keywords passed to the `~matplotlib.gridspec.GridSpec`\n1078         constructor used to create the grid the subplots are placed on.\n1079 \n1080     **fig_kw\n1081         All additional keyword arguments are passed to the\n1082         `.pyplot.figure` call.\n1083 \n1084     Returns\n1085     -------\n1086     fig : `~.figure.Figure`\n1087 \n1088     ax : `.axes.Axes` object or array of Axes objects.\n1089         *ax* can be either a single `~matplotlib.axes.Axes` object or an\n1090         array of Axes objects if more than one subplot was created.  The\n1091         dimensions of the resulting array can be controlled with the squeeze\n1092         keyword, see above.\n1093 \n1094     Examples\n1095     --------\n1096     ::\n1097 \n1098         # First create some toy data:\n1099         x = np.linspace(0, 2*np.pi, 400)\n1100         y = np.sin(x**2)\n1101 \n1102         # Creates just a figure and only one subplot\n1103         fig, ax = plt.subplots()\n1104         ax.plot(x, y)\n1105         ax.set_title('Simple plot')\n1106 \n1107         # Creates two subplots and unpacks the output array immediately\n1108         f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)\n1109         ax1.plot(x, y)\n1110         ax1.set_title('Sharing Y axis')\n1111         ax2.scatter(x, y)\n1112 \n1113         # Creates four polar axes, and accesses them through the returned array\n1114         fig, axes = plt.subplots(2, 2, subplot_kw=dict(polar=True))\n1115         axes[0, 0].plot(x, y)\n1116         axes[1, 1].scatter(x, y)\n1117 \n1118         # Share a X axis with each column of subplots\n1119         plt.subplots(2, 2, sharex='col')\n1120 \n1121         # Share a Y axis with each row of subplots\n1122         plt.subplots(2, 2, sharey='row')\n1123 \n1124         # Share both X and Y axes with all subplots\n1125         plt.subplots(2, 2, sharex='all', sharey='all')\n1126 \n1127         # Note that this is the same as\n1128         plt.subplots(2, 2, sharex=True, sharey=True)\n1129 \n1130         # Creates figure number 10 with a single subplot\n1131         # and clears it if it already exists.\n1132         fig, ax=plt.subplots(num=10, clear=True)\n1133 \n1134     See Also\n1135     --------\n1136     .pyplot.figure\n1137     .pyplot.subplot\n1138     .pyplot.axes\n1139     .Figure.subplots\n1140     .Figure.add_subplot\n1141 \n1142     \"\"\"\n1143     fig = figure(**fig_kw)\n1144     axs = fig.subplots(nrows=nrows, ncols=ncols, sharex=sharex, sharey=sharey,\n1145                        squeeze=squeeze, subplot_kw=subplot_kw,\n1146                        gridspec_kw=gridspec_kw)\n1147     return fig, axs\n",
        "intended_behavior": "Similar to the `figure.py` change, this method should validate the `nrows`, `ncols`, and particularly the `figsize` (if applicable via `fig_kw` in this context) to prevent figures with invalid dimensions from being created. If `figsize` is found to potentially lead towards a rendering error due to zero width or height, a ValueError should be raised to inform the user about the invalid dimensions before proceeding with subplot creation."
    }
]