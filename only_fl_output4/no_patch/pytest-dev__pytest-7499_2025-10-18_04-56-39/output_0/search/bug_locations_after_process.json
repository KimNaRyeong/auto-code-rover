[
    {
        "rel_file_path": "src/_pytest/python_api.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/pytest-dev__pytest/setup_pytest-dev__pytest__6.0/src/_pytest/python_api.py",
        "start": 550,
        "end": 555,
        "class_name": null,
        "method_name": "raises",
        "code": "550 def raises(\n551     expected_exception: Union[\"Type[_E]\", Tuple[\"Type[_E]\", ...]],\n552     *,\n553     match: \"Optional[Union[str, Pattern]]\" = ...\n554 ) -> \"RaisesContext[_E]\":\n555     ...  # pragma: no cover\n",
        "intended_behavior": "The intended behavior within this raises method is to accurately process the match argument such that it can correctly identify and compare exception messages even when they contain special characters like parentheses or when they are complex regex patterns. This behavior should include:\n- Explicitly checking if the provided match argument is a raw string or needs special handling to accurately interpret parentheses and other regex special characters.\n- Enhancing the error message to provide more clarity on why a match failed, possibly suggesting checks for special characters or regex patterns.\n- Maintaining existing functionality for straightforward string matches and regex pattern matches without introducing breaking changes.\n- Optionally, integrating a check to warn or inform users when it looks like a regex pattern is intended but potentially misinterpreted due to issues like unescaped characters or lack of raw string notation."
    },
    {
        "rel_file_path": "src/_pytest/python_api.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/pytest-dev__pytest/setup_pytest-dev__pytest__6.0/src/_pytest/python_api.py",
        "start": 559,
        "end": 565,
        "class_name": null,
        "method_name": "raises",
        "code": "559 def raises(  # noqa: F811\n560     expected_exception: Union[\"Type[_E]\", Tuple[\"Type[_E]\", ...]],\n561     func: Callable,\n562     *args: Any,\n563     **kwargs: Any\n564 ) -> _pytest._code.ExceptionInfo[_E]:\n565     ...  # pragma: no cover\n",
        "intended_behavior": "The intended behavior within this raises method is to accurately process the match argument such that it can correctly identify and compare exception messages even when they contain special characters like parentheses or when they are complex regex patterns. This behavior should include:\n- Explicitly checking if the provided match argument is a raw string or needs special handling to accurately interpret parentheses and other regex special characters.\n- Enhancing the error message to provide more clarity on why a match failed, possibly suggesting checks for special characters or regex patterns.\n- Maintaining existing functionality for straightforward string matches and regex pattern matches without introducing breaking changes.\n- Optionally, integrating a check to warn or inform users when it looks like a regex pattern is intended but potentially misinterpreted due to issues like unescaped characters or lack of raw string notation."
    },
    {
        "rel_file_path": "src/_pytest/python_api.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/pytest-dev__pytest/setup_pytest-dev__pytest__6.0/src/_pytest/python_api.py",
        "start": 568,
        "end": 713,
        "class_name": null,
        "method_name": "raises",
        "code": "568 def raises(  # noqa: F811\n569     expected_exception: Union[\"Type[_E]\", Tuple[\"Type[_E]\", ...]],\n570     *args: Any,\n571     **kwargs: Any\n572 ) -> Union[\"RaisesContext[_E]\", _pytest._code.ExceptionInfo[_E]]:\n573     r\"\"\"\n574     Assert that a code block/function call raises ``expected_exception``\n575     or raise a failure exception otherwise.\n576 \n577     :kwparam match: if specified, a string containing a regular expression,\n578         or a regular expression object, that is tested against the string\n579         representation of the exception using ``re.search``. To match a literal\n580         string that may contain `special characters`__, the pattern can\n581         first be escaped with ``re.escape``.\n582 \n583         (This is only used when ``pytest.raises`` is used as a context manager,\n584         and passed through to the function otherwise.\n585         When using ``pytest.raises`` as a function, you can use:\n586         ``pytest.raises(Exc, func, match=\"passed on\").match(\"my pattern\")``.)\n587 \n588         __ https://docs.python.org/3/library/re.html#regular-expression-syntax\n589 \n590     .. currentmodule:: _pytest._code\n591 \n592     Use ``pytest.raises`` as a context manager, which will capture the exception of the given\n593     type::\n594 \n595         >>> with raises(ZeroDivisionError):\n596         ...    1/0\n597 \n598     If the code block does not raise the expected exception (``ZeroDivisionError`` in the example\n599     above), or no exception at all, the check will fail instead.\n600 \n601     You can also use the keyword argument ``match`` to assert that the\n602     exception matches a text or regex::\n603 \n604         >>> with raises(ValueError, match='must be 0 or None'):\n605         ...     raise ValueError(\"value must be 0 or None\")\n606 \n607         >>> with raises(ValueError, match=r'must be \\d+$'):\n608         ...     raise ValueError(\"value must be 42\")\n609 \n610     The context manager produces an :class:`ExceptionInfo` object which can be used to inspect the\n611     details of the captured exception::\n612 \n613         >>> with raises(ValueError) as exc_info:\n614         ...     raise ValueError(\"value must be 42\")\n615         >>> assert exc_info.type is ValueError\n616         >>> assert exc_info.value.args[0] == \"value must be 42\"\n617 \n618     .. note::\n619 \n620        When using ``pytest.raises`` as a context manager, it's worthwhile to\n621        note that normal context manager rules apply and that the exception\n622        raised *must* be the final line in the scope of the context manager.\n623        Lines of code after that, within the scope of the context manager will\n624        not be executed. For example::\n625 \n626            >>> value = 15\n627            >>> with raises(ValueError) as exc_info:\n628            ...     if value > 10:\n629            ...         raise ValueError(\"value must be <= 10\")\n630            ...     assert exc_info.type is ValueError  # this will not execute\n631 \n632        Instead, the following approach must be taken (note the difference in\n633        scope)::\n634 \n635            >>> with raises(ValueError) as exc_info:\n636            ...     if value > 10:\n637            ...         raise ValueError(\"value must be <= 10\")\n638            ...\n639            >>> assert exc_info.type is ValueError\n640 \n641     **Using with** ``pytest.mark.parametrize``\n642 \n643     When using :ref:`pytest.mark.parametrize ref`\n644     it is possible to parametrize tests such that\n645     some runs raise an exception and others do not.\n646 \n647     See :ref:`parametrizing_conditional_raising` for an example.\n648 \n649     **Legacy form**\n650 \n651     It is possible to specify a callable by passing a to-be-called lambda::\n652 \n653         >>> raises(ZeroDivisionError, lambda: 1/0)\n654         <ExceptionInfo ...>\n655 \n656     or you can specify an arbitrary callable with arguments::\n657 \n658         >>> def f(x): return 1/x\n659         ...\n660         >>> raises(ZeroDivisionError, f, 0)\n661         <ExceptionInfo ...>\n662         >>> raises(ZeroDivisionError, f, x=0)\n663         <ExceptionInfo ...>\n664 \n665     The form above is fully supported but discouraged for new code because the\n666     context manager form is regarded as more readable and less error-prone.\n667 \n668     .. note::\n669         Similar to caught exception objects in Python, explicitly clearing\n670         local references to returned ``ExceptionInfo`` objects can\n671         help the Python interpreter speed up its garbage collection.\n672 \n673         Clearing those references breaks a reference cycle\n674         (``ExceptionInfo`` --> caught exception --> frame stack raising\n675         the exception --> current frame stack --> local variables -->\n676         ``ExceptionInfo``) which makes Python keep all objects referenced\n677         from that cycle (including all local variables in the current\n678         frame) alive until the next cyclic garbage collection run.\n679         More detailed information can be found in the official Python\n680         documentation for :ref:`the try statement <python:try>`.\n681     \"\"\"\n682     __tracebackhide__ = True\n683     for exc in filterfalse(\n684         inspect.isclass, always_iterable(expected_exception, BASE_TYPE)\n685     ):\n686         msg = \"exceptions must be derived from BaseException, not %s\"\n687         raise TypeError(msg % type(exc))\n688 \n689     message = \"DID NOT RAISE {}\".format(expected_exception)\n690 \n691     if not args:\n692         match = kwargs.pop(\"match\", None)\n693         if kwargs:\n694             msg = \"Unexpected keyword arguments passed to pytest.raises: \"\n695             msg += \", \".join(sorted(kwargs))\n696             msg += \"\\nUse context-manager form instead?\"\n697             raise TypeError(msg)\n698         return RaisesContext(expected_exception, message, match)\n699     else:\n700         func = args[0]\n701         if not callable(func):\n702             raise TypeError(\n703                 \"{!r} object (type: {}) must be callable\".format(func, type(func))\n704             )\n705         try:\n706             func(*args[1:], **kwargs)\n707         except expected_exception as e:\n708             # We just caught the exception - there is a traceback.\n709             assert e.__traceback__ is not None\n710             return _pytest._code.ExceptionInfo.from_exc_info(\n711                 (type(e), e, e.__traceback__)\n712             )\n713     fail(message)\n",
        "intended_behavior": "The intended behavior within this raises method is to accurately process the match argument such that it can correctly identify and compare exception messages even when they contain special characters like parentheses or when they are complex regex patterns. This behavior should include:\n- Explicitly checking if the provided match argument is a raw string or needs special handling to accurately interpret parentheses and other regex special characters.\n- Enhancing the error message to provide more clarity on why a match failed, possibly suggesting checks for special characters or regex patterns.\n- Maintaining existing functionality for straightforward string matches and regex pattern matches without introducing breaking changes.\n- Optionally, integrating a check to warn or inform users when it looks like a regex pattern is intended but potentially misinterpreted due to issues like unescaped characters or lack of raw string notation."
    }
]