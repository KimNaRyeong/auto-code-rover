diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -503,7 +503,10 @@ def get_combinator_sql(self, combinator, all):
                         part_sql = 'SELECT * FROM ({})'.format(part_sql)
                     # Add parentheses when combining with compound query if not
                     # already added for all compound queries.
-                    elif not features.supports_slicing_ordering_in_compound:
+                    elif (
+                        self.query.subquery or
+                        not features.supports_slicing_ordering_in_compound
+                    ):
                         part_sql = '({})'.format(part_sql)
                 parts += ((part_sql, part_args),)
             except EmptyResultSet:
@@ -517,7 +520,9 @@ def get_combinator_sql(self, combinator, all):
         combinator_sql = self.connection.ops.set_operators[combinator]
         if all and combinator == 'union':
             combinator_sql += ' ALL'
-        braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'
+        braces = '{}'
+        if not self.query.subquery and features.supports_slicing_ordering_in_compound:
+            braces = '({})'
         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))
         result = [' {} '.format(combinator_sql).join(sql_parts)]
         params = []
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1048,6 +1048,12 @@ def resolve_expression(self, query, *args, **kwargs):
         clone.bump_prefix(query)
         clone.subquery = True
         clone.where.resolve_expression(query, *args, **kwargs)
+        # Resolve combined queries.
+        if clone.combinator:
+            clone.combined_queries = tuple([
+                combined_query.resolve_expression(query, *args, **kwargs)
+                for combined_query in clone.combined_queries
+            ])
         for key, value in clone.annotations.items():
             resolved = value.resolve_expression(query, *args, **kwargs)
             if hasattr(resolved, 'external_aliases'):
