diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -46,6 +46,11 @@ def serialize(self):
         return value % (", ".join(strings)), imports
 
 
+class BaseUnorderedSequenceSerializer(BaseSequenceSerializer):
+    def __init__(self, value):
+        super().__init__(sorted(value, key=repr))
+
+
 class BaseSimpleSerializer(BaseSerializer):
     def serialize(self):
         return repr(self.value), set()
@@ -151,7 +156,7 @@ def serialize(self):
         return super().serialize()
 
 
-class FrozensetSerializer(BaseSequenceSerializer):
+class FrozensetSerializer(BaseUnorderedSequenceSerializer):
     def _format(self):
         return "frozenset([%s])"
 
@@ -279,7 +284,7 @@ def _format(self):
         return "[%s]"
 
 
-class SetSerializer(BaseSequenceSerializer):
+class SetSerializer(BaseUnorderedSequenceSerializer):
     def _format(self):
         # Serialize as a set literal except when value is empty because {}
         # is an empty dict.
diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py
--- a/django/db/migrations/writer.py
+++ b/django/db/migrations/writer.py
@@ -154,7 +154,9 @@ def as_string(self):
                 imports.add("from django.conf import settings")
             else:
                 dependencies.append("        %s," % self.serialize(dependency)[0])
-        items["dependencies"] = "\n".join(dependencies) + "\n" if dependencies else ""
+        items["dependencies"] = (
+            "\n".join(sorted(dependencies)) + "\n" if dependencies else ""
+        )
 
         # Format imports nicely, swapping imports of functions from migration files
         # for comments
