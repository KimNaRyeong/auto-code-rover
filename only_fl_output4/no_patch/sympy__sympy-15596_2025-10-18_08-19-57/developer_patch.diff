diff --git a/sympy/calculus/util.py b/sympy/calculus/util.py
--- a/sympy/calculus/util.py
+++ b/sympy/calculus/util.py
@@ -466,8 +466,9 @@ def _check(orig_f, period):
         elif isinstance(a, TrigonometricFunction):
             period = periodicity(a, symbol)
         #check if 'f' is linear in 'symbol'
-        elif degree(a, symbol) == 1 and symbol not in n.free_symbols:
-            period = Abs(n / a.diff(symbol))
+        elif (a.is_polynomial(symbol) and degree(a, symbol) == 1 and
+            symbol not in n.free_symbols):
+                period = Abs(n / a.diff(symbol))
 
     elif period is None:
         from sympy.solvers.decompogen import compogen
diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py
--- a/sympy/polys/polytools.py
+++ b/sympy/polys/polytools.py
@@ -4445,18 +4445,22 @@ def degree(f, gen=0):
     """
 
     f = sympify(f, strict=True)
+    gen_is_Num = sympify(gen, strict=True).is_Number
     if f.is_Poly:
         p = f
         isNum = p.as_expr().is_Number
     else:
         isNum = f.is_Number
         if not isNum:
-            p, _ = poly_from_expr(f)
+            if gen_is_Num:
+                p, _ = poly_from_expr(f)
+            else:
+                p, _ = poly_from_expr(f, gen)
 
     if isNum:
         return S.Zero if f else S.NegativeInfinity
 
-    if not sympify(gen, strict=True).is_Number:
+    if not gen_is_Num:
         if f.is_Poly and gen not in p.gens:
             # try recast without explicit gens
             p, _ = poly_from_expr(f.as_expr())
