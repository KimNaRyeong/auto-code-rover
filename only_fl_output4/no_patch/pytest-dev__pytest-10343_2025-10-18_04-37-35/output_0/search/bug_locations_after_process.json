[
    {
        "rel_file_path": "src/_pytest/deprecated.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/pytest-dev__pytest/setup_pytest-dev__pytest__7.2/src/_pytest/deprecated.py",
        "start": 1,
        "end": 131,
        "class_name": null,
        "method_name": null,
        "code": "1 \"\"\"Deprecation messages and bits of code used elsewhere in the codebase that\n2 is planned to be removed in the next pytest release.\n3 \n4 Keeping it in a central location makes it easy to track what is deprecated and should\n5 be removed when the time comes.\n6 \n7 All constants defined in this module should be either instances of\n8 :class:`PytestWarning`, or :class:`UnformattedWarning`\n9 in case of warnings which need to format their messages.\n10 \"\"\"\n11 from warnings import warn\n12 \n13 from _pytest.warning_types import PytestDeprecationWarning\n14 from _pytest.warning_types import PytestRemovedIn8Warning\n15 from _pytest.warning_types import UnformattedWarning\n16 \n17 # set of plugins which have been integrated into the core; we use this list to ignore\n18 # them during registration to avoid conflicts\n19 DEPRECATED_EXTERNAL_PLUGINS = {\n20     \"pytest_catchlog\",\n21     \"pytest_capturelog\",\n22     \"pytest_faulthandler\",\n23 }\n24 \n25 \n26 # This can be* removed pytest 8, but it's harmless and common, so no rush to remove.\n27 # * If you're in the future: \"could have been\".\n28 YIELD_FIXTURE = PytestDeprecationWarning(\n29     \"@pytest.yield_fixture is deprecated.\\n\"\n30     \"Use @pytest.fixture instead; they are the same.\"\n31 )\n32 \n33 WARNING_CMDLINE_PREPARSE_HOOK = PytestRemovedIn8Warning(\n34     \"The pytest_cmdline_preparse hook is deprecated and will be removed in a future release. \\n\"\n35     \"Please use pytest_load_initial_conftests hook instead.\"\n36 )\n37 \n38 FSCOLLECTOR_GETHOOKPROXY_ISINITPATH = PytestRemovedIn8Warning(\n39     \"The gethookproxy() and isinitpath() methods of FSCollector and Package are deprecated; \"\n40     \"use self.session.gethookproxy() and self.session.isinitpath() instead. \"\n41 )\n42 \n43 STRICT_OPTION = PytestRemovedIn8Warning(\n44     \"The --strict option is deprecated, use --strict-markers instead.\"\n45 )\n46 \n47 # This deprecation is never really meant to be removed.\n48 PRIVATE = PytestDeprecationWarning(\"A private pytest class or function was used.\")\n49 \n50 ARGUMENT_PERCENT_DEFAULT = PytestRemovedIn8Warning(\n51     'pytest now uses argparse. \"%default\" should be changed to \"%(default)s\"',\n52 )\n53 \n54 ARGUMENT_TYPE_STR_CHOICE = UnformattedWarning(\n55     PytestRemovedIn8Warning,\n56     \"`type` argument to addoption() is the string {typ!r}.\"\n57     \" For choices this is optional and can be omitted, \"\n58     \" but when supplied should be a type (for example `str` or `int`).\"\n59     \" (options: {names})\",\n60 )\n61 \n62 ARGUMENT_TYPE_STR = UnformattedWarning(\n63     PytestRemovedIn8Warning,\n64     \"`type` argument to addoption() is the string {typ!r}, \"\n65     \" but when supplied should be a type (for example `str` or `int`).\"\n66     \" (options: {names})\",\n67 )\n68 \n69 \n70 HOOK_LEGACY_PATH_ARG = UnformattedWarning(\n71     PytestRemovedIn8Warning,\n72     \"The ({pylib_path_arg}: py.path.local) argument is deprecated, please use ({pathlib_path_arg}: pathlib.Path)\\n\"\n73     \"see https://docs.pytest.org/en/latest/deprecations.html\"\n74     \"#py-path-local-arguments-for-hooks-replaced-with-pathlib-path\",\n75 )\n76 \n77 NODE_CTOR_FSPATH_ARG = UnformattedWarning(\n78     PytestRemovedIn8Warning,\n79     \"The (fspath: py.path.local) argument to {node_type_name} is deprecated. \"\n80     \"Please use the (path: pathlib.Path) argument instead.\\n\"\n81     \"See https://docs.pytest.org/en/latest/deprecations.html\"\n82     \"#fspath-argument-for-node-constructors-replaced-with-pathlib-path\",\n83 )\n84 \n85 WARNS_NONE_ARG = PytestRemovedIn8Warning(\n86     \"Passing None has been deprecated.\\n\"\n87     \"See https://docs.pytest.org/en/latest/how-to/capture-warnings.html\"\n88     \"#additional-use-cases-of-warnings-in-tests\"\n89     \" for alternatives in common use cases.\"\n90 )\n91 \n92 KEYWORD_MSG_ARG = UnformattedWarning(\n93     PytestRemovedIn8Warning,\n94     \"pytest.{func}(msg=...) is now deprecated, use pytest.{func}(reason=...) instead\",\n95 )\n96 \n97 INSTANCE_COLLECTOR = PytestRemovedIn8Warning(\n98     \"The pytest.Instance collector type is deprecated and is no longer used. \"\n99     \"See https://docs.pytest.org/en/latest/deprecations.html#the-pytest-instance-collector\",\n100 )\n101 HOOK_LEGACY_MARKING = UnformattedWarning(\n102     PytestDeprecationWarning,\n103     \"The hook{type} {fullname} uses old-style configuration options (marks or attributes).\\n\"\n104     \"Please use the pytest.hook{type}({hook_opts}) decorator instead\\n\"\n105     \" to configure the hooks.\\n\"\n106     \" See https://docs.pytest.org/en/latest/deprecations.html\"\n107     \"#configuring-hook-specs-impls-using-markers\",\n108 )\n109 \n110 # You want to make some `__init__` or function \"private\".\n111 #\n112 #   def my_private_function(some, args):\n113 #       ...\n114 #\n115 # Do this:\n116 #\n117 #   def my_private_function(some, args, *, _ispytest: bool = False):\n118 #       check_ispytest(_ispytest)\n119 #       ...\n120 #\n121 # Change all internal/allowed calls to\n122 #\n123 #   my_private_function(some, args, _ispytest=True)\n124 #\n125 # All other calls will get the default _ispytest=False and trigger\n126 # the warning (possibly error in the future).\n127 \n128 \n129 def check_ispytest(ispytest: bool) -> None:\n130     if not ispytest:\n131         warn(PRIVATE, stacklevel=3)\n",
        "intended_behavior": "This file likely contains the definition of the deprecation warning for old-style `hookimpl` usage. The code responsible for emitting the `PytestDeprecationWarning` related to hook implementations should be enhanced to include the location (e.g., file name and line number) where the deprecated usage occurs. This requires modifying how the warning is constructed to dynamically fetch and append location information about the hookimpl causing the warning. This preservation ensures that developers receive immediate context about where to look for the deprecated usage without altering the nature or purpose of existing warnings."
    },
    {
        "rel_file_path": "src/_pytest/warning_types.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/pytest-dev__pytest/setup_pytest-dev__pytest__7.2/src/_pytest/warning_types.py",
        "start": 1,
        "end": 169,
        "class_name": null,
        "method_name": null,
        "code": "1 import inspect\n2 import warnings\n3 from types import FunctionType\n4 from typing import Any\n5 from typing import Generic\n6 from typing import Type\n7 from typing import TypeVar\n8 \n9 import attr\n10 \n11 from _pytest.compat import final\n12 \n13 \n14 class PytestWarning(UserWarning):\n15     \"\"\"Base class for all warnings emitted by pytest.\"\"\"\n16 \n17     __module__ = \"pytest\"\n18 \n19 \n20 @final\n21 class PytestAssertRewriteWarning(PytestWarning):\n22     \"\"\"Warning emitted by the pytest assert rewrite module.\"\"\"\n23 \n24     __module__ = \"pytest\"\n25 \n26 \n27 @final\n28 class PytestCacheWarning(PytestWarning):\n29     \"\"\"Warning emitted by the cache plugin in various situations.\"\"\"\n30 \n31     __module__ = \"pytest\"\n32 \n33 \n34 @final\n35 class PytestConfigWarning(PytestWarning):\n36     \"\"\"Warning emitted for configuration issues.\"\"\"\n37 \n38     __module__ = \"pytest\"\n39 \n40 \n41 @final\n42 class PytestCollectionWarning(PytestWarning):\n43     \"\"\"Warning emitted when pytest is not able to collect a file or symbol in a module.\"\"\"\n44 \n45     __module__ = \"pytest\"\n46 \n47 \n48 class PytestDeprecationWarning(PytestWarning, DeprecationWarning):\n49     \"\"\"Warning class for features that will be removed in a future version.\"\"\"\n50 \n51     __module__ = \"pytest\"\n52 \n53 \n54 @final\n55 class PytestRemovedIn8Warning(PytestDeprecationWarning):\n56     \"\"\"Warning class for features that will be removed in pytest 8.\"\"\"\n57 \n58     __module__ = \"pytest\"\n59 \n60 \n61 class PytestReturnNotNoneWarning(PytestDeprecationWarning):\n62     \"\"\"Warning emitted when a test function is returning value other than None.\"\"\"\n63 \n64     __module__ = \"pytest\"\n65 \n66 \n67 @final\n68 class PytestExperimentalApiWarning(PytestWarning, FutureWarning):\n69     \"\"\"Warning category used to denote experiments in pytest.\n70 \n71     Use sparingly as the API might change or even be removed completely in a\n72     future version.\n73     \"\"\"\n74 \n75     __module__ = \"pytest\"\n76 \n77     @classmethod\n78     def simple(cls, apiname: str) -> \"PytestExperimentalApiWarning\":\n79         return cls(\n80             \"{apiname} is an experimental api that may change over time\".format(\n81                 apiname=apiname\n82             )\n83         )\n84 \n85 \n86 @final\n87 class PytestUnhandledCoroutineWarning(PytestReturnNotNoneWarning):\n88     \"\"\"Warning emitted for an unhandled coroutine.\n89 \n90     A coroutine was encountered when collecting test functions, but was not\n91     handled by any async-aware plugin.\n92     Coroutine test functions are not natively supported.\n93     \"\"\"\n94 \n95     __module__ = \"pytest\"\n96 \n97 \n98 @final\n99 class PytestUnknownMarkWarning(PytestWarning):\n100     \"\"\"Warning emitted on use of unknown markers.\n101 \n102     See :ref:`mark` for details.\n103     \"\"\"\n104 \n105     __module__ = \"pytest\"\n106 \n107 \n108 @final\n109 class PytestUnraisableExceptionWarning(PytestWarning):\n110     \"\"\"An unraisable exception was reported.\n111 \n112     Unraisable exceptions are exceptions raised in :meth:`__del__ <object.__del__>`\n113     implementations and similar situations when the exception cannot be raised\n114     as normal.\n115     \"\"\"\n116 \n117     __module__ = \"pytest\"\n118 \n119 \n120 @final\n121 class PytestUnhandledThreadExceptionWarning(PytestWarning):\n122     \"\"\"An unhandled exception occurred in a :class:`~threading.Thread`.\n123 \n124     Such exceptions don't propagate normally.\n125     \"\"\"\n126 \n127     __module__ = \"pytest\"\n128 \n129 \n130 _W = TypeVar(\"_W\", bound=PytestWarning)\n131 \n132 \n133 @final\n134 @attr.s(auto_attribs=True)\n135 class UnformattedWarning(Generic[_W]):\n136     \"\"\"A warning meant to be formatted during runtime.\n137 \n138     This is used to hold warnings that need to format their message at runtime,\n139     as opposed to a direct message.\n140     \"\"\"\n141 \n142     category: Type[\"_W\"]\n143     template: str\n144 \n145     def format(self, **kwargs: Any) -> _W:\n146         \"\"\"Return an instance of the warning category, formatted with given kwargs.\"\"\"\n147         return self.category(self.template.format(**kwargs))\n148 \n149 \n150 def warn_explicit_for(method: FunctionType, message: PytestWarning) -> None:\n151     \"\"\"\n152     Issue the warning :param:`message` for the definition of the given :param:`method`\n153 \n154     this helps to log warnigns for functions defined prior to finding an issue with them\n155     (like hook wrappers being marked in a legacy mechanism)\n156     \"\"\"\n157     lineno = method.__code__.co_firstlineno\n158     filename = inspect.getfile(method)\n159     module = method.__module__\n160     mod_globals = method.__globals__\n161 \n162     warnings.warn_explicit(\n163         message,\n164         type(message),\n165         filename=filename,\n166         module=module,\n167         registry=mod_globals.setdefault(\"__warningregistry__\", {}),\n168         lineno=lineno,\n169     )\n",
        "intended_behavior": "If this file contributes to categorizing or formatting of warnings including `PytestDeprecationWarning`, an update may be necessary to support the inclusion of file or plugin name in the warning messages produced for deprecated hook implementations. The modification should allow warnings to be enriched with context-specific details such as the source file or plugin name and line number while preserving the structure and standard behavior of warnings throughout pytest."
    }
]