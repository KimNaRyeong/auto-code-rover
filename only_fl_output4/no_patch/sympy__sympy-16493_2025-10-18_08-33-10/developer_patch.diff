diff --git a/sympy/tensor/tensor.py b/sympy/tensor/tensor.py
--- a/sympy/tensor/tensor.py
+++ b/sympy/tensor/tensor.py
@@ -2110,7 +2110,7 @@ def contract_and_permute(metric, array, pos):
 
         return free_ind2, array
 
-    def replace_with_arrays(self, replacement_dict, indices):
+    def replace_with_arrays(self, replacement_dict, indices=None):
         """
         Replace the tensorial expressions with arrays. The final array will
         correspond to the N-dimensional array with indices arranged according
@@ -2122,7 +2122,8 @@ def replace_with_arrays(self, replacement_dict, indices):
         replacement_dict
             dictionary containing the replacement rules for tensors.
         indices
-            the index order with respect to which the array is read.
+            the index order with respect to which the array is read. The
+            original index order will be used if no value is passed.
 
         Examples
         ========
@@ -2136,15 +2137,22 @@ def replace_with_arrays(self, replacement_dict, indices):
         >>> A = tensorhead("A", [L], [[1]])
         >>> A(i).replace_with_arrays({A(i): [1, 2]}, [i])
         [1, 2]
+
+        Since 'indices' is optional, we can also call replace_with_arrays by
+        this way if no specific index order is needed:
+
+        >>> A(i).replace_with_arrays({A(i): [1, 2]})
+        [1, 2]
+
         >>> expr = A(i)*A(j)
-        >>> expr.replace_with_arrays({A(i): [1, 2]}, [i, j])
+        >>> expr.replace_with_arrays({A(i): [1, 2]})
         [[1, 2], [2, 4]]
 
         For contractions, specify the metric of the ``TensorIndexType``, which
         in this case is ``L``, in its covariant form:
 
         >>> expr = A(i)*A(-i)
-        >>> expr.replace_with_arrays({A(i): [1, 2], L: diag(1, -1)}, [])
+        >>> expr.replace_with_arrays({A(i): [1, 2], L: diag(1, -1)})
         -3
 
         Symmetrization of an array:
@@ -2152,14 +2160,14 @@ def replace_with_arrays(self, replacement_dict, indices):
         >>> H = tensorhead("H", [L, L], [[1], [1]])
         >>> a, b, c, d = symbols("a b c d")
         >>> expr = H(i, j)/2 + H(j, i)/2
-        >>> expr.replace_with_arrays({H(i, j): [[a, b], [c, d]]}, [i, j])
+        >>> expr.replace_with_arrays({H(i, j): [[a, b], [c, d]]})
         [[a, b/2 + c/2], [b/2 + c/2, d]]
 
         Anti-symmetrization of an array:
 
         >>> expr = H(i, j)/2 - H(j, i)/2
         >>> repl = {H(i, j): [[a, b], [c, d]]}
-        >>> expr.replace_with_arrays(repl, [i, j])
+        >>> expr.replace_with_arrays(repl)
         [[0, b/2 - c/2], [-b/2 + c/2, 0]]
 
         The same expression can be read as the transpose by inverting ``i`` and
@@ -2170,6 +2178,7 @@ def replace_with_arrays(self, replacement_dict, indices):
         """
         from .array import Array
 
+        indices = indices or []
         replacement_dict = {tensor: Array(array) for tensor, array in replacement_dict.items()}
 
         # Check dimensions of replaced arrays:
