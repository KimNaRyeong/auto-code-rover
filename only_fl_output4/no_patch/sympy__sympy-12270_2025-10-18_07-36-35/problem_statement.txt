cannot extract_multiplicatively(-2) from (-2*x - 2*y)
I think this might be a bug.
````
>>> (2+4*I).extract_multiplicatively(2)    # yes
1 + 2*I
>>> (-2-4*I).extract_multiplicatively(-1)   # yes
2 + 4*I
>>> (-2-4*I).extract_multiplicatively(-2)   # bug?
````
similarly:
````
>>> (2*x + 4*y + 8).extract_multiplicatively(2)   # yes
x + 2*y + 4
>>> (-2*x - 4*y - 8).extract_multiplicatively(2)    # yes
-x - 2*y - 4
>>> (-2*x - 4*y - 8).extract_multiplicatively(-1)    # yes
2*x + 4*y + 8
>>> (-2*x - 4*y - 8).extract_multiplicatively(-2)    # bug?
````

Assuming it is indeed a bug, here is why it happens:

Look in `core/expr.py` where:
````
>>> (-2*x - 4*y - 8).primitive()
(2, -x - 2*y - 4)
````
which is then made into a *non-evaluated* `Mul`, from which `-2` cannot be multiplicatively extracted; for example:
````
>>> Mul(2, -x).extract_multiplicatively(-2)
x
>>> Mul(2, -x, evaluate=False).extract_multiplicatively(-2)
````
@smichr do you think this is bug? (see your commit 8968b85310506c0a2b34f3d7aeb8e0d88f87885b: not clear whether we still need this special case anyway)
