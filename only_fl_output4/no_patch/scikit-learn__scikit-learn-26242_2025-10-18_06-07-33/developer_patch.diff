diff --git a/sklearn/ensemble/_base.py b/sklearn/ensemble/_base.py
--- a/sklearn/ensemble/_base.py
+++ b/sklearn/ensemble/_base.py
@@ -157,7 +157,7 @@ def _validate_estimator(self, default=None):
 
         if self.estimator is not None:
             self.estimator_ = self.estimator
-        elif self.base_estimator not in [None, "deprecated"]:
+        elif self.base_estimator != "deprecated":
             warnings.warn(
                 (
                     "`base_estimator` was renamed to `estimator` in version 1.2 and "
@@ -165,7 +165,10 @@ def _validate_estimator(self, default=None):
                 ),
                 FutureWarning,
             )
-            self.estimator_ = self.base_estimator
+            if self.base_estimator is not None:
+                self.estimator_ = self.base_estimator
+            else:
+                self.estimator_ = default
         else:
             self.estimator_ = default
 
diff --git a/sklearn/ensemble/_weight_boosting.py b/sklearn/ensemble/_weight_boosting.py
--- a/sklearn/ensemble/_weight_boosting.py
+++ b/sklearn/ensemble/_weight_boosting.py
@@ -64,7 +64,11 @@ class BaseWeightBoosting(BaseEnsemble, metaclass=ABCMeta):
         "n_estimators": [Interval(Integral, 1, None, closed="left")],
         "learning_rate": [Interval(Real, 0, None, closed="neither")],
         "random_state": ["random_state"],
-        "base_estimator": [HasMethods(["fit", "predict"]), StrOptions({"deprecated"})],
+        "base_estimator": [
+            HasMethods(["fit", "predict"]),
+            StrOptions({"deprecated"}),
+            None,
+        ],
     }
 
     @abstractmethod
