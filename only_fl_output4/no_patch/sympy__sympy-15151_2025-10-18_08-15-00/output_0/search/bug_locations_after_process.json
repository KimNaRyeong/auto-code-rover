[
    {
        "rel_file_path": "sympy/printing/pretty/pretty.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/sympy__sympy/setup_sympy__sympy__1.2/sympy/printing/pretty/pretty.py",
        "start": 2346,
        "end": 2381,
        "class_name": null,
        "method_name": "pretty_print",
        "code": "2346 def pretty_print(expr, wrap_line=True, num_columns=None, use_unicode=None,\n2347                  full_prec=\"auto\", order=None, use_unicode_sqrt_char=True):\n2348     \"\"\"Prints expr in pretty form.\n2349 \n2350     pprint is just a shortcut for this function.\n2351 \n2352     Parameters\n2353     ==========\n2354 \n2355     expr : expression\n2356         The expression to print.\n2357 \n2358     wrap_line : bool, optional (default=True)\n2359         Line wrapping enabled/disabled.\n2360 \n2361     num_columns : int or None, optional (default=None)\n2362         Number of columns before line breaking (default to None which reads\n2363         the terminal width), useful when using SymPy without terminal.\n2364 \n2365     use_unicode : bool or None, optional (default=None)\n2366         Use unicode characters, such as the Greek letter pi instead of\n2367         the string pi.\n2368 \n2369     full_prec : bool or string, optional (default=\"auto\")\n2370         Use full precision.\n2371 \n2372     order : bool or string, optional (default=None)\n2373         Set to 'none' for long expressions if slow; default is None.\n2374 \n2375     use_unicode_sqrt_char : bool, optional (default=True)\n2376         Use compact single-character square root symbol (when unambiguous).\n2377 \n2378     \"\"\"\n2379     print(pretty(expr, wrap_line=wrap_line, num_columns=num_columns,\n2380                  use_unicode=use_unicode, full_prec=full_prec, order=order,\n2381                  use_unicode_sqrt_char=use_unicode_sqrt_char))\n",
        "intended_behavior": "This method, responsible for pretty printing of expressions, should be enhanced to specifically check and properly format indexed expressions like 'indexed(x1, i)' into the desired mathematical notation, e.g., 'x_{1,i}'. The code should maintain its existing functionality for all other types of expressions while adding or refining the logic to handle indexed variables correctly. This could involve adding a conditional branch or modifying an existing one within the pretty printing logic to detect when the expression includes an indexed variable and apply the correct formatting rules."
    }
]