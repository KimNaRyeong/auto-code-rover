diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py
--- a/seaborn/_core/plot.py
+++ b/seaborn/_core/plot.py
@@ -1392,11 +1392,11 @@ def _setup_scales(
                         spec_error = PlotSpecError._during("Scaling operation", var)
                         raise spec_error from err
 
-            # Now the transformed data series are complete, set update the layer data
+            # Now the transformed data series are complete, update the layer data
             for layer, new_series in zip(layers, transformed_data):
                 layer_df = layer["data"].frame
                 if var in layer_df:
-                    layer_df[var] = new_series
+                    layer_df[var] = pd.to_numeric(new_series)
 
     def _plot_layer(self, p: Plot, layer: Layer) -> None:
 
diff --git a/seaborn/_core/rules.py b/seaborn/_core/rules.py
--- a/seaborn/_core/rules.py
+++ b/seaborn/_core/rules.py
@@ -74,6 +74,9 @@ def variable_type(
     if pd.isna(vector).all():
         return VarType("numeric")
 
+    # Now drop nulls to simplify further type inference
+    vector = vector.dropna()
+
     # Special-case binary/boolean data, allow caller to determine
     # This triggers a numpy warning when vector has strings/objects
     # https://github.com/numpy/numpy/issues/6784
@@ -94,7 +97,7 @@ def variable_type(
                 boolean_dtypes = ["bool"]
             boolean_vector = vector.dtype in boolean_dtypes
         else:
-            boolean_vector = bool(np.isin(vector.dropna(), [0, 1]).all())
+            boolean_vector = bool(np.isin(vector, [0, 1]).all())
         if boolean_vector:
             return VarType(boolean_type)
 
diff --git a/seaborn/_oldcore.py b/seaborn/_oldcore.py
--- a/seaborn/_oldcore.py
+++ b/seaborn/_oldcore.py
@@ -1128,7 +1128,7 @@ def comp_data(self):
                             # it is similar to GH2419, but more complicated because
                             # supporting `order` in categorical plots is tricky
                             orig = orig[orig.isin(self.var_levels[var])]
-                    comp = pd.to_numeric(converter.convert_units(orig))
+                    comp = pd.to_numeric(converter.convert_units(orig)).astype(float)
                     if converter.get_scale() == "log":
                         comp = np.log10(comp)
                     parts.append(pd.Series(comp, orig.index, name=orig.name))
@@ -1505,6 +1505,9 @@ def variable_type(vector, boolean_type="numeric"):
     if pd.isna(vector).all():
         return VariableType("numeric")
 
+    # At this point, drop nans to simplify further type inference
+    vector = vector.dropna()
+
     # Special-case binary/boolean data, allow caller to determine
     # This triggers a numpy warning when vector has strings/objects
     # https://github.com/numpy/numpy/issues/6784
@@ -1517,7 +1520,7 @@ def variable_type(vector, boolean_type="numeric"):
         warnings.simplefilter(
             action='ignore', category=(FutureWarning, DeprecationWarning)
         )
-        if np.isin(vector.dropna(), [0, 1]).all():
+        if np.isin(vector, [0, 1]).all():
             return VariableType(boolean_type)
 
     # Defer to positive pandas tests
