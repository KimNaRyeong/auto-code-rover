[
    {
        "rel_file_path": "sklearn/metrics/regression.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/scikit-learn__scikit-learn/setup_scikit-learn__scikit-learn__0.22/sklearn/metrics/regression.py",
        "start": 192,
        "end": 256,
        "class_name": null,
        "method_name": "mean_squared_error",
        "code": "192 def mean_squared_error(y_true, y_pred,\n193                        sample_weight=None,\n194                        multioutput='uniform_average'):\n195     \"\"\"Mean squared error regression loss\n196 \n197     Read more in the :ref:`User Guide <mean_squared_error>`.\n198 \n199     Parameters\n200     ----------\n201     y_true : array-like of shape = (n_samples) or (n_samples, n_outputs)\n202         Ground truth (correct) target values.\n203 \n204     y_pred : array-like of shape = (n_samples) or (n_samples, n_outputs)\n205         Estimated target values.\n206 \n207     sample_weight : array-like of shape = (n_samples), optional\n208         Sample weights.\n209 \n210     multioutput : string in ['raw_values', 'uniform_average']\n211         or array-like of shape (n_outputs)\n212         Defines aggregating of multiple output values.\n213         Array-like value defines weights used to average errors.\n214 \n215         'raw_values' :\n216             Returns a full set of errors in case of multioutput input.\n217 \n218         'uniform_average' :\n219             Errors of all outputs are averaged with uniform weight.\n220 \n221     Returns\n222     -------\n223     loss : float or ndarray of floats\n224         A non-negative floating point value (the best value is 0.0), or an\n225         array of floating point values, one for each individual target.\n226 \n227     Examples\n228     --------\n229     >>> from sklearn.metrics import mean_squared_error\n230     >>> y_true = [3, -0.5, 2, 7]\n231     >>> y_pred = [2.5, 0.0, 2, 8]\n232     >>> mean_squared_error(y_true, y_pred)\n233     0.375\n234     >>> y_true = [[0.5, 1],[-1, 1],[7, -6]]\n235     >>> y_pred = [[0, 2],[-1, 2],[8, -5]]\n236     >>> mean_squared_error(y_true, y_pred)\n237     0.708...\n238     >>> mean_squared_error(y_true, y_pred, multioutput='raw_values')\n239     array([0.41666667, 1.        ])\n240     >>> mean_squared_error(y_true, y_pred, multioutput=[0.3, 0.7])\n241     0.825...\n242 \n243     \"\"\"\n244     y_type, y_true, y_pred, multioutput = _check_reg_targets(\n245         y_true, y_pred, multioutput)\n246     check_consistent_length(y_true, y_pred, sample_weight)\n247     output_errors = np.average((y_true - y_pred) ** 2, axis=0,\n248                                weights=sample_weight)\n249     if isinstance(multioutput, str):\n250         if multioutput == 'raw_values':\n251             return output_errors\n252         elif multioutput == 'uniform_average':\n253             # pass None as weights to np.average: uniform mean\n254             multioutput = None\n255 \n256     return np.average(output_errors, weights=multioutput)\n",
        "intended_behavior": "This method should be extended or modified to support an additional parameter, e.g., 'squared', which defaults to 'True' to preserve existing functionality. When 'squared=False', the method should return the square root of the mean squared error, thereby calculating the RMSE. This modification should ensure backwards compatibility while offering additional functionality."
    }
]