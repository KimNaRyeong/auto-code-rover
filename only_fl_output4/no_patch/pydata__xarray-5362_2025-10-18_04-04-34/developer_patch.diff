diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py
--- a/xarray/core/weighted.py
+++ b/xarray/core/weighted.py
@@ -119,6 +119,19 @@ def _weight_check(w):
         self.obj: T_DataWithCoords = obj
         self.weights: "DataArray" = weights
 
+    def _check_dim(self, dim: Optional[Union[Hashable, Iterable[Hashable]]]):
+        """raise an error if any dimension is missing"""
+
+        if isinstance(dim, str) or not isinstance(dim, Iterable):
+            dims = [dim] if dim else []
+        else:
+            dims = list(dim)
+        missing_dims = set(dims) - set(self.obj.dims) - set(self.weights.dims)
+        if missing_dims:
+            raise ValueError(
+                f"{self.__class__.__name__} does not contain the dimensions: {missing_dims}"
+            )
+
     @staticmethod
     def _reduce(
         da: "DataArray",
@@ -236,6 +249,8 @@ def __repr__(self):
 class DataArrayWeighted(Weighted["DataArray"]):
     def _implementation(self, func, dim, **kwargs) -> "DataArray":
 
+        self._check_dim(dim)
+
         dataset = self.obj._to_temp_dataset()
         dataset = dataset.map(func, dim=dim, **kwargs)
         return self.obj._from_temp_dataset(dataset)
@@ -244,6 +259,8 @@ def _implementation(self, func, dim, **kwargs) -> "DataArray":
 class DatasetWeighted(Weighted["Dataset"]):
     def _implementation(self, func, dim, **kwargs) -> "Dataset":
 
+        self._check_dim(dim)
+
         return self.obj.map(func, dim=dim, **kwargs)
 
 
