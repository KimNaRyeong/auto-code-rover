[
    {
        "rel_file_path": "astropy/units/equivalencies.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/astropy__astropy/setup_astropy__astropy__3.0/astropy/units/equivalencies.py",
        "start": 579,
        "end": 636,
        "class_name": null,
        "method_name": "thermodynamic_temperature",
        "code": "579 def thermodynamic_temperature(frequency, T_cmb=None):\n580     r\"\"\"Defines the conversion between Jy/beam and \"thermodynamic temperature\",\n581     :math:`T_{CMB}`, in Kelvins.  The thermodynamic temperature is a unit very\n582     commonly used in cosmology. See eqn 8 in [1]\n583 \n584     :math:`K_{CMB} \\equiv I_\\nu / \\left(2 k \\nu^2 / c^2  f(\\nu) \\right)`\n585 \n586     with :math:`f(\\nu) = \\frac{ x^2 e^x}{(e^x - 1 )^2}`\n587     where :math:`x = h \\nu / k T`\n588 \n589     Parameters\n590     ----------\n591     frequency : `~astropy.units.Quantity` with spectral units\n592         The observed `spectral` equivalent `~astropy.units.Unit` (e.g.,\n593         frequency or wavelength)\n594     T_cmb :  `~astropy.units.Quantity` with temperature units (default Planck15 value)\n595         The CMB temperature at z=0\n596 \n597     Notes\n598     -----\n599     For broad band receivers, this conversion do not hold\n600     as it highly depends on the frequency\n601 \n602     References\n603     ----------\n604     .. [1] Planck 2013 results. IX. HFI spectral response\n605        https://arxiv.org/abs/1303.5070\n606 \n607     Examples\n608     --------\n609     Planck HFI 143 GHz::\n610 \n611         >>> from astropy import units as u\n612         >>> freq = 143 * u.GHz\n613         >>> equiv = u.thermodynamic_temperature(freq)\n614         >>> (1. * u.mK).to(u.MJy / u.sr, equivalencies=equiv)  # doctest: +FLOAT_CMP\n615         <Quantity 0.37993172 MJy / sr>\n616 \n617     \"\"\"\n618     nu = frequency.to(si.GHz, spectral())\n619 \n620     if T_cmb is None:\n621         from ..cosmology import Planck15\n622         T_cmb = Planck15.Tcmb0\n623 \n624     def f(nu, T_cmb=T_cmb):\n625         x = _si.h * nu / _si.k_B / T_cmb\n626         return x**2 * np.exp(x) / np.expm1(x)**2\n627 \n628     def convert_Jy_to_K(x_jybm):\n629         factor = (f(nu) * 2 * _si.k_B * si.K * nu**2 / _si.c**2).to_value(astrophys.Jy)\n630         return x_jybm / factor\n631 \n632     def convert_K_to_Jy(x_K):\n633         factor = (astrophys.Jy / (f(nu) * 2 * _si.k_B * nu**2 / _si.c**2)).to_value(si.K)\n634         return x_K / factor\n635 \n636     return [(astrophys.Jy/si.sr, si.K, convert_Jy_to_K, convert_K_to_Jy)]\n",
        "intended_behavior": "To resolve the inconsistency, this function should ideally use the default_cosmology.get() for determining the value of T_cmb when it is None, just like with_H0 uses the default cosmology to determine H0. This modification would ensure that both equivalencies are using the current default cosmology from the same source, preserving existing functionality while making the choice of default cosmology consistent across the library."
    },
    {
        "rel_file_path": "astropy/units/equivalencies.py",
        "abs_file_path": "/home/kimnal0/auto-code-rover/SWE-bench/testbed/astropy__astropy/setup_astropy__astropy__3.0/astropy/units/equivalencies.py",
        "start": 708,
        "end": 731,
        "class_name": null,
        "method_name": "with_H0",
        "code": "708 def with_H0(H0=None):\n709     \"\"\"\n710     Convert between quantities with little-h and the equivalent physical units.\n711 \n712     Parameters\n713     ----------\n714     H0 : `None` or `~astropy.units.Quantity`\n715         The value of the Hubble constant to assume. If a `~astropy.units.Quantity`,\n716         will assume the quantity *is* ``H0``.  If `None` (default), use the\n717         ``H0`` attribute from the default `astropy.cosmology` cosmology.\n718 \n719     References\n720     ----------\n721     For an illuminating discussion on why you may or may not want to use\n722     little-h at all, see https://arxiv.org/pdf/1308.4150.pdf\n723     \"\"\"\n724 \n725     if H0 is None:\n726         from .. import cosmology\n727         H0 = cosmology.default_cosmology.get().H0\n728 \n729     h100_val_unit = Unit(H0.to((si.km/si.s)/astrophys.Mpc).value/100 * astrophys.littleh)\n730 \n731     return [(h100_val_unit, None)]\n",
        "intended_behavior": "Although this method is already using default_cosmology.get() to source the default value of H0, ensuring that the mentioned change to the thermodynamic_temperature equivalency does not conflict with its operation is crucial. The intended behavior here remains unchanged but warrants a review to ensure consistency is upheld following any changes in how the default cosmology is determined or if the default cosmology itself changes (e.g., from WMAP9 to Planck 2015)."
    }
]